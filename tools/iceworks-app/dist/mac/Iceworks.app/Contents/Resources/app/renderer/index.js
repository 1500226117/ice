module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded CSS chunks
/******/ 	var installedCssChunks = {
/******/ 		11: 0
/******/ 	}
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		11: 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + ({"0":"vendors~blocks~home~scaffolds~settings","3":"vendors~blocks~home~scaffolds","4":"vendors~home~scaffolds~settings","5":"vendors~home~settings","8":"blocks","9":"extenstions","10":"home","13":"scaffolds","14":"settings"}[chunkId]||chunkId) + ".js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// mini-css-extract-plugin CSS loading
/******/ 		var cssChunks = {"0":1,"3":1,"4":1,"5":1,"6":1,"8":1,"9":1,"10":1,"13":1,"14":1,"16":1};
/******/ 		if(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);
/******/ 		else if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {
/******/ 			promises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {
/******/ 				var href = "" + chunkId + ".css";
/******/ 				var fullhref = __webpack_require__.p + href;
/******/ 				var existingLinkTags = document.getElementsByTagName("link");
/******/ 				for(var i = 0; i < existingLinkTags.length; i++) {
/******/ 					var tag = existingLinkTags[i];
/******/ 					var dataHref = tag.getAttribute("data-href") || tag.getAttribute("href");
/******/ 					if(tag.rel === "stylesheet" && (dataHref === href || dataHref === fullhref)) return resolve();
/******/ 				}
/******/ 				var existingStyleTags = document.getElementsByTagName("style");
/******/ 				for(var i = 0; i < existingStyleTags.length; i++) {
/******/ 					var tag = existingStyleTags[i];
/******/ 					var dataHref = tag.getAttribute("data-href");
/******/ 					if(dataHref === href || dataHref === fullhref) return resolve();
/******/ 				}
/******/ 				var linkTag = document.createElement("link");
/******/ 				linkTag.rel = "stylesheet";
/******/ 				linkTag.type = "text/css";
/******/ 				linkTag.onload = resolve;
/******/ 				linkTag.onerror = function(event) {
/******/ 					var request = event && event.target && event.target.src || fullhref;
/******/ 					var err = new Error("Loading CSS chunk " + chunkId + " failed.\n(" + request + ")");
/******/ 					err.request = request;
/******/ 					delete installedCssChunks[chunkId]
/******/ 					linkTag.parentNode.removeChild(linkTag)
/******/ 					reject(err);
/******/ 				};
/******/ 				linkTag.href = fullhref;
/******/ 				var head = document.getElementsByTagName("head")[0];
/******/ 				head.appendChild(linkTag);
/******/ 			}).then(function() {
/******/ 				installedCssChunks[chunkId] = 0;
/******/ 			}));
/******/ 		}
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							var error = new Error('Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')');
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push([314,1,2]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = window.mobx;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = window.React;

/***/ }),
/* 2 */,
/* 3 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("electron");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = window.ReactDOM;

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_0__);

var services = electron__WEBPACK_IMPORTED_MODULE_0__["remote"].getGlobal('services');
/* harmony default export */ __webpack_exports__["a"] = (services);

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var electron_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(31);
/* harmony import */ var electron_log__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(electron_log__WEBPACK_IMPORTED_MODULE_0__);

electron_log__WEBPACK_IMPORTED_MODULE_0___default.a.transports.file.fileName = 'renderer.log';
electron_log__WEBPACK_IMPORTED_MODULE_0___default.a.transports.file.level = 'info';

electron_log__WEBPACK_IMPORTED_MODULE_0___default.a.transports.arms = function (msg) {
  // eslint-disable-next-line
  window.__bl && __bl.error(msg.data[0]);
};

electron_log__WEBPACK_IMPORTED_MODULE_0___default.a.transports.arms.level = 'error';
/* harmony default export */ __webpack_exports__["a"] = (electron_log__WEBPACK_IMPORTED_MODULE_0___default.a);

/***/ }),
/* 8 */,
/* 9 */,
/* 10 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: external "electron"
var external_electron_ = __webpack_require__(4);

// EXTERNAL MODULE: external "window.mobx"
var external_window_mobx_ = __webpack_require__(0);

// EXTERNAL MODULE: external "events"
var external_events_ = __webpack_require__(32);
var external_events_default = /*#__PURE__*/__webpack_require__.n(external_events_);

// EXTERNAL MODULE: ./renderer/node_modules/@icedesign/notification/lib/index.js
var lib = __webpack_require__(44);
var lib_default = /*#__PURE__*/__webpack_require__.n(lib);

// EXTERNAL MODULE: ./node_modules/fs-extra/lib/index.js
var fs_extra_lib = __webpack_require__(27);
var fs_extra_lib_default = /*#__PURE__*/__webpack_require__.n(fs_extra_lib);

// EXTERNAL MODULE: external "os"
var external_os_ = __webpack_require__(34);
var external_os_default = /*#__PURE__*/__webpack_require__.n(external_os_);

// EXTERNAL MODULE: external "path"
var external_path_ = __webpack_require__(3);
var external_path_default = /*#__PURE__*/__webpack_require__.n(external_path_);

// EXTERNAL MODULE: ./node_modules/path-exists/index.js
var path_exists = __webpack_require__(35);
var path_exists_default = /*#__PURE__*/__webpack_require__.n(path_exists);

// EXTERNAL MODULE: ./node_modules/semver/semver.js
var semver = __webpack_require__(117);
var semver_default = /*#__PURE__*/__webpack_require__.n(semver);

// EXTERNAL MODULE: ./renderer/src/lib/project-utils.js
var project_utils = __webpack_require__(46);

// EXTERNAL MODULE: ./renderer/src/lib/logger.js
var logger = __webpack_require__(7);

// EXTERNAL MODULE: ./renderer/src/services.js
var services = __webpack_require__(6);

// CONCATENATED MODULE: ./renderer/src/stores/project.js
var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _temp;

function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }












var IceworksScaffolder = external_electron_["remote"].require('@icedesign/iceworks-scaffolder');

var project_paths = services["a" /* default */].paths,
    scaffolder = services["a" /* default */].scaffolder;
var getClientPath = project_paths.getClientPath,
    getClientSrcPath = project_paths.getClientSrcPath,
    NODE_FRAMEWORKS = project_paths.NODE_FRAMEWORKS,
    getServerPath = project_paths.getServerPath;
var homeDir = external_os_default.a.homedir();
/**
 * 项目状态存储管理，以所在目录为唯一坐标值。
 */

var project_Project = (_class = (_temp =
/*#__PURE__*/
function () {
  // build 命令
  // start 命令
  // 所有项目安装中

  /**
   * 服务状态
   *
   * @enum {string} ['normal', 'starting', 'working', 'stop', 'notexist', 'failed']
   */
  // 项目的编译状态
  // 编译进度
  // 编译进度
  // 是否为新项目? 新项目首次打开提示安装依赖
  // 服务端模板类型
  // data
  function Project(_ref) {
    var path = _ref.path,
        _ref$needInstallDeps = _ref.needInstallDeps,
        needInstallDeps = _ref$needInstallDeps === void 0 ? false : _ref$needInstallDeps;

    _classCallCheck(this, Project);

    _initializerDefineProperty(this, "hasScriptsBuild", _descriptor, this);

    _initializerDefineProperty(this, "hasScriptsStart", _descriptor2, this);

    _initializerDefineProperty(this, "isDependenciesInstalling", _descriptor3, this);

    _initializerDefineProperty(this, "isPageCreating", _descriptor4, this);

    _initializerDefineProperty(this, "isProjectExist", _descriptor5, this);

    _initializerDefineProperty(this, "projectName", _descriptor6, this);

    _initializerDefineProperty(this, "pkgData", _descriptor7, this);

    _initializerDefineProperty(this, "logs", _descriptor8, this);

    _initializerDefineProperty(this, "terminalVisible", _descriptor9, this);

    _initializerDefineProperty(this, "statusDev", _descriptor10, this);

    _initializerDefineProperty(this, "statusBuild", _descriptor11, this);

    _initializerDefineProperty(this, "serverUrl", _descriptor12, this);

    _initializerDefineProperty(this, "serverPort", _descriptor13, this);

    _initializerDefineProperty(this, "statusCompile", _descriptor14, this);

    _initializerDefineProperty(this, "statusCompileProgress", _descriptor15, this);

    _initializerDefineProperty(this, "statusCloudBuild", _descriptor16, this);

    _initializerDefineProperty(this, "needInstallDeps", _descriptor17, this);

    _initializerDefineProperty(this, "nodeFramework", _descriptor18, this);

    _initializerDefineProperty(this, "layouts", _descriptor19, this);

    this.root = path;
    this.needInstallDeps = needInstallDeps;
    this.pkgData = this.getPkgData();
    this.nodeFramework = this.validateNodeProject(this.pkgData);
    this.isProjectExist = !!this.pkgData; // 初始化判断项目状态

    if (!this.isProjectExist) {
      this.statusDev = 'notexist';
    }

    this.projectName = this.pkgData && this.pkgData.title || Object(project_utils["c" /* getDefaultProjectName */])(this.fullPath);
    this.hasScriptsStart = !!(this.pkgData && this.pkgData.scripts && this.pkgData.scripts.start);
    this.hasScriptsBuild = !!(this.pkgData && this.pkgData.scripts && this.pkgData.scripts.build);
    this.scaffold = new IceworksScaffolder({
      cwd: this.root,
      interpreter: function interpreter(_ref2, next) {
        var type = _ref2.type,
            message = _ref2.message,
            data = _ref2.data;
        logger["a" /* default */].info(type, message, data);

        switch (type) {
          case 'EMTPY_PAGE_TEMPLATE':
            next(false);
            break;

          default:
            next(true);
        }
      }
    });
  }
  /**
   * 相对 os.homedir() 的路径
   */


  _createClass(Project, [{
    key: "getPkgData",

    /**
     * 获取 package.json 文件内容：
     *    这里其实是指前端模板的package.json，引入服务端模板后，
     *    前端模板package.json路径变更。
     * @return Object package.json content
     */
    value: function getPkgData() {
      var pkgPath = external_path_default.a.join(this.root, 'package.json');

      try {
        var pkgData = fs_extra_lib_default.a.readFileSync(pkgPath);
        pkgData = JSON.parse(String(pkgData)); // 获取项目模板类型，如果为node模板，则重新获取package.json

        var nodeFramework = this.validateNodeProject(pkgData);

        if (NODE_FRAMEWORKS.includes(nodeFramework)) {
          var clientPath = getClientPath(this.root, nodeFramework);
          pkgPath = external_path_default.a.join(clientPath, 'package.json');
          pkgData = fs_extra_lib_default.a.readFileSync(pkgPath);
          pkgData = JSON.parse(String(pkgData));
        }

        return pkgData;
      } catch (e) {
        logger["a" /* default */].error(new Error("".concat(pkgPath, " \u4E0D\u5B58\u5728")));
        return null;
      }
    }
  }, {
    key: "updatePkgData",
    value: function updatePkgData() {
      var newPkgData = this.getPkgData();
      this.pkgData = newPkgData;
      this.isProjectExist = !!this.pkgData; // 初始化判断项目状态

      if (!this.isProjectExist) {
        this.statusDev = 'notexist';
      } else {
        this.statusDev = 'normal';
      }

      this.projectName = this.pkgData && this.pkgData.title || Object(project_utils["c" /* getDefaultProjectName */])(this.fullPath);
      this.hasScriptsStart = !!(this.pkgData && this.pkgData.scripts && this.pkgData.scripts.start);
      this.hasScriptsBuild = !!(this.pkgData && this.pkgData.scripts && this.pkgData.scripts.build);
    }
    /**
     * 获取项目类型，返回 react / vue 等，
     * 以项目的框架语言为特征
     * @enum ['vue', 'react', '']
     */

  }, {
    key: "getLibraryType",
    value: function getLibraryType() {
      var pkgData = this.getPkgData();
      var defaultType = 'react';

      if (!pkgData) {
        return defaultType;
      }

      var libraryType = pkgData && pkgData.scaffoldConfig && pkgData.scaffoldConfig.type;

      if (libraryType) {
        return libraryType;
      }

      var dependencies = pkgData.dependencies || {};
      var devDependencies = pkgData.devDependencies || {};
      var allDeps = Object.keys(dependencies).concat(Object.keys(devDependencies)); // 特征检测

      var vueDeps = ['@vue/cli-service', 'vue'];
      var reactDeps = ['ice-scripts'];
      var angularDeps = ['@angular/cli']; // 不够通用的逻辑

      var hasVue = vueDeps.some(function (d) {
        return allDeps.includes(d);
      });
      var hasReact = reactDeps.some(function (d) {
        return allDeps.includes(d);
      });
      var reactWithoutIce = this.pkgData.templateType && this.pkgData.templateType === 'react';
      var hasAngularCli = angularDeps.some(function (d) {
        return allDeps.includes(d);
      });

      if (hasVue) {
        defaultType = 'vue';
      } else if (hasReact) {
        defaultType = 'react';
      } else if (reactWithoutIce) {
        defaultType = 'react';
      } else if (hasAngularCli) {
        defaultType = 'angular';
      }

      return defaultType;
    }
    /**
     * 获取项目应用类型，返回 react/ ice / angular / rax 等，
     * 以项目的脚手架来判断
     * @enum ['ice', 'react']
     *  - react 表示社区数据
     *  - ice 表示为相关脚手架
     */

  }, {
    key: "getApplicationType",
    value: function getApplicationType() {
      var pkgData = this.getPkgData();
      var defaultType = '';

      if (!pkgData) {
        return defaultType;
      }

      var scaffoldConfig = pkgData.scaffoldConfig || {};
      var dependencies = pkgData.dependencies || {};
      var devDependencies = pkgData.devDependencies || {};

      if (scaffoldConfig.appType) {
        return scaffoldConfig.appType;
      }

      var allDeps = Object.keys(dependencies).concat(Object.keys(devDependencies)); // 特征检测

      var vueDeps = ['@vue/cli-service', 'vue'];
      var reactDeps = ['ice-scripts'];
      var angularDeps = ['@angular/cli']; // 不够通用的逻辑

      var hasVue = vueDeps.some(function (d) {
        return allDeps.includes(d);
      });
      var hasReact = reactDeps.some(function (d) {
        return allDeps.includes(d);
      });
      var reactWithoutIce = this.pkgData.templateType && this.pkgData.templateType === 'react';
      var customIceMaterial = this.pkgData.templateType && this.pkgData.templateType === 'custom';
      var hasAngularCli = angularDeps.some(function (d) {
        return allDeps.includes(d);
      });

      if (hasVue) {
        defaultType = 'ice';
      } else if (hasReact) {
        defaultType = 'ice';
      } else if (customIceMaterial) {
        defaultType = 'ice';
      } else if (reactWithoutIce) {
        defaultType = 'react';
      } else if (hasAngularCli) {
        defaultType = 'angular';
      }

      return defaultType;
    }
  }, {
    key: "batchUpdate",
    value: function batchUpdate(data) {
      // eslint-disable-next-line
      for (var key in data) {
        this[key] = data[key];
      }
    } // 启动调试服务

  }, {
    key: "devStart",
    value: function devStart() {
      this.statusDev = 'working';
      this.statusCompileProgress = 0;
    } // 停止调试服务

  }, {
    key: "devStop",
    value: function devStop() {
      this.statusDev = 'stop';
      this.statusCompileProgress = 0;
      this.serverUrl = '';
    }
  }, {
    key: "buildStart",
    value: function buildStart() {
      this.statusBuild = 'building';
    }
  }, {
    key: "buildDone",
    value: function buildDone() {
      this.statusBuild = 'done';
    }
  }, {
    key: "buildFailed",
    value: function buildFailed() {
      this.statusBuild = 'failed';
    }
  }, {
    key: "installStart",
    value: function installStart() {
      this.isDependenciesInstalling = true;
    }
  }, {
    key: "installDone",
    value: function installDone() {
      this.isDependenciesInstalling = false;
    }
  }, {
    key: "toggleTerminal",
    value: function toggleTerminal() {
      this.terminalVisible = !this.terminalVisible;
    }
  }, {
    key: "setNeedInstallDeps",
    value: function setNeedInstallDeps(value) {
      this.needInstallDeps = value;
    }
  }, {
    key: "setCloudBuild",
    value: function setCloudBuild(value) {
      this.statusCloudBuild = value;
    } // 获取状态

  }, {
    key: "validateNodeProject",
    value: function validateNodeProject(pkgData) {
      if (pkgData) {
        // 兼容老koa模板
        if (pkgData.templateType === 'Koa' || pkgData.templateType === 'koa') {
          return 'koa';
        } else if (NODE_FRAMEWORKS.includes(pkgData.templateType)) {
          return pkgData.templateType;
        }

        return '';
      }

      return '';
    }
  }, {
    key: "path",
    get: function get() {
      return "~/".concat(external_path_default.a.relative(homeDir, this.root));
    }
    /**
     * 完整路径
     */

  }, {
    key: "fullPath",
    get: function get() {
      return this.root;
    }
    /**
     * 前端项目路径
     * koa、koa2、midway: /client
     * 常规项目：/
     */

  }, {
    key: "clientPath",
    get: function get() {
      return getClientPath(this.root, this.nodeFramework);
    }
    /**
     * 前端资源路径
     */

  }, {
    key: "clientSrcPath",
    get: function get() {
      return getClientSrcPath(this.root, this.nodeFramework);
    }
    /**
     * 前端项目路径
     */

  }, {
    key: "serverPath",
    get: function get() {
      return getServerPath(this.root, this.nodeFramework);
    }
  }, {
    key: "iceVersion",
    get: function get() {
      var utils = scaffolder.utils;
      var pkg = this.getPkgData();
      return utils.getProjectVersion(pkg);
    }
  }, {
    key: "isWorking",
    get: function get() {
      return this.statusDev === 'working';
    } // 操作不可用

  }, {
    key: "actionDisabled",
    get: function get() {
      return !this.isProjectExist || this.isDependenciesInstalling;
    }
    /** 检测项目可用性 */

  }, {
    key: "isUnavailable",
    get: function get() {
      if (!this.pkgData) {
        return true;
      }

      var icescriptsRequired = this.pkgData.devDependencies && (this.pkgData.devDependencies['ice-scripts'] || this.pkgData.devDependencies['@vue/cli-service']); // support create-react-app

      var reactWithoutIceValidate = this.pkgData.templateType && this.pkgData.templateType === 'react'; // 关键字匹配，存在 ice-scaffold 字符表示适配 iceworks

      var keywordsHasIce = (this.pkgData.keywords || []).includes('ice-scaffold');
      var icesdriptsVersion = semver_default.a.valid(semver_default.a.coerce(icescriptsRequired)); // todo vue cli 是被 hack 通过检测，需要后面抽出套机进行处理

      var icescriptsAvailable = icescriptsRequired === 'latest' || icescriptsRequired === 'beta' || icesdriptsVersion && semver_default.a.gte(icesdriptsVersion, '1.0.0');
      var unavailable = !(this.exists && this.isProjectExist && this.hasScriptsBuild && this.hasScriptsStart && (icescriptsAvailable || reactWithoutIceValidate || keywordsHasIce));
      return unavailable;
    }
  }, {
    key: "exists",
    get: function get() {
      return path_exists_default.a.sync(this.fullPath);
    }
  }]);

  return Project;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "hasScriptsBuild", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "hasScriptsStart", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "isDependenciesInstalling", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "isPageCreating", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "isProjectExist", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return true;
  }
}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "projectName", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "pkgData", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "logs", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "terminalVisible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "statusDev", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'normal';
  }
}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "statusBuild", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'normal';
  }
}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "serverUrl", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "serverPort", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 4444;
  }
}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "statusCompile", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'normal';
  }
}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "statusCompileProgress", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "statusCloudBuild", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'normal';
  }
}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "needInstallDeps", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, "nodeFramework", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, "layouts", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), _applyDecoratedDescriptor(_class.prototype, "fullPath", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(_class.prototype, "fullPath"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "clientPath", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(_class.prototype, "clientPath"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "clientSrcPath", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(_class.prototype, "clientSrcPath"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "serverPath", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(_class.prototype, "serverPath"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "iceVersion", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(_class.prototype, "iceVersion"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updatePkgData", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "updatePkgData"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "batchUpdate", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "batchUpdate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "devStart", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "devStart"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "devStop", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "devStop"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "buildStart", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "buildStart"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "buildDone", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "buildDone"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "buildFailed", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "buildFailed"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "installStart", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "installStart"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "installDone", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "installDone"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleTerminal", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "toggleTerminal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setNeedInstallDeps", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "setNeedInstallDeps"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setCloudBuild", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "setCloudBuild"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "isWorking", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(_class.prototype, "isWorking"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "actionDisabled", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(_class.prototype, "actionDisabled"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "isUnavailable", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(_class.prototype, "isUnavailable"), _class.prototype)), _class);
/* harmony default export */ var project = (project_Project);
// CONCATENATED MODULE: ./renderer/src/stores/projects.js
var projects_class, projects_descriptor, projects_descriptor2, projects_temp;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function projects_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function projects_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function projects_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function projects_createClass(Constructor, protoProps, staticProps) { if (protoProps) projects_defineProperties(Constructor.prototype, protoProps); if (staticProps) projects_defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function projects_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function projects_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }




 // store

 // utils




var folder = services["a" /* default */].folder,
    storage = services["a" /* default */].storage,
    interaction = services["a" /* default */].interaction;
var projectsStorage = storage.projectsStorage,
    recordStorage = storage.recordStorage;
/* eslint no-console:off */

/** 项目列表存储管理 */

var projects_Projects = (projects_class = (projects_temp =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Projects, _EventEmitter);

  // 项目列表
  // 当前项目
  // 安装面板可见
  function Projects() {
    var _this;

    projects_classCallCheck(this, Projects);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Projects).call(this));

    projects_initializerDefineProperty(_this, "list", projects_descriptor, _assertThisInitialized(_assertThisInitialized(_this)));

    projects_initializerDefineProperty(_this, "currentProject", projects_descriptor2, _assertThisInitialized(_assertThisInitialized(_this)));

    external_electron_["ipcRenderer"].on('menu:project:clearall', function () {
      interaction.confirm({
        type: 'warning',
        title: '提示',
        message: '是否清空项目列表？'
      }, function () {
        projectsStorage.delete();
        _this.list = [];

        _this.setProject(null);
      });
    });
    var initProjectPaths = projectsStorage.dataSource || [];
    _this.list = initProjectPaths.filter(function (v) {
      return !!v;
    }).map(function (path) {
      return new project({
        path: path
      });
    });
    var lastWorkProject = recordStorage.get();
    var firstProject = _this.list[0];

    _this.setProject(_this.getProject(lastWorkProject) || firstProject || null);

    Object(external_window_mobx_["autorun"])(function () {
      // list 的变更实时的保存到 storage 中持久化
      var allProjectPaths = _this.list.map(function (project) {
        return project.fullPath;
      }).filter(function (v) {
        return !!v;
      });

      projectsStorage.set(allProjectPaths);
    }); // ipcRenderer.on('terminal-output', (event, { path: processCwd, data }) => {
    //   const project = this.getProject(processCwd);
    //   if (project) {
    //     project.appendLog(data);
    //   }
    // });

    return _this;
  }

  projects_createClass(Projects, [{
    key: "add",

    /**
     * 添加项目到列表中
     * @param {string} path 项目地址
     */
    value: function add(path, needInstallDeps) {
      // 避免重复添加
      var newValue = this.list.filter(function (project) {
        return project.fullPath !== path;
      });
      newValue.unshift(new project({
        path: path,
        needInstallDeps: needInstallDeps
      }));
      this.list = newValue; // 像项目添加时，总是将当前添加的作为当前项目

      this.setProject(this.list[0]);
    }
    /** 打开一个已存在的项目，并添加到项目中 */

  }, {
    key: "addFromFinder",
    value: function addFromFinder() {
      var _this2 = this;

      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
      folder.selector().then(
      /*#__PURE__*/
      function () {
        var _ref = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee(paths) {
          var selectedPath, isLegalProject;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(paths && paths.length > 0)) {
                    _context.next = 6;
                    break;
                  }

                  selectedPath = paths[0];
                  _context.next = 4;
                  return Object(project_utils["d" /* isProject */])(selectedPath);

                case 4:
                  isLegalProject = _context.sent;

                  if (_this2.has(selectedPath)) {
                    lib_default.a.info({
                      message: '已选目录已在 iceworks 项目列表中'
                    });

                    _this2.add(selectedPath);

                    callback(null, selectedPath);
                  } else if (isLegalProject) {
                    _this2.add(selectedPath);

                    lib_default.a.success({
                      message: '项目添加成功'
                    });
                    callback(null, selectedPath);
                  } else {
                    lib_default.a.warning({
                      message: '已选目录 iceworks 无法识别支持，请重新选择'
                    });
                    setTimeout(function () {
                      _this2.addFromFinder(callback);
                    }, 800);
                  }

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }()).catch(function () {
        logger["a" /* default */].info('取消选择');
      });
    }
  }, {
    key: "remove",
    value: function remove(path, shiftDelete) {
      logger["a" /* default */].debug('删除项目', path, shiftDelete);

      if (shiftDelete) {
        var trashRemove = external_electron_["shell"].moveItemToTrash(path);
        logger["a" /* default */].debug('删除到回收站', trashRemove);
      }

      var isRemoveCurrent = this.currentProject && this.currentProject.fullPath === path;
      this.list = this.list.filter(function (project) {
        return project.fullPath !== path;
      });

      if (isRemoveCurrent) {
        if (this.list.length > 0) {
          this.setProject(this.list[0]);
        } else {
          this.setProject(null);
        }
      }
    }
  }, {
    key: "has",
    value: function has(path) {
      return this.list.some(function (project) {
        return project.fullPath === path;
      });
    }
  }, {
    key: "getProject",
    value: function getProject(path) {
      if (!path) return null;
      var currentProject = this.list.filter(function (project) {
        return project.fullPath === path;
      });

      if (currentProject && currentProject.length) {
        return currentProject[0];
      }

      return null;
    }
    /**
     * 设置当前项目的路径
     */

  }, {
    key: "setCurrentProject",
    value: function setCurrentProject(path) {
      this.setProject(this.getProject(path));
    }
  }, {
    key: "setProject",
    value: function setProject(project) {
      if (project) {
        recordStorage.set(project.fullPath);
      }

      this.currentProject = project;

      if (this.currentProject && this.currentProject.exists) {
        this.emit('change');
      }
    }
  }, {
    key: "isEmpty",
    get: function get() {
      return this.list.length === 0;
    }
  }]);

  return Projects;
}(external_events_default.a), projects_temp), (projects_descriptor = projects_applyDecoratedDescriptor(projects_class.prototype, "list", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), projects_descriptor2 = projects_applyDecoratedDescriptor(projects_class.prototype, "currentProject", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), projects_applyDecoratedDescriptor(projects_class.prototype, "isEmpty", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(projects_class.prototype, "isEmpty"), projects_class.prototype), projects_applyDecoratedDescriptor(projects_class.prototype, "add", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(projects_class.prototype, "add"), projects_class.prototype), projects_applyDecoratedDescriptor(projects_class.prototype, "addFromFinder", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(projects_class.prototype, "addFromFinder"), projects_class.prototype), projects_applyDecoratedDescriptor(projects_class.prototype, "remove", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(projects_class.prototype, "remove"), projects_class.prototype), projects_applyDecoratedDescriptor(projects_class.prototype, "has", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(projects_class.prototype, "has"), projects_class.prototype), projects_applyDecoratedDescriptor(projects_class.prototype, "getProject", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(projects_class.prototype, "getProject"), projects_class.prototype), projects_applyDecoratedDescriptor(projects_class.prototype, "setCurrentProject", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(projects_class.prototype, "setCurrentProject"), projects_class.prototype), projects_applyDecoratedDescriptor(projects_class.prototype, "setProject", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(projects_class.prototype, "setProject"), projects_class.prototype)), projects_class);
var projects = new projects_Projects();
projects.setMaxListeners(100);
/* harmony default export */ var stores_projects = __webpack_exports__["a"] = (projects);

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var fs = __webpack_require__(11)
var polyfills = __webpack_require__(473)
var legacy = __webpack_require__(475)
var clone = __webpack_require__(476)

var queue = []

var util = __webpack_require__(10)

function noop () {}

var debug = noop
if (util.debuglog)
  debug = util.debuglog('gfs4')
else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
  debug = function() {
    var m = util.format.apply(util, arguments)
    m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
    console.error(m)
  }

if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
  process.on('exit', function() {
    debug(queue)
    __webpack_require__(49).equal(queue.length, 0)
  })
}

module.exports = patch(clone(fs))
if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
    module.exports = patch(fs)
    fs.__patched = true;
}

// Always patch fs.close/closeSync, because we want to
// retry() whenever a close happens *anywhere* in the program.
// This is essential when multiple graceful-fs instances are
// in play at the same time.
module.exports.close = (function (fs$close) { return function (fd, cb) {
  return fs$close.call(fs, fd, function (err) {
    if (!err)
      retry()

    if (typeof cb === 'function')
      cb.apply(this, arguments)
  })
}})(fs.close)

module.exports.closeSync = (function (fs$closeSync) { return function (fd) {
  // Note that graceful-fs also retries when fs.closeSync() fails.
  // Looks like a bug to me, although it's probably a harmless one.
  var rval = fs$closeSync.apply(fs, arguments)
  retry()
  return rval
}})(fs.closeSync)

// Only patch fs once, otherwise we'll run into a memory leak if
// graceful-fs is loaded multiple times, such as in test environments that
// reset the loaded modules between tests.
// We look for the string `graceful-fs` from the comment above. This
// way we are not adding any extra properties and it will detect if older
// versions of graceful-fs are installed.
if (!/\bgraceful-fs\b/.test(fs.closeSync.toString())) {
  fs.closeSync = module.exports.closeSync;
  fs.close = module.exports.close;
}

function patch (fs) {
  // Everything that references the open() function needs to be in here
  polyfills(fs)
  fs.gracefulify = patch
  fs.FileReadStream = ReadStream;  // Legacy name.
  fs.FileWriteStream = WriteStream;  // Legacy name.
  fs.createReadStream = createReadStream
  fs.createWriteStream = createWriteStream
  var fs$readFile = fs.readFile
  fs.readFile = readFile
  function readFile (path, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$readFile(path, options, cb)

    function go$readFile (path, options, cb) {
      return fs$readFile(path, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$readFile, [path, options, cb]])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
          retry()
        }
      })
    }
  }

  var fs$writeFile = fs.writeFile
  fs.writeFile = writeFile
  function writeFile (path, data, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$writeFile(path, data, options, cb)

    function go$writeFile (path, data, options, cb) {
      return fs$writeFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$writeFile, [path, data, options, cb]])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
          retry()
        }
      })
    }
  }

  var fs$appendFile = fs.appendFile
  if (fs$appendFile)
    fs.appendFile = appendFile
  function appendFile (path, data, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$appendFile(path, data, options, cb)

    function go$appendFile (path, data, options, cb) {
      return fs$appendFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$appendFile, [path, data, options, cb]])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
          retry()
        }
      })
    }
  }

  var fs$readdir = fs.readdir
  fs.readdir = readdir
  function readdir (path, options, cb) {
    var args = [path]
    if (typeof options !== 'function') {
      args.push(options)
    } else {
      cb = options
    }
    args.push(go$readdir$cb)

    return go$readdir(args)

    function go$readdir$cb (err, files) {
      if (files && files.sort)
        files.sort()

      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
        enqueue([go$readdir, [args]])

      else {
        if (typeof cb === 'function')
          cb.apply(this, arguments)
        retry()
      }
    }
  }

  function go$readdir (args) {
    return fs$readdir.apply(fs, args)
  }

  if (process.version.substr(0, 4) === 'v0.8') {
    var legStreams = legacy(fs)
    ReadStream = legStreams.ReadStream
    WriteStream = legStreams.WriteStream
  }

  var fs$ReadStream = fs.ReadStream
  if (fs$ReadStream) {
    ReadStream.prototype = Object.create(fs$ReadStream.prototype)
    ReadStream.prototype.open = ReadStream$open
  }

  var fs$WriteStream = fs.WriteStream
  if (fs$WriteStream) {
    WriteStream.prototype = Object.create(fs$WriteStream.prototype)
    WriteStream.prototype.open = WriteStream$open
  }

  fs.ReadStream = ReadStream
  fs.WriteStream = WriteStream

  function ReadStream (path, options) {
    if (this instanceof ReadStream)
      return fs$ReadStream.apply(this, arguments), this
    else
      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
  }

  function ReadStream$open () {
    var that = this
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        if (that.autoClose)
          that.destroy()

        that.emit('error', err)
      } else {
        that.fd = fd
        that.emit('open', fd)
        that.read()
      }
    })
  }

  function WriteStream (path, options) {
    if (this instanceof WriteStream)
      return fs$WriteStream.apply(this, arguments), this
    else
      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
  }

  function WriteStream$open () {
    var that = this
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        that.destroy()
        that.emit('error', err)
      } else {
        that.fd = fd
        that.emit('open', fd)
      }
    })
  }

  function createReadStream (path, options) {
    return new ReadStream(path, options)
  }

  function createWriteStream (path, options) {
    return new WriteStream(path, options)
  }

  var fs$open = fs.open
  fs.open = open
  function open (path, flags, mode, cb) {
    if (typeof mode === 'function')
      cb = mode, mode = null

    return go$open(path, flags, mode, cb)

    function go$open (path, flags, mode, cb) {
      return fs$open(path, flags, mode, function (err, fd) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$open, [path, flags, mode, cb]])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
          retry()
        }
      })
    }
  }

  return fs
}

function enqueue (elem) {
  debug('ENQUEUE', elem[0].name, elem[1])
  queue.push(elem)
}

function retry () {
  var elem = queue.shift()
  if (elem) {
    debug('RETRY', elem[0].name, elem[1])
    elem[0].apply(null, elem[1])
  }
}


/***/ }),
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _iconfont_iconfont_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(163);
/* harmony import */ var _iconfont_iconfont_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_iconfont_iconfont_css__WEBPACK_IMPORTED_MODULE_3__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// http://www.iconfont.cn/manage/index?manage_type=myprojects&projectId=568722&keyword=
// 使用 custom 生成自定义 ICON 组件



var fontFamily = 'iceworks';
var prefix = 'iceworks';


var Icon =
/*#__PURE__*/
function (_Component) {
  _inherits(Icon, _Component);

  function Icon() {
    _classCallCheck(this, Icon);

    return _possibleConstructorReturn(this, _getPrototypeOf(Icon).apply(this, arguments));
  }

  _createClass(Icon, [{
    key: "render",
    value: function render() {
      var _cx;

      var _this$props = this.props,
          className = _this$props.className,
          size = _this$props.size,
          type = _this$props.type,
          other = _objectWithoutProperties(_this$props, ["className", "size", "type"]);

      var classes = classnames__WEBPACK_IMPORTED_MODULE_0___default()((_cx = {}, _defineProperty(_cx, "".concat(prefix, "-").concat(size), !!size), _defineProperty(_cx, "".concat(fontFamily), true), _defineProperty(_cx, "".concat(prefix, "-").concat(type), !!type), _defineProperty(_cx, className, !!className), _cx));
      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("i", _extends({}, other, {
        className: classes
      }));
    }
  }]);

  return Icon;
}(react__WEBPACK_IMPORTED_MODULE_2__["Component"]);

Icon.propTypes = {
  /**
   * 指定显示哪种图标
   */
  type: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * 指定图标大小
   */
  size: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.oneOf(['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl'])
};
Icon.defaultProps = {
  size: 'medium'
};
/* harmony default export */ __webpack_exports__["a"] = (Icon);

/***/ }),
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assign = __webpack_require__(472)

const fs = {}

// Export graceful-fs:
assign(fs, __webpack_require__(227))
// Export extra methods:
assign(fs, __webpack_require__(477))
assign(fs, __webpack_require__(230))
assign(fs, __webpack_require__(29))
assign(fs, __webpack_require__(114))
assign(fs, __webpack_require__(485))
assign(fs, __webpack_require__(489))
assign(fs, __webpack_require__(490))
assign(fs, __webpack_require__(491))
assign(fs, __webpack_require__(492))
assign(fs, __webpack_require__(498))
assign(fs, __webpack_require__(55))

module.exports = fs


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.fromCallback = function (fn) {
  return Object.defineProperty(function () {
    if (typeof arguments[arguments.length - 1] === 'function') fn.apply(this, arguments)
    else {
      return new Promise((resolve, reject) => {
        arguments[arguments.length] = (err, res) => {
          if (err) return reject(err)
          resolve(res)
        }
        arguments.length++
        fn.apply(this, arguments)
      })
    }
  }, 'name', { value: fn.name })
}

exports.fromPromise = function (fn) {
  return Object.defineProperty(function () {
    const cb = arguments[arguments.length - 1]
    if (typeof cb !== 'function') return fn.apply(this, arguments)
    else fn.apply(this, arguments).then(r => cb(null, r), cb)
  }, 'name', { value: fn.name })
}


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const u = __webpack_require__(28).fromCallback
const mkdirs = u(__webpack_require__(480))
const mkdirsSync = __webpack_require__(481)

module.exports = {
  mkdirs: mkdirs,
  mkdirsSync: mkdirsSync,
  // alias
  mkdirp: mkdirs,
  mkdirpSync: mkdirsSync,
  ensureDir: mkdirs,
  ensureDirSync: mkdirsSync
}


/***/ }),
/* 30 */,
/* 31 */,
/* 32 */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var htmlparser, object, objectToDom, self;

htmlparser = __webpack_require__(96);

object = __webpack_require__(45).object;

objectToDom = __webpack_require__(589).objectToDom;

module.exports = self = {
  repeatString: function(str, times) {
    var i, j, output, ref;
    output = '';
    for (i = j = 0, ref = times; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      output += str;
    }
    return output;
  },
  toDom: function(subject) {
    if (typeof subject === 'string') {
      return self.stringToDom(subject);
    } else if (object.isBareObject(subject)) {
      return self._objectToDom(subject);
    } else {
      throw Error("tools.toDom() only supports strings and objects");
    }
  },
  stringToDom: function(string) {
    var handler, parser;
    handler = new htmlparser.DomHandler;
    parser = new htmlparser.Parser(handler);
    parser.write(string);
    parser.end();
    return handler.dom;
  },
  _fixQuotesInDom: function(input) {
    var j, len, node;
    if (Array.isArray(input)) {
      for (j = 0, len = input.length; j < len; j++) {
        node = input[j];
        self._fixQuotesInDom(node);
      }
      return input;
    }
    node = input;
    if (node.type === 'text') {
      return node.data = self._quoteNodeText(node.data);
    } else {
      return self._fixQuotesInDom(node.children);
    }
  },
  objectToDom: function(o) {
    if (!Array.isArray(o)) {
      if (!object.isBareObject(o)) {
        throw Error("objectToDom() only accepts a bare object or an array");
      }
    }
    return self._fixQuotesInDom(objectToDom(o));
  },
  quote: function(str) {
    return String(str).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/\ /g, '&sp;').replace(/\n/g, '<br />');
  },
  _quoteNodeText: function(text) {
    return String(text).replace(/\&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/\ /g, '&sp;').replace(/\n/g, "&nl;");
  },
  getCols: function() {
    var cols, tty;
    tty = __webpack_require__(593);
    cols = (function() {
      try {
        if (tty.isatty(1) && tty.isatty(2)) {
          if (process.stdout.getWindowSize) {
            return process.stdout.getWindowSize(1)[0];
          } else if (tty.getWindowSize) {
            return tty.getWindowSize()[1];
          } else if (process.stdout.columns) {
            return process.stdout.columns;
          }
        }
      } catch (_error) {}
    })();
    if (typeof cols === 'number' && cols > 30) {
      return cols;
    } else {
      return 80;
    }
  }
};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const fs = __webpack_require__(11);

module.exports = fp => new Promise(resolve => {
	fs.access(fp, err => {
		resolve(!err);
	});
});

module.exports.sync = fp => {
	try {
		fs.accessSync(fp);
		return true;
	} catch (err) {
		return false;
	}
};


/***/ }),
/* 36 */,
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var _Declaration, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Declaration = __webpack_require__(56);

module.exports = _Length = (function(superClass) {
  extend(_Length, superClass);

  function _Length() {
    return _Length.__super__.constructor.apply(this, arguments);
  }

  _Length.prototype._set = function(val) {
    if (!/^[0-9]+$/.test(String(val))) {
      throw Error("`" + this.prop + "` only takes an integer for value");
    }
    return this.val = parseInt(val);
  };

  return _Length;

})(_Declaration);


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var history_createHashHistory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(295);
/* harmony import */ var history_createHashHistory__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(history_createHashHistory__WEBPACK_IMPORTED_MODULE_0__);
// import createHistory from 'history/createBrowserHistory';

var history = history_createHashHistory__WEBPACK_IMPORTED_MODULE_0___default()();
/* harmony default export */ __webpack_exports__["a"] = (history);

/***/ }),
/* 39 */,
/* 40 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),
/* 42 */,
/* 43 */,
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(213);
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _Notification = __webpack_require__(429);

var _Notification2 = _interopRequireDefault(_Notification);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Notification2.default;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.6.3
var utila;

module.exports = utila = {
  array: __webpack_require__(268),
  classic: __webpack_require__(565),
  object: __webpack_require__(566),
  string: __webpack_require__(568),
  Emitter: __webpack_require__(569)
};


/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isProject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return checkProject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getDefaultProjectName; });
/* unused harmony export validateProjectName */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return scanPages; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return dependenciesFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return mergeDependenciesToPkg; });
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/* eslint-disable no-empty */

/* eslint-disable camelcase */

/**
 * 检测是否符合 iceworks 运行的项目
 * @param {String} projectPath  项目目录地址
 * @return promise
 */

var isProject =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(projectPath) {
    var pkgPath, pkgData;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            pkgPath = path__WEBPACK_IMPORTED_MODULE_1___default.a.join(projectPath, 'package.json');

            if (fs__WEBPACK_IMPORTED_MODULE_0___default.a.existsSync(pkgPath)) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", false);

          case 3:
            _context.prev = 3;
            pkgData = fs__WEBPACK_IMPORTED_MODULE_0___default.a.readFileSync(pkgPath);
            pkgData = JSON.parse(pkgData.toString());
            return _context.abrupt("return", pkgData);

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](3);
            _lib_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].error(_context.t0);
            return _context.abrupt("return", false);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[3, 9]]);
  }));

  return function isProject(_x) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * 检测当前目录状态，权限，是否为当前项目等
 * @param {String} projectPath  项目目录地址
 */

var checkProject = function checkProject(currentPath) {
  // 检查是否可用
  if (fs__WEBPACK_IMPORTED_MODULE_0___default.a.accessSync(currentPath)) {
    return 'noAccess';
  } // 检查是否存在文件


  var dir = fs__WEBPACK_IMPORTED_MODULE_0___default.a.readdirSync(currentPath);

  if (dir.length > 0) {
    // 检查存在的文件是否是合法项目
    // @TODO 检查 abc.json 判断是不是 ice 项目
    try {
      var exited = fs__WEBPACK_IMPORTED_MODULE_0___default.a.existsSync(path__WEBPACK_IMPORTED_MODULE_1___default.a.join(currentPath, './package.json'));

      if (exited) {
        return 'legalProject';
      }
    } catch (error) {}

    return 'hasFiles';
  }

  return 'emptyProject';
};
/**
 * 根据目录地址后去默认的项目名
 * @param {String} projectPath  项目目录地址
 */

var getDefaultProjectName = function getDefaultProjectName(projectPath) {
  // All valid unicode categories
  var UNICODE = {
    letter: new RegExp("[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"),
    digit: new RegExp("[\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]"),
    connector_punctuation: new RegExp("[\\u005F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]"),
    format: new RegExp("[\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]"),
    non_spacing_mark: new RegExp("[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065E\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0900-\\u0902\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0955\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F90-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFD-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26]"),
    space_combining_mark: new RegExp("[\\u0903\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]")
  };

  function is_letter(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90 || code >= 0xaa && UNICODE.letter.test(String.fromCharCode(code));
  }

  function is_digit(code) {
    return code >= 48 && code <= 57;
  }

  function is_unicode_digit(ch) {
    return UNICODE.digit.test(ch);
  }

  function is_unicode_format(ch) {
    return UNICODE.format.test(ch);
  }

  function is_unicode_combining_mark(ch) {
    return UNICODE.non_spacing_mark.test(ch) || UNICODE.space_combining_mark.test(ch);
  }

  function is_unicode_connector_punctuation(ch) {
    return UNICODE.connector_punctuation.test(ch);
  }
  /**
   * Tests if the specified character is valid.
   * @param {String} ch The character to test.
   * @returns {Boolean} The
   */


  function isValid(ch) {
    var code = ch.charCodeAt(0);
    return is_letter(code) || is_digit(code) || ch === '.' || ch === '_' || is_unicode_connector_punctuation(ch) || is_unicode_format(ch) || is_unicode_combining_mark(ch) || is_unicode_digit(ch);
  }
  /**
   * Helper to replace characters at a specific index, js strings
   * are immuatable so str[index]='' wont work.
   * @param {String} value The original string to modify.
   * @param {Number} index The index of the character to replace.
   * @param {String} character The replacement character.
   * @returns {String} The modified string.
   */


  function replaceAt(value, index, character) {
    return value.substr(0, index) + character + value.substr(index + character.length);
  }

  var name = projectPath.split(path__WEBPACK_IMPORTED_MODULE_1___default.a.sep).pop();

  if (!name || /^\s+$/.test(name)) {
    return '';
  } // replace invalid unicode chars


  for (var i = 0; i < name.length; i++) {
    if (!isValid(name[i])) {
      name = replaceAt(name, i, '_');
    }
  }

  return name;
};
/**
 * 检测项目名是否合法
 * @param {String} name  项目名
 */

var validateProjectName = function validateProjectName(proejctName) {
  // From https://github.com/npm/validate-npm-package-name/blob/master/index.js
  var scopedPackagePattern = new RegExp('^(?:@([^/]+?)[/])?([^/]+?)$'); // var builtins = require('builtins')

  var blacklist = ['node_modules', 'favicon.ico'];

  var done = function done(warnings, errors) {
    var result = {
      validForNewPackages: errors.length === 0 && warnings.length === 0,
      validForOldPackages: errors.length === 0,
      warnings: warnings,
      errors: errors
    };
    if (!result.warnings.length) delete result.warnings;
    if (!result.errors.length) delete result.errors;
    return result;
  };

  var validate = function validate(name) {
    var warnings = [];
    var errors = [];

    if (name === null) {
      errors.push('不能为空');
      return done(warnings, errors);
    }

    if (name === undefined) {
      errors.push('不能为空');
      return done(warnings, errors);
    }

    if (typeof name !== 'string') {
      errors.push('必须为字符串');
      return done(warnings, errors);
    }

    if (!name.length) {
      errors.push('长度不能为 0');
    }

    if (name.match(/^\./)) {
      errors.push('不能以 `.` 字符开头');
    }

    if (name.match(/^_/)) {
      errors.push('不能以 `_` 开头');
    }

    if (name.trim() !== name) {
      errors.push('不能以空格开头或者结尾');
    } // No funny business


    blacklist.forEach(function (blacklistedName) {
      if (name.toLowerCase() === blacklistedName) {
        errors.push("".concat(blacklistedName, " \u4E3A\u4FDD\u7559\u540D\uFF0C\u8BF7\u66F4\u6539\u540D\u79F0"));
      }
    }); // Generate warnings for stuff that used to be allowed
    // core module names like http, events, util, etc
    // builtins.forEach(function (builtin) {
    //  if (name.toLowerCase() === builtin) {
    //    warnings.push(builtin + ' is a core module name')
    //  }
    // })
    // really-long-package-names-------------------------------such--length-----many---wow
    // the thisisareallyreallylongpackagenameitshouldpublishdowenowhavealimittothelengthofpackagenames-poch.

    if (name.length > 214) {
      warnings.push('不允许超过 214 个字符');
    }

    if (/[~'!()*]/.test(name.split('/').slice(-1)[0])) {
      warnings.push('不能再包含特殊字符 ("~\'!()*")');
    }

    if (encodeURIComponent(name) !== name) {
      // Maybe it's a scoped package name, like @user/package
      var nameMatch = name.match(scopedPackagePattern);

      if (nameMatch) {
        var user = nameMatch[1];
        var pkg = nameMatch[2];

        if (encodeURIComponent(user) === user && encodeURIComponent(pkg) === pkg) {
          return done(warnings, errors);
        }
      }

      errors.push('项目文件夹仅可使用符合 URL 规范的字符，不支持中文');
    }

    return done(warnings, errors);
  };

  validate.scopedPackagePattern = scopedPackagePattern;
  return validate(proejctName);
};
/**
 * 获取当前项目目录下的 pages, 并且过滤掉 IceworksPreviewPage
 *
 * @param {String} projectPath 项目目录地址
 * @return Promise<Array>
 */

var scanPages = function scanPages(targetPath) {
  var pages = [];
  return new Promise(function (resolve) {
    var pagesPath = path__WEBPACK_IMPORTED_MODULE_1___default.a.join(targetPath, 'pages');

    try {
      pages = fs__WEBPACK_IMPORTED_MODULE_0___default.a.readdirSync(pagesPath);
    } catch (e) {}

    pages = pages.filter(function (p) {
      return p.toLowerCase() !== 'IceworksPreviewPage'.toLowerCase();
    });
    resolve(pages);
  });
};
/**
 * 格式化依赖包名称，用于作为执行 install 的参数
 *
 * @param {Array|Object} dependencies  依赖包名
 */

var dependenciesFormat = function dependenciesFormat(dependencies) {
  if (Array.isArray(dependencies)) {
    return dependencies;
  }

  return Object.entries(dependencies).map(function (depGroup) {
    return depGroup.join('@');
  });
};
var mergeDependenciesToPkg = function mergeDependenciesToPkg(dependencies, clientPath) {
  var packageFile = path__WEBPACK_IMPORTED_MODULE_1___default.a.join(clientPath, 'package.json');
  return new Promise(function (resolve, reject) {
    var pkgData;

    try {
      pkgData = fs__WEBPACK_IMPORTED_MODULE_0___default.a.readFileSync(packageFile);
      pkgData = JSON.parse(pkgData.toString());
      pkgData.dependencies = Object.assign(pkgData.dependencies || {}, dependencies);
      fs__WEBPACK_IMPORTED_MODULE_0___default.a.writeFileSync(packageFile, JSON.stringify(pkgData, null, 2));
      resolve();
    } catch (e) {
      /* eslint-disable-next-line prefer-promise-reject-errors */
      reject("package.json \u4E0D\u5B58\u5728\u6216\u5B58\u5728\u8BED\u6CD5\u9519\u8BEF \u68C0\u67E5".concat(packageFile));
    }
  });
};

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62);
/* harmony import */ var request__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(request__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);


/**
 * 获取物料请求
 * uri：string 资源路径
 * options：object 参数
 * ignoreReject：boolean 是否忽略reject，总是返回值
 */

function requestMaterial(uri) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var ignoreReject = arguments.length > 2 ? arguments[2] : undefined;

  // 参数重置
  if (typeof options === 'boolean') {
    ignoreReject = options;
    options = {};
  }

  options = Object.assign({
    uri: uri.trim(),
    json: true,
    rejectUnauthorized: false,
    // 绕过 SSL 证书检测，主要是针对使用自签发证书的https资源无法访问的问题。
    headers: {
      'Cache-Control': 'no-cache'
    },
    timeout: 5000
  }, options);
  return new Promise(function (resolve, reject) {
    request__WEBPACK_IMPORTED_MODULE_0___default()(options, function (err, res, body) {
      var error = err || body.error;

      if (error) {
        error.message = "\u7269\u6599\u8BF7\u6C42\u5931\u8D25\uFF0C\u5730\u5740: ".concat(uri, "\uFF0C\u9519\u8BEF\uFF1A").concat(error.message);
        _logger__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].error(error);

        if (ignoreReject) {
          resolve(null);
        } else {
          var type = getMaterialType(options);
          error.message = "request-".concat(type, "-material-error: ").concat(JSON.stringify({
            uri: uri
          }));
          _logger__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].error(error);
          reject(error);
        }
      } else {
        resolve(body);
      }
    });
  });
}
/**
 * 获取物料类型，区分官方物料和自定义物料两类
 * @param {Object} options
 * @return {string} official: 官网物料 custom：自定义物料
 */


function getMaterialType() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var officialMaterial = options.uri.includes('ice.alicdn.com');

  if (officialMaterial) {
    return 'official';
  }

  return 'custom';
}

/* harmony default export */ __webpack_exports__["a"] = (requestMaterial);

/***/ }),
/* 48 */,
/* 49 */
/***/ (function(module, exports) {

module.exports = require("assert");

/***/ }),
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const u = __webpack_require__(28).fromPromise
const fs = __webpack_require__(227)

function pathExists (path) {
  return fs.access(path).then(() => true).catch(() => false)
}

module.exports = {
  pathExists: u(pathExists),
  pathExistsSync: fs.existsSync
}


/***/ }),
/* 56 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.3
var _Declaration;

module.exports = _Declaration = (function() {
  var self;

  self = _Declaration;

  _Declaration.importantClauseRx = /(\s\!important)$/;

  _Declaration.setOnto = function(declarations, prop, val) {
    var dec;
    if (!(dec = declarations[prop])) {
      return declarations[prop] = new this(prop, val);
    } else {
      return dec.set(val);
    }
  };

  _Declaration.sanitizeValue = function(val) {
    return String(val).trim().replace(/[\s]+/g, ' ');
  };

  _Declaration.inheritAllowed = false;

  function _Declaration(prop1, val) {
    this.prop = prop1;
    this.important = false;
    this.set(val);
  }

  _Declaration.prototype.get = function() {
    return this._get();
  };

  _Declaration.prototype._get = function() {
    return this.val;
  };

  _Declaration.prototype._pickImportantClause = function(val) {
    if (self.importantClauseRx.test(String(val))) {
      this.important = true;
      return val.replace(self.importantClauseRx, '');
    } else {
      this.important = false;
      return val;
    }
  };

  _Declaration.prototype.set = function(val) {
    val = self.sanitizeValue(val);
    val = this._pickImportantClause(val);
    val = val.trim();
    if (this._handleNullOrInherit(val)) {
      return this;
    }
    this._set(val);
    return this;
  };

  _Declaration.prototype._set = function(val) {
    return this.val = val;
  };

  _Declaration.prototype._handleNullOrInherit = function(val) {
    if (val === '') {
      this.val = '';
      return true;
    }
    if (val === 'inherit') {
      if (this.constructor.inheritAllowed) {
        this.val = 'inherit';
      } else {
        throw Error("Inherit is not allowed for `" + this.prop + "`");
      }
      return true;
    } else {
      return false;
    }
  };

  return _Declaration;

})();


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isIceMaterial; });
var iceMaterial = 'https://ice.alicdn.com/assets/react-materials.json';
/**
 *
 * @param {*} projectPath
 */

var isIceMaterial = function isIceMaterial(source) {
  return source === iceMaterial;
};

/***/ }),
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





var prettyUrl = function prettyUrl(to) {
  if (to.startsWith('/')) {
    return to;
  } else {
    return '/' + to;
  }
};

var Link =
/*#__PURE__*/
function (_Component) {
  _inherits(Link, _Component);

  function Link() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Link);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Link)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleClick = function (event) {
      event.preventDefault();
      _history__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].push(_this.props.to);
    };

    return _this;
  }

  _createClass(Link, [{
    key: "render",
    value: function render() {
      var classes = classnames__WEBPACK_IMPORTED_MODULE_0___default()({
        active: prettyUrl(this.props.to) === _history__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].location.pathname
      });
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
        className: classes,
        href: this.props.to,
        onClick: this.handleClick
      }, this.props.children);
    }
  }]);

  return Link;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);

/* harmony default export */ __webpack_exports__["a"] = (Link);

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);

var ALL_INITIALIZERS = [];
var READY_INITIALIZERS = [];

function isWebpackReady(getModuleIds) {
  if (( false ? undefined : _typeof(__webpack_require__.m)) !== "object") {
    return false;
  }

  return getModuleIds().every(function (moduleId) {
    return typeof moduleId !== "undefined" && typeof __webpack_require__.m[moduleId] !== "undefined";
  });
}

function load(loader) {
  var promise = loader();

  var state = {
    loading: true,
    loaded: null,
    error: null
  };

  state.promise = promise.then(function (loaded) {
    state.loading = false;
    state.loaded = loaded;
    return loaded;
  }).catch(function (err) {
    state.loading = false;
    state.error = err;
    throw err;
  });

  return state;
}

function loadMap(obj) {
  var state = {
    loading: false,
    loaded: {},
    error: null
  };

  var promises = [];

  try {
    Object.keys(obj).forEach(function (key) {
      var result = load(obj[key]);

      if (!result.loading) {
        state.loaded[key] = result.loaded;
        state.error = result.error;
      } else {
        state.loading = true;
      }

      promises.push(result.promise);

      result.promise.then(function (res) {
        state.loaded[key] = res;
      }).catch(function (err) {
        state.error = err;
      });
    });
  } catch (err) {
    state.error = err;
  }

  state.promise = Promise.all(promises).then(function (res) {
    state.loading = false;
    return res;
  }).catch(function (err) {
    state.loading = false;
    throw err;
  });

  return state;
}

function resolve(obj) {
  return obj && obj.__esModule ? obj.default : obj;
}

function render(loaded, props) {
  return React.createElement(resolve(loaded), props);
}

function createLoadableComponent(loadFn, options) {
  var _class, _temp;

  if (!options.loading) {
    throw new Error("react-loadable requires a `loading` component");
  }

  var opts = Object.assign({
    loader: null,
    loading: null,
    delay: 200,
    timeout: null,
    render: render,
    webpack: null,
    modules: null
  }, options);

  var res = null;

  function init() {
    if (!res) {
      res = loadFn(opts.loader);
    }
    return res.promise;
  }

  ALL_INITIALIZERS.push(init);

  if (typeof opts.webpack === "function") {
    READY_INITIALIZERS.push(function () {
      if (isWebpackReady(opts.webpack)) {
        return init();
      }
    });
  }

  return _temp = _class = function (_React$Component) {
    _inherits(LoadableComponent, _React$Component);

    function LoadableComponent(props) {
      _classCallCheck(this, LoadableComponent);

      var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

      _this.retry = function () {
        _this.setState({ error: null, loading: true, timedOut: false });
        res = loadFn(opts.loader);
        _this._loadModule();
      };

      init();

      _this.state = {
        error: res.error,
        pastDelay: false,
        timedOut: false,
        loading: res.loading,
        loaded: res.loaded
      };
      return _this;
    }

    LoadableComponent.preload = function preload() {
      return init();
    };

    LoadableComponent.prototype.componentWillMount = function componentWillMount() {
      this._mounted = true;
      this._loadModule();
    };

    LoadableComponent.prototype._loadModule = function _loadModule() {
      var _this2 = this;

      if (this.context.loadable && Array.isArray(opts.modules)) {
        opts.modules.forEach(function (moduleName) {
          _this2.context.loadable.report(moduleName);
        });
      }

      if (!res.loading) {
        return;
      }

      if (typeof opts.delay === "number") {
        if (opts.delay === 0) {
          this.setState({ pastDelay: true });
        } else {
          this._delay = setTimeout(function () {
            _this2.setState({ pastDelay: true });
          }, opts.delay);
        }
      }

      if (typeof opts.timeout === "number") {
        this._timeout = setTimeout(function () {
          _this2.setState({ timedOut: true });
        }, opts.timeout);
      }

      var update = function update() {
        if (!_this2._mounted) {
          return;
        }

        _this2.setState({
          error: res.error,
          loaded: res.loaded,
          loading: res.loading
        });

        _this2._clearTimeouts();
      };

      res.promise.then(function () {
        update();
      }).catch(function (err) {
        update();
      });
    };

    LoadableComponent.prototype.componentWillUnmount = function componentWillUnmount() {
      this._mounted = false;
      this._clearTimeouts();
    };

    LoadableComponent.prototype._clearTimeouts = function _clearTimeouts() {
      clearTimeout(this._delay);
      clearTimeout(this._timeout);
    };

    LoadableComponent.prototype.render = function render() {
      if (this.state.loading || this.state.error) {
        return React.createElement(opts.loading, {
          isLoading: this.state.loading,
          pastDelay: this.state.pastDelay,
          timedOut: this.state.timedOut,
          error: this.state.error,
          retry: this.retry
        });
      } else if (this.state.loaded) {
        return opts.render(this.state.loaded, this.props);
      } else {
        return null;
      }
    };

    return LoadableComponent;
  }(React.Component), _class.contextTypes = {
    loadable: PropTypes.shape({
      report: PropTypes.func.isRequired
    })
  }, _temp;
}

function Loadable(opts) {
  return createLoadableComponent(load, opts);
}

function LoadableMap(opts) {
  if (typeof opts.render !== "function") {
    throw new Error("LoadableMap requires a `render(loaded, props)` function");
  }

  return createLoadableComponent(loadMap, opts);
}

Loadable.Map = LoadableMap;

var Capture = function (_React$Component2) {
  _inherits(Capture, _React$Component2);

  function Capture() {
    _classCallCheck(this, Capture);

    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));
  }

  Capture.prototype.getChildContext = function getChildContext() {
    return {
      loadable: {
        report: this.props.report
      }
    };
  };

  Capture.prototype.render = function render() {
    return React.Children.only(this.props.children);
  };

  return Capture;
}(React.Component);

Capture.propTypes = {
  report: PropTypes.func.isRequired
};
Capture.childContextTypes = {
  loadable: PropTypes.shape({
    report: PropTypes.func.isRequired
  }).isRequired
};


Loadable.Capture = Capture;

function flushInitializers(initializers) {
  var promises = [];

  while (initializers.length) {
    var init = initializers.pop();
    promises.push(init());
  }

  return Promise.all(promises).then(function () {
    if (initializers.length) {
      return flushInitializers(initializers);
    }
  });
}

Loadable.preloadAll = function () {
  return new Promise(function (resolve, reject) {
    flushInitializers(ALL_INITIALIZERS).then(resolve, reject);
  });
};

Loadable.preloadReady = function () {
  return new Promise(function (resolve, reject) {
    // We always will resolve, errors should be handled within loading UIs.
    flushInitializers(READY_INITIALIZERS).then(resolve, resolve);
  });
};

module.exports = Loadable;

/***/ }),
/* 65 */,
/* 66 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(116);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(67);
util.inherits = __webpack_require__(84);
/*</replacement>*/

var Readable = __webpack_require__(272);
var Writable = __webpack_require__(275);

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var ElementType = __webpack_require__(164),
    DomUtils = module.exports;

var isTag = DomUtils.isTag = ElementType.isTag;

function getChildren(elem){
	return elem.children;
}
function getParent(elem){
	return elem.parent;
}
function getSiblings(elem){
	var parent = getParent(elem);
	return parent ? getChildren(parent) : [elem];
}
function getAttributeValue(elem, name){
	return elem.attribs && elem.attribs[name];
}
function hasAttrib(elem, name){
	return hasOwnProperty.call(elem.attribs, name);
}
function getName(elem){
	return elem.name;
}

DomUtils.getChildren = getChildren;
DomUtils.getParent = getParent;
DomUtils.getAttributeValue = getAttributeValue;
DomUtils.hasAttrib = hasAttrib;
DomUtils.getName = getName;
DomUtils.getSiblings = getSiblings;

function find(test, arr, recurse, limit){
	var result = [], childs;

	for(var i = 0, j = arr.length; i < j; i++){
		if(test(arr[i])){
			result.push(arr[i]);
			if(--limit <= 0) break;
		}

		childs = getChildren(arr[i]);
		if(recurse && childs && childs.length > 0){
			childs = find(test, childs, recurse, limit);
			result = result.concat(childs);
			limit -= childs.length;
			if(limit <= 0) break;
		}
	}

	return result;
}

function findOneChild(test, arr){
	for(var i = 0, l = arr.length; i < l; i++){
		if(test(arr[i])) return arr[i];
	}

	return null;
}

function findOne(test, arr){
	var elem = null;

	for(var i = 0, l = arr.length; i < l && !elem; i++){
		if(test(arr[i])){
			elem = arr[i];
		} else if(arr[i].children && arr[i].children.length > 0){
			elem = findOne(test, arr[i].children);
		}
	}

	return elem;
}

DomUtils.findOne = findOne;

function findAll(test, elems){
	var result = [];
	for(var i = 0, j = elems.length; i < j; i++){
		if(test(elems[i])) result.push(elems[i]);

		var childs = getChildren(elems[i]);
		if(childs && childs.length){
			result = result.concat(findAll(test, childs));
		}
	}
	return result;
}

DomUtils.findAll = findAll;

function filter(test, element, recurse, limit){
	if(!Array.isArray(element)) element = [element];

	if(typeof limit !== "number" || !isFinite(limit)){
		if(recurse === false){
			return element.filter(test);
		} else {
			return findAll(test, element);
		}
	} else if(limit === 1){
		if(recurse === false){
			element = findOneChild(test, element);
		} else {
			element = findOne(test, element);
		}
		return element ? [element] : [];
	} else {
		return find(test, element, recurse !== false, limit);
	}
}

DomUtils.filter = filter;

DomUtils.testElement = function(options, element){
	for(var key in options){
		if(!options.hasOwnProperty(key));
		else if(key === "tag_name"){
			if(!isTag(element) || !options.tag_name(element.name)){
				return false;
			}
		} else if(key === "tag_type"){
			if(!options.tag_type(element.type)) return false;
		} else if(key === "tag_contains"){
			if(isTag(element) || !options.tag_contains(element.data)){
				return false;
			}
		} else if(!element.attribs || !options[key](element.attribs[key])){
			return false;
		}
	}
	return true;
};

var Checks = {
	tag_name: function(name){
		if(typeof name === "function"){ 
			return function(elem){ return isTag(elem) && name(elem.name); };
		} else if(name === "*"){
			return isTag;
		} else {
			return function(elem){ return isTag(elem) && elem.name === name; };
		}
	},
	tag_type: function(type){
		if(typeof type === "function"){
			return function(elem){ return type(elem.type); };
		} else {
			return function(elem){ return elem.type === type; };
		}
	},
	tag_contains: function(data){
		if(typeof type === "function"){
			return function(elem){ return !isTag(elem) && data(elem.data); };
		} else {
			return function(elem){ return !isTag(elem) && elem.data === data; };
		}
	}
};

function getAttribCheck(attrib, value){
	if(typeof value === "function"){
		return function(elem){ return elem.attribs && value(elem.attribs[attrib]); };
	} else {
		return function(elem){ return elem.attribs && elem.attribs[attrib] === value; };
	}
}

DomUtils.getElements = function(options, element, recurse, limit){
	var funcs = [];
	for(var key in options){
		if(options.hasOwnProperty(key)){
			if(key in Checks) funcs.push(Checks[key](options[key]));
			else funcs.push(getAttribCheck(key, options[key]));
		}
	}

	if(funcs.length === 0) return [];
	if(funcs.length === 1) return filter(funcs[0], element, recurse, limit);
	return filter(
		function(elem){
			return funcs.some(function(func){ return func(elem); });
		},
		element, recurse, limit
	);
};

DomUtils.getElementById = function(id, element, recurse){
	if(!Array.isArray(element)) element = [element];
	return findOne(getAttribCheck("id", id), element, recurse !== false);
};

DomUtils.getElementsByTagName = function(name, element, recurse, limit){
	return filter(Checks.tag_name(name), element, recurse, limit);
};

DomUtils.getElementsByTagType = function(type, element, recurse, limit){
	return filter(Checks.tag_type(type), element, recurse, limit);
};

DomUtils.removeElement = function(elem){
	if(elem.prev) elem.prev.next = elem.next;
	if(elem.next) elem.next.prev = elem.prev;

	if(elem.parent){
		var childs = elem.parent.children;
		childs.splice(childs.lastIndexOf(elem), 1);
	}
};

DomUtils.replaceElement = function(elem, replacement){
	if(elem.prev){
		elem.prev.next = replacement;
		replacement.prev = elem.prev;
	}
	if(elem.next){
		elem.next.prev = replacement;
		replacement.next = elem.next;
	}
	if(elem.parent){
		var childs = elem.parent.children;
		childs.splice(childs.lastIndexOf(elem), 1, replacement);
		replacement.parent = elem.parent;
	}
};

DomUtils.getInnerHTML = function(elem){
	if(!elem.children) return "";

	var childs = elem.children,
		childNum = childs.length,
		ret = "";

	for(var i = 0; i < childNum; i++){
		ret += DomUtils.getOuterHTML(childs[i]);
	}

	return ret;
};

//boolean attributes without a value (taken from MatthewMueller/cheerio)
var booleanAttribs = {
	__proto__: null,
	async: true,
	autofocus: true,
	autoplay: true,
	checked: true,
	controls: true,
	defer: true,
	disabled: true,
	hidden: true,
	loop: true,
	multiple: true,
	open: true,
	readonly: true,
	required: true,
	scoped: true,
	selected: true,
	"/": true //TODO when is this required?
};

var emptyTags = {
	__proto__: null,
	area: true,
	base: true,
	basefont: true,
	br: true,
	col: true,
	frame: true,
	hr: true,
	img: true,
	input: true,
	isindex: true,
	link: true,
	meta: true,
	param: true,
	embed: true
};

DomUtils.getOuterHTML = function(elem){
	var type = elem.type;

	if(type === ElementType.Text) return elem.data;
	if(type === ElementType.Comment) return "<!--" + elem.data + "-->";
	if(type === ElementType.Directive) return "<" + elem.data + ">";
	if(type === ElementType.CDATA) return "<!CDATA " + DomUtils.getInnerHTML(elem) + "]]>";

	var ret = "<" + elem.name;
	if("attribs" in elem){
		for(var attr in elem.attribs){
			if(elem.attribs.hasOwnProperty(attr)){
				ret += " " + attr;
				var value = elem.attribs[attr];
				if(!value){
					if( !(attr in booleanAttribs) ){
						ret += '=""';
					}
				} else {
					ret += '="' + value + '"';
				}
			}
		}
	}

	if (elem.name in emptyTags && elem.children.length === 0) {
		return ret + " />";
	} else {
		return ret + ">" + DomUtils.getInnerHTML(elem) + "</" + elem.name + ">";
	}
};

DomUtils.getText = function getText(elem){
	if(Array.isArray(elem)) return elem.map(getText).join("");
	if(isTag(elem) || elem.type === ElementType.CDATA) return getText(elem.children);
	if(elem.type === ElementType.Text) return elem.data;
	return "";
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const camelCase = __webpack_require__(315);

module.exports = function () {
	const cased = camelCase.apply(camelCase, arguments);
	return cased.charAt(0).toUpperCase() + cased.slice(1);
};


/***/ }),
/* 78 */,
/* 79 */,
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__(3);
var fs = __webpack_require__(11);
var _0777 = parseInt('0777', 8);

module.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;

function mkdirP (p, opts, f, made) {
    if (typeof opts === 'function') {
        f = opts;
        opts = {};
    }
    else if (!opts || typeof opts !== 'object') {
        opts = { mode: opts };
    }
    
    var mode = opts.mode;
    var xfs = opts.fs || fs;
    
    if (mode === undefined) {
        mode = _0777 & (~process.umask());
    }
    if (!made) made = null;
    
    var cb = f || function () {};
    p = path.resolve(p);
    
    xfs.mkdir(p, mode, function (er) {
        if (!er) {
            made = made || p;
            return cb(null, made);
        }
        switch (er.code) {
            case 'ENOENT':
                mkdirP(path.dirname(p), opts, function (er, made) {
                    if (er) cb(er, made);
                    else mkdirP(p, opts, cb, made);
                });
                break;

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
                xfs.stat(p, function (er2, stat) {
                    // if the stat fails, then that's super weird.
                    // let the original error be the failure reason.
                    if (er2 || !stat.isDirectory()) cb(er, made)
                    else cb(null, made);
                });
                break;
        }
    });
}

mkdirP.sync = function sync (p, opts, made) {
    if (!opts || typeof opts !== 'object') {
        opts = { mode: opts };
    }
    
    var mode = opts.mode;
    var xfs = opts.fs || fs;
    
    if (mode === undefined) {
        mode = _0777 & (~process.umask());
    }
    if (!made) made = null;

    p = path.resolve(p);

    try {
        xfs.mkdirSync(p, mode);
        made = made || p;
    }
    catch (err0) {
        switch (err0.code) {
            case 'ENOENT' :
                made = sync(path.dirname(p), opts, made);
                sync(p, opts, made);
                break;

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
                var stat;
                try {
                    stat = xfs.statSync(p);
                }
                catch (err1) {
                    throw err0;
                }
                if (!stat.isDirectory()) throw err0;
                break;
        }
    }

    return made;
};


/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export propTypes */
/* unused harmony export PropTypes */
/* unused harmony export onError */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return observer; });
/* unused harmony export Observer */
/* unused harmony export renderReporter */
/* unused harmony export componentByNodeRegistery */
/* unused harmony export componentByNodeRegistry */
/* unused harmony export trackComponents */
/* unused harmony export useStaticRendering */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Provider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return inject; });
/* unused harmony export disposeOnUnmount */
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mobx__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);




function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

// These functions can be stubbed out in specific environments

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var reactIs_production_min = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports,"__esModule",{value:!0});
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,r=b?Symbol.for("react.memo"):
60115,t=b?Symbol.for("react.lazy"):60116;function u(a){if("object"===typeof a&&null!==a){var q=a.$$typeof;switch(q){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return q}}case d:return q}}}function v(a){return u(a)===m}exports.typeOf=u;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;
exports.Profiler=g;exports.Portal=d;exports.StrictMode=f;exports.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)};exports.isAsyncMode=function(a){return v(a)||u(a)===l};exports.isConcurrentMode=v;exports.isContextConsumer=function(a){return u(a)===k};exports.isContextProvider=function(a){return u(a)===h};
exports.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return u(a)===n};exports.isFragment=function(a){return u(a)===e};exports.isProfiler=function(a){return u(a)===g};exports.isPortal=function(a){return u(a)===d};exports.isStrictMode=function(a){return u(a)===f};
});

unwrapExports(reactIs_production_min);
var reactIs_production_min_1 = reactIs_production_min.typeOf;
var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
var reactIs_production_min_6 = reactIs_production_min.Element;
var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
var reactIs_production_min_8 = reactIs_production_min.Fragment;
var reactIs_production_min_9 = reactIs_production_min.Profiler;
var reactIs_production_min_10 = reactIs_production_min.Portal;
var reactIs_production_min_11 = reactIs_production_min.StrictMode;
var reactIs_production_min_12 = reactIs_production_min.isValidElementType;
var reactIs_production_min_13 = reactIs_production_min.isAsyncMode;
var reactIs_production_min_14 = reactIs_production_min.isConcurrentMode;
var reactIs_production_min_15 = reactIs_production_min.isContextConsumer;
var reactIs_production_min_16 = reactIs_production_min.isContextProvider;
var reactIs_production_min_17 = reactIs_production_min.isElement;
var reactIs_production_min_18 = reactIs_production_min.isForwardRef;
var reactIs_production_min_19 = reactIs_production_min.isFragment;
var reactIs_production_min_20 = reactIs_production_min.isProfiler;
var reactIs_production_min_21 = reactIs_production_min.isPortal;
var reactIs_production_min_22 = reactIs_production_min.isStrictMode;

var reactIs = createCommonjsModule(function (module) {

{
  module.exports = reactIs_production_min;
}
});

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};

var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};

var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        var targetStatics = TYPE_STATICS[targetComponent['$$typeof']] || REACT_STATICS;
        var sourceStatics = TYPE_STATICS[sourceComponent['$$typeof']] || REACT_STATICS;

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
}

var hoistNonReactStatics_cjs = hoistNonReactStatics;

var EventEmitter =
/*#__PURE__*/
function () {
  function EventEmitter() {
    _classCallCheck(this, EventEmitter);

    this.listeners = [];
  }

  _createClass(EventEmitter, [{
    key: "on",
    value: function on(cb) {
      var _this = this;

      this.listeners.push(cb);
      return function () {
        var index = _this.listeners.indexOf(cb);

        if (index !== -1) _this.listeners.splice(index, 1);
      };
    }
  }, {
    key: "emit",
    value: function emit(data) {
      this.listeners.forEach(function (fn) {
        return fn(data);
      });
    }
  }]);

  return EventEmitter;
}();

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
      rest[_key - 6] = arguments[_key];
    }

    return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["untracked"])(function () {
      componentName = componentName || "<<anonymous>>";
      propFullName = propFullName || propName;

      if (props[propName] == null) {
        if (isRequired) {
          var actual = props[propName] === null ? "null" : "undefined";
          return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
        }

        return null;
      } else {
        return validate.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
      }
    });
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
} // Copied from React.PropTypes


function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === "symbol") {
    return true;
  } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


  if (propValue["@@toStringTag"] === "Symbol") {
    return true;
  } // Fallback for non-spec compliant Symbols which are polyfilled.


  if (typeof Symbol === "function" && propValue instanceof Symbol) {
    return true;
  }

  return false;
} // Copied from React.PropTypes


function getPropType(propValue) {
  var propType = _typeof(propValue);

  if (Array.isArray(propValue)) {
    return "array";
  }

  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return "object";
  }

  if (isSymbol(propType, propValue)) {
    return "symbol";
  }

  return propType;
} // This handles more types than `getPropType`. Only used for error messages.
// Copied from React.PropTypes


function getPreciseType(propValue) {
  var propType = getPropType(propValue);

  if (propType === "object") {
    if (propValue instanceof Date) {
      return "date";
    } else if (propValue instanceof RegExp) {
      return "regexp";
    }
  }

  return propType;
}

function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["untracked"])(function () {
      if (allowNativeType) {
        if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
      }

      var mobxChecker;

      switch (mobxType) {
        case "Array":
          mobxChecker = mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableArray"];
          break;

        case "Object":
          mobxChecker = mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableObject"];
          break;

        case "Map":
          mobxChecker = mobx__WEBPACK_IMPORTED_MODULE_0__["isObservableMap"];
          break;

        default:
          throw new Error("Unexpected mobxType: ".concat(mobxType));
      }

      var propValue = props[propName];

      if (!mobxChecker(propValue)) {
        var preciseType = getPreciseType(propValue);
        var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
        return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
      }

      return null;
    });
  });
}

function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
      rest[_key2 - 5] = arguments[_key2];
    }

    return Object(mobx__WEBPACK_IMPORTED_MODULE_0__["untracked"])(function () {
      if (typeof typeChecker !== "function") {
        return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
      }

      var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName);
      if (error instanceof Error) return error;
      var propValue = props[propName];

      for (var i = 0; i < propValue.length; i++) {
        error = typeChecker.apply(void 0, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
        if (error instanceof Error) return error;
      }

      return null;
    });
  });
}

var observableArray = createObservableTypeCheckerCreator(false, "Array");
var observableArrayOf = createObservableArrayOfTypeChecker.bind(null, false);
var observableMap = createObservableTypeCheckerCreator(false, "Map");
var observableObject = createObservableTypeCheckerCreator(false, "Object");
var arrayOrObservableArray = createObservableTypeCheckerCreator(true, "Array");
var arrayOrObservableArrayOf = createObservableArrayOfTypeChecker.bind(null, true);
var objectOrObservableObject = createObservableTypeCheckerCreator(true, "Object");

var propTypes = /*#__PURE__*/Object.freeze({
  observableArray: observableArray,
  observableArrayOf: observableArrayOf,
  observableMap: observableMap,
  observableObject: observableObject,
  arrayOrObservableArray: arrayOrObservableArray,
  arrayOrObservableArrayOf: arrayOrObservableArrayOf,
  objectOrObservableObject: objectOrObservableObject
});

function isStateless(component) {
  // `function() {}` has prototype, but `() => {}` doesn't
  // `() => {}` via Babel has prototype too.
  return !(component.prototype && component.prototype.render);
}
var symbolId = 0;
function newSymbol(name) {
  if (typeof Symbol === "function") {
    return Symbol(name);
  }

  var symbol = "__$mobx-react ".concat(name, " (").concat(symbolId, ")");
  symbolId++;
  return symbol;
}
var mobxMixins = newSymbol("patchMixins");
var mobxPatchedDefinition = newSymbol("patchedDefinition");

function getMixins(target, methodName) {
  var mixins = target[mobxMixins] = target[mobxMixins] || {};
  var methodMixins = mixins[methodName] = mixins[methodName] || {};
  methodMixins.locks = methodMixins.locks || 0;
  methodMixins.methods = methodMixins.methods || [];
  return methodMixins;
}

function wrapper(realMethod, mixins) {
  var _this = this;

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls
  mixins.locks++;

  try {
    var retVal;

    if (realMethod !== undefined && realMethod !== null) {
      retVal = realMethod.apply(this, args);
    }

    return retVal;
  } finally {
    mixins.locks--;

    if (mixins.locks === 0) {
      mixins.methods.forEach(function (mx) {
        mx.apply(_this, args);
      });
    }
  }
}

function wrapFunction(realMethod, mixins) {
  var fn = function fn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));
  };

  return fn;
}

function patch(target, methodName) {
  var mixins = getMixins(target, methodName);

  for (var _len3 = arguments.length, mixinMethods = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
    mixinMethods[_key3 - 2] = arguments[_key3];
  }

  for (var _i = 0; _i < mixinMethods.length; _i++) {
    var mixinMethod = mixinMethods[_i];

    if (mixins.methods.indexOf(mixinMethod) < 0) {
      mixins.methods.push(mixinMethod);
    }
  }

  var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);

  if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {
    // already patched definition, do not repatch
    return;
  }

  var originalMethod = target[methodName];
  var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);
  Object.defineProperty(target, methodName, newDefinition);
}

function createDefinition(target, methodName, enumerable, mixins, originalMethod) {
  var _ref;

  var wrappedFunc = wrapFunction(originalMethod, mixins);
  return _ref = {}, _defineProperty(_ref, mobxPatchedDefinition, true), _defineProperty(_ref, "get", function get() {
    return wrappedFunc;
  }), _defineProperty(_ref, "set", function set(value) {
    if (this === target) {
      wrappedFunc = wrapFunction(value, mixins);
    } else {
      // when it is an instance of the prototype/a child prototype patch that particular case again separately
      // since we need to store separate values depending on wether it is the actual instance, the prototype, etc
      // e.g. the method for super might not be the same as the method for the prototype which might be not the same
      // as the method for the instance
      var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);
      Object.defineProperty(this, methodName, newDefinition);
    }
  }), _defineProperty(_ref, "configurable", true), _defineProperty(_ref, "enumerable", enumerable), _ref;
}

var injectorContextTypes = {
  mobxStores: objectOrObservableObject
};
Object.seal(injectorContextTypes);
var proxiedInjectorProps = {
  contextTypes: {
    get: function get() {
      return injectorContextTypes;
    },
    set: function set(_) {
      console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`");
    },
    configurable: true,
    enumerable: false
  },
  isMobxInjector: {
    value: true,
    writable: true,
    configurable: true,
    enumerable: true
  }
  /**
   * Store Injection
   */

};

function createStoreInjector(grabStoresFn, component, injectNames) {
  var displayName = "inject-" + (component.displayName || component.name || component.constructor && component.constructor.name || "Unknown");
  if (injectNames) displayName += "-with-" + injectNames;

  var Injector =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Injector, _Component);

    function Injector() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Injector);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Injector)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.storeRef = function (instance) {
        _this.wrappedInstance = instance;
      };

      return _this;
    }

    _createClass(Injector, [{
      key: "render",
      value: function render() {
        // Optimization: it might be more efficient to apply the mapper function *outside* the render method
        // (if the mapper is a function), that could avoid expensive(?) re-rendering of the injector component
        // See this test: 'using a custom injector is not too reactive' in inject.js
        var newProps = {};

        for (var key in this.props) {
          if (this.props.hasOwnProperty(key)) {
            newProps[key] = this.props[key];
          }
        }

        var additionalProps = grabStoresFn(this.context.mobxStores || {}, newProps, this.context) || {};

        for (var _key2 in additionalProps) {
          newProps[_key2] = additionalProps[_key2];
        }

        if (!isStateless(component)) {
          newProps.ref = this.storeRef;
        }

        return Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(component, newProps);
      }
    }]);

    return Injector;
  }(react__WEBPACK_IMPORTED_MODULE_1__["Component"]); // Static fields from component should be visible on the generated Injector


  Injector.displayName = displayName;
  hoistNonReactStatics_cjs(Injector, component);
  Injector.wrappedComponent = component;
  Object.defineProperties(Injector, proxiedInjectorProps);
  return Injector;
}

function grabStoresByName(storeNames) {
  return function (baseStores, nextProps) {
    storeNames.forEach(function (storeName) {
      if (storeName in nextProps // prefer props over stores
      ) return;
      if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
      nextProps[storeName] = baseStores[storeName];
    });
    return nextProps;
  };
}
/**
 * higher order component that injects stores to a child.
 * takes either a varargs list of strings, which are stores read from the context,
 * or a function that manually maps the available stores from the context to props:
 * storesToProps(mobxStores, props, context) => newProps
 */


function inject()
/* fn(stores, nextProps) or ...storeNames */
{
  var grabStoresFn;

  if (typeof arguments[0] === "function") {
    grabStoresFn = arguments[0];
    return function (componentClass) {
      var injected = createStoreInjector(grabStoresFn, componentClass);
      injected.isMobxInjector = false; // supress warning
      // mark the Injector as observer, to make it react to expressions in `grabStoresFn`,
      // see #111

      injected = observer(injected);
      injected.isMobxInjector = true; // restore warning

      return injected;
    };
  } else {
    var storeNames = [];

    for (var i = 0; i < arguments.length; i++) {
      storeNames[i] = arguments[i];
    }

    grabStoresFn = grabStoresByName(storeNames);
    return function (componentClass) {
      return createStoreInjector(grabStoresFn, componentClass, storeNames.join("-"));
    };
  }
}

var mobxAdminProperty = mobx__WEBPACK_IMPORTED_MODULE_0__["$mobx"] || "$mobx";
var mobxIsUnmounted = newSymbol("isUnmounted");
/**
 * dev tool support
 */

var isDevtoolsEnabled = false;
var isUsingStaticRendering = false;
var warnedAboutObserverInjectDeprecation = false; // WeakMap<Node, Object>;

var componentByNodeRegistry = typeof WeakMap !== "undefined" ? new WeakMap() : undefined;
var renderReporter = new EventEmitter();
var skipRenderKey = newSymbol("skipRender");
var isForcingUpdateKey = newSymbol("isForcingUpdate"); // Using react-is had some issues (and operates on elements, not on types), see #608 / #609

var ReactForwardRefSymbol = typeof react__WEBPACK_IMPORTED_MODULE_1__["forwardRef"] === "function" && Object(react__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function (_props, _ref) {})["$$typeof"];
/**
 * Helper to set `prop` to `this` as non-enumerable (hidden prop)
 * @param target
 * @param prop
 * @param value
 */

function setHiddenProp(target, prop, value) {
  if (!Object.hasOwnProperty.call(target, prop)) {
    Object.defineProperty(target, prop, {
      enumerable: false,
      configurable: true,
      writable: true,
      value: value
    });
  } else {
    target[prop] = value;
  }
}

function findDOMNode$2(component) {
  if (react_dom__WEBPACK_IMPORTED_MODULE_2__["findDOMNode"]) {
    try {
      return Object(react_dom__WEBPACK_IMPORTED_MODULE_2__["findDOMNode"])(component);
    } catch (e) {
      // findDOMNode will throw in react-test-renderer, see:
      // See https://github.com/mobxjs/mobx-react/issues/216
      // Is there a better heuristic?
      return null;
    }
  }

  return null;
}

function reportRendering(component) {
  var node = findDOMNode$2(component);
  if (node && componentByNodeRegistry) componentByNodeRegistry.set(node, component);
  renderReporter.emit({
    event: "render",
    renderTime: component.__$mobRenderEnd - component.__$mobRenderStart,
    totalTime: Date.now() - component.__$mobRenderStart,
    component: component,
    node: node
  });
}

function trackComponents() {
  if (typeof WeakMap === "undefined") throw new Error("[mobx-react] tracking components is not supported in this browser.");
  if (!isDevtoolsEnabled) isDevtoolsEnabled = true;
}
function useStaticRendering(useStaticRendering) {
  isUsingStaticRendering = useStaticRendering;
}
/**
 * Errors reporter
 */

var errorsReporter = new EventEmitter();
/**
 * Utilities
 */

function patch$1(target, funcName) {
  patch(target, funcName, reactiveMixin[funcName]);
}

function shallowEqual(objA, objB) {
  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (is(objA, objB)) return true;

  if (_typeof(objA) !== "object" || objA === null || _typeof(objB) !== "object" || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

function is(x, y) {
  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function makeComponentReactive(render) {
  var _this2 = this;

  if (isUsingStaticRendering === true) return render.call(this);

  function reactiveRender() {
    var _this = this;

    isRenderingPending = false;
    var exception = undefined;
    var rendering = undefined;
    reaction.track(function () {
      if (isDevtoolsEnabled) {
        _this.__$mobRenderStart = Date.now();
      }

      try {
        rendering = Object(mobx__WEBPACK_IMPORTED_MODULE_0__["_allowStateChanges"])(false, baseRender);
      } catch (e) {
        exception = e;
      }

      if (isDevtoolsEnabled) {
        _this.__$mobRenderEnd = Date.now();
      }
    });

    if (exception) {
      errorsReporter.emit(exception);
      throw exception;
    }

    return rendering;
  } // Generate friendly name for debugging


  var initialName = this.displayName || this.name || this.constructor && (this.constructor.displayName || this.constructor.name) || "<component>";
  var rootNodeID = this._reactInternalInstance && this._reactInternalInstance._rootNodeID || this._reactInternalInstance && this._reactInternalInstance._debugID || this._reactInternalFiber && this._reactInternalFiber._debugID;
  /**
   * If props are shallowly modified, react will render anyway,
   * so atom.reportChanged() should not result in yet another re-render
   */

  setHiddenProp(this, skipRenderKey, false);
  /**
   * forceUpdate will re-assign this.props. We don't want that to cause a loop,
   * so detect these changes
   */

  setHiddenProp(this, isForcingUpdateKey, false); // wire up reactive render

  var baseRender = render.bind(this);
  var isRenderingPending = false;
  var reaction = new mobx__WEBPACK_IMPORTED_MODULE_0__["Reaction"]("".concat(initialName, "#").concat(rootNodeID, ".render()"), function () {
    if (!isRenderingPending) {
      // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)
      // This unidiomatic React usage but React will correctly warn about this so we continue as usual
      // See #85 / Pull #44
      isRenderingPending = true;
      if (typeof _this2.componentWillReact === "function") _this2.componentWillReact(); // TODO: wrap in action?

      if (_this2[mobxIsUnmounted] !== true) {
        // If we are unmounted at this point, componentWillReact() had a side effect causing the component to unmounted
        // TODO: remove this check? Then react will properly warn about the fact that this should not happen? See #73
        // However, people also claim this might happen during unit tests..
        var hasError = true;

        try {
          setHiddenProp(_this2, isForcingUpdateKey, true);
          if (!_this2[skipRenderKey]) react__WEBPACK_IMPORTED_MODULE_1__["Component"].prototype.forceUpdate.call(_this2);
          hasError = false;
        } finally {
          setHiddenProp(_this2, isForcingUpdateKey, false);
          if (hasError) reaction.dispose();
        }
      }
    }
  });
  reaction.reactComponent = this;
  reactiveRender[mobxAdminProperty] = reaction;
  this.render = reactiveRender;
  return reactiveRender.call(this);
}
/**
 * ReactiveMixin
 */


var reactiveMixin = {
  componentWillUnmount: function componentWillUnmount() {
    if (isUsingStaticRendering === true) return;
    this.render[mobxAdminProperty] && this.render[mobxAdminProperty].dispose();
    this[mobxIsUnmounted] = true;

    if (isDevtoolsEnabled) {
      var node = findDOMNode$2(this);

      if (node && componentByNodeRegistry) {
        componentByNodeRegistry.delete(node);
      }

      renderReporter.emit({
        event: "destroy",
        component: this,
        node: node
      });
    }
  },
  componentDidMount: function componentDidMount() {
    if (isDevtoolsEnabled) {
      reportRendering(this);
    }
  },
  componentDidUpdate: function componentDidUpdate() {
    if (isDevtoolsEnabled) {
      reportRendering(this);
    }
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    if (isUsingStaticRendering) {
      console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
    } // update on any state changes (as is the default)


    if (this.state !== nextState) {
      return true;
    } // update if props are shallowly not equal, inspired by PureRenderMixin
    // we could return just 'false' here, and avoid the `skipRender` checks etc
    // however, it is nicer if lifecycle events are triggered like usually,
    // so we return true here if props are shallowly modified.


    return !shallowEqual(this.props, nextProps);
  }
};

function makeObservableProp(target, propName) {
  var valueHolderKey = newSymbol("reactProp_".concat(propName, "_valueHolder"));
  var atomHolderKey = newSymbol("reactProp_".concat(propName, "_atomHolder"));

  function getAtom() {
    if (!this[atomHolderKey]) {
      setHiddenProp(this, atomHolderKey, Object(mobx__WEBPACK_IMPORTED_MODULE_0__["createAtom"])("reactive " + propName));
    }

    return this[atomHolderKey];
  }

  Object.defineProperty(target, propName, {
    configurable: true,
    enumerable: true,
    get: function get() {
      getAtom.call(this).reportObserved();
      return this[valueHolderKey];
    },
    set: function set(v) {
      if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {
        setHiddenProp(this, valueHolderKey, v);
        setHiddenProp(this, skipRenderKey, true);
        getAtom.call(this).reportChanged();
        setHiddenProp(this, skipRenderKey, false);
      } else {
        setHiddenProp(this, valueHolderKey, v);
      }
    }
  });
}
/**
 * Observer function / decorator
 */


function observer(arg1, arg2) {
  if (typeof arg1 === "string") {
    throw new Error("Store names should be provided as array");
  }

  if (Array.isArray(arg1)) {
    // TODO: remove in next major
    // component needs stores
    if (!warnedAboutObserverInjectDeprecation) {
      warnedAboutObserverInjectDeprecation = true;
      console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`');
    }

    if (!arg2) {
      // invoked as decorator
      return function (componentClass) {
        return observer(arg1, componentClass);
      };
    } else {
      return inject.apply(null, arg1)(observer(arg2));
    }
  }

  var componentClass = arg1;

  if (componentClass.isMobxInjector === true) {
    console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
  }

  if (componentClass.__proto__ === react__WEBPACK_IMPORTED_MODULE_1__["PureComponent"]) {
    console.warn("Mobx observer: You are using 'observer' on React.PureComponent. These two achieve two opposite goals and should not be used together");
  } // Unwrap forward refs into `<Observer>` component
  // we need to unwrap the render, because it is the inner render that needs to be tracked,
  // not the ForwardRef HoC


  if (ReactForwardRefSymbol && componentClass["$$typeof"] === ReactForwardRefSymbol) {
    var _baseRender = componentClass.render;
    if (typeof _baseRender !== "function") throw new Error("render property of ForwardRef was not a function"); // TODO: do we need to hoist statics from baseRender to the forward ref?

    return Object(react__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function ObserverForwardRef() {
      var _arguments = arguments;
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Observer, null, function () {
        return _baseRender.apply(undefined, _arguments);
      });
    });
  } // Stateless function component:
  // If it is function but doesn't seem to be a react class constructor,
  // wrap it to a react class automatically


  if (typeof componentClass === "function" && (!componentClass.prototype || !componentClass.prototype.render) && !componentClass.isReactClass && !react__WEBPACK_IMPORTED_MODULE_1__["Component"].isPrototypeOf(componentClass)) {
    var _class, _temp;

    var observerComponent = observer((_temp = _class =
    /*#__PURE__*/
    function (_Component) {
      _inherits(_class, _Component);

      function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
      }

      _createClass(_class, [{
        key: "render",
        value: function render() {
          return componentClass.call(this, this.props, this.context);
        }
      }]);

      return _class;
    }(react__WEBPACK_IMPORTED_MODULE_1__["Component"]), _class.displayName = componentClass.displayName || componentClass.name, _class.contextTypes = componentClass.contextTypes, _class.propTypes = componentClass.propTypes, _class.defaultProps = componentClass.defaultProps, _temp));
    hoistNonReactStatics_cjs(observerComponent, componentClass);
    return observerComponent;
  }

  if (!componentClass) {
    throw new Error("Please pass a valid component to 'observer'");
  }

  var target = componentClass.prototype || componentClass;
  mixinLifecycleEvents(target);
  componentClass.isMobXReactObserver = true;
  makeObservableProp(target, "props");
  makeObservableProp(target, "state");
  var baseRender = target.render;

  target.render = function () {
    return makeComponentReactive.call(this, baseRender);
  };

  return componentClass;
}

function mixinLifecycleEvents(target) {
  ["componentDidMount", "componentWillUnmount", "componentDidUpdate"].forEach(function (funcName) {
    patch$1(target, funcName);
  });

  if (!target.shouldComponentUpdate) {
    target.shouldComponentUpdate = reactiveMixin.shouldComponentUpdate;
  } else {
    if (target.shouldComponentUpdate !== reactiveMixin.shouldComponentUpdate) {
      // TODO: make throw in next major
      console.warn("Use `shouldComponentUpdate` in an `observer` based component breaks the behavior of `observer` and might lead to unexpected results. Manually implementing `sCU` should not be needed when using mobx-react.");
    }
  }
}

var Observer = observer(function (_ref2) {
  var children = _ref2.children,
      observerInject = _ref2.inject,
      render = _ref2.render;
  var component = children || render;

  if (typeof component === "undefined") {
    return null;
  }

  if (!observerInject) {
    return component();
  } // TODO: remove in next major


  console.warn("<Observer inject=.../> is no longer supported. Please use inject on the enclosing component instead");
  var InjectComponent = inject(observerInject)(component);
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(InjectComponent, null);
});
Observer.displayName = "Observer";

var ObserverPropsCheck = function ObserverPropsCheck(props, key, componentName, location, propFullName) {
  var extraKey = key === "children" ? "render" : "children";

  if (typeof props[key] === "function" && typeof props[extraKey] === "function") {
    return new Error("Invalid prop,do not use children and render in the same time in`" + componentName);
  }

  if (typeof props[key] === "function" || typeof props[extraKey] === "function") {
    return;
  }

  return new Error("Invalid prop `" + propFullName + "` of type `" + _typeof(props[key]) + "` supplied to" + " `" + componentName + "`, expected `function`.");
};

Observer.propTypes = {
  render: ObserverPropsCheck,
  children: ObserverPropsCheck
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component$$1) {
  var prototype = Component$$1.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (
    typeof Component$$1.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component$$1;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (
    foundWillMountName !== null ||
    foundWillReceivePropsName !== null ||
    foundWillUpdateName !== null
  ) {
    var componentName = Component$$1.displayName || Component$$1.name;
    var newApiName =
      typeof Component$$1.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';

    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null
          ? '\n  ' + foundWillReceivePropsName
          : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks'
    );
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component$$1.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
      );
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
      prevProps,
      prevState,
      maybeSnapshot
    ) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag
        ? this.__reactInternalSnapshot
        : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component$$1;
}

var specialReactKeys = {
  children: true,
  key: true,
  ref: true
};

var Provider =
/*#__PURE__*/
function (_Component) {
  _inherits(Provider, _Component);

  function Provider(props, context) {
    var _this;

    _classCallCheck(this, Provider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Provider).call(this, props, context));
    _this.state = {};
    copyStores(props, _this.state);
    return _this;
  }

  _createClass(Provider, [{
    key: "render",
    value: function render() {
      return react__WEBPACK_IMPORTED_MODULE_1__["Children"].only(this.props.children);
    }
  }, {
    key: "getChildContext",
    value: function getChildContext() {
      var stores = {}; // inherit stores

      copyStores(this.context.mobxStores, stores); // add own stores

      copyStores(this.props, stores);
      return {
        mobxStores: stores
      };
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (!nextProps) return null;
      if (!prevState) return nextProps; // Maybe this warning is too aggressive?

      if (Object.keys(nextProps).filter(validStoreName).length !== Object.keys(prevState).filter(validStoreName).length) console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children");
      if (!nextProps.suppressChangedStoreWarning) for (var key in nextProps) {
        if (validStoreName(key) && prevState[key] !== nextProps[key]) console.warn("MobX Provider: Provided store '" + key + "' has changed. Please avoid replacing stores as the change might not propagate to all children");
      }
      return nextProps;
    }
  }]);

  return Provider;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);

Provider.contextTypes = {
  mobxStores: objectOrObservableObject
};
Provider.childContextTypes = {
  mobxStores: objectOrObservableObject.isRequired
};

function copyStores(from, to) {
  if (!from) return;

  for (var key in from) {
    if (validStoreName(key)) to[key] = from[key];
  }
}

function validStoreName(key) {
  return !specialReactKeys[key] && key !== "suppressChangedStoreWarning";
} // TODO: kill in next major


polyfill(Provider);

var storeKey = newSymbol("disposeOnUnmount");

function runDisposersOnWillUnmount() {
  var _this = this;

  if (!this[storeKey]) {
    // when disposeOnUnmount is only set to some instances of a component it will still patch the prototype
    return;
  }

  this[storeKey].forEach(function (propKeyOrFunction) {
    var prop = typeof propKeyOrFunction === "string" ? _this[propKeyOrFunction] : propKeyOrFunction;

    if (prop !== undefined && prop !== null) {
      if (typeof prop !== "function") {
        throw new Error("[mobx-react] disposeOnUnmount only works on functions such as disposers returned by reactions, autorun, etc.");
      }

      prop();
    }
  });
  this[storeKey] = [];
}

function disposeOnUnmount(target, propertyKeyOrFunction) {
  if (Array.isArray(propertyKeyOrFunction)) {
    return propertyKeyOrFunction.map(function (fn) {
      return disposeOnUnmount(target, fn);
    });
  }

  if (!target instanceof react__WEBPACK_IMPORTED_MODULE_1__["Component"]) {
    throw new Error("[mobx-react] disposeOnUnmount only works on class based React components.");
  }

  if (typeof propertyKeyOrFunction !== "string" && typeof propertyKeyOrFunction !== "function") {
    throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");
  } // add property key / function we want run (disposed) to the store


  var componentWasAlreadyModified = !!target[storeKey];
  var store = target[storeKey] || (target[storeKey] = []);
  store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already

  if (!componentWasAlreadyModified) {
    patch(target, "componentWillUnmount", runDisposersOnWillUnmount);
  } // return the disposer as is if invoked as a non decorator


  if (typeof propertyKeyOrFunction !== "string") {
    return propertyKeyOrFunction;
  }
}

if (!react__WEBPACK_IMPORTED_MODULE_1__["Component"]) throw new Error("mobx-react requires React to be available");
if (!mobx__WEBPACK_IMPORTED_MODULE_0__["spy"]) throw new Error("mobx-react requires mobx to be available");
if (typeof react_dom__WEBPACK_IMPORTED_MODULE_2__["unstable_batchedUpdates"] === "function") Object(mobx__WEBPACK_IMPORTED_MODULE_0__["configure"])({
  reactionScheduler: react_dom__WEBPACK_IMPORTED_MODULE_2__["unstable_batchedUpdates"]
});
var onError = function onError(fn) {
  return errorsReporter.on(fn);
};

if ((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "undefined" ? "undefined" : _typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__)) === "object") {
  var mobx = {
    spy: mobx__WEBPACK_IMPORTED_MODULE_0__["spy"],
    extras: {
      getDebugName: mobx__WEBPACK_IMPORTED_MODULE_0__["getDebugName"]
    }
  };
  var mobxReact = {
    renderReporter: renderReporter,
    componentByNodeRegistry: componentByNodeRegistry,
    componentByNodeRegistery: componentByNodeRegistry,
    trackComponents: trackComponents
  };

  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(mobxReact, mobx);
}




/***/ }),
/* 82 */,
/* 83 */,
/* 84 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 85 */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),
/* 86 */
/***/ (function(module, exports) {

module.exports = require("buffer");

/***/ }),
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var Parser = __webpack_require__(269),
    DomHandler = __webpack_require__(579);

function defineProp(name, value){
	delete module.exports[name];
	module.exports[name] = value;
	return value;
}

module.exports = {
	Parser: Parser,
	Tokenizer: __webpack_require__(270),
	ElementType: __webpack_require__(164),
	DomHandler: DomHandler,
	get FeedHandler(){
		return defineProp("FeedHandler", __webpack_require__(580));
	},
	get Stream(){
		return defineProp("Stream", __webpack_require__(581));
	},
	get WritableStream(){
		return defineProp("WritableStream", __webpack_require__(271));
	},
	get ProxyHandler(){
		return defineProp("ProxyHandler", __webpack_require__(587));
	},
	get DomUtils(){
		return defineProp("DomUtils", __webpack_require__(76));
	},
	get CollectingHandler(){
		return defineProp("CollectingHandler", __webpack_require__(588));
	},
	// For legacy support
	DefaultHandler: DomHandler,
	get RssHandler(){
		return defineProp("RssHandler", this.FeedHandler);
	},
	//helper methods
	parseDOM: function(data, options) {
		var handler = new DomHandler(options);
		var parser = new Parser(handler, options);
		parser.end(data);
		return handler.dom;
	},
	parseFeed: function(feed, options){
		var handler = new module.exports.FeedHandler();
		var parser = new Parser(handler);
		parser.end(feed);
		return handler.dom;
	},
	createDomStream: function(cb, options, elementCb){
		var handler = new DomHandler(cb, options, elementCb);
		return new Parser(handler, options);
	},
	// List of all events that the parser emits
	EVENTS: { /* Format: eventname: number of arguments */
		attribute: 2,
		cdatastart: 0,
		cdataend: 0,
		text: 1,
		processinginstruction: 2,
		comment: 1,
		commentend: 0,
		closetag: 1,
		opentag: 2,
		opentagname: 1,
		error: 1,
		end: 0
	}
};


/***/ }),
/* 97 */
/***/ (function(module, exports) {

module.exports = {
	trueFunc: function trueFunc(){
		return true;
	},
	falseFunc: function falseFunc(){
		return false;
	}
};

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(265);
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Layout = __webpack_require__(551);

var _Layout2 = _interopRequireDefault(_Layout);

var _Section = __webpack_require__(552);

var _Section2 = _interopRequireDefault(_Section);

var _Header = __webpack_require__(553);

var _Header2 = _interopRequireDefault(_Header);

var _Footer = __webpack_require__(554);

var _Footer2 = _interopRequireDefault(_Footer);

var _Aside = __webpack_require__(555);

var _Aside2 = _interopRequireDefault(_Aside);

var _Main = __webpack_require__(557);

var _Main2 = _interopRequireDefault(_Main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_Layout2.default.Section = _Section2.default;
_Layout2.default.Header = _Header2.default;
_Layout2.default.Footer = _Footer2.default;
_Layout2.default.Aside = _Aside2.default;
_Layout2.default.Main = _Main2.default;

exports.default = _Layout2.default;

/***/ }),
/* 99 */,
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./renderer/node_modules/@icedesign/base/lib/dialog/index.js
var dialog = __webpack_require__(24);
var dialog_default = /*#__PURE__*/__webpack_require__.n(dialog);

// EXTERNAL MODULE: external "window.React"
var external_window_React_ = __webpack_require__(1);
var external_window_React_default = /*#__PURE__*/__webpack_require__.n(external_window_React_);

// EXTERNAL MODULE: ./renderer/src/lib/logger.js
var logger = __webpack_require__(7);

// CONCATENATED MODULE: ./renderer/src/components/dialog/alert.jsx



/**
 * 全局提示模块
 */

var alert_notify = function notify(_ref, done) {
  var _ref$title = _ref.title,
      title = _ref$title === void 0 ? '错误信息' : _ref$title,
      _ref$content = _ref.content,
      content = _ref$content === void 0 ? 'OMG, 发生了未知错误！' : _ref$content,
      _ref$fullWidth = _ref.fullWidth,
      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
      error = _ref.error;

  function ok() {
    if (typeof done === 'function') done();
  }

  if (error) {
    logger["a" /* default */].error(error);
  }

  dialog_default.a.alert({
    className: 'notice-dialog',
    needWrapper: false,
    hasMask: true,
    onOk: ok,
    onClose: ok,
    content: external_window_React_default.a.createElement("div", {
      style: {
        color: '#666',
        fontFamily: 'Consolas, Monaco, "Andale Mono", monospace',
        fontSize: 12,
        lineHeight: '20px',
        margin: 15,
        userSelect: 'text',
        width: fullWidth ? '80vw' : 500,
        overflow: 'auto'
      }
    }, content),
    title: title
  });
};

/* harmony default export */ var dialog_alert = (alert_notify);
// EXTERNAL MODULE: ./node_modules/ansi-html/index.js
var ansi_html = __webpack_require__(57);
var ansi_html_default = /*#__PURE__*/__webpack_require__.n(ansi_html);

// CONCATENATED MODULE: ./renderer/src/components/dialog/notice.jsx



/**
 * 全局提示模块
 */

var notice_notify = function notify(_ref) {
  var _ref$title = _ref.title,
      title = _ref$title === void 0 ? '错误信息' : _ref$title,
      _ref$error = _ref.error,
      error = _ref$error === void 0 ? {} : _ref$error,
      _ref$message = _ref.message,
      message = _ref$message === void 0 ? '' : _ref$message;
  var msg = '';
  var stackMessage = '';

  if (typeof error === 'string') {
    msg = error;
  } else {
    var _error$metadata = error.metadata,
        metadata = _error$metadata === void 0 ? {} : _error$metadata,
        stack = error.stack;
    stackMessage = stack;
    msg = metadata.message || error.message || '';
  }

  var stackHtml = '';
  var str = ansi_html_default()(msg.replace(/\n/g, '<br>'));

  if (stackMessage) {
    stackHtml = ansi_html_default()(stackMessage.replace(/\n/g, '<br>'));
  }

  if (message) {
    message = message + '<br/>';
  }

  dialog_default.a.alert({
    className: 'notice-dialog',
    needWrapper: false,
    content: external_window_React_default.a.createElement("div", {
      style: {
        backgroundImage: 'linear-gradient(#21221d 50%, #272822 50%)',
        backgroundOrigin: 'content-box',
        backgroundSize: '40px 40px',
        color: '#E5E5C2',
        fontFamily: 'Consolas, Monaco, "Andale Mono", monospace',
        fontSize: 12,
        lineHeight: '20px',
        margin: 0,
        padding: '5px',
        userSelect: 'text',
        whiteSpace: 'pre-wrap',
        width: '500px',
        overflow: 'auto'
      },
      dangerouslySetInnerHTML: {
        __html: message + str + '<br/>' + stackHtml
      }
    }),
    title: title
  });
};

/* harmony default export */ var notice = (notice_notify);
// CONCATENATED MODULE: ./renderer/src/components/dialog/confirm.js



/**
 * 全局提示模块
 */
var confirm_confirm = function confirm(_ref, done) {
  var title = _ref.title,
      content = _ref.content,
      _ref$fullWidth = _ref.fullWidth,
      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth;

  function ok() {
    if (typeof done === 'function') done(true);
  }

  function cancel() {
    if (typeof done === 'function') done(false);
  }

  if (!title || !content) {
    throw new Error('title & content 字段必填');
  }

  dialog_default.a.confirm({
    className: 'notice-dialog',
    needWrapper: false,
    hasMask: true,
    onOk: ok,
    onCancel: cancel,
    onClose: cancel,
    content: external_window_React_default.a.createElement("div", {
      style: {
        color: '#666',
        fontFamily: 'Consolas, Monaco, "Andale Mono", monospace',
        fontSize: 12,
        lineHeight: '20px',
        margin: 15,
        userSelect: 'text',
        width: fullWidth ? '80vw' : 500,
        overflow: 'auto'
      }
    }, content),
    title: title
  });
};

/* harmony default export */ var dialog_confirm = (confirm_confirm);
// CONCATENATED MODULE: ./renderer/src/components/dialog/error.jsx



/**
 * 用于全局展示错误
 */

var error_notify = function notify() {
  var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '错误提示';
  var error = arguments.length > 1 ? arguments[1] : undefined;
  var done = arguments.length > 2 ? arguments[2] : undefined;

  function ok() {
    if (typeof done === 'function') done();
  }

  var message;
  var stack;
  var metadata;
  var metadataMessage = '';
  var str = '';
  var stackHtml = '';

  if (typeof error === 'string') {
    message = error;
  } else {
    message = error.message;
    stack = error.stack;
    metadata = error.metadata;

    if (metadata) {
      stack = metadata.stack;
      metadataMessage = metadata.message || '';
      str = ansi_html_default()(metadataMessage.replace(/\n/g, '<br>'));
    }
  }

  if (stack) {
    stackHtml = ansi_html_default()(stack.replace(/\n/g, '<br>'));
  }

  var strHtml = "".concat(str).concat(str ? '<br/>' : '').concat(stackHtml);

  dialog_default.a.alert({
    className: 'notice-dialog',
    needWrapper: false,
    hasMask: true,
    onOk: ok,
    onClose: ok,
    content: external_window_React_default.a.createElement("div", null, external_window_React_default.a.createElement("div", {
      style: {
        color: '#666',
        fontFamily: 'Consolas, Monaco, "Andale Mono", monospace',
        fontSize: 12,
        lineHeight: '20px',
        margin: 15,
        userSelect: 'text',
        width: '80vw',
        overflow: 'auto'
      }
    }, message), strHtml && external_window_React_default.a.createElement("div", {
      style: {
        backgroundImage: 'linear-gradient(#21221d 50%, #272822 50%)',
        backgroundOrigin: 'content-box',
        backgroundSize: '40px 40px',
        color: '#E5E5C2',
        fontFamily: 'Consolas, Monaco, "Andale Mono", monospace',
        fontSize: 12,
        lineHeight: '20px',
        margin: 0,
        padding: '5px',
        userSelect: 'text',
        whiteSpace: 'pre-wrap',
        width: 'auto',
        maxHeight: 400,
        overflow: 'auto'
      },
      dangerouslySetInnerHTML: {
        __html: strHtml
      }
    })),
    title: title
  });
};

/* harmony default export */ var dialog_error = (error_notify);
// CONCATENATED MODULE: ./renderer/src/components/dialog/index.js




/* harmony default export */ var components_dialog = __webpack_exports__["a"] = ({
  alert: dialog_alert,
  notice: notice,
  confirm: dialog_confirm,
  error: dialog_error
});

/***/ }),
/* 101 */,
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xterm_lib_addons_fit_fit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(297);
/* harmony import */ var xterm_lib_addons_fit_fit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xterm_lib_addons_fit_fit__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var default_shell__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(298);
/* harmony import */ var default_shell__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(default_shell__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var path_exists__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(35);
/* harmony import */ var path_exists__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path_exists__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


 // import * as webLinks from 'xterm/lib/addons/webLinks/webLinks';




var pty = _services__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].pty;

var _remote$require = electron__WEBPACK_IMPORTED_MODULE_0__["remote"].require('./shared'),
    env = _remote$require.env,
    isWin = _remote$require.isWin;

window.Terminal.applyAddon(xterm_lib_addons_fit_fit__WEBPACK_IMPORTED_MODULE_1__); // Terminal.applyAddon(webLinks);

var termDefaultOptions = {
  cols: 108,
  rows: 21,
  fontFamily: 'Menlo, "DejaVu Sans Mono", Consolas, "Lucida Console", monospace',
  allowTransparency: 'transparent',
  fontSize: 12,
  lineHeight: 1.5,
  theme: {
    foreground: '#f0f0f0',
    background: 'transparent',
    selection: 'rgba(248,28,229,0.3)'
  }
};
var terms = {}; // windows 下 terminal 的高度有偏差

function rowsOffset(rows) {
  if (isWin) {
    return rows - 2;
  }

  return rows;
}

var Terms =
/*#__PURE__*/
function () {
  function Terms() {
    _classCallCheck(this, Terms);

    this.newPty = function (term, cwd) {
      var ptyProcess = pty.spawn(default_shell__WEBPACK_IMPORTED_MODULE_2___default.a, [], {
        name: 'xterm-color',
        cols: 108,
        rows: 21,
        cwd: cwd,
        env: env.getEnv()
      });
      ptyProcess.on('data', function (data) {
        term.write(data);
      }); // todo 禁用命令行输入

      term.on('data', function (data) {
        ptyProcess.write(data);
      });
      term.ptyProcess = ptyProcess;
    };
  }

  _createClass(Terms, [{
    key: "new",
    value: function _new(cwd, container) {
      if (typeof terms[cwd] === 'undefined') {
        var term = new window.Terminal(termDefaultOptions); // 判断 cwd 必须存在

        if (path_exists__WEBPACK_IMPORTED_MODULE_3___default.a.sync(cwd)) {
          this.newPty(term, cwd);
        }

        terms[cwd] = term;
        term.open(container);
        term.fit();
        setTimeout(function () {
          var _container$getBoundin = container.getBoundingClientRect(),
              width = _container$getBoundin.width,
              height = _container$getBoundin.height;

          var charMeasure = term.charMeasure;
          var cols = Math.floor(width / (charMeasure.width || 9.015625));
          var rows = Math.floor(height / 21);
          term.resize(cols, rowsOffset(rows));
        }, 1000 / 60);
        term.attachCustomKeyEventHandler(function (e) {
          if (e.ctrlKey && e.key === 'd') {
            return false;
          }
        });
      } else {
        terms[cwd].open(container);
        terms[cwd].fit();

        if (typeof terms[cwd].ptyProcess === 'undefined') {
          this.new(terms[cwd], cwd);
        }

        setTimeout(function () {
          var _container$getBoundin2 = container.getBoundingClientRect(),
              width = _container$getBoundin2.width,
              height = _container$getBoundin2.height;

          var charMeasure = terms[cwd].charMeasure;
          var cols = Math.floor(width / (charMeasure.width || 9.015625));
          var rows = Math.floor(height / 21);
          terms[cwd].resize(cols, rowsOffset(rows));
        }, 1000 / 60);
      }
    }
  }, {
    key: "newline",
    value: function newline(cwd) {
      if (terms[cwd] && terms[cwd].ptyProcess) {
        terms[cwd].ptyProcess.write('\r');
      }
    }
  }, {
    key: "write",
    value: function write(cwd, data) {
      if (terms[cwd]) {
        terms[cwd].write(data);
      }
    }
  }, {
    key: "writeln",
    value: function writeln(cwd, data) {
      if (terms[cwd]) {
        terms[cwd].writeln(data);
      }
    }
  }, {
    key: "clear",
    value: function clear(cwd) {
      if (terms[cwd]) {
        terms[cwd].clear();
      }
    }
  }, {
    key: "resize",
    value: function resize(cwd, cols, rows) {
      terms[cwd].resize(cols, rowsOffset(rows));

      if (terms[cwd].ptyProcess) {
        terms[cwd].ptyProcess.resize(cols, rowsOffset(rows));
      }
    }
  }, {
    key: "getTerm",
    value: function getTerm(cwd) {
      return terms[cwd];
    }
  }]);

  return Terms;
}();

/* harmony default export */ __webpack_exports__["a"] = (new Terms());

/***/ }),
/* 103 */
/***/ (function(module, exports) {

module.exports = require("querystring");

/***/ }),
/* 104 */,
/* 105 */
/***/ (function(module, exports) {

module.exports = require("net");

/***/ }),
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(28).fromCallback
const rimraf = __webpack_require__(484)

module.exports = {
  remove: u(rimraf),
  removeSync: rimraf.sync
}


/***/ }),
/* 115 */
/***/ (function(module, exports) {


module.exports = ListLogSummary;

/**
 * The ListLogSummary is returned as a response to getting `git().log()` or `git().stashList()`
 *
 * @constructor
 */
function ListLogSummary (all) {
   this.all = all;
   this.latest = all.length && all[0] || null;
   this.total = all.length;
}

/**
 * Detail for each of the log lines
 * @type {ListLogLine[]}
 */
ListLogSummary.prototype.all = null;

/**
 * Most recent entry in the log
 * @type {ListLogLine}
 */
ListLogSummary.prototype.latest = null;

/**
 * Number of items in the log
 * @type {number}
 */
ListLogSummary.prototype.total = 0;

function ListLogLine (line, fields) {
   for (var k = 0; k < fields.length; k++) {
      this[fields[k]] = line[k];
   }
}

ListLogSummary.COMMIT_BOUNDARY = '------------------------ >8 ------------------------';

ListLogSummary.parse = function (text, splitter, fields) {
   fields = fields || ['hash', 'date', 'message', 'author_name', 'author_email'];
   return new ListLogSummary(
      text
         .trim()
         .split(ListLogSummary.COMMIT_BOUNDARY + '\n')
         .map(function (item) {
            return item.replace(ListLogSummary.COMMIT_BOUNDARY, '')
         })
         .filter(Boolean)
         .map(function (item) {
            return new ListLogLine(item.trim().split(splitter), fields);
         })
   );
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}



/***/ }),
/* 117 */
/***/ (function(module, exports) {

exports = module.exports = SemVer;

// The debug function is excluded entirely from the minified version.
/* nomin */ var debug;
/* nomin */ if (typeof process === 'object' &&
    /* nomin */ process.env &&
    /* nomin */ process.env.NODE_DEBUG &&
    /* nomin */ /\bsemver\b/i.test(process.env.NODE_DEBUG))
  /* nomin */ debug = function() {
    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);
    /* nomin */ args.unshift('SEMVER');
    /* nomin */ console.log.apply(console, args);
    /* nomin */ };
/* nomin */ else
  /* nomin */ debug = function() {};

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
exports.SEMVER_SPEC_VERSION = '2.0.0';

var MAX_LENGTH = 256;
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

// Max safe segment length for coercion.
var MAX_SAFE_COMPONENT_LENGTH = 16;

// The actual regexps go on exports.re
var re = exports.re = [];
var src = exports.src = [];
var R = 0;

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

var NUMERICIDENTIFIER = R++;
src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
var NUMERICIDENTIFIERLOOSE = R++;
src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';


// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

var NONNUMERICIDENTIFIER = R++;
src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';


// ## Main Version
// Three dot-separated numeric identifiers.

var MAINVERSION = R++;
src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')';

var MAINVERSIONLOOSE = R++;
src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

var PRERELEASEIDENTIFIER = R++;
src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                            '|' + src[NONNUMERICIDENTIFIER] + ')';

var PRERELEASEIDENTIFIERLOOSE = R++;
src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                 '|' + src[NONNUMERICIDENTIFIER] + ')';


// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

var PRERELEASE = R++;
src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

var PRERELEASELOOSE = R++;
src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

var BUILDIDENTIFIER = R++;
src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

var BUILD = R++;
src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';


// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

var FULL = R++;
var FULLPLAIN = 'v?' + src[MAINVERSION] +
                src[PRERELEASE] + '?' +
                src[BUILD] + '?';

src[FULL] = '^' + FULLPLAIN + '$';

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                 src[PRERELEASELOOSE] + '?' +
                 src[BUILD] + '?';

var LOOSE = R++;
src[LOOSE] = '^' + LOOSEPLAIN + '$';

var GTLT = R++;
src[GTLT] = '((?:<|>)?=?)';

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
var XRANGEIDENTIFIERLOOSE = R++;
src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
var XRANGEIDENTIFIER = R++;
src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

var XRANGEPLAIN = R++;
src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:' + src[PRERELEASE] + ')?' +
                   src[BUILD] + '?' +
                   ')?)?';

var XRANGEPLAINLOOSE = R++;
src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:' + src[PRERELEASELOOSE] + ')?' +
                        src[BUILD] + '?' +
                        ')?)?';

var XRANGE = R++;
src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
var XRANGELOOSE = R++;
src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
var COERCE = R++;
src[COERCE] = '(?:^|[^\\d])' +
              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:$|[^\\d])';

// Tilde ranges.
// Meaning is "reasonably at or greater than"
var LONETILDE = R++;
src[LONETILDE] = '(?:~>?)';

var TILDETRIM = R++;
src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
var tildeTrimReplace = '$1~';

var TILDE = R++;
src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
var TILDELOOSE = R++;
src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

// Caret ranges.
// Meaning is "at least and backwards compatible with"
var LONECARET = R++;
src[LONECARET] = '(?:\\^)';

var CARETTRIM = R++;
src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
var caretTrimReplace = '$1^';

var CARET = R++;
src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
var CARETLOOSE = R++;
src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

// A simple gt/lt/eq thing, or just "" to indicate "any version"
var COMPARATORLOOSE = R++;
src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
var COMPARATOR = R++;
src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';


// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
var COMPARATORTRIM = R++;
src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

// this one has to use the /g flag
re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
var comparatorTrimReplace = '$1$2$3';


// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
var HYPHENRANGE = R++;
src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                   '\\s+-\\s+' +
                   '(' + src[XRANGEPLAIN] + ')' +
                   '\\s*$';

var HYPHENRANGELOOSE = R++;
src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s+-\\s+' +
                        '(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s*$';

// Star ranges basically just allow anything at all.
var STAR = R++;
src[STAR] = '(<|>)?=?\\s*\\*';

// Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.
for (var i = 0; i < R; i++) {
  debug(i, src[i]);
  if (!re[i])
    re[i] = new RegExp(src[i]);
}

exports.parse = parse;
function parse(version, options) {
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }

  if (version instanceof SemVer)
    return version;

  if (typeof version !== 'string')
    return null;

  if (version.length > MAX_LENGTH)
    return null;

  var r = options.loose ? re[LOOSE] : re[FULL];
  if (!r.test(version))
    return null;

  try {
    return new SemVer(version, options);
  } catch (er) {
    return null;
  }
}

exports.valid = valid;
function valid(version, options) {
  var v = parse(version, options);
  return v ? v.version : null;
}


exports.clean = clean;
function clean(version, options) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), options);
  return s ? s.version : null;
}

exports.SemVer = SemVer;

function SemVer(version, options) {
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }
  if (version instanceof SemVer) {
    if (version.loose === options.loose)
      return version;
    else
      version = version.version;
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version);
  }

  if (version.length > MAX_LENGTH)
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')

  if (!(this instanceof SemVer))
    return new SemVer(version, options);

  debug('SemVer', version, options);
  this.options = options;
  this.loose = !!options.loose;

  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);

  if (!m)
    throw new TypeError('Invalid Version: ' + version);

  this.raw = version;

  // these are actually numbers
  this.major = +m[1];
  this.minor = +m[2];
  this.patch = +m[3];

  if (this.major > MAX_SAFE_INTEGER || this.major < 0)
    throw new TypeError('Invalid major version')

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
    throw new TypeError('Invalid minor version')

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
    throw new TypeError('Invalid patch version')

  // numberify any prerelease numeric ids
  if (!m[4])
    this.prerelease = [];
  else
    this.prerelease = m[4].split('.').map(function(id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id;
        if (num >= 0 && num < MAX_SAFE_INTEGER)
          return num;
      }
      return id;
    });

  this.build = m[5] ? m[5].split('.') : [];
  this.format();
}

SemVer.prototype.format = function() {
  this.version = this.major + '.' + this.minor + '.' + this.patch;
  if (this.prerelease.length)
    this.version += '-' + this.prerelease.join('.');
  return this.version;
};

SemVer.prototype.toString = function() {
  return this.version;
};

SemVer.prototype.compare = function(other) {
  debug('SemVer.compare', this.version, this.options, other);
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.options);

  return this.compareMain(other) || this.comparePre(other);
};

SemVer.prototype.compareMain = function(other) {
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.options);

  return compareIdentifiers(this.major, other.major) ||
         compareIdentifiers(this.minor, other.minor) ||
         compareIdentifiers(this.patch, other.patch);
};

SemVer.prototype.comparePre = function(other) {
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.options);

  // NOT having a prerelease is > having one
  if (this.prerelease.length && !other.prerelease.length)
    return -1;
  else if (!this.prerelease.length && other.prerelease.length)
    return 1;
  else if (!this.prerelease.length && !other.prerelease.length)
    return 0;

  var i = 0;
  do {
    var a = this.prerelease[i];
    var b = other.prerelease[i];
    debug('prerelease compare', i, a, b);
    if (a === undefined && b === undefined)
      return 0;
    else if (b === undefined)
      return 1;
    else if (a === undefined)
      return -1;
    else if (a === b)
      continue;
    else
      return compareIdentifiers(a, b);
  } while (++i);
};

// preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.
SemVer.prototype.inc = function(release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor = 0;
      this.major++;
      this.inc('pre', identifier);
      break;
    case 'preminor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor++;
      this.inc('pre', identifier);
      break;
    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0;
      this.inc('patch', identifier);
      this.inc('pre', identifier);
      break;
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.
    case 'prerelease':
      if (this.prerelease.length === 0)
        this.inc('patch', identifier);
      this.inc('pre', identifier);
      break;

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
        this.major++;
      this.minor = 0;
      this.patch = 0;
      this.prerelease = [];
      break;
    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0)
        this.minor++;
      this.patch = 0;
      this.prerelease = [];
      break;
    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0)
        this.patch++;
      this.prerelease = [];
      break;
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
    case 'pre':
      if (this.prerelease.length === 0)
        this.prerelease = [0];
      else {
        var i = this.prerelease.length;
        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++;
            i = -2;
          }
        }
        if (i === -1) // didn't increment anything
          this.prerelease.push(0);
      }
      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1]))
            this.prerelease = [identifier, 0];
        } else
          this.prerelease = [identifier, 0];
      }
      break;

    default:
      throw new Error('invalid increment argument: ' + release);
  }
  this.format();
  this.raw = this.version;
  return this;
};

exports.inc = inc;
function inc(version, release, loose, identifier) {
  if (typeof(loose) === 'string') {
    identifier = loose;
    loose = undefined;
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version;
  } catch (er) {
    return null;
  }
}

exports.diff = diff;
function diff(version1, version2) {
  if (eq(version1, version2)) {
    return null;
  } else {
    var v1 = parse(version1);
    var v2 = parse(version2);
    if (v1.prerelease.length || v2.prerelease.length) {
      for (var key in v1) {
        if (key === 'major' || key === 'minor' || key === 'patch') {
          if (v1[key] !== v2[key]) {
            return 'pre'+key;
          }
        }
      }
      return 'prerelease';
    }
    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return key;
        }
      }
    }
  }
}

exports.compareIdentifiers = compareIdentifiers;

var numeric = /^[0-9]+$/;
function compareIdentifiers(a, b) {
  var anum = numeric.test(a);
  var bnum = numeric.test(b);

  if (anum && bnum) {
    a = +a;
    b = +b;
  }

  return (anum && !bnum) ? -1 :
         (bnum && !anum) ? 1 :
         a < b ? -1 :
         a > b ? 1 :
         0;
}

exports.rcompareIdentifiers = rcompareIdentifiers;
function rcompareIdentifiers(a, b) {
  return compareIdentifiers(b, a);
}

exports.major = major;
function major(a, loose) {
  return new SemVer(a, loose).major;
}

exports.minor = minor;
function minor(a, loose) {
  return new SemVer(a, loose).minor;
}

exports.patch = patch;
function patch(a, loose) {
  return new SemVer(a, loose).patch;
}

exports.compare = compare;
function compare(a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose));
}

exports.compareLoose = compareLoose;
function compareLoose(a, b) {
  return compare(a, b, true);
}

exports.rcompare = rcompare;
function rcompare(a, b, loose) {
  return compare(b, a, loose);
}

exports.sort = sort;
function sort(list, loose) {
  return list.sort(function(a, b) {
    return exports.compare(a, b, loose);
  });
}

exports.rsort = rsort;
function rsort(list, loose) {
  return list.sort(function(a, b) {
    return exports.rcompare(a, b, loose);
  });
}

exports.gt = gt;
function gt(a, b, loose) {
  return compare(a, b, loose) > 0;
}

exports.lt = lt;
function lt(a, b, loose) {
  return compare(a, b, loose) < 0;
}

exports.eq = eq;
function eq(a, b, loose) {
  return compare(a, b, loose) === 0;
}

exports.neq = neq;
function neq(a, b, loose) {
  return compare(a, b, loose) !== 0;
}

exports.gte = gte;
function gte(a, b, loose) {
  return compare(a, b, loose) >= 0;
}

exports.lte = lte;
function lte(a, b, loose) {
  return compare(a, b, loose) <= 0;
}

exports.cmp = cmp;
function cmp(a, op, b, loose) {
  var ret;
  switch (op) {
    case '===':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      ret = a === b;
      break;
    case '!==':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      ret = a !== b;
      break;
    case '': case '=': case '==': ret = eq(a, b, loose); break;
    case '!=': ret = neq(a, b, loose); break;
    case '>': ret = gt(a, b, loose); break;
    case '>=': ret = gte(a, b, loose); break;
    case '<': ret = lt(a, b, loose); break;
    case '<=': ret = lte(a, b, loose); break;
    default: throw new TypeError('Invalid operator: ' + op);
  }
  return ret;
}

exports.Comparator = Comparator;
function Comparator(comp, options) {
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }

  if (comp instanceof Comparator) {
    if (comp.loose === !!options.loose)
      return comp;
    else
      comp = comp.value;
  }

  if (!(this instanceof Comparator))
    return new Comparator(comp, options);

  debug('comparator', comp, options);
  this.options = options;
  this.loose = !!options.loose;
  this.parse(comp);

  if (this.semver === ANY)
    this.value = '';
  else
    this.value = this.operator + this.semver.version;

  debug('comp', this);
}

var ANY = {};
Comparator.prototype.parse = function(comp) {
  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
  var m = comp.match(r);

  if (!m)
    throw new TypeError('Invalid comparator: ' + comp);

  this.operator = m[1];
  if (this.operator === '=')
    this.operator = '';

  // if it literally is just '>' or '' then allow anything.
  if (!m[2])
    this.semver = ANY;
  else
    this.semver = new SemVer(m[2], this.options.loose);
};

Comparator.prototype.toString = function() {
  return this.value;
};

Comparator.prototype.test = function(version) {
  debug('Comparator.test', version, this.options.loose);

  if (this.semver === ANY)
    return true;

  if (typeof version === 'string')
    version = new SemVer(version, this.options);

  return cmp(version, this.operator, this.semver, this.options);
};

Comparator.prototype.intersects = function(comp, options) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required');
  }

  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }

  var rangeTmp;

  if (this.operator === '') {
    rangeTmp = new Range(comp.value, options);
    return satisfies(this.value, rangeTmp, options);
  } else if (comp.operator === '') {
    rangeTmp = new Range(this.value, options);
    return satisfies(comp.semver, rangeTmp, options);
  }

  var sameDirectionIncreasing =
    (this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '>=' || comp.operator === '>');
  var sameDirectionDecreasing =
    (this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '<=' || comp.operator === '<');
  var sameSemVer = this.semver.version === comp.semver.version;
  var differentDirectionsInclusive =
    (this.operator === '>=' || this.operator === '<=') &&
    (comp.operator === '>=' || comp.operator === '<=');
  var oppositeDirectionsLessThan =
    cmp(this.semver, '<', comp.semver, options) &&
    ((this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '<=' || comp.operator === '<'));
  var oppositeDirectionsGreaterThan =
    cmp(this.semver, '>', comp.semver, options) &&
    ((this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '>=' || comp.operator === '>'));

  return sameDirectionIncreasing || sameDirectionDecreasing ||
    (sameSemVer && differentDirectionsInclusive) ||
    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
};


exports.Range = Range;
function Range(range, options) {
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }

  if (range instanceof Range) {
    if (range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease) {
      return range;
    } else {
      return new Range(range.raw, options);
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, options);
  }

  if (!(this instanceof Range))
    return new Range(range, options);

  this.options = options;
  this.loose = !!options.loose;
  this.includePrerelease = !!options.includePrerelease

  // First, split based on boolean or ||
  this.raw = range;
  this.set = range.split(/\s*\|\|\s*/).map(function(range) {
    return this.parseRange(range.trim());
  }, this).filter(function(c) {
    // throw out any that are not relevant for whatever reason
    return c.length;
  });

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range);
  }

  this.format();
}

Range.prototype.format = function() {
  this.range = this.set.map(function(comps) {
    return comps.join(' ').trim();
  }).join('||').trim();
  return this.range;
};

Range.prototype.toString = function() {
  return this.range;
};

Range.prototype.parseRange = function(range) {
  var loose = this.options.loose;
  range = range.trim();
  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
  range = range.replace(hr, hyphenReplace);
  debug('hyphen replace', range);
  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
  debug('comparator trim', range, re[COMPARATORTRIM]);

  // `~ 1.2.3` => `~1.2.3`
  range = range.replace(re[TILDETRIM], tildeTrimReplace);

  // `^ 1.2.3` => `^1.2.3`
  range = range.replace(re[CARETTRIM], caretTrimReplace);

  // normalize spaces
  range = range.split(/\s+/).join(' ');

  // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
  var set = range.split(' ').map(function(comp) {
    return parseComparator(comp, this.options);
  }, this).join(' ').split(/\s+/);
  if (this.options.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function(comp) {
      return !!comp.match(compRe);
    });
  }
  set = set.map(function(comp) {
    return new Comparator(comp, this.options);
  }, this);

  return set;
};

Range.prototype.intersects = function(range, options) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required');
  }

  return this.set.some(function(thisComparators) {
    return thisComparators.every(function(thisComparator) {
      return range.set.some(function(rangeComparators) {
        return rangeComparators.every(function(rangeComparator) {
          return thisComparator.intersects(rangeComparator, options);
        });
      });
    });
  });
};

// Mostly just for testing and legacy API reasons
exports.toComparators = toComparators;
function toComparators(range, options) {
  return new Range(range, options).set.map(function(comp) {
    return comp.map(function(c) {
      return c.value;
    }).join(' ').trim().split(' ');
  });
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
function parseComparator(comp, options) {
  debug('comp', comp, options);
  comp = replaceCarets(comp, options);
  debug('caret', comp);
  comp = replaceTildes(comp, options);
  debug('tildes', comp);
  comp = replaceXRanges(comp, options);
  debug('xrange', comp);
  comp = replaceStars(comp, options);
  debug('stars', comp);
  return comp;
}

function isX(id) {
  return !id || id.toLowerCase() === 'x' || id === '*';
}

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
function replaceTildes(comp, options) {
  return comp.trim().split(/\s+/).map(function(comp) {
    return replaceTilde(comp, options);
  }).join(' ');
}

function replaceTilde(comp, options) {
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }
  var r = options.loose ? re[TILDELOOSE] : re[TILDE];
  return comp.replace(r, function(_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr);
    var ret;

    if (isX(M))
      ret = '';
    else if (isX(m))
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    else if (isX(p))
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    else if (pr) {
      debug('replaceTilde pr', pr);
      if (pr.charAt(0) !== '-')
        pr = '-' + pr;
      ret = '>=' + M + '.' + m + '.' + p + pr +
            ' <' + M + '.' + (+m + 1) + '.0';
    } else
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p +
            ' <' + M + '.' + (+m + 1) + '.0';

    debug('tilde return', ret);
    return ret;
  });
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0
function replaceCarets(comp, options) {
  return comp.trim().split(/\s+/).map(function(comp) {
    return replaceCaret(comp, options);
  }).join(' ');
}

function replaceCaret(comp, options) {
  debug('caret', comp, options);
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }
  var r = options.loose ? re[CARETLOOSE] : re[CARET];
  return comp.replace(r, function(_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr);
    var ret;

    if (isX(M))
      ret = '';
    else if (isX(m))
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    else if (isX(p)) {
      if (M === '0')
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      else
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
    } else if (pr) {
      debug('replaceCaret pr', pr);
      if (pr.charAt(0) !== '-')
        pr = '-' + pr;
      if (M === '0') {
        if (m === '0')
          ret = '>=' + M + '.' + m + '.' + p + pr +
                ' <' + M + '.' + m + '.' + (+p + 1);
        else
          ret = '>=' + M + '.' + m + '.' + p + pr +
                ' <' + M + '.' + (+m + 1) + '.0';
      } else
        ret = '>=' + M + '.' + m + '.' + p + pr +
              ' <' + (+M + 1) + '.0.0';
    } else {
      debug('no pr');
      if (M === '0') {
        if (m === '0')
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + m + '.' + (+p + 1);
        else
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0';
      } else
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + (+M + 1) + '.0.0';
    }

    debug('caret return', ret);
    return ret;
  });
}

function replaceXRanges(comp, options) {
  debug('replaceXRanges', comp, options);
  return comp.split(/\s+/).map(function(comp) {
    return replaceXRange(comp, options);
  }).join(' ');
}

function replaceXRange(comp, options) {
  comp = comp.trim();
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }
  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr);
    var xM = isX(M);
    var xm = xM || isX(m);
    var xp = xm || isX(p);
    var anyX = xp;

    if (gtlt === '=' && anyX)
      gtlt = '';

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0';
      } else {
        // nothing is forbidden
        ret = '*';
      }
    } else if (gtlt && anyX) {
      // replace X with 0
      if (xm)
        m = 0;
      if (xp)
        p = 0;

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>=';
        if (xm) {
          M = +M + 1;
          m = 0;
          p = 0;
        } else if (xp) {
          m = +m + 1;
          p = 0;
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<';
        if (xm)
          M = +M + 1;
        else
          m = +m + 1;
      }

      ret = gtlt + M + '.' + m + '.' + p;
    } else if (xm) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    }

    debug('xRange return', ret);

    return ret;
  });
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
function replaceStars(comp, options) {
  debug('replaceStars', comp, options);
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[STAR], '');
}

// This function is passed to string.replace(re[HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0
function hyphenReplace($0,
                       from, fM, fm, fp, fpr, fb,
                       to, tM, tm, tp, tpr, tb) {

  if (isX(fM))
    from = '';
  else if (isX(fm))
    from = '>=' + fM + '.0.0';
  else if (isX(fp))
    from = '>=' + fM + '.' + fm + '.0';
  else
    from = '>=' + from;

  if (isX(tM))
    to = '';
  else if (isX(tm))
    to = '<' + (+tM + 1) + '.0.0';
  else if (isX(tp))
    to = '<' + tM + '.' + (+tm + 1) + '.0';
  else if (tpr)
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
  else
    to = '<=' + to;

  return (from + ' ' + to).trim();
}


// if ANY of the sets match ALL of its comparators, then pass
Range.prototype.test = function(version) {
  if (!version)
    return false;

  if (typeof version === 'string')
    version = new SemVer(version, this.options);

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version, this.options))
      return true;
  }
  return false;
};

function testSet(set, version, options) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version))
      return false;
  }

  if (!options)
    options = {}

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (var i = 0; i < set.length; i++) {
      debug(set[i].semver);
      if (set[i].semver === ANY)
        continue;

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver;
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch)
          return true;
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false;
  }

  return true;
}

exports.satisfies = satisfies;
function satisfies(version, range, options) {
  try {
    range = new Range(range, options);
  } catch (er) {
    return false;
  }
  return range.test(version);
}

exports.maxSatisfying = maxSatisfying;
function maxSatisfying(versions, range, options) {
  var max = null;
  var maxSV = null;
  try {
    var rangeObj = new Range(range, options);
  } catch (er) {
    return null;
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) { // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) { // compare(max, v, true)
        max = v;
        maxSV = new SemVer(max, options);
      }
    }
  })
  return max;
}

exports.minSatisfying = minSatisfying;
function minSatisfying(versions, range, options) {
  var min = null;
  var minSV = null;
  try {
    var rangeObj = new Range(range, options);
  } catch (er) {
    return null;
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) { // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) { // compare(min, v, true)
        min = v;
        minSV = new SemVer(min, options);
      }
    }
  })
  return min;
}

exports.validRange = validRange;
function validRange(range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*';
  } catch (er) {
    return null;
  }
}

// Determine if version is less than all the versions possible in the range
exports.ltr = ltr;
function ltr(version, range, options) {
  return outside(version, range, '<', options);
}

// Determine if version is greater than all the versions possible in the range.
exports.gtr = gtr;
function gtr(version, range, options) {
  return outside(version, range, '>', options);
}

exports.outside = outside;
function outside(version, range, hilo, options) {
  version = new SemVer(version, options);
  range = new Range(range, options);

  var gtfn, ltefn, ltfn, comp, ecomp;
  switch (hilo) {
    case '>':
      gtfn = gt;
      ltefn = lte;
      ltfn = lt;
      comp = '>';
      ecomp = '>=';
      break;
    case '<':
      gtfn = lt;
      ltefn = gte;
      ltfn = gt;
      comp = '<';
      ecomp = '<=';
      break;
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"');
  }

  // If it satisifes the range it is not outside
  if (satisfies(version, range, options)) {
    return false;
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i];

    var high = null;
    var low = null;

    comparators.forEach(function(comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator;
      low = low || comparator;
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator;
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator;
      }
    });

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false;
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false;
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false;
    }
  }
  return true;
}

exports.prerelease = prerelease;
function prerelease(version, options) {
  var parsed = parse(version, options);
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;
}

exports.intersects = intersects;
function intersects(r1, r2, options) {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2)
}

exports.coerce = coerce;
function coerce(version) {
  if (version instanceof SemVer)
    return version;

  if (typeof version !== 'string')
    return null;

  var match = version.match(re[COERCE]);

  if (match == null)
    return null;

  return parse((match[1] || '0') + '.' + (match[2] || '0') + '.' + (match[3] || '0')); 
}


/***/ }),
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */
/***/ (function(module, exports) {

module.exports = require("punycode");

/***/ }),
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */
/***/ (function(module, exports) {

module.exports = require("tls");

/***/ }),
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(28).fromCallback
const jsonFile = __webpack_require__(486)

module.exports = {
  // jsonfile exports
  readJson: u(jsonFile.readFile),
  readJsonSync: jsonFile.readFileSync,
  writeJson: u(jsonFile.writeFile),
  writeJsonSync: jsonFile.writeFileSync
}


/***/ }),
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */
/***/ (function(module) {

module.exports = {"type":"react","name":"react-materials","blocks":[{"name":"ability-introduction","title":"产品能力介绍","description":"产品能力介绍","homepage":"https://unpkg.com/@icedesign/ability-introduction-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/AbilityIntroduction","source":{"type":"npm","npm":"@icedesign/ability-introduction-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/ability-introduction-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/ability-introduction-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-12-13T08:48:27.377Z","updateTime":"2019-01-12T12:29:44.830Z"},{"name":"ablity-items","title":"特性展示","description":"中间展示特点 特性的区块","homepage":"https://unpkg.com/@icedesign/ablity-items-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/AblityItems","source":{"type":"npm","npm":"@icedesign/ablity-items-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/ablity-items-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/ablity-items-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-05T02:12:22.773Z","updateTime":"2019-01-12T12:29:59.460Z"},{"name":"about","title":"关于","description":"适用于产品的简介","homepage":"https://unpkg.com/@icedesign/about-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/About","source":{"type":"npm","npm":"@icedesign/about-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/about-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/about-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-08-30T15:36:42.880Z","updateTime":"2019-01-12T12:30:06.812Z"},{"name":"account-badge","title":"账户勋章","description":"展示账户权益勋章等权益信息","homepage":"https://unpkg.com/@icedesign/account-badge-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/AccountBadge","source":{"type":"npm","npm":"@icedesign/account-badge-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/account-badge-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/account-badge-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-12-13T08:48:27.740Z","updateTime":"2019-01-12T12:30:19.022Z"},{"name":"account-features","title":"账户特性","description":"罗列账户功能列表","homepage":"https://unpkg.com/@icedesign/account-features-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/AccountFeatures","source":{"type":"npm","npm":"@icedesign/account-features-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/account-features-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/account-features-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-12-13T08:48:27.306Z","updateTime":"2019-01-12T12:30:28.559Z"},{"name":"account-panel","title":"账户信息","description":"用户中心展示账户信息内容","homepage":"https://unpkg.com/@icedesign/account-panel-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/AccountPanel","source":{"type":"npm","npm":"@icedesign/account-panel-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@alifd/next":"^1.x","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/account-panel-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/account-panel-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Dialog"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Upload"}]},"publishTime":"2018-12-13T08:48:27.642Z","updateTime":"2019-02-28T03:13:12.502Z"},{"name":"account-status","title":"账户状态","description":"展示账户标识以及操作等","homepage":"https://unpkg.com/@icedesign/account-status-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/AccountStatus","source":{"type":"npm","npm":"@icedesign/account-status-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/account-status-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/account-status-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-12-13T08:48:31.920Z","updateTime":"2019-01-12T12:30:53.681Z"},{"name":"address-info","title":"地址信息","description":"适用于地址的信息展示","homepage":"https://unpkg.com/@icedesign/address-info-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/AddressInfo","source":{"type":"npm","npm":"@icedesign/address-info-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/address-info-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/address-info-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-08-30T15:36:43.522Z","updateTime":"2019-01-12T12:31:01.271Z"},{"name":"application-progress","title":"申请进度信息展示","description":"申请进度信息展示","homepage":"https://unpkg.com/@icedesign/application-progress-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ApplicationProgress","source":{"type":"npm","npm":"@icedesign/application-progress-block","version":"0.1.9","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/application-progress-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/application-progress-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Step"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-01-02T12:20:33.619Z","updateTime":"2019-01-12T12:31:08.088Z"},{"name":"area-stack-chart","title":"叠加面积图","description":"叠加面积图","homepage":"https://unpkg.com/@icedesign/area-stack-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/AreaStackChart","source":{"type":"npm","npm":"@icedesign/area-stack-chart-block","version":"0.1.7","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"^3.0.5","classnames":"^2.2.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/area-stack-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/area-stack-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-27T13:28:45.632Z","updateTime":"2019-01-12T12:31:16.302Z"},{"name":"article-list","title":"文章列表","description":"文章列表","homepage":"https://unpkg.com/@icedesign/article-list-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ArticleList","source":{"type":"npm","npm":"@icedesign/article-list-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/article-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/article-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-01-02T12:20:03.975Z","updateTime":"2019-01-12T12:31:24.131Z"},{"name":"asset-info-display","title":"资产信息展示","description":"资产信息展示, 卡片类型的 UI 数据展示, 常用于额度, 余额等页面","homepage":"https://unpkg.com/@icedesign/asset-info-display-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/AssetInfoDisplay","source":{"type":"npm","npm":"@icedesign/asset-info-display-block","version":"0.1.9","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/asset-info-display-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/asset-info-display-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-17T09:57:08.498Z","updateTime":"2019-01-12T12:31:34.267Z"},{"name":"authority-table","title":"权限管理表格","description":"权限管理类的表格","homepage":"https://unpkg.com/@icedesign/authority-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/AuthorityTable","source":{"type":"npm","npm":"@icedesign/authority-table-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/authority-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/authority-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Balloon"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-06-21T12:25:40.104Z","updateTime":"2019-01-12T12:31:40.797Z"},{"name":"banner","title":"Banner 简介","description":"适用于 Homepage 的 Banner 简介","homepage":"https://unpkg.com/@icedesign/banner-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Banner","source":{"type":"npm","npm":"@icedesign/banner-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","rc-queue-anim":"^1.6.5","react":"^16.2.0"},"screenshot":"https://unpkg.com/@icedesign/banner-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/banner-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-08-30T15:36:43.821Z","updateTime":"2019-01-12T12:32:06.726Z"},{"name":"bar-line-chart","title":"折柱混合图","description":"","homepage":"https://unpkg.com/@icedesign/bar-line-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BarLineChart","source":{"type":"npm","npm":"@icedesign/bar-line-chart-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","echarts":"^4.0.4","echarts-for-react":"^2.0.8","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/bar-line-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/bar-line-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-03-22T15:13:30.171Z","updateTime":"2019-01-12T12:32:18.462Z"},{"name":"basic-detail-info","title":"基础详情信息展示","description":"基础详情信息展示","homepage":"https://unpkg.com/@icedesign/basic-detail-info-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BasicDetailInfo","source":{"type":"npm","npm":"@icedesign/basic-detail-info-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/basic-detail-info-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/basic-detail-info-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T12:19:42.225Z","updateTime":"2019-01-12T12:32:26.606Z"},{"name":"basic-exception","title":"基础异常报错","description":"基础异常报错","homepage":"https://unpkg.com/@icedesign/basic-exception-block/build/index.html","categories":["异常"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BasicException","source":{"type":"npm","npm":"@icedesign/basic-exception-block","version":"0.1.9","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/basic-exception-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/basic-exception-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-27T13:42:54.113Z","updateTime":"2019-01-12T12:32:37.014Z"},{"name":"basic-not-found","title":"404 报错提示","description":"404 报错提示","homepage":"https://unpkg.com/@icedesign/basic-not-found-block/build/index.html","categories":["异常"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BasicNotFound","source":{"type":"npm","npm":"@icedesign/basic-not-found-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/basic-not-found-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/basic-not-found-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-27T13:43:46.999Z","updateTime":"2019-01-12T12:32:44.425Z"},{"name":"basic-tab","title":"基础 Tab 组件","description":"基础 Tab 组件","homepage":"https://unpkg.com/@icedesign/basic-tab-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BasicTab","source":{"type":"npm","npm":"@icedesign/basic-tab-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/basic-tab-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/basic-tab-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Tab"}]},"publishTime":"2017-12-27T13:38:57.654Z","updateTime":"2019-01-12T12:32:50.261Z"},{"name":"black-footer","title":"页脚","description":"页脚信息展示","homepage":"https://unpkg.com/@icedesign/black-footer-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BlackFooter","source":{"type":"npm","npm":"@icedesign/black-footer-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/black-footer-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/black-footer-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-08-30T15:36:43.107Z","updateTime":"2019-01-12T12:32:56.269Z"},{"name":"board-list","title":"任务面板","description":"TODO 任务管理面板，可拖拽排序","homepage":"https://unpkg.com/@icedesign/board-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BoardList","source":{"type":"npm","npm":"@icedesign/board-list-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","react-trello":"^1.33.0","styled-components":"^3.2.6"},"screenshot":"https://unpkg.com/@icedesign/board-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/board-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-10T14:32:03.771Z","updateTime":"2019-01-12T12:33:02.273Z"},{"name":"braft-editor","title":"Braft 富文本编辑器","description":"基于 draft-js 开发的美观易用的 React 富文本编辑器","homepage":"https://unpkg.com/@icedesign/braft-editor-block/build/index.html","categories":["富文本编辑器"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BraftEditor","source":{"type":"npm","npm":"@icedesign/braft-editor-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","braft-editor":"^1.9.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/braft-editor-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/braft-editor-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-07-12T15:06:39.004Z","updateTime":"2019-01-12T12:33:09.856Z"},{"name":"brand-display","title":"品牌列表展示","description":"品牌列表展示","homepage":"https://unpkg.com/@icedesign/brand-display-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BrandDisplay","source":{"type":"npm","npm":"@icedesign/brand-display-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/img":"^0.1.0","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/brand-display-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/brand-display-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/img","className":"Img"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T12:19:21.593Z","updateTime":"2019-01-12T12:33:18.282Z"},{"name":"brand-list","title":"品牌列表","description":"展示品牌列表","homepage":"https://unpkg.com/@icedesign/brand-list-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BrandList","source":{"type":"npm","npm":"@icedesign/brand-list-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/brand-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/brand-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-04-12T12:43:08.795Z","updateTime":"2019-01-12T12:33:24.006Z"},{"name":"brand-show-case","title":"品牌展示","description":"","homepage":"https://unpkg.com/@icedesign/brand-show-case-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/BrandShowCase","source":{"type":"npm","npm":"@icedesign/brand-show-case-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/brand-show-case-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/brand-show-case-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T12:18:58.763Z","updateTime":"2019-01-12T12:33:29.610Z"},{"name":"card-items","title":"卡片展示","description":"用卡片展示信息","homepage":"https://unpkg.com/@icedesign/card-items-block/build/index.html","categories":["列表","信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CardItems","source":{"type":"npm","npm":"@icedesign/card-items-block","version":"1.0.6","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/card-items-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/card-items-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-31T13:01:54.221Z","updateTime":"2019-01-14T09:20:41.192Z"},{"name":"card-list","title":"卡片列表","description":"适用于多卡片信息的展示","homepage":"https://unpkg.com/@icedesign/card-list-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CardList","source":{"type":"npm","npm":"@icedesign/card-list-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.2","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/card-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/card-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-09-06T16:45:52.215Z","updateTime":"2019-02-28T03:18:00.651Z"},{"name":"change-password-form","title":"修改密码表单","description":"","homepage":"https://unpkg.com/@icedesign/change-password-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChangePasswordForm","source":{"type":"npm","npm":"@icedesign/change-password-form-block","version":"0.1.6","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/change-password-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/change-password-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Form"}]},"publishTime":"2018-02-07T13:24:35.560Z","updateTime":"2019-02-28T03:23:19.048Z"},{"name":"chart-area","title":"面积图","description":"","homepage":"https://unpkg.com/@icedesign/chart-area-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartArea","source":{"type":"npm","npm":"@icedesign/chart-area-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-area-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-area-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:39:32.209Z","updateTime":"2019-01-12T12:34:52.002Z"},{"name":"chart-bar","title":"柱状图","description":"","homepage":"https://unpkg.com/@icedesign/chart-bar-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartBar","source":{"type":"npm","npm":"@icedesign/chart-bar-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-bar-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-bar-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:40:29.537Z","updateTime":"2019-01-12T12:35:01.235Z"},{"name":"chart-box","title":"箱型图","description":"","homepage":"https://unpkg.com/@icedesign/chart-box-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartBox","source":{"type":"npm","npm":"@icedesign/chart-box-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-box-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-box-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:40:56.231Z","updateTime":"2019-01-12T12:35:10.706Z"},{"name":"chart-bubble-image","title":"自定义气泡图","description":"","homepage":"https://unpkg.com/@icedesign/chart-bubble-image-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartBubbleImage","source":{"type":"npm","npm":"@icedesign/chart-bubble-image-block","version":"0.1.9","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-bubble-image-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-bubble-image-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:41:24.122Z","updateTime":"2019-01-12T12:35:19.615Z"},{"name":"chart-facet","title":"分面图","description":"","homepage":"https://unpkg.com/@icedesign/chart-facet-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartFacet","source":{"type":"npm","npm":"@icedesign/chart-facet-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-facet-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-facet-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2017-12-29T07:42:01.891Z","updateTime":"2019-01-12T12:35:26.087Z"},{"name":"chart-funnel","title":"漏斗图","description":"","homepage":"https://unpkg.com/@icedesign/chart-funnel-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartFunnel","source":{"type":"npm","npm":"@icedesign/chart-funnel-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-funnel-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-funnel-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:42:41.337Z","updateTime":"2019-01-12T12:36:15.654Z"},{"name":"chart-gauge","title":"仪表图","description":"","homepage":"https://unpkg.com/@icedesign/chart-gauge-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartGauge","source":{"type":"npm","npm":"@icedesign/chart-gauge-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-gauge-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-gauge-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:44:10.293Z","updateTime":"2019-01-12T12:36:22.915Z"},{"name":"chart-heat-map","title":"色块图","description":"","homepage":"https://unpkg.com/@icedesign/chart-heat-map-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartHeatMap","source":{"type":"npm","npm":"@icedesign/chart-heat-map-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-heat-map-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-heat-map-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:44:38.814Z","updateTime":"2019-01-12T12:36:32.132Z"},{"name":"chart-pie","title":"饼图","description":"","homepage":"https://unpkg.com/@icedesign/chart-pie-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartPie","source":{"type":"npm","npm":"@icedesign/chart-pie-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-pie-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-pie-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:45:01.869Z","updateTime":"2019-01-12T12:36:51.343Z"},{"name":"chart-radar","title":"雷达图","description":"雷达图","homepage":"https://unpkg.com/@icedesign/chart-radar-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartRadar","source":{"type":"npm","npm":"@icedesign/chart-radar-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-radar-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-radar-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:47:21.353Z","updateTime":"2019-01-12T12:37:13.440Z"},{"name":"chart-relation","title":"关系图","description":"关系图","homepage":"https://unpkg.com/@icedesign/chart-relation-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartRelation","source":{"type":"npm","npm":"@icedesign/chart-relation-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-relation-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-relation-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:48:46.163Z","updateTime":"2019-01-14T09:24:09.671Z"},{"name":"chart-stock","title":"股票图","description":"股票图","homepage":"https://unpkg.com/@icedesign/chart-stock-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartStock","source":{"type":"npm","npm":"@icedesign/chart-stock-block","version":"0.1.9","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-stock-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-stock-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:48:20.332Z","updateTime":"2019-01-12T12:37:31.642Z"},{"name":"chart-type-line","title":"折线图","description":"","homepage":"https://unpkg.com/@icedesign/chart-type-line-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ChartTypeLine","source":{"type":"npm","npm":"@icedesign/chart-type-line-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.0","@icedesign/container":"^1.x","bizcharts":"^3.0.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/chart-type-line-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/chart-type-line-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2017-12-29T07:49:20.724Z","updateTime":"2019-01-12T12:37:38.431Z"},{"name":"circle-progress","title":"环形进度条","description":"","homepage":"https://unpkg.com/@icedesign/circle-progress-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CircleProgress","source":{"type":"npm","npm":"@icedesign/circle-progress-block","version":"0.1.6","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/circle-progress-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/circle-progress-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Progress"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-03-08T10:34:37.576Z","updateTime":"2019-01-12T12:37:45.304Z"},{"name":"circular-chart","title":"环形图","description":"","homepage":"https://unpkg.com/@icedesign/circular-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CircularChart","source":{"type":"npm","npm":"@icedesign/circular-chart-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","echarts":"^4.0.4","echarts-for-react":"^2.0.8","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/circular-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/circular-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-03-22T15:13:29.739Z","updateTime":"2019-01-12T12:38:05.365Z"},{"name":"clipboard","title":"剪贴板","description":"复制内容到剪贴板","homepage":"https://unpkg.com/@icedesign/clipboard-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Clipboard","source":{"type":"npm","npm":"@icedesign/clipboard-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react-copy-to-clipboard":"^5.0.1","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/clipboard-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/clipboard-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Message"}]},"publishTime":"2018-08-02T12:06:47.659Z","updateTime":"2019-01-12T12:38:19.355Z"},{"name":"co-branding","title":"品牌合作展示","description":"展示合作的品牌","homepage":"https://unpkg.com/@icedesign/co-branding-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CoBranding","source":{"type":"npm","npm":"@icedesign/co-branding-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/co-branding-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/co-branding-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-08-09T13:52:13.883Z","updateTime":"2019-01-12T12:38:28.369Z"},{"name":"code-syntax-highlight","title":"代码语法高亮","description":"代码语法高亮","homepage":"https://unpkg.com/@icedesign/code-syntax-highlight-block/build/index.html","categories":["代码编辑器"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CodeSyntaxHighlight","source":{"type":"npm","npm":"@icedesign/code-syntax-highlight-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react-syntax-highlighter":"^8.0.1","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/code-syntax-highlight-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/code-syntax-highlight-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-07-12T15:06:39.001Z","updateTime":"2019-01-12T12:38:38.620Z"},{"name":"collapse-card","title":"折叠型卡片的信息展示","description":"折叠型卡片的信息展示","homepage":"https://unpkg.com/@icedesign/collapse-card-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CollapseCard","source":{"type":"npm","npm":"@icedesign/collapse-card-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","classnames":"^2.2.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/collapse-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/collapse-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T12:18:33.470Z","updateTime":"2019-01-12T12:38:48.030Z"},{"name":"column-form","title":"分栏表单","description":"","homepage":"https://unpkg.com/@icedesign/column-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ColumnForm","source":{"type":"npm","npm":"@icedesign/column-form-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/column-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/column-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Form"}]},"publishTime":"2018-03-29T12:47:19.706Z","updateTime":"2019-02-28T03:26:31.223Z"},{"name":"columns-table","title":"表格","description":"两栏布局的表格","homepage":"https://unpkg.com/@icedesign/columns-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ColumnsTable","source":{"type":"npm","npm":"@icedesign/columns-table-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/columns-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/columns-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-05-31T13:01:54.334Z","updateTime":"2019-01-12T12:39:04.568Z"},{"name":"complex-dialog","title":"复杂信息弹窗","description":"复杂信息和自定义底部按钮的弹窗","homepage":"https://unpkg.com/@icedesign/complex-dialog-block/build/index.html","categories":["模态框"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ComplexDialog","source":{"type":"npm","npm":"@icedesign/complex-dialog-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/complex-dialog-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/complex-dialog-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Dialog"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-01-02T12:18:03.433Z","updateTime":"2019-01-12T12:39:10.738Z"},{"name":"complex-filter","title":"标签页组合筛选","description":"标签页组合筛选","homepage":"https://unpkg.com/@icedesign/complex-filter-block/build/index.html","categories":["筛选"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ComplexFilter","source":{"type":"npm","npm":"@icedesign/complex-filter-block","version":"0.1.16","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/complex-filter-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/complex-filter-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T12:17:15.441Z","updateTime":"2019-01-12T12:39:20.426Z"},{"name":"complex-progress-table","title":"进度管理表格","description":"进度管理表格","homepage":"https://unpkg.com/@icedesign/complex-progress-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ComplexProgressTable","source":{"type":"npm","npm":"@icedesign/complex-progress-table-block","version":"0.1.14","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/data-binder":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/img":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/complex-progress-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/complex-progress-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Progress"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Dialog"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Radio"},{"basePackage":"@alifd/next","className":"Range"}]},"publishTime":"2018-01-02T12:16:10.496Z","updateTime":"2019-02-28T03:31:22.662Z"},{"name":"complex-tab-table","title":"复杂 Tab 筛选表格","description":"附带复杂的 Tab 多级筛选项的表格","homepage":"https://unpkg.com/@icedesign/complex-tab-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ComplexTabTable","source":{"type":"npm","npm":"@icedesign/complex-tab-table-block","version":"0.1.14","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/data-binder":"^1.x","@icedesign/img":"^0.1.0","@icedesign/label":"^1.x","@icedesign/theme":"^0.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/complex-tab-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/complex-tab-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@icedesign/img","className":"Img"},{"basePackage":"@icedesign/label","className":"Label"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"Search"}]},"publishTime":"2018-01-02T12:15:25.701Z","updateTime":"2019-01-12T12:40:17.074Z"},{"name":"composite-filter","title":"标签、日期和搜索组合筛选","description":"标签、日期和搜索组合筛选","homepage":"https://unpkg.com/@icedesign/composite-filter-block/build/index.html","categories":["筛选"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CompositeFilter","source":{"type":"npm","npm":"@icedesign/composite-filter-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/composite-filter-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/composite-filter-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Search"},{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"Tag"},{"basePackage":"@alifd/next","className":"DatePicker"}]},"publishTime":"2018-01-02T12:14:16.510Z","updateTime":"2019-01-12T12:40:31.960Z"},{"name":"confirm-dialog","title":"确认类型的提示框","description":"确认类型的提示框","homepage":"https://unpkg.com/@icedesign/confirm-dialog-block/build/index.html","categories":["模态框"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ConfirmDialog","source":{"type":"npm","npm":"@icedesign/confirm-dialog-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/confirm-dialog-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/confirm-dialog-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Dialog"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-01-02T12:11:06.314Z","updateTime":"2019-01-12T12:40:43.315Z"},{"name":"content-editor","title":"内容编辑器","description":"内容编辑器","homepage":"https://unpkg.com/@icedesign/content-editor-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ContentEditor","source":{"type":"npm","npm":"@icedesign/content-editor-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","immutable":"^3.8.2","is-hotkey":"^0.1.1","prop-types":"^15.5.8","slate":"^0.32.1","slate-plain-serializer":"^0.5.1","slate-react":"^0.11.1","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/content-editor-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/content-editor-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Form"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"SplitButton"}]},"publishTime":"2018-02-04T08:01:33.262Z","updateTime":"2019-02-28T05:06:19.779Z"},{"name":"content-list","title":"内容列表","description":"筛选和列表组合","homepage":"https://unpkg.com/@icedesign/content-list-block/build/index.html","categories":["列表","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ContentList","source":{"type":"npm","npm":"@icedesign/content-list-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/content-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/content-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Pagination"}]},"publishTime":"2018-06-21T12:25:40.146Z","updateTime":"2019-01-12T12:41:04.941Z"},{"name":"cost-overview","title":"概览展示","description":"适用于环形图和概要展示组合的信息展示场景","homepage":"https://unpkg.com/@icedesign/cost-overview-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CostOverview","source":{"type":"npm","npm":"@icedesign/cost-overview-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.9.5","@icedesign/container":"^1.x","bizcharts":"^3.2.2","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/cost-overview-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/cost-overview-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Balloon"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-09-13T12:29:41.533Z","updateTime":"2019-01-12T12:41:13.613Z"},{"name":"create-activity-form","title":"创建活动表单","description":"创建活动的表单","homepage":"https://unpkg.com/@icedesign/create-activity-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CreateActivityForm","source":{"type":"npm","npm":"@icedesign/create-activity-form-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/create-activity-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/create-activity-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-18T09:43:47.817Z","updateTime":"2019-02-28T05:08:12.122Z"},{"name":"creative-forget-password","title":"找回密码","description":"左右布局的忘记密码表单页","homepage":"https://unpkg.com/@icedesign/creative-forget-password-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CreativeForgetPassword","source":{"type":"npm","npm":"@icedesign/creative-forget-password-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/creative-forget-password-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/creative-forget-password-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Message"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-08-23T17:01:33.260Z","updateTime":"2019-02-28T03:34:19.069Z"},{"name":"creative-login","title":"登录","description":"左右布局的登录页","homepage":"https://unpkg.com/@icedesign/creative-login-block/build/index.html","categories":["登录页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CreativeLogin","source":{"type":"npm","npm":"@icedesign/creative-login-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/creative-login-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/creative-login-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Message"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-08-23T17:01:33.246Z","updateTime":"2019-02-28T05:06:53.422Z"},{"name":"creative-register","title":"左右布局的注册页","description":"注册","homepage":"https://unpkg.com/@icedesign/creative-register-block/build/index.html","categories":["注册页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CreativeRegister","source":{"type":"npm","npm":"@icedesign/creative-register-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/creative-register-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/creative-register-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Message"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-08-23T17:01:33.101Z","updateTime":"2019-02-28T05:06:10.957Z"},{"name":"custom-accordion","title":"手风琴","description":"适用于产品简介，可以折叠/展开的内容区域","homepage":"https://unpkg.com/@icedesign/custom-accordion-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CustomAccordion","source":{"type":"npm","npm":"@icedesign/custom-accordion-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/custom-accordion-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/custom-accordion-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Collapse"}]},"publishTime":"2018-08-02T12:06:47.657Z","updateTime":"2019-01-12T12:41:49.421Z"},{"name":"custom-bar-chart","title":"自定义柱状图","description":"","homepage":"https://unpkg.com/@icedesign/custom-bar-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CustomBarChart","source":{"type":"npm","npm":"@icedesign/custom-bar-chart-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.7","@icedesign/container":"^1.x","bizcharts":"^3.1.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/custom-bar-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/custom-bar-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-04-26T16:35:02.833Z","updateTime":"2019-01-12T12:41:56.613Z"},{"name":"custom-codemirror","title":"Codemirror 代码编辑器","description":"CodeMirror是一款功能强大的代码高亮插件，他不仅提供了高亮功能，其丰富的方法属性也封装了缩进、自动换行、获取编辑文本、设置编辑文本、回退功能等多种实用效果","homepage":"https://unpkg.com/@icedesign/custom-codemirror-block/build/index.html","categories":["代码编辑器"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CustomCodemirror","source":{"type":"npm","npm":"@icedesign/custom-codemirror-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","codemirror":"^5.39.0","react-codemirror2":"^5.1.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/custom-codemirror-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/custom-codemirror-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-07-12T15:06:38.824Z","updateTime":"2019-01-12T12:42:05.498Z"},{"name":"custom-pie-chart","title":"自定义饼图组合","description":"","homepage":"https://unpkg.com/@icedesign/custom-pie-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CustomPieChart","source":{"type":"npm","npm":"@icedesign/custom-pie-chart-block","version":"0.1.7","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","echarts":"^4.0.4","echarts-for-react":"^2.0.8","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/custom-pie-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/custom-pie-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-03-22T15:13:30.177Z","updateTime":"2019-01-12T12:42:22.206Z"},{"name":"custom-table","title":"表格","description":"适用于简单的自定义表格展示场景","homepage":"https://unpkg.com/@icedesign/custom-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/CustomTable","source":{"type":"npm","npm":"@icedesign/custom-table-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/custom-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/custom-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-09-20T15:30:55.079Z","updateTime":"2019-01-12T12:42:28.550Z"},{"name":"data-display","title":"数据展示","description":"","homepage":"https://unpkg.com/@icedesign/data-display-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/DataDisplay","source":{"type":"npm","npm":"@icedesign/data-display-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/data-display-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/data-display-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-02T12:09:55.082Z","updateTime":"2019-01-12T12:42:34.462Z"},{"name":"data-overview","title":"数据概览","description":"基础数据概览","homepage":"https://unpkg.com/@icedesign/data-overview-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/DataOverview","source":{"type":"npm","npm":"@icedesign/data-overview-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0"},"screenshot":"https://unpkg.com/@icedesign/data-overview-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/data-overview-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-12-13T09:03:35.646Z","updateTime":"2019-01-12T12:42:40.615Z"},{"name":"data-statistics","title":"数据统计展示","description":"","homepage":"https://unpkg.com/@icedesign/data-statistics-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/DataStatistics","source":{"type":"npm","npm":"@icedesign/data-statistics-block","version":"0.1.7","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.5","@icedesign/container":"^1.x","bizcharts":"^3.1.3-beta.1","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/data-statistics-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/data-statistics-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-01-31T09:36:35.457Z","updateTime":"2019-01-12T12:42:47.397Z"},{"name":"detail-table","title":"详情信息表格","description":"展示详情信息的表格","homepage":"https://unpkg.com/@icedesign/detail-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/DetailTable","source":{"type":"npm","npm":"@icedesign/detail-table-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/detail-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/detail-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-02T12:08:59.644Z","updateTime":"2019-01-12T12:42:54.261Z"},{"name":"display-card","title":"展示型卡片","description":"展示型卡片","homepage":"https://unpkg.com/@icedesign/display-card-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/DisplayCard","source":{"type":"npm","npm":"@icedesign/display-card-block","version":"0.2.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/display-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/display-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Balloon"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T12:31:14.605Z","updateTime":"2019-01-12T12:43:00.509Z"},{"name":"dn-d","title":"元素拖拽放置","description":"元素拖拽放置","homepage":"https://unpkg.com/@icedesign/dn-d-block/build/index.html","categories":["拖拽"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/DnD","source":{"type":"npm","npm":"@icedesign/dn-d-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","react-dnd":"3.0.2","react-dnd-html5-backend":"^5.0.1"},"screenshot":"https://unpkg.com/@icedesign/dn-d-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/dn-d-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-12-13T09:03:30.149Z","updateTime":"2019-01-12T12:43:08.057Z"},{"name":"document-list","title":"文档列表","description":"适用于文档列表类的展示","homepage":"https://unpkg.com/@icedesign/document-list-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/DocumentList","source":{"type":"npm","npm":"@icedesign/document-list-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/document-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/document-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-10-11T13:06:15.628Z","updateTime":"2019-01-12T12:43:13.646Z"},{"name":"double-axes-chart","title":"双轴图标","description":"","homepage":"https://unpkg.com/@icedesign/double-axes-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/DoubleAxesChart","source":{"type":"npm","npm":"@icedesign/double-axes-chart-block","version":"0.1.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.7","@icedesign/container":"^1.x","bizcharts":"^3.1.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/double-axes-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/double-axes-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-04-26T16:35:14.530Z","updateTime":"2019-01-12T12:43:35.202Z"},{"name":"download-card","title":"下载型信息卡片","description":"下载型信息卡片","homepage":"https://unpkg.com/@icedesign/download-card-block/build/index.html","categories":["信息展示","列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/DownloadCard","source":{"type":"npm","npm":"@icedesign/download-card-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","axios":"^0.17.1","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/download-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/download-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T12:47:49.923Z","updateTime":"2019-01-12T12:43:41.664Z"},{"name":"editable-table","title":"可编辑表格","description":"可编辑内容的表格","homepage":"https://unpkg.com/@icedesign/editable-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/EditableTable","source":{"type":"npm","npm":"@icedesign/editable-table-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/editable-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/editable-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Input"}]},"publishTime":"2018-01-02T13:01:39.346Z","updateTime":"2019-01-12T12:43:47.966Z"},{"name":"emoji-mart","title":"Emoji 表情","description":"展示 Emoji 表情","homepage":"https://unpkg.com/@icedesign/emoji-mart-block/build/index.html","categories":["表情"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/EmojiMart","source":{"type":"npm","npm":"@icedesign/emoji-mart-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","emoji-mart":"^2.6.1"},"screenshot":"https://unpkg.com/@icedesign/emoji-mart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/emoji-mart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-07-19T06:56:32.210Z","updateTime":"2019-01-12T12:43:54.142Z"},{"name":"empty-content","title":"空内容提示","description":"","homepage":"https://unpkg.com/@icedesign/empty-content-block/build/index.html","categories":["异常"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/EmptyContent","source":{"type":"npm","npm":"@icedesign/empty-content-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/empty-content-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/empty-content-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-02T13:04:05.933Z","updateTime":"2019-01-12T12:44:00.584Z"},{"name":"enhance-table","title":"增强筛选表单","description":"附带简单表单筛选功能的增强筛选表单","homepage":"https://unpkg.com/@icedesign/enhance-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/EnhanceTable","source":{"type":"npm","npm":"@icedesign/enhance-table-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/data-binder":"^1.x","@icedesign/img":"^0.1.0","@icedesign/label":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/enhance-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/enhance-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@icedesign/label","className":"Label"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"Search"}]},"publishTime":"2018-01-02T13:16:10.922Z","updateTime":"2019-01-12T12:44:07.839Z"},{"name":"entry-card","title":"入口列表卡片","description":"入口列表卡片","homepage":"https://unpkg.com/@icedesign/entry-card-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/EntryCard","source":{"type":"npm","npm":"@icedesign/entry-card-block","version":"0.1.9","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/entry-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/entry-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-04T09:59:15.216Z","updateTime":"2019-01-12T12:44:13.975Z"},{"name":"events","title":"创新活动","description":"适用于活动事件的信息展示","homepage":"https://unpkg.com/@icedesign/events-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Events","source":{"type":"npm","npm":"@icedesign/events-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","rc-queue-anim":"^1.6.5","rc-scroll-anim":"^2.5.5","react":"^16.2.0"},"screenshot":"https://unpkg.com/@icedesign/events-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/events-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-08-30T15:36:46.863Z","updateTime":"2019-01-12T12:44:52.520Z"},{"name":"events-overview","title":"活动概览","description":"适用于展示活动数据概览","homepage":"https://unpkg.com/@icedesign/events-overview-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/EventsOverview","source":{"type":"npm","npm":"@icedesign/events-overview-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/events-overview-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/events-overview-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Balloon"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-10-11T13:06:13.324Z","updateTime":"2019-01-12T12:44:59.038Z"},{"name":"excellent-home-page","title":"简洁大气首页","description":"简洁大气首页","homepage":"https://unpkg.com/@icedesign/excellent-home-page-block/build/index.html","categories":["欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ExcellentHomePage","source":{"type":"npm","npm":"@icedesign/excellent-home-page-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/excellent-home-page-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/excellent-home-page-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-12-13T09:07:38.022Z","updateTime":"2019-01-12T12:45:05.596Z"},{"name":"expanded-table","title":"可展开表格","description":"额外渲染和选择混合表格","homepage":"https://unpkg.com/@icedesign/expanded-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ExpandedTable","source":{"type":"npm","npm":"@icedesign/expanded-table-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/expanded-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/expanded-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"}]},"publishTime":"2018-05-31T13:01:54.142Z","updateTime":"2019-01-12T12:45:12.237Z"},{"name":"failure-detail","title":"提交失败详情展示","description":"提交失败详情展示","homepage":"https://unpkg.com/@icedesign/failure-detail-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FailureDetail","source":{"type":"npm","npm":"@icedesign/failure-detail-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/failure-detail-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/failure-detail-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-02T13:27:20.695Z","updateTime":"2019-01-12T12:45:25.281Z"},{"name":"feature-display","title":"功能特点展示","description":"","homepage":"https://unpkg.com/@icedesign/feature-display-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FeatureDisplay","source":{"type":"npm","npm":"@icedesign/feature-display-block","version":"0.1.6","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/feature-display-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/feature-display-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T13:31:31.493Z","updateTime":"2019-01-12T12:45:31.586Z"},{"name":"feature-intro","title":"功能简介","description":"适用于介绍页的功能简介","homepage":"https://unpkg.com/@icedesign/feature-intro-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FeatureIntro","source":{"type":"npm","npm":"@icedesign/feature-intro-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/feature-intro-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/feature-intro-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-09-20T15:30:54.946Z","updateTime":"2019-01-12T12:45:40.644Z"},{"name":"feature-list","title":"特性列表","description":"展示一些特性列表介绍","homepage":"https://unpkg.com/@icedesign/feature-list-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FeatureList","source":{"type":"npm","npm":"@icedesign/feature-list-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/feature-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/feature-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-04-12T12:44:11.473Z","updateTime":"2019-01-12T12:45:46.379Z"},{"name":"feed-list","title":"Feed 消息列表","description":" Feed 消息列表","homepage":"https://unpkg.com/@icedesign/feed-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FeedList","source":{"type":"npm","npm":"@icedesign/feed-list-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/feed-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/feed-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-02T13:39:17.120Z","updateTime":"2019-01-12T12:45:54.571Z"},{"name":"filter-bar","title":"筛选 Bar","description":"适用于页面顶部的筛选场景","homepage":"https://unpkg.com/@icedesign/filter-bar-block/build/index.html","categories":["筛选"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FilterBar","source":{"type":"npm","npm":"@icedesign/filter-bar-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/filter-bar-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/filter-bar-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"DatePicker"}]},"publishTime":"2018-09-13T12:29:41.745Z","updateTime":"2019-01-12T12:46:00.699Z"},{"name":"filter-list","title":"支持过滤的列表","description":"支持过滤的列表","homepage":"https://unpkg.com/@icedesign/filter-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FilterList","source":{"type":"npm","npm":"@icedesign/filter-list-block","version":"0.1.16","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/filter-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/filter-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Search"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@icedesign/img","className":"Img"}]},"publishTime":"2018-01-05T12:10:06.346Z","updateTime":"2019-01-12T12:46:15.770Z"},{"name":"filter-table","title":"支持筛选的表格","description":"附带筛选工具条的表格","homepage":"https://unpkg.com/@icedesign/filter-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FilterTable","source":{"type":"npm","npm":"@icedesign/filter-table-block","version":"0.1.19","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/data-binder":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/img":"^1.x","@icedesign/label":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/filter-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/filter-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@icedesign/label","className":"Label"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"DatePicker"}]},"publishTime":"2018-01-05T12:11:06.364Z","updateTime":"2019-02-28T05:04:21.392Z"},{"name":"filter-with-search","title":" 含搜索筛选","description":" 含搜索筛选","homepage":"https://unpkg.com/@icedesign/filter-with-search-block/build/index.html","categories":["筛选"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FilterWithSearch","source":{"type":"npm","npm":"@icedesign/filter-with-search-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/filter-with-search-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/filter-with-search-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Search"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-05T12:10:49.928Z","updateTime":"2019-01-12T12:46:30.502Z"},{"name":"flow-statistics","title":"流量统计","description":"","homepage":"https://unpkg.com/@icedesign/flow-statistics-block@latest/build/index.html","categories":["图表","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FlowStatistics","source":{"type":"npm","npm":"@icedesign/flow-statistics-block","version":"0.1.7","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.5","@icedesign/container":"^1.x","bizcharts":"^3.1.3-beta.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/flow-statistics-block@latest/screenshot.png","screenshots":["https://unpkg.com/@icedesign/flow-statistics-block@latest/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-03-01T09:37:27.687Z","updateTime":"2019-03-18T05:53:38.087Z"},{"name":"footer","title":"页脚","description":"","homepage":"https://unpkg.com/@icedesign/footer-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Footer","source":{"type":"npm","npm":"@icedesign/footer-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/footer-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/footer-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-05T12:11:23.204Z","updateTime":"2019-01-12T12:46:55.842Z"},{"name":"footer-info","title":"页脚信息展示","description":"","homepage":"https://unpkg.com/@icedesign/footer-info-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FooterInfo","source":{"type":"npm","npm":"@icedesign/footer-info-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/footer-info-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/footer-info-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-05T12:10:30.122Z","updateTime":"2019-01-12T12:47:06.243Z"},{"name":"footer-links","title":"底部链接","description":"通用的底部链接区块","homepage":"https://unpkg.com/@icedesign/footer-links-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FooterLinks","source":{"type":"npm","npm":"@icedesign/footer-links-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/footer-links-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/footer-links-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-12-13T09:07:39.118Z","updateTime":"2019-01-12T12:47:12.457Z"},{"name":"forget-password-form","title":"忘记密码","description":"忘记密码","homepage":"https://unpkg.com/@icedesign/forget-password-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ForgetPasswordForm","source":{"type":"npm","npm":"@icedesign/forget-password-form-block","version":"0.1.14","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/forget-password-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/forget-password-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-01-04T10:12:21.872Z","updateTime":"2019-02-28T05:06:28.644Z"},{"name":"frontier-content","title":"前言内容","description":"适用于前言内容的信息展示","homepage":"https://unpkg.com/@icedesign/frontier-content-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FrontierContent","source":{"type":"npm","npm":"@icedesign/frontier-content-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","rc-queue-anim":"^1.6.5","rc-scroll-anim":"^2.5.5","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/frontier-content-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/frontier-content-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-08-30T15:36:43.464Z","updateTime":"2019-01-12T12:47:33.610Z"},{"name":"full-footer","title":"页脚","description":"适用于介绍页的响应式页脚","homepage":"https://unpkg.com/@icedesign/full-footer-block/build/index.html","categories":["其他"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/FullFooter","source":{"type":"npm","npm":"@icedesign/full-footer-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/full-footer-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/full-footer-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-09-20T15:30:55.063Z","updateTime":"2019-01-12T12:47:39.706Z"},{"name":"gauge-car-chart","title":"仪表盘","description":"","homepage":"https://unpkg.com/@icedesign/gauge-car-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/GaugeCarChart","source":{"type":"npm","npm":"@icedesign/gauge-car-chart-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","echarts":"^4.0.4","echarts-for-react":"^2.0.8","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/gauge-car-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/gauge-car-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-03-22T18:08:10.292Z","updateTime":"2019-01-12T12:47:47.208Z"},{"name":"geek-events","title":"活动展示","description":"适用于活动展示","homepage":"https://unpkg.com/@icedesign/geek-events-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/GeekEvents","source":{"type":"npm","npm":"@icedesign/geek-events-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","rc-queue-anim":"^1.6.5","rc-scroll-anim":"^2.5.5","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/geek-events-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/geek-events-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-12-13T07:14:14.737Z","updateTime":"2019-01-12T12:48:16.084Z"},{"name":"general-widget","title":"常用功能列表","description":"","homepage":"https://unpkg.com/@icedesign/general-widget-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/GeneralWidget","source":{"type":"npm","npm":"@icedesign/general-widget-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/general-widget-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/general-widget-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-04-26T16:34:38.398Z","updateTime":"2019-01-12T12:48:23.167Z"},{"name":"grid-layout","title":"可拖拽和调整大小的网格布局","description":"可拖拽和调整大小的网格布局","homepage":"https://unpkg.com/@icedesign/grid-layout-block/build/index.html","categories":["瀑布流"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/GridLayout","source":{"type":"npm","npm":"@icedesign/grid-layout-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react-grid-layout":"^0.16.6","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/grid-layout-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/grid-layout-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-07-19T06:56:32.187Z","updateTime":"2019-01-12T12:48:29.185Z"},{"name":"grouped-form","title":"分组显示的表单","description":"","homepage":"https://unpkg.com/@icedesign/grouped-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/GroupedForm","source":{"type":"npm","npm":"@icedesign/grouped-form-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/grouped-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/grouped-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Form"},{"basePackage":"@alifd/next","className":"NumberPicker"},{"basePackage":"@alifd/next","className":"SplitButton"}]},"publishTime":"2018-03-29T12:47:20.204Z","updateTime":"2019-02-28T05:07:15.133Z"},{"name":"hot-post-rank","title":"热门文章排行","description":"展示文章阅读热度排行","homepage":"https://unpkg.com/@icedesign/hot-post-rank-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/HotPostRank","source":{"type":"npm","npm":"@icedesign/hot-post-rank-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/hot-post-rank-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/hot-post-rank-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Pagination"}]},"publishTime":"2018-12-13T09:14:34.597Z","updateTime":"2019-01-12T12:48:48.945Z"},{"name":"hot-rank","title":"hot-rank","description":"展示关键词、关键点热度","homepage":"https://unpkg.com/@icedesign/hot-rank-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/HotRank","source":{"type":"npm","npm":"@icedesign/hot-rank-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/hot-rank-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/hot-rank-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Progress"}]},"publishTime":"2018-12-13T09:14:37.077Z","updateTime":"2019-01-12T12:48:58.147Z"},{"name":"industry-banner","title":"行业图文介绍","description":"行业专区的图文介绍","homepage":"https://unpkg.com/@icedesign/industry-banner-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/IndustryBanner","source":{"type":"npm","npm":"@icedesign/industry-banner-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/industry-banner-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/industry-banner-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-12-13T09:14:34.159Z","updateTime":"2019-01-12T12:49:06.068Z"},{"name":"infinite-card","title":"横向滚动的卡片展示","description":"适用于横向滚动的多数据展示卡片","homepage":"https://unpkg.com/@icedesign/infinite-card-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/InfiniteCard","source":{"type":"npm","npm":"@icedesign/infinite-card-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/infinite-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/infinite-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-08-09T13:52:13.803Z","updateTime":"2019-01-12T12:49:15.245Z"},{"name":"infinite-scroll-cell-measurer","title":"无限滚动的表格","description":"无限滚动的表格","homepage":"https://unpkg.com/@icedesign/infinite-scroll-cell-measurer-block/build/index.html","categories":["表格","列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/InfiniteScrollCellMeasurer","source":{"type":"npm","npm":"@icedesign/infinite-scroll-cell-measurer-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","classnames":"^2.2.6","prop-types":"^15.5.8","react":"^16.2.0","react-virtualized":"^9.20.1"},"screenshot":"https://unpkg.com/@icedesign/infinite-scroll-cell-measurer-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/infinite-scroll-cell-measurer-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-12-13T09:14:33.630Z","updateTime":"2019-01-12T12:49:37.135Z"},{"name":"infinite-scroll-grid","title":"无限滚动的栅格列表","description":"无限滚动的栅格列表","homepage":"https://unpkg.com/@icedesign/infinite-scroll-grid-block/build/index.html","categories":["表格","列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/InfiniteScrollGrid","source":{"type":"npm","npm":"@icedesign/infinite-scroll-grid-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","classnames":"^2.2.6","prop-types":"^15.5.8","react":"^16.2.0","react-virtualized":"^9.20.1"},"screenshot":"https://unpkg.com/@icedesign/infinite-scroll-grid-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/infinite-scroll-grid-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-12-13T09:14:33.982Z","updateTime":"2019-01-12T12:49:44.121Z"},{"name":"infinite-scroll-list","title":"无限滚动列表","description":"无限滚动列表","homepage":"https://unpkg.com/@icedesign/infinite-scroll-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/InfiniteScrollList","source":{"type":"npm","npm":"@icedesign/infinite-scroll-list-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react":"^16.2.0","react-virtualized":"^9.20.1"},"screenshot":"https://unpkg.com/@icedesign/infinite-scroll-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/infinite-scroll-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-12-13T09:14:34.138Z","updateTime":"2019-01-12T12:49:52.784Z"},{"name":"info-display-tab","title":"标签页信息展示","description":"标签页信息展示","homepage":"https://unpkg.com/@icedesign/info-display-tab-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/InfoDisplayTab","source":{"type":"npm","npm":"@icedesign/info-display-tab-block","version":"0.1.15","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/ellipsis":"^1.x","axios":"^0.17.1","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/info-display-tab-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/info-display-tab-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@icedesign/ellipsis","className":"Ellipsis"},{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T07:06:17.336Z","updateTime":"2019-01-12T12:49:59.824Z"},{"name":"info-display-table","title":"两栏信息展示型表格","description":"两栏信息展示型表格","homepage":"https://unpkg.com/@icedesign/info-display-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/InfoDisplayTable","source":{"type":"npm","npm":"@icedesign/info-display-table-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/info-display-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/info-display-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"}]},"publishTime":"2018-01-02T07:17:07.017Z","updateTime":"2019-01-12T12:50:08.638Z"},{"name":"info-overview","title":"数据概要","description":"适用于多数据的信息展示","homepage":"https://unpkg.com/@icedesign/info-overview-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/InfoOverview","source":{"type":"npm","npm":"@icedesign/info-overview-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/info-overview-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/info-overview-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"DatePicker"}]},"publishTime":"2018-09-13T12:29:41.861Z","updateTime":"2019-01-12T12:50:15.244Z"},{"name":"intro-banner","title":"IntroBanner","description":"带图的介绍","homepage":"https://unpkg.com/@icedesign/intro-banner-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/IntroBanner","source":{"type":"npm","npm":"@icedesign/intro-banner-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/intro-banner-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/intro-banner-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-12-13T09:14:40.312Z","updateTime":"2019-01-12T12:50:38.772Z"},{"name":"intro-step-info","title":"简介和步骤条信息组合","description":"","homepage":"https://unpkg.com/@icedesign/intro-step-info-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/IntroStepInfo","source":{"type":"npm","npm":"@icedesign/intro-step-info-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/intro-step-info-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/intro-step-info-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-04-19T10:06:45.569Z","updateTime":"2019-01-12T12:50:52.305Z"},{"name":"intro-tab","title":"introduction tabs","description":"展示多种情况下的信息","homepage":"https://unpkg.com/@icedesign/intro-tab-block/build/index.html","categories":["筛选","信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/IntroTab","source":{"type":"npm","npm":"@icedesign/intro-tab-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/intro-tab-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/intro-tab-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-12-13T09:14:37.656Z","updateTime":"2019-01-12T12:51:55.422Z"},{"name":"intro-with-background","title":"附带背景图片的信息介绍","description":"附带背景图片的信息介绍区块","homepage":"https://unpkg.com/@icedesign/intro-with-background-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/IntroWithBackground","source":{"type":"npm","npm":"@icedesign/intro-with-background-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/intro-with-background-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/intro-with-background-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-04-12T12:44:56.016Z","updateTime":"2019-01-12T12:52:05.787Z"},{"name":"join-us","title":"加入我们","description":"","homepage":"https://unpkg.com/@icedesign/join-us-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/JoinUs","source":{"type":"npm","npm":"@icedesign/join-us-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/join-us-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/join-us-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-01-04T09:50:29.437Z","updateTime":"2019-02-28T05:04:23.395Z"},{"name":"json-view","title":"JSON 可视化渲染","description":"支持编辑和展示JSON可视化区块","homepage":"https://unpkg.com/@icedesign/json-view-block/build/index.html","categories":["代码编辑器"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/JsonView","source":{"type":"npm","npm":"@icedesign/json-view-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react-json-view":"^1.18.3"},"screenshot":"https://unpkg.com/@icedesign/json-view-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/json-view-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-02T07:39:02.311Z","updateTime":"2019-01-12T12:52:20.938Z"},{"name":"landing-intro-banner","title":"首页介绍","description":"首页介绍 Banner","homepage":"https://unpkg.com/@icedesign/landing-intro-banner-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/LandingIntroBanner","source":{"type":"npm","npm":"@icedesign/landing-intro-banner-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/landing-intro-banner-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/landing-intro-banner-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2017-12-27T13:40:26.001Z","updateTime":"2019-01-12T12:52:40.266Z"},{"name":"latest-activity","title":"活动列表","description":"适用于图表和列表组合的活动展示场景","homepage":"https://unpkg.com/@icedesign/latest-activity-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/LatestActivity","source":{"type":"npm","npm":"@icedesign/latest-activity-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/latest-activity-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/latest-activity-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Table"}]},"publishTime":"2018-10-11T13:06:13.938Z","updateTime":"2019-01-12T12:52:53.906Z"},{"name":"latest-news","title":"最新消息列表","description":"","homepage":"https://unpkg.com/@icedesign/latest-news-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/LatestNews","source":{"type":"npm","npm":"@icedesign/latest-news-block","version":"0.1.7","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/latest-news-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/latest-news-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-31T09:37:11.013Z","updateTime":"2019-01-12T12:53:00.228Z"},{"name":"left-content-display","title":"功能描述-右图左文","description":"","homepage":"https://unpkg.com/@icedesign/left-content-display-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/LeftContentDisplay","source":{"type":"npm","npm":"@icedesign/left-content-display-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/left-content-display-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/left-content-display-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-01-02T07:43:16.562Z","updateTime":"2019-01-12T12:53:08.096Z"},{"name":"line-bar-chart","title":"图表","description":"折线图和柱状图组合","homepage":"https://unpkg.com/@icedesign/line-bar-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/LineBarChart","source":{"type":"npm","npm":"@icedesign/line-bar-chart-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/line-bar-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/line-bar-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-10-11T13:06:13.622Z","updateTime":"2019-01-12T12:53:16.813Z"},{"name":"lite-table","title":"简单带状态表格","description":"简单的附带状态的表格","homepage":"https://unpkg.com/@icedesign/lite-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/LiteTable","source":{"type":"npm","npm":"@icedesign/lite-table-block","version":"0.1.13","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/lite-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/lite-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"}]},"publishTime":"2018-01-02T07:43:10.261Z","updateTime":"2019-01-12T12:53:23.752Z"},{"name":"login","title":"登录页","description":"","homepage":"https://unpkg.com/@icedesign/login-block/build/index.html","categories":["登录页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Login","source":{"type":"npm","npm":"@icedesign/login-block","version":"1.0.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/login-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/login-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Message"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Form"}]},"publishTime":"2018-05-10T14:32:24.120Z","updateTime":"2019-01-12T12:53:31.679Z"},{"name":"login-form","title":"登录","description":"左右布局带背景图的登录表单页","homepage":"https://unpkg.com/@icedesign/login-form-block/build/index.html","categories":["登录页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/LoginForm","source":{"type":"npm","npm":"@icedesign/login-form-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/login-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/login-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Message"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-08-23T17:01:33.456Z","updateTime":"2019-02-28T05:06:20.226Z"},{"name":"login-panel","title":"登录","description":"左右布局带背景图的登录表单页","homepage":"https://unpkg.com/@icedesign/login-panel-block/build/index.html","categories":["登录页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/LoginPanel","source":{"type":"npm","npm":"@icedesign/login-panel-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/login-panel-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/login-panel-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Message"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-08-23T17:01:33.478Z","updateTime":"2019-02-28T05:04:32.203Z"},{"name":"main-data","title":"主要数据","description":"展示核心数据","homepage":"https://unpkg.com/@icedesign/main-data-block/build/index.html","categories":["数据展示","信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/MainData","source":{"type":"npm","npm":"@icedesign/main-data-block","version":"0.1.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/main-data-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/main-data-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-04-12T12:44:35.524Z","updateTime":"2019-01-12T12:55:18.917Z"},{"name":"map-with-a-info-window","title":"地图信息窗口","description":"Map With A Info Window","homepage":"https://unpkg.com/@icedesign/map-with-a-info-window/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/MapWithAInfoWindow","source":{"type":"npm","npm":"@icedesign/map-with-a-info-window","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react":"^16.2.0","react-amap":"^1.2.7"},"screenshot":"https://unpkg.com/@icedesign/map-with-a-info-window/screenshot.png","screenshots":["https://unpkg.com/@icedesign/map-with-a-info-window/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-12-13T09:19:48.833Z","updateTime":"2019-01-12T12:55:25.498Z"},{"name":"map-with-a-marker","title":"地图位置标记","description":"Map With A Marker","homepage":"https://unpkg.com/@icedesign/map-with-a-marker/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/MapWithAMarker","source":{"type":"npm","npm":"@icedesign/map-with-a-marker","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react":"^16.2.0","react-amap":"^1.2.7"},"screenshot":"https://unpkg.com/@icedesign/map-with-a-marker/screenshot.png","screenshots":["https://unpkg.com/@icedesign/map-with-a-marker/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-12-13T09:19:44.043Z","updateTime":"2019-01-12T12:55:31.991Z"},{"name":"markdown-docs","title":"markdown 文档","description":"markdown 文档区块展示","homepage":"https://unpkg.com/@icedesign/markdown-docs-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/MarkdownDocs","source":{"type":"npm","npm":"@icedesign/markdown-docs-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","react-markdown":"^3.3.2"},"screenshot":"https://unpkg.com/@icedesign/markdown-docs-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/markdown-docs-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-17T09:41:37.551Z","updateTime":"2019-01-12T12:56:01.240Z"},{"name":"masonry","title":"瀑布流","description":"自适应的动态瀑布流效果","homepage":"https://unpkg.com/@icedesign/masonry-block/build/index.html","categories":["瀑布流"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Masonry","source":{"type":"npm","npm":"@icedesign/masonry-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react-masonry-component":"^6.2.1","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/masonry-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/masonry-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-07-19T06:56:38.497Z","updateTime":"2019-01-12T13:04:12.475Z"},{"name":"member-list","title":"成员列表","description":"适用于展示成员列表的场景","homepage":"https://unpkg.com/@icedesign/member-list-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/MemberList","source":{"type":"npm","npm":"@icedesign/member-list-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/member-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/member-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-10-11T13:06:13.973Z","updateTime":"2019-01-12T13:04:32.868Z"},{"name":"message-list","title":"消息列表","description":"消息列表","homepage":"https://unpkg.com/@icedesign/message-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/MessageList","source":{"type":"npm","npm":"@icedesign/message-list-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/message-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/message-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Pagination"}]},"publishTime":"2018-01-02T07:53:18.652Z","updateTime":"2019-01-12T13:04:43.715Z"},{"name":"model-cards","title":"卡片展示","description":"适用于多数据卡片展示的场景","homepage":"https://unpkg.com/@icedesign/model-cards-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ModelCards","source":{"type":"npm","npm":"@icedesign/model-cards-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/model-cards-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/model-cards-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-09-20T15:30:55.038Z","updateTime":"2019-01-12T13:04:49.479Z"},{"name":"model-overview","title":"数据概要","description":"适用于 Dashboard 页的数据概要展示","homepage":"https://unpkg.com/@icedesign/model-overview-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ModelOverview","source":{"type":"npm","npm":"@icedesign/model-overview-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/model-overview-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/model-overview-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-09-20T15:31:03.001Z","updateTime":"2019-01-12T13:04:56.485Z"},{"name":"monaco-editor","title":"Monaco 代码编辑器","description":"Monaco 代码编辑器","homepage":"https://unpkg.com/@icedesign/monaco-editor-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/MonacoEditor","source":{"type":"npm","npm":"@icedesign/monaco-editor-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react-monaco-editor":"^0.13.0","regenerator-runtime":"^0.11.1","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/monaco-editor-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/monaco-editor-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-02T07:52:32.331Z","updateTime":"2019-01-12T13:05:04.487Z"},{"name":"multi-card","title":"卡片展示","description":"适用于多卡片的信息展示","homepage":"https://unpkg.com/@icedesign/multi-card-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/MultiCard","source":{"type":"npm","npm":"@icedesign/multi-card-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/multi-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/multi-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-09-06T16:45:52.164Z","updateTime":"2019-01-12T13:05:11.139Z"},{"name":"multiple-line-chart","title":"组合曲线图","description":"","homepage":"https://unpkg.com/@icedesign/multiple-line-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/MultipleLineChart","source":{"type":"npm","npm":"@icedesign/multiple-line-chart-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","echarts":"^4.0.4","echarts-for-react":"^2.0.8","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/multiple-line-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/multiple-line-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-03-22T18:08:10.372Z","updateTime":"2019-01-12T13:05:26.661Z"},{"name":"multiple-pie-chart","title":"饼图组合","description":"基于 highCharts 的饼图组合","homepage":"https://unpkg.com/@icedesign/multiple-pie-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/MultiplePieChart","source":{"type":"npm","npm":"@icedesign/multiple-pie-chart-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","highcharts":"^6.1.1","react-highcharts":"^16.0.2","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/multiple-pie-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/multiple-pie-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Select"}]},"publishTime":"2018-08-09T13:52:13.903Z","updateTime":"2019-01-12T13:05:34.595Z"},{"name":"normal-footer","title":"普通页脚","description":"","homepage":"https://unpkg.com/@icedesign/normal-footer-block/build/index.html","categories":["页脚"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/NormalFooter","source":{"type":"npm","npm":"@icedesign/normal-footer-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/normal-footer-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/normal-footer-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-05-04T16:55:53.989Z","updateTime":"2019-01-12T13:05:45.000Z"},{"name":"notice-card","title":"消息提示","description":"适用于顶部的消息提示","homepage":"https://unpkg.com/@icedesign/notice-card-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/NoticeCard","source":{"type":"npm","npm":"@icedesign/notice-card-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/notice-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/notice-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Message"}]},"publishTime":"2018-08-02T12:06:47.654Z","updateTime":"2019-01-12T13:06:24.381Z"},{"name":"notice-list","title":"公告列表","description":"展示站点公告列表","homepage":"https://unpkg.com/@icedesign/notice-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/NoticeList","source":{"type":"npm","npm":"@icedesign/notice-list-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","fecha":"^2.3.3","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/notice-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/notice-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Pagination"}]},"publishTime":"2018-12-13T09:21:17.457Z","updateTime":"2019-01-12T13:06:35.620Z"},{"name":"notice-summary","title":"通知摘要","description":"用于通知摘要展示","homepage":"https://unpkg.com/@icedesign/notice-summary-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/NoticeSummary","source":{"type":"npm","npm":"@icedesign/notice-summary-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/notice-summary-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/notice-summary-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-07-05T15:13:34.011Z","updateTime":"2019-01-12T13:06:44.224Z"},{"name":"notifications","title":"消息提醒","description":"","homepage":"https://unpkg.com/@icedesign/notifications-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Notifications","source":{"type":"npm","npm":"@icedesign/notifications-block","version":"0.1.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/notifications-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/notifications-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-04-19T10:08:30.515Z","updateTime":"2019-01-12T13:06:55.457Z"},{"name":"not-permission","title":"无权限提示","description":"","homepage":"https://unpkg.com/@icedesign/not-permission-block/build/index.html","categories":["异常"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/NotPermission","source":{"type":"npm","npm":"@icedesign/not-permission-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/not-permission-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/not-permission-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-02T07:55:35.592Z","updateTime":"2019-01-12T13:06:17.189Z"},{"name":"operation-table","title":"附带操作的表格","description":"附带操作按钮的表格","homepage":"https://unpkg.com/@icedesign/operation-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OperationTable","source":{"type":"npm","npm":"@icedesign/operation-table-block","version":"0.1.19","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/img":"^1.x","@icedesign/label":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/operation-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/operation-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@icedesign/img","className":"Img"},{"basePackage":"@icedesign/label","className":"Label"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Message"},{"basePackage":"@alifd/next","className":"Dialog"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T07:54:51.370Z","updateTime":"2019-02-28T05:04:13.519Z"},{"name":"order-list","title":"订单型列表","description":"订单型列表","homepage":"https://unpkg.com/@icedesign/order-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OrderList","source":{"type":"npm","npm":"@icedesign/order-list-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","axios":"^0.17.1","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/order-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/order-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"}]},"publishTime":"2018-01-02T07:56:14.393Z","updateTime":"2019-01-12T13:07:18.782Z"},{"name":"order-status-chart","title":"订单状态型图表","description":"订单状态型的图表","homepage":"https://unpkg.com/@icedesign/order-status-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OrderStatusChart","source":{"type":"npm","npm":"@icedesign/order-status-chart-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.10.1","@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/order-status-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/order-status-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-06-11T03:45:55.312Z","updateTime":"2019-01-12T13:07:28.365Z"},{"name":"our-team","title":"我们的团队","description":"","homepage":"https://unpkg.com/@icedesign/our-team-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OurTeam","source":{"type":"npm","npm":"@icedesign/our-team-block","version":"0.2.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/our-team-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/our-team-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T07:59:07.753Z","updateTime":"2019-01-12T13:07:35.911Z"},{"name":"overview-board","title":"概览数据","description":"卡片形式的概览数据","homepage":"https://unpkg.com/@icedesign/overview-board-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OverviewBoard","source":{"type":"npm","npm":"@icedesign/overview-board-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/overview-board-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/overview-board-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-06-21T12:25:40.362Z","updateTime":"2019-01-12T13:07:43.368Z"},{"name":"overview-card","title":"数据概览卡片","description":"数据概览卡片","homepage":"https://unpkg.com/@icedesign/overview-card-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OverviewCard","source":{"type":"npm","npm":"@icedesign/overview-card-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/overview-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/overview-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-06-15T01:42:00.750Z","updateTime":"2019-01-12T13:07:51.723Z"},{"name":"overview-chart","title":"综合图表","description":"","homepage":"https://unpkg.com/@icedesign/overview-chart-block/build/index.html","categories":["图表","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OverviewChart","source":{"type":"npm","npm":"@icedesign/overview-chart-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.9","@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/overview-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/overview-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-03-02T11:57:32.879Z","updateTime":"2019-01-12T13:08:12.294Z"},{"name":"overview-chart-card","title":"图表套件组合展示","description":"图表套件组合展示","homepage":"https://unpkg.com/@icedesign/overview-chart-card-block/build/index.html","categories":["图表","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OverviewChartCard","source":{"type":"npm","npm":"@icedesign/overview-chart-card-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"3.2.2","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/overview-chart-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/overview-chart-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Progress"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Balloon"}]},"publishTime":"2018-06-15T01:41:57.485Z","updateTime":"2019-01-12T13:08:20.423Z"},{"name":"overview-info","title":"概述信息展示","description":"适用于概述信息和图表结合的展示","homepage":"https://unpkg.com/@icedesign/overview-info-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OverviewInfo","source":{"type":"npm","npm":"@icedesign/overview-info-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.9.5","@icedesign/container":"^1.x","bizcharts":"^3.2.2","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/overview-info-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/overview-info-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-09-06T16:45:52.196Z","updateTime":"2019-01-12T13:08:38.691Z"},{"name":"overview-pie-chart","title":"概览数据","description":"概览数据","homepage":"https://unpkg.com/@icedesign/overview-pie-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OverviewPieChart","source":{"type":"npm","npm":"@icedesign/overview-pie-chart-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"^3.1.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/overview-pie-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/overview-pie-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-06-11T03:45:54.700Z","updateTime":"2019-01-12T13:08:47.666Z"},{"name":"overview-sates-chart","title":"数据概览","description":"数据概览","homepage":"https://unpkg.com/@icedesign/overview-sates-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/OverviewSatesChart","source":{"type":"npm","npm":"@icedesign/overview-sates-chart-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"3.2.2","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/overview-sates-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/overview-sates-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-06-11T03:45:54.578Z","updateTime":"2019-01-12T13:08:56.099Z"},{"name":"pareto-chart","title":"柱状图和折线图组合","description":"基于 highcharts 的柱状图和折线图组合区块","homepage":"https://unpkg.com/@icedesign/pareto-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ParetoChart","source":{"type":"npm","npm":"@icedesign/pareto-chart-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","highcharts":"^6.1.1","react-highcharts":"^16.0.2","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/pareto-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/pareto-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Select"}]},"publishTime":"2018-08-09T13:52:13.803Z","updateTime":"2019-01-12T13:09:03.042Z"},{"name":"partners","title":"合作伙伴","description":"适用于合作伙伴的展示","homepage":"https://unpkg.com/@icedesign/partners-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Partners","source":{"type":"npm","npm":"@icedesign/partners-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/partners-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/partners-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-12-13T07:14:36.727Z","updateTime":"2019-01-12T13:09:09.447Z"},{"name":"performance-chart","title":"销售业绩图表","description":"","homepage":"https://unpkg.com/@icedesign/performance-chart-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PerformanceChart","source":{"type":"npm","npm":"@icedesign/performance-chart-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","bizcharts":"3.2.2","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/performance-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/performance-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-04-26T16:34:58.530Z","updateTime":"2019-01-12T13:09:19.523Z"},{"name":"performance-indicator","title":"性能指标图","description":"适用于性能指标展示的图表","homepage":"https://unpkg.com/@icedesign/performance-indicator-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PerformanceIndicator","source":{"type":"npm","npm":"@icedesign/performance-indicator-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.9.6","@icedesign/container":"^1.x","bizcharts":"^3.2.2","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/performance-indicator-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/performance-indicator-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-09-20T15:30:55.363Z","updateTime":"2019-01-12T13:09:35.397Z"},{"name":"picture-text-list","title":"图文列表","description":"图文列表","homepage":"https://unpkg.com/@icedesign/picture-text-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PictureTextList","source":{"type":"npm","npm":"@icedesign/picture-text-list-block","version":"0.1.13","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/picture-text-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/picture-text-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@icedesign/img","className":"Img"}]},"publishTime":"2018-01-04T09:58:31.555Z","updateTime":"2019-01-12T13:10:00.215Z"},{"name":"pie-doughnut-chart","title":"饼图","description":"饼图","homepage":"https://unpkg.com/@icedesign/pie-doughnut-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PieDoughnutChart","source":{"type":"npm","npm":"@icedesign/pie-doughnut-chart-block","version":"0.1.14","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.2","@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/pie-doughnut-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/pie-doughnut-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-04T09:58:52.043Z","updateTime":"2019-01-12T13:10:16.577Z"},{"name":"pie-line-chart","title":"饼图和环形图组合","description":"","homepage":"https://unpkg.com/@icedesign/pie-line-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PieLineChart","source":{"type":"npm","npm":"@icedesign/pie-line-chart-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","echarts":"^4.0.4","echarts-for-react":"^2.0.8","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/pie-line-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/pie-line-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-03-22T15:13:34.978Z","updateTime":"2019-01-12T13:10:29.906Z"},{"name":"platform-black-intro","title":"平台黑底介绍","description":"平台黑底介绍区块","homepage":"https://unpkg.com/@icedesign/platform-black-intro-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PlatformBlackIntro","source":{"type":"npm","npm":"@icedesign/platform-black-intro-block","version":"1.0.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0"},"screenshot":"https://unpkg.com/@icedesign/platform-black-intro-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/platform-black-intro-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-10T14:32:03.588Z","updateTime":"2019-01-12T13:10:46.690Z"},{"name":"platform-intro","title":"平台介绍","description":"平台介绍","homepage":"https://unpkg.com/@icedesign/platform-intro-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PlatformIntro","source":{"type":"npm","npm":"@icedesign/platform-intro-block","version":"1.0.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/platform-intro-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/platform-intro-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-10T14:32:16.795Z","updateTime":"2019-01-12T13:10:56.234Z"},{"name":"platform-joinus","title":"加入平台区块","description":"加入平台区块","homepage":"https://unpkg.com/@icedesign/platform-joinus-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PlatformJoinus","source":{"type":"npm","npm":"@icedesign/platform-joinus-block","version":"1.0.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/platform-joinus-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/platform-joinus-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-05-10T14:32:38.687Z","updateTime":"2019-01-12T13:11:06.003Z"},{"name":"platform-landing","title":"平台登陆引导页面","description":"平台登陆引导页面","homepage":"https://unpkg.com/@icedesign/platform-landing-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PlatformLanding","source":{"type":"npm","npm":"@icedesign/platform-landing-block","version":"1.0.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/platform-landing-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/platform-landing-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-05-10T14:32:54.077Z","updateTime":"2019-01-12T13:11:20.918Z"},{"name":"platform-tools-intro","title":"平台工具介绍","description":"平台工具介绍","homepage":"https://unpkg.com/@icedesign/platform-tools-intro-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PlatformToolsIntro","source":{"type":"npm","npm":"@icedesign/platform-tools-intro-block","version":"1.0.6","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/platform-tools-intro-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/platform-tools-intro-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-10T14:33:17.725Z","updateTime":"2019-01-12T13:11:31.781Z"},{"name":"post-category","title":"post-category","description":"文章创作类型列表","homepage":"https://unpkg.com/@icedesign/post-category-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PostCategory","source":{"type":"npm","npm":"@icedesign/post-category-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/post-category-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/post-category-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-12-13T09:22:03.351Z","updateTime":"2019-01-12T13:11:37.955Z"},{"name":"price-card","title":"价格展示","description":"","homepage":"https://unpkg.com/@icedesign/price-card-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PriceCard","source":{"type":"npm","npm":"@icedesign/price-card-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/price-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/price-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T08:00:14.704Z","updateTime":"2019-01-12T13:11:52.018Z"},{"name":"price-info","title":"价格信息展示","description":"","homepage":"https://unpkg.com/@icedesign/price-info-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PriceInfo","source":{"type":"npm","npm":"@icedesign/price-info-block","version":"0.1.6","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/price-info-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/price-info-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T08:01:03.063Z","updateTime":"2019-01-12T13:11:57.705Z"},{"name":"private-message-form","title":"私有消息表单","description":"私有消息表单","homepage":"https://unpkg.com/@icedesign/private-message-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/PrivateMessageForm","source":{"type":"npm","npm":"@icedesign/private-message-form-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/private-message-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/private-message-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Message"}]},"publishTime":"2018-01-02T08:04:24.170Z","updateTime":"2019-01-12T13:12:05.660Z"},{"name":"product-description","title":"产品特点介绍","description":"描述产品特点区块，深色主题，左文右图展示形式，支持异形图片。","homepage":"https://unpkg.com/@icedesign/product-description-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ProductDescription","source":{"type":"npm","npm":"@icedesign/product-description-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/product-description-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/product-description-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-05T02:12:23.003Z","updateTime":"2019-01-12T13:12:13.862Z"},{"name":"product-feature","title":"产品特点介绍","description":"用于描述产品的特点，左图右文形式。","homepage":"https://unpkg.com/@icedesign/product-feature-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ProductFeature","source":{"type":"npm","npm":"@icedesign/product-feature-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/product-feature-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/product-feature-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-04T15:02:36.075Z","updateTime":"2019-01-12T13:34:20.611Z"},{"name":"product-feature-dark","title":"产品特点介绍","description":"描述产品特点区块，深色主题，左文右图展示形式。","homepage":"https://unpkg.com/@icedesign/product-feature-dark-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ProductFeatureDark","source":{"type":"npm","npm":"@icedesign/product-feature-dark-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/product-feature-dark-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/product-feature-dark-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-04T15:03:28.738Z","updateTime":"2019-01-12T13:12:30.519Z"},{"name":"product-info","title":"产品信息展示","description":"产品信息展示","homepage":"https://unpkg.com/@icedesign/product-info-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ProductInfo","source":{"type":"npm","npm":"@icedesign/product-info-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/product-info-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/product-info-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-02T08:07:30.768Z","updateTime":"2019-01-12T13:12:47.582Z"},{"name":"product-intro","title":"产品介绍区块","description":"用于左文右图产品介绍模块","homepage":"https://unpkg.com/@icedesign/product-intro-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ProductIntro","source":{"type":"npm","npm":"@icedesign/product-intro-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/product-intro-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/product-intro-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-03-29T12:47:20.321Z","updateTime":"2019-01-12T13:13:10.379Z"},{"name":"progress-data-list","title":"进度条数据列表","description":"进度条数据列表展示","homepage":"https://unpkg.com/@icedesign/progress-data-list-block/build/index.html","categories":["图表","列表","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ProgressDataList","source":{"type":"npm","npm":"@icedesign/progress-data-list-block","version":"0.1.9","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/progress-data-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/progress-data-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Progress"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-18T09:42:58.553Z","updateTime":"2019-01-12T13:13:20.312Z"},{"name":"progress-table","title":"进度条表格","description":"进度条表格","homepage":"https://unpkg.com/@icedesign/progress-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ProgressTable","source":{"type":"npm","npm":"@icedesign/progress-table-block","version":"0.1.13","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^0.1.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/progress-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/progress-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Progress"},{"basePackage":"@alifd/next","className":"Pagination"}]},"publishTime":"2017-12-27T13:46:26.614Z","updateTime":"2019-01-12T13:13:28.415Z"},{"name":"project-overview","title":"概览","description":"适用于项目数据概览类的展示","homepage":"https://unpkg.com/@icedesign/project-overview-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ProjectOverview","source":{"type":"npm","npm":"@icedesign/project-overview-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/project-overview-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/project-overview-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-10-11T13:06:15.662Z","updateTime":"2019-01-12T13:13:36.810Z"},{"name":"project-status","title":"项目状态","description":"项目状态和进度展示","homepage":"https://unpkg.com/@icedesign/project-status-block/build/index.html","categories":["图表","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ProjectStatus","source":{"type":"npm","npm":"@icedesign/project-status-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"^3.1.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/project-status-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/project-status-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Timeline"}]},"publishTime":"2018-06-11T03:45:54.621Z","updateTime":"2019-01-12T13:13:51.416Z"},{"name":"qr-code","title":"二维码","description":"根据配置属性生成二维码","homepage":"https://unpkg.com/@icedesign/qr-code-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/QrCode","source":{"type":"npm","npm":"@icedesign/qr-code-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","qrcode.react":"0.7.2","react-color":"^2.14.1","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/qr-code-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/qr-code-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"NumberPicker"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Input"}]},"publishTime":"2018-08-02T12:06:47.803Z","updateTime":"2019-02-28T05:04:32.037Z"},{"name":"quick-navigation","title":"快捷导航入口","description":"快捷导航入口","homepage":"https://unpkg.com/@icedesign/quick-navigation-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/QuickNavigation","source":{"type":"npm","npm":"@icedesign/quick-navigation-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/quick-navigation-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/quick-navigation-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-06-15T01:41:57.015Z","updateTime":"2019-01-12T13:14:24.021Z"},{"name":"quill-rich-text-editor","title":"Quill 富文本编辑器","description":"基于 react-quill 的富文本编辑器","homepage":"https://unpkg.com/@icedesign/quill-rich-text-editor-block/build/index.html","categories":["富文本编辑器"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/QuillRichTextEditor","source":{"type":"npm","npm":"@icedesign/quill-rich-text-editor-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react-dom":"^16.6.3","react-quill":"^1.3.1","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/quill-rich-text-editor-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/quill-rich-text-editor-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-07-12T15:06:38.952Z","updateTime":"2019-01-12T13:14:33.115Z"},{"name":"radar-chart","title":"基础雷达图","description":"","homepage":"https://unpkg.com/@icedesign/radar-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/RadarChart","source":{"type":"npm","npm":"@icedesign/radar-chart-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.8.7","@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/radar-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/radar-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-04-26T16:35:09.931Z","updateTime":"2019-01-12T13:14:52.978Z"},{"name":"real-time-data","title":"动态数据展示","description":"基于 highcharts 的动态数据展示区块","homepage":"https://unpkg.com/@icedesign/real-time-data-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/RealTimeData","source":{"type":"npm","npm":"@icedesign/real-time-data-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","highcharts":"^6.1.1","react-highcharts":"^16.0.2","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/real-time-data-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/real-time-data-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-08-09T13:52:14.251Z","updateTime":"2019-01-12T13:15:12.466Z"},{"name":"real-time-overview","title":"实时概况","description":"","homepage":"https://unpkg.com/@icedesign/real-time-overview-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/RealTimeOverview","source":{"type":"npm","npm":"@icedesign/real-time-overview-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/real-time-overview-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/real-time-overview-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-04-19T10:09:23.921Z","updateTime":"2019-01-12T13:15:24.324Z"},{"name":"real-time-statistics","title":"实时数据统计展示","description":"","homepage":"https://unpkg.com/@icedesign/real-time-statistics-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/RealTimeStatistics","source":{"type":"npm","npm":"@icedesign/real-time-statistics-block","version":"0.1.7","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/real-time-statistics-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/real-time-statistics-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-31T09:37:32.634Z","updateTime":"2019-01-12T13:15:30.240Z"},{"name":"real-time-trade-chart","title":"实时交易图","description":"","homepage":"https://unpkg.com/@icedesign/real-time-trade-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/RealTimeTradeChart","source":{"type":"npm","npm":"@icedesign/real-time-trade-chart-block","version":"0.1.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","echarts":"^4.0.4","echarts-for-react":"^2.0.8","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/real-time-trade-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/real-time-trade-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-04-19T10:07:37.504Z","updateTime":"2019-01-12T13:15:39.852Z"},{"name":"register","title":"注册页","description":"","homepage":"https://unpkg.com/@icedesign/register-block/build/index.html","categories":["注册页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Register","source":{"type":"npm","npm":"@icedesign/register-block","version":"1.0.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/register-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/register-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Message"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Form"}]},"publishTime":"2018-05-10T14:32:46.246Z","updateTime":"2019-01-12T13:15:47.179Z"},{"name":"register-form","title":"注册表单","description":"注册表单","homepage":"https://unpkg.com/@icedesign/register-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/RegisterForm","source":{"type":"npm","npm":"@icedesign/register-form-block","version":"0.1.13","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/register-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/register-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Form"}]},"publishTime":"2018-01-02T08:08:07.109Z","updateTime":"2019-02-28T05:04:12.235Z"},{"name":"release-intro","title":"软件发布介绍页","description":"根据平台信息，展示对应软件下载，以及软件介绍等。","homepage":"https://unpkg.com/@icedesign/release-intro-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ReleaseIntro","source":{"type":"npm","npm":"@icedesign/release-intro-block","version":"1.0.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/release-intro-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/release-intro-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Menu"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Message"},{"basePackage":"@alifd/next","className":"SplitButton"}]},"publishTime":"2018-05-04T15:14:49.307Z","updateTime":"2019-01-12T13:16:14.742Z"},{"name":"review-data-chart","title":"邀评数据图表","description":"邀评数据图表","homepage":"https://unpkg.com/@icedesign/review-data-chart-block/build/index.html","categories":["图表","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ReviewDataChart","source":{"type":"npm","npm":"@icedesign/review-data-chart-block","version":"1.0.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"0.8.9","@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/review-data-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/review-data-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-05-17T13:44:33.150Z","updateTime":"2019-01-12T13:16:27.791Z"},{"name":"review-detail-info","title":"评论详细信息","description":"评论详细信息","homepage":"https://unpkg.com/@icedesign/review-detail-info-block/build/index.html","categories":["数据展示","信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ReviewDetailInfo","source":{"type":"npm","npm":"@icedesign/review-detail-info-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/review-detail-info-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/review-detail-info-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Progress"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-05-17T13:44:33.119Z","updateTime":"2019-01-12T13:16:40.558Z"},{"name":"review-overview","title":"评价数据概览","description":"评价数据概览","homepage":"https://unpkg.com/@icedesign/review-overview-block/build/index.html","categories":["数据展示","信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ReviewOverview","source":{"type":"npm","npm":"@icedesign/review-overview-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/review-overview-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/review-overview-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Rating"}]},"publishTime":"2018-05-17T13:44:33.164Z","updateTime":"2019-01-12T13:16:53.672Z"},{"name":"review-request-table","title":"评价邀请表格","description":"评价邀请表格","homepage":"https://unpkg.com/@icedesign/review-request-table-block/build/index.html","categories":["表格","信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ReviewRequestTable","source":{"type":"npm","npm":"@icedesign/review-request-table-block","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/review-request-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/review-request-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"}]},"publishTime":"2018-05-17T13:44:33.284Z","updateTime":"2019-01-12T13:17:00.734Z"},{"name":"rich-editor","title":"富文本编辑器","description":"简单的富文本编辑器","homepage":"https://unpkg.com/@icedesign/rich-editor-block/build/index.html","categories":["富文本编辑器"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/RichEditor","source":{"type":"npm","npm":"@icedesign/rich-editor-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","immutable":"^3.8.2","is-hotkey":"^0.1.1","prop-types":"^15.5.8","slate":"^0.32.1","slate-react":"^0.11.1","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/rich-editor-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/rich-editor-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-30T14:33:11.845Z","updateTime":"2019-01-12T13:17:10.513Z"},{"name":"right-content-display","title":"功能描述-左图右文","description":"","homepage":"https://unpkg.com/@icedesign/right-content-display-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/RightContentDisplay","source":{"type":"npm","npm":"@icedesign/right-content-display-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/right-content-display-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/right-content-display-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-01-02T08:12:06.829Z","updateTime":"2019-01-12T13:17:23.625Z"},{"name":"sales-chart","title":"销售数据图表","description":"销售数据图表","homepage":"https://unpkg.com/@icedesign/sales-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SalesChart","source":{"type":"npm","npm":"@icedesign/sales-chart-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"bizcharts":"^3.1.8"},"screenshot":"https://unpkg.com/@icedesign/sales-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/sales-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-06-15T01:41:56.822Z","updateTime":"2019-01-12T13:17:31.865Z"},{"name":"sales-stat-chart","title":"销售数据图表","description":"显示销售数据或者类似形式数据的图表模块","homepage":"https://unpkg.com/@icedesign/sales-stat-chart-block/build/index.html","categories":["图表","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SalesStatChart","source":{"type":"npm","npm":"@icedesign/sales-stat-chart-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/sales-stat-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/sales-stat-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-03-02T06:30:54.290Z","updateTime":"2019-01-12T13:17:46.798Z"},{"name":"score-overview","title":"评分概要","description":"适用于评分类的概要展示场景","homepage":"https://unpkg.com/@icedesign/score-overview-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ScoreOverview","source":{"type":"npm","npm":"@icedesign/score-overview-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/score-overview-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/score-overview-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-09-13T12:29:41.853Z","updateTime":"2019-01-12T13:17:53.916Z"},{"name":"scroll-list","title":"滚动分页列表","description":"滚动分页列表","homepage":"https://unpkg.com/@icedesign/scroll-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ScrollList","source":{"type":"npm","npm":"@icedesign/scroll-list-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react":"^16.2.0","react-list":"^0.8.10","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/scroll-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/scroll-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Loading"}]},"publishTime":"2018-12-13T09:26:54.265Z","updateTime":"2019-01-12T13:18:00.728Z"},{"name":"search-table","title":"表格","description":"适用于搜索过滤的表格组合场景","homepage":"https://unpkg.com/@icedesign/search-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SearchTable","source":{"type":"npm","npm":"@icedesign/search-table-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/search-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/search-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"DatePicker"}]},"publishTime":"2018-09-06T16:45:52.191Z","updateTime":"2019-02-28T05:02:42.293Z"},{"name":"selectable-table","title":"可批量操作的表格","description":"可批量操作的表格","homepage":"https://unpkg.com/@icedesign/selectable-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SelectableTable","source":{"type":"npm","npm":"@icedesign/selectable-table-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/selectable-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/selectable-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Pagination"}]},"publishTime":"2018-01-02T08:13:04.978Z","updateTime":"2019-01-12T13:18:36.809Z"},{"name":"service-card","title":"卡片","description":"适用于展示服务类型的卡片","homepage":"https://unpkg.com/@icedesign/service-card-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ServiceCard","source":{"type":"npm","npm":"@icedesign/service-card-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/service-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/service-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-10-11T13:06:14.896Z","updateTime":"2019-01-12T13:18:43.378Z"},{"name":"settings-form","title":"通用的基本设置表单","description":"","homepage":"https://unpkg.com/@icedesign/settings-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SettingsForm","source":{"type":"npm","npm":"@icedesign/settings-form-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/settings-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/settings-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Radio"},{"basePackage":"@alifd/next","className":"Switch"},{"basePackage":"@alifd/next","className":"Upload"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Form"}]},"publishTime":"2018-02-07T13:24:17.686Z","updateTime":"2019-02-28T05:06:14.073Z"},{"name":"signup-form","title":"登录表单","description":"登录表单","homepage":"https://unpkg.com/@icedesign/signup-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SignupForm","source":{"type":"npm","npm":"@icedesign/signup-form-block","version":"0.1.13","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/signup-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/signup-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Form"}]},"publishTime":"2018-01-04T09:57:45.160Z","updateTime":"2019-02-28T05:04:22.932Z"},{"name":"simple-banner","title":"简单横幅","description":"适用于介绍页的简单横幅","homepage":"https://unpkg.com/@icedesign/simple-banner-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleBanner","source":{"type":"npm","npm":"@icedesign/simple-banner-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/simple-banner-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-banner-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-09-20T15:30:55.491Z","updateTime":"2019-01-12T13:19:04.356Z"},{"name":"simple-fluency-form","title":"简单流畅型表单","description":"SimpleFluencyForm","homepage":"https://unpkg.com/@icedesign/simple-fluency-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleFluencyForm","source":{"type":"npm","npm":"@icedesign/simple-fluency-form-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/simple-fluency-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-fluency-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Step"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Form"}]},"publishTime":"2018-01-02T08:14:26.855Z","updateTime":"2019-02-28T05:08:18.266Z"},{"name":"simple-footer","title":"简单页脚","description":"LOGO和导航组合的页脚","homepage":"https://unpkg.com/@icedesign/simple-footer-block/build/index.html","categories":["页脚"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleFooter","source":{"type":"npm","npm":"@icedesign/simple-footer-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/simple-footer-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-footer-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-05-04T17:04:47.388Z","updateTime":"2019-01-12T13:19:18.489Z"},{"name":"simple-form-dialog","title":"简单表单弹窗","description":"简单的表单弹窗","homepage":"https://unpkg.com/@icedesign/simple-form-dialog-block/build/index.html","categories":["模态框"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleFormDialog","source":{"type":"npm","npm":"@icedesign/simple-form-dialog-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","enquire-js":"^0.1.2","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/simple-form-dialog-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-form-dialog-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Dialog"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Radio"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-01-02T08:14:11.753Z","updateTime":"2019-02-28T05:04:14.888Z"},{"name":"simple-slider","title":"图片轮播","description":"","homepage":"https://unpkg.com/@icedesign/simple-slider-block/build/index.html","categories":["数据展示","信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleSlider","source":{"type":"npm","npm":"@icedesign/simple-slider-block","version":"0.1.9","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/simple-slider-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-slider-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Slider"}]},"publishTime":"2018-03-13T16:33:27.971Z","updateTime":"2019-01-12T13:19:36.800Z"},{"name":"simple-step","title":"步骤条","description":"","homepage":"https://unpkg.com/@icedesign/simple-step-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleStep","source":{"type":"npm","npm":"@icedesign/simple-step-block","version":"0.1.7","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/simple-step-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-step-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Step"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-03-13T16:33:06.584Z","updateTime":"2019-01-12T13:19:43.667Z"},{"name":"simple-table","title":"基础表格","description":"基础的表格","homepage":"https://unpkg.com/@icedesign/simple-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleTable","source":{"type":"npm","npm":"@icedesign/simple-table-block","version":"0.1.16","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/data-binder":"^1.x","@icedesign/img":"^0.1.1","@icedesign/label":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/simple-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@icedesign/img","className":"Img"},{"basePackage":"@icedesign/label","className":"Label"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"}]},"publishTime":"2017-12-27T13:37:05.492Z","updateTime":"2019-01-12T13:19:57.237Z"},{"name":"simple-testimonial","title":"简单的客户评价","description":"","homepage":"https://unpkg.com/@icedesign/simple-testimonial-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleTestimonial","source":{"type":"npm","npm":"@icedesign/simple-testimonial-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/simple-testimonial-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-testimonial-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-02T08:16:46.878Z","updateTime":"2019-01-12T13:20:03.283Z"},{"name":"simple-timeline","title":"时间轴","description":"","homepage":"https://unpkg.com/@icedesign/simple-timeline-block/build/index.html","categories":["数据展示","信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleTimeline","source":{"type":"npm","npm":"@icedesign/simple-timeline-block","version":"0.1.7","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/simple-timeline-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-timeline-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Timeline"}]},"publishTime":"2018-03-13T16:33:16.856Z","updateTime":"2019-01-12T13:20:09.987Z"},{"name":"simple-transfer","title":"穿梭框","description":"简单的穿梭框面板展示","homepage":"https://unpkg.com/@icedesign/simple-transfer-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleTransfer","source":{"type":"npm","npm":"@icedesign/simple-transfer-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/simple-transfer-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-transfer-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Transfer"}]},"publishTime":"2018-12-13T09:33:42.114Z","updateTime":"2019-01-12T13:20:17.101Z"},{"name":"simple-video-player","title":"简单视频播放器","description":"简单的视频播放器","homepage":"https://unpkg.com/@icedesign/simple-video-player-block/build/index.html","categories":["视频"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SimpleVideoPlayer","source":{"type":"npm","npm":"@icedesign/simple-video-player-block","version":"0.1.6","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","enquire-js":"^0.1.3","prop-types":"^15.5.8","video.js":"^6.7.3","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/simple-video-player-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/simple-video-player-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@icedesign/img","className":"Img"}]},"publishTime":"2018-03-22T15:13:35.676Z","updateTime":"2019-01-12T13:20:33.367Z"},{"name":"slide-banner","title":"滑动Banner","description":"滑动banner 用于层叠展示","homepage":"https://unpkg.com/@icedesign/slide-banner-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SlideBanner","source":{"type":"npm","npm":"@icedesign/slide-banner-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"react":"^16.2.0","prop-types":"^15.5.8"},"screenshot":"https://unpkg.com/@icedesign/slide-banner-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/slide-banner-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-12-13T09:33:57.746Z","updateTime":"2019-01-12T13:21:56.982Z"},{"name":"sortable-table","title":"可排序表格","description":"","homepage":"https://unpkg.com/@icedesign/sortable-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SortableTable","source":{"type":"npm","npm":"@icedesign/sortable-table-block","version":"0.1.7","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/sortable-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/sortable-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-01-02T08:16:48.445Z","updateTime":"2019-01-12T13:22:12.306Z"},{"name":"sort-card-list","title":"拖拽排序卡片列表","description":"拖拽排序卡片列表","homepage":"https://unpkg.com/@icedesign/sort-card-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SortCardList","source":{"type":"npm","npm":"@icedesign/sort-card-list-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/sort-card-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/sort-card-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-05T12:12:05.679Z","updateTime":"2019-01-12T13:22:03.755Z"},{"name":"speakers","title":"演讲人员列表","description":"适用于演讲人员列表的信息展示","homepage":"https://unpkg.com/@icedesign/speakers-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Speakers","source":{"type":"npm","npm":"@icedesign/speakers-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/speakers-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/speakers-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-08-30T15:36:43.209Z","updateTime":"2019-01-12T13:22:28.858Z"},{"name":"stacked-bar-chart","title":"堆叠条形图","description":"","homepage":"https://unpkg.com/@icedesign/stacked-bar-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/StackedBarChart","source":{"type":"npm","npm":"@icedesign/stacked-bar-chart-block","version":"0.1.5","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"0.8.9","@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/stacked-bar-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/stacked-bar-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-04-26T16:34:51.611Z","updateTime":"2019-01-12T13:22:42.187Z"},{"name":"statistical-card","title":"统计型卡片","description":"统计型卡片","homepage":"https://unpkg.com/@icedesign/statistical-card-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/StatisticalCard","source":{"type":"npm","npm":"@icedesign/statistical-card-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/statistical-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/statistical-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-05T12:12:23.482Z","updateTime":"2019-01-12T13:22:49.156Z"},{"name":"step-form","title":"步骤形表单","description":"","homepage":"https://unpkg.com/@icedesign/step-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/StepForm","source":{"type":"npm","npm":"@icedesign/step-form-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/step-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/step-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Step"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Select"}]},"publishTime":"2018-03-29T12:47:20.188Z","updateTime":"2019-02-28T05:08:16.538Z"},{"name":"subscribe","title":"订阅","description":"订阅","homepage":"https://unpkg.com/@icedesign/subscribe-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Subscribe","source":{"type":"npm","npm":"@icedesign/subscribe-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/subscribe-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/subscribe-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-05T12:11:46.759Z","updateTime":"2019-02-28T05:06:40.609Z"},{"name":"success-detail","title":"成功详情信息展示","description":"成功详情信息展示","homepage":"https://unpkg.com/@icedesign/success-detail-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SuccessDetail","source":{"type":"npm","npm":"@icedesign/success-detail-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/success-detail-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/success-detail-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Step"}]},"publishTime":"2018-01-05T12:13:07.695Z","updateTime":"2019-01-12T13:23:16.478Z"},{"name":"success-dialog","title":"成功提示框","description":"提示框-成功","homepage":"https://unpkg.com/@icedesign/success-dialog-block/build/index.html","categories":["模态框"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SuccessDialog","source":{"type":"npm","npm":"@icedesign/success-dialog-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/success-dialog-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/success-dialog-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Dialog"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-01-04T09:48:29.421Z","updateTime":"2019-01-12T13:23:25.046Z"},{"name":"system-notice-list","title":"系统消息列表","description":"系统消息列表","homepage":"https://unpkg.com/@icedesign/system-notice-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/SystemNoticeList","source":{"type":"npm","npm":"@icedesign/system-notice-list-block","version":"0.1.15","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/system-notice-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/system-notice-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Pagination"}]},"publishTime":"2018-01-05T12:12:49.077Z","updateTime":"2019-01-12T13:23:32.700Z"},{"name":"tab-article","title":"tab和文章列表组合","description":"tab和文章列表组合","homepage":"https://unpkg.com/@icedesign/tab-article-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TabArticle","source":{"type":"npm","npm":"@icedesign/tab-article-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/tab-article-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/tab-article-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-01-05T12:13:25.278Z","updateTime":"2019-01-12T13:23:45.433Z"},{"name":"tab-chart","title":"标签页图表组合","description":"标签页和图表组合使用","homepage":"https://unpkg.com/@icedesign/tab-chart-block/build/index.html","categories":["图表","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TabChart","source":{"type":"npm","npm":"@icedesign/tab-chart-block","version":"0.1.13","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"0.8.9","@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/tab-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/tab-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Tab"}]},"publishTime":"2018-01-16T14:14:54.914Z","updateTime":"2019-01-12T13:23:58.982Z"},{"name":"tab-dialog","title":"标签内容弹窗","description":"标签内容弹窗","homepage":"https://unpkg.com/@icedesign/tab-dialog-block/build/index.html","categories":["模态框"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TabDialog","source":{"type":"npm","npm":"@icedesign/tab-dialog-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/tab-dialog-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/tab-dialog-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Dialog"},{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-01-05T12:14:01.852Z","updateTime":"2019-01-12T13:24:07.745Z"},{"name":"tab-filter-table","title":"标签页表格展示","description":"适用于标签页和表格组合的展示","homepage":"https://unpkg.com/@icedesign/tab-filter-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TabFilterTable","source":{"type":"npm","npm":"@icedesign/tab-filter-table-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/tab-filter-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/tab-filter-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"DatePicker"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Checkbox"}]},"publishTime":"2018-09-06T16:45:52.249Z","updateTime":"2019-01-12T13:24:15.266Z"},{"name":"table-chart-card","title":"表格图表组合卡片","description":"适用于图表和表格组合的展示场景","homepage":"https://unpkg.com/@icedesign/table-chart-card-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TableChartCard","source":{"type":"npm","npm":"@icedesign/table-chart-card-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"^0.9.5","@icedesign/container":"^1.x","bizcharts":"^3.2.2","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/table-chart-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/table-chart-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Table"}]},"publishTime":"2018-09-13T12:29:41.630Z","updateTime":"2019-01-12T13:24:40.773Z"},{"name":"table-context-menu","title":"表格","description":"表格单元格支持右键菜单配置操作，可自定义风格","homepage":"https://unpkg.com/@icedesign/table-context-menu-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TableContextMenu","source":{"type":"npm","npm":"@icedesign/table-context-menu-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","react-contextmenu":"^2.9.3","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/table-context-menu-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/table-context-menu-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"}]},"publishTime":"2018-08-02T12:06:47.650Z","updateTime":"2019-01-12T13:24:48.025Z"},{"name":"table-filter","title":"筛选表格","description":"筛选和表格组合","homepage":"https://unpkg.com/@icedesign/table-filter-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TableFilter","source":{"type":"npm","npm":"@icedesign/table-filter-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/table-filter-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/table-filter-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Balloon"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"DatePicker"},{"basePackage":"@alifd/next","className":"Select"}]},"publishTime":"2018-06-21T12:25:40.360Z","updateTime":"2019-01-12T13:24:54.716Z"},{"name":"tab-table","title":"标签页表格组合","description":"","homepage":"https://unpkg.com/@icedesign/tab-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TabTable","source":{"type":"npm","npm":"@icedesign/tab-table-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","axios":"^0.17.1","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/tab-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/tab-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Tab"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Dialog"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Form"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Field"},{"basePackage":"@alifd/next","className":"Balloon"}]},"publishTime":"2018-02-01T14:36:06.924Z","updateTime":"2019-01-12T13:24:22.174Z"},{"name":"tag-message-list","title":"标签消息列表","description":"标签消息列表","homepage":"https://unpkg.com/@icedesign/tag-message-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TagMessageList","source":{"type":"npm","npm":"@icedesign/tag-message-list-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/tag-message-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/tag-message-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Tab"}]},"publishTime":"2018-01-05T12:13:46.631Z","updateTime":"2019-01-12T13:25:01.449Z"},{"name":"tag-table","title":"标签表格组合","description":"标签表格组合","homepage":"https://unpkg.com/@icedesign/tag-table-block/build/index.html","categories":["表格","筛选","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TagTable","source":{"type":"npm","npm":"@icedesign/tag-table-block","version":"0.1.18","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/tag-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/tag-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/form-binder","className":"FormBinder"},{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Select"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-02-01T14:35:04.440Z","updateTime":"2019-02-28T05:08:11.280Z"},{"name":"team-display","title":"团队展示","description":"","homepage":"https://unpkg.com/@icedesign/team-display-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TeamDisplay","source":{"type":"npm","npm":"@icedesign/team-display-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/team-display-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/team-display-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-05T12:14:45.761Z","updateTime":"2019-01-12T13:25:30.168Z"},{"name":"terms-info","title":"协议信息展示","description":"协议信息展示","homepage":"https://unpkg.com/@icedesign/terms-info-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TermsInfo","source":{"type":"npm","npm":"@icedesign/terms-info-block","version":"0.1.12","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/terms-info-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/terms-info-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2018-01-05T12:14:16.816Z","updateTime":"2019-01-12T13:25:42.739Z"},{"name":"testimonial","title":"客户评价展示","description":"","homepage":"https://unpkg.com/@icedesign/testimonial-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Testimonial","source":{"type":"npm","npm":"@icedesign/testimonial-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/testimonial-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/testimonial-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2017-12-29T07:50:10.995Z","updateTime":"2019-01-12T13:25:51.780Z"},{"name":"testimonial-card","title":"客户评论卡片","description":"","homepage":"https://unpkg.com/@icedesign/testimonial-card-block/build/index.html","categories":["信息展示","欢迎页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TestimonialCard","source":{"type":"npm","npm":"@icedesign/testimonial-card-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","classnames":"^2.2.5","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/testimonial-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/testimonial-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-05T12:20:24.624Z","updateTime":"2019-01-12T13:26:11.316Z"},{"name":"text-card","title":"纯文字展示型卡片","description":"纯文字展示型卡片","homepage":"https://unpkg.com/@icedesign/text-card-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TextCard","source":{"type":"npm","npm":"@icedesign/text-card-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/text-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/text-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-01-05T12:15:06.986Z","updateTime":"2019-01-12T13:26:25.830Z"},{"name":"text-search-list","title":"文字搜索列表","description":"文字搜索列表","homepage":"https://unpkg.com/@icedesign/text-search-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TextSearchList","source":{"type":"npm","npm":"@icedesign/text-search-list-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/text-search-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/text-search-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Search"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Button"}]},"publishTime":"2017-12-27T13:41:29.209Z","updateTime":"2019-01-12T13:26:39.215Z"},{"name":"tickets","title":"票价列表","description":"适用于票价类的信息展示","homepage":"https://unpkg.com/@icedesign/tickets-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Tickets","source":{"type":"npm","npm":"@icedesign/tickets-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","rc-queue-anim":"^1.6.5","rc-scroll-anim":"^2.5.5","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/tickets-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/tickets-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-08-30T15:36:43.320Z","updateTime":"2019-01-12T13:26:49.547Z"},{"name":"time-filter-table","title":"时间筛选表格","description":"支持时间筛选的表格","homepage":"https://unpkg.com/@icedesign/time-filter-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TimeFilterTable","source":{"type":"npm","npm":"@icedesign/time-filter-table-block","version":"0.1.15","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/data-binder":"^1.x","@icedesign/label":"^1.x","enquire-js":"^0.1.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/time-filter-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/time-filter-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@alifd/next","className":"Radio"},{"basePackage":"@alifd/next","className":"Search"}]},"publishTime":"2018-01-04T10:37:08.641Z","updateTime":"2019-01-12T13:27:10.626Z"},{"name":"todo-list","title":"任务列表","description":"任务列表","homepage":"https://unpkg.com/@icedesign/todo-list-block/build/index.html","categories":["数据展示","信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TodoList","source":{"type":"npm","npm":"@icedesign/todo-list-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/todo-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/todo-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-06-11T03:45:54.597Z","updateTime":"2019-01-12T13:27:19.714Z"},{"name":"top-active-chart","title":"活跃排行图表","description":"","homepage":"https://unpkg.com/@icedesign/top-active-chart-block/build/index.html","categories":["数据展示","图表","表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TopActiveChart","source":{"type":"npm","npm":"@icedesign/top-active-chart-block","version":"0.1.6","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"3.1.3","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/top-active-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/top-active-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Progress"}]},"publishTime":"2018-03-03T06:18:48.109Z","updateTime":"2019-01-12T13:27:31.206Z"},{"name":"topic-card","title":"核心数据","description":"核心数据","homepage":"https://unpkg.com/@icedesign/topic-card-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TopicCard","source":{"type":"npm","npm":"@icedesign/topic-card-block","version":"0.1.11","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/topic-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/topic-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-01-04T09:58:09.382Z","updateTime":"2019-01-12T13:27:43.666Z"},{"name":"tree-card-list","title":"树形卡片列表","description":"树形卡片列表","homepage":"https://unpkg.com/@icedesign/tree-card-list-block/build/index.html","categories":["列表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TreeCardList","source":{"type":"npm","npm":"@icedesign/tree-card-list-block","version":"0.1.10","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/tree-card-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/tree-card-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Select"}]},"publishTime":"2018-01-04T10:06:13.857Z","updateTime":"2019-01-12T13:27:51.740Z"},{"name":"tree-table","title":"树状表格","description":"tree和选择混合表格","homepage":"https://unpkg.com/@icedesign/tree-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TreeTable","source":{"type":"npm","npm":"@icedesign/tree-table-block","version":"1.0.1","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/tree-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/tree-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Pagination"}]},"publishTime":"2018-12-13T10:07:25.847Z","updateTime":"2019-01-12T13:27:58.657Z"},{"name":"trend-chart","title":"趋势图","description":"适合展示趋势的场景图表","homepage":"https://unpkg.com/@icedesign/trend-chart-block/build/index.html","categories":["图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/TrendChart","source":{"type":"npm","npm":"@icedesign/trend-chart-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"^3.2.2","prop-types":"^15.5.8","react":"^16.2.0","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/trend-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/trend-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-09-13T12:29:41.854Z","updateTime":"2019-01-12T13:28:13.265Z"},{"name":"user-data","title":"用户信息卡片展示","description":"用户信息卡片展示","homepage":"https://unpkg.com/@icedesign/user-data-block/build/index.html","categories":["数据展示","信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/UserData","source":{"type":"npm","npm":"@icedesign/user-data-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/user-data-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/user-data-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-06-15T01:41:56.861Z","updateTime":"2019-01-12T13:28:20.055Z"},{"name":"user-form","title":"新增用户表单","description":"","homepage":"https://unpkg.com/@icedesign/user-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/UserForm","source":{"type":"npm","npm":"@icedesign/user-form-block","version":"0.1.6","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/user-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/user-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Select"}]},"publishTime":"2018-02-07T13:24:25.834Z","updateTime":"2019-02-28T05:06:21.083Z"},{"name":"user-info-card","title":"用户信息展示","description":"","homepage":"https://unpkg.com/@icedesign/user-info-card-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/UserInfoCard","source":{"type":"npm","npm":"@icedesign/user-info-card-block","version":"0.1.8","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/user-info-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/user-info-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Balloon"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-01-16T14:15:12.645Z","updateTime":"2019-01-12T13:28:42.950Z"},{"name":"user-landing","title":"用户欢迎信息","description":"展示用户相关信息、等级等","homepage":"https://unpkg.com/@icedesign/user-landing-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/UserLanding","source":{"type":"npm","npm":"@icedesign/user-landing-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/img":"^0.1.2","prop-types":"^15.5.8","react":"^16.2.0"},"screenshot":"https://unpkg.com/@icedesign/user-landing-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/user-landing-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@icedesign/img","className":"Img"}]},"publishTime":"2018-12-13T10:07:26.509Z","updateTime":"2019-01-12T13:28:52.677Z"},{"name":"user-login","title":"登录页","description":"","homepage":"https://unpkg.com/@icedesign/user-login-block/build/index.html","categories":["登录页"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/UserLogin","source":{"type":"npm","npm":"@icedesign/user-login-block","version":"0.1.9","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/user-login-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/user-login-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Checkbox"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Message"},{"basePackage":"@alifd/next","className":"Icon"}]},"publishTime":"2018-02-07T13:24:27.528Z","updateTime":"2019-02-28T05:06:39.425Z"},{"name":"user-profile-card","title":"用户信息卡片","description":"用于展示用户详细信息的卡片","homepage":"https://unpkg.com/@icedesign/user-profile-card-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/UserProfileCard","source":{"type":"npm","npm":"@icedesign/user-profile-card-block","version":"1.0.0","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/img":"^0.1.2","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/user-profile-card-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/user-profile-card-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/img","className":"Img"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-12-13T10:07:26.049Z","updateTime":"2019-01-12T13:29:35.918Z"},{"name":"user-stat-chart","title":"用户统计数据图表","description":"用户统计数据或类似形式的图表","homepage":"https://unpkg.com/@icedesign/user-stat-chart-block/build/index.html","categories":["图表","数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/UserStatChart","source":{"type":"npm","npm":"@icedesign/user-stat-chart-block","version":"0.1.7","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/user-stat-chart-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/user-stat-chart-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-03-02T06:30:39.241Z","updateTime":"2019-01-12T13:29:56.247Z"},{"name":"user-table","title":"表格","description":"可筛选过滤的用户类表格","homepage":"https://unpkg.com/@icedesign/user-table-block/build/index.html","categories":["表格"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/UserTable","source":{"type":"npm","npm":"@icedesign/user-table-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/user-table-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/user-table-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Table"},{"basePackage":"@alifd/next","className":"Switch"},{"basePackage":"@alifd/next","className":"Icon"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Grid"},{"basePackage":"@alifd/next","className":"Pagination"},{"basePackage":"@icedesign/form-binder","className":"FormBinder"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Select"}]},"publishTime":"2018-06-21T12:25:40.106Z","updateTime":"2019-02-28T05:08:13.691Z"},{"name":"user-traffic-stastistics","title":"用户浏览数据分析","description":"信息展示类，使用可视化的方式展示用户浏览以及数据分析的结果","homepage":"https://unpkg.com/@icedesign/user-traffic-stastistics/build/index.html","categories":["数据展示","图表"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/UserTrafficStastistics","source":{"type":"npm","npm":"@icedesign/user-traffic-stastistics","version":"0.1.6","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@antv/data-set":"0.8.9","@icedesign/container":"^1.x","bizcharts":"3.2.2","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/user-traffic-stastistics/screenshot.png","screenshots":["https://unpkg.com/@icedesign/user-traffic-stastistics/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-03-02T11:57:32.964Z","updateTime":"2019-01-12T13:30:46.081Z"},{"name":"validate-form","title":"验证表单","description":"适用于简单的验证型表单","homepage":"https://unpkg.com/@icedesign/validate-form-block/build/index.html","categories":["表单"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/ValidateForm","source":{"type":"npm","npm":"@icedesign/validate-form-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.1","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/validate-form-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/validate-form-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"},{"basePackage":"@alifd/next","className":"Input"},{"basePackage":"@alifd/next","className":"Button"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-09-06T16:45:52.237Z","updateTime":"2019-02-28T05:06:25.544Z"},{"name":"video-list","title":"视频列表","description":"","homepage":"https://unpkg.com/@icedesign/video-list-block/build/index.html","categories":["数据展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/VideoList","source":{"type":"npm","npm":"@icedesign/video-list-block","version":"0.1.4","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","prop-types":"^15.5.8","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/video-list-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/video-list-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@alifd/next","className":"Dialog"},{"basePackage":"@alifd/next","className":"Grid"}]},"publishTime":"2018-04-19T10:08:14.543Z","updateTime":"2019-01-12T13:30:59.836Z"},{"name":"waterfall","title":"瀑布流","description":"自适应网格布局，可实现瀑布流效果","homepage":"https://unpkg.com/@icedesign/waterfall-block/build/index.html","categories":["瀑布流"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Waterfall","source":{"type":"npm","npm":"@icedesign/waterfall-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","autoresponsive-react":"^1.1.31","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/waterfall-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/waterfall-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-07-19T06:56:41.354Z","updateTime":"2019-01-12T13:32:35.012Z"},{"name":"workshop","title":"工作坊","description":"适用于全屏的信息展示","homepage":"https://unpkg.com/@icedesign/workshop-block/build/index.html","categories":["信息展示"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/Workshop","source":{"type":"npm","npm":"@icedesign/workshop-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"prop-types":"^15.5.8","rc-queue-anim":"^1.6.5","rc-scroll-anim":"^2.5.5","react":"^16.2.0"},"screenshot":"https://unpkg.com/@icedesign/workshop-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/workshop-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-08-30T15:36:43.603Z","updateTime":"2019-01-12T13:32:53.853Z"},{"name":"wysiwyg-editor","title":"Wysiwyg 富文本编辑器","description":"Wysiwyg 富文本编辑器，基于 ReactJS和 DraftJS 库构建的所见即所得编辑器","homepage":"https://unpkg.com/@icedesign/wysiwyg-editor-block/build/index.html","categories":["富文本编辑器"],"repository":"https://github.com/ice-lab/react-materials/tree/master/blocks/WysiwygEditor","source":{"type":"npm","npm":"@icedesign/wysiwyg-editor-block","version":"1.0.3","registry":"http://registry.npmjs.com","version-0.x":"2.0.0","sourceCodeDirectory":"src/"},"dependencies":{"@icedesign/container":"^1.x","draft-js":"^0.10.5","react-draft-wysiwyg":"^1.12.13","@alifd/next":"^1.x"},"screenshot":"https://unpkg.com/@icedesign/wysiwyg-editor-block/screenshot.png","screenshots":["https://unpkg.com/@icedesign/wysiwyg-editor-block/screenshot.png"],"customConfig":null,"features":{"useComponents":[{"basePackage":"@icedesign/container","className":"Container"}]},"publishTime":"2018-07-12T15:06:49.883Z","updateTime":"2019-01-12T13:33:02.965Z"},{"name":"@bizcharts/area-range","title":"区间面积图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/area-range","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1bYWfxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:07:20.105Z","updateTime":"2018-10-18T11:44:04.798Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=area-range&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/area-basic","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/area-basic","version":"0.3.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1vngSxkyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:05:43.538Z","updateTime":"2018-10-18T11:44:13.126Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"基础面积图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=area-basic&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/area-percentage","title":"百分比堆叠面积图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/area-percentage","version":"0.2.4","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1VRS0xDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:06:35.652Z","updateTime":"2018-10-18T11:43:55.784Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=area-percentage&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/area-with-negative","title":"基础面积图（有负值）","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/area-with-negative","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1oLsTxkyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:08:50.529Z","updateTime":"2018-10-18T11:45:55.574Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=area-with-negative&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-basic-column","title":"基础柱状图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-basic-column","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1SuJ1xv1TBuNjy0FjXXajyXXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:09:34.870Z","updateTime":"2018-10-18T11:44:53.304Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-basic-column&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-column-range","title":"区间柱状图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-column-range","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1m4S1xDtYBeNjy1XdXXXXyVXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:11:04.368Z","updateTime":"2018-10-18T11:44:41.579Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-column-range&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-basic","title":"基础条形图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-basic","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Kj.HxbGYBuNjy0FoXXciBFXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:10:23.185Z","updateTime":"2018-10-18T11:44:31.849Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-basic&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/area-stacked","title":"堆叠面积图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/area-stacked","version":"0.2.4","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1McITxeSSBuNjy0FlXXbBpVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:08:04.652Z","updateTime":"2018-10-18T11:44:21.839Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=area-stacked&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-grouped","title":"分组条形图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-grouped","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1g6W1xDtYBeNjy1XdXXXXyVXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:11:49.120Z","updateTime":"2018-10-18T11:45:02.160Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-grouped&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-grouped-column","title":"分组柱状图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-grouped-column","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1kEITxeSSBuNjy0FlXXbBpVXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:12:34.384Z","updateTime":"2018-10-18T11:45:10.911Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-grouped-column&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-histogram","title":"直方图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-histogram","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1csugxqmWBuNjy1XaXXXCbXXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:13:22.208Z","updateTime":"2018-10-18T11:45:28.862Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-histogram&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-histogram-binwidth","title":"直方图范围刻度","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-histogram-binwidth","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1cWi2xDtYBeNjy1XdXXXXyVXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:14:05.830Z","updateTime":"2018-10-18T11:45:46.834Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-histogram-binwidth&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-ranged","title":"区间条形图","description":"Range Bar Chart，区间条形图，通过绘制每个数据点的两个 Y 值来显示数据范围。使用的每个 Y 值被绘制为条形柱的上限和下限。有时将范围图表称为“浮动”条形图。","source":{"type":"npm","npm":"@bizcharts/bar-ranged","version":"0.0.9","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB16eDIJkyWBuNjy0FpXXassXXa-1608-848.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T07:08:41.374Z","updateTime":"2018-10-18T11:46:07.115Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-ranged&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-stacked","title":"堆叠条形图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-stacked","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1V8qgxqmWBuNjy1XaXXXCbXXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:16:45.252Z","updateTime":"2018-10-18T11:51:54.738Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-stacked&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-stacked-column","title":"堆叠柱状图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-stacked-column","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1jRAUxeSSBuNjy0FlXXbBpVXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:17:37.483Z","updateTime":"2018-10-18T11:46:34.538Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-stacked-column&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-stacked-percentage-column","title":"百分比堆叠柱状图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-stacked-percentage-column","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1tVsJxbGYBuNjy0FoXXciBFXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:18:32.389Z","updateTime":"2018-10-18T11:46:16.610Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-stacked-percentage-column&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-waterfall","title":"瀑布图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-waterfall","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1FXUVxeSSBuNjy0FlXXbBpVXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:19:17.346Z","updateTime":"2018-10-18T11:46:25.214Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-waterfall&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/bizgoblin-area-basic","title":"基础面积图","description":"基础面积图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-area-basic","version":"0.1.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1PbM0JQ9WBuNjSspeXXaz5VXa-680-538.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-24T17:45:33.585Z","updateTime":"2018-10-18T11:46:57.337Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-area-basic&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-area-area-none","title":"区域图（存在空值）","description":"区域图（存在空值）","source":{"type":"npm","npm":"@bizcharts/bizgoblin-area-area-none","version":"0.1.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1i5EoJMmTBuNjy1XbXXaMrVXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-25T05:54:02.216Z","updateTime":"2018-10-18T11:46:43.073Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-area-area-none&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-area-with-negative","title":"带负值面积图","description":"带负值面积图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-area-with-negative","version":"0.1.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1PjhIXsXIxuRkSRUhXXc7hXXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-25T03:28:20.416Z","updateTime":"2018-10-18T11:47:15.571Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-area-with-negative&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-area-stacked","title":"层叠面积图","description":"层叠面积图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-area-stacked","version":"0.1.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1LSwIJKuSBuNjy1XcXXcYjFXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-24T17:55:37.201Z","updateTime":"2018-10-18T11:47:06.703Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-area-stacked&from=ice","dependencies":{"bizgoblin":"^0.0.1"}},{"name":"@bizcharts/bizgoblin-area-percent-stacked","title":"百分比层叠面积图","description":"百分比层叠面积图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-area-percent-stacked","version":"0.1.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1dcaVcO6guuRjy1XdXXaAwpXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-25T06:02:35.569Z","updateTime":"2018-10-18T11:46:48.142Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-area-percent-stacked&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bar-histogram-stacked","title":"层叠直方图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/bar-histogram-stacked","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1e2w9xeuSBuNjy1XcXXcYjFXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T13:14:50.798Z","updateTime":"2018-10-18T11:45:19.962Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=bar-histogram-stacked&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/bizgoblin-bar-cycle","title":"圆弧柱状图","description":"圆弧柱状图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-bar-cycle","version":"0.0.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1tWELJKuSBuNjy1XcXXcYjFXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-25T06:40:22.124Z","updateTime":"2018-10-18T11:47:52.014Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-bar-cycle&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-bar-dodge-column","title":"分组柱状图","description":"分组柱状图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-bar-dodge-column","version":"0.0.6","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Y3QLJKuSBuNjy1XcXXcYjFXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-24T17:02:09.170Z","updateTime":"2018-10-18T11:47:42.498Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-bar-dodge-column&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-bar-basic-column","title":"基础柱状图","description":"基础柱状图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-bar-basic-column","version":"0.0.8","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1NrqYcO6guuRjy1XdXXaAwpXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-24T16:49:29.019Z","updateTime":"2018-10-18T11:47:33.696Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-bar-basic-column&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-bar-stack-column","title":"层叠柱状图","description":"层叠柱状图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-bar-stack-column","version":"0.0.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1i8a0cO6guuRjy1XdXXaAwpXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-24T17:34:40.000Z","updateTime":"2018-10-18T11:48:22.904Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-bar-stack-column&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-bar-percent-stack-column","title":"百分比层叠柱状图","description":"百分比层叠柱状图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-bar-percent-stack-column","version":"0.0.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB16TQLJKuSBuNjy1XcXXcYjFXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-28T04:19:35.375Z","updateTime":"2018-10-18T11:48:00.650Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-bar-percent-stack-column&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-legend-marker","title":"自定义图例","description":"自定义图例","source":{"type":"npm","npm":"@bizcharts/bizgoblin-legend-marker","version":"0.0.6","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1.uS1cO6guuRjy1XdXXaAwpXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-25T07:20:54.368Z","updateTime":"2018-10-18T11:48:33.659Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-legend-marker&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-bar-basic-bar","title":"基础条形图","description":"基础条形图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-bar-basic-bar","version":"0.0.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1RkWWcO6guuRjy1XdXXaAwpXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-25T06:26:37.337Z","updateTime":"2018-10-18T11:47:24.076Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-bar-basic-bar&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-bar-range-column","title":"区间柱状图","description":"区间柱状图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-bar-range-column","version":"0.0.6","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1R5q0cO6guuRjy1XdXXaAwpXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-25T06:34:24.298Z","updateTime":"2018-10-18T11:48:14.032Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-bar-range-column&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-line-basic","title":"基础折线图","description":"基础折线图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-line-basic","version":"0.1.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1wr3OJKuSBuNjy1XcXXcYjFXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-25T06:48:51.440Z","updateTime":"2018-10-18T11:48:42.283Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-line-basic&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-line-series","title":"多折线图","description":"多折线图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-line-series","version":"0.1.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1n17mAKGSBuNjSspbXXciipXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-25T07:06:27.711Z","updateTime":"2018-10-18T11:48:50.312Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-line-series&from=ice","dependencies":{"bizgoblin":"^0.0.1"}},{"name":"@bizcharts/bizgoblin-pie-pie","title":"基础饼图","description":"基础饼图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-pie-pie","version":"0.1.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1T5VRXs4IxuRjHxuRXXb_jXXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-24T16:21:49.111Z","updateTime":"2018-10-18T11:49:07.027Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-pie-pie&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-pie-rose","title":"玫瑰图","description":"玫瑰图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-pie-rose","version":"0.0.8","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1LLi3cO6guuRjy1XdXXaAwpXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-24T16:33:06.435Z","updateTime":"2018-10-18T11:48:58.730Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-pie-rose&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-point-bubble","title":"气泡图","description":"气泡图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-point-bubble","version":"0.0.8","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1yTO3cO6guuRjy1XdXXaAwpXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-24T15:47:58.374Z","updateTime":"2018-10-18T11:49:15.204Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-point-bubble&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-point-scatter","title":"散点图","description":"散点图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-point-scatter","version":"0.0.8","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1H2jpJWmWBuNjy1XaXXXCbXXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-24T15:35:15.874Z","updateTime":"2018-10-18T11:49:23.896Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-point-scatter&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/bizgoblin-radar-line","title":"雷达图","description":"雷达图","source":{"type":"npm","npm":"@bizcharts/bizgoblin-radar-line","version":"0.0.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Z0iJcO6guuRjy1XdXXaAwpXa-680-520.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-06-24T16:03:16.114Z","updateTime":"2018-10-18T11:49:34.232Z","type":"react","author":"佐侑","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=bizgoblin-radar-line&from=ice","dependencies":{"bizgoblin":"^0.0.2"}},{"name":"@bizcharts/box-basic","title":"基础箱形图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/box-basic","version":"0.2.8","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1vyTqwVooBKNjSZFPXXXa2XXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:20:01.684Z","updateTime":"2018-10-18T11:49:42.347Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=box-basic&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/box-grouped","title":"分组箱形图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/box-grouped","version":"0.2.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1l0bZJeOSBuNjy0FdXXbDnVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:21:02.925Z","updateTime":"2018-10-18T11:49:50.424Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=box-grouped&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/box-one-dim","title":"一维箱形图","description":"一维箱形图","source":{"type":"npm","npm":"@bizcharts/box-one-dim","version":"0.0.9","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB13C23wGQoBKNjSZJnXXaw9VXa-1608-848.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T08:08:56.833Z","updateTime":"2018-10-18T11:50:02.388Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=box-one-dim&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/box-radial-box","title":"极坐标系下箱形图","description":"极坐标系下箱形图","source":{"type":"npm","npm":"@bizcharts/box-radial-box","version":"0.1.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB11a2rwQZmBKNjSZPiXXXFNVXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T08:29:33.381Z","updateTime":"2018-10-18T11:50:19.033Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=box-radial-box&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/candlestick-basic","title":"股票图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/candlestick-basic","version":"0.2.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1su7NxXOWBuNjy0FiXXXFxVXa-1608-1208.png","features":{"participle":{}},"publishTime":"2018-06-12T13:22:38.363Z","updateTime":"2018-10-18T11:50:36.916Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=candlestick-basic&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7","bizcharts-plugin-slider":"^2.0.3"}},{"name":"@bizcharts/box-with-error","title":"基础箱形图（有异常值）","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/box-with-error","version":"0.2.6","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1FQfqw5MnBKNjSZFzXXc_qVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:21:47.629Z","updateTime":"2018-10-18T11:50:11.073Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=box-with-error&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/candlestick-k-and-area","title":"股票图与范围区域图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/candlestick-k-and-area","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Mm9hxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:23:28.437Z","updateTime":"2018-10-18T11:50:27.437Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=candlestick-k-and-area&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/diagram-sunburst","title":"极坐标相邻关系图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/diagram-sunburst","version":"0.2.4","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1gxx4xv1TBuNjy0FjXXajyXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:28:35.347Z","updateTime":"2018-10-18T11:50:49.268Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=diagram-sunburst&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/facet-circle","title":"圆形分面","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/facet-circle","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1jVsYxeSSBuNjy0FlXXbBpVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:31:23.830Z","updateTime":"2018-10-18T11:51:14.569Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=facet-circle&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/facet-list","title":"list 分面","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/facet-list","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1xaT_xgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:33:45.114Z","updateTime":"2018-10-18T11:51:06.026Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=facet-list&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/facet-column","title":"列分面","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/facet-column","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1arEYxeSSBuNjy0FlXXbBpVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:32:13.332Z","updateTime":"2018-10-18T11:50:57.302Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=facet-column&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/facet-matrix","title":"矩阵分面","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/facet-matrix","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1blejxqmWBuNjy1XaXXXCbXXa-1608-1048.png","features":{"participle":{}},"publishTime":"2018-06-12T13:34:41.987Z","updateTime":"2018-10-18T11:51:26.656Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=facet-matrix&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/facet-mirror","title":"镜像分面","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/facet-mirror","version":"0.2.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1dljAJqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:35:48.106Z","updateTime":"2018-10-18T11:52:02.823Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=facet-mirror&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/facet-rect","title":"2维行列分面","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/facet-rect","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1IDZYxkyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:36:45.962Z","updateTime":"2018-10-18T11:51:35.290Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=facet-rect&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/facet-row","title":"行分面","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/facet-row","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1ZXh6xv1TBuNjy0FjXXajyXXa-1608-948.png","features":{"participle":{}},"publishTime":"2018-06-12T13:37:34.435Z","updateTime":"2018-10-18T11:53:43.896Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=facet-row&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/facet-tree-column","title":"多级 tree 分面","description":"多级 tree 分面","source":{"type":"npm","npm":"@bizcharts/facet-tree-column","version":"0.0.6","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1H85bJr9YBuNjy0FgXXcxcXXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T10:54:25.139Z","updateTime":"2018-10-18T11:52:21.141Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=facet-tree-column&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/facet-transpose","title":"镜像分面(转置)","description":"镜像分面(转置)","source":{"type":"npm","npm":"@bizcharts/facet-transpose","version":"0.0.6","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1FZZAJeuSBuNjy1XcXXcYjFXa-1608-1648.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T11:07:44.197Z","updateTime":"2018-10-18T11:51:44.708Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=facet-transpose&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/facet-tree","title":"tree 分面","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/facet-tree","version":"0.2.4","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1kKnAxr9YBuNjy0FgXXcxcXXa-1600-982.png","features":{"participle":{}},"publishTime":"2018-06-12T13:38:14.824Z","updateTime":"2018-10-18T11:52:12.344Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=facet-tree&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/funnel-basic","title":"基础漏斗图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/funnel-basic","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1_ewMxbGYBuNjy0FoXXciBFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:39:06.211Z","updateTime":"2018-10-18T11:52:58.055Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=funnel-basic&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/funnel-pyramid","title":"尖底漏斗图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/funnel-pyramid","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1ymxBxxGYBuNjy0FnXXX5lpXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:40:49.364Z","updateTime":"2018-10-18T11:52:49.686Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=funnel-pyramid&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/funnel-comparision","title":"对比漏斗图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/funnel-comparision","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1mElsxr9YBuNjy0FgXXcxcXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:39:51.623Z","updateTime":"2018-10-18T11:52:29.017Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=funnel-comparision&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/funnel-symmetric","title":"对称漏斗图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/funnel-symmetric","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Z0ttxr9YBuNjy0FgXXcxcXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:41:42.622Z","updateTime":"2018-10-18T11:52:38.319Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=funnel-symmetric&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-area-null","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-area-null","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1WVy7xDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:43:32.609Z","updateTime":"2018-10-18T11:53:16.294Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"区域图（存在空值）","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-area-null&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-area-large","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-area-large","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1rMulxqmWBuNjy1XaXXXCbXXa-1608-1208.png","features":{"participle":{}},"publishTime":"2018-06-12T13:44:32.720Z","updateTime":"2018-10-18T11:53:25.135Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"大规模区域图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-area-large&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7","bizcharts-plugin-slider":"^2.0.3"}},{"name":"@bizcharts/g2-area-rainfall","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-area-rainfall","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB12y9lxqmWBuNjy1XaXXXCbXXa-1608-1228.png","features":{"participle":{}},"publishTime":"2018-06-12T13:45:30.067Z","updateTime":"2018-10-18T11:53:35.061Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"雨量流量关系图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-area-rainfall&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7","bizcharts-plugin-slider":"^2.0.3"}},{"name":"@bizcharts/g2-area-range-line","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-area-range-line","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1f4w0xkyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:46:24.441Z","updateTime":"2018-10-18T11:53:52.755Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"范围区域图与线图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-area-range-line&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-bar-diverge","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-bar-diverge","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1qzu7xDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:47:12.367Z","updateTime":"2018-10-18T11:54:01.642Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"柱状图-diverging","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-bar-diverge&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-brush-ds-state","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-brush-ds-state","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB10mZNxbGYBuNjy0FoXXciBFXa-1608-1256.png","features":{"participle":{}},"publishTime":"2018-06-12T13:48:07.090Z","updateTime":"2018-10-18T11:54:43.180Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"g2-brush 结合 DataSet","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-brush-ds-state&from=ice","dependencies":{"@antv/data-set":"^0.8.9","@antv/g2-brush":"^0.0.2","bizcharts":"^3.1.7","jquery":"^3.3.1"}},{"name":"@bizcharts/g2-brush-filter-shape","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-brush-filter-shape","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1eD70xkyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:48:54.464Z","updateTime":"2018-10-18T11:54:09.871Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"g2-brush 过滤图形","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-brush-filter-shape&from=ice","dependencies":{"@antv/g2-brush":"^0.0.2","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-brush-interval","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-brush-interval","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1z4VDxxGYBuNjy0FnXXX5lpXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:50:48.476Z","updateTime":"2018-10-18T11:54:31.253Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"g2-brush 柱状图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-brush-interval&from=ice","dependencies":{"@antv/data-set":"^0.8.9","@antv/g2-brush":"^0.0.2","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-brush-highlight","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-brush-highlight","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1PfhDxxGYBuNjy0FnXXX5lpXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:49:52.936Z","updateTime":"2018-10-18T11:54:18.117Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"g2-brush 高亮图形","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-brush-highlight&from=ice","dependencies":{"@antv/g2-brush":"^0.0.2","bizcharts":"^3.1.7","jquery":"^3.3.1"}},{"name":"@bizcharts/g2-brush-polygon","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-brush-polygon","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1v458xDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:52:35.655Z","updateTime":"2018-10-18T11:55:01.289Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"g2-brush 多边形","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-brush-polygon&from=ice","dependencies":{"@antv/g2-brush":"^0.0.2","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-bubble","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-bubble","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1323axgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:53:40.989Z","updateTime":"2018-10-18T11:55:10.297Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"时间序列气泡图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-bubble&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-brush-line","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-brush-line","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1DWQaxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:51:44.660Z","updateTime":"2018-10-18T11:54:51.188Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"g2-brush 折线图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-brush-line&from=ice","dependencies":{"@antv/data-set":"^0.8.9","@antv/g2-brush":"^0.0.2","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-bubble-text","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-bubble-text","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1veinxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:55:29.047Z","updateTime":"2018-10-18T11:55:19.347Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"带文本的气泡图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-bubble-text&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-bubble-image","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-bubble-image","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1u9VcxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:54:36.039Z","updateTime":"2018-10-18T12:02:49.230Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"气泡图-自定义 shape","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-bubble-image&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-column-animated","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-column-animated","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB12MxdxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:58:15.623Z","updateTime":"2018-10-18T11:55:58.597Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"柱状图带更新动效","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-column-animated&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-clustered-stacked","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-clustered-stacked","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1aX3bxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:57:25.573Z","updateTime":"2018-10-18T11:55:38.129Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"分组层叠柱状图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-clustered-stacked&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-clock","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-clock","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB15g9nxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:56:31.878Z","updateTime":"2018-10-18T11:55:28.100Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"日常作息可视化","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-clock&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-column-image-top","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-column-image-top","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1XDNExxGYBuNjy0FnXXX5lpXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:59:03.683Z","updateTime":"2018-10-18T11:55:50.408Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"自定义柱状图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-column-image-top&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-compare-donut","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-compare-donut","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Lam_xDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:01:49.197Z","updateTime":"2018-10-18T11:56:27.146Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"双环图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-compare-donut&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-column-marked","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-column-marked","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1d8IPxbGYBuNjy0FoXXciBFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:59:52.344Z","updateTime":"2018-10-18T11:56:06.789Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"带标识的柱状图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-column-marked&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-custome-label-pie","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-custome-label-pie","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1lc1_xDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:02:48.275Z","updateTime":"2018-10-18T11:56:18.448Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"个性化标签饼图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-custome-label-pie&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-double-axes","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-double-axes","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB19hNexuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:04:48.569Z","updateTime":"2018-10-18T11:56:37.506Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"双轴图标","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-double-axes&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-cutomize-tooltip","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-cutomize-tooltip","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1G14exuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:03:49.570Z","updateTime":"2018-10-18T11:56:49.670Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"个性化 tooltip","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-cutomize-tooltip&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-geo-projection","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-geo-projection","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB18NhJopooBKNjSZFPXXXa2XXa-2734-1368.png","features":{"participle":{}},"publishTime":"2018-06-12T14:05:35.455Z","updateTime":"2018-10-18T11:57:13.527Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"地理映射","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-geo-projection&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7","jquery":"^3.3.1"}},{"name":"@bizcharts/g2-gradient-color-line","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-gradient-color-line","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1jsipxqmWBuNjy1XaXXXCbXXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T14:06:30.647Z","updateTime":"2018-10-18T11:57:25.069Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"渐变折线图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-gradient-color-line&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-hexbin-size","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-hexbin-size","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1GeWpxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:07:28.455Z","updateTime":"2018-10-18T11:57:00.512Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"六边形大小分箱图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-hexbin-size&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-line-of-dashed","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-line-of-dashed","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1B4upxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:08:27.160Z","updateTime":"2018-10-18T11:57:33.372Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"带虚线部分的折线图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-line-of-dashed&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-line-realtime","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-line-realtime","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1YfuixAyWBuNjy0FpXXassXXa-2692-1540.png","features":{"participle":{}},"publishTime":"2018-06-12T14:10:24.539Z","updateTime":"2018-10-18T11:57:51.371Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"实时更新数据的折线图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-line-realtime&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-line-rain-and-flow","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-line-rain-and-flow","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1f7epxqmWBuNjy1XaXXXCbXXa-1608-1188.png","features":{"participle":{}},"publishTime":"2018-06-12T14:09:31.071Z","updateTime":"2018-10-18T11:57:41.852Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"雨量流量对比","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-line-rain-and-flow&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7","bizcharts-plugin-slider":"^2.0.3"}},{"name":"@bizcharts/g2-map-symbol","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-map-symbol","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1g6mSxpOWBuNjy0FiXXXFxVXa-2762-1552.png","features":{"participle":{}},"publishTime":"2018-06-12T14:11:11.232Z","updateTime":"2018-10-18T11:57:59.553Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"符号地图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-map-symbol&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-area-horizon-graph","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-area-horizon-graph","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1sC56xDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T13:42:37.413Z","updateTime":"2018-10-18T11:53:06.249Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"地平线图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-area-horizon-graph&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-peking-aqi","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-peking-aqi","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB15lZRxbGYBuNjy0FoXXciBFXa-1608-1128.png","features":{"participle":{}},"publishTime":"2018-06-12T14:12:03.192Z","updateTime":"2018-10-18T11:58:25.072Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"北京市2010至2015年空气质量指数","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-peking-aqi&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7","bizcharts-plugin-slider":"^2.0.3","jquery":"^3.3.1"}},{"name":"@bizcharts/g2-pie-multi-donuts","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-pie-multi-donuts","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Fa_XxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:13:59.322Z","updateTime":"2018-10-18T11:58:16.572Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"多环图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-pie-multi-donuts&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-pie-column","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-pie-column","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB16EcRxbGYBuNjy0FoXXciBFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:12:53.326Z","updateTime":"2018-10-18T11:58:08.763Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"饼图-柱状图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-pie-column&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-pie-ranged","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-pie-ranged","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB19LLXxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:15:47.205Z","updateTime":"2018-10-18T11:58:50.723Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"饼图-限定角度范围","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-pie-ranged&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-pie-platelets","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-pie-platelets","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1MdzXxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:14:54.059Z","updateTime":"2018-10-18T11:58:33.357Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"饼图-花瓣图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-pie-platelets&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-pie-size","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-pie-size","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB19hYXxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:16:37.280Z","updateTime":"2018-10-18T11:58:41.420Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"饼图-半径大小","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-pie-size&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-pie-slice","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-pie-slice","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1C6lgxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:17:33.923Z","updateTime":"2018-10-18T11:58:58.326Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"饼图-分割空白","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-pie-slice&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-pie-texture","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-pie-texture","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1BhEexgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:18:27.815Z","updateTime":"2018-10-18T11:59:16.916Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"饼图-分割空白","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-pie-texture&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-rose-ranged","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-rose-ranged","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1zOerxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:20:54.617Z","updateTime":"2018-10-18T11:59:34.648Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"玫瑰图-限定角度范围","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-rose-ranged&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-rectbin-size","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-rectbin-size","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1vvjaxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:21:46.540Z","updateTime":"2018-10-18T11:59:26.127Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"矩形大小分箱图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-rectbin-size&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-sankey-layouts","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-sankey-layouts","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1cXisxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:23:38.309Z","updateTime":"2018-10-18T11:59:42.443Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"桑基图布局","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-sankey-layouts&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-sparklines","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-sparklines","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1KWt1oDmWBKNjSZFBXXXxUFXa-2794-1326.png","features":{"participle":{}},"publishTime":"2018-06-12T14:24:26.904Z","updateTime":"2018-10-18T11:59:54.325Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"迷你图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-sparklines&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-tree-dendrogram","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-tree-dendrogram","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1.oofxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:27:11.570Z","updateTime":"2018-10-18T12:00:18.558Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"生态树布局","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-tree-dendrogram&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-test-case","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-test-case","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1mAgfxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:25:28.370Z","updateTime":"2018-10-18T12:00:08.598Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"单元测试覆盖率可视化","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-test-case&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-tree-indented","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-tree-indented","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1zRasxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:28:10.447Z","updateTime":"2018-10-18T12:00:46.449Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"缩进树布局","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-tree-indented&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-venn-hollow","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-venn-hollow","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1VnCsxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:29:04.768Z","updateTime":"2018-10-18T12:00:36.976Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"空心维恩图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-venn-hollow&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-tree-compact-box","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-tree-compact-box","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1pV0ixuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:26:23.234Z","updateTime":"2018-10-18T12:00:26.916Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"紧凑树布局","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-tree-compact-box&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-waffle-grouped","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-waffle-grouped","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1WsGtxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:30:59.420Z","updateTime":"2018-10-18T12:01:12.352Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"华夫图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-waffle-grouped&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-voronoi-polar","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-voronoi-polar","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1rWGtxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:30:12.732Z","updateTime":"2018-10-18T12:00:54.672Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"极坐标 voronoi 图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-voronoi-polar&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-pie-triangle","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-pie-triangle","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1qzIexgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:19:14.757Z","updateTime":"2018-10-18T11:59:08.280Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"饼图-三角","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-pie-triangle&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-waffle-image","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-waffle-image","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1vUI7xkyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:32:01.502Z","updateTime":"2018-10-18T12:01:03.033Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"图片华夫图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-waffle-image&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/g2-waffle-path","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/g2-waffle-path","version":"0.2.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1n0zcxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:33:15.751Z","updateTime":"2018-10-18T12:01:21.353Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"符号华夫图","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=g2-waffle-path&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/gauge-basic","title":"仪表盘","description":"仪表盘","source":{"type":"npm","npm":"@bizcharts/gauge-basic","version":"0.0.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1gLI1JkCWBuNjy0FaXXXUlXXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T09:08:57.284Z","updateTime":"2018-10-18T12:02:09.261Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=gauge-basic&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/gallery-xaxis-zero-align","title":"负值X轴对齐","description":"当Y轴有负数时，X轴0线对齐","source":{"type":"npm","npm":"@bizcharts/gallery-xaxis-zero-align","version":"0.1.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1F6ZyvOMnBKNjSZFoXXbOSFXa-1608-2076.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-30T08:08:45.811Z","updateTime":"2018-10-18T12:01:41.210Z","type":"react","author":"风月","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=gallery-xaxis-zero-align&from=ice","dependencies":{"bizcharts":"^3.2.2"}},{"name":"@bizcharts/gauge-color","title":"仪表盘（多色）","description":"仪表盘（多色）","source":{"type":"npm","npm":"@bizcharts/gauge-color","version":"0.0.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1PebHJXGWBuNjy0FbXXb4sXXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T09:37:01.019Z","updateTime":"2018-10-18T12:01:49.619Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=gauge-color&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/gauge-text","title":"仪表盘（文字）","description":"仪表盘（文字）","source":{"type":"npm","npm":"@bizcharts/gauge-text","version":"0.0.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1ohIHJeSSBuNjy0FlXXbBpVXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T09:21:54.378Z","updateTime":"2018-10-18T12:01:58.603Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=gauge-text&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/gauge-tick","title":"刻度仪表盘","description":"刻度仪表盘","source":{"type":"npm","npm":"@bizcharts/gauge-tick","version":"0.0.6","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1WHwjJeuSBuNjSsplXXbe8pXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T09:54:09.993Z","updateTime":"2018-10-18T12:02:18.862Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=gauge-tick&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/heatmap-calendar","title":"日历色块图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/heatmap-calendar","version":"0.2.4","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1W712xAyWBuNjy0FpXXassXXa-2766-1552.png","features":{"participle":{}},"publishTime":"2018-06-12T14:37:24.957Z","updateTime":"2018-10-18T12:02:35.278Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=heatmap-calendar&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/gallery-biaxial","title":"双轴图隐藏Y轴","description":"双轴图的网格线对齐、隐藏Y轴","source":{"type":"npm","npm":"@bizcharts/gallery-biaxial","version":"0.0.9","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB11S7TvYZnBKNjSZFhXXc.oXXa-1608-2476.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-09-06T08:44:42.868Z","updateTime":"2018-10-18T12:01:29.146Z","type":"react","author":"风月","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=gallery-biaxial&from=ice","dependencies":{"bizcharts":"^3.2.2"}},{"name":"@bizcharts/heatmap-basic","title":"色块图","description":"色块图","source":{"type":"npm","npm":"@bizcharts/heatmap-basic","version":"0.0.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1I_H7JkyWBuNjy0FpXXassXXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T08:47:48.668Z","updateTime":"2018-10-18T12:02:26.771Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=heatmap-basic&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/heatmap-calendar-horizontal","title":"水平日历色块图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/heatmap-calendar-horizontal","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1bRAhxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:38:12.165Z","updateTime":"2018-10-18T12:06:36.035Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=heatmap-calendar-horizontal&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/heatmap-hexagon","title":"六边形分箱","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/heatmap-hexagon","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1MD7hxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:39:08.793Z","updateTime":"2018-10-18T12:03:07.621Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=heatmap-hexagon&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7","jquery":"^3.3.1"}},{"name":"@bizcharts/heatmap-hot-rect","title":"分块热力图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/heatmap-hot-rect","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1mACuxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:40:04.194Z","updateTime":"2018-10-18T12:03:16.744Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=heatmap-hot-rect&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/heatmap-image","title":"热力图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/heatmap-image","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1KAw9xkyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:42:52.233Z","updateTime":"2018-10-18T12:03:27.617Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=heatmap-image&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/line-basic","title":"基础折线图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/line-basic","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1soPdxDtYBeNjy1XdXXXXyVXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T14:43:43.571Z","updateTime":"2018-10-18T12:03:45.192Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=line-basic&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/heatmap-rectangle","title":"矩形分箱图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/heatmap-rectangle","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1c.5uxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:41:49.568Z","updateTime":"2018-10-18T12:03:36.298Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=heatmap-rectangle&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7","jquery":"^3.3.1"}},{"name":"@bizcharts/line-curved","title":"曲线折线图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/line-curved","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1w9kixgmTBuNjy1XbXXaMrVXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T14:44:36.069Z","updateTime":"2018-10-18T12:03:53.630Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=line-curved&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/line-gradient","title":"渐变色折线图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/line-gradient","version":"0.2.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1oGtlxuuSBuNjy1XcXXcYjFXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T14:45:24.831Z","updateTime":"2018-10-18T12:04:12.327Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=line-gradient&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/line-step","title":"阶梯折线图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/line-step","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1kedlxuuSBuNjy1XcXXcYjFXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T14:46:57.796Z","updateTime":"2018-10-18T12:04:21.004Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=line-step&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/line-series","title":"多条折线图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/line-series","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB11e2exDtYBeNjy1XdXXXXyVXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T14:46:13.252Z","updateTime":"2018-10-18T12:04:03.242Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=line-series&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/line-step-series","title":"多条阶梯折线图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/line-step-series","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1UoavxqmWBuNjy1XaXXXCbXXa-1608-848.png","features":{"participle":{}},"publishTime":"2018-06-12T14:47:47.095Z","updateTime":"2018-10-18T12:04:37.544Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=line-step-series&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/map-bubble-map","title":"带气泡的地图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/map-bubble-map","version":"0.2.4","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Tlw.xDtYBeNjy1XdXXXXyVXa-2764-1546.png","features":{"participle":{}},"publishTime":"2018-06-12T14:48:35.419Z","updateTime":"2018-10-18T12:04:28.877Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=map-bubble-map&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/map-choropleth-map","title":"世界分级统计地图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/map-choropleth-map","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1T0CRDbGYBuNjy0FoXXciBFXa-1678-638.png","features":{"participle":{}},"publishTime":"2018-06-12T14:49:29.455Z","updateTime":"2018-10-18T12:04:46.529Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=map-choropleth-map&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/map-drill-down","title":"中国地图-省市下钻","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/map-drill-down","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1gKhaDqmWBuNjy1XaXXXCbXXa-2778-1216.png","features":{"participle":{}},"publishTime":"2018-06-12T14:50:20.357Z","updateTime":"2018-10-18T12:04:56.060Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=map-drill-down&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7","jquery":"^3.3.1"}},{"name":"@bizcharts/map-hex-choropleth-map","title":"六边形分箱示意地图","description":"bizcharts 基础图表","source":{"type":"npm","npm":"@bizcharts/map-hex-choropleth-map","version":"0.1.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB127VWXNYaK1RjSZFnXXa80pXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-09-11T02:39:08.726Z","updateTime":"2018-10-18T12:05:04.416Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=map-hex-choropleth-map&from=ice","dependencies":{"bizcharts":"^3.2.2","@antv/data-set":"^0.9.5"}},{"name":"@bizcharts/map-us-states-hex","title":"美国地图六边形分割","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/map-us-states-hex","version":"0.2.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB15hawxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:51:27.735Z","updateTime":"2018-10-18T12:05:12.728Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=map-us-states-hex&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/map-with-connection","title":"美国各个机场的航线图","description":"美国各个机场的航线图","source":{"type":"npm","npm":"@bizcharts/map-with-connection","version":"0.1.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1F8tHXIbpK1RjSZFyXXX_qFXa-1608-848.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-09-10T07:48:27.245Z","updateTime":"2018-10-18T12:05:21.553Z","type":"react","author":"hm.hm","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=map-with-connection&from=ice","dependencies":{"bizcharts":"^3.2.2","@antv/data-set":"^0.9.5"}},{"name":"@bizcharts/map-with-heatmap","title":"带热力图的地图","description":"bizcharts 基础图表","source":{"type":"npm","npm":"@bizcharts/map-with-heatmap","version":"0.1.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB13jtAXSrqK1RjSZK9XXXyypXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-09-11T02:20:55.369Z","updateTime":"2018-10-18T12:05:32.711Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=map-with-heatmap&from=ice","dependencies":{"@antv/data-set":"^0.9.5","bizcharts":"^3.2.2"}},{"name":"@bizcharts/other-bar-change-pie","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-bar-change-pie","version":"0.2.4","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1io3dtYsrBKNjSZFpXXcXhFXa-1608-1456.png","features":{"participle":{}},"publishTime":"2018-06-12T14:53:23.907Z","updateTime":"2018-10-18T12:05:41.252Z","participle":["bizcharts"],"type":"react","author":"昔夜","title":"柱状图饼图联动","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-bar-change-pie&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-bubble-image","title":"气泡图-自定义 shape","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-bubble-image","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1y4NmxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:55:04.232Z","updateTime":"2018-10-18T12:06:01.806Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-bubble-image&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-bubble","title":"时间序列气泡图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-bubble","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1JivfxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:54:18.951Z","updateTime":"2018-10-18T12:05:53.105Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-bubble&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-bubble-text","title":"带文本的气泡图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-bubble-text","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1J4.kxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:55:50.687Z","updateTime":"2018-10-18T12:06:09.937Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-bubble-text&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-bullet-graph","title":"子弹图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-bullet-graph","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1bEffxDtYBeNjy1XdXXXXyVXa-1608-1428.png","features":{"participle":{}},"publishTime":"2018-06-12T14:56:43.684Z","updateTime":"2018-10-18T12:06:27.537Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-bullet-graph&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-clock","title":"日常作息可视化","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-clock","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB15Ek.xkyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:57:42.224Z","updateTime":"2018-10-18T12:06:18.223Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-clock&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-clustered-stacked","title":"分组层叠柱状图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-clustered-stacked","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1SUMkxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:58:35.883Z","updateTime":"2018-10-18T12:06:44.475Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-clustered-stacked&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-compare-donut","title":"双环图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-compare-donut","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1QsxXxAyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:59:31.777Z","updateTime":"2018-10-18T12:06:53.023Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-compare-donut&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-custom-bar","title":"自定义柱状图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-custom-bar","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1epRdxTtYBeNjy1XdXXXXyVXa-2774-1306.png","features":{"participle":{}},"publishTime":"2018-06-12T15:00:16.750Z","updateTime":"2018-10-18T12:07:01.322Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-custom-bar&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/heatmap-heatmap","title":"色块图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/heatmap-heatmap","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1QSyuxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T14:40:52.122Z","updateTime":"2018-10-18T12:02:58.996Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=heatmap-heatmap&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-custome-label-pie","title":"个性化标签饼图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-custome-label-pie","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1AOjgxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:01:02.520Z","updateTime":"2018-10-18T12:07:10.637Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-custome-label-pie&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-cutomize-legend","title":"个性化 legend","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-cutomize-legend","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1LOlXxAyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:01:56.210Z","updateTime":"2018-10-18T12:07:19.327Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-cutomize-legend&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-datamarker_dataregion","title":"特殊数据点标注和特殊数据区间标注","description":"特殊数据点标注和特殊数据区间标注","source":{"type":"npm","npm":"@bizcharts/other-datamarker_dataregion","version":"0.0.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB123jxmQZmBKNjSZPiXXXFNVXa-1608-848.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-08T07:47:13.921Z","updateTime":"2018-10-18T12:07:36.927Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-datamarker_dataregion&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"3.2.1-beta.2"}},{"name":"@bizcharts/other-helix-coordinate","title":"螺旋坐标系","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-helix-coordinate","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB17qDhxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:04:36.345Z","updateTime":"2018-10-18T12:07:45.424Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-helix-coordinate&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-kagi-chart","title":"Kagi Chart","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-kagi-chart","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB17cHhxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:05:29.494Z","updateTime":"2018-10-18T12:08:02.922Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-kagi-chart&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-kernel-smooth-density","title":"核函数概率密度分布","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-kernel-smooth-density","version":"0.3.4","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1cIXoxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:06:26.629Z","updateTime":"2018-10-18T12:07:54.124Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-kernel-smooth-density&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-kernel-smooth-regression-1","title":"核函数概率密度回归曲线","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-kernel-smooth-regression-1","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1I3YhxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:07:13.087Z","updateTime":"2018-10-18T12:08:20.016Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-kernel-smooth-regression-1&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-kernel-smooth-regression-2","title":"核函数概率密度回归曲线（两字段）","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-kernel-smooth-regression-2","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1gvAmxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:08:08.325Z","updateTime":"2018-10-18T12:08:11.228Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-kernel-smooth-regression-2&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-legend-position","title":"图例位置","description":"图例位置","source":{"type":"npm","npm":"@bizcharts/other-legend-position","version":"0.0.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1DR0eJ4GYBuNjy0FnXXX5lpXa-1608-886.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-08T09:34:43.760Z","updateTime":"2018-10-18T12:08:28.838Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-legend-position&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-liquid-fill-gauge","title":"水波图","description":"水波图","source":{"type":"npm","npm":"@bizcharts/other-liquid-fill-gauge","version":"0.0.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Psb1xbZnBKNjSZFKXXcGOVXa-1608-1648.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-08T07:20:07.687Z","updateTime":"2018-10-18T12:08:46.054Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-liquid-fill-gauge&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-legend-slidable-size","title":"滑动图例的大小","description":"滑动图例的大小","source":{"type":"npm","npm":"@bizcharts/other-legend-slidable-size","version":"0.1.0","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1guWBbxYaK1RjSZFnXXa80pXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-legend-slidable-size&from=ice","publishTime":"2018-09-18T02:07:25.482Z","updateTime":"2018-10-18T12:08:36.997Z","type":"react","author":"邶海","dependencies":{"bizcharts":"^3.2.2"}},{"name":"@bizcharts/other-cutomize-tooltip","title":"个性化 tooltip","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-cutomize-tooltip","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1GYSyxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:02:48.355Z","updateTime":"2018-10-18T12:07:28.075Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-cutomize-tooltip&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-liquid-fill-path","title":"水波图 - 自定义路径","description":"水波图 - 自定义路径","source":{"type":"npm","npm":"@bizcharts/other-liquid-fill-path","version":"0.0.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1kIZ4czfguuRjSszcXXbb7FXa-1608-1648.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-08T07:31:27.296Z","updateTime":"2018-10-18T12:08:54.394Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-liquid-fill-path&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-path","title":"路径图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-path","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1mhwmxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:08:57.736Z","updateTime":"2018-10-18T12:09:04.279Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-path&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-periodic-table","title":"元素周期表","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-periodic-table","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB11BlaxAyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:09:59.318Z","updateTime":"2018-10-18T12:09:21.503Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-periodic-table&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-polar-heatmap","title":"Polar Heatmap","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-polar-heatmap","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1CZCixv1TBuNjy0FjXXajyXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:11:55.372Z","updateTime":"2018-10-18T12:09:13.172Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-polar-heatmap&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-pizza","title":"Pizza Chart","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-pizza","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1nTFaxAyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:10:55.954Z","updateTime":"2018-10-18T12:09:53.440Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-pizza&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-polar-interval","title":"南丁格尔玫瑰图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-polar-interval","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1E1Sixv1TBuNjy0FjXXajyXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:12:51.722Z","updateTime":"2018-10-18T12:09:30.123Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-polar-interval&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-polar-stack-column","title":"极坐标下的层叠柱状图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-polar-stack-column","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1_hM2xbGYBuNjy0FoXXciBFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:14:46.870Z","updateTime":"2018-10-18T12:10:20.178Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-polar-stack-column&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-polar-range-column","title":"2015 年波士顿每天的平均温度可视化","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-polar-range-column","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Z0xpxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:13:48.914Z","updateTime":"2018-10-18T12:09:41.707Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-polar-range-column&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-radial-bar","title":"玉珏图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-radial-bar","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1n9PixDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:16:25.282Z","updateTime":"2018-10-18T12:10:02.148Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-radial-bar&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-punch-card","title":"Punch Card","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-punch-card","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1xxgnxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:15:33.570Z","updateTime":"2018-10-18T12:10:11.759Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-punch-card&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-radial-line","title":"Radial Bar Chart","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-radial-line","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1r.HixDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:17:12.765Z","updateTime":"2018-10-18T12:10:36.316Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-radial-line&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-rain-and-flow","title":"雨量流量对比","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-rain-and-flow","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1XLKAxqmWBuNjy1XaXXXCbXXa-1608-1188.png","features":{"participle":{}},"publishTime":"2018-06-12T15:18:00.939Z","updateTime":"2018-10-18T12:10:44.888Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-rain-and-flow&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7","bizcharts-plugin-slider":"^2.0.3"}},{"name":"@bizcharts/other-regionfilter-guide1","title":"区域着色1","description":"区域着色1","source":{"type":"npm","npm":"@bizcharts/other-regionfilter-guide1","version":"0.0.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1q6OymZj_B1NjSZFHXXaDWpXa-1608-848.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-08T08:14:47.675Z","updateTime":"2018-10-18T12:10:28.138Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-regionfilter-guide1&from=ice","dependencies":{"bizcharts":"3.2.1-beta.2"}},{"name":"@bizcharts/other-regionfilter-guide2","title":"区域着色2","description":"区域着色2","source":{"type":"npm","npm":"@bizcharts/other-regionfilter-guide2","version":"0.0.6","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1w7mYXtVIxuRkSO3hXXa5eVXa-1608-848.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-07T01:46:14.821Z","updateTime":"2018-10-18T12:10:53.386Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-regionfilter-guide2&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"3.2.1-beta.2"}},{"name":"@bizcharts/other-regionfilter-realtime-data","title":"实时数据应用区域着色","description":"实时数据应用区域着色","source":{"type":"npm","npm":"@bizcharts/other-regionfilter-realtime-data","version":"0.0.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1lBKrJNSYBuNjSsphXXbGvVXa-1608-848.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-08T09:08:05.761Z","updateTime":"2018-10-18T12:11:11.572Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-regionfilter-realtime-data&from=ice","dependencies":{"bizcharts":"3.2.1-beta.2"}},{"name":"@bizcharts/other-regression","title":"回归曲线","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-regression","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1oXXqxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:18:51.823Z","updateTime":"2018-10-18T12:11:01.414Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-regression&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-rounded-stacked-column-chart","title":"圆角堆叠柱状图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-rounded-stacked-column-chart","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1Z1dcxAyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:20:36.991Z","updateTime":"2018-10-18T12:11:30.050Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-rounded-stacked-column-chart&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-rounded-column-chart","title":"圆角柱状图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-rounded-column-chart","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1QshcxAyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:19:45.490Z","updateTime":"2018-10-18T12:11:20.426Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-rounded-column-chart&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-slice-pie","title":"分片饼图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-slice-pie","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1TuUoxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:21:32.698Z","updateTime":"2018-10-18T12:11:44.784Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-slice-pie&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-streamgraph","title":"streamgraph","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-streamgraph","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1lljjxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:22:39.981Z","updateTime":"2018-10-18T12:11:56.137Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-streamgraph&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-test-case","title":"单元测试覆盖率可视化","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-test-case","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1OzAoxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:23:32.613Z","updateTime":"2018-10-18T12:12:14.457Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-test-case&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-tail-legend","title":"尾部跟随图例","description":"尾部跟随图例","source":{"type":"npm","npm":"@bizcharts/other-tail-legend","version":"0.0.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1spSAJrGYBuNjy0FoXXciBFXa-1608-848.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-07T02:04:09.076Z","updateTime":"2018-10-18T12:12:05.618Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-tail-legend&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-venn","title":"韦恩图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-venn","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB19XfkxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:24:27.020Z","updateTime":"2018-10-18T12:12:24.395Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-venn&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-wind-rose","title":"Wind Rose","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-wind-rose","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1WEVqxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:26:01.919Z","updateTime":"2018-10-18T12:12:32.671Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-wind-rose&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-word-cloud","title":"词云","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-word-cloud","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1rq0rxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:26:59.473Z","updateTime":"2018-10-18T12:12:49.042Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-word-cloud&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/other-word-cloud-mask","title":"带图片遮罩的词云","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/other-word-cloud-mask","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1pci6xrGYBuNjy0FoXXciBFXa-2766-1552.png","features":{"participle":{}},"publishTime":"2018-06-12T15:27:44.939Z","updateTime":"2018-10-18T12:12:58.358Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=other-word-cloud-mask&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/pie-color-rose","title":"南丁格尔玫瑰彩图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/pie-color-rose","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1NinkxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:28:34.197Z","updateTime":"2018-10-18T12:12:41.062Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=pie-color-rose&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/pie-donut-rose","title":"南丁格尔玫瑰环图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/pie-donut-rose","version":"0.2.6","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1bsqnbxnaK1RjSZFBXXcW7VXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:30:30.935Z","updateTime":"2018-10-18T12:13:28.547Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=pie-donut-rose&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/pie-donut","title":"基础环图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/pie-donut","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1bMUpxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:29:38.033Z","updateTime":"2018-10-18T12:13:07.218Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=pie-donut&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/pie-labelline","title":"基础饼图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/pie-labelline","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1uSEpxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:32:15.241Z","updateTime":"2018-10-18T12:13:36.628Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=pie-labelline&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/pie-multi-level","title":"多层饼图","description":"多层饼图","source":{"type":"npm","npm":"@bizcharts/pie-multi-level","version":"0.0.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1MwseJeSSBuNjy0FlXXbBpVXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T07:22:59.262Z","updateTime":"2018-10-18T12:13:45.466Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=pie-multi-level&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/pie-rose","title":"单色南丁格尔玫瑰图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/pie-rose","version":"0.2.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1OEqSbwHqK1RjSZFEXXcGMXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:32:54.509Z","updateTime":"2018-10-18T12:13:53.618Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=pie-rose&from=ice","dependencies":{"bizcharts":"^3.2.0"}},{"name":"@bizcharts/pie-innerlabel","title":"基础饼图-内部文本","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/pie-innerlabel","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1vtuCxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:31:26.132Z","updateTime":"2018-10-18T12:13:20.359Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=pie-innerlabel&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/point-bubble","title":"气泡图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/point-bubble","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1n_HUxrSYBuNjSspfXXcZCpXa-2778-1558.png","features":{"participle":{}},"publishTime":"2018-06-12T15:34:37.011Z","updateTime":"2018-10-18T12:17:04.458Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=point-bubble&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/point-jitter","title":"扰动点图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/point-jitter","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1u4vlxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:35:27.394Z","updateTime":"2018-10-18T12:17:38.248Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=point-jitter&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/point-scatter","title":"散点图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/point-scatter","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1HzflxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:36:15.056Z","updateTime":"2018-10-18T12:17:48.870Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=point-scatter&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/point-scatter-series","title":"多色散点图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/point-scatter-series","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1X3.qxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:37:12.090Z","updateTime":"2018-10-18T12:17:57.786Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=point-scatter-series&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/point-scatter-shapes","title":"多形状散点图","description":"多形状散点图","source":{"type":"npm","npm":"@bizcharts/point-scatter-shapes","version":"0.0.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB16u8nJxGYBuNjy0FnXXX5lpXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T07:43:38.107Z","updateTime":"2018-10-18T12:18:06.585Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=point-scatter-shapes&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/radar-basic","title":"基础雷达图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/radar-basic","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1JOUqxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:37:59.053Z","updateTime":"2018-10-18T12:18:36.343Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=radar-basic&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/radar-with-line","title":"基础雷达图（线）","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/radar-with-line","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1xlXsxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:39:04.114Z","updateTime":"2018-10-18T12:18:27.197Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=radar-with-line&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/radar-flower-line","title":"雷达图复杂曲线","description":"雷达图复杂曲线","source":{"type":"npm","npm":"@bizcharts/radar-flower-line","version":"0.0.5","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB16UQOJbGYBuNjy0FoXXciBFXa-1608-1248.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T10:47:21.482Z","updateTime":"2018-10-18T12:18:17.194Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=radar-flower-line&from=ice","dependencies":{"bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-adjacency","title":"相邻层次图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-adjacency","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1g9.qxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:39:54.872Z","updateTime":"2018-10-18T12:20:48.790Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-adjacency&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-arc","title":"弧长链接图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-arc","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1miaDxqmWBuNjy1XaXXXCbXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:40:51.091Z","updateTime":"2018-10-18T12:18:45.524Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-arc&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-arc-polar","title":"极坐标弧长链接图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-arc-polar","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1_LLmxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:41:51.816Z","updateTime":"2018-10-18T12:18:59.083Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-arc-polar&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-chord","title":"和弦图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-chord","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1SxPmxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:42:45.475Z","updateTime":"2018-10-18T12:19:09.437Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-chord&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-circle-packing","title":"Circle Packing","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-circle-packing","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB12omDxqmWBuNjy1XaXXXCbXXa-1608-1208.png","features":{"participle":{}},"publishTime":"2018-06-12T15:43:42.232Z","updateTime":"2018-10-18T12:19:26.915Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-circle-packing&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-radial-dendrogram","title":"径向系统树图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-radial-dendrogram","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1a9nmxDtYBeNjy1XdXXXXyVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:44:53.380Z","updateTime":"2018-10-18T12:19:17.874Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-radial-dendrogram&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-radial-tidy-tree","title":"径向紧凑树图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-radial-tidy-tree","version":"0.2.3","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1mPZrxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:45:45.707Z","updateTime":"2018-10-18T12:19:45.546Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-radial-tidy-tree&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-sankey","title":"桑基图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-sankey","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1wRptxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:46:40.663Z","updateTime":"2018-10-18T12:19:36.354Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-sankey&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-sunburst","title":"旭日图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-sunburst","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1lDhtxuuSBuNjy1XcXXcYjFXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:47:33.641Z","updateTime":"2018-10-18T12:20:17.986Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-sunburst&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-treemap","title":"矩形树图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-treemap","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1zFQsxgmTBuNjy1XbXXaMrVXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:48:25.048Z","updateTime":"2018-10-18T12:19:54.568Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-treemap&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/relation-voronoi","title":"voronoi图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/relation-voronoi","version":"0.2.1","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1GZlgxAyWBuNjy0FpXXassXXa-1608-1248.png","features":{"participle":{}},"publishTime":"2018-06-12T15:49:14.917Z","updateTime":"2018-10-18T12:20:06.220Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=relation-voronoi&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/spot-bubble-c","title":"多层面积图","description":"Bizhcarts basic charts","source":{"type":"npm","npm":"@bizcharts/spot-bubble-c","version":"0.2.2","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1789ExqmWBuNjy1XaXXXCbXXa-1608-948.png","features":{"participle":{}},"publishTime":"2018-06-12T15:50:00.116Z","updateTime":"2018-10-18T12:20:26.373Z","participle":["bizcharts"],"type":"react","author":"昔夜","homepage":"http://bizcharts.net/products/bizCharts/demo/detail?id=spot-bubble-c&from=ice","dependencies":{"@antv/data-set":"^0.8.9","bizcharts":"^3.1.7"}},{"name":"@bizcharts/bar-time-bar","title":"时间条形图","description":"time bar","source":{"type":"npm","npm":"@bizcharts/bar-time-bar","version":"0.0.7","sourceCodeDirectory":"src/"},"categories":["图表"],"screenshot":"https://img.alicdn.com/tfs/TB1XvjGJeuSBuNjy1XcXXcYjFXa-1608-848.png","participle":["bizcharts"],"features":{"participle":{}},"publishTime":"2018-08-06T06:30:17.343Z","updateTime":"2018-10-18T12:20:39.983Z","type":"react","author":"芈乐","homepage":"http://bizcharts.net/products/bizGoblin/demo/detail?id=time-bar&from=ice","dependencies":{"bizcharts":"^3.1.7"}}],"components":[{"name":"balloon-confirm","title":"ICE 气泡确认框","description":"ICE 气泡确认框","homepage":"https://unpkg.com/@icedesign/balloon-confirm@1.0.4/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/balloon-confirm","source":{"type":"npm","npm":"@icedesign/balloon-confirm","version":"1.0.4","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","prop-types":"^15.5.8"},"screenshots":[null],"customConfig":null,"publishTime":"2018-09-06T16:23:58.708Z","updateTime":"2019-03-19T02:45:50.486Z"},{"name":"container","title":"基础容器","description":"","homepage":"https://unpkg.com/@icedesign/container@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/container","source":{"type":"npm","npm":"@icedesign/container","version":"1.0.3","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","prop-types":"^15.5.8"},"screenshots":[null],"customConfig":null,"publishTime":"2018-01-17T12:37:35.249Z","updateTime":"2019-03-04T08:48:44.148Z"},{"name":"data-binder","title":"ICE 前后端数据绑定、交互方案","description":"ICE 前后端数据绑定、交互方案","homepage":"https://unpkg.com/@icedesign/data-binder@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/data-binder","source":{"type":"npm","npm":"@icedesign/data-binder","version":"1.0.4","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.11.7","axios":"^0.18.0","deepmerge":"^2.0.1","pure-render-decorator":"^1.2.1"},"screenshots":[null],"customConfig":null,"publishTime":"2017-12-26T06:49:09.722Z","updateTime":"2019-03-04T08:51:33.201Z"},{"name":"dynamic-icon","title":"动态 Icon 组件","description":"动态 Icon 组件","homepage":"https://unpkg.com/@icedesign/data-binder@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/dynamic-icon","source":{"type":"npm","npm":"@icedesign/dynamic-icon","version":"0.1.8","registry":"http://registry.npmjs.com"},"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.8"},"screenshots":[null],"customConfig":null,"publishTime":"2018-11-21T04:38:17.491Z","updateTime":"2019-03-04T08:55:16.160Z"},{"name":"ellipsis","title":"多行文字控制展示组件","description":"多行文字控制展示组件","homepage":"https://unpkg.com/@icedesign/ellipsis@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/ellipsis","source":{"type":"npm","npm":"@icedesign/ellipsis","version":"1.0.3","registry":"http://registry.npmjs.com"},"dependencies":{"classnames":"^2.2.5","prop-types":"^15.6.0","@alifd/next":"^1.x"},"screenshots":[null],"customConfig":null,"publishTime":"2018-01-02T06:59:41.707Z","updateTime":"2019-03-04T08:45:13.448Z"},{"name":"form-binder","title":"ICE 表单数据获取方案","description":"ICE 表单数据获取方案","homepage":"https://unpkg.com/@icedesign/form-binder@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/form-binder","source":{"type":"npm","npm":"@icedesign/form-binder","version":"1.0.6","registry":"http://registry.npmjs.com"},"dependencies":{"async-validator":"^1.8.1","prop-types":"^15.5.8"},"screenshots":[null],"customConfig":null,"publishTime":"2017-12-26T06:55:16.770Z","updateTime":"2019-03-04T08:49:44.236Z"},{"name":"foundation-symbol","title":"基础符号表","description":"基础符号表","homepage":"https://unpkg.com/@icedesign/foundation-symbol@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/foundation-symbol","source":{"type":"npm","npm":"@icedesign/foundation-symbol","version":"1.0.3","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.11.7","classnames":"^2.2.5","prop-types":"^15.6.0"},"screenshots":[null],"customConfig":null,"publishTime":"2018-11-21T10:16:04.605Z","updateTime":"2019-03-04T08:53:22.522Z"},{"name":"img","title":"ICE 图片组件","description":"ICE 图片组件。","homepage":"https://unpkg.com/@icedesign/img@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/img","source":{"type":"npm","npm":"@icedesign/img","version":"1.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.10"},"screenshots":[null],"customConfig":null,"publishTime":"2017-12-26T06:51:40.651Z","updateTime":"2019-03-04T08:55:48.206Z"},{"name":"label","title":"创建标签组件用来突出所要显示的信息","description":"创建标签组件用来突出所要显示的信息","homepage":"https://unpkg.com/@icedesign/label@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/label","source":{"type":"npm","npm":"@icedesign/label","version":"1.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","prop-types":"^15.6.0"},"screenshots":[null],"customConfig":null,"publishTime":"2017-12-26T11:59:29.321Z","updateTime":"2019-03-04T08:46:39.375Z"},{"name":"layout","title":"提供页面框架性的 layout 组件","description":"提供页面框架性的 layout 组件","homepage":"https://unpkg.com/@icedesign/layout@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/layout","source":{"type":"npm","npm":"@icedesign/layout","version":"1.0.7","registry":"http://registry.npmjs.com"},"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.10","@alifd/next":"^1.11.7"},"screenshots":[null],"customConfig":null,"publishTime":"2017-12-26T08:22:36.364Z","updateTime":"2019-03-04T08:50:17.944Z"},{"name":"list","title":"列表组件","description":"列表组件","homepage":"https://unpkg.com/@icedesign/list@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/list","source":{"type":"npm","npm":"@icedesign/list","version":"0.1.12","registry":"http://registry.npmjs.com"},"dependencies":{},"screenshots":[null],"customConfig":null,"publishTime":"2018-09-17T13:14:15.085Z","updateTime":"2019-03-04T08:54:13.564Z"},{"name":"notification","title":"全局展示通知提醒信息","description":"全局展示通知提醒信息。","homepage":"https://unpkg.com/@icedesign/notification@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/notification","source":{"type":"npm","npm":"@icedesign/notification","version":"1.0.3","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","rc-notification":"^1.4.2"},"screenshots":[null],"customConfig":null,"publishTime":"2018-10-29T09:41:06.065Z","updateTime":"2019-03-04T08:56:20.166Z"},{"name":"panel","title":"面板组件","description":"面板组件","homepage":"https://unpkg.com/@icedesign/panel@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/panel","source":{"type":"npm","npm":"@icedesign/panel","version":"1.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"classnames":"^2.2.5","prop-types":"^15.6.0","@alifd/next":"^1.x"},"screenshots":[null],"customConfig":null,"publishTime":"2017-12-26T06:53:44.726Z","updateTime":"2019-03-04T08:47:11.150Z"},{"name":"qrcode","title":"二维码组件","description":"飞冰 二维码组件","homepage":"https://unpkg.com/@icedesign/qrcode@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/qrcode","source":{"type":"npm","npm":"@icedesign/qrcode","version":"1.0.3","registry":"http://registry.npmjs.com"},"dependencies":{"classnames":"^2.2.5","@alifd/next":"^1.x","prop-types":"^15.6.0","qrcode.react":"^0.8.0"},"screenshots":[null],"customConfig":null,"publishTime":"2018-08-14T16:12:03.090Z","updateTime":"2019-03-04T08:50:52.225Z"},{"name":"richtext-renderer","title":"富文本组件 HTML 渲染器","description":"富文本组件 HTML 渲染器","homepage":"https://unpkg.com/@icedesign/richtext-renderer@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/richtext-renderer","source":{"type":"npm","npm":"@icedesign/richtext-renderer","version":"0.1.6","registry":"http://registry.npmjs.com"},"dependencies":{},"screenshots":[null],"customConfig":null,"publishTime":"2018-10-16T11:39:04.201Z","updateTime":"2019-03-04T08:54:48.852Z"},{"name":"styled-menu","title":"导航组件体验版","description":"ICE 导航组件体验版","homepage":"https://unpkg.com/@icedesign/styled-menu@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/styled-menu","source":{"type":"npm","npm":"@icedesign/styled-menu","version":"1.0.5","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.11.7","classnames":"^2.2.5","prop-types":"^15.5.10","rc-menu":"^5.0.9","@icedesign/foundation-symbol":"^1.0.0"},"screenshots":[null],"customConfig":null,"publishTime":"2018-02-07T10:02:04.169Z","updateTime":"2019-03-04T08:56:53.635Z"},{"name":"title","title":"标题组件","description":"标题组件","homepage":"https://unpkg.com/@icedesign/title@latest/build/index.html","categories":[],"repository":"https://github.com/ice-lab/react-materials/tree/master/components/title","source":{"type":"npm","npm":"@icedesign/title","version":"1.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.10","@alifd/next":"^1.x"},"screenshots":[null],"customConfig":null,"publishTime":"2017-12-26T07:15:25.464Z","updateTime":"2019-03-04T08:48:16.004Z"}],"scaffolds":[{"name":"ice-design-pro","title":"ICE Design Pro","description":"该模板提供了 Redux、Mock、国际化、权限管理、注册登录等完整的方案，且内置了丰富的区块，主要用于展示现有区块的分类以及区块组合的效果，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/pro-scaffold@latest/build/index.html","categories":["基础模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-design-pro","source":{"type":"npm","npm":"@icedesign/pro-scaffold","version":"2.0.11","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.9.5","@icedesign/container":"^1.x","@icedesign/data-binder":"^1.x","@icedesign/ellipsis":"^1.x","@icedesign/form-binder":"^1.0.3","@icedesign/foundation-symbol":"^1.0.0","@icedesign/img":"^1.0.0","@icedesign/label":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","axios":"^0.17.1","bizcharts":"^3.2.2","bizgoblin":"0.0.1","classnames":"^2.2.5","enquire-js":"^0.1.2","history":"^4.7.2","hoist-non-react-statics":"^2.5.5","intl":"^1.2.5","invariant":"^2.2.4","lodash":"^4.17.10","moment":"^2.23.0","path-to-regexp":"^2.2.1","prop-types":"^15.5.8","react":"^16.2.0","react-document-title":"^2.0.3","react-dom":"^16.4.1","react-intl":"^2.8.0","react-redux":"^5.0.7","react-router-dom":"^4.2.2","react-router-redux":"5.0.0-alpha.6","redux":"3.6.0","redux-thunk":"^2.3.0"},"screenshot":"https://img.alicdn.com/tfs/TB1bqV5JwTqK1RjSZPhXXXfOFXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1bqV5JwTqK1RjSZPhXXXfOFXa-2860-1580.png","https://img.alicdn.com/tfs/TB1n_CXJwHqK1RjSZFgXXa7JXXa-2862-1580.png","https://img.alicdn.com/tfs/TB1Qll_JrvpK1RjSZFqXXcXUVXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-05-04T08:55:23.677Z","updateTime":"2019-04-02T02:08:15.694Z"},{"name":"ice-design-lite","title":"ICE Design Lite","description":"该模板适用于从 0 到 1 开始搭建项目，内置基础的页面，路由和菜单展示","homepage":"https://unpkg.com/@icedesign/lite-scaffold@latest/build/index.html","categories":["基础模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-design-lite","source":{"type":"npm","npm":"@icedesign/lite-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/container":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","axios":"^0.17.1","bizcharts":"latest","classnames":"^2.2.5","enquire-js":"^0.1.2","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-document-title":"^2.0.3","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1CjPVw4naK1RjSZFBXXcW7VXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1CjPVw4naK1RjSZFBXXcW7VXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-05-04T08:55:11.945Z","updateTime":"2019-03-20T01:53:29.111Z"},{"name":"ice-typescript-starter","title":"ICE TypeScript Starter","description":"该模板基于 TypeScript 适用于从 0 到 1 开始搭建项目，内置基础的页面，路由和菜单展示","homepage":"https://unpkg.com/@icedesign/ts-scaffold@latest/build/index.html","categories":["基础模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-typescript-starter","source":{"type":"npm","npm":"@icedesign/ts-scaffold","version":"1.0.3","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@types/react":"^16.8.3","@types/react-dom":"^16.8.2","@icedesign/theme":"^1.x","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB13AFlH6TpK1RjSZKPXXa3UpXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB13AFlH6TpK1RjSZKPXXa3UpXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2019-02-21T08:59:09.460Z","updateTime":"2019-03-16T04:26:46.096Z"},{"name":"ice-design-cms","title":"CMS 内容管理系统","description":"该模板内置了丰富的区块，主要适用于类 CMS 管理系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/cms-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-design-cms","source":{"type":"npm","npm":"@icedesign/cms-scaffold","version":"2.0.3","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.8.5","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","axios":"^0.17.1","bizcharts":"3.1.0","classnames":"^2.2.5","enquire-js":"^0.1.2","immutable":"^3.8.2","is-hotkey":"^0.1.1","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-document-title":"^2.0.3","react-dom":"^16.4.1","react-router-dom":"^4.2.2","slate":"^0.32.5","slate-plain-serializer":"^0.5.6","slate-react":"^0.11.6"},"screenshot":"https://img.alicdn.com/tfs/TB1iHmDDHPpK1RjSZFFXXa5PpXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1iHmDDHPpK1RjSZFFXXa5PpXa-2872-1580.png","https://img.alicdn.com/tfs/TB19HubDSzqK1RjSZPcXXbTepXa-2872-1580.png","https://img.alicdn.com/tfs/TB1oc9IDOrpK1RjSZFhXXXSdXXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-05-04T08:55:16.309Z","updateTime":"2019-03-16T04:27:00.062Z"},{"name":"ice-order-management-admin","title":"订单管理系统","description":"该模板适用于订单类管理后台，布局方式采用左侧固定，右侧自适应方式，适合大量数据展示和界面操作","homepage":"https://unpkg.com/@icedesign/order-management-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-order-management-admin","source":{"type":"npm","npm":"@icedesign/order-management-scaffold","version":"2.0.5","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.9.5","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.2","enquire-js":"^0.1.2","moment":"^2.24.0","prop-types":"^15.5.8","react":"^16.2.0","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB19NPDDcbpK1RjSZFyXXX_qFXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB19NPDDcbpK1RjSZFyXXX_qFXa-2872-1580.png","https://img.alicdn.com/tfs/TB1KMJBJrvpK1RjSZPiXXbmwXXa-2860-1580.png","https://img.alicdn.com/tfs/TB1lTJTJyrpK1RjSZFhXXXSdXXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2019-01-22T02:15:17.432Z","updateTime":"2019-03-16T04:26:52.230Z"},{"name":"ice-government-management-admin","title":"政府管理系统","description":"该模板内置了丰富的区块，适用于政府类风格的管理类系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/government-management-admin@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-government-management-admin","source":{"type":"npm","npm":"@icedesign/government-management-admin","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@alifd/theme-1":"^0.0.6","@antv/data-set":"^0.9.6","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.0.0","@icedesign/img":"^1.x","@icedesign/label":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.4","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1lDiaJAvoK1RjSZFwXXciCFXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1lDiaJAvoK1RjSZFwXXciCFXa-2860-1580.png","https://img.alicdn.com/tfs/TB1PFt8Jq6qK1RjSZFmXXX0PFXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-10-15T12:24:42.807Z","updateTime":"2019-03-16T04:26:57.964Z"},{"name":"ice-reviews-management","title":"评测管理系统","description":"该模板适用于用户反馈和评价管理，布局方式采用左侧固定，右侧自适应方式，适合大量数据展示和界面操作","homepage":"https://unpkg.com/@icedesign/reviews-management-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-reviews-management","source":{"type":"npm","npm":"@icedesign/reviews-management-scaffold","version":"2.0.4","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.11.8","@antv/data-set":"^0.8.7","@icedesign/container":"^1.0.0","@icedesign/form-binder":"^1.0.3","@icedesign/foundation-symbol":"^1.0.1","@icedesign/img":"^1.0.0","@icedesign/layout":"^1.0.3","@icedesign/theme":"^1.x","bizcharts":"^3.1.5","enquire-js":"^0.1.2","foundation-symbol":"^0.1.3","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1E4ZfBMDqK1RjSZSyXXaxEVXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB18bpmDrrpK1RjSZTEXXcWAVXa-2872-1580.png","https://img.alicdn.com/tfs/TB1TiFcDzDpK1RjSZFrXXa78VXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-05-24T15:18:15.655Z","updateTime":"2019-03-16T04:27:07.569Z"},{"name":"ice-monitor-dashboard","title":"数据监控系统","description":"该模板适用于数据监控展示类的管理后台，内置通用的丰富的图表，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/monitor-dashboard@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-monitor-dashboard","source":{"type":"npm","npm":"@icedesign/monitor-dashboard","version":"1.0.5","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.9.6","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.0.3","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.2","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1tUgmCAvoK1RjSZFNXXcxMVXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB14J3BDmzqK1RjSZPcXXbTepXa-2872-1580.png","https://img.alicdn.com/tfs/TB1O6pxDxnaK1RjSZFtXXbC2VXa-2872-1580.png","https://img.alicdn.com/tfs/TB1GOs8DXYqK1RjSZLeXXbXppXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-09-27T16:32:46.647Z","updateTime":"2019-03-16T04:26:58.441Z"},{"name":"ice-project-management-admin","title":"项目管理系统","description":"该模板内置了丰富的区块以及图表，适用于项目管理类的后台系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/project-management-admin@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-project-management-admin","source":{"type":"npm","npm":"@icedesign/project-management-admin","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.9.6","@icedesign/container":"^1.x","@icedesign/form-binder":"^0.1.7","@icedesign/icon":"^0.1.1","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.4","classnames":"^2.2.5","immutable":"^4.0.0-rc.12","is-hotkey":"^0.1.4","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2","react-trello":"^2.0.8","slate":"^0.44.9","slate-plain-serializer":"^0.6.33","slate-react":"^0.21.15"},"screenshot":"https://img.alicdn.com/tfs/TB1OrPDAMHqK1RjSZFgXXa7JXXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1UDbpDHrpK1RjSZTEXXcWAVXa-2860-1580.png","https://img.alicdn.com/tfs/TB1OrPDAMHqK1RjSZFgXXa7JXXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2019-01-10T09:59:10.837Z","updateTime":"2019-03-16T04:27:07.568Z"},{"name":"ice-application-management-admin","title":"应用管理系统","description":"该模板适用于应用管理类的管理后台，默认内置一个 Dashboard 页面，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/application-management-admin-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-application-management-admin","source":{"type":"npm","npm":"@icedesign/application-management-admin-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.8.9","@icedesign/container":"^1.x","@icedesign/data-binder":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/label":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.4.1","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.6.2","react":"^16.6.3","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1SeqCDOrpK1RjSZFhXXXSdXXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1SeqCDOrpK1RjSZFhXXXSdXXa-2872-1580.png","https://img.alicdn.com/tfs/TB1TFmEDMHqK1RjSZFgXXa7JXXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-09-27T16:32:46.526Z","updateTime":"2019-03-26T14:42:03.324Z"},{"name":"ice-commodity-management-admin","title":"商家管理系统","description":"该模板适用于商家类管理后台，布局方式采用左侧固定，右侧自适应方式，适合大量数据展示和界面操作","homepage":"https://unpkg.com/@icedesign/commodity-management-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-commodity-management-admin","source":{"type":"npm","npm":"@icedesign/commodity-management-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.9.5","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.2","enquire-js":"^0.1.2","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.2.0","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1cmQaCZbpK1RjSZFyXXX_qFXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1NtNrDxjaK1RjSZKzXXXVwXXa-2872-1582.png","https://img.alicdn.com/tfs/TB1jt7ZDgDqK1RjSZSyXXaxEVXa-2860-1580.png","https://img.alicdn.com/tfs/TB1oUpsDyLaK1RjSZFxXXamPFXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2019-01-21T04:24:43.738Z","updateTime":"2019-03-16T04:26:53.210Z"},{"name":"ice-operation-admin","title":"设备管理系统","description":"该模板适用于设备管理类的后台系统，内置列表管理页、表单新增编辑页及表单查看页，这三个页面可形成一个闭环","homepage":"https://unpkg.com/@icedesign/operation-admin-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-operation-admin","source":{"type":"npm","npm":"@icedesign/operation-admin-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.10.1","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.0.2","@icedesign/foundation-symbol":"^1.0.0","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"3.1.3","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1lRfswVYqK1RjSZLeXXbXppXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1HNEzDmzqK1RjSZPxXXc4tVXa-2872-1580.png","https://img.alicdn.com/tfs/TB1gucEDbvpK1RjSZFqXXcXUVXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-12-20T03:37:45.901Z","updateTime":"2019-03-16T04:26:51.507Z"},{"name":"ice-design-ecommerce","title":"电商管理系统","description":"该模板适用于电商类管理后台，布局方式采用左侧固定，右侧自适应方式，适合大量数据展示和界面操作","homepage":"https://unpkg.com/@icedesign/ecommerce-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-design-ecommerce","source":{"type":"npm","npm":"@icedesign/ecommerce-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.9.5","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.0.3","@icedesign/foundation-symbol":"^1.0.0","@icedesign/img":"^1.0.0","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.2","enquire-js":"^0.1.2","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.2.0","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1O_6jDOrpK1RjSZFhXXXSdXXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1O_6jDOrpK1RjSZFhXXXSdXXa-2860-1580.png","https://img.alicdn.com/tfs/TB1n1LhDNTpK1RjSZFGXXcHqFXa-2860-1580.png","https://img.alicdn.com/tfs/TB1Qk1mJxjaK1RjSZFAXXbdLFXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-05-04T08:55:06.423Z","updateTime":"2019-03-01T11:09:54.169Z"},{"name":"ice-voice-chat-admin","title":"语音对话系统","description":"该模板内置了丰富的区块，适用于智能语音对话类管理系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/voice-chat-admin-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-voice-chat-admin","source":{"type":"npm","npm":"@icedesign/voice-chat-admin-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/container":"^1.x","@icedesign/form-binder":"^0.1.7","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/label":"^1.x","@icedesign/layout":"^1.x","@icedesign/panel":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.4","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1WluIDH2pK1RjSZFsXXaNlXXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1WluIDH2pK1RjSZFsXXaNlXXa-2872-1580.png","https://img.alicdn.com/tfs/TB1xImLDMHqK1RjSZFgXXa7JXXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-10-10T03:13:25.874Z","updateTime":"2019-03-16T04:26:50.468Z"},{"name":"ice-hr-management-admin","title":"人力资源系统","description":"该模板适用于人力资源类的管理后台，默认内置丰富的图表和表格区块，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/hr-management-admin-scaffold/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-hr-management-admin","source":{"type":"npm","npm":"@icedesign/hr-management-admin-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@alifd/theme-1":"^0.0.7","@antv/data-set":"^0.8.9","@icedesign/container":"^1.x","@icedesign/data-binder":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/label":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","async-validator":"^1.10.1","bizcharts":"^3.4.1","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.6.2","react":"^16.6.3","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1i960CMHqK1RjSZFEXXcGMXXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1KGA3DgHqK1RjSZFgXXa7JXXa-2872-1580.png","https://img.alicdn.com/tfs/TB1QxQ3Da6qK1RjSZFmXXX0PFXa-2860-1580.png","https://img.alicdn.com/tfs/TB1Hws2DjTpK1RjSZKPXXa3UpXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2019-01-21T04:29:11.849Z","updateTime":"2019-03-27T07:51:44.459Z"},{"name":"ice-creator-admin","title":"创作平台","description":"该模板适用于创作者发布文章，帖子类的管理后台","homepage":"https://unpkg.com/@icedesign/creator-admin-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-creator-admin","source":{"type":"npm","npm":"@icedesign/creator-admin-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.8.9","@icedesign/container":"^1.x","@icedesign/form-binder":"^0.1.7","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.0","classnames":"^2.2.6","enquire-js":"0.1.x","moment":"^2.23.0","prop-types":"^15.6.2","react":"^16.4.2","react-document-title":"^2.0.3","react-dom":"^16.4.2","react-router":"^4.3.1","react-router-dom":"^4.3.1"},"screenshot":"https://img.alicdn.com/tfs/TB1zynrDHvpK1RjSZFqXXcXUVXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1zynrDHvpK1RjSZFqXXcXUVXa-2860-1580.png","https://img.alicdn.com/tfs/TB1O1jlDMDqK1RjSZSyXXaxEVXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-12-20T03:40:16.808Z","updateTime":"2019-03-16T04:27:00.400Z"},{"name":"ice-library-management-admin","title":"图书馆管理系统","description":"该模板内置了基础的表单和表格区块，适用于项目图书馆管理类系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/library-management-admin@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-library-management-admin","source":{"type":"npm","npm":"@icedesign/library-management-admin","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@alifd/theme-1":"0.0.6","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1Kw09JsbpK1RjSZFyXXX_qFXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1Kw09JsbpK1RjSZFyXXX_qFXa-2860-1580.png","https://img.alicdn.com/tfs/TB1NbF3JCzqK1RjSZFLXXcn2XXa-2860-1580.png","https://img.alicdn.com/tfs/TB18RGgJxYaK1RjSZFnXXa80pXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-10-10T03:13:25.716Z","updateTime":"2019-03-16T04:26:49.270Z"},{"name":"ice-asset-management-admin","title":"资产管理系统","description":"该模板内置了丰富的区块，适用于资产管理类的系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/asset-management-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-asset-management-admin","source":{"type":"npm","npm":"@icedesign/asset-management-scaffold","version":"2.0.5","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.8.9","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/icon":"^0.1.1","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.2","classname":"^0.0.0","classnames":"^2.2.5","enquire-js":"^0.1.2","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1bJCxJxnaK1RjSZFtXXbC2VXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1bJCxJxnaK1RjSZFtXXbC2VXa-2860-1580.png","https://img.alicdn.com/tfs/TB1pXF_JpzqK1RjSZSgXXcpAVXa-2860-1580.png","https://img.alicdn.com/tfs/TB1zox7JxTpK1RjSZR0XXbEwXXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-09-13T16:14:52.259Z","updateTime":"2019-03-16T04:26:49.976Z"},{"name":"ice-task-management-admin","title":"任务管理系统","description":"该模板内置了丰富的图表和表格区块，适用于项目任务管理类系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/task-management-admin-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-task-management-admin","source":{"type":"npm","npm":"@icedesign/task-management-admin-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.8.9","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.2","classnames":"^2.2.5","immutable":"^4.0.0-rc.12","is-hotkey":"^0.1.4","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2","slate":"^0.44.9","slate-plain-serializer":"^0.6.33","slate-react":"^0.21.15"},"screenshot":"https://img.alicdn.com/tfs/TB1TA65yAvoK1RjSZFwXXciCFXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1E1ffDSzqK1RjSZFLXXcn2XXa-2860-1580.png","https://img.alicdn.com/tfs/TB1xubGDNjaK1RjSZKzXXXVwXXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-09-27T07:01:30.757Z","updateTime":"2019-03-16T04:27:05.701Z"},{"name":"ice-algorithm-model-admin","title":"算法模型管理系统","description":"该模板适用于数据模型类的管理类后台，内置通用的介绍页和丰富的区块，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/algorithm-model-admin-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-algorithm-model-admin","source":{"type":"npm","npm":"@icedesign/algorithm-model-admin-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.9.6","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.2","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1R.aPDSzqK1RjSZFjXXblCFXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1R.aPDSzqK1RjSZFjXXblCFXa-2860-1580.png","https://img.alicdn.com/tfs/TB1p1mTDQvoK1RjSZFNXXcxMVXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-09-20T15:30:55.434Z","updateTime":"2019-03-16T04:26:50.597Z"},{"name":"ice-contract-management-admin","title":"合同管理系统","description":"该模板内置了高级表单搜索和表格区块，适用于合同管理类和多表格展示的系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/contract-management-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-contract-management-admin","source":{"type":"npm","npm":"@icedesign/contract-management-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","classnames":"^2.2.5","lodash.clonedeep":"^4.5.0","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1B_yLDSzqK1RjSZFHXXb3CpXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1B_yLDSzqK1RjSZFHXXb3CpXa-2872-1580.png","https://img.alicdn.com/tfs/TB1U.eLDSzqK1RjSZFHXXb3CpXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-09-20T15:30:55.399Z","updateTime":"2019-03-16T04:26:58.443Z"},{"name":"ice-usertrack-admin","title":"应用监控系统","description":"该模板内置了丰富的区块，适用于埋点治理的管理系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/usertrack-admin-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-usertrack-admin","source":{"type":"npm","npm":"@icedesign/usertrack-admin-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.8.9","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.2.2","classnames":"^2.2.5","enquire-js":"^0.1.2","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1LkGRDH2pK1RjSZFsXXaNlXXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1LkGRDH2pK1RjSZFsXXaNlXXa-2860-1580.png","https://img.alicdn.com/tfs/TB1YQNFcnZmx1VjSZFGXXax2XXa-2860-1580.png","https://img.alicdn.com/tfs/TB12JyeJsfpK1RjSZFOXXa6nFXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-09-06T12:04:05.619Z","updateTime":"2019-03-16T04:26:58.737Z"},{"name":"ice-builder-platform","title":"云构建平台","description":"该模板适用于云构建类的数据展示和管理后台","homepage":"https://unpkg.com/@icedesign/builder-platfrom-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-build-platfrom","source":{"type":"npm","npm":"@icedesign/builder-platfrom-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","classnames":"^2.2.5","highcharts":"^6.1.1","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-highcharts":"^16.0.2","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB16CTXx7voK1RjSZFNXXcxMVXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1dbmZDNTpK1RjSZFMXXbG_VXa-2860-1580.png","https://img.alicdn.com/tfs/TB1dbmZDNTpK1RjSZFMXXbG_VXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-08-09T13:47:44.552Z","updateTime":"2019-03-16T04:26:50.803Z"},{"name":"ice-design-schools","title":"学校管理系统","description":"该模板内置了丰富的区块，主要适用于类学校类的管理系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/schools-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-design-schools","source":{"type":"npm","npm":"@icedesign/schools-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@alifd/theme-1":"^0.0.7","@antv/data-set":"^0.8.9","@icedesign/container":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.1.0","classnames":"^2.2.5","enquire-js":"^0.1.2","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-countup":"^3.0.3","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1kk92ySrqK1RjSZK9XXXyypXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1kk92ySrqK1RjSZK9XXXyypXa-2872-1580.png","https://img.alicdn.com/tfs/TB1PNDlDOLaK1RjSZFxXXamPFXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-06-15T19:01:50.255Z","updateTime":"2019-03-16T04:27:04.750Z"},{"name":"ice-customer-analysis-admin","title":"客源分析管理系统","description":"该模板内置了丰富的图表和表格区块，适用于客源分析管理类系统，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/customer-analysis-admin-scaffold@latest/build/index.html","categories":["行业领域"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-customer-analysis-admin","source":{"type":"npm","npm":"@icedesign/customer-analysis-admin-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@antv/data-set":"^0.8.5","@icedesign/container":"^1.x","@icedesign/ellipsis":"^1.x","@icedesign/form-binder":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.1.3-beta.2","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.2.0","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB17_m3DOrpK1RjSZFhXXXSdXXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB17_m3DOrpK1RjSZFhXXXSdXXa-2860-1580.png","https://img.alicdn.com/tfs/TB1Hpu4DFzqK1RjSZSgXXcpAVXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-10-11T08:16:13.445Z","updateTime":"2019-03-16T04:26:56.022Z"},{"name":"ice-design-analysis","title":"电商类数据大盘","description":"该模板适用于可视化实时数据的大屏展示，默认只有一个页面，内置饼图、柱状图等图形","homepage":"https://unpkg.com/@icedesign/analysis-scaffold@latest/build/index.html","categories":["数据可视化"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-design-analysis","source":{"type":"npm","npm":"@icedesign/analysis-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.11.8","@icedesign/container":"^1.0.0","@icedesign/theme":"^1.x","echarts":"^4.0.4","echarts-for-react":"^2.0.8","moment":"^2.24.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2","react-text-loop":"^1.1.0"},"screenshot":"https://img.alicdn.com/tfs/TB1mvjPzNTpK1RjSZFGXXcHqFXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1mvjPzNTpK1RjSZFGXXcHqFXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-05-04T08:53:10.424Z","updateTime":"2019-03-16T04:26:53.430Z"},{"name":"ice-finance-dashboard","title":"金融销售类数据大盘","description":"该模板适用于金融销售类的数据展示大盘，搭配简洁的暗色主题风格和图表类展示","homepage":"https://unpkg.com/@icedesign/finance-dashboard@latest/build/index.html","categories":["数据可视化"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-finance-dashboard","source":{"type":"npm","npm":"@icedesign/finance-dashboard","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@alifd/theme-1":"^0.0.6","@antv/data-set":"^0.10.1","@antv/g2-brush":"^0.0.2","@icedesign/container":"^1.x","@icedesign/foundation-symbol":"^1.0.1","@icedesign/layout":"^1.x","@icedesign/theme":"^1.x","bizcharts":"^3.4.3","classnames":"^2.2.5","jquery":"^3.3.1","moment":"^2.24.0","prop-types":"^15.5.8","react":"^16.4.1","react-countup":"^4.0.0","react-dom":"^16.7.0","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1aCNzDbPpK1RjSZFFXXa5PpXa-2872-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1t4iBDHrpK1RjSZTEXXcWAVXa-2872-1580.png","https://img.alicdn.com/tfs/TB1zAOEDQvoK1RjSZFDXXXY3pXa-2872-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2019-01-21T04:31:14.626Z","updateTime":"2019-03-16T04:26:51.087Z"},{"name":"ice-design-dashboard","title":"销售类数据大盘","description":"该模板适用于电商类的数据展示大盘，搭配简洁的暗色主题风格和图表类展示","homepage":"https://unpkg.com/@icedesign/dashboard-scaffold@latest/build/index.html","categories":["数据可视化"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-design-dashboard","source":{"type":"npm","npm":"@icedesign/dashboard-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/theme":"^1.x","@antv/data-set":"^0.10.1","@icedesign/container":"^1.x","@icedesign/foundation-symbol":"^1.0.1","@icedesign/img":"^1.0.0","@icedesign/layout":"^1.x","bizcharts":"^3.4.3","classnames":"^2.2.5","jquery":"^3.3.1","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.7.0","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1NESlJxnaK1RjSZFtXXbC2VXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1NESlJxnaK1RjSZFtXXbC2VXa-2860-1580.png","https://img.alicdn.com/tfs/TB1a4N0JAzoK1RjSZFlXXai4VXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2019-01-21T04:20:25.861Z","updateTime":"2019-03-16T04:26:51.450Z"},{"name":"ice-yunqi-homepage","title":"云栖大会官网","description":"云栖大会官方首页模板，适用于信息展示类的场景","homepage":"https://unpkg.com/@icedesign/yunqi-homepage-scaffold@latest/build/index.html","categories":["官网模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-yunqi-homepage","source":{"type":"npm","npm":"@icedesign/yunqi-homepage-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/theme":"^1.x","@icedesign/container":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/layout":"^1.x","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.5.8","rc-queue-anim":"^1.6.5","rc-scroll-anim":"^2.5.5","rc-texty":"^0.1.1","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2","react-slick":"^0.23.1","slick-carousel":"^1.8.1"},"screenshot":"https://img.alicdn.com/tfs/TB1ZuTBtbwrBKNjSZPcXXXpapXa-2840-1596.png","screenshots":["https://img.alicdn.com/tfs/TB1ZuTBtbwrBKNjSZPcXXXpapXa-2840-1596.png","https://img.alicdn.com/tfs/TB1qrh9Jr2pK1RjSZFsXXaNlXXa-2860-1580.png","https://img.alicdn.com/tfs/TB1Qc1XJpzqK1RjSZFCXXbbxVXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-08-30T11:00:40.082Z","updateTime":"2019-03-16T04:27:01.973Z"},{"name":"ice-scroll-screen-homepage","title":"云栖极客派官网","description":"全屏展示的首页模板，支持锚点跳转定位和内置多种动画效果","homepage":"https://unpkg.com/@icedesign/scroll-screen-homepage-scaffold@latest/build/index.html","categories":["官网模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-scroll-screen-homepage","source":{"type":"npm","npm":"@icedesign/scroll-screen-homepage-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/theme":"^1.x","@icedesign/container":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/layout":"^1.x","classnames":"^2.2.5","moment":"^2.23.0","prop-types":"^15.5.8","rc-animate":"^2.4.4","rc-queue-anim":"^1.6.5","rc-scroll-anim":"^2.5.5","rc-texty":"^0.1.1","rc-tween-one":"^2.2.3","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2","react-slick":"^0.23.1","slick-carousel":"^1.8.1"},"screenshot":"https://img.alicdn.com/tfs/TB1A0bMtRsmBKNjSZFsXXaXSVXa-2840-1596.png","screenshots":["https://img.alicdn.com/tfs/TB1A0bMtRsmBKNjSZFsXXaXSVXa-2840-1596.png","https://img.alicdn.com/tfs/TB1O05aJpzqK1RjSZFvXXcB7VXa-2860-1580.png","https://img.alicdn.com/tfs/TB1DxX7JCzqK1RjSZFLXXcn2XXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-08-30T11:00:41.957Z","updateTime":"2019-03-16T04:27:52.349Z"},{"name":"ice-universal-homepage","title":"通用型官网","description":"该模板适用于产品的首页介绍，默认只有一个页面，使用时需要根据需求进行删除和添加","homepage":"https://unpkg.com/@icedesign/universal-homepage-scaffold@latest/build/index.html","categories":["官网模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-universal-homepage","source":{"type":"npm","npm":"@icedesign/universal-homepage-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/theme":"^1.x","@antv/data-set":"^0.9.6","@icedesign/container":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","bizcharts":"^3.2.4","classnames":"^2.2.5","foundation-symbol":"^0.1.4","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1npsvdSzqK1RjSZFpXXakSXXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1npsvdSzqK1RjSZFpXXakSXXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-09-27T16:50:38.020Z","updateTime":"2019-03-16T04:26:50.961Z"},{"name":"iceworks-homepage","title":"Iceworks 官网","description":"该模板适用于工具类产品的首页介绍，默认内置一个页面和不同风格的展示区块","homepage":"https://unpkg.com/@icedesign/iceworks-homepage-scaffold@latest/build/index.html","categories":["官网模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-design-iceworks","source":{"type":"npm","npm":"@icedesign/iceworks-homepage-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/theme":"^1.x","@icedesign/container":"^1.x","@icedesign/layout":"^1.x","moment":"^2.23.0","prop-types":"^15.5.8","rc-queue-anim":"^1.5.0","rc-scroll-anim":"^2.5.1","react":"^16.4.1","react-document-title":"^2.0.3","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1hRY5qqmWBuNjy1XaXXXCbXXa-2840-1596.png","screenshots":["https://img.alicdn.com/tfs/TB1hRY5qqmWBuNjy1XaXXXCbXXa-2840-1596.png","https://img.alicdn.com/tfs/TB1QWt7JzDpK1RjSZFrXXa78VXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-05-10T14:31:14.379Z","updateTime":"2019-03-16T04:27:01.163Z"},{"name":"ice-website-homepage","title":"飞冰官网","description":"该模板适用于产品类的首页介绍，默认内置一个页面和五个不同风格的展示区块","homepage":"https://unpkg.com/@icedesign/website-homepage-scaffold@latest/build/index.html","categories":["官网模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-website-homepage","source":{"type":"npm","npm":"@icedesign/website-homepage-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/theme":"^1.x","@icedesign/container":"^1.x","@icedesign/foundation-symbol":"^1.x","@icedesign/img":"^1.x","@icedesign/layout":"^1.x","classnames":"^2.2.5","enquire-js":"^0.1.2","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-document-title":"^2.0.3","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1PgGdJAvoK1RjSZFNXXcxMVXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1PgGdJAvoK1RjSZFNXXcxMVXa-2860-1580.png","https://img.alicdn.com/tfs/TB16wmkJxjaK1RjSZFAXXbdLFXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-05-04T08:55:09.188Z","updateTime":"2019-03-16T04:27:05.704Z"},{"name":"ice-creator-landingpage","title":"创作者平台官网","description":"该模板适用于平台类登陆引导页，默认内置一个页面和五个不同风格的展示区块","homepage":"https://unpkg.com/@icedesign/creator-landingpage-scaffold@latest/build/index.html","categories":["官网模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-creator-landingpage","source":{"type":"npm","npm":"@icedesign/creator-landingpage-scaffold","version":"2.0.2","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/theme":"^1.x","@icedesign/container":"^1.x","@icedesign/layout":"^1.x","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1WcWtqMmTBuNjy1XbXXaMrVXa-2840-1596.png","screenshots":["https://img.alicdn.com/tfs/TB1WcWtqMmTBuNjy1XbXXaMrVXa-2840-1596.png","https://img.alicdn.com/tfs/TB1Y5ygJAvoK1RjSZFDXXXY3pXa-2860-1580.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-05-10T14:31:18.161Z","updateTime":"2019-03-16T04:26:59.111Z"},{"name":"ice-open-platform-landingpage","title":"开放平台官网","description":"该模板适用于开放平台的引导页，默认内置一个页面和六个不同风格的展示区块","homepage":"https://unpkg.com/@icedesign/open-platform-scaffold@latest/build/index.html","categories":["官网模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-open-platform-landingpage","source":{"type":"npm","npm":"@icedesign/open-platform-scaffold","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/theme":"^1.x","@icedesign/container":"^1.x","@icedesign/layout":"^1.x","moment":"^2.23.0","prop-types":"^15.5.8","react":"^16.4.1","react-dom":"^16.4.1","react-router-dom":"^4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1F3SAuGmWBuNjy1XaXXXCbXXa-2840-1596.png","screenshots":["https://img.alicdn.com/tfs/TB1F3SAuGmWBuNjy1XaXXXCbXXa-2840-1596.png"],"builder":"ice-scripts","customConfig":null,"publishTime":"2018-05-31T10:44:34.279Z","updateTime":"2019-03-16T04:27:11.878Z"},{"name":"create-react-app","title":"Create React App","description":"该模板基于 create-react-app 创建，使用 react-app-rewired 进行自定义配置，支持按需引入 ICE 基础组件，添加区块，主要适用于 0 到 1 开始搭建项目","homepage":"https://alibaba.github.io/ice/scaffold-preview/create-react-app.html","categories":["基础模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/create-react-app","source":{"type":"npm","npm":"@icedesign/scaffold-create-react-app","version":"2.0.1","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@icedesign/theme":"^1.x","moment":"^2.23.0","react":"^16.2.0","react-dom":"^16.2.0"},"screenshot":"https://img.alicdn.com/tfs/TB1zu_AeCBYBeNjy0FeXXbnmFXa-1920-1080.png","screenshots":["https://img.alicdn.com/tfs/TB1zu_AeCBYBeNjy0FeXXbnmFXa-1920-1080.png"],"customConfig":null,"publishTime":"2018-02-24T04:38:50.125Z","updateTime":"2019-01-24T17:11:34.711Z"},{"name":"light-bootstrap-dashboard","title":"Light Bootstrap Dashboard","description":"该模板基于社区的 light-bootstrap-dashboard 改造而成，默认使用 react-bootstrap 组件和 react-scripts 构建，同时也支持飞冰基础组件和区块的使用，支持 Iceworks 一键创建项目和完整的 GUI 操作","homepage":"https://alibaba.github.io/ice/scaffold-preview/ice-light-bootstrap-dashboard/index.html","categories":["社区模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-light-bootstrap-dashboard","source":{"type":"npm","npm":"@icedesign/ice-light-bootstrap-dashboard","version":"2.0.0","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","bootstrap":"3.3.7","chartist":"0.10.1","moment":"^2.23.0","react":"16.2.0","react-bootstrap":"0.32.1","react-chartist":"0.13.1","react-dom":"16.2.0","react-notification-system":"0.2.17","react-router-dom":"4.2.2"},"screenshot":"https://img.alicdn.com/tfs/TB1265Oay6guuRjy1XdXXaAwpXa-2840-1596.png","screenshots":["https://img.alicdn.com/tfs/TB1265Oay6guuRjy1XdXXaAwpXa-2840-1596.png"],"customConfig":null,"publishTime":"2018-07-29T15:42:26.684Z","updateTime":"2019-01-24T17:34:25.987Z"},{"name":"creative-dashboard","title":"Creative Dashboard","description":"该模板基于社区的 now-ui-dashboard-react 改造而成，默认使用 react-bootstrap 组件和 react-scripts 构建，同时也支持飞冰基础组件和区块的使用，支持 Iceworks 一键创建项目和完整的 GUI 操作","homepage":"https://alibaba.github.io/ice/scaffold-preview/ice-creative-dashboard/index.html","categories":["社区模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-creative-dashboard","source":{"type":"npm","npm":"@icedesign/creative-dashboard","version":"2.0.0","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","bootstrap":"4.0.0-beta","chart.js":"2.7.1","history":"4.7.2","moment":"^2.23.0","perfect-scrollbar":"1.3.0","react":"16.1.0","react-chartjs-2":"2.7.0","react-dom":"16.1.0","react-notification-alert":"0.0.7","react-router-dom":"4.2.2","reactstrap":"5.0.0-alpha.4"},"screenshot":"https://img.alicdn.com/tfs/TB1BOaQb56guuRjy1XdXXaAwpXa-2840-1596.png","screenshots":["https://img.alicdn.com/tfs/TB1BOaQb56guuRjy1XdXXaAwpXa-2840-1596.png"],"customConfig":null,"publishTime":"2018-08-05T16:04:51.667Z","updateTime":"2019-01-24T17:34:26.407Z"},{"name":"coreui-admin","title":"CoreUI Admin","description":"该模板基于社区的 CoreUI 改造而成，使用 react-scripts 构建，支持 CoreUI 的所有功能，同时也支持飞冰基础组件和区块的使用， 支持 Iceworks 一键创建项目和完整的 GUI 操作","homepage":"https://alibaba.github.io/ice/scaffold-preview/ice-coreui-admin/index.html","categories":["社区模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-coreui-admin","source":{"type":"npm","npm":"@icedesign/coreui-admin-template","version":"2.0.0","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@coreui/coreui":"^2.0.4","@coreui/coreui-plugin-chartjs-custom-tooltips":"^1.2.0","@coreui/icons":"0.2.0","@coreui/react":"^2.0.4","bootstrap":"^4.1.1","chart.js":"^2.7.2","classnames":"^2.2.6","core-js":"^2.5.7","enzyme":"^3.3.0","enzyme-adapter-react-16":"^1.1.1","flag-icon-css":"^3.0.0","font-awesome":"^4.7.0","moment":"^2.23.0","prop-types":"^15.6.2","react":"^16.4.1","react-chartjs-2":"^2.7.2","react-dom":"^16.4.1","react-router-dom":"^4.3.1","react-test-renderer":"^16.4.1","reactstrap":"^6.1.0","simple-line-icons":"^2.4.1"},"screenshot":"https://img.alicdn.com/tfs/TB1hoK.ETtYBeNjy1XdXXXXyVXa-2840-1596.png","screenshots":["https://img.alicdn.com/tfs/TB1hoK.ETtYBeNjy1XdXXXXyVXa-2840-1596.png"],"customConfig":null,"publishTime":"2018-07-16T01:50:48.002Z","updateTime":"2019-01-24T17:34:27.368Z"},{"name":"material-dashboard","title":"Material Dashboard","description":"该模板基于社区的 material-dashboard-react 改造而成，默认使用 material-ui 组件和 react-scripts 构建，同时也支持飞冰基础组件和区块的使用，支持 Iceworks 一键创建项目和完整的 GUI 操作","homepage":"https://alibaba.github.io/ice/scaffold-preview/ice-material-dashboard/index.html","categories":["社区模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-material-dashboard","source":{"type":"npm","npm":"@icedesign/ice-material-dashboard-scaffold","version":"2.0.0","registry":"http://registry.npmjs.com"},"dependencies":{"@alifd/next":"^1.x","@material-ui/core":"1.2.1","@material-ui/icons":"1.1.0","@types/googlemaps":"3.30.9","@types/markerclustererplus":"2.1.33","ajv":"6.5.1","chartist":"0.10.1","classnames":"2.2.6","moment":"^2.23.0","perfect-scrollbar":"1.4.0","react":"^16.4.0","react-chartist":"^0.13.1","react-dom":"^16.4.0","react-router-dom":"^4.3.1","react-swipeable-views":"0.12.13"},"screenshot":"https://img.alicdn.com/tfs/TB1lJJDFntYBeNjy1XdXXXXyVXa-2840-1596.png","screenshots":["https://img.alicdn.com/tfs/TB1lJJDFntYBeNjy1XdXXXXyVXa-2840-1596.png"],"customConfig":null,"publishTime":"2018-07-19T06:31:02.817Z","updateTime":"2019-01-24T17:34:21.192Z"},{"name":"opensource-site","title":"Docsite","description":"该模板基于 docsite，适用于开源站点类的场景，支持 markdown 文档和中英文国际化等功能。","homepage":"https://alibaba.github.io/ice/scaffold-preview/ice-opensource-site/index.html","categories":["社区模板"],"repository":"https://github.com/ice-lab/react-materials/tree/master/scaffolds/ice-opensource-site","source":{"type":"npm","npm":"@icedesign/opensource-site-scaffold","version":"2.0.0","registry":"http://registry.npmjs.com"},"dependencies":{"classnames":"^2.2.5","core-decorators":"^0.20.0","js-cookie":"^2.2.0","react":"^15.4.2","react-dom":"^15.4.2","react-scroll":"^1.7.9","react-tilt":"^0.1.4","whatwg-fetch":"^2.0.4"},"screenshot":"https://img.alicdn.com/tfs/TB1Smx6JAvoK1RjSZFwXXciCFXa-2860-1580.png","screenshots":["https://img.alicdn.com/tfs/TB1Smx6JAvoK1RjSZFwXXciCFXa-2860-1580.png","https://img.alicdn.com/tfs/TB1.3hYJCzqK1RjSZFjXXblCFXa-2860-1580.png"],"customConfig":null,"publishTime":"2018-11-06T03:09:02.575Z","updateTime":"2019-03-01T11:13:27.120Z"}]};

/***/ }),
/* 160 */,
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function FileStatusSummary (path, index, working_dir) {
   this.path = path;
   this.index = index;
   this.working_dir = working_dir;

   if ('R' === index + working_dir) {
      var detail = FileStatusSummary.fromPathRegex.exec(path) || [null, path, path];
      this.from = detail[1];
      this.path = detail[2];
   }
}

FileStatusSummary.fromPathRegex = /^(.+) -> (.+)$/;

FileStatusSummary.prototype = {
   path: '',
   from: ''
};

module.exports = FileStatusSummary;


/***/ }),
/* 162 */
/***/ (function(module, exports) {


module.exports = PullSummary;

/**
 * The PullSummary is returned as a response to getting `git().pull()`
 *
 * @constructor
 */
function PullSummary () {
   this.files = [];
   this.insertions = {};
   this.deletions = {};

   this.summary = {
      changes: 0,
      insertions: 0,
      deletions: 0
   };

   this.created = [];
   this.deleted = [];
}

/**
 * Array of files that were created
 * @type {string[]}
 */
PullSummary.prototype.created = null;

/**
 * Array of files that were deleted
 * @type {string[]}
 */
PullSummary.prototype.deleted = null;

/**
 * The array of file paths/names that have been modified in any part of the pulled content
 * @type {string[]}
 */
PullSummary.prototype.files = null;

/**
 * A map of file path to number to show the number of insertions per file.
 * @type {Object}
 */
PullSummary.prototype.insertions = null;

/**
 * A map of file path to number to show the number of deletions per file.
 * @type {Object}
 */
PullSummary.prototype.deletions = null;

/**
 * Overall summary of changes/insertions/deletions and the number associated with each
 * across all content that was pulled.
 * @type {Object}
 */
PullSummary.prototype.summary = null;

PullSummary.FILE_UPDATE_REGEX = /^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/;
PullSummary.SUMMARY_REGEX = /(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/;
PullSummary.ACTION_REGEX = /(create|delete) mode \d+ (.+)/;

PullSummary.parse = function (text) {
   var pullSummary = new PullSummary;
   var lines = text.split('\n');

   while (lines.length) {
      var line = lines.shift().trim();
      if (!line) {
         continue;
      }

      update(pullSummary, line) || summary(pullSummary, line) || action(pullSummary, line);
   }

   return pullSummary;
};

function update (pullSummary, line) {

   var update = PullSummary.FILE_UPDATE_REGEX.exec(line);
   if (!update) {
      return false;
   }

   pullSummary.files.push(update[1]);

   var insertions = update[2].length;
   if (insertions) {
      pullSummary.insertions[update[1]] = insertions;
   }

   var deletions = update[3].length;
   if (deletions) {
      pullSummary.deletions[update[1]] = deletions;
   }

   return true;
}

function summary (pullSummary, line) {
   if (!pullSummary.files.length) {
      return false;
   }

   var update = PullSummary.SUMMARY_REGEX.exec(line);
   if (!update || (update[3] === undefined && update[5] === undefined)) {
      return false;
   }

   pullSummary.summary.changes = +update[1] || 0;
   pullSummary.summary.insertions = +update[3] || 0;
   pullSummary.summary.deletions = +update[5] || 0;

   return true;
}

function action (pullSummary, line) {

   var match = PullSummary.ACTION_REGEX.exec(line);
   if (!match) {
      return false;
   }

   var file = match[2];

   if (pullSummary.files.indexOf(file) < 0) {
      pullSummary.files.push(file);
   }

   var container = (match[1] === 'create') ? pullSummary.created : pullSummary.deleted;
   container.push(file);

   return true;
}


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 164 */
/***/ (function(module, exports) {

//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>
	Doctype: "doctype",

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

/*
	pseudo selectors

	---

	they are available in two forms:
	* filters called when the selector
	  is compiled and return a function
	  that needs to return next()
	* pseudos get called on execution
	  they need to return a boolean
*/

var DomUtils    = __webpack_require__(76),
    isTag       = DomUtils.isTag,
    getText     = DomUtils.getText,
    getParent   = DomUtils.getParent,
    getChildren = DomUtils.getChildren,
    getSiblings = DomUtils.getSiblings,
    hasAttrib   = DomUtils.hasAttrib,
    getName     = DomUtils.getName,
    getAttribute= DomUtils.getAttributeValue,
    getNCheck   = __webpack_require__(602),
    checkAttrib = __webpack_require__(280).rules.equals,
    BaseFuncs   = __webpack_require__(97),
    trueFunc    = BaseFuncs.trueFunc,
    falseFunc   = BaseFuncs.falseFunc;

//helper methods
function getFirstElement(elems){
	for(var i = 0; elems && i < elems.length; i++){
		if(isTag(elems[i])) return elems[i];
	}
}

function getAttribFunc(name, value){
	var data = {name: name, value: value};
	return function attribFunc(next){
		return checkAttrib(next, data);
	};
}

function getChildFunc(next){
	return function(elem){
		return !!getParent(elem) && next(elem);
	};
}

var filters = {
	contains: function(next, text){
		return function contains(elem){
			return next(elem) && getText(elem).indexOf(text) >= 0;
		};
	},
	icontains: function(next, text){
		var itext = text.toLowerCase();
		return function icontains(elem){
			return next(elem) &&
				getText(elem).toLowerCase().indexOf(itext) >= 0;
		};
	},

	//location specific methods
	"nth-child": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthChild(elem){
			var siblings = getSiblings(elem);

			for(var i = 0, pos = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					else pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-last-child": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthLastChild(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					else pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-of-type": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthOfType(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(getName(siblings[i]) === getName(elem)) pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-last-of-type": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthLastOfType(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(getName(siblings[i]) === getName(elem)) pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},

    //TODO determine the actual root element
    root: function(next){
        return function(elem){
            return !getParent(elem) && next(elem);
        };
    },

    scope: function(next, rule, options, context){
        if(!context || context.length === 0){
            //equivalent to :root
            return filters.root(next);
        }

        if(context.length === 1){
            //NOTE: can't be unpacked, as :has uses this for side-effects
            return function(elem){
                return context[0] === elem && next(elem);
            };
        }

        return function(elem){
            return context.indexOf(elem) >= 0 && next(elem);
        };
    },

	//jQuery extensions (others follow as pseudos)
	checkbox: getAttribFunc("type", "checkbox"),
	file: getAttribFunc("type", "file"),
	password: getAttribFunc("type", "password"),
	radio: getAttribFunc("type", "radio"),
	reset: getAttribFunc("type", "reset"),
	image: getAttribFunc("type", "image"),
	submit: getAttribFunc("type", "submit")
};

//while filters are precompiled, pseudos get called when they are needed
var pseudos = {
	empty: function(elem){
		return !getChildren(elem).some(function(elem){
			return isTag(elem) || elem.type === "text";
		});
	},

	"first-child": function(elem){
		return getFirstElement(getSiblings(elem)) === elem;
	},
	"last-child": function(elem){
		var siblings = getSiblings(elem);

		for(var i = siblings.length - 1; i >= 0; i--){
			if(siblings[i] === elem) return true;
			if(isTag(siblings[i])) break;
		}

		return false;
	},
	"first-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) return true;
				if(getName(siblings[i]) === getName(elem)) break;
			}
		}

		return false;
	},
	"last-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = siblings.length-1; i >= 0; i--){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) return true;
				if(getName(siblings[i]) === getName(elem)) break;
			}
		}

		return false;
	},
	"only-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0, j = siblings.length; i < j; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) continue;
				if(getName(siblings[i]) === getName(elem)) return false;
			}
		}

		return true;
	},
	"only-child": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i]) && siblings[i] !== elem) return false;
		}

		return true;
	},

	//:matches(a, area, link)[href]
	link: function(elem){
		return hasAttrib(elem, "href");
	},
	visited: falseFunc, //seems to be a valid implementation
	//TODO: :any-link once the name is finalized (as an alias of :link)

	//forms
	//to consider: :target

	//:matches([selected], select:not([multiple]):not(> option[selected]) > option:first-of-type)
	selected: function(elem){
		if(hasAttrib(elem, "selected")) return true;
		else if(getName(elem) !== "option") return false;

		//the first <option> in a <select> is also selected
		var parent = getParent(elem);

		if(
			!parent ||
			getName(parent) !== "select" ||
			hasAttrib(parent, "multiple")
		) return false;

		var siblings = getChildren(parent),
			sawElem  = false;

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem){
					sawElem = true;
				} else if(!sawElem){
					return false;
				} else if(hasAttrib(siblings[i], "selected")){
					return false;
				}
			}
		}

		return sawElem;
	},
	//https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
	//:matches(
	//  :matches(button, input, select, textarea, menuitem, optgroup, option)[disabled],
	//  optgroup[disabled] > option),
	// fieldset[disabled] * //TODO not child of first <legend>
	//)
	disabled: function(elem){
		return hasAttrib(elem, "disabled");
	},
	enabled: function(elem){
		return !hasAttrib(elem, "disabled");
	},
	//:matches(:matches(:radio, :checkbox)[checked], :selected) (TODO menuitem)
	checked: function(elem){
		return hasAttrib(elem, "checked") || pseudos.selected(elem);
	},
	//:matches(input, select, textarea)[required]
	required: function(elem){
		return hasAttrib(elem, "required");
	},
	//:matches(input, select, textarea):not([required])
	optional: function(elem){
		return !hasAttrib(elem, "required");
	},

	//jQuery extensions

	//:not(:empty)
	parent: function(elem){
		return !pseudos.empty(elem);
	},
	//:matches(h1, h2, h3, h4, h5, h6)
	header: function(elem){
		var name = getName(elem);
		return name === "h1" ||
		       name === "h2" ||
		       name === "h3" ||
		       name === "h4" ||
		       name === "h5" ||
		       name === "h6";
	},

	//:matches(button, input[type=button])
	button: function(elem){
		var name = getName(elem);
		return name === "button" ||
		       name === "input" &&
		       getAttribute(elem, "type") === "button";
	},
	//:matches(input, textarea, select, button)
	input: function(elem){
		var name = getName(elem);
		return name === "input" ||
		       name === "textarea" ||
		       name === "select" ||
		       name === "button";
	},
	//input:matches(:not([type!='']), [type='text' i])
	text: function(elem){
		var attr;
		return getName(elem) === "input" && (
			!(attr = getAttribute(elem, "type")) ||
			attr.toLowerCase() === "text"
		);
	}
};

function verifyArgs(func, name, subselect){
	if(subselect === null){
		if(func.length > 1 && name !== "scope"){
			throw new SyntaxError("pseudo-selector :" + name + " requires an argument");
		}
	} else {
		if(func.length === 1){
			throw new SyntaxError("pseudo-selector :" + name + " doesn't have any arguments");
		}
	}
}

//FIXME this feels hacky
var re_CSS3 = /^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;

module.exports = {
	compile: function(next, data, options, context){
		var name = data.name,
			subselect = data.data;

		if(options && options.strict && !re_CSS3.test(name)){
			throw SyntaxError(":" + name + " isn't part of CSS3");
		}

		if(typeof filters[name] === "function"){
			verifyArgs(filters[name], name,  subselect);
			return filters[name](next, subselect, options, context);
		} else if(typeof pseudos[name] === "function"){
			var func = pseudos[name];
			verifyArgs(func, name, subselect);

			if(next === trueFunc) return func;

			return function pseudoArgs(elem){
				return func(elem, subselect) && next(elem);
			};
		} else {
			throw new SyntaxError("unmatched pseudo-class :" + name);
		}
	},
	filters: filters,
	pseudos: pseudos
};


/***/ }),
/* 166 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.3
var SpecialString, fn, i, len, prop, ref;

module.exports = SpecialString = (function() {
  var self;

  self = SpecialString;

  SpecialString._tabRx = /^\t/;

  SpecialString._tagRx = /^<[^>]+>/;

  SpecialString._quotedHtmlRx = /^&(gt|lt|quot|amp|apos|sp);/;

  function SpecialString(str) {
    if (!(this instanceof self)) {
      return new self(str);
    }
    this._str = String(str);
    this._len = 0;
  }

  SpecialString.prototype._getStr = function() {
    return this._str;
  };

  SpecialString.prototype.set = function(str) {
    this._str = String(str);
    return this;
  };

  SpecialString.prototype.clone = function() {
    return new SpecialString(this._str);
  };

  SpecialString.prototype.isEmpty = function() {
    return this._str === '';
  };

  SpecialString.prototype.isOnlySpecialChars = function() {
    return !this.isEmpty() && this.length === 0;
  };

  SpecialString.prototype._reset = function() {
    return this._len = 0;
  };

  SpecialString.prototype.splitIn = function(limit, trimLeftEachLine) {
    var buffer, bufferLength, justSkippedSkipChar, lines;
    if (trimLeftEachLine == null) {
      trimLeftEachLine = false;
    }
    buffer = '';
    bufferLength = 0;
    lines = [];
    justSkippedSkipChar = false;
    self._countChars(this._str, function(char, charLength) {
      if (bufferLength > limit || bufferLength + charLength > limit) {
        lines.push(buffer);
        buffer = '';
        bufferLength = 0;
      }
      if (bufferLength === 0 && char === ' ' && !justSkippedSkipChar && trimLeftEachLine) {
        return justSkippedSkipChar = true;
      } else {
        buffer += char;
        bufferLength += charLength;
        return justSkippedSkipChar = false;
      }
    });
    if (buffer.length > 0) {
      lines.push(buffer);
    }
    return lines;
  };

  SpecialString.prototype.trim = function() {
    return new SpecialString(this.str.trim());
  };

  SpecialString.prototype.trimLeft = function() {
    return new SpecialString(this.str.replace(/^\s+/, ''));
  };

  SpecialString.prototype.trimRight = function() {
    return new SpecialString(this.str.replace(/\s+$/, ''));
  };

  SpecialString.prototype._getLength = function() {
    var sum;
    sum = 0;
    self._countChars(this._str, function(char, charLength) {
      sum += charLength;
    });
    return sum;
  };

  SpecialString.prototype.cut = function(from, to, trimLeft) {
    var after, before, cur, cut;
    if (trimLeft == null) {
      trimLeft = false;
    }
    if (to == null) {
      to = this.length;
    }
    from = parseInt(from);
    if (from >= to) {
      throw Error("`from` shouldn't be larger than `to`");
    }
    before = '';
    after = '';
    cut = '';
    cur = 0;
    self._countChars(this._str, (function(_this) {
      return function(char, charLength) {
        if (_this.str === 'ab<tag>') {
          console.log(charLength, char);
        }
        if (cur === from && char.match(/^\s+$/) && trimLeft) {
          return;
        }
        if (cur < from) {
          before += char;
        } else if (cur < to || cur + charLength <= to) {
          cut += char;
        } else {
          after += char;
        }
        cur += charLength;
      };
    })(this));
    this._str = before + after;
    this._reset();
    return SpecialString(cut);
  };

  SpecialString._countChars = function(text, cb) {
    var char, charLength, m;
    while (text.length !== 0) {
      if (m = text.match(self._tagRx)) {
        char = m[0];
        charLength = 0;
        text = text.substr(char.length, text.length);
      } else if (m = text.match(self._quotedHtmlRx)) {
        char = m[0];
        charLength = 1;
        text = text.substr(char.length, text.length);
      } else if (text.match(self._tabRx)) {
        char = "\t";
        charLength = 8;
        text = text.substr(1, text.length);
      } else {
        char = text[0];
        charLength = 1;
        text = text.substr(1, text.length);
      }
      cb.call(null, char, charLength);
    }
  };

  return SpecialString;

})();

ref = ['str', 'length'];
fn = function() {
  var methodName;
  methodName = '_get' + prop[0].toUpperCase() + prop.substr(1, prop.length);
  return SpecialString.prototype.__defineGetter__(prop, function() {
    return this[methodName]();
  });
};
for (i = 0, len = ref.length; i < len; i++) {
  prop = ref[i];
  fn();
}


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(186);
var bytesToUuid = __webpack_require__(187);

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ansiRegex = __webpack_require__(632)();

module.exports = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

var v1 = __webpack_require__(167);
var v4 = __webpack_require__(104);

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(499),
    primaryColorDeltas = _require.primaryColorDeltas,
    secondaryLightDelta = _require.secondaryLightDelta,
    secondaryLighterDelta = _require.secondaryLighterDelta;

var transfromColor = __webpack_require__(500);
/**
 * 主品牌色变量计算
 * @param {color} primaryColor
 * @example
 * [
 * '#ddeaff',
 * '#f7faff',
 * '#c9ddff',
 * '#9bc3ff',
 * '#86b4fe',
 * '#3080fe',
 * '#54a0fd',
 * '#327dff',
 * '#0b59d9',
 * '#0141ee'
 * ]
 */


function calcPrimaryColors() {
  var primaryBaseColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#3080FE';
  var primaryColors = new Array(10); // pre define 10 colors

  for (var i = 0; i < primaryColorDeltas.length; i++) {
    primaryColors[i] = transfromColor(primaryBaseColor, primaryColorDeltas[i]);
  }

  return primaryColors;
}
/**
 * 次品牌色变量计算
 * @param {color} secondaryBaseColor
 * @example
 * [ '#FFC107', '#ffe00e', '#ffe114' ]
 */


function calcSecondaryColor() {
  var secondaryBaseColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#FFC107';
  // 主副色
  var lightColor = transfromColor(secondaryBaseColor, secondaryLightDelta); // 副副色 (浅)

  var lighterColor = transfromColor(secondaryBaseColor, secondaryLighterDelta);
  return [secondaryBaseColor, lightColor, lighterColor];
}

module.exports = {
  calcPrimaryColors: calcPrimaryColors,
  calcSecondaryColor: calcSecondaryColor
};

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var throttle = __webpack_require__(539);

function onRequest(context) {
    // Reset dynamic stuff
    context.startedAt = null;

    context.state = context.request.progressState = null;

    context.delayTimer && clearTimeout(context.delayTimer);
    context.delayTimer = null;
}

function onResponse(context, response) {
    // Mark start timestamp
    context.startedAt = Date.now();

    // Create state
    // Also expose the state throught the request
    // See https://github.com/IndigoUnited/node-request-progress/pull/2/files
    context.state = context.request.progressState = {
        time: {
            elapsed: 0,
            remaining: null
        },
        speed: null,
        percentage: null,
        size: {
            total: Number(response.headers[context.options.lengthHeader]) || null,
            transferred: 0
        }
    };

    // Delay the progress report
    context.delayTimer = setTimeout(function () {
        context.delayTimer = null;
    }, context.options.delay);
}

function onData(context, data) {
    context.state.size.transferred += data.length;

    !context.delayTimer && context.reportState();
}

function onEnd(context) {
    /* istanbul ignore if */
    if (context.delayTimer) {
        clearTimeout(context.delayTimer);
        context.delayTimer = null;
    }

    context.request.progressState = context.request.progressContext = null;
}

function reportState(context) {
    var state;

    // Do nothing if still within the initial delay or if already finished
    if (context.delayTimer || !context.request.progressState) {
        return;
    }

    state = context.state;
    state.time.elapsed = (Date.now() - context.startedAt) / 1000;

    // Calculate speed only if 1s has passed
    if (state.time.elapsed >= 1) {
        state.speed = state.size.transferred / state.time.elapsed;
    }

    // Calculate percentage & remaining only if we know the total size
    if (state.size.total != null) {
        state.percentage = Math.min(state.size.transferred, state.size.total) / state.size.total;

        if (state.speed != null) {
            state.time.remaining = state.percentage !== 1 ? (state.size.total / state.speed) - state.time.elapsed : 0;
            state.time.remaining = Math.round(state.time.remaining * 1000) / 1000;  // Round to 4 decimals
        }
    }

    context.request.emit('progress', state);
}


function requestProgress(request, options) {
    var context;

    if (request.progressContext) {
        return request;
    }

    if (request.response) {
        throw new Error('Already got response, it\'s too late to track progress');
    }

    // Parse options
    options = options || {};
    options.throttle = options.throttle == null ? 1000 : options.throttle;
    options.delay = options.delay || 0;
    options.lengthHeader = options.lengthHeader || 'content-length';

    // Create context
    context = {};
    context.request = request;
    context.options = options;
    context.reportState = throttle(reportState.bind(null, context), options.throttle);
    // context.startedAt = null;
    // context.state = null;
    // context.delayTimer = null;

    // Attach listeners
    request
    .on('request', onRequest.bind(null, context))
    .on('response', onResponse.bind(null, context))
    .on('data', onData.bind(null, context))
    .on('end', onEnd.bind(null, context));

    request.progressContext = context;

    return request;
}

module.exports = requestProgress;


/***/ }),
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function() {};

if (false) {}

module.exports = warning;


/***/ }),
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export openInEditor */
/* unused harmony export openInShell */
/* unused harmony export openInFinder */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return openInBrowser; });
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);


var openInEditor = function openInEditor(path) {
  _services__WEBPACK_IMPORTED_MODULE_1__["editors"].open(path);
  _services__WEBPACK_IMPORTED_MODULE_1__["glodlog"].record({
    type: 'external',
    action: 'open-external-editor',
    path: path
  });
};
var openInShell = function openInShell(path) {
  _services__WEBPACK_IMPORTED_MODULE_1__["shells"].open(path);
  _services__WEBPACK_IMPORTED_MODULE_1__["glodlog"].record({
    type: 'external',
    action: 'open-in-shell',
    path: path
  });
};
var openInFinder = function openInFinder(path) {
  _services__WEBPACK_IMPORTED_MODULE_1__["folder"].open(path);
  _services__WEBPACK_IMPORTED_MODULE_1__["glodlog"].record({
    type: 'external',
    action: 'open-in-finder',
    path: path
  });
};
var openInBrowser = function openInBrowser(url) {
  electron__WEBPACK_IMPORTED_MODULE_0__["shell"].openExternal(url);
  _services__WEBPACK_IMPORTED_MODULE_1__["glodlog"].record({
    type: 'external',
    action: 'open-in-browser',
    url: url
  });
};

/***/ }),
/* 180 */,
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return readdirSync; });
/* harmony import */ var path_exists__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(35);
/* harmony import */ var path_exists__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path_exists__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var junk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(182);
/* harmony import */ var junk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(junk__WEBPACK_IMPORTED_MODULE_2__);



var readdirSync = function readdirSync(targetPath) {
  if (path_exists__WEBPACK_IMPORTED_MODULE_0___default.a.sync(targetPath)) {
    return fs__WEBPACK_IMPORTED_MODULE_1___default.a.readdirSync(targetPath).filter(junk__WEBPACK_IMPORTED_MODULE_2___default.a.not);
  }

  return [];
};

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// # All
// /^npm-debug\.log$/,           // npm error log
// /^\..*\.swp$/,                // Vim state

// # macOS
// /^\.DS_Store$/,               // Stores custom folder attributes
// /^\.AppleDouble$/,            // Stores additional file resources
// /^\.LSOverride$/,             // Contains the absolute path to the app to be used
// /^Icon\r$/,                   // Custom Finder icon: http://superuser.com/questions/298785/icon-file-on-os-x-desktop
// /^\._.*/,                     // Thumbnail
// /^\.Spotlight-V100(?:$|\/)/,  // Directory that might appear on external disk
// /\.Trashes/,                  // File that might appear on external disk
// /^__MACOSX$/,                 // Resource fork

// # Linux
// /~$/,                         // Backup file

// # Windows
// /^Thumbs\.db$/,               // Image file cache
// /^ehthumbs\.db$/,             // Folder config file
// /^Desktop\.ini$/              // Stores custom folder attributes
// /^@eaDir$/                    // Synology Diskstation "hidden" folder where the server stores thumbnails

exports.regex = exports.re = /^npm-debug\.log$|^\..*\.swp$|^\.DS_Store$|^\.AppleDouble$|^\.LSOverride$|^Icon\r$|^\._.*|^\.Spotlight-V100(?:$|\/)|\.Trashes|^__MACOSX$|~$|^Thumbs\.db$|^ehthumbs\.db$|^Desktop\.ini$|^@eaDir$/;

exports.is = filename => exports.re.test(filename);

exports.not = filename => !exports.is(filename);


/***/ }),
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ }),
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(213);
// 组件依赖样式
__webpack_require__(69);

// 组件自身样式
__webpack_require__(428);


/***/ }),
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

// This is adapted from https://github.com/normalize/mz
// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors
const u = __webpack_require__(28).fromCallback
const fs = __webpack_require__(18)

const api = [
  'access',
  'appendFile',
  'chmod',
  'chown',
  'close',
  'fchmod',
  'fchown',
  'fdatasync',
  'fstat',
  'fsync',
  'ftruncate',
  'futimes',
  'lchown',
  'link',
  'lstat',
  'mkdir',
  'open',
  'read',
  'readFile',
  'readdir',
  'readlink',
  'realpath',
  'rename',
  'rmdir',
  'stat',
  'symlink',
  'truncate',
  'unlink',
  'utimes',
  'write',
  'writeFile'
]
// fs.mkdtemp() was added in Node.js v5.10.0, so check if it exists
typeof fs.mkdtemp === 'function' && api.push('mkdtemp')

// Export all keys:
Object.keys(fs).forEach(key => {
  exports[key] = fs[key]
})

// Universalify async methods:
api.forEach(method => {
  exports[method] = u(fs[method])
})

// We differ from mz/fs in that we still ship the old, broken, fs.exists()
// since we are a drop-in replacement for the native module
exports.exists = function (filename, callback) {
  if (typeof callback === 'function') {
    return fs.exists(filename, callback)
  }
  return new Promise(resolve => {
    return fs.exists(filename, resolve)
  })
}


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

// imported from ncp (this is temporary, will rewrite)

var fs = __webpack_require__(18)
var path = __webpack_require__(3)
var utimes = __webpack_require__(479)

function ncp (source, dest, options, callback) {
  if (!callback) {
    callback = options
    options = {}
  }

  var basePath = process.cwd()
  var currentPath = path.resolve(basePath, source)
  var targetPath = path.resolve(basePath, dest)

  var filter = options.filter
  var transform = options.transform
  var overwrite = options.overwrite
  // If overwrite is undefined, use clobber, otherwise default to true:
  if (overwrite === undefined) overwrite = options.clobber
  if (overwrite === undefined) overwrite = true
  var errorOnExist = options.errorOnExist
  var dereference = options.dereference
  var preserveTimestamps = options.preserveTimestamps === true

  var started = 0
  var finished = 0
  var running = 0

  var errored = false

  startCopy(currentPath)

  function startCopy (source) {
    started++
    if (filter) {
      if (filter instanceof RegExp) {
        console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function')
        if (!filter.test(source)) {
          return doneOne(true)
        }
      } else if (typeof filter === 'function') {
        if (!filter(source, dest)) {
          return doneOne(true)
        }
      }
    }
    return getStats(source)
  }

  function getStats (source) {
    var stat = dereference ? fs.stat : fs.lstat
    running++
    stat(source, function (err, stats) {
      if (err) return onError(err)

      // We need to get the mode from the stats object and preserve it.
      var item = {
        name: source,
        mode: stats.mode,
        mtime: stats.mtime, // modified time
        atime: stats.atime, // access time
        stats: stats // temporary
      }

      if (stats.isDirectory()) {
        return onDir(item)
      } else if (stats.isFile() || stats.isCharacterDevice() || stats.isBlockDevice()) {
        return onFile(item)
      } else if (stats.isSymbolicLink()) {
        // Symlinks don't really need to know about the mode.
        return onLink(source)
      }
    })
  }

  function onFile (file) {
    var target = file.name.replace(currentPath, targetPath.replace('$', '$$$$')) // escapes '$' with '$$'
    isWritable(target, function (writable) {
      if (writable) {
        copyFile(file, target)
      } else {
        if (overwrite) {
          rmFile(target, function () {
            copyFile(file, target)
          })
        } else if (errorOnExist) {
          onError(new Error(target + ' already exists'))
        } else {
          doneOne()
        }
      }
    })
  }

  function copyFile (file, target) {
    var readStream = fs.createReadStream(file.name)
    var writeStream = fs.createWriteStream(target, { mode: file.mode })

    readStream.on('error', onError)
    writeStream.on('error', onError)

    if (transform) {
      transform(readStream, writeStream, file)
    } else {
      writeStream.on('open', function () {
        readStream.pipe(writeStream)
      })
    }

    writeStream.once('close', function () {
      fs.chmod(target, file.mode, function (err) {
        if (err) return onError(err)
        if (preserveTimestamps) {
          utimes.utimesMillis(target, file.atime, file.mtime, function (err) {
            if (err) return onError(err)
            return doneOne()
          })
        } else {
          doneOne()
        }
      })
    })
  }

  function rmFile (file, done) {
    fs.unlink(file, function (err) {
      if (err) return onError(err)
      return done()
    })
  }

  function onDir (dir) {
    var target = dir.name.replace(currentPath, targetPath.replace('$', '$$$$')) // escapes '$' with '$$'
    isWritable(target, function (writable) {
      if (writable) {
        return mkDir(dir, target)
      }
      copyDir(dir.name)
    })
  }

  function mkDir (dir, target) {
    fs.mkdir(target, dir.mode, function (err) {
      if (err) return onError(err)
      // despite setting mode in fs.mkdir, doesn't seem to work
      // so we set it here.
      fs.chmod(target, dir.mode, function (err) {
        if (err) return onError(err)
        copyDir(dir.name)
      })
    })
  }

  function copyDir (dir) {
    fs.readdir(dir, function (err, items) {
      if (err) return onError(err)
      items.forEach(function (item) {
        startCopy(path.join(dir, item))
      })
      return doneOne()
    })
  }

  function onLink (link) {
    var target = link.replace(currentPath, targetPath)
    fs.readlink(link, function (err, resolvedPath) {
      if (err) return onError(err)
      checkLink(resolvedPath, target)
    })
  }

  function checkLink (resolvedPath, target) {
    if (dereference) {
      resolvedPath = path.resolve(basePath, resolvedPath)
    }
    isWritable(target, function (writable) {
      if (writable) {
        return makeLink(resolvedPath, target)
      }
      fs.readlink(target, function (err, targetDest) {
        if (err) return onError(err)

        if (dereference) {
          targetDest = path.resolve(basePath, targetDest)
        }
        if (targetDest === resolvedPath) {
          return doneOne()
        }
        return rmFile(target, function () {
          makeLink(resolvedPath, target)
        })
      })
    })
  }

  function makeLink (linkPath, target) {
    fs.symlink(linkPath, target, function (err) {
      if (err) return onError(err)
      return doneOne()
    })
  }

  function isWritable (path, done) {
    fs.lstat(path, function (err) {
      if (err) {
        if (err.code === 'ENOENT') return done(true)
        return done(false)
      }
      return done(false)
    })
  }

  function onError (err) {
    // ensure callback is defined & called only once:
    if (!errored && callback !== undefined) {
      errored = true
      return callback(err)
    }
  }

  function doneOne (skipped) {
    if (!skipped) running--
    finished++
    if ((started === finished) && (running === 0)) {
      if (callback !== undefined) {
        return callback(null)
      }
    }
  }
}

module.exports = ncp


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const path = __webpack_require__(3)

// get drive on windows
function getRootPath (p) {
  p = path.normalize(path.resolve(p)).split(path.sep)
  if (p.length > 0) return p[0]
  return null
}

// http://stackoverflow.com/a/62888/10333 contains more accurate
// TODO: expand to include the rest
const INVALID_PATH_CHARS = /[<>:"|?*]/

function invalidWin32Path (p) {
  const rp = getRootPath(p)
  p = p.replace(rp, '')
  return INVALID_PATH_CHARS.test(p)
}

module.exports = {
  getRootPath,
  invalidWin32Path
}


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  copySync: __webpack_require__(482)
}


/***/ }),
/* 231 */
/***/ (function(module, exports) {

/* eslint-disable node/no-deprecated-api */
module.exports = function (size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    try {
      return Buffer.allocUnsafe(size)
    } catch (e) {
      return new Buffer(size)
    }
  }
  return new Buffer(size)
}


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "59ac9529d1db12c27d01e15eff362a1b.png";

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "12be37e3242eaf432f7eed4ec7a46259.png";

/***/ }),
/* 234 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * 扫描项目目录下的 layouts
 */


/**
 * 返回 layout[] 数据
 * 扫描规则: 根据 layouts 目录中的文件夹名称进行匹配
 * 1. 优先匹配
 */

var defaultImage = 'https://gw.alicdn.com/tfs/TB1Qby8ex9YBuNjy0FfXXXIsVXa-976-974.png';

function scanLayout(_x) {
  return _scanLayout.apply(this, arguments);
}

function _scanLayout() {
  _scanLayout = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref) {
    var targetPath, layoutsPath, localCustomLayoutNames;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            targetPath = _ref.targetPath;
            layoutsPath = path__WEBPACK_IMPORTED_MODULE_1___default.a.join(targetPath, 'layouts');
            localCustomLayoutNames = [];

            if (!fs__WEBPACK_IMPORTED_MODULE_0___default.a.existsSync(layoutsPath)) {
              localCustomLayoutNames = [];
            } else {
              localCustomLayoutNames = fs__WEBPACK_IMPORTED_MODULE_0___default.a.readdirSync(layoutsPath).filter(function (name) {
                return !/^\./.test(name);
              }).filter(function (file) {
                var fullPath = path__WEBPACK_IMPORTED_MODULE_1___default.a.join(layoutsPath, file);
                var stat = fs__WEBPACK_IMPORTED_MODULE_0___default.a.statSync(fullPath);
                return stat.isDirectory();
              });
            }

            return _context.abrupt("return", localCustomLayoutNames.map(function (layoutName) {
              var layoutPath = path__WEBPACK_IMPORTED_MODULE_1___default.a.join(layoutsPath, layoutName);
              var readmePath = path__WEBPACK_IMPORTED_MODULE_1___default.a.join(layoutPath, 'README.md');
              return {
                // 将驼峰名统一成 - 分隔符
                name: layoutName,
                title: layoutName,
                description: fs__WEBPACK_IMPORTED_MODULE_0___default.a.existsSync(readmePath) ? fs__WEBPACK_IMPORTED_MODULE_0___default.a.readFileSync(readmePath, 'utf-8') : "\u7528\u6237\u81EA\u5B9A\u4E49\u5E03\u5C40 - ".concat(layoutName),
                customLayout: true,
                localization: true,
                folderName: layoutName,
                screenshot: defaultImage,
                thumbnail: defaultImage
              };
            }));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _scanLayout.apply(this, arguments);
}

scanLayout.layoutValidate = function (targetPath) {
  return fs__WEBPACK_IMPORTED_MODULE_0___default.a.existsSync(path__WEBPACK_IMPORTED_MODULE_1___default.a.join(targetPath, 'layouts'));
};

/* harmony default export */ __webpack_exports__["a"] = (scanLayout);

/***/ }),
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
};

var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
};

var hasBasename = exports.hasBasename = function hasBasename(path, prefix) {
  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
};

var stripBasename = exports.stripBasename = function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
};

var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
};

var parsePath = exports.parsePath = function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';

  var hashIndex = pathname.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');
  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
};

var createPath = exports.createPath = function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;


  var path = pathname || '/';

  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

  return path;
};

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./angular-materials": 249,
	"./angular-materials.json": 249,
	"./base-components": 250,
	"./base-components-1.x": 251,
	"./base-components-1.x.json": 251,
	"./base-components.json": 250,
	"./rax-materials": 252,
	"./rax-materials.json": 252,
	"./react-materials": 159,
	"./react-materials.json": 159,
	"./vue-materials": 253,
	"./vue-materials.json": 253
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 248;

/***/ }),
/* 249 */
/***/ (function(module) {

module.exports = {"name":"angular-materials","type":"angular","blocks":[{"name":"basic-form","title":"用户信息表单区块","source":{"type":"npm","npm":"@angular-materials/basic-form","version":"1.0.2","registry":"http://registry.npmjs.com","version-0.x":"1.0.2","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1oIwnDWmWBuNjy1XaXXXCbXXa-1704-922.png","categories":["表单"],"description":"基于 Bootstrap 4 的表单区块","repository":"https://github.com/alibaba/ice/tree/master/angular-materials/blocks/basic-form","publishTime":"2018-07-12T06:08:15.147Z","updateTime":"2018-07-19T13:08:52.382Z"},{"name":"card-list","title":"图文卡片列表","source":{"type":"npm","npm":"@angular-materials/card-list","version":"1.0.4","registry":"http://registry.npmjs.com","version-0.x":"1.0.4","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1EqygDr5YBuNjSspoXXbeNFXa-1122-493.png","categories":["列表"],"description":"基于 Bootstrap 4 的卡片列表区块","repository":"https://github.com/alibaba/ice/tree/master/angular-materials/blocks/card-list","publishTime":"2018-07-10T02:35:15.524Z","updateTime":"2018-07-19T13:08:41.751Z"},{"name":"table-list","title":"表格列表","source":{"type":"npm","npm":"@angular-materials/table-list","version":"1.0.2","registry":"http://registry.npmjs.com","version-0.x":"1.0.2","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1IWx1D1uSBuNjSsplXXbe8pXa-1666-864.png","categories":["列表"],"description":"基于 Bootstrap 4 的表格列表区块","repository":"https://github.com/alibaba/ice/tree/master/angular-materials/blocks/table-list","publishTime":"2018-07-12T06:08:15.147Z","updateTime":"2018-07-19T13:09:00.369Z"}],"layouts":[],"components":[],"scaffolds":[{"name":"ngx-admin","title":"ngx-admin","source":{"type":"npm","npm":"@angular-materials/ngx-admin","version":"1.0.1","registry":"http://registry.npmjs.com"},"builder":"","dependencies":{"@agm/core":"1.0.0-beta.2","@angular/animations":"6.0.0","@angular/cdk":"^6.3.3","@angular/common":"6.0.0","@angular/compiler":"6.0.0","@angular/core":"6.0.0","@angular/forms":"6.0.0","@angular/http":"6.0.0","@angular/material":"^6.3.3","@angular/platform-browser":"6.0.0","@angular/platform-browser-dynamic":"6.0.0","@angular/router":"6.0.0","@asymmetrik/ngx-leaflet":"3.0.1","@nebular/auth":"2.0.0-rc.9","@nebular/security":"2.0.0-rc.9","@nebular/theme":"2.0.0-rc.9","@ng-bootstrap/ng-bootstrap":"1.0.0","@swimlane/ngx-charts":"7.0.1","angular-tree-component":"7.2.0","angular2-chartjs":"0.4.1","angular2-toaster":"6.0.0","bootstrap":"4.0.0","chart.js":"2.7.1","ckeditor":"4.7.3","classlist.js":"1.1.20150312","core-js":"2.5.1","echarts":"^4.0.2","font-awesome":"4.7.0","intl":"1.2.5","ionicons":"2.0.1","leaflet":"1.2.0","nebular-icons":"1.0.8","ng2-ckeditor":"1.1.13","ng2-smart-table":"1.2.2","ngx-echarts":"2.0.1","normalize.css":"6.0.0","pace-js":"1.0.2","roboto-fontface":"0.8.0","rxjs":"^6.1.0","rxjs-compat":"^6.1.0","socicon":"3.0.5","tinymce":"4.5.7","typeface-exo":"0.0.22","web-animations-js":"2.2.5","zone.js":"^0.8.26"},"devDependencies":{"@angular-devkit/build-angular":"~0.6.0","@angular/cli":"6.0.8","@angular/compiler-cli":"6.0.0","@angular/language-service":"6.0.0","@compodoc/compodoc":"1.0.1","@types/d3-color":"1.0.5","@types/googlemaps":"3.30.4","@types/jasmine":"2.5.54","@types/jasminewd2":"2.0.3","@types/leaflet":"1.2.3","@types/node":"6.0.90","codelyzer":"4.0.2","conventional-changelog-cli":"1.3.4","husky":"0.13.3","jasmine-core":"2.6.4","jasmine-spec-reporter":"4.1.1","karma":"1.7.1","karma-chrome-launcher":"2.1.1","karma-cli":"1.0.1","karma-coverage-istanbul-reporter":"1.3.0","karma-jasmine":"1.1.0","karma-jasmine-html-reporter":"0.2.2","npm-run-all":"4.0.2","protractor":"5.1.2","rimraf":"2.6.1","stylelint":"7.13.0","ts-node":"3.2.2","tslint":"5.7.0","tslint-language-service":"0.9.6","typescript":"2.7.2"},"screenshot":"https://img.alicdn.com/tfs/TB1ubFBvTXYBeNkHFrdXXciuVXa-1200-675.jpg","screenshots":["https://img.alicdn.com/tfs/TB1ubFBvTXYBeNkHFrdXXciuVXa-1200-675.jpg"],"categories":[],"features":{},"homepage":"https://alibaba.github.io/ice/scaffold-preview/ngx-admin/","repository":"https://github.com/alibaba/ice/tree/master/angular-materials/scaffolds/ngx-admin","description":"该模板基于 ngx-admin 创建，使用 @angular/cli 命令行工具管理项目，适合大型后台管理系统。","publishTime":"2018-07-12T05:29:58.293Z","updateTime":"2018-07-12T06:46:00.661Z"}]};

/***/ }),
/* 250 */
/***/ (function(module) {

module.exports = [{"name":"Accordion","category":"Components","title":"手风琴","type":"布局","importStatement":"import { Accordion } from '@icedesign/base';","body":"\n\n## 开发指南\n\n### 何时使用\n\n可以折叠/展开的内容区域。\n\n","propsSchema":{"name":"Accordion","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"style":{"type":{"name":"object"},"required":false,"description":"组件接受行内样式","docblock":"组件接受行内样式","properties":[]},"dataSource":{"type":{"name":"array"},"required":false,"description":"使用数据模型构建","docblock":"使用数据模型构建"},"singleShrink":{"type":{"name":"bool"},"required":false,"description":"如果这个属性为true, 在single为true时, 组件可以收起全部子元素","docblock":"如果这个属性为true, 在single为true时, 组件可以收起全部子元素"},"single":{"type":{"name":"bool"},"required":false,"description":"是否只能展开1个","defaultValue":{"value":"false","computed":false},"docblock":"是否只能展开1个"},"onChange":{"type":{"name":"func"},"required":false,"description":"接收一个回调函数传递改变状态, 在使用dataSource时改回调需要产生改变组件才能生效","docblock":"接收一个回调函数传递改变状态, 在使用dataSource时改回调需要产生改变组件才能生效","params":[],"returns":null},"className":{"type":{"name":"string"},"required":false,"description":"扩展class","docblock":"扩展class"}},"methods":[],"subComponents":[{"name":"Panel","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","docblock":"样式类名的品牌前缀"},"style":{"type":{"name":"object"},"required":false,"description":"子组件接受行内样式","docblock":"子组件接受行内样式","properties":[]},"expanded":{"type":{"name":"bool"},"required":true,"description":"是否展开","defaultValue":{"value":"false","computed":false},"docblock":"是否展开"},"disabled":{"type":{"name":"bool"},"required":true,"description":"是否禁止用户操作","docblock":"是否禁止用户操作"},"title":{"type":{"name":"node"},"required":false,"description":"标题","defaultValue":{"value":"''","computed":false},"docblock":"标题"},"multiTitle":{"type":{"name":"bool"},"required":true,"description":"标题是否多行显示","defaultValue":{"value":"false","computed":false},"docblock":"标题是否多行显示"},"className":{"type":{"name":"string"},"required":false,"description":"扩展class","docblock":"扩展class"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nstyle | 组件接受行内样式 | Object | -\ndataSource | 使用数据模型构建 | Array | -\nsingleShrink | 如果这个属性为true, 在single为true时, 组件可以收起全部子元素 | Boolean | -\nsingle | 是否只能展开1个 | Boolean | false\nonChange | 接收一个回调函数传递改变状态, 在使用dataSource时改回调需要产生改变组件才能生效<br><br>**签名**:<br>Function() => void | Function | -\nclassName | 扩展class | String | -\n","methodREADME":[],"subComponentsREADME":[{"name":"Panel","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | -\nstyle | 子组件接受行内样式 | Object | -\nexpanded | 是否展开 | Boolean | false\ndisabled | 是否禁止用户操作 | Boolean | -\ntitle | 标题 | ReactNode | ''\nmultiTitle | 标题是否多行显示 | Boolean | false\nclassName | 扩展class | String | -\n","methodREADME":[]}],"demos":[{"title":"基本","order":"0","jsx":"import { Accordion } from \"@icedesign/base\";\n\nconst { Panel } = Accordion;\n\nReactDOM.render(\n  <Accordion>\n    <Panel\n      multiTitle\n      title=\"There is a long title, you can set the multiTitle to multi line display, the associated configuration properties and a single height is not the same, the specific configuration platform configuration can be configured.\"\n    >\n      <ul>\n        <li>Promotions are marketing campaigns ran by Marketplace</li>\n        <li>\n          Participate to sale your products during that promotion and make a\n          profit\n        </li>\n      </ul>\n    </Panel>\n    <Panel title=\"What are Promotion Products?\">\n      <ul>\n        <li>\n          Promotion Products is a service that helps you to promote products you\n          list on Marketplace during a certain time range\n        </li>\n        <li>\n          You can choose which products should be available for the promotion\n        </li>\n        <li>\n          Not all Products of you will be available, because Promotions will\n          only attract certain Product areas\n        </li>\n      </ul>\n    </Panel>\n    <Panel title=\"Why can i not submit a higher price?\">\n      <ul>\n        <li>\n          The Promotion requires a certain price to make sure that our customers\n          are attracted\n        </li>\n      </ul>\n    </Panel>\n    <Panel title=\"What is Promo Stock?\">\n      Promo Stock is the criteria needed to be followed to be able to join\n      Promotion. With setting particular Promo Stock value you commit to have\n      this amount of stock available while Promotion is active.\n    </Panel>\n  </Accordion>,\n  mountNode\n);\n\n","css":"","body":"\nAccordion接受子组件Panel展示信息。Panel可设置：title(标题)、disable(是否可操作)等属性，其中title、content值可为字符串或<strong>Component组件</strong>，expand、disable接受布尔值。\n\n"},{"title":"外部综合操作","order":"4","jsx":"import { Accordion, Button } from \"@icedesign/base\";\n\nconst list = [\n  {\n    title: \"Well, hello there\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Gigantomaniac Monster Text, very long, much width, wow\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Generic Title\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Login Infomation\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      list: list,\n      single: false\n    };\n  }\n\n  onChange(status, list) {\n    console.log(status);\n\n    //重新拼装list, 使改变生效\n    this.setState({\n      list\n    });\n  }\n\n  showAll() {\n    this.setState({\n      list: this.state.list.map(e => {\n        return Object.assign({}, e, { expanded: true });\n      })\n    });\n  }\n\n  closeAll() {\n    this.setState({\n      list: this.state.list.map(e => {\n        return Object.assign({}, e, { expanded: false });\n      })\n    });\n  }\n\n  setSingle() {\n    this.setState({\n      single: true\n    });\n  }\n\n  cancelSingle() {\n    this.setState({\n      single: false\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"demo\">\n        <p>\n          外部控制：\n          <Button onClick={this.showAll.bind(this)}>展开全部</Button>\n          <Button onClick={this.closeAll.bind(this)}>收起全部</Button>\n          <Button onClick={this.setSingle.bind(this)}>单例模式</Button>\n          <Button onClick={this.cancelSingle.bind(this)}>多例模式</Button>\n        </p>\n        <br />\n        <Accordion\n          single={this.state.single}\n          onChange={this.onChange.bind(this)}\n          dataSource={this.state.list}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".demo button {\n    margin-right: 5px;\n}\n","body":"\nAccordion的onChange属性接受一个事件, 事件返回点击后的状态, 外部接收这个值传递给dataSource让Accordion发生改变\ndataSource接受一个数组, 数组元素为一个对象, 包含属性：title(标题)、content(内容)、disable(是否可操作)等属性，其中title、content值可为字符串或<strong>Component组件</strong>，expanded、disable接受布尔值。\nAccordion的dataSource属性接受一个状态数组与外部state对应。\n\n"},{"title":"disabled 禁止操作","order":"2","jsx":"import { Accordion } from \"@icedesign/base\";\n\nconst list = [\n  {\n    title: \"Well, hello there\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\",\n    disabled: true\n  },\n  {\n    title: \"Gigantomaniac Monster Text, very long, much width, wow\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\",\n    disabled: true\n  },\n  {\n    title: \"Generic Title\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\",\n    disabled: true\n  },\n  {\n    title: \"Login Infomation\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\",\n    disabled: true\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      list: list\n    };\n  }\n\n  onChange(status) {\n    //点击后的status : [true, false, false, false]\n\n    //重新拼装list, 使改变生效\n    this.setState({\n      list: this.state.list.map((e, k) => {\n        return Object.assign({}, e, { expanded: status[k] });\n      })\n    });\n  }\n\n  render() {\n    return (\n      <Accordion\n        onChange={this.onChange.bind(this)}\n        dataSource={this.state.list}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n若dataSource属性内对disable为true, 鼠标点击将无效。\n\n"},{"title":"单例模式","order":"3","jsx":"import { Accordion } from \"@icedesign/base\";\n\nconst list = [\n  {\n    title: \"Well, hello there\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Gigantomaniac Monster Text, very long, much width, wow\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Generic Title\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Login Infomation\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      list: list\n    };\n  }\n\n  onChange(status) {\n    //点击后的status : [true, false, false, false]\n\n    //重新拼装list, 使改变生效\n    this.setState({\n      list: this.state.list.map((e, k) => {\n        return Object.assign({}, e, { expanded: status[k] });\n      })\n    });\n  }\n\n  render() {\n    return (\n      <Accordion\n        single\n        onChange={this.onChange.bind(this)}\n        dataSource={this.state.list}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\nAccordion的single属性接受一个布尔值, 若为true, 最多只能有一个组件展开。\n\n"}]},{"name":"Affix","category":"Components","title":"固钉","type":"基本","importStatement":"import { Affix } from '@icedesign/base';","body":"\n## Guide\n\n### 何时使用\n\n当用户需要将某个组件固定在页面的某个位置时，可以使用 Affix 组件进行固定。\n\n","propsSchema":{"name":"Affix","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"品牌样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"品牌样式前缀"},"container":{"type":{"name":"func"},"required":false,"description":"设置 Affix 需要监听滚动事件的容器元素","defaultValue":{"value":"() => window","computed":false},"docblock":"设置 Affix 需要监听滚动事件的容器元素\n@return {ReactElement} 目标容器元素的实例","params":[],"returns":{"description":"目标容器元素的实例","type":{"name":"ReactElement"}}},"offsetTop":{"type":{"name":"number"},"required":false,"description":"距离窗口顶部达到指定偏移量后触发","docblock":"距离窗口顶部达到指定偏移量后触发"},"offsetBottom":{"type":{"name":"number"},"required":false,"description":"距离窗口底部达到制定偏移量后触发","docblock":"距离窗口底部达到制定偏移量后触发"},"onAffix":{"type":{"name":"func"},"required":false,"description":"当元素的样式发生固钉样式变化时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"当元素的样式发生固钉样式变化时触发的回调函数\n@param {Boolean} affixed 元素是否被固钉","params":[{"name":"affixed","description":"元素是否被固钉","type":{"name":"Boolean"}}],"returns":null},"className":{"type":{"name":"string"},"required":false,"description":"自定义样式类名","docblock":"自定义样式类名"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 品牌样式前缀 | String | 'next-'\ncontainer | 设置 Affix 需要监听滚动事件的容器元素<br><br>**签名**:<br>Function() => ReactElement<br>**返回值**:<br>{ReactElement} 目标容器元素的实例<br> | Function | () =&gt; window\noffsetTop | 距离窗口顶部达到指定偏移量后触发 | Number | -\noffsetBottom | 距离窗口底部达到制定偏移量后触发 | Number | -\nonAffix | 当元素的样式发生固钉样式变化时触发的回调函数<br><br>**签名**:<br>Function(affixed: Boolean) => void<br>**参数**:<br>*affixed*: {Boolean} 元素是否被固钉 | Function | () =&gt; {}\nclassName | 自定义样式类名 | String | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Affix, Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div className=\"custom-affix-wrapper\">\n    <Affix>\n      <Button type=\"secondary\">Affixed Button</Button>\n    </Affix>\n  </div>,\n  mountNode\n);\n\n","css":".custom-affix-wrapper {\n    padding: 40px 0;\n}\n","body":"\n也就意味着当页面往下滚动时，当 Affix 元素接触到浏览器边框时，此时会将 Affix 钉住。\n最简单的用法。默认情况下，Affix 的默认目标容器元素是整个 `window`，并且 `offsetTop = 0`，\n\n"},{"title":"自定义目标容器","order":"2","jsx":"import { Affix, Button } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  _containerRefHandler(ref) {\n    this.container = ref;\n  }\n\n  render() {\n    return (\n      <div\n        className=\"custom-affix-container\"\n        ref={this._containerRefHandler.bind(this)}\n      >\n        <div className=\"a-wrapper\">\n          <Affix\n            container={() => this.container}\n            offsetTop={0}\n            onAffix={affixed => console.log(affixed)}\n          >\n            <Button type=\"secondary\">Affixed Button</Button>\n          </Affix>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".custom-affix-container {\n    height: 150px;\n    overflow-y: scroll;\n    background: url(https://img.alicdn.com/tfs/TB1AbJXSpXXXXXJXpXXXXXXXXXX-32-32.jpg) repeat 50% 50%;\n}\n\n.custom-affix-container .a-wrapper {\n    padding-top: 50px;\n    height: 500px;\n}\n","body":"\n可以通过 `container` 属性设置 Affix 组件需要监听其滚动事件的元素，该属性接收一个函数作为参数，默认为 `() => window`。\n\n"},{"title":"自定义偏移量","order":"1","jsx":"import { Affix, Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div className=\"custom-affix-wrapper\">\n    <Affix offsetBottom={0}>\n      <Button type=\"secondary\">Affixed Button</Button>\n    </Affix>\n  </div>,\n  mountNode\n);\n\n","css":".custom-affix-wrapper {\n    padding: 40px 0;\n}\n","body":"\n可以通过 `offsetTop` 或 `offsetBottom` 自定义偏移量。\n\n"}]},{"name":"Animate","category":"Utility","title":"动画","importStatement":"import { Animate } from '@icedesign/base';","body":"\n\n## 开发指南\n\n### 何时使用\n\n需要自定义动效\n\n","propsSchema":{"name":"Animate","props":{"animation":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"}]},"required":false,"description":"配置动画的播放方式, 详见[animation](#animation)","defaultValue":{"value":"{\n    appear: noop,\n    enter: noop,\n    leave: noop\n}","computed":false},"docblock":"配置动画的播放方式, 详见[animation](#animation)"},"afterAppear":{"type":{"name":"func"},"required":false,"description":"在初始动画播放完毕触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"在初始动画播放完毕触发的事件","params":[],"returns":null},"afterEnter":{"type":{"name":"func"},"required":false,"description":"在进场动画播放完毕触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"在进场动画播放完毕触发的事件","params":[],"returns":null},"afterLeave":{"type":{"name":"func"},"required":false,"description":"在离开动画播放完毕触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"在离开动画播放完毕触发的事件","params":[],"returns":null},"component":{"type":{"name":"any"},"required":false,"description":"在针对多个子节点播放动画的时候包裹的标签","docblock":"在针对多个子节点播放动画的时候包裹的标签"},"singleMode":{"type":{"name":"bool"},"required":false,"description":"是否是有单个节点，如果有多个动画的孩子节点，设置该选项为false","defaultValue":{"value":"true","computed":false},"docblock":"是否是有单个节点，如果有多个动画的孩子节点，设置该选项为false"},"animationAppear":{"type":{"name":"bool"},"required":false,"description":"是否在初始的时候播放动画","defaultValue":{"value":"true","computed":false},"docblock":"是否在初始的时候播放动画"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nanimation | 配置动画的播放方式, 详见[animation](#animation) | String/Object | {     appear: noop,     enter: noop,     leave: noop }\nafterAppear | 在初始动画播放完毕触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterEnter | 在进场动画播放完毕触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterLeave | 在离开动画播放完毕触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\ncomponent | 在针对多个子节点播放动画的时候包裹的标签 | any | -\nsingleMode | 是否是有单个节点，如果有多个动画的孩子节点，设置该选项为false | Boolean | true\nanimationAppear | 是否在初始的时候播放动画 | Boolean | true\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Animate, Button, Select } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    enter: \"fadeInLeft\",\n    leave: \"fadeOutRight\",\n    visible: false\n  };\n  componentDidMount() {\n    this.onClick();\n  }\n  render() {\n    const animation = {\n      enter: this.state.enter,\n      leave: this.state.leave\n    };\n\n    return (\n      <div>\n        <Animate\n          singleMode={false}\n          animation={animation}\n          afterEnter={this.afterEnter}\n          afterLeave={this.afterLeave}\n          className=\"demo\"\n        >\n          {this.state.visible ? <div>Animate</div> : null}\n        </Animate>\n\n        <Selecter\n          defaultValue={{ in: this.state.enter, out: this.state.leave }}\n          onChange={this.onChange}\n        />\n\n        <Button onClick={this.onClick}>触发</Button>\n      </div>\n    );\n  }\n  onClick = () => {\n    this.setState({\n      visible: true\n    });\n\n    setTimeout(() => {\n      this.setState({\n        visible: false\n      });\n    }, 600);\n  };\n  onChange = animation => {\n    this.setState({\n      enter: animation.in,\n      leave: animation.out\n    });\n    this.onClick();\n  };\n  afterEnter() {\n    console.log(\"afterEnter\");\n  }\n  afterLeave() {\n    console.log(\"afterLeave\");\n  }\n}\n\n/* eslint-disable react/no-multi-comp */\nclass Selecter extends React.Component {\n  constructor(props) {\n    super(props);\n    if (props.defaultValue) {\n      this.state = {\n        in: props.defaultValue.in,\n        out: props.defaultValue.out\n      };\n    } else {\n      this.state = {\n        in: \"fadeInLeft\",\n        out: \"fadeOutRight\"\n      };\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"selecter\">\n        <br />\n        <span>入场动画: </span>\n        <Select value={this.state.in} onChange={this.onChangeIn}>\n          {Animate.names.enter.map(i => {\n            return (\n              <option key={i} value={i}>\n                {i}\n              </option>\n            );\n          })}\n        </Select>\n\n        <span> 出场动画: </span>\n        <Select value={this.state.out} onChange={this.onChangeOut}>\n          {Animate.names.leave.map(i => {\n            return (\n              <option key={i} value={i}>\n                {i}\n              </option>\n            );\n          })}\n        </Select>\n        <br />\n        <br />\n      </div>\n    );\n  }\n\n  onChangeIn = v => {\n    let animation = { ...this.state, in: v };\n    this.setState(animation);\n    this.props.onChange && this.props.onChange(animation);\n  };\n  onChangeOut = v => {\n    let animation = { ...this.state, out: v };\n    this.setState(animation);\n    this.props.onChange && this.props.onChange(animation);\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo {\n    color: #00BCD4;\n    display: block;\n    height: 100px;\n    line-height: 100px;\n    text-align: center;\n    font-size: 36px;\n    background-color: #ddd;\n}\n.selecter .next-select {\n    vertical-align: middle;\n}\n","body":"\n动效API使用\n\n"},{"title":"class控制动画","order":"1","jsx":"import { Animate, Button, Select } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    enter: \"fadeInLeftBig\",\n    leave: \"fadeOutRightBig\",\n    className: \"\"\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"demo\">\n          <div className={this.state.className}>Aniamte</div>\n        </div>\n\n        <Selecter\n          defaultValue={{ in: this.state.enter, out: this.state.leave }}\n          onChange={this.onChange}\n        />\n\n        <Button onClick={this.onClick}>触发</Button>\n      </div>\n    );\n  }\n  onClick = () => {\n    this.setState({\n      className: this.state.enter\n    });\n\n    setTimeout(() => {\n      this.setState({\n        className: this.state.leave\n      });\n      setTimeout(() => {\n        this.setState({\n          className: \"\"\n        });\n      }, 300);\n    }, 300);\n  };\n  onChange = animation => {\n    this.setState({\n      enter: animation.in,\n      leave: animation.out,\n      className: animation.in\n    });\n\n    setTimeout(() => {\n      this.onClick();\n    }, 0);\n  };\n}\n\n/* eslint-disable react/no-multi-comp */\nclass Selecter extends React.Component {\n  constructor(props) {\n    super(props);\n    if (props.defaultValue) {\n      this.state = {\n        in: props.defaultValue.in,\n        out: props.defaultValue.out\n      };\n    } else {\n      this.state = {\n        in: \"fadeInLeft\",\n        out: \"fadeOutRight\"\n      };\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"selecter\">\n        <br />\n        <span>入场动画: </span>\n        <Select value={this.state.in} onChange={this.onChangeIn}>\n          {Animate.names.enter.map(i => {\n            return (\n              <option key={i} value={i}>\n                {i}\n              </option>\n            );\n          })}\n        </Select>\n\n        <span> 出场动画: </span>\n        <Select value={this.state.out} onChange={this.onChangeOut}>\n          {Animate.names.leave.map(i => {\n            return (\n              <option key={i} value={i}>\n                {i}\n              </option>\n            );\n          })}\n        </Select>\n        <br />\n        <br />\n      </div>\n    );\n  }\n\n  onChangeIn = v => {\n    let animation = { ...this.state, in: v };\n    this.setState(animation);\n    this.props.onChange && this.props.onChange(animation);\n  };\n  onChangeOut = v => {\n    let animation = { ...this.state, out: v };\n    this.setState(animation);\n    this.props.onChange && this.props.onChange(animation);\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo {\n    color: #00BCD4;\n    display: block;\n    height: 100px;\n    line-height: 100px;\n    text-align: center;\n    font-size: 36px;\n    background-color: #ddd;\n}\n.selecter .next-select {\n    vertical-align: middle;\n}\n","body":"\nclassName 用法\n\n"},{"title":"入场出场","order":"2","jsx":"import { Animate } from \"@icedesign/base\";\n\nconst animation = {\n  enter: \"expandInDown\",\n  leave: \"expandOutUp\"\n};\n\nclass App extends React.Component {\n  state = {\n    items: []\n  };\n  render() {\n    return (\n      <div className=\"demo2\">\n        <div className=\"element\">\n          <div className=\"addbtn\" onClick={this.addItem.bind(this)}>\n            Add item\n          </div>\n          <Animate\n            singleMode={false}\n            animation={animation}\n            afterEnter={this.afterEnter}\n            afterLeave={this.afterLeave}\n          >\n            {this.state.items}\n          </Animate>\n        </div>\n      </div>\n    );\n  }\n  addItem() {\n    let { items } = this.state,\n      key = Date.now(),\n      item = (\n        <div key={key}>\n          {\" \"}\n          <a href=\"javascript:;\" onClick={this.removeItem.bind(this, key)}>\n            Remove\n          </a>\n        </div>\n      );\n\n    items.push(item);\n    this.setState({ items });\n  }\n  removeItem(key) {\n    let { items } = this.state,\n      i,\n      list = items.slice();\n\n    list.forEach((item, index) => {\n      if (item.key == key) {\n        i = index;\n      }\n    });\n    if (i > -1) {\n      list.splice(i, 1);\n      this.setState({ items: list });\n    }\n  }\n  afterEnter() {\n    console.log(\"afterEnter\");\n  }\n  afterLeave() {\n    console.log(\"afterLeave\");\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo2 {\n    color: #4C4C4C;\n    height: 400px;\n    background-color: #eee;\n    margin: 0 auto;\n    padding-top: 30px;\n}\n.element{\n    width: 300px;\n    margin: 70px auto;\n    color: #000;\n    text-align: center;\n}\n.element span div{\n    height: 30px;\n    background-color: #4C4C4C;\n    border-bottom: 1px solid #eee;\n    cursor: pointer;\n    transition: all 1s;\n\n}\n.addbtn{\n   cursor: pointer;\n   background-color: #2196F3;\n   height: 40px;\n   line-height: 40px;\n}\n.element a {\n    color: white;\n    line-height: 30px;\n}\n","body":"\n入场出场\n\n"}]},{"name":"Badge","category":"Components","title":"徽标数","type":"展示","importStatement":"import { Badge } from '@icedesign/base';","body":"\n\n## 开发指南\n\n### 何时使用\n在有新消息，讯息时，或者是app/插件/功能模块可以更新，升级时使用这个组件。\n\n","propsSchema":{"name":"Badge","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内连样式","docblock":"自定义内连样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"徽章依托的内容","docblock":"徽章依托的内容"},"count":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"展示的数字，大于 overflowCount 时显示为 ${overflowCount}+，为 0 时隐藏","defaultValue":{"value":"0","computed":false},"docblock":"展示的数字，大于 overflowCount 时显示为 ${overflowCount}+，为 0 时隐藏"},"overflowCount":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"展示的封顶的数字","defaultValue":{"value":"99","computed":false},"docblock":"展示的封顶的数字"},"dot":{"type":{"name":"bool"},"required":false,"description":"不展示数字，只展示一个小红点","defaultValue":{"value":"false","computed":false},"docblock":"不展示数字，只展示一个小红点"},"align":{"type":{"name":"enum","value":[{"value":"'left'","computed":false}]},"required":false,"description":"徽章显示的位置","docblock":"徽章显示的位置"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内连样式 | Object | -\nchildren | 徽章依托的内容 | ReactNode | -\ncount | 展示的数字，大于 overflowCount 时显示为 ${overflowCount}+，为 0 时隐藏 | Number/String | 0\noverflowCount | 展示的封顶的数字 | Number/String | 99\ndot | 不展示数字，只展示一个小红点 | Boolean | false\nalign | 徽章显示的位置<br><br>**可选值**:<br>'left' | Enum | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Badge } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Badge count={5}>\n    <a href=\"#\" className=\"basic-example\" />\n  </Badge>,\n  mountNode\n);\n\n","css":".basic-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 50%;\n    background: #eee;\n}\n","body":"\n简单的徽章展示。\n\n"},{"title":"动态","order":"5","jsx":"import { Badge, Button, Icon } from \"@icedesign/base\";\n\nconst ButtonGroup = Button.Group;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 5,\n      show: true\n    };\n\n    this.increase = this.increase.bind(this);\n    this.decrease = this.decrease.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  increase() {\n    const count = this.state.count + 1;\n    this.setState({ count });\n  }\n\n  decrease() {\n    let count = this.state.count - 1;\n    if (count < 0) {\n      count = 0;\n    }\n    this.setState({ count });\n  }\n\n  onClick() {\n    this.setState({\n      show: !this.state.show\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"change-count\">\n          <Badge count={this.state.count}>\n            <a href=\"#\" className=\"head-example\" />\n          </Badge>\n          <ButtonGroup>\n            <Button onClick={this.increase}>\n              <Icon type=\"add\" />\n            </Button>\n            <Button onClick={this.decrease}>\n              <Icon type=\"subtract\" />\n            </Button>\n          </ButtonGroup>\n        </div>\n        <div>\n          <Badge dot={this.state.show}>\n            <a href=\"#\" className=\"head-example\" />\n          </Badge>\n          <Button onClick={this.onClick}>切换红点显隐</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".next-badge {\n    margin-right: 16px;\n}\n.change-count {\n    margin-bottom: 16px;\n}\n.head-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 50%;\n    background: #eee;\n}\n","body":"\n展示动态变化的效果。\n\n"},{"title":"小红点展示在左侧","order":"4","jsx":"import { Badge } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <ul className=\"next-badge-list-wrapper\">\n      <li>\n        <Badge dot align=\"left\">\n          列表前面的小圆点\n        </Badge>\n      </li>\n      <li>\n        <Badge dot align=\"left\">\n          列表前面的小圆点\n        </Badge>\n      </li>\n      <li>\n        <Badge dot align=\"left\">\n          列表前面的小圆点\n        </Badge>\n      </li>\n    </ul>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n放在列表前面的小红点。\n\n"},{"title":"讨嫌的小红点","order":"3","jsx":"import { Badge, Icon } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Badge dot>\n      <Icon type=\"email\" />\n    </Badge>\n    <Badge dot>\n      <a href=\"#\">一个链接</a>\n    </Badge>\n  </div>,\n  mountNode\n);\n\n","css":".next-badge {\n    margin-right: 16px;\n}\n","body":"\n没有具体的数字。\n\n"},{"title":"独立使用","order":"2","jsx":"import { Badge } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Badge count={25} />\n    <Badge\n      count={4}\n      style={{\n        backgroundColor: \"#fff\",\n        color: \"#999\",\n        border: \"1px solid #d9d9d9\"\n      }}\n    />\n    <Badge count={109} style={{ backgroundColor: \"#87d068\" }} />\n  </div>,\n  mountNode\n);\n\n","css":".next-badge {\n    margin-right: 16px;\n}\n","body":"\n不包裹任何元素即独立使用，可自定样式展示。\n\n"},{"title":"大数字","order":"1","jsx":"import { Badge } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Badge count={100}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n    <Badge count={200} overflowCount={199}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n  </div>,\n  mountNode\n);\n\n","css":".next-badge {\n    margin-right: 16px;\n}\n.head-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 50%;\n    background: #eee;\n}\n","body":"\n超过overflow的数值，会显示`${overflow}+`，overflow默认值为`99`。\n\n"}]},{"name":"Balloon","category":"Components","title":"气泡提示","type":"弹层","importStatement":"import { Balloon } from '@icedesign/base';","body":"\n\n## 开发指南\n\n气泡组件\n\n### 何时使用\n\n-   当用户与被说明对象（文字，图片，输入框等）发生交互行为的action开始时, 即刻跟随动作出现一种辅助或帮助的提示信息。\n-   其中Balloon.Tooltip是简化版本，主要用于hover时显示简单文案。\n\n### 使用注意\n\n-   对于trigger是自定义的React Component的情况，自定义的React Component 需要透传onMouseEnter/onMouseLeave/onClick 事件。\n\n","propsSchema":{"name":"Balloon","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内敛样式","docblock":"自定义内敛样式","properties":[]},"children":{"type":{"name":"any"},"required":false,"description":"浮层的内容","docblock":"浮层的内容"},"type":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'primary'","computed":false}]},"required":false,"description":"样式类型","defaultValue":{"value":"'normal'","computed":false},"docblock":"样式类型"},"visible":{"type":{"name":"bool"},"required":false,"description":"弹层当前显示的状态","docblock":"弹层当前显示的状态"},"defaultVisible":{"type":{"name":"bool"},"required":false,"description":"弹层默认显示的状态","defaultValue":{"value":"false","computed":false},"docblock":"弹层默认显示的状态"},"onVisibleChange":{"type":{"name":"func"},"required":false,"description":"弹层在显示和隐藏触发的事件","docblock":"弹层在显示和隐藏触发的事件\n@param {Boolean} visible 弹层是否隐藏和显示","params":[{"name":"visible","description":"弹层是否隐藏和显示","type":{"name":"Boolean"}}],"returns":null},"alignment":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false,"description":"普通对齐 箭头居中"},{"value":"'edge'","computed":false,"description":"边缘对齐 箭头可在trigger的边缘"}]},"required":false,"description":"弹出层对齐方式","defaultValue":{"value":"'normal'","computed":false},"docblock":"弹出层对齐方式\n@enumdesc 普通对齐 箭头居中, 边缘对齐 箭头可在trigger的边缘","value":[{"value":"'normal'","computed":false,"description":"普通对齐 箭头居中"},{"value":"'edge'","computed":false,"description":"边缘对齐 箭头可在trigger的边缘"}]},"closable":{"type":{"name":"bool"},"required":false,"description":"是否显示关闭按钮","defaultValue":{"value":"true","computed":false},"docblock":"是否显示关闭按钮"},"align":{"type":{"name":"enum","value":[{"value":"'t'","computed":false,"description":"上"},{"value":"'r'","computed":false,"description":"右"},{"value":"'b'","computed":false,"description":"下"},{"value":"'l'","computed":false,"description":"左"},{"value":"'tl'","computed":false,"description":"上左"},{"value":"'tr'","computed":false,"description":"上右"},{"value":"'bl'","computed":false,"description":"下左"},{"value":"'br'","computed":false,"description":"下右"},{"value":"'lt'","computed":false,"description":"左上"},{"value":"'lb'","computed":false,"description":"左下"},{"value":"'rt'","computed":false,"description":"右上"},{"value":"'rb'","computed":false,"description":"右下"}]},"required":false,"description":"弹出层位置","defaultValue":{"value":"'b'","computed":false},"docblock":"弹出层位置\n@enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下","value":[{"value":"'t'","computed":false,"description":"上"},{"value":"'r'","computed":false,"description":"右"},{"value":"'b'","computed":false,"description":"下"},{"value":"'l'","computed":false,"description":"左"},{"value":"'tl'","computed":false,"description":"上左"},{"value":"'tr'","computed":false,"description":"上右"},{"value":"'bl'","computed":false,"description":"下左"},{"value":"'br'","computed":false,"description":"下右"},{"value":"'lt'","computed":false,"description":"左上"},{"value":"'lb'","computed":false,"description":"左下"},{"value":"'rt'","computed":false,"description":"右上"},{"value":"'rb'","computed":false,"description":"右下"}]},"offset":{"type":{"name":"array"},"required":false,"description":"弹层相对于trigger的定位的微调","defaultValue":{"value":"[0, 0]","computed":false},"docblock":"弹层相对于trigger的定位的微调"},"trigger":{"type":{"name":"any"},"required":false,"description":"触发元素","defaultValue":{"value":"<span></span>","computed":false},"docblock":"触发元素"},"triggerType":{"type":{"name":"enum","value":[{"value":"'hover'","computed":false,"description":"鼠标悬浮"},{"value":"'focus'","computed":false,"description":"获取到焦点"},{"value":"'click'","computed":false,"description":"鼠标点击"}]},"required":false,"description":"触发行为","defaultValue":{"value":"'hover'","computed":false},"docblock":"触发行为\n@enumdesc 鼠标悬浮, 获取到焦点, 鼠标点击","value":[{"value":"'hover'","computed":false,"description":"鼠标悬浮"},{"value":"'focus'","computed":false,"description":"获取到焦点"},{"value":"'click'","computed":false,"description":"鼠标点击"}]},"onClose":{"type":{"name":"func"},"required":false,"description":"任何visible为false时会触发的事件","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"任何visible为false时会触发的事件","params":[],"returns":null},"onCloseClick":{"type":{"name":"func"},"required":false,"description":"点击关闭按钮的click事件","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"点击关闭按钮的click事件","params":[],"returns":null},"needAdjust":{"type":{"name":"bool"},"required":false,"description":"是否进行自动位置调整","defaultValue":{"value":"false","computed":false},"docblock":"是否进行自动位置调整"},"delay":{"type":{"name":"number"},"required":false,"description":"弹层在触发以后的延时显示","docblock":"弹层在触发以后的延时显示"},"afterClose":{"type":{"name":"func"},"required":false,"description":"浮层关闭后触发的事件, 如果有动画，则在动画结束后触发","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"浮层关闭后触发的事件, 如果有动画，则在动画结束后触发","params":[],"returns":null},"shouldUpdatePosition":{"type":{"name":"bool"},"required":false,"description":"强制更新定位信息","docblock":"强制更新定位信息"},"autoFocus":{"type":{"name":"bool"},"required":false,"description":"弹层出现后是否自动focus到内部第一个元素","defaultValue":{"value":"false","computed":false},"docblock":"弹层出现后是否自动focus到内部第一个元素"},"safeNode":{"type":{"name":"string"},"required":false,"description":"安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象","defaultValue":{"value":"undefined","computed":true},"docblock":"安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象"},"safeId":{"type":{"name":"string"},"required":false,"description":"用来指定safeNode节点的id，和safeNode配合使用","defaultValue":{"value":"null","computed":false},"docblock":"用来指定safeNode节点的id，和safeNode配合使用"},"animation":{"type":{"name":"union","value":[{"name":"object"},{"name":"bool"}]},"required":false,"description":"配置动画的播放方式","defaultValue":{"value":"{\n    in: 'zoomIn',\n    out: 'zoomOut'\n}","computed":false},"docblock":"配置动画的播放方式\n@param {String} in 进场动画\n@param {String} out 出场动画"},"cache":{"type":{"name":"bool"},"required":false,"description":"弹层的dom节点关闭时是否删除","defaultValue":{"value":"false","computed":false},"docblock":"弹层的dom节点关闭时是否删除"},"container":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":false,"description":"指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。","docblock":"指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。"}},"methods":[],"subComponents":[{"name":"Tooltip","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内敛样式","docblock":"自定义内敛样式","properties":[]},"align":{"type":{"name":"enum","value":[{"value":"'t'","computed":false,"description":"上"},{"value":"'r'","computed":false,"description":"右"},{"value":"'b'","computed":false,"description":"下"},{"value":"'l'","computed":false,"description":"左"},{"value":"'tl'","computed":false,"description":"上左"},{"value":"'tr'","computed":false,"description":"上右"},{"value":"'bl'","computed":false,"description":"下左"},{"value":"'br'","computed":false,"description":"下右"},{"value":"'lt'","computed":false,"description":"左上"},{"value":"'lb'","computed":false,"description":"左下"},{"value":"'rt'","computed":false,"description":"右上"},{"value":"'rb'","computed":false,"description":"右下"}]},"required":false,"description":"弹出层位置","defaultValue":{"value":"'b'","computed":false},"docblock":"弹出层位置\n@enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下","value":[{"value":"'t'","computed":false,"description":"上"},{"value":"'r'","computed":false,"description":"右"},{"value":"'b'","computed":false,"description":"下"},{"value":"'l'","computed":false,"description":"左"},{"value":"'tl'","computed":false,"description":"上左"},{"value":"'tr'","computed":false,"description":"上右"},{"value":"'bl'","computed":false,"description":"下左"},{"value":"'br'","computed":false,"description":"下右"},{"value":"'lt'","computed":false,"description":"左上"},{"value":"'lb'","computed":false,"description":"左下"},{"value":"'rt'","computed":false,"description":"右上"},{"value":"'rb'","computed":false,"description":"右下"}]},"text":{"type":{"name":"node"},"required":false,"description":"tooltip 内部内容文案","defaultValue":{"value":"''","computed":false},"docblock":"tooltip 内部内容文案"},"trigger":{"type":{"name":"any"},"required":false,"description":"触发元素","defaultValue":{"value":"<span></span>","computed":false},"docblock":"触发元素"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nchildren | 浮层的内容 | any | -\ntype | 样式类型<br><br>**可选值**:<br>'normal', 'primary' | Enum | 'normal'\nvisible | 弹层当前显示的状态 | Boolean | -\ndefaultVisible | 弹层默认显示的状态 | Boolean | false\nonVisibleChange | 弹层在显示和隐藏触发的事件<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>*visible*: {Boolean} 弹层是否隐藏和显示 | Function | -\nalignment | 弹出层对齐方式<br><br>**可选值**:<br>'normal'(普通对齐 箭头居中)<br>'edge'(边缘对齐 箭头可在trigger的边缘) | Enum | 'normal'\nclosable | 是否显示关闭按钮 | Boolean | true\nalign | 弹出层位置<br><br>**可选值**:<br>'t'(上)<br>'r'(右)<br>'b'(下)<br>'l'(左)<br>'tl'(上左)<br>'tr'(上右)<br>'bl'(下左)<br>'br'(下右)<br>'lt'(左上)<br>'lb'(左下)<br>'rt'(右上)<br>'rb'(右下) | Enum | 'b'\noffset | 弹层相对于trigger的定位的微调 | Array | [0, 0]\ntrigger | 触发元素 | any | &lt;span&gt;&lt;/span&gt;\ntriggerType | 触发行为<br><br>**可选值**:<br>'hover'(鼠标悬浮)<br>'focus'(获取到焦点)<br>'click'(鼠标点击) | Enum | 'hover'\nonClose | 任何visible为false时会触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonCloseClick | 点击关闭按钮的click事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nneedAdjust | 是否进行自动位置调整 | Boolean | false\ndelay | 弹层在触发以后的延时显示 | Number | -\nafterClose | 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nshouldUpdatePosition | 强制更新定位信息 | Boolean | -\nautoFocus | 弹层出现后是否自动focus到内部第一个元素 | Boolean | false\nsafeNode | 安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象 | String | undefined\nsafeId | 用来指定safeNode节点的id，和safeNode配合使用 | String | null\nanimation | 配置动画的播放方式 | Object/Boolean | {     in: 'zoomIn',     out: 'zoomOut' }\ncache | 弹层的dom节点关闭时是否删除 | Boolean | false\ncontainer | 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。 | String/Function | -\n","methodREADME":[],"subComponentsREADME":[{"name":"Tooltip","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | -\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nalign | 弹出层位置<br><br>**可选值**:<br>'t'(上)<br>'r'(右)<br>'b'(下)<br>'l'(左)<br>'tl'(上左)<br>'tr'(上右)<br>'bl'(下左)<br>'br'(下右)<br>'lt'(左上)<br>'lb'(左下)<br>'rt'(右上)<br>'rb'(右下) | Enum | 'b'\ntext | tooltip 内部内容文案 | ReactNode | ''\ntrigger | 触发元素 | any | &lt;span&gt;&lt;/span&gt;\n","methodREADME":[]}],"demos":[{"title":"边缘对齐设置","order":"3","jsx":"import { Button, Balloon } from \"@icedesign/base\";\n\nconst top = (\n  <Button id=\"top\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上边\n  </Button>\n);\nconst right = (\n  <Button id=\"right\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右边\n  </Button>\n);\nconst bottom = (\n  <Button id=\"bottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下边\n  </Button>\n);\nconst left = (\n  <Button id=\"left\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左边\n  </Button>\n);\nconst topLeft = (\n  <Button id=\"topLeft\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上左\n  </Button>\n);\nconst topRight = (\n  <Button id=\"topRight\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上右\n  </Button>\n);\nconst rightTop = (\n  <Button id=\"rightTop\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右上\n  </Button>\n);\nconst rightBottom = (\n  <Button id=\"rightBottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右下\n  </Button>\n);\nconst bottomLeft = (\n  <Button id=\"bottomLeft\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下左\n  </Button>\n);\nconst bottomRight = (\n  <Button id=\"bottomRight\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下右\n  </Button>\n);\nconst leftTop = (\n  <Button id=\"leftTop\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左上\n  </Button>\n);\nconst leftBottom = (\n  <Button id=\"leftBottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左下\n  </Button>\n);\n\nconst Content = () => (\n  <div>\n    <h4 style={{ marginTop: 0 }}>balloon title</h4>\n    <hr />\n    <p>balloon content</p>\n  </div>\n);\n\nconst App = () => (\n  <div style={{ paddingLeft: 320, paddingTop: 100 }}>\n    <div style={{ marginLeft: 75 }}>\n      <Balloon\n        trigger={topLeft}\n        align=\"tl\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={top}\n        align=\"t\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={topRight}\n        align=\"tr\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ width: 80, float: \"left\" }}>\n      <Balloon\n        trigger={leftTop}\n        align=\"lt\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={left}\n        align=\"l\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={leftBottom}\n        align=\"lb\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ width: 80, marginLeft: 290 }}>\n      <Balloon\n        trigger={rightTop}\n        align=\"rt\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={right}\n        align=\"r\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={rightBottom}\n        align=\"rb\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ marginLeft: 80, clear: \"both\" }}>\n      <Balloon\n        trigger={bottomLeft}\n        align=\"bl\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={bottom}\n        align=\"b\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={bottomRight}\n        align=\"br\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n  </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n位置有十二个方向。\n\n"},{"title":"基本","order":"0","jsx":"import { Button, Balloon } from \"@icedesign/base\";\n\nconst defaultTrigger = (\n  <Button className=\"btrigger\" style={{ margin: \"5px\" }}>\n    默认样式\n  </Button>\n);\nconst primary = (\n  <Button className=\"btrigger\" style={{ margin: \"5px\" }}>\n    强调样式\n  </Button>\n);\n\nconst Demo = () => (\n  <div className=\"container\">\n    <Balloon trigger={defaultTrigger} closable={false}>\n      default\n    </Balloon>\n    <Balloon type=\"primary\" trigger={primary} triggerType=\"click\">\n      primary\n    </Balloon>\n  </div>\n);\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n最简单的用法。\n\n"},{"title":"从浮层内关闭, 事件回调","order":"4","jsx":"import { Button, Balloon } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  hide() {\n    this.setState({\n      visible: false\n    });\n  }\n\n  // onVisibleChange事件会在所有visible属性被改变的时候触发;\n  // 比如对于click类型,会在点击button的时候触发和点击空白区域的时候触发;\n  // 对于hover类型,会在mouseentter,mouseleave的时候触发;\n  handleVisibleChange(visible) {\n    this.setState({ visible });\n  }\n\n  onClose() {\n    console.log(\"onClose doing!\");\n  }\n\n  afterClose() {\n    console.log(\"afterClose doing!\");\n  }\n  render() {\n    const visibleTrigger = (\n      <Button type=\"primary\" style={{ margin: \"5px\" }}>\n        点击弹出卡片\n      </Button>\n    );\n    const clickTrigger = (\n      <Button type=\"primary\" style={{ margin: \"5px\" }}>\n        hover弹出卡片\n      </Button>\n    );\n\n    const content = (\n      <div>\n        点击按钮操作<br />\n        <a style={{ right: 0 }} id=\"confirmBtn\" onClick={this.hide.bind(this)}>\n          确认\n        </a>\n        <a\n          style={{ marginLeft: \"4px\" }}\n          id=\"cancelBtn\"\n          onClick={this.hide.bind(this)}\n        >\n          关闭\n        </a>\n      </div>\n    );\n    return (\n      <div>\n        <Balloon\n          trigger={visibleTrigger}\n          triggerType=\"click\"\n          visible={this.state.visible}\n          onVisibleChange={this.handleVisibleChange.bind(this)}\n        >\n          {content}\n        </Balloon>\n        <Balloon\n          trigger={clickTrigger}\n          triggerType=\"hover\"\n          onClose={this.onClose.bind(this)}\n          afterClose={this.afterClose.bind(this)}\n        >\n          内容区域\n        </Balloon>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n使用 `visible` ,属性控制浮层显示, 使 balloon 变为受限组件。\n\n"},{"title":"嵌套浮层问题","order":"6","jsx":"import { Button, Balloon, DatePicker } from \"@icedesign/base\";\n\nconst primary = <Button className=\"btrigger\">primary</Button>;\nconst innerButton = <Button className=\"btrigger\">innerButton</Button>;\nconst App = () => (\n  <div className=\"container nested\">\n    <Balloon\n      type=\"primary\"\n      trigger={primary}\n      closable={false}\n      triggerType=\"click\"\n    >\n      <DatePicker\n        defaultValue=\"2016-10-10\"\n        container={trigger => trigger.parentNode}\n      />\n    </Balloon>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n    <Balloon\n      type=\"primary\"\n      trigger={innerButton}\n      closable={false}\n      triggerType=\"click\"\n    >\n      <Balloon\n        trigger={<Button type=\"primary\">please click</Button>}\n        container={trigger => trigger.parentNode}\n        triggerType=\"click\"\n      >\n        nesting balloon content\n      </Balloon>\n    </Balloon>\n  </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n","css":"\n.container.nested {\n    margin-left: 100px;\n    margin-bottom: 50px;\n}\n\n","body":"\n浮层中如果又有浮层,比如在Balloon中有DatePicker的浮层,需要用safeNode解决datePicker选择时,balloon浮层关闭的问题.\n\n"},{"title":"close按钮事件，手动控制visible","order":"5","jsx":"import { Button, Balloon } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  // 一切改变visible为false的行为都会触发此事件\n  onClose() {\n    console.log(\"onClose doing!\");\n  }\n\n  // close按钮的click事件\n  onCloseClick() {\n    this.setState({ visible: false });\n  }\n\n  onClick() {\n    this.setState({ visible: true });\n  }\n\n  render() {\n    const visibleTrigger = (\n      <Button onClick={this.onClick.bind(this)} type=\"primary\">\n        点击弹出卡片\n      </Button>\n    );\n    const content = <div>content</div>;\n\n    return (\n      <div style={{ marginBottom: \"100px\" }}>\n        <Balloon\n          trigger={visibleTrigger}\n          triggerType=\"click\"\n          visible={this.state.visible}\n          onCloseClick={this.onCloseClick.bind(this)}\n          onClose={this.onClose.bind(this)}\n        >\n          {content}\n        </Balloon>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n使用 `visible`,属性控制浮层显示, 使balloon变为受限组件。\n\n"},{"title":"位置","order":"2","jsx":"import { Button, Balloon } from \"@icedesign/base\";\n\nconst top = (\n  <Button id=\"top\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上边\n  </Button>\n);\nconst right = (\n  <Button id=\"right\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右边\n  </Button>\n);\nconst bottom = (\n  <Button id=\"bottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下边\n  </Button>\n);\nconst left = (\n  <Button id=\"left\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左边\n  </Button>\n);\nconst topLeft = (\n  <Button id=\"topLeft\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上左\n  </Button>\n);\nconst topRight = (\n  <Button id=\"topRight\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上右\n  </Button>\n);\nconst rightTop = (\n  <Button id=\"rightTop\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右上\n  </Button>\n);\nconst rightBottom = (\n  <Button id=\"rightBottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右下\n  </Button>\n);\nconst bottomLeft = (\n  <Button id=\"bottomLeft\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下左\n  </Button>\n);\nconst bottomRight = (\n  <Button id=\"bottomRight\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下右\n  </Button>\n);\nconst leftTop = (\n  <Button id=\"leftTop\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左上\n  </Button>\n);\nconst leftBottom = (\n  <Button id=\"leftBottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左下\n  </Button>\n);\n\nconst Content = () => (\n  <div>\n    <h4 style={{ marginTop: 0 }}>balloon title</h4>\n    <hr />\n    <p>balloon content</p>\n  </div>\n);\n\nconst App = () => (\n  <div style={{ paddingLeft: 320, paddingTop: 100 }}>\n    <div style={{ marginLeft: 75 }}>\n      <Balloon\n        trigger={topLeft}\n        align=\"tl\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={top}\n        align=\"t\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={topRight}\n        align=\"tr\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ width: 80, float: \"left\" }}>\n      <Balloon\n        trigger={leftTop}\n        align=\"lt\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={left}\n        align=\"l\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={leftBottom}\n        align=\"lb\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ width: 80, marginLeft: 290 }}>\n      <Balloon\n        trigger={rightTop}\n        align=\"rt\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={right}\n        align=\"r\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={rightBottom}\n        align=\"rb\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ marginLeft: 80, clear: \"both\" }}>\n      <Balloon\n        trigger={bottomLeft}\n        align=\"bl\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={bottom}\n        align=\"b\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={bottomRight}\n        align=\"br\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n  </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n位置有十二个方向。\n\n"},{"title":"tooltip","order":"7","jsx":"import { Button, Balloon } from \"@icedesign/base\";\n\nconst Tooltip = Balloon.Tooltip;\n\nconst top = (\n  <Button style={{ margin: \"5px\" }} id=\"top\" className=\"btrigger\">\n    上边\n  </Button>\n);\nconst right = (\n  <Button style={{ margin: \"5px\" }} id=\"right\" className=\"btrigger\">\n    右边\n  </Button>\n);\nconst bottom = (\n  <Button style={{ margin: \"5px\" }} id=\"bottom\" className=\"btrigger\">\n    下边\n  </Button>\n);\nconst left = (\n  <Button style={{ margin: \"5px\" }} id=\"left\" className=\"btrigger\">\n    左边\n  </Button>\n);\nconst topLeft = (\n  <Button style={{ margin: \"5px\" }} id=\"topLeft\" className=\"btrigger\">\n    上左\n  </Button>\n);\nconst topRight = (\n  <Button style={{ margin: \"5px\" }} id=\"topRight\" className=\"btrigger\">\n    上右\n  </Button>\n);\nconst rightTop = (\n  <Button style={{ margin: \"5px\" }} id=\"rightTop\" className=\"btrigger\">\n    右上\n  </Button>\n);\nconst rightBottom = (\n  <Button style={{ margin: \"5px\" }} id=\"rightBottom\" className=\"btrigger\">\n    右下\n  </Button>\n);\nconst bottomLeft = (\n  <Button style={{ margin: \"5px\" }} id=\"bottomLeft\" className=\"btrigger\">\n    下左\n  </Button>\n);\nconst bottomRight = (\n  <Button style={{ margin: \"5px\" }} id=\"bottomRight\" className=\"btrigger\">\n    下右\n  </Button>\n);\nconst leftTop = (\n  <Button style={{ margin: \"5px\" }} id=\"leftTop\" className=\"btrigger\">\n    左上\n  </Button>\n);\nconst leftBottom = (\n  <Button style={{ margin: \"5px\" }} id=\"leftBottom\" className=\"btrigger\">\n    左下\n  </Button>\n);\n\nconst App = () => (\n  <div style={{ paddingLeft: 220, paddingTop: 100 }}>\n    <div style={{ marginLeft: 75 }}>\n      <Tooltip trigger={topLeft} align=\"tl\" text=\"text text\" />\n      <Tooltip trigger={top} align=\"t\" text=\"text text\" />\n      <Tooltip trigger={topRight} align=\"tr\" text=\"text text\" />\n    </div>\n    <div style={{ width: 80, float: \"left\" }}>\n      <Tooltip trigger={leftTop} align=\"lt\" text=\"text text\" />\n      <Tooltip trigger={left} align=\"l\" text=\"text text\" />\n      <Tooltip trigger={leftBottom} align=\"lb\" text=\"text text\" />\n    </div>\n    <div style={{ width: 80, marginLeft: 290 }}>\n      <Tooltip trigger={rightTop} align=\"rt\" text=\"text text\" />\n      <Tooltip trigger={right} align=\"r\" text=\"text text\" />\n      <Tooltip trigger={rightBottom} align=\"rb\" text=\"text text\" />\n    </div>\n    <div style={{ marginLeft: 80, clear: \"both\" }}>\n      <Tooltip trigger={bottomLeft} align=\"bl\" text=\"text text\" />\n      <Tooltip trigger={bottom} align=\"b\" text=\"text text\" />\n      <Tooltip trigger={bottomRight} align=\"br\" text=\"text text\" />\n    </div>\n  </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n","css":".code-box-demo .sui-btn {\n    margin-right: 1em;\n    margin-bottom: 1em;\n}\n","body":"\n简化的popup, 只能设置align, trigger和text。tooltip里的只能是文本, 通过text设置, 触发条件是hover.\n\n"},{"title":"三种触发方式","order":"1","jsx":"import { Button, Balloon } from \"@icedesign/base\";\n\nconst content = (\n  <div>\n    <p>内容</p>\n  </div>\n);\nconst MoveTarget = <Button style={{ margin: \"5px\" }}>移入</Button>;\nconst ClickTarget = <Button style={{ margin: \"5px\" }}>点击</Button>;\nconst FocusTarget = <Button style={{ margin: \"5px\" }}>获取焦点</Button>;\n\nconst App = () => (\n  <div>\n    <Balloon trigger={MoveTarget} triggerType=\"hover\">\n      {content}\n    </Balloon>\n\n    <Balloon trigger={ClickTarget} triggerType=\"click\">\n      {content}\n    </Balloon>\n\n    <Balloon trigger={FocusTarget} triggerType=\"focus\">\n      {content}\n    </Balloon>\n  </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n鼠标移入、聚集、点击。\n\n"}]},{"name":"Breadcrumb","category":"Components","title":"面包屑","type":"导航","importStatement":"import { Breadcrumb } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n用来告知用户当前的位置，以及当前页面在整个网站中的位置，属于一种辅助的导航方式，适用于清晰且具多层次结构的网站，每一层内容为层级归属关系，方便用户返回上一级或各个层级的页面。\n\n","propsSchema":{"name":"Breadcrumb","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"custom","raw":"(props, propName) => {\n    React.Children.forEach(props[propName], child => {\n        if (!(child && typeof child.type === 'function' && child.type._typeMark === 'breadcrumb_item')) {\n            throw new Error('Breadcrumb\\'s children must be Breadcrumb.Item!');\n        }\n    });\n}"},"required":false,"description":"面包屑子节点 ，需传入 Breadcrumb.Item","docblock":"面包屑子节点 ，需传入 Breadcrumb.Item"},"maxNode":{"type":{"name":"number"},"required":false,"description":"面包屑显示的最多个数，超出的部分会被隐藏","docblock":"面包屑显示的最多个数，超出的部分会被隐藏"},"separator":{"type":{"name":"node"},"required":false,"description":"分隔符，可以是文本，也可以是 Icon","defaultValue":{"value":"<Icon size=\"xs\" type=\"arrow-right\" />","computed":false},"docblock":"分隔符，可以是文本，也可以是 Icon"}},"methods":[],"subComponents":[{"name":"Item","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"面包屑节点内容","docblock":"面包屑节点内容"},"link":{"type":{"name":"string"},"required":false,"description":"面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />`","docblock":"面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />`"}},"methods":[],"order":1},{"name":"Keyword","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"关键字内容","docblock":"关键字内容"}},"methods":[],"order":2},{"name":"Number","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"数字内容","docblock":"数字内容"}},"methods":[],"order":3}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 面包屑子节点 ，需传入 Breadcrumb.Item | custom | -\nmaxNode | 面包屑显示的最多个数，超出的部分会被隐藏 | Number | -\nseparator | 分隔符，可以是文本，也可以是 Icon | ReactNode | &lt;Icon size=\"xs\" type=\"arrow-right\" /&gt;\n","methodREADME":[],"subComponentsREADME":[{"name":"Item","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 面包屑节点内容 | ReactNode | -\nlink | 面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />` | String | -\n","methodREADME":[]},{"name":"Keyword","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 关键字内容 | ReactNode | -\n","methodREADME":[]},{"name":"Number","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 数字内容 | ReactNode | -\n","methodREADME":[]}],"demos":[{"title":"基本用法","order":"0","jsx":"import { Breadcrumb } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Breadcrumb>\n    <Breadcrumb.Item link=\"javascript:void(0);\">Home</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">All Categories</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Women’s Clothing\n    </Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Blouses & Shirts\n    </Breadcrumb.Item>\n    <Breadcrumb.Item>\n      <Breadcrumb.Keyword>T-shirts&nbsp;</Breadcrumb.Keyword>\n      <Breadcrumb.Number>78,999</Breadcrumb.Number> Results\n    </Breadcrumb.Item>\n  </Breadcrumb>,\n  mountNode\n);\n\n","css":"","body":"\n使用 `Breadcrumb.Item` 来设置面包屑子节点，如果设置其 `link` 属性就是 `<a />` 节点，否则为 `<span />` 节点，另外可以使用 `Breadcrumb.Keyword` 来强调文本，`Breadcrumb.Number` 来为数字设置特殊样式。\n\n"},{"title":"显示省略","order":"1","jsx":"import { Breadcrumb } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Breadcrumb maxNode={5}>\n    <Breadcrumb.Item link=\"javascript:void(0);\">Home 1</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">Whatever 2</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      All Categories 3\n    </Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Women’s Clothing 4\n    </Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Blouses & Shirts 5\n    </Breadcrumb.Item>\n    <Breadcrumb.Item>T-shirts 6</Breadcrumb.Item>\n  </Breadcrumb>,\n  mountNode\n);\n\n","css":"","body":"\n当超过设置的最大个数的时候，显示省略号。\n\n"},{"title":"设置分隔符","order":"2","jsx":"import { Breadcrumb } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Breadcrumb separator=\"/\">\n    <Breadcrumb.Item link=\"javascript:void(0);\">Home</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">All Categories</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Women’s Clothing\n    </Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Blouses & Shirts\n    </Breadcrumb.Item>\n    <Breadcrumb.Item>T-shirts</Breadcrumb.Item>\n  </Breadcrumb>,\n  mountNode\n);\n\n","css":"","body":"\n也可以设置不同的分隔符。\n\n"}]},{"name":"Button","category":"Components","title":"按钮","type":"表单","importStatement":"import { Button } from '@icedesign/base';","body":"\n\n按钮用于开始一个即时操作。\n\n## Guide\n\n### 何时使用\n\n标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。\n\n","propsSchema":{"name":"Button","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"组件样式的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"组件样式的品牌前缀"},"type":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'secondary'","computed":false},{"value":"'normal'","computed":false},{"value":"'dark'","computed":false},{"value":"'light'","computed":false}]},"required":false,"description":"按钮的类型","defaultValue":{"value":"'normal'","computed":false},"docblock":"按钮的类型"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"按钮的尺寸","defaultValue":{"value":"'medium'","computed":false},"docblock":"按钮的尺寸"},"shape":{"type":{"name":"enum","value":[{"value":"'ghost'","computed":false},{"value":"'text'","computed":false},{"value":"'warning'","computed":false}]},"required":false,"description":"按钮的形态","docblock":"按钮的形态"},"htmlType":{"type":{"name":"string"},"required":false,"description":"设置 `button` 标签的原生 `type` 值","defaultValue":{"value":"'button'","computed":false},"docblock":"设置 `button` 标签的原生 `type` 值"},"component":{"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'span'","computed":false},{"value":"'a'","computed":false},{"value":"'div'","computed":false}]},"required":false,"description":"设置标签类型","defaultValue":{"value":"'button'","computed":false},"docblock":"设置标签类型"},"loading":{"type":{"name":"bool"},"required":false,"description":"设置按钮的载入状态","defaultValue":{"value":"false","computed":false},"docblock":"设置按钮的载入状态"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","docblock":"是否禁用"},"onClick":{"type":{"name":"func"},"required":false,"description":"点击按钮的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击按钮的回调\n@param {Object} e Event Object","params":[{"name":"e","description":"Event Object","type":{"name":"Object"}}],"returns":null},"className":{"type":{"name":"string"},"required":false,"description":"自定义样式","docblock":"自定义样式"}},"methods":[],"subComponents":[{"name":"Group","props":{"size":{"type":{"name":"string"},"required":false,"description":"统一设置 Button 组件的按钮大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"统一设置 Button 组件的按钮大小"}},"methods":[]},{"name":"Split","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式品牌前缀"},"align":{"type":{"name":"string"},"required":false,"description":"Dropdown 的对齐方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)","defaultValue":{"value":"'tr br'","computed":false},"docblock":"Dropdown 的对齐方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)"},"offset":{"type":{"name":"array"},"required":false,"description":"Dropdown 的位置偏移，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)","defaultValue":{"value":"[0, 4]","computed":false},"docblock":"Dropdown 的位置偏移，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)"},"type":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'secondary'","computed":false},{"value":"'normal'","computed":false},{"value":"'dark'","computed":false},{"value":"'light'","computed":false}]},"required":false,"description":"类型，同 Button","defaultValue":{"value":"'normal'","computed":false},"docblock":"类型，同 Button"},"shape":{"type":{"name":"enum","value":[{"value":"'ghost'","computed":false},{"value":"'text'","computed":false},{"value":"'warning'","computed":false}]},"required":false,"description":"外观，同 Button","docblock":"外观，同 Button"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"尺寸，同 Button","defaultValue":{"value":"'medium'","computed":false},"docblock":"尺寸，同 Button"},"trigger":{"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'hover'","computed":false}]},"required":false,"description":"Dropdown 触发方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)","defaultValue":{"value":"'click'","computed":false},"docblock":"Dropdown 触发方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)"},"menu":{"type":{"name":"node"},"required":false,"description":"弹出的内容，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)","docblock":"弹出的内容，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)"},"onClick":{"type":{"name":"func"},"required":false,"description":"点击按钮的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击按钮的回调\n@param {Object} e Event Object","params":[{"name":"e","description":"Event Object","type":{"name":"Object"}}],"returns":null}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 组件样式的品牌前缀 | String | 'next-'\ntype | 按钮的类型<br><br>**可选值**:<br>'primary', 'secondary', 'normal', 'dark', 'light' | Enum | 'normal'\nsize | 按钮的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nshape | 按钮的形态<br><br>**可选值**:<br>'ghost', 'text', 'warning' | Enum | -\nhtmlType | 设置 `button` 标签的原生 `type` 值 | String | 'button'\ncomponent | 设置标签类型<br><br>**可选值**:<br>'button', 'span', 'a', 'div' | Enum | 'button'\nloading | 设置按钮的载入状态 | Boolean | false\ndisabled | 是否禁用 | Boolean | -\nonClick | 点击按钮的回调<br><br>**签名**:<br>Function(e: Object) => void<br>**参数**:<br>*e*: {Object} Event Object | Function | () =&gt; {}\nclassName | 自定义样式 | String | -\n","methodREADME":[],"subComponentsREADME":[{"name":"Group","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nsize | 统一设置 Button 组件的按钮大小 | String | 'medium'\n","methodREADME":[]},{"name":"Split","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式品牌前缀 | String | 'next-'\nalign | Dropdown 的对齐方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown) | String | 'tr br'\noffset | Dropdown 的位置偏移，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown) | Array | [0, 4]\ntype | 类型，同 Button<br><br>**可选值**:<br>'primary', 'secondary', 'normal', 'dark', 'light' | Enum | 'normal'\nshape | 外观，同 Button<br><br>**可选值**:<br>'ghost', 'text', 'warning' | Enum | -\nsize | 尺寸，同 Button<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\ntrigger | Dropdown 触发方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)<br><br>**可选值**:<br>'click', 'hover' | Enum | 'click'\nmenu | 弹出的内容，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown) | ReactNode | -\nonClick | 点击按钮的回调<br><br>**签名**:<br>Function(e: Object) => void<br>**参数**:<br>*e*: {Object} Event Object | Function | () =&gt; {}\n","methodREADME":[]}],"demos":[{"title":"按钮类型","order":"0","jsx":"import { Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Button type=\"normal\">普通按钮</Button> &nbsp;&nbsp;\n    <Button type=\"primary\">主要按钮</Button> &nbsp;&nbsp;\n    <Button type=\"secondary\">次要按钮</Button>\n    <br />\n    <br />\n    <Button type=\"normal\" shape=\"text\">\n      普通文本按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button type=\"primary\" shape=\"text\">\n      主要文本按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button type=\"secondary\" shape=\"text\">\n      次要文本按钮\n    </Button>\n    <br />\n    <br />\n    <Button type=\"normal\" shape=\"warning\">\n      普通警告按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button type=\"primary\" shape=\"warning\">\n      主要警告按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button type=\"secondary\" shape=\"warning\">\n      次要警告按钮\n    </Button>\n    <br />\n    <br />\n    <div style={{ clear: \"both\" }}>\n      <div className=\"ghost-light-background\">\n        <Button type=\"light\" shape=\"ghost\">\n          幽灵按钮（浅色）\n        </Button>\n      </div>\n      <div className=\"ghost-dark-background\">\n        <Button type=\"dark\" shape=\"ghost\">\n          幽灵按钮（深色）\n        </Button>\n      </div>\n    </div>\n  </div>,\n  mountNode\n);\n\n","css":".ghost-light-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #EBECF0;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n.ghost-dark-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #333;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n","body":"\n值得注意的是，对于幽灵按钮而言，通常用在有色背景下。针对浅色背景和深色背景的使用场景，幽灵按钮提供了两个特殊的类型，分别是 `light`, `dark`。\n正常情况下通过设置 `type` 为 `primary` `secondary` 可分别创建主按钮、次按钮，若不设置 `type` 值则为普通按钮。不同的样式可以用来区别其重要程度。\n通过 `shape` 属性可以更改按钮的默认形态，包括幽灵按钮、文本按钮、警告按钮。按钮有三种视觉层次：主按钮、次按钮、普通按钮。\n\n"},{"title":"自定义标签类型","order":"7","jsx":"import { Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Button\n      type=\"primary\"\n      component=\"a\"\n      href=\"http://www.alibaba.com\"\n      target=\"_blank\"\n    >\n      <span>确定</span>\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button\n      type=\"secondary\"\n      component=\"a\"\n      href=\"http://www.alibaba.com\"\n      target=\"_blank\"\n    >\n      次要按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button\n      type=\"normal\"\n      component=\"a\"\n      href=\"http://www.alibaba.com\"\n      target=\"_blank\"\n    >\n      普通按钮\n    </Button>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可选值包括 `button`, `span`, `a`, `div`。\n默认情况下 Button 组件使用 `<button>` 标签来渲染按钮，通过 `component` 属性可以自定义 Button 的标签类型。\n\n"},{"title":"不可用状态","order":"5","jsx":"import { Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Button type=\"primary\">主按钮</Button>&nbsp;&nbsp;\n    <Button type=\"primary\" disabled>\n      主按钮(失效)\n    </Button>\n    <br />\n    <br />\n    <Button type=\"secondary\">次按钮</Button>&nbsp;&nbsp;\n    <Button type=\"secondary\" disabled>\n      次按钮(失效)\n    </Button>\n    <br />\n    <br />\n    <Button type=\"normal\">普通按钮</Button>&nbsp;&nbsp;\n    <Button type=\"normal\" disabled>\n      普通按钮(失效)\n    </Button>\n    <br />\n    <br />\n    <div>\n      <div className=\"ghost-light-background\">\n        <Button type=\"light\" shape=\"ghost\" disabled>\n          幽灵按钮（浅色）\n        </Button>\n      </div>\n      <div className=\"ghost-dark-background\">\n        <Button type=\"dark\" shape=\"ghost\" disabled>\n          幽灵按钮（深色）\n        </Button>\n      </div>\n    </div>\n  </div>,\n  mountNode\n);\n\n","css":".ghost-light-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #EBECF0;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n.ghost-dark-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #333;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n","body":"\n添加 `disabled` 属性即可让按钮处于不可用状态，同时按钮样式也会改变。\n\n"},{"title":"按钮组","order":"1","jsx":"import { Button, Icon } from \"@icedesign/base\";\n\nconst ButtonGroup = Button.Group;\n\nReactDOM.render(\n  <div>\n    <h4>基本组合</h4>\n    <ButtonGroup>\n      <Button type=\"primary\">确定</Button>\n      <Button type=\"primary\">取消</Button>\n    </ButtonGroup>\n    <br />\n    <br />\n    <ButtonGroup>\n      <Button disabled>左</Button>\n      <Button disabled>中</Button>\n      <Button disabled>右</Button>\n    </ButtonGroup>\n    <br />\n    <br />\n    <ButtonGroup>\n      <Button type=\"secondary\">左</Button>\n      <Button type=\"secondary\">中</Button>\n      <Button type=\"secondary\">右</Button>\n    </ButtonGroup>\n\n    <h4>带图标按钮组合</h4>\n    <ButtonGroup>\n      <Button type=\"primary\">\n        <Icon type=\"arrow-left\" />\n        <span>后退</span>\n      </Button>\n      <Button type=\"primary\">\n        前进<Icon type=\"arrow-right\" />\n      </Button>\n    </ButtonGroup>\n    <br />\n    <br />\n    <ButtonGroup>\n      <Button type=\"primary\">\n        <Icon type=\"arrow-left\" />\n      </Button>\n      <Button type=\"primary\">\n        <Icon type=\"arrow-right\" />\n      </Button>\n    </ButtonGroup>\n\n    <h4>多个组合</h4>\n    <ButtonGroup>\n      <Button>1</Button>\n      <Button>2</Button>\n      <Button>3</Button>\n      <Button>4</Button>\n      <Button>\n        <span>前进</span>\n        <Icon type=\"arrow-right\" />\n      </Button>\n    </ButtonGroup>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以将多个 `Button` 放入 `Button.Group` 的容器中形成一个按钮组。\n\n"},{"title":"图标按钮","order":"3","jsx":"import { Button, Icon } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Button>\n      <Icon type=\"atm\" />按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button shape=\"text\">\n      <Icon type=\"atm\" />文字按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button shape=\"warning\">\n      <Icon type=\"atm\" />文字按钮\n    </Button>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\nButton 可以嵌入 Icon，此时无需自定义 Icon 的大小，Icon 会跟随 Button 组件的大小。\n\n"},{"title":"加载中","order":"4","jsx":"import { Button } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      loading: false,\n      iconLoading: false\n    };\n  }\n  enterLoading() {\n    this.setState({ loading: true });\n  }\n  enterIconLoading() {\n    this.setState({ iconLoading: true });\n  }\n  render() {\n    return (\n      <div>\n        <Button type=\"secondary\" loading>\n          加载中\n        </Button>&nbsp;&nbsp;\n        <Button\n          type=\"primary\"\n          loading={this.state.loading}\n          onClick={this.enterLoading.bind(this)}\n        >\n          点击变加载\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n添加 `loading` 属性即可让按钮处于加载状态，最后两个按钮演示点击后进入加载状态。\n\n"},{"title":"按钮尺寸","order":"2","jsx":"import { Button, Icon } from \"@icedesign/base\";\n\nconst ButtonGroup = Button.Group;\n\nReactDOM.render(\n  <div>\n    <Button type=\"primary\" size=\"large\">\n      <Icon type=\"atm\" />大号按钮\n    </Button>&nbsp;&nbsp;\n    <Button type=\"primary\">\n      <Icon type=\"atm\" />中号按钮(默认)\n    </Button>&nbsp;&nbsp;\n    <Button type=\"primary\" size=\"small\">\n      <Icon type=\"atm\" />小号按钮\n    </Button>\n    <br />\n    <br />\n    <ButtonGroup size=\"large\">\n      <Button>大</Button>\n      <Button>大</Button>\n      <Button>大</Button>\n    </ButtonGroup>&nbsp;&nbsp;\n    <ButtonGroup>\n      <Button>默认</Button>\n      <Button>默认</Button>\n      <Button>默认</Button>\n    </ButtonGroup>&nbsp;&nbsp;\n    <ButtonGroup size=\"small\">\n      <Button>小</Button>\n      <Button>小</Button>\n      <Button>小</Button>\n    </ButtonGroup>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n对于按钮组而言，可以通过在 `Button.Group` 上统一设置整个组按钮的大小。\n通过设置 `size` 为 `large` `medium` `small` 分别把按钮设为大、中、小尺寸。若不设置 `size`，则尺寸为中。\n按钮有大、中、小三种尺寸。\n\n"},{"title":"Split Button","order":"6","jsx":"import { Button, Menu } from \"@icedesign/base\";\n\nconst SplitButton = Button.Split;\nconst menu = (\n  <Menu>\n    <Menu.Item disabled>abc</Menu.Item>\n    <Menu.Item key=\"abc\">abc</Menu.Item>\n    <Menu.Divider key=\"5\" />\n    <Menu.Item key=\"1\">abc</Menu.Item>\n    <Menu.Item key=\"2\">abc</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <div>\n    <h3>普通按钮</h3>\n    <SplitButton menu={menu} type=\"primary\" onClick={e => console.log(e)}>\n      Upload\n    </SplitButton>&nbsp;&nbsp;\n    <SplitButton menu={menu} type=\"secondary\">\n      Upload\n    </SplitButton>&nbsp;&nbsp;\n    <SplitButton menu={menu} type=\"normal\" disabled>\n      Upload\n    </SplitButton>\n    <h3>文字按钮</h3>\n    <SplitButton menu={menu} type=\"primary\" shape=\"text\">\n      Upload\n    </SplitButton>&nbsp;&nbsp;\n    <SplitButton menu={menu} type=\"secondary\" shape=\"text\">\n      Upload\n    </SplitButton>&nbsp;&nbsp;\n    <SplitButton menu={menu} type=\"normal\" shape=\"text\" disabled>\n      Upload\n    </SplitButton>\n    <h3>幽灵按钮</h3>\n    <div>\n      <div className=\"ghost-light-background\">\n        <SplitButton type=\"light\" shape=\"ghost\" menu={menu}>\n          Ghost Light\n        </SplitButton>\n      </div>\n      <div className=\"ghost-dark-background\">\n        <SplitButton type=\"dark\" shape=\"ghost\" menu={menu}>\n          Ghost Dark\n        </SplitButton>\n      </div>\n    </div>\n  </div>,\n  mountNode\n);\n\n","css":".ghost-light-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #EBECF0;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n.ghost-dark-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #333;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n","body":"\nSplitButton\n\n"}]},{"name":"Calendar","category":"Components","title":"日历","type":"展示","importStatement":"import { Calendar } from '@icedesign/base';","body":"\n\n## Guide\n\n按照日历形式展示数据的容器。\n\n### 何时使用\n\n日历组件是一个偏向于展示与受控的基础组件，例如日程、课表、价格日历、农历等，如果您在使用上偏向于主动交互，请使用 DatePicker 组件。\n\n### 类型说明\n\n组件回调函数返回的数据格式为组件内自定义 `CalendarDate` 对象格式，请注意使用：\n\n```js\nCalendarDate = {\n\ttimestamp: Number,  // 时间戳\n    year: Number,       // 年\n    month: Number,      // 月 0~11\n    date: Number,       // 日 1~31\n    week: Number        // 周几 1~7\n};\n```\n\n### 注意点\n\n1.  如果要使用该组件，请直接使用直接导出的 `Calendar` 组件。\n2.  Calendar 私有的 `DatePickerPanel` 和 `RangePickerPanel` 为组件的私有属性，不对外暴露，建议不要使用。\n\n","propsSchema":{"name":"Calendar","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式品牌前缀"},"base":{"type":{"name":"any"},"required":false,"description":"基准日期","docblock":"基准日期"},"value":{"type":{"name":"any"},"required":false,"description":"选中的日期值","docblock":"选中的日期值"},"mode":{"type":{"name":"enum","value":[{"value":"'month'","computed":false},{"value":"'year'","computed":false},{"value":"'decade'","computed":false}]},"required":false,"description":"面板选择模式","defaultValue":{"value":"'month'","computed":false},"docblock":"面板选择模式"},"type":{"type":{"name":"enum","value":[{"value":"'fullscreen'","computed":false},{"value":"'card'","computed":false}]},"required":false,"description":"类型","defaultValue":{"value":"'fullscreen'","computed":false},"docblock":"类型"},"onChange":{"type":{"name":"func"},"required":false,"description":"日期改变时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"日期改变时的回调\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象","params":[{"name":"calendarDate","description":"对应 Calendar 返回的自定义日期对象","type":{"name":"Object"}}],"returns":null},"className":{"type":{"name":"string"},"required":false,"description":"自定义样式类","docblock":"自定义样式类"},"dateCellRender":{"type":{"name":"func"},"required":false,"description":"自定义日期渲染函数","docblock":"自定义日期渲染函数\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Function}","params":[{"name":"calendarDate","description":"对应 Calendar 返回的自定义日期对象","type":{"name":"Object"}}],"returns":{"description":null,"type":{"name":"Function"}}},"monthCellRender":{"type":{"name":"func"},"required":false,"description":"自定义月份渲染函数","docblock":"自定义月份渲染函数\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Function}","params":[{"name":"calendarDate","description":"对应 Calendar 返回的自定义日期对象","type":{"name":"Object"}}],"returns":{"description":null,"type":{"name":"Function"}}},"yearCellRender":{"type":{"name":"func"},"required":false,"description":"自定义年份渲染函数","docblock":"自定义年份渲染函数\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Function}","params":[{"name":"calendarDate","description":"对应 Calendar 返回的自定义日期对象","type":{"name":"Object"}}],"returns":{"description":null,"type":{"name":"Function"}}},"disabledDate":{"type":{"name":"func"},"required":false,"description":"不可选择的日期","docblock":"不可选择的日期\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Boolean}","params":[{"name":"calendarDate","description":"对应 Calendar 返回的自定义日期对象","type":{"name":"Object"}}],"returns":{"description":null,"type":{"name":"Boolean"}}},"disabledMonth":{"type":{"name":"func"},"required":false,"description":"不可选择的月份","docblock":"不可选择的月份\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Boolean}","params":[{"name":"calendarDate","description":"对应 Calendar 返回的自定义日期对象","type":{"name":"Object"}}],"returns":{"description":null,"type":{"name":"Boolean"}}},"disabledYear":{"type":{"name":"func"},"required":false,"description":"不可选择的年份","docblock":"不可选择的年份\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Boolean}","params":[{"name":"calendarDate","description":"对应 Calendar 返回的自定义日期对象","type":{"name":"Object"}}],"returns":{"description":null,"type":{"name":"Boolean"}}},"language":{"type":{"name":"enum","value":[{"value":"'en-us'","computed":false},{"value":"'ar'","computed":false},{"value":"'de'","computed":false},{"value":"'es'","computed":false},{"value":"'fr'","computed":false},{"value":"'hi'","computed":false},{"value":"'it'","computed":false},{"value":"'ja'","computed":false},{"value":"'ko'","computed":false},{"value":"'pt'","computed":false},{"value":"'ru'","computed":false},{"value":"'zh-cn'","computed":false},{"value":"'zh-hk'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"多语言选择","docblock":"多语言选择"},"locale":{"type":{"name":"object"},"required":false,"description":"国际化配置","docblock":"国际化配置","properties":[]}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式品牌前缀 | String | 'next-'\nbase | 基准日期 | any | -\nvalue | 选中的日期值 | any | -\nmode | 面板选择模式<br><br>**可选值**:<br>'month', 'year', 'decade' | Enum | 'month'\ntype | 类型<br><br>**可选值**:<br>'fullscreen', 'card' | Enum | 'fullscreen'\nonChange | 日期改变时的回调<br><br>**签名**:<br>Function(calendarDate: Object) => void<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象 | Function | () =&gt; {}\nclassName | 自定义样式类 | String | -\ndateCellRender | 自定义日期渲染函数<br><br>**签名**:<br>Function(calendarDate: Object) => Function<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Function} null<br> | Function | -\nmonthCellRender | 自定义月份渲染函数<br><br>**签名**:<br>Function(calendarDate: Object) => Function<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Function} null<br> | Function | -\nyearCellRender | 自定义年份渲染函数<br><br>**签名**:<br>Function(calendarDate: Object) => Function<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Function} null<br> | Function | -\ndisabledDate | 不可选择的日期<br><br>**签名**:<br>Function(calendarDate: Object) => Boolean<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Boolean} null<br> | Function | -\ndisabledMonth | 不可选择的月份<br><br>**签名**:<br>Function(calendarDate: Object) => Boolean<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Boolean} null<br> | Function | -\ndisabledYear | 不可选择的年份<br><br>**签名**:<br>Function(calendarDate: Object) => Boolean<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Boolean} null<br> | Function | -\nlanguage | 多语言选择<br><br>**可选值**:<br>'en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw' | Enum | -\nlocale | 国际化配置 | Object | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Calendar } from \"@icedesign/base\";\n\nfunction dateCellRender(calendarDate) {\n  const style = {\n    position: \"absolute\",\n    width: \"calc(100% - 8px)\",\n    height: \"2px\",\n    textAlign: \"center\",\n    background: \"#ff0000\",\n    top: 0,\n    left: 4\n  };\n\n  return calendarDate.week > 5 ? (\n    <div>\n      <span style={style} />\n      {calendarDate.date}\n    </div>\n  ) : (\n    <div>{calendarDate.date}</div>\n  );\n}\n\nReactDOM.render(<Calendar dateCellRender={dateCellRender} />, mountNode);\n\n","css":"","body":"\n一个最简单的日历面板，用户可以切换年/月。\n\n"},{"title":"卡片模式","order":"1","jsx":"import { Calendar, Select } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lang: \"zh-cn\",\n      date: \"2017-06-07\"\n    };\n    this.langs = [\n      \"en-us\",\n      \"ar\",\n      \"de\",\n      \"es\",\n      \"fr\",\n      \"hi\",\n      \"it\",\n      \"ja\",\n      \"ko\",\n      \"pt\",\n      \"ru\",\n      \"zh-cn\",\n      \"zh-hk\",\n      \"zh-tw\"\n    ];\n  }\n  onChangeLang(val) {\n    this.setState({\n      lang: val\n    });\n  }\n  render() {\n    const { lang, date } = this.state;\n\n    return (\n      <div>\n        <Select defaultValue={lang} onChange={this.onChangeLang.bind(this)}>\n          {this.langs.map(item => (\n            <Select.Option value={item} key={item}>\n              {item}\n            </Select.Option>\n          ))}\n        </Select>\n\n        <div className=\"custom-calendar-guide\">\n          <Calendar type=\"card\" language={lang} value={date} />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".custom-calendar-guide {\n    width: 270px;\n    border: 1px solid #C4C6CF;\n    border-radius: 3px;\n    overflow: hidden;\n    margin-top: 20px;\n}\n","body":"\n包装在有限的容器内\n\n"},{"title":"受控的日历组件","order":"2","jsx":"import { Calendar, Select } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lang: \"zh-cn\",\n      base: \"\",\n      value: \"\",\n      mode: \"month\"\n    };\n    this.langs = [\n      \"en-us\",\n      \"ar\",\n      \"de\",\n      \"es\",\n      \"fr\",\n      \"hi\",\n      \"it\",\n      \"ja\",\n      \"ko\",\n      \"pt\",\n      \"ru\",\n      \"zh-cn\",\n      \"zh-hk\",\n      \"zh-tw\"\n    ];\n  }\n\n  onChangeLang(val) {\n    this.setState({\n      lang: val\n    });\n  }\n\n  onDateChange(nextState) {\n    nextState.mode = nextState.mode === \"date\" ? \"month\" : nextState.mode;\n    this.setState(nextState);\n  }\n\n  render() {\n    const { lang, base, value, mode } = this.state;\n\n    return (\n      <div>\n        <Select defaultValue={lang} onChange={this.onChangeLang.bind(this)}>\n          {this.langs.map(item => (\n            <Select.Option value={item} key={item}>\n              {item}\n            </Select.Option>\n          ))}\n        </Select>\n\n        <div className=\"custom-calendar-guide\">\n          <Calendar\n            type=\"card\"\n            language={lang}\n            value={value}\n            mode={mode}\n            base={base}\n            onChange={this.onDateChange.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".custom-calendar-guide {\n    width: 270px;\n    border: 1px solid #C4C6CF;\n    border-radius: 3px;\n    overflow: hidden;\n    margin-top: 20px;\n}\n","body":"\n用于日历组件中的日期选择面板\n\n"},{"title":"禁用日期","order":"3","jsx":"import { Calendar, moment } from \"@icedesign/base\";\n\nconst disabledDate = function(calendarDate) {\n  let current = moment()\n    .year(calendarDate.year)\n    .month(calendarDate.month)\n    .date(calendarDate.date);\n  return current.valueOf() > moment().valueOf();\n};\n\nconst wrapperStyle = {\n  width: \"270px\",\n  border: \"1px solid #C4C6CF\",\n  borderRadius: \"4px\",\n  overflow: \"hidden\"\n};\n\nReactDOM.render(\n  <div style={wrapperStyle}>\n    <Calendar type=\"card\" disabledDate={disabledDate} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n禁用某些日期\n\n"},{"title":"自定义语言","order":"4","jsx":"import { Calendar } from \"@icedesign/base\";\n\nconst locale = {\n  format: {\n    months: [\n      \"一月\",\n      \"二月\",\n      \"三月\",\n      \"四月\",\n      \"五月\",\n      \"六月\",\n      \"七月\",\n      \"八月\",\n      \"九月\",\n      \"十月\",\n      \"十一月\",\n      \"十二月\"\n    ],\n    shortMonths: [\n      \"一月\",\n      \"二月\",\n      \"三月\",\n      \"四月\",\n      \"五月\",\n      \"六月\",\n      \"七月\",\n      \"八月\",\n      \"九月\",\n      \"十月\",\n      \"十一月\",\n      \"十二月\"\n    ],\n    weekdays: [\n      \"星期天\",\n      \"星期一\",\n      \"星期二\",\n      \"星期三\",\n      \"星期四\",\n      \"星期五\",\n      \"星期六\"\n    ],\n    shortWeekdays: [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"],\n    veryShortWeekdays: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"],\n    ampms: [\"上午\", \"下午\"]\n  }\n};\nconst wrapperStyle = {\n  width: \"270px\",\n  border: \"1px solid #C4C6CF\",\n  borderRadius: \"3px\",\n  overflow: \"hidden\"\n};\n\nReactDOM.render(\n  <div>\n    <div style={wrapperStyle}>\n      <Calendar type=\"card\" language={\"en-us\"} locale={locale} />\n    </div>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n用于日历组件中的日期选择面板\n\n"}]},{"name":"Card","category":"Components","title":"卡片","type":"基本","importStatement":"import { Card } from '@icedesign/base';","body":"\n\n## Guide\n\n一个通用的卡片组件。\n\n### 何时使用\n\n当一个模块的同类信息不能自然形成区块感，可借助 Card 组件将信息整合，帮助界面信息模块感更强。\n\n","propsSchema":{"name":"Card","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式的品牌前缀"},"title":{"type":{"name":"node"},"required":false,"description":"卡片的标题","docblock":"卡片的标题"},"subTitle":{"type":{"name":"node"},"required":false,"description":"卡片的副标题","docblock":"卡片的副标题"},"titlePrefixLine":{"type":{"name":"bool"},"required":false,"description":"是否显示标题的前缀线","defaultValue":{"value":"true","computed":false},"docblock":"是否显示标题的前缀线"},"titleBottomLine":{"type":{"name":"bool"},"required":false,"description":"是否显示标题栏的下划线","defaultValue":{"value":"true","computed":false},"docblock":"是否显示标题栏的下划线"},"bodyHeight":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"内容区域的固定高度","defaultValue":{"value":"120","computed":false},"docblock":"内容区域的固定高度"},"extra":{"type":{"name":"node"},"required":false,"description":"标题区域的用户自定义内容","docblock":"标题区域的用户自定义内容"},"className":{"type":{"name":"string"},"required":false,"description":"自定义样式","docblock":"自定义样式"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\ntitle | 卡片的标题 | ReactNode | -\nsubTitle | 卡片的副标题 | ReactNode | -\ntitlePrefixLine | 是否显示标题的前缀线 | Boolean | true\ntitleBottomLine | 是否显示标题栏的下划线 | Boolean | true\nbodyHeight | 内容区域的固定高度 | String/Number | 120\nextra | 标题区域的用户自定义内容 | ReactNode | -\nclassName | 自定义样式 | String | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Card } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Card\n    style={{ width: 300 }}\n    title=\"阿里老黄历\"\n    subTitle=\"没品位\"\n    extra=\"Link\"\n    language=\"en-us\"\n  >\n    <h3>Card title</h3>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n  </Card>,\n  mountNode\n);\n\n","css":"","body":"\n最简单的用法。\n\n"},{"title":"自定义内容高度","order":"1","jsx":"import { Card } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Card\n      style={{ width: 300 }}\n      title=\"阿里老黄历\"\n      subTitle=\"没品位\"\n      bodyHeight=\"auto\"\n    >\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n    </Card>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过 `bodyHeight` 属性自定义内容区的高度。例如取值为 `auto` 的时候会默认关闭卡片的收缩效果。\n\n"},{"title":"自定义卡片样式","order":"2","jsx":"import { Card } from \"@icedesign/base\";\n\nconst cardStyle = {\n  padding: 0,\n  boxShadow: \"none\"\n};\n\nReactDOM.render(\n  <Card style={cardStyle} bodyHeight=\"auto\">\n    <img\n      src=\"https://img.alicdn.com/tfs/TB1FNIOSFXXXXaWXXXXXXXXXXXX-260-188.png\"\n      alt=\"father day\"\n    />\n    <div className=\"custom-card\">\n      <h3>父亲节</h3>\n      <p>Father's Day</p>\n    </div>\n  </Card>,\n  mountNode\n);\n\n","css":".custom-card {\n    text-align: center;\n    padding: 10px 16px;\n}\n\n.custom-card p {\n    color: #999;\n}\n","body":"\n如果 `title` 属性不传入任何值，则默认会去除整个头部区域。\n如果默认的卡片样式不能满足您的需求，除了通过 Fusion 配置平台修改，还可以通过传入自定义样式修改。\n\n"},{"title":"自定义标题样式","order":"3","jsx":"import { Card } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Card\n      style={{ width: 300 }}\n      title=\"Title\"\n      subTitle=\"Here is added words\"\n      titlePrefixLine={false}\n      extra={<a href=\"#\">Link &gt;</a>}\n    >\n      Custom Content\n    </Card>\n    <br />\n    <br />\n    <Card\n      style={{ width: 300 }}\n      title=\"Title\"\n      subTitle=\"Here is added words\"\n      titleBottomLine={false}\n      extra={<a href=\"#\">Link &gt;</a>}\n    >\n      Custom Content\n    </Card>\n    <br />\n    <br />\n    <Card\n      style={{ width: 300 }}\n      title={<i>Title</i>}\n      subTitle={<i>Sub</i>}\n      titlePrefixLine={false}\n      titleBottomLine={false}\n      extra={<a href=\"#\">Link &gt;</a>}\n    >\n      Custom Content\n    </Card>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过设置 `titleBottomLine` 属性为 `false` 关闭显示头部区域的底部边框线。\n可以通过设置 `titlePrefixLine` 属性为 `false` 关闭显示标题前的前缀线。\n\n"}]},{"name":"CascaderSelect","category":"Components","title":"级联选择","type":"基本","importStatement":"import { CascaderSelect } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n级联选择由[选择器](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=select)和[级联](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=cascader)组成。把级联组件以弹层的方式隐藏，多用于表单场景。\n\n","propsSchema":{"name":"CascaderSelect","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"选择框大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"选择框大小"},"shape":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'arrow-only'","computed":false}]},"required":false,"description":"选择框形状","defaultValue":{"value":"'normal'","computed":false},"docblock":"选择框形状"},"placeholder":{"type":{"name":"string"},"required":false,"description":"选择框占位符","docblock":"选择框占位符"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","defaultValue":{"value":"false","computed":false},"docblock":"是否禁用"},"hasArrow":{"type":{"name":"bool"},"required":false,"description":"是否显示右侧的箭头","defaultValue":{"value":"true","computed":false},"docblock":"是否显示右侧的箭头"},"hasClear":{"type":{"name":"bool"},"required":false,"description":"是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效","defaultValue":{"value":"false","computed":false},"docblock":"是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效"},"dataSource":{"type":{"name":"arrayOf","value":{"name":"object"}},"required":false,"description":"数据源，结构可参考下方说明","defaultValue":{"value":"[]","computed":false},"docblock":"数据源，结构可参考下方说明"},"defaultValue":{"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}]},"required":false,"description":"（非受控）默认值","defaultValue":{"value":"null","computed":false},"docblock":"（非受控）默认值"},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}]},"required":false,"description":"（受控）当前值","docblock":"（受控）当前值"},"onChange":{"type":{"name":"func"},"required":false,"description":"选中值改变时触发的回调函数","docblock":"选中值改变时触发的回调函数\n@param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n@param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n@param {Object} extra 额外参数\n@param {Array} extra.selectedPath 单选时选中的数据的路径\n@param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中\n@param {Object} extra.currentData 多选时当前操作的数据\n@param {Array} extra.checkedData 多选时所有被选中的数据\n@param {Array} extra.indeterminateData 多选时半选的数据","params":[{"name":"value","description":"选中的值，单选时返回单个值，多选时返回数组","type":{"name":"union","value":["String","Array"]}},{"name":"data","description":"选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点","type":{"name":"union","value":["Object","Array"]}},{"name":"extra","description":"额外参数","type":{"name":"Object"}},{"name":"extra.selectedPath","description":"单选时选中的数据的路径","type":{"name":"Array"}},{"name":"extra.checked","description":"多选时当前的操作是选中还是取消选中","type":{"name":"Boolean"}},{"name":"extra.currentData","description":"多选时当前操作的数据","type":{"name":"Object"}},{"name":"extra.checkedData","description":"多选时所有被选中的数据","type":{"name":"Array"}},{"name":"extra.indeterminateData","description":"多选时半选的数据","type":{"name":"Array"}}],"returns":null},"defaultVisible":{"type":{"name":"bool"},"required":false,"description":"初始下拉框是否显示","defaultValue":{"value":"false","computed":false},"docblock":"初始下拉框是否显示"},"defaultExpandedValue":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置","docblock":"默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置"},"expandTrigger":{"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'hover'","computed":false}]},"required":false,"description":"展开触发的方式","defaultValue":{"value":"'click'","computed":false},"docblock":"展开触发的方式"},"multiple":{"type":{"name":"bool"},"required":false,"description":"是否多选","defaultValue":{"value":"false","computed":false},"docblock":"是否多选"},"changeOnSelect":{"type":{"name":"bool"},"required":false,"description":"是否选中即发生改变, 该属性仅在单选模式下有效","defaultValue":{"value":"false","computed":false},"docblock":"是否选中即发生改变, 该属性仅在单选模式下有效"},"canOnlyCheckLeaf":{"type":{"name":"bool"},"required":false,"description":"是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效","defaultValue":{"value":"false","computed":false},"docblock":"是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效"},"checkStrictly":{"type":{"name":"bool"},"required":false,"description":"父子节点是否选中不关联","defaultValue":{"value":"false","computed":false},"docblock":"父子节点是否选中不关联"},"labelWidth":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度","docblock":"文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度"},"showItemCount":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"每一列展示的个数","defaultValue":{"value":"6","computed":false},"docblock":"每一列展示的个数"},"displayRender":{"type":{"name":"func"},"required":false,"description":"选择框单选时展示结果的函数","defaultValue":{"value":"label => label.join(' / ')","computed":false},"docblock":"选择框单选时展示结果的函数\n@param {Array} label 选中路径的文本数组\n@return {ReactNode} 渲染在选择框中的内容","params":[{"name":"label","description":"选中路径的文本数组","type":{"name":"Array"}}],"returns":{"description":"渲染在选择框中的内容","type":{"name":"ReactNode"}}},"popupClassName":{"type":{"name":"string"},"required":false,"description":"下拉框样式自定义类名","docblock":"下拉框样式自定义类名"},"container":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":false,"description":"下拉框挂载的容器节点","docblock":"下拉框挂载的容器节点"},"loadData":{"type":{"name":"func"},"required":false,"description":"异步加载数据函数","docblock":"异步加载数据函数\n@param {Object} data 当前点击异步加载的数据","params":[{"name":"data","description":"当前点击异步加载的数据","type":{"name":"Object"}}],"returns":null}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nsize | 选择框大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nshape | 选择框形状<br><br>**可选值**:<br>'normal', 'arrow-only' | Enum | 'normal'\nplaceholder | 选择框占位符 | String | -\ndisabled | 是否禁用 | Boolean | false\nhasArrow | 是否显示右侧的箭头 | Boolean | true\nhasClear | 是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效 | Boolean | false\ndataSource | 数据源，结构可参考下方说明 | Array&lt;Object&gt; | []\ndefaultValue | （非受控）默认值 | String/Array&lt;String&gt; | null\nvalue | （受控）当前值 | String/Array&lt;String&gt; | -\nonChange | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array, extra: Object) => void<br>**参数**:<br>*value*: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>*data*: {Object/Array} 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点<br>*extra*: {Object} 额外参数<br>*extra.selectedPath*: {Array} 单选时选中的数据的路径<br>*extra.checked*: {Boolean} 多选时当前的操作是选中还是取消选中<br>*extra.currentData*: {Object} 多选时当前操作的数据<br>*extra.checkedData*: {Array} 多选时所有被选中的数据<br>*extra.indeterminateData*: {Array} 多选时半选的数据 | Function | -\ndefaultVisible | 初始下拉框是否显示 | Boolean | false\ndefaultExpandedValue | 默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置 | Array&lt;String&gt; | -\nexpandTrigger | 展开触发的方式<br><br>**可选值**:<br>'click', 'hover' | Enum | 'click'\nmultiple | 是否多选 | Boolean | false\nchangeOnSelect | 是否选中即发生改变, 该属性仅在单选模式下有效 | Boolean | false\ncanOnlyCheckLeaf | 是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效 | Boolean | false\ncheckStrictly | 父子节点是否选中不关联 | Boolean | false\nlabelWidth | 文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度 | String/Number | -\nshowItemCount | 每一列展示的个数 | String/Number | 6\ndisplayRender | 选择框单选时展示结果的函数<br><br>**签名**:<br>Function(label: Array) => ReactNode<br>**参数**:<br>*label*: {Array} 选中路径的文本数组<br>**返回值**:<br>{ReactNode} 渲染在选择框中的内容<br> | Function | label =&gt; label.join(' / ')\npopupClassName | 下拉框样式自定义类名 | String | -\ncontainer | 下拉框挂载的容器节点 | String/Function | -\nloadData | 异步加载数据函数<br><br>**签名**:<br>Function(data: Object) => void<br>**参数**:<br>*data*: {Object} 当前点击异步加载的数据 | Function | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本使用","order":"0","jsx":"import { CascaderSelect } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => {\n        data[1].disabled = true;\n        this.setState({ data });\n      })\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  render() {\n    return (\n      <CascaderSelect\n        dataSource={this.state.data}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n展示基本的单选用法。\n\n"},{"title":"自定义样式","order":"5","jsx":"import { CascaderSelect } from \"@icedesign/base\";\n\nconst dataSource = [\n  {\n    value: \"2973\",\n    label: \"陕西\",\n    children: [\n      {\n        value: \"2974\",\n        label: \"西安\",\n        children: [\n          { value: \"2975\", label: \"西安市\" },\n          { value: \"2976\", label: \"高陵县\" }\n        ]\n      },\n      {\n        value: \"2980\",\n        label: \"铜川\",\n        children: [\n          { value: \"2981\", label: \"铜川市\" },\n          { value: \"2982\", label: \"宜君县\" }\n        ]\n      }\n    ]\n  },\n  {\n    value: \"3371\",\n    label: \"新疆\",\n    children: [\n      {\n        value: \"3430\",\n        label: \"巴音郭楞蒙古自治州\",\n        children: [\n          { value: \"3431\", label: \"库尔勒市\" },\n          { value: \"3432\", label: \"和静县\" }\n        ]\n      }\n    ]\n  }\n];\n\nconst displayRender = labels => {\n  return labels.reduce((ret, label, index) => {\n    ret.push(\n      <span className=\"label-ellipsis\" title={label}>\n        {label}\n      </span>\n    );\n    if (index < labels.length - 1) {\n      ret.push(<span className=\"label-separator\"> / </span>);\n    }\n    return ret;\n  }, []);\n};\n\nReactDOM.render(\n  <CascaderSelect\n    style={{ width: \"240px\" }}\n    displayRender={displayRender}\n    showItemCount=\"5\"\n    labelWidth=\"80\"\n    defaultValue=\"3431\"\n    dataSource={dataSource}\n  />,\n  mountNode\n);\n\n","css":".label-ellipsis {\n    display: inline-block;\n    max-width: 80px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-wrap: normal;\n}\n.label-separator {\n    display: inline-block;\n    vertical-align: top;\n    margin: 0 5px;\n}\n","body":"\n可以通过`displayRender`来定制单选时展示的结果，可以通过`labelWidth`, `showItemCount`来定制组件宽高，其中通过`labelWidth`可设置文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度，通过`showItemCount`可设置展示的菜单项个数。\n\n"},{"title":"异步加载数据","order":"6","jsx":"import { CascaderSelect } from \"@icedesign/base\";\n\nconst dataSource = [\n  {\n    value: \"2973\",\n    label: \"陕西\"\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataSource\n    };\n\n    this.onLoadData = this.onLoadData.bind(this);\n  }\n\n  onLoadData(data) {\n    console.log(data);\n\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this.setState(\n          {\n            dataSource: [\n              {\n                value: \"2973\",\n                label: \"陕西\",\n                children: [\n                  {\n                    value: \"2974\",\n                    label: \"西安\",\n                    children: [\n                      { value: \"2975\", label: \"西安市\", isLeaf: true },\n                      { value: \"2976\", label: \"高陵县\", isLeaf: true }\n                    ]\n                  },\n                  {\n                    value: \"2980\",\n                    label: \"铜川\",\n                    children: [\n                      { value: \"2981\", label: \"铜川市\", isLeaf: true },\n                      { value: \"2982\", label: \"宜君县\", isLeaf: true }\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          resolve\n        );\n      }, 500);\n    });\n  }\n\n  render() {\n    return (\n      <CascaderSelect\n        dataSource={this.state.dataSource}\n        loadData={this.onLoadData}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n展示动态获取数据的用法。\n\n"},{"title":"展开触发行为","order":"1","jsx":"import { Radio, CascaderSelect } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      trigger: \"click\",\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeTrigger = this.handleChangeTrigger.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data }))\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  handleChangeTrigger(trigger) {\n    this.setState({\n      trigger\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"trigger-check\">\n          展开触发行为：\n          <RadioGroup\n            dataSource={[\"click\", \"hover\"]}\n            value={this.state.trigger}\n            onChange={this.handleChangeTrigger}\n          />\n        </div>\n\n        <CascaderSelect\n          expandTrigger={this.state.trigger}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".trigger-check {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n展示可通过`expandTrigger`来设置不同的展开触发行为，支持`click`和`hover`，默认值为`click`。\n\n"},{"title":"设置父子节点选中是否关联","order":"4","jsx":"import { Checkbox, CascaderSelect } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: [],\n      data: [],\n      checkStrictly: false\n    };\n\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data, value: [\"2975\"] }))\n      .catch(e => console.log(e));\n  }\n\n  handleCheck() {\n    this.setState({\n      checkStrictly: !this.state.checkStrictly,\n      value: []\n    });\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"control-multiple-demo\">\n        <label className=\"strictly-check\">\n          <Checkbox\n            value={this.state.checkStrictly}\n            onChange={this.handleCheck}\n          />\n          <span className=\"strictly-text\">\n            开启严格受控，父子节点选中不再关联\n          </span>\n        </label>\n        <CascaderSelect\n          multiple\n          checkStrictly={this.state.checkStrictly}\n          value={this.state.value}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".control-multiple-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-multiple-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n展示受控多选以及是否开启严格受控父子节点选中不再关联的用法。\n\n"},{"title":"多选","order":"2","jsx":"import { CascaderSelect } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => {\n        data[1].disabled = true;\n        data[2].checkboxDisabled = true;\n        this.setState({ data });\n      })\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  render() {\n    return (\n      <CascaderSelect\n        multiple\n        dataSource={this.state.data}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".cascader-value {\n    width: 500px;\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n展示基本的多选用法。\n\n"},{"title":"设置是否只能选择叶子项","order":"3","jsx":"import { Checkbox, CascaderSelect } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: null,\n      changeOnSelect: false,\n      data: []\n    };\n\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data, value: \"2975\" }))\n      .catch(e => console.log(e));\n  }\n\n  handleCheck() {\n    this.setState({\n      changeOnSelect: !this.state.changeOnSelect,\n      value: null\n    });\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"control-single-demo\">\n        <label className=\"change-check\">\n          <Checkbox\n            value={this.state.changeOnSelect}\n            onChange={this.handleCheck}\n          />\n          <span className=\"change-text\">开启选择即改变</span>\n        </label>\n        <CascaderSelect\n          hasClear\n          changeOnSelect={this.state.changeOnSelect}\n          value={this.state.value}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".control-single-demo .change-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-single-demo .change-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n展示受控单选以及是否选择即改变。\n\n"}]},{"name":"Cascader","category":"Components","title":"级联","type":"基本","importStatement":"import { Cascader } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n-   适用于从一组具有关联性的数据集合中进行选择的交互方式。\n-   由于子集目录隐藏，级联是一种节约屏幕空间的有效方法。\n-   级别数因业务需求而定，建议不超过5级。\n-   级联多用于表单场景，可以独立在页面中使用，也可以与其他元素组合使用，如级联选择。\n\n","propsSchema":{"name":"Cascader","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"dataSource":{"type":{"name":"arrayOf","value":{"name":"object"}},"required":false,"description":"数据源，结构可参考下方说明","defaultValue":{"value":"[]","computed":false},"docblock":"数据源，结构可参考下方说明"},"defaultValue":{"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}]},"required":false,"description":"（非受控）默认值","defaultValue":{"value":"null","computed":false},"docblock":"（非受控）默认值"},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}]},"required":false,"description":"（受控）当前值","docblock":"（受控）当前值"},"onChange":{"type":{"name":"func"},"required":false,"description":"选中值改变时触发的回调函数","docblock":"选中值改变时触发的回调函数\n@param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n@param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n@param {Object} extra 额外参数\n@param {Array} extra.selectedPath 单选时选中的数据的路径\n@param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中\n@param {Object} extra.currentData 多选时当前操作的数据\n@param {Array} extra.checkedData 多选时所有被选中的数据\n@param {Array} extra.indeterminateData 多选时半选的数据","params":[{"name":"value","description":"选中的值，单选时返回单个值，多选时返回数组","type":{"name":"union","value":["String","Array"]}},{"name":"data","description":"选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点","type":{"name":"union","value":["Object","Array"]}},{"name":"extra","description":"额外参数","type":{"name":"Object"}},{"name":"extra.selectedPath","description":"单选时选中的数据的路径","type":{"name":"Array"}},{"name":"extra.checked","description":"多选时当前的操作是选中还是取消选中","type":{"name":"Boolean"}},{"name":"extra.currentData","description":"多选时当前操作的数据","type":{"name":"Object"}},{"name":"extra.checkedData","description":"多选时所有被选中的数据","type":{"name":"Array"}},{"name":"extra.indeterminateData","description":"多选时半选的数据","type":{"name":"Array"}}],"returns":null},"defaultExpandedValue":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"（非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置","docblock":"（非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置"},"expandedValue":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"（受控）当前展开值","docblock":"（受控）当前展开值"},"expandTrigger":{"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'hover'","computed":false}]},"required":false,"description":"展开触发的方式","defaultValue":{"value":"'click'","computed":false},"docblock":"展开触发的方式"},"onExpand":{"type":{"name":"func"},"required":false,"description":"展开时触发的回调函数","docblock":"展开时触发的回调函数\n@param {Array} expandedValue 各列展开值的数组","params":[{"name":"expandedValue","description":"各列展开值的数组","type":{"name":"Array"}}],"returns":null},"multiple":{"type":{"name":"bool"},"required":false,"description":"是否多选","defaultValue":{"value":"false","computed":false},"docblock":"是否多选"},"canOnlySelectLeaf":{"type":{"name":"bool"},"required":false,"description":"单选时是否只能选中叶子节点","defaultValue":{"value":"false","computed":false},"docblock":"单选时是否只能选中叶子节点"},"canOnlyCheckLeaf":{"type":{"name":"bool"},"required":false,"description":"多选时是否只能选中叶子节点","defaultValue":{"value":"false","computed":false},"docblock":"多选时是否只能选中叶子节点"},"checkStrictly":{"type":{"name":"bool"},"required":false,"description":"父子节点是否选中不关联","defaultValue":{"value":"false","computed":false},"docblock":"父子节点是否选中不关联"},"labelWidth":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度","docblock":"文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度"},"showItemCount":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"每一列展示的个数","defaultValue":{"value":"6","computed":false},"docblock":"每一列展示的个数"},"loadData":{"type":{"name":"func"},"required":false,"description":"异步加载数据函数","docblock":"异步加载数据函数\n@param {Object} data 当前点击异步加载的数据","params":[{"name":"data","description":"当前点击异步加载的数据","type":{"name":"Object"}}],"returns":null}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ndataSource | 数据源，结构可参考下方说明 | Array&lt;Object&gt; | []\ndefaultValue | （非受控）默认值 | String/Array&lt;String&gt; | null\nvalue | （受控）当前值 | String/Array&lt;String&gt; | -\nonChange | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array, extra: Object) => void<br>**参数**:<br>*value*: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>*data*: {Object/Array} 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点<br>*extra*: {Object} 额外参数<br>*extra.selectedPath*: {Array} 单选时选中的数据的路径<br>*extra.checked*: {Boolean} 多选时当前的操作是选中还是取消选中<br>*extra.currentData*: {Object} 多选时当前操作的数据<br>*extra.checkedData*: {Array} 多选时所有被选中的数据<br>*extra.indeterminateData*: {Array} 多选时半选的数据 | Function | -\ndefaultExpandedValue | （非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置 | Array&lt;String&gt; | -\nexpandedValue | （受控）当前展开值 | Array&lt;String&gt; | -\nexpandTrigger | 展开触发的方式<br><br>**可选值**:<br>'click', 'hover' | Enum | 'click'\nonExpand | 展开时触发的回调函数<br><br>**签名**:<br>Function(expandedValue: Array) => void<br>**参数**:<br>*expandedValue*: {Array} 各列展开值的数组 | Function | -\nmultiple | 是否多选 | Boolean | false\ncanOnlySelectLeaf | 单选时是否只能选中叶子节点 | Boolean | false\ncanOnlyCheckLeaf | 多选时是否只能选中叶子节点 | Boolean | false\ncheckStrictly | 父子节点是否选中不关联 | Boolean | false\nlabelWidth | 文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度 | String/Number | -\nshowItemCount | 每一列展示的个数 | String/Number | 6\nloadData | 异步加载数据函数<br><br>**签名**:<br>Function(data: Object) => void<br>**参数**:<br>*data*: {Object} 当前点击异步加载的数据 | Function | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本使用","order":"0","jsx":"import { Cascader } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      label: \"\",\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => {\n        data[1].disabled = true;\n        this.setState({ data });\n      })\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      label: extra.selectedPath.map(d => d.label).join(\" / \")\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"cascader-value\">选择：{this.state.label}</div>\n        <Cascader\n          dataSource={this.state.data}\n          defaultValue=\"2975\"\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".cascader-value {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n展示基本的单选用法。\n\n"},{"title":"自定义样式","order":"5","jsx":"import { Cascader } from \"@icedesign/base\";\n\nconst dataSource = [\n  {\n    value: \"2973\",\n    label: \"陕西\",\n    children: [\n      {\n        value: \"2974\",\n        label: \"西安\",\n        children: [\n          { value: \"2975\", label: \"西安市\" },\n          { value: \"2976\", label: \"高陵县\" }\n        ]\n      },\n      {\n        value: \"2980\",\n        label: \"铜川\",\n        children: [\n          { value: \"2981\", label: \"铜川市\" },\n          { value: \"2982\", label: \"宜君县\" }\n        ]\n      }\n    ]\n  },\n  {\n    value: \"3371\",\n    label: \"新疆\",\n    children: [\n      {\n        value: \"3430\",\n        label: \"巴音郭楞蒙古自治州\",\n        children: [\n          { value: \"3431\", label: \"库尔勒市\" },\n          { value: \"3432\", label: \"和静县\" }\n        ]\n      }\n    ]\n  }\n];\n\nReactDOM.render(\n  <Cascader\n    defaultValue=\"3439\"\n    defaultExpandedValue={[\"3371\", \"3430\"]}\n    showItemCount=\"5\"\n    labelWidth=\"100\"\n    dataSource={dataSource}\n  />,\n  mountNode\n);\n\n","css":"","body":"\n可以通过`labelWidth`, `showItemCount`来定制组件宽高，其中通过`labelWidth`可设置文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度，通过`showItemCount`可设置展示的菜单项个数。\n\n"},{"title":"异步加载数据","order":"6","jsx":"import { Cascader } from \"@icedesign/base\";\n\nconst dataSource = [\n  {\n    value: \"2973\",\n    label: \"陕西\"\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataSource\n    };\n\n    this.onLoadData = this.onLoadData.bind(this);\n  }\n\n  onLoadData(data) {\n    console.log(data);\n\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this.setState(\n          {\n            dataSource: [\n              {\n                value: \"2973\",\n                label: \"陕西\",\n                children: [\n                  {\n                    value: \"2974\",\n                    label: \"西安\",\n                    children: [\n                      { value: \"2975\", label: \"西安市\", isLeaf: true },\n                      { value: \"2976\", label: \"高陵县\", isLeaf: true }\n                    ]\n                  },\n                  {\n                    value: \"2980\",\n                    label: \"铜川\",\n                    children: [\n                      { value: \"2981\", label: \"铜川市\", isLeaf: true },\n                      { value: \"2982\", label: \"宜君县\", isLeaf: true }\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          resolve\n        );\n      }, 500);\n    });\n  }\n\n  render() {\n    return (\n      <Cascader\n        canOnlySelectLeaf\n        dataSource={this.state.dataSource}\n        loadData={this.onLoadData}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".cascader-value {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n展示动态获取数据的用法。\n\n"},{"title":"展开触发行为","order":"1","jsx":"import { Radio, Cascader } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      trigger: \"click\",\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeTrigger = this.handleChangeTrigger.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data }))\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  handleChangeTrigger(trigger) {\n    this.setState({\n      trigger\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"trigger-check\">\n          展开触发行为：\n          <RadioGroup\n            dataSource={[\"click\", \"hover\"]}\n            value={this.state.trigger}\n            onChange={this.handleChangeTrigger}\n          />\n        </div>\n\n        <Cascader\n          expandTrigger={this.state.trigger}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".trigger-check {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n展示可通过`expandTrigger`来设置不同的展开触发行为，支持`click`和`hover`，默认值为`click`。\n\n"},{"title":"设置父子节点选中是否关联","order":"4","jsx":"import { Checkbox, Cascader } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: [],\n      data: [],\n      checkStrictly: false\n    };\n\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data, value: [\"2975\"] }))\n      .catch(e => console.log(e));\n  }\n\n  handleCheck() {\n    this.setState({\n      checkStrictly: !this.state.checkStrictly,\n      value: []\n    });\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"control-multiple-demo\">\n        <label className=\"strictly-check\">\n          <Checkbox\n            value={this.state.checkStrictly}\n            onChange={this.handleCheck}\n          />\n          <span className=\"strictly-text\">\n            开启严格受控，父子节点选中不再关联\n          </span>\n        </label>\n        <Cascader\n          multiple\n          checkStrictly={this.state.checkStrictly}\n          value={this.state.value}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".control-multiple-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-multiple-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n展示受控多选以及是否开启严格受控父子节点选中不再关联的用法。\n\n"},{"title":"多选","order":"2","jsx":"import { Cascader } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      label: \"\",\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => {\n        data[1].disabled = true;\n        data[2].checkboxDisabled = true;\n        this.setState({ data });\n      })\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      label: data.map(d => d.label).join(\", \")\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"cascader-value\">选择：{this.state.label}</div>\n        <Cascader\n          multiple\n          defaultValue={[\"2975\"]}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".cascader-value {\n    width: 500px;\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n展示基本的多选用法。\n\n"},{"title":"设置是否只能选择叶子项","order":"3","jsx":"import { Checkbox, Cascader } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: null,\n      canOnlySelectLeaf: false,\n      data: []\n    };\n\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data, value: \"2975\" }))\n      .catch(e => console.log(e));\n  }\n\n  handleCheck() {\n    this.setState({\n      canOnlySelectLeaf: !this.state.canOnlySelectLeaf,\n      value: null\n    });\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"control-single-demo\">\n        <label className=\"leaf-check\">\n          <Checkbox\n            value={this.state.canOnlySelectLeaf}\n            onChange={this.handleCheck}\n          />\n          <span className=\"leaf-text\">开启只能选择叶子项</span>\n        </label>\n        <Cascader\n          canOnlySelectLeaf={this.state.canOnlySelectLeaf}\n          value={this.state.value}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".control-single-demo .leaf-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-single-demo .leaf-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n展示受控单选以及是否只能选择叶子项的用法。\n\n"}]},{"name":"Checkbox","category":"Components","title":"复选按钮","type":"表单","importStatement":"import { Checkbox } from '@icedesign/base';","body":"\n## 开发指南\n\n多选框\n\n### 何时使用\n\n复选框允许用户从一个数据集中选择多个选项。如果在一个列表中有多个选项，你可以通过使用复选框而不是开/关切换来节省空间。如果你有一个单选项，不要用复选框，使用开/关切换。\n\n","propsSchema":{"name":"Checkbox","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内敛样式","docblock":"自定义内敛样式","properties":[]},"checked":{"type":{"name":"bool"},"required":false,"description":"选中状态","docblock":"选中状态"},"defaultChecked":{"type":{"name":"bool"},"required":false,"description":"默认选中状态","defaultValue":{"value":"false","computed":false},"docblock":"默认选中状态"},"disabled":{"type":{"name":"bool"},"required":false,"description":"禁用","docblock":"禁用"},"indeterminate":{"type":{"name":"bool"},"required":false,"description":"Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性","docblock":"Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性"},"defaultIndeterminate":{"type":{"name":"bool"},"required":false,"description":"Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性","defaultValue":{"value":"false","computed":false},"docblock":"Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性"},"onChange":{"type":{"name":"func"},"required":false,"description":"状态变化时触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"状态变化时触发的事件\n@param {Boolean} checked 是否选中\n@param {Event} e Dom 事件对象","params":[{"name":"checked","description":"是否选中","type":{"name":"Boolean"}},{"name":"e","description":"Dom 事件对象","type":{"name":"Event"}}],"returns":null}},"methods":[],"subComponents":[{"name":"Group","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内敛样式","docblock":"自定义内敛样式","properties":[]},"disabled":{"type":{"name":"bool"},"required":false,"description":"整体禁用","docblock":"整体禁用"},"dataSource":{"type":{"name":"arrayOf","value":{"name":"any"}},"required":false,"description":"可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]`","defaultValue":{"value":"[]","computed":false},"docblock":"可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]`"},"value":{"type":{"name":"array"},"required":false,"description":"被选中的值列表","docblock":"被选中的值列表"},"defaultValue":{"type":{"name":"array"},"required":false,"description":"默认被选中的值列表","docblock":"默认被选中的值列表"},"children":{"type":{"name":"arrayOf","value":{"name":"element"}},"required":false,"description":"通过子元素方式设置内部 checkbox","docblock":"通过子元素方式设置内部 checkbox"},"onChange":{"type":{"name":"func"},"required":false,"description":"选中值改变时的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"选中值改变时的事件\n@param {Array} value 选中项列表\n@param {Event} e Dom 事件对象","params":[{"name":"value","description":"选中项列表","type":{"name":"Array"}},{"name":"e","description":"Dom 事件对象","type":{"name":"Event"}}],"returns":null}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nchecked | 选中状态 | Boolean | -\ndefaultChecked | 默认选中状态 | Boolean | false\ndisabled | 禁用 | Boolean | -\nindeterminate | Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性 | Boolean | -\ndefaultIndeterminate | Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性 | Boolean | false\nonChange | 状态变化时触发的事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>*checked*: {Boolean} 是否选中<br>*e*: {Event} Dom 事件对象 | Function | () =&gt; {}\n","methodREADME":[],"subComponentsREADME":[{"name":"Group","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\ndisabled | 整体禁用 | Boolean | -\ndataSource | 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]` | Array&lt;any&gt; | []\nvalue | 被选中的值列表 | Array | -\ndefaultValue | 默认被选中的值列表 | Array | -\nchildren | 通过子元素方式设置内部 checkbox | Array&lt;ReactElement&gt; | -\nonChange | 选中值改变时的事件<br><br>**签名**:<br>Function(value: Array, e: Event) => void<br>**参数**:<br>*value*: {Array} 选中项列表<br>*e*: {Event} Dom 事件对象 | Function | () =&gt; {}\n","methodREADME":[]}],"demos":[{"title":"基本","order":"0","jsx":"import { Checkbox } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h6>无标签不同状态的样子</h6>\n    未选中：<Checkbox />&nbsp; 默认选中：<Checkbox defaultChecked />&nbsp;\n    半选：<Checkbox defaultIndeterminate />&nbsp; 禁用：<Checkbox disabled />&nbsp;\n    选中时禁用：<Checkbox disabled checked />&nbsp; 选中：<Checkbox checked />\n    <h6>带有label标签的样子</h6>\n    <Checkbox>香蕉</Checkbox>\n    <Checkbox id=\"apple\" />\n    <label htmlFor=\"apple\" className=\"next-checkbox-label\">\n      苹果\n    </label>\n    <label>\n      <Checkbox id=\"pear\" />\n      <span className=\"next-checkbox-label\">雪梨</span>\n    </label>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n使用 `Checkbox` 渲染的基本组件。\n\n"},{"title":"受限组件","order":"2","jsx":"import { Checkbox } from \"@icedesign/base\";\n\nconst { Group: CheckboxGroup } = Checkbox;\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\"\n  },\n  {\n    value: \"pear\",\n    label: \"梨\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\"\n  }\n];\n\nclass ControlApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: [\"orange\"]\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(selectedItems) {\n    console.log(\"onChange callback\", selectedItems);\n    this.setState({\n      value: selectedItems\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ padding: \"20px\" }}>\n        <CheckboxGroup\n          value={this.state.value}\n          dataSource={list}\n          onChange={this.onChange}\n        />\n        <br />\n        <CheckboxGroup\n          value={this.state.value}\n          dataSource={list}\n          onChange={this.onChange}\n          disabled\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n\n","css":"","body":"\n使用 `CheckboxGroup` 渲染的组，通过设置 `value` 属性可以让组件变成[受限组件](https://facebook.github.io/react/docs/forms.html#controlled-components)。\n\n"},{"title":"中间状态组件","order":"1","jsx":"import { Checkbox, Button } from \"@icedesign/base\";\n\nclass IndeterminateApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checked: false,\n      indeterminate: true,\n      disabled: false\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Checkbox\n          checked={this.state.checked}\n          indeterminate={this.state.indeterminate}\n          disabled={this.state.disabled}\n          onChange={checked => {\n            this.setState({ checked: checked, indeterminate: false });\n          }}\n        />\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.setState({ checked: true, indeterminate: false });\n          }}\n        >\n          checked = true\n        </Button>\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.setState({ checked: false });\n          }}\n        >\n          checked = false\n        </Button>\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.setState({ checked: false, indeterminate: true });\n          }}\n        >\n          indeterminate = true\n        </Button>\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.setState({ indeterminate: false });\n          }}\n        >\n          indeterminate = false\n        </Button>\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.setState({ disabled: !this.state.disabled });\n          }}\n        >\n          toggle disabled\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<IndeterminateApp />, mountNode);\n\n","css":"","body":"\n通过使用 `indeterminate` 来渲染[中间状态](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox)的组件。\n\n"},{"title":"Checkbox嵌套使用","order":"4","jsx":"import { Checkbox } from \"@icedesign/base\";\n\nconst { Group: CheckboxGroup } = Checkbox;\n\nclass NestApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: [\"orange\", \"orange2\"]\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(selectedItems) {\n    this.setState({\n      value: selectedItems\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <CheckboxGroup value={this.state.value} onChange={this.onChange}>\n          <Checkbox id=\"apple\" value=\"apple\" disabled>\n            苹果\n          </Checkbox>\n          <Checkbox id=\"watermelon\" value=\"watermelon\">\n            西瓜\n          </Checkbox>\n          <Checkbox id=\"orange\" value=\"orange\">\n            橙子\n          </Checkbox>\n        </CheckboxGroup>\n        <br />\n        <br />\n        <CheckboxGroup\n          value={this.state.value}\n          onChange={this.onChange}\n          disabled\n        >\n          <Checkbox id=\"apple2\" value=\"apple2\" disabled>\n            苹果\n          </Checkbox>\n          <Checkbox id=\"watermelon2\" value=\"watermelon2\">\n            西瓜\n          </Checkbox>\n          <Checkbox id=\"orange2\" value=\"orange2\">\n            橙子\n          </Checkbox>\n        </CheckboxGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<NestApp />, mountNode);\n\n","css":"","body":"\n使用 `CheckboxGroup`，通过直接嵌套 `Checkbox` 组件来渲染的组。\n\n"},{"title":"非受限组件","order":"3","jsx":"import { Checkbox } from \"@icedesign/base\";\n\nconst { Group: CheckboxGroup } = Checkbox;\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\",\n    disabled: false\n  },\n  {\n    value: \"pear\",\n    label: \"梨\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\",\n    disabled: true\n  }\n];\n\nclass UnControlApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(selectedItems) {\n    console.log(\"onChange callback\", selectedItems);\n  }\n\n  render() {\n    return (\n      <div style={{ padding: \"20px\" }}>\n        <h4>dataSource</h4>\n        <CheckboxGroup\n          defaultValue={[\"apple\"]}\n          dataSource={list}\n          onChange={this.onChange}\n        />\n        <br />\n        <br />\n        <CheckboxGroup\n          defaultValue={[\"apple\"]}\n          dataSource={list}\n          onChange={this.onChange}\n          disabled\n        />\n        <br />\n        <h4>嵌套使用</h4>\n        <CheckboxGroup\n          disabled\n          defaultValue={[\"apple\"]}\n          onChange={this.onChange}\n        >\n          <Checkbox id=\"apple\" value=\"apple\" disabled>\n            苹果\n          </Checkbox>\n          <Checkbox id=\"watermelon\" value=\"watermelon\">\n            西瓜\n          </Checkbox>\n          <Checkbox id=\"orange\" value=\"orange\">\n            橙子\n          </Checkbox>\n        </CheckboxGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<UnControlApp />, mountNode);\n\n","css":"","body":"\n使用 `CheckboxGroup` 渲染的组，通过设置 `defaultValue` 属性可以让组件变成[非受限组件](https://facebook.github.io/react/docs/forms.html#uncontrolled-components)。\n\n"}]},{"name":"ConfigProvider","category":"Components","title":"通过Context配置Next组件通用的前缀","type":"基本","importStatement":"import { ConfigProvider } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\nNext 组件 className 的默认前缀都是 'next-' ，如 'next-btn'，你可能在以下两种情况下想改变这个默认前缀：\n\n-   自定义组件品牌，如 'my-btn'，'my-select'\n-   一个页面中同时引入两个主题，防止相同类名样式互相覆盖\n\n### 基本使用\n\n#### 在应用中使用\n\n1.  为你的应用包裹 ConfigProvider，并设置相应的 prefix\n\n    entry.jsx\n\n    ```js\n    class App extends React.Component {\n        render() {\n            return (\n                <ConfigProvider prefix=\"my-\">\n                    <div>\n                        <Input />\n                        <Button>Submit</Button>\n                    </div>\n                </ConfigProvider>\n            );\n        }\n    }\n    ```\n\n2.  scss入口文件中在引入主题scss文件前，设置`$css-prefix`\n\n    entry.scss\n\n    ```css\n    $css-prefix: \"my-\";\n    @import \"~@alife/dpl-xxx/index.scss\";\n    ```\n\n#### 如何让组件支持 ConfigProvider ？\n\n组件的 prefix 支持从 context 中获取：\n\n```js\nclass App extends React.Component {\n    static contextTypes = {\n        prefix: React.PropTypes.string\n    };\n\n    render() {\n        const prefix = this.context.prefix;\n        return (\n            <span className={`${prefix}app`}>\n                <a className={`${prefix}app-link`}>link</a>\n            </span>\n        );\n    }\n}\n```\n\n","propsSchema":{"name":"ConfigProvider","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"children":{"type":{"name":"node"},"required":false,"description":"子Element","docblock":"子Element"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nchildren | 子Element | ReactNode | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { ConfigProvider } from \"@icedesign/base\";\n\n/* eslint-disable react/no-multi-comp */\n/* eslint-disable react/prefer-stateless-function */\n\nclass Demo extends React.Component {\n  static contextTypes = {\n    prefix: React.PropTypes.string\n  };\n\n  static propTypes = {\n    prefix: React.PropTypes.string\n  };\n\n  render() {\n    const prefix = this.context.prefix || this.props.prefix;\n    return <span className={`${prefix}btn`}>{prefix}</span>;\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    prefix: \"a-\"\n  };\n\n  handleToggle() {\n    this.setState({\n      prefix: this.state.prefix === \"a-\" ? \"b-\" : \"a-\"\n    });\n  }\n\n  render() {\n    return (\n      <ConfigProvider prefix={this.state.prefix}>\n        <div>\n          <button\n            className=\"toggle-prefix\"\n            type=\"primary\"\n            style={{ marginRight: \"10px\" }}\n            onClick={this.handleToggle.bind(this)}\n          >\n            切换前缀\n          </button>\n          <Demo />\n        </div>\n      </ConfigProvider>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".toggle-prefix {\n    width: 100px;\n    height: 40px;\n    border: 1px solid #999;\n    border-radius: 3px;\n    background: #FFF;\n    font-size: 14px;\n    outline: none;\n    cursor: pointer;\n}\n.a-btn {\n    display: inline-block;\n    width: 40px;\n    height: 40px;\n    line-height: 40px;\n    text-align: center;\n    font-size: 14px;\n    border-radius: 3px;\n    background: red;\n}\n.b-btn {\n    display: inline-block;\n    width: 40px;\n    height: 40px;\n    line-height: 40px;\n    text-align: center;\n    font-size: 14px;\n    border-radius: 3px;\n    background: blue;\n}\n","body":"\n最简单的用法。\n\n"}]},{"name":"DatePicker","category":"Components","title":"日期选择框","type":"表单","importStatement":"import { DatePicker } from '@icedesign/base';","body":"\n\n## Guide\n\n输入或选择日期的控件。当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。\n\n","propsSchema":{"name":"DatePicker","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"品牌样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"品牌样式前缀"},"defaultBase":{"type":{"name":"string"},"required":false,"description":"默认的基准日期","docblock":"默认的基准日期"},"defaultValue":{"type":{"name":"any"},"required":false,"description":"默认日期","docblock":"默认日期"},"value":{"type":{"name":"any"},"required":false,"description":"日期值","docblock":"日期值"},"onChange":{"type":{"name":"func"},"required":false,"description":"时间发生改变时的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"时间发生改变时的回调函数\n@param {String} date       改变后的日期\n@param {String} formatDate 改变后的格式化日期","params":[{"name":"date","description":"改变后的日期","type":{"name":"String"}},{"name":"formatDate","description":"改变后的格式化日期","type":{"name":"String"}}],"returns":null},"defaultOpen":{"type":{"name":"bool"},"required":false,"description":"是否默认展开","docblock":"是否默认展开"},"open":{"type":{"name":"bool"},"required":false,"description":"是否展开","docblock":"是否展开"},"onOpenChange":{"type":{"name":"func"},"required":false,"description":"当面板展开状态改变时的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"当面板展开状态改变时的回调函数\n@param {Boolean} open 面板的展开状态","params":[{"name":"open","description":"面板的展开状态","type":{"name":"Boolean"}}],"returns":null},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"输入框大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"输入框大小"},"language":{"type":{"name":"enum","value":[{"value":"'en-us'","computed":false},{"value":"'ar'","computed":false},{"value":"'de'","computed":false},{"value":"'es'","computed":false},{"value":"'fr'","computed":false},{"value":"'hi'","computed":false},{"value":"'it'","computed":false},{"value":"'ja'","computed":false},{"value":"'ko'","computed":false},{"value":"'pt'","computed":false},{"value":"'ru'","computed":false},{"value":"'zh-cn'","computed":false},{"value":"'zh-hk'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"语言","docblock":"语言"},"locale":{"type":{"name":"object"},"required":false,"description":"国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)","docblock":"国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)","properties":[]},"popupStyle":{"type":{"name":"object"},"required":false,"description":"弹层面板样式","docblock":"弹层面板样式","properties":[]},"popupAlign":{"type":{"name":"string"},"required":false,"description":"弹层对齐方式","defaultValue":{"value":"'tl tl'","computed":false},"docblock":"弹层对齐方式"},"popupOffset":{"type":{"name":"array"},"required":false,"description":"弹层偏移","defaultValue":{"value":"[0, 0]","computed":false},"docblock":"弹层偏移"},"format":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":false,"description":"输出日期值格式化","docblock":"输出日期值格式化"},"formater":{"type":{"name":"array"},"required":false,"description":"日期格式化（可替代 format)","defaultValue":{"value":"['YYYY-MM-DD', 'HH:mm:ss']","computed":false},"docblock":"日期格式化（可替代 format)"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","docblock":"是否禁用"},"hasClear":{"type":{"name":"bool"},"required":false,"description":"是否展示清空按钮","defaultValue":{"value":"true","computed":false},"docblock":"是否展示清空按钮"},"showTime":{"type":{"name":"union","value":[{"name":"bool"},{"name":"object"}]},"required":false,"description":"是否展示时间选择或传入 { defaultValue } 设置时间初值","docblock":"是否展示时间选择或传入 { defaultValue } 设置时间初值"},"readOnly":{"type":{"name":"bool"},"required":false,"description":"输入框是否只读","defaultValue":{"value":"false","computed":false},"docblock":"输入框是否只读"},"className":{"type":{"name":"string"},"required":false,"description":"自定义组件样式","docblock":"自定义组件样式"}},"methods":[],"subComponents":[{"name":"MonthPicker","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"品牌样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"品牌样式前缀"},"defaultBase":{"type":{"name":"string"},"required":false,"description":"默认的基准日期","docblock":"默认的基准日期"},"defaultValue":{"type":{"name":"any"},"required":false,"description":"默认日期","docblock":"默认日期"},"value":{"type":{"name":"any"},"required":false,"description":"日期值","docblock":"日期值"},"onChange":{"type":{"name":"func"},"required":false,"description":"日期发生改变时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"日期发生改变时的回调\n@param {String} date       改变后的日期\n@param {String} formatDate 格式化的日期","params":[{"name":"date","description":"改变后的日期","type":{"name":"String"}},{"name":"formatDate","description":"格式化的日期","type":{"name":"String"}}],"returns":null},"defaultOpen":{"type":{"name":"bool"},"required":false,"description":"是否默认展开","docblock":"是否默认展开"},"open":{"type":{"name":"bool"},"required":false,"description":"是否展开","docblock":"是否展开"},"onOpenChange":{"type":{"name":"func"},"required":false,"description":"当面板展开变化时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"当面板展开变化时的回调\n@param {Boolean} open 面板的展开状态","params":[{"name":"open","description":"面板的展开状态","type":{"name":"Boolean"}}],"returns":null},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"输入框大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"输入框大小"},"language":{"type":{"name":"enum","value":[{"value":"'en-us'","computed":false},{"value":"'ar'","computed":false},{"value":"'de'","computed":false},{"value":"'es'","computed":false},{"value":"'fr'","computed":false},{"value":"'hi'","computed":false},{"value":"'it'","computed":false},{"value":"'ja'","computed":false},{"value":"'ko'","computed":false},{"value":"'pt'","computed":false},{"value":"'ru'","computed":false},{"value":"'zh-cn'","computed":false},{"value":"'zh-hk'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"语言","docblock":"语言"},"locale":{"type":{"name":"object"},"required":false,"description":"国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)","docblock":"国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)","properties":[]},"popupStyle":{"type":{"name":"object"},"required":false,"description":"弹层样式","docblock":"弹层样式","properties":[]},"popupAlign":{"type":{"name":"string"},"required":false,"description":"弹层对齐方式","defaultValue":{"value":"'tl tl'","computed":false},"docblock":"弹层对齐方式"},"popupOffset":{"type":{"name":"array"},"required":false,"description":"弹层偏移","defaultValue":{"value":"[0, 0]","computed":false},"docblock":"弹层偏移"},"format":{"type":{"name":"string"},"required":false,"description":"展开日期的格式","defaultValue":{"value":"'YYYY-MM'","computed":false},"docblock":"展开日期的格式"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","docblock":"是否禁用"},"hasClear":{"type":{"name":"bool"},"required":false,"description":"是否有清空按钮","defaultValue":{"value":"true","computed":false},"docblock":"是否有清空按钮"},"readOnly":{"type":{"name":"bool"},"required":false,"description":"输入框是否只读","defaultValue":{"value":"false","computed":false},"docblock":"输入框是否只读"},"className":{"type":{"name":"string"},"required":false,"description":"自定义组件样式","docblock":"自定义组件样式"}},"methods":[]},{"name":"RangePicker","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"品牌样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"品牌样式前缀"},"defaultBase":{"type":{"name":"string"},"required":false,"description":"默认的基准日期","docblock":"默认的基准日期"},"defaultValue":{"type":{"name":"array"},"required":false,"description":"默认日期值","docblock":"默认日期值"},"value":{"type":{"name":"array"},"required":false,"description":"日期值","docblock":"日期值"},"onChange":{"type":{"name":"func"},"required":false,"description":"时间发生改变的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"时间发生改变的回调\n@param {Array} dateRange        选中的日期区间数组\n@param {Array} formatDateRnage  格式化后的选中的日期区间数组","params":[{"name":"dateRange","description":"选中的日期区间数组","type":{"name":"Array"}},{"name":"formatDateRnage","description":"格式化后的选中的日期区间数组","type":{"name":"Array"}}],"returns":null},"onStartChange":{"type":{"name":"func"},"required":false,"description":"开始日期变化时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"开始日期变化时的回调\n@param {String} date 开始日期","params":[{"name":"date","description":"开始日期","type":{"name":"String"}}],"returns":null},"onEndChange":{"type":{"name":"func"},"required":false,"description":"结束日期变化时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"结束日期变化时的回调\n@param {String} date 结束日期","params":[{"name":"date","description":"结束日期","type":{"name":"String"}}],"returns":null},"defaultOpen":{"type":{"name":"bool"},"required":false,"description":"默认是否展开","docblock":"默认是否展开"},"open":{"type":{"name":"bool"},"required":false,"description":"是否展开","docblock":"是否展开"},"onOpenChange":{"type":{"name":"func"},"required":false,"description":"当面板展开状态改变时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"当面板展开状态改变时的回调\n@param {Boolean} 面板的 open 状态","params":[{"name":"面板的","description":"open 状态","type":{"name":"Boolean"}}],"returns":null},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"输入框大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"输入框大小"},"language":{"type":{"name":"enum","value":[{"value":"'en-us'","computed":false},{"value":"'ar'","computed":false},{"value":"'de'","computed":false},{"value":"'es'","computed":false},{"value":"'fr'","computed":false},{"value":"'hi'","computed":false},{"value":"'it'","computed":false},{"value":"'ja'","computed":false},{"value":"'ko'","computed":false},{"value":"'pt'","computed":false},{"value":"'ru'","computed":false},{"value":"'zh-cn'","computed":false},{"value":"'zh-hk'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"语言","docblock":"语言"},"locale":{"type":{"name":"object"},"required":false,"description":"国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)","docblock":"国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)","properties":[]},"popupStyle":{"type":{"name":"object"},"required":false,"description":"弹层样式","docblock":"弹层样式","properties":[]},"popupAlign":{"type":{"name":"string"},"required":false,"description":"弹层对其方式","defaultValue":{"value":"'tl tl'","computed":false},"docblock":"弹层对其方式"},"popupOffset":{"type":{"name":"array"},"required":false,"description":"弹层偏移","defaultValue":{"value":"[0, 0]","computed":false},"docblock":"弹层偏移"},"format":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":false,"description":"输出日期的格式","docblock":"输出日期的格式"},"formater":{"type":{"name":"array"},"required":false,"description":"日期值格式化（可替代 format）","defaultValue":{"value":"['YYYY-MM-DD', 'HH:mm:ss']","computed":false},"docblock":"日期值格式化（可替代 format）"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","docblock":"是否禁用"},"hasClear":{"type":{"name":"bool"},"required":false,"description":"是否有清空按钮","defaultValue":{"value":"true","computed":false},"docblock":"是否有清空按钮"},"showTime":{"type":{"name":"union","value":[{"name":"bool"},{"name":"object"}]},"required":false,"description":"是否显示时间或传入 { defaultValue } 设置时间初值","defaultValue":{"value":"false","computed":false},"docblock":"是否显示时间或传入 { defaultValue } 设置时间初值"},"resetTime":{"type":{"name":"bool"},"required":false,"description":"重新选择时是否重置时间","defaultValue":{"value":"true","computed":false},"docblock":"重新选择时是否重置时间"},"ranges":{"type":{"name":"object"},"required":false,"description":"用户预设的快捷选择的日期范围","defaultValue":{"value":"{}","computed":false},"docblock":"用户预设的快捷选择的日期范围","properties":[]},"readOnly":{"type":{"name":"bool"},"required":false,"description":"输入框是否只读","docblock":"输入框是否只读"},"className":{"type":{"name":"string"},"required":false,"description":"自定义组件样式","docblock":"自定义组件样式"}},"methods":[{"name":"normalizeValue","docblock":"规格化输入日期值\n@param {Array} value 输入日期值数组\n@return {Array} 返回 moment 包裹后的日期数组","modifiers":[],"params":[{"name":"value","description":"输入日期值数组","type":{"name":"Array"}},{"name":"checkDisabled"}],"returns":{"description":"返回 moment 包裹后的日期数组","type":{"name":"Array"}},"description":"规格化输入日期值"},{"name":"parseValue","docblock":"从日期值中解析出日期范围对象\n@param {Array} value 规格化后的日期值\n@return {Object} { startDate, startTime, endDate, endTime, all }","modifiers":[],"params":[{"name":"value","description":"规格化后的日期值","type":{"name":"Array"}}],"returns":{"description":"{ startDate, startTime, endDate, endTime, all }","type":{"name":"Object"}},"description":"从日期值中解析出日期范围对象"}]},{"name":"YearPicker","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"品牌的样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"品牌的样式前缀"},"defaultBase":{"type":{"name":"string"},"required":false,"description":"默认的基准日期","docblock":"默认的基准日期"},"defaultValue":{"type":{"name":"any"},"required":false,"description":"默认日期","docblock":"默认日期"},"value":{"type":{"name":"any"},"required":false,"description":"日期","docblock":"日期"},"onChange":{"type":{"name":"func"},"required":false,"description":"时间发生变化的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"时间发生变化的回调\n@param {String} date         改变后的日期\n@param {String} formateDate  格式化的日期","params":[{"name":"date","description":"改变后的日期","type":{"name":"String"}},{"name":"formateDate","description":"格式化的日期","type":{"name":"String"}}],"returns":null},"defaultOpen":{"type":{"name":"bool"},"required":false,"description":"默认是否展开","docblock":"默认是否展开"},"open":{"type":{"name":"bool"},"required":false,"description":"是否展开","docblock":"是否展开"},"onOpenChange":{"type":{"name":"func"},"required":false,"description":"当面板展开状态改变时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"当面板展开状态改变时的回调\n@param {Boolean} open  面板的展开状态","params":[{"name":"open","description":"面板的展开状态","type":{"name":"Boolean"}}],"returns":null},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"输入框尺寸","defaultValue":{"value":"'medium'","computed":false},"docblock":"输入框尺寸"},"language":{"type":{"name":"enum","value":[{"value":"'en-us'","computed":false},{"value":"'ar'","computed":false},{"value":"'de'","computed":false},{"value":"'es'","computed":false},{"value":"'fr'","computed":false},{"value":"'hi'","computed":false},{"value":"'it'","computed":false},{"value":"'ja'","computed":false},{"value":"'ko'","computed":false},{"value":"'pt'","computed":false},{"value":"'ru'","computed":false},{"value":"'zh-cn'","computed":false},{"value":"'zh-hk'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"语言","docblock":"语言"},"locale":{"type":{"name":"object"},"required":false,"description":"国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)","docblock":"国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)","properties":[]},"popupStyle":{"type":{"name":"object"},"required":false,"description":"弹层样式","docblock":"弹层样式","properties":[]},"popupAlign":{"type":{"name":"string"},"required":false,"description":"弹层对齐方式","defaultValue":{"value":"'tl tl'","computed":false},"docblock":"弹层对齐方式"},"popupOffset":{"type":{"name":"array"},"required":false,"description":"弹层偏移","defaultValue":{"value":"[0, 0]","computed":false},"docblock":"弹层偏移"},"format":{"type":{"name":"string"},"required":false,"description":"日期格式","defaultValue":{"value":"'YYYY'","computed":false},"docblock":"日期格式"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","docblock":"是否禁用"},"hasClear":{"type":{"name":"bool"},"required":false,"description":"是否展示清空按钮","defaultValue":{"value":"true","computed":false},"docblock":"是否展示清空按钮"},"readOnly":{"type":{"name":"bool"},"required":false,"description":"输入框是否只读","defaultValue":{"value":"false","computed":false},"docblock":"输入框是否只读"},"className":{"type":{"name":"string"},"required":false,"description":"自定义组件样式","docblock":"自定义组件样式"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 品牌样式前缀 | String | 'next-'\ndefaultBase | 默认的基准日期 | String | -\ndefaultValue | 默认日期 | any | -\nvalue | 日期值 | any | -\nonChange | 时间发生改变时的回调函数<br><br>**签名**:<br>Function(date: String, formatDate: String) => void<br>**参数**:<br>*date*: {String} 改变后的日期<br>*formatDate*: {String} 改变后的格式化日期 | Function | () =&gt; {}\ndefaultOpen | 是否默认展开 | Boolean | -\nopen | 是否展开 | Boolean | -\nonOpenChange | 当面板展开状态改变时的回调函数<br><br>**签名**:<br>Function(open: Boolean) => void<br>**参数**:<br>*open*: {Boolean} 面板的展开状态 | Function | () =&gt; {}\nsize | 输入框大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nlanguage | 语言<br><br>**可选值**:<br>'en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw' | Enum | -\nlocale | 国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js) | Object | -\npopupStyle | 弹层面板样式 | Object | -\npopupAlign | 弹层对齐方式 | String | 'tl tl'\npopupOffset | 弹层偏移 | Array | [0, 0]\nformat | 输出日期值格式化 | String/Function | -\nformater | 日期格式化（可替代 format) | Array | ['YYYY-MM-DD', 'HH:mm:ss']\ndisabled | 是否禁用 | Boolean | -\nhasClear | 是否展示清空按钮 | Boolean | true\nshowTime | 是否展示时间选择或传入 { defaultValue } 设置时间初值 | Boolean/Object | -\nreadOnly | 输入框是否只读 | Boolean | false\nclassName | 自定义组件样式 | String | -\n","methodREADME":[],"subComponentsREADME":[{"name":"MonthPicker","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 品牌样式前缀 | String | 'next-'\ndefaultBase | 默认的基准日期 | String | -\ndefaultValue | 默认日期 | any | -\nvalue | 日期值 | any | -\nonChange | 日期发生改变时的回调<br><br>**签名**:<br>Function(date: String, formatDate: String) => void<br>**参数**:<br>*date*: {String} 改变后的日期<br>*formatDate*: {String} 格式化的日期 | Function | () =&gt; {}\ndefaultOpen | 是否默认展开 | Boolean | -\nopen | 是否展开 | Boolean | -\nonOpenChange | 当面板展开变化时的回调<br><br>**签名**:<br>Function(open: Boolean) => void<br>**参数**:<br>*open*: {Boolean} 面板的展开状态 | Function | () =&gt; {}\nsize | 输入框大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nlanguage | 语言<br><br>**可选值**:<br>'en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw' | Enum | -\nlocale | 国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js) | Object | -\npopupStyle | 弹层样式 | Object | -\npopupAlign | 弹层对齐方式 | String | 'tl tl'\npopupOffset | 弹层偏移 | Array | [0, 0]\nformat | 展开日期的格式 | String | 'YYYY-MM'\ndisabled | 是否禁用 | Boolean | -\nhasClear | 是否有清空按钮 | Boolean | true\nreadOnly | 输入框是否只读 | Boolean | false\nclassName | 自定义组件样式 | String | -\n","methodREADME":[]},{"name":"RangePicker","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 品牌样式前缀 | String | 'next-'\ndefaultBase | 默认的基准日期 | String | -\ndefaultValue | 默认日期值 | Array | -\nvalue | 日期值 | Array | -\nonChange | 时间发生改变的回调<br><br>**签名**:<br>Function(dateRange: Array, formatDateRnage: Array) => void<br>**参数**:<br>*dateRange*: {Array} 选中的日期区间数组<br>*formatDateRnage*: {Array} 格式化后的选中的日期区间数组 | Function | () =&gt; {}\nonStartChange | 开始日期变化时的回调<br><br>**签名**:<br>Function(date: String) => void<br>**参数**:<br>*date*: {String} 开始日期 | Function | () =&gt; {}\nonEndChange | 结束日期变化时的回调<br><br>**签名**:<br>Function(date: String) => void<br>**参数**:<br>*date*: {String} 结束日期 | Function | () =&gt; {}\ndefaultOpen | 默认是否展开 | Boolean | -\nopen | 是否展开 | Boolean | -\nonOpenChange | 当面板展开状态改变时的回调<br><br>**签名**:<br>Function(面板的: Boolean) => void<br>**参数**:<br>*面板的*: {Boolean} open 状态 | Function | () =&gt; {}\nsize | 输入框大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nlanguage | 语言<br><br>**可选值**:<br>'en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw' | Enum | -\nlocale | 国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js) | Object | -\npopupStyle | 弹层样式 | Object | -\npopupAlign | 弹层对其方式 | String | 'tl tl'\npopupOffset | 弹层偏移 | Array | [0, 0]\nformat | 输出日期的格式 | String/Function | -\nformater | 日期值格式化（可替代 format） | Array | ['YYYY-MM-DD', 'HH:mm:ss']\ndisabled | 是否禁用 | Boolean | -\nhasClear | 是否有清空按钮 | Boolean | true\nshowTime | 是否显示时间或传入 { defaultValue } 设置时间初值 | Boolean/Object | false\nresetTime | 重新选择时是否重置时间 | Boolean | true\nranges | 用户预设的快捷选择的日期范围 | Object | {}\nreadOnly | 输入框是否只读 | Boolean | -\nclassName | 自定义组件样式 | String | -\n","methodREADME":["**签名**:<br>Function(value: Array, checkDisabled: unknown) => Array<br>**参数**:<br>*value*: {Array} 输入日期值数组<br>*checkDisabled*: {unknown} undefined<br>**返回值**:<br>{Array} 返回 moment 包裹后的日期数组<br>","**签名**:<br>Function(value: Array) => Object<br>**参数**:<br>*value*: {Array} 规格化后的日期值<br>**返回值**:<br>{Object} { startDate, startTime, endDate, endTime, all }<br>"]},{"name":"YearPicker","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 品牌的样式前缀 | String | 'next-'\ndefaultBase | 默认的基准日期 | String | -\ndefaultValue | 默认日期 | any | -\nvalue | 日期 | any | -\nonChange | 时间发生变化的回调<br><br>**签名**:<br>Function(date: String, formateDate: String) => void<br>**参数**:<br>*date*: {String} 改变后的日期<br>*formateDate*: {String} 格式化的日期 | Function | () =&gt; {}\ndefaultOpen | 默认是否展开 | Boolean | -\nopen | 是否展开 | Boolean | -\nonOpenChange | 当面板展开状态改变时的回调<br><br>**签名**:<br>Function(open: Boolean) => void<br>**参数**:<br>*open*: {Boolean} 面板的展开状态 | Function | () =&gt; {}\nsize | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nlanguage | 语言<br><br>**可选值**:<br>'en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw' | Enum | -\nlocale | 国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js) | Object | -\npopupStyle | 弹层样式 | Object | -\npopupAlign | 弹层对齐方式 | String | 'tl tl'\npopupOffset | 弹层偏移 | Array | [0, 0]\nformat | 日期格式 | String | 'YYYY'\ndisabled | 是否禁用 | Boolean | -\nhasClear | 是否展示清空按钮 | Boolean | true\nreadOnly | 输入框是否只读 | Boolean | false\nclassName | 自定义组件样式 | String | -\n","methodREADME":[]}],"demos":[{"title":"基本用法","order":"0","jsx":"import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker onChange={(val, str) => console.log(val, str)} />\n    <h3>月份选择</h3>\n    <MonthPicker onChange={(val, str) => console.log(val, str)} />\n    <h3>年份选择</h3>\n    <YearPicker onChange={(val, str) => console.log(val, str)} />\n    <h3>区间选择</h3>\n    <RangePicker\n      onChange={(val, str) => console.log(val, str)}\n      onStartChange={(val, str) => console.log(val, str)}\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n最基本的用法。监听了 `change` 事件, 输入框值改变时控制台有日志显示。\n\n"},{"title":"自定义日期范围选择","order":"6","jsx":"import { DatePicker } from \"@icedesign/base\";\n\nclass CustomRangePicker extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      startValue: null,\n      endValue: null,\n      endOpen: false\n    };\n  }\n\n  disabledStartDate(startValue) {\n    const { endValue } = this.state;\n    if (!startValue || !endValue) {\n      return false;\n    }\n    return startValue.valueOf() > endValue.valueOf();\n  }\n\n  disabledEndDate(endValue) {\n    const { startValue } = this.state;\n    if (!endValue || !startValue) {\n      return false;\n    }\n    return endValue.valueOf() <= startValue.valueOf();\n  }\n\n  onChange(field, value) {\n    this.setState({\n      [field]: value\n    });\n  }\n\n  onStartChange(value) {\n    this.onChange(\"startValue\", value);\n  }\n\n  onEndChange(value) {\n    this.onChange(\"endValue\", value);\n  }\n\n  handleStartOpenChange(open) {\n    if (!open) {\n      this.setState({ endOpen: true });\n    }\n  }\n\n  handleEndOpenChange(open) {\n    this.setState({ endOpen: open });\n  }\n\n  render() {\n    const { startValue, endValue, endOpen } = this.state;\n    return (\n      <div>\n        <DatePicker\n          disabledDate={this.disabledStartDate.bind(this)}\n          showTime\n          value={startValue}\n          placeholder=\"Start\"\n          onChange={this.onStartChange.bind(this)}\n          onOpenChange={this.handleStartOpenChange.bind(this)}\n        />\n        &nbsp;\n        <DatePicker\n          disabledDate={this.disabledEndDate.bind(this)}\n          showTime\n          value={endValue}\n          placeholder=\"End\"\n          onChange={this.onEndChange.bind(this)}\n          open={endOpen}\n          onOpenChange={this.handleEndOpenChange.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <div>\n    <CustomRangePicker />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n例如，示例中的日期选择可以自由的更改开始或结束日期，而不必每次选择时重置日期。\n如果默认的 RangePicker 在交互上无法满足您的使用需求，您还可以基于 DatePicker 封装实现类似的功能。\n\n"},{"title":"提供默认值","order":"1","jsx":"import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker defaultValue={\"2017年02月14日\"} formater={[\"YYYY年MM月DD日\"]} />\n    <h3>月份选择</h3>\n    <MonthPicker defaultValue={\"2017-02\"} />\n    <h3>年份选择</h3>\n    <YearPicker defaultValue={\"2017\"} />\n    <h3>区间选择</h3>\n    <RangePicker defaultValue={[\"2017-02-14\", \"2017-03-24\"]} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n为选择器设置默认值。\n\n"},{"title":"禁用日期、月份、年份","order":"3","jsx":"import { moment, DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\n// 2018不可选\nconst disabledYear = function(calendarDate) {\n  return calendarDate.year === 2018;\n};\n\n// 五月份不可选\nconst disabledMonth = function(calendarDate) {\n  return calendarDate.month === 4;\n};\n\n// 选择今天以后的时间\nconst disabledDate = function(calendarDate) {\n  const { year, month, date } = calendarDate;\n  const theDate = moment(`${year}-${month + 1}-${date}`, \"YYYY-M-D\");\n\n  return theDate < new Date().getTime();\n};\n\n// 选择本周\nconst disabledRange = function(calendarDate) {\n  let ret = false;\n  const now = moment();\n  const nowWeek = now.isoWeekday();\n  const { year, month, date } = calendarDate;\n  const theDate = moment(`${year}-${month + 1}-${date}`, \"YYYY-M-D\");\n\n  if (!theDate) {\n    return ret;\n  }\n\n  if (theDate > (7 - nowWeek) * 24 * 60 * 60 * 1000 + now.valueOf()) {\n    ret = true;\n  }\n\n  if (theDate < now.valueOf() - nowWeek * 24 * 60 * 60 * 1000) {\n    ret = true;\n  }\n\n  return ret;\n};\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker disabledDate={disabledDate} />\n    <h3>月份选择</h3>\n    <MonthPicker disabledMonth={disabledMonth} />\n    <h3>年份选择</h3>\n    <YearPicker disabledYear={disabledYear} />\n    <h3>区间选择</h3>\n    <RangePicker disabledDate={disabledRange} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n设置 `disabledYear` 方法，来确定不可选年份。\n设置 `disabledMonth` 方法，来确定不可选月份。\n设置 `disabledDate` 方法，来确定不可选日期。\n\n"},{"title":"禁用选择框","order":"4","jsx":"import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker defaultValue={\"2017-02-14\"} disabled />\n    <h3>月份选择</h3>\n    <MonthPicker defaultValue={\"2017-02\"} disabled />\n    <h3>年份选择</h3>\n    <YearPicker defaultValue={\"2017\"} disabled />\n    <h3>区间选择</h3>\n    <RangePicker defaultValue={[\"2017-02-14\", \"2017-03-24\"]} disabled />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n选择框的不可用状态。\n\n"},{"title":"与 field 结合","order":"10","jsx":"import { DatePicker, Field, Button } from \"@icedesign/base\";\n\nconst { RangePicker } = DatePicker;\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  normDate(date, dateStr) {\n    console.log(\"normDate:\", date, dateStr);\n    return date.getTime();\n  }\n\n  normRange(date, dateStr) {\n    console.log(date, dateStr);\n    return date;\n  }\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <div>\n        <DatePicker\n          format=\"YYYY年MM月DD日 \"\n          {...init(\"datepicker\", {\n            getValueFromEvent: this.normDate\n          })}\n        />\n        <br />\n        <br />\n        <RangePicker\n          {...init(\"rangepicker\", {\n            getValueFromEvent: this.normRange,\n            initValue: [\"2017-05-01\", \"2017-05-10\"]\n          })}\n        />\n        <br />\n        <br />\n        <Button\n          onClick={() => {\n            return console.log(this.field.getValues());\n          }}\n        >\n          Console中展示数据\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n与field结合使用，简单示范自定义返回值\n\n"},{"title":"日期格式化","order":"5","jsx":"import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker format={\"YYYY/MM/DD\"} />\n    <br />\n    <br />\n    <DatePicker format={\"YYYY年MM月DD日\"} />\n    <h3>月份选择</h3>\n    <MonthPicker format={\"YYYY/MM\"} />\n    <h3>年份选择</h3>\n    <YearPicker format={\"YYYY\"} />\n    <h3>区间选择</h3>\n    <RangePicker format={\"YYYY/MM/DD\"} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n使用 `format` 属性，可以自定义你需要的日期显示格式，如 `YYYY/MM/DD`。\n\n"},{"title":"多语言","order":"8","jsx":"import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nconst locale = {\n  datePlaceholder: \"请选择日期-测试\",\n  monthPlaceholder: \"请选择月份-测试\",\n  yearPlaceholder: \"请选择年份-测试\",\n  rangeStartPlaceholder: \"起始时间-测试\",\n  rangeEndPlaceholder: \"结束时间-测试\",\n  now: \"此刻-测试\",\n  selectTime: \"选择时间-测试\",\n  selectDate: \"选择日期-测试\",\n  ok: \"确定-测试\",\n  clear: \"清除-测试\"\n};\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker locale={locale} />\n    <h3>月份选择</h3>\n    <MonthPicker locale={locale} />\n    <h3>年份选择</h3>\n    <YearPicker locale={locale} />\n    <h3>区间选择</h3>\n    <RangePicker locale={locale} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n自定义传入多语言文案，可用于组件中所有文案的自定义。\n\n"},{"title":"关于弹出层的自定义配置","order":"9","jsx":"import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker popupAlign={\"bl tl\"} />\n    <h3>月份选择</h3>\n    <MonthPicker popupAlign={\"bl tl\"} />\n    <h3>年份选择</h3>\n    <YearPicker popupAlign={\"bl tl\"} />\n    <h3>区间选择</h3>\n    <RangePicker popupAlign={\"bl tl\"} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n关于弹出层的自定义配置\n\n"},{"title":"用户预设日期范围","order":"7","jsx":"import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nconst now = new Date();\nconst start = new Date().setDate(1);\nconst end = new Date().setDate(7);\n\nconst quickRanges = {\n  Today: [now, now],\n  \"First Week\": [start, end]\n};\n\nReactDOM.render(\n  <div>\n    <RangePicker\n      ranges={quickRanges}\n      onChange={(val, str) => console.log(val, str)}\n      onStartChange={(val, str) => console.log(val, str)}\n    />\n    <br />\n    <br />\n    <RangePicker\n      ranges={quickRanges}\n      onChange={(val, str) => console.log(val, str)}\n      onStartChange={(val, str) => console.log(val, str)}\n      showTime\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过 ranges 属性自定义快捷日期选择。\n\n"},{"title":"与时间选择联动","order":"3","jsx":"import { DatePicker, moment } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>普通的日期时间选择</h3>\n    <DatePicker showTime onChange={(a, b) => console.log(a, b)} />\n    <h3>设置时间初值的日期时间选择</h3>\n    <DatePicker\n      showTime={{ defaultValue: moment(\"12:12:12\", \"HH:mm:ss\") }}\n      onChange={(a, b) => console.log(a, b)}\n    />\n    <h3>普通的区间选择（每次选择会重置时间为 00:00:00 ）</h3>\n    <RangePicker showTime onChange={(a, b) => console.log(a, b)} />\n    <h3>设置时间初值的区间选择（每次选择重置时间为用户预设的日期初值 ）</h3>\n    <RangePicker\n      showTime={{\n        defaultValue: [\n          moment(\"00:00:00\", \"HH:mm:ss\"),\n          moment(\"23:59:59\", \"HH:mm:ss\")\n        ]\n      }}\n      onChange={(a, b) => console.log(a, b)}\n    />\n    <h3>每次记住上次选择时间的区间选择（每次选择不重置时间）</h3>\n    <RangePicker\n      showTime\n      onChange={(a, b) => console.log(a, b)}\n      resetTime={false}\n    />\n    <h3>设置时间初值的区间选择（每次选择会记住上次选择的时间 ）</h3>\n    <RangePicker\n      showTime={{\n        defaultValue: [\n          moment(\"00:00:00\", \"HH:mm:ss\"),\n          moment(\"23:59:59\", \"HH:mm:ss\")\n        ]\n      }}\n      onChange={(a, b) => console.log(a, b)}\n      resetTime={false}\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n通过设置 `showTime` 属性，可以设置包含时间选择控件的日期组件。`showTime` 属性支持两种设置方式，通常可以传入 bool 值表示是否启动时间选择控件。如果用户有预设时间初值的需求，`showTime` 属性支持传入对象的方式设置时间初值，设置方式为设置 `showTime.defaultValue` ，推荐使用 moment 对时间值进行格式化。\n\n"},{"title":"不同尺寸","order":"2","jsx":"import { DatePicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>大号</h3>\n    <DatePicker size=\"large\" />\n    <h3>中号</h3>\n    <DatePicker />\n    <h3>小号</h3>\n    <DatePicker size=\"small\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n三种大小的输入框，大的用在表单中，中的为默认。\n\n"}]},{"name":"Dialog","category":"Components","title":"弹窗","type":"弹层","importStatement":"import { Dialog } from '@icedesign/base';","body":"\n\n## 使用指南\n\n对话框\n\n### 何时使用\n\n对话框是用于在不离开主路径的情况下，提供用户快速执行简单的操作、确认用户信息或反馈提示的辅助窗口。\n\n","propsSchema":{"name":"Dialog","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"title":{"type":{"name":"any"},"required":false,"description":"对话框的标题","docblock":"对话框的标题"},"footer":{"type":{"name":"union","value":[{"name":"bool"},{"name":"string"},{"name":"node"}]},"required":false,"description":"传入底部的内容","docblock":"传入底部的内容"},"footerAlign":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'center'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"底部按钮的对齐方式","defaultValue":{"value":"'right'","computed":false},"docblock":"底部按钮的对齐方式"},"visible":{"type":{"name":"bool"},"required":false,"description":"控制对话框是否可见","docblock":"控制对话框是否可见"},"hasMask":{"type":{"name":"bool"},"required":false,"description":"是否需要mask","defaultValue":{"value":"true","computed":false},"docblock":"是否需要mask"},"closable":{"type":{"name":"union","value":[{"name":"string"},{"name":"bool"}]},"required":false,"description":"'esc, mask, close', 详见[closable](#closable)","defaultValue":{"value":"'esc,close'","computed":false},"docblock":"'esc, mask, close', 详见[closable](#closable)"},"shouldUpdatePosition":{"type":{"name":"bool"},"required":false,"description":"是否强制更新dialog的位置，在`isFullScreen`为true且align为`cc cc`的时候无效","docblock":"是否强制更新dialog的位置，在`isFullScreen`为true且align为`cc cc`的时候无效"},"align":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"浮层自定义位置","defaultValue":{"value":"'cc cc'","computed":false},"docblock":"浮层自定义位置"},"animation":{"type":{"name":"union","value":[{"name":"object"},{"name":"bool"}]},"required":false,"description":"配置动画的播放方式","defaultValue":{"value":"{\n    in: 'fadeInDown',\n    out: 'fadeOutUp'\n}","computed":false},"docblock":"配置动画的播放方式\n@param {String} in 进场动画\n@param {String} out 出场动画"},"onClose":{"type":{"name":"func"},"required":false,"description":"在点击关闭按钮的时候触发的函数","docblock":"在点击关闭按钮的时候触发的函数","params":[],"returns":null},"afterClose":{"type":{"name":"func"},"required":false,"description":"浮层关闭后触发的事件, 如果有动画，则在动画结束后触发","docblock":"浮层关闭后触发的事件, 如果有动画，则在动画结束后触发","params":[],"returns":null},"onOk":{"type":{"name":"func"},"required":false,"description":"在点击Ok按钮的时候触发的函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"在点击Ok按钮的时候触发的函数","params":[],"returns":null},"onCancel":{"type":{"name":"func"},"required":false,"description":"在点击Cancel按钮的时候触发的函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"在点击Cancel按钮的时候触发的函数","params":[],"returns":null},"minMargin":{"type":{"name":"number"},"required":false,"description":"当dialog过高的时候距离viewport的最小边距,在`isFullScreen`下无效。","defaultValue":{"value":"40","computed":false},"docblock":"当dialog过高的时候距离viewport的最小边距,在`isFullScreen`下无效。"},"autoFocus":{"type":{"name":"bool"},"required":false,"description":"当dialog弹出的时候是否自动获取焦点","defaultValue":{"value":"true","computed":false},"docblock":"当dialog弹出的时候是否自动获取焦点"},"locale":{"type":{"name":"object"},"required":false,"description":"自定义国际化文案对象","docblock":"自定义国际化文案对象\n@property {String} ok 确认按钮文案\n@property {String} cancel 取消按钮文案","properties":[{"name":"ok","description":"确认按钮文案","type":{"name":"String"}},{"name":"cancel","description":"取消按钮文案","type":{"name":"String"}}]},"language":{"type":{"name":"enum","value":[{"value":"'en-us'","computed":false},{"value":"'zh-cn'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"自定义国际化语言","docblock":"自定义国际化语言"},"isFullScreen":{"type":{"name":"bool"},"required":false,"description":"是否是启用使用CSS定位模式的对话框, 在该模式下面无需通过`shouldUpdatePosition`来进行重新定位。","defaultValue":{"value":"false","computed":false},"docblock":"是否是启用使用CSS定位模式的对话框, 在该模式下面无需通过`shouldUpdatePosition`来进行重新定位。"}},"methods":[],"description":"继承 Overlay 的 API，除非特别说明","subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ntitle | 对话框的标题 | any | -\nfooter | 传入底部的内容 | Boolean/String/ReactNode | -\nfooterAlign | 底部按钮的对齐方式<br><br>**可选值**:<br>'left', 'center', 'right' | Enum | 'right'\nvisible | 控制对话框是否可见 | Boolean | -\nhasMask | 是否需要mask | Boolean | true\nclosable | 'esc, mask, close', 详见[closable](#closable) | String/Boolean | 'esc,close'\nshouldUpdatePosition | 是否强制更新dialog的位置，在`isFullScreen`为true且align为`cc cc`的时候无效 | Boolean | -\nalign | 浮层自定义位置 | String/Number | 'cc cc'\nanimation | 配置动画的播放方式 | Object/Boolean | {     in: 'fadeInDown',     out: 'fadeOutUp' }\nonClose | 在点击关闭按钮的时候触发的函数<br><br>**签名**:<br>Function() => void | Function | -\nafterClose | 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void | Function | -\nonOk | 在点击Ok按钮的时候触发的函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonCancel | 在点击Cancel按钮的时候触发的函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nminMargin | 当dialog过高的时候距离viewport的最小边距,在`isFullScreen`下无效。 | Number | 40\nautoFocus | 当dialog弹出的时候是否自动获取焦点 | Boolean | true\nlocale | 自定义国际化文案对象<br><br>**属性**:<br>*ok*: {String} 确认按钮文案<br>*cancel*: {String} 取消按钮文案 | Object | -\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'en-us', 'zh-cn', 'zh-tw' | Enum | -\nisFullScreen | 是否是启用使用CSS定位模式的对话框, 在该模式下面无需通过`shouldUpdatePosition`来进行重新定位。 | Boolean | false\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"对齐方式","order":"2","jsx":"import { Dialog, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    footerAlign: \"left\",\n    visible: false\n  };\n  map = [\"left\", \"right\", \"center\"];\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n\n  onClick = () => {\n    let { footerAlign } = this.state,\n      index = this.map.indexOf(footerAlign),\n      next = index + 1;\n\n    if (next >= this.map.length) {\n      next = 0;\n    }\n    this.setState({\n      footerAlign: this.map[next]\n    });\n  };\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          onClose={this.onClose}\n          title=\"Welcome to Alibaba.com\"\n          footerAlign={this.state.footerAlign}\n        >\n          <Button onClick={this.onClick} type=\"primary\">\n            Modify footerAlign\n          </Button>\n\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n        </Dialog>\n      </span>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n通过`footerAlign`调整底部按钮的对齐方式\n\n"},{"title":"基本","order":"0","jsx":"import { Dialog, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          closable=\"esc,mask,close\"\n          onCancel={this.onClose}\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n第一个对话框\n\n"},{"title":"自定义底部","order":"1","jsx":"import { Dialog, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  render() {\n    const footer = (\n      <a onClick={this.onClose} href=\"javascript:;\">\n        Close\n      </a>\n    );\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          footer={footer}\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n默认的footer为两个按钮，你可以自定义footer的内容\n\n"},{"title":"FullScreen模式","order":"4","jsx":"import { Dialog, Button } from \"@icedesign/base\";\n\nconst content = <p>View messages from buyers & suppliers</p>;\n\nconst largeContent = [];\n\nfor (let i = 0; i < 10; i++) {\n  largeContent.push(\n    <span key={i}>\n      <h3>Your one-stop communication tool!</h3>\n      <ul>\n        <li>View messages from buyers & suppliers</li>\n        <li>Negotiate the details of your order</li>\n      </ul>\n    </span>\n  );\n}\n\nclass App extends React.Component {\n  state = {\n    visible: false,\n    content\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open Dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          isFullScreen\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <Button type=\"primary\" onClick={this.modifyContent}>\n            Modify content.\n          </Button>\n          {this.state.content}\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n      content\n    });\n  };\n\n  modifyContent = () => {\n    this.setState({\n      content: largeContent\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n设置isFullScreen为true的时候，无需通过shouldUpdatePosition进行重新定位。\n\n"},{"title":"内容较多的dialog","order":"5","jsx":"import { Dialog, Button } from \"@icedesign/base\";\n\nconst content = [];\n\nfor (let i = 0; i < 10; i++) {\n  content.push(\n    <span key={i}>\n      <h3>Your one-stop communication tool!</h3>\n      <ul>\n        <li>View messages from buyers & suppliers</li>\n        <li>Negotiate the details of your order</li>\n      </ul>\n    </span>\n  );\n}\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          shouldUpdatePosition\n          minMargin={50}\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          {content}\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n      content\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n内容很多的情况，可以通过minMargin控制边距\n\n"},{"title":"语言","order":"8","jsx":"import { Dialog, Button, LocaleProvider } from \"@icedesign/base\";\n\nconst popupConfirm = () => {\n  Dialog.confirm({\n    content: \"confirm\",\n    locale: {\n      ok: \"确认\",\n      cancel: \"取消\"\n    }\n  });\n};\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  render() {\n    return (\n      <span>\n        <Button type=\"primary\" onClick={this.onOpen}>\n          Use en-us Open\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    LocaleProvider.set(\"en-us\");\n    this.setState({\n      visible: true\n    });\n  };\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(\n  <span>\n    <Button onClick={popupConfirm}>Confirm</Button>\n    &nbsp;\n    <App />\n  </span>,\n  mountNode\n);\n\n","css":"","body":"\n示例演示了在便捷调用和JSX模式下的语言切换方式\n\n"},{"title":"层叠对话框","order":"4","jsx":"import { Dialog, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open Dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n          <App />\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n多个对话框展示。\n\n"},{"title":"延迟关闭","order":"7","jsx":"import { Button, Dialog } from \"@icedesign/base\";\n\nconst popupConfirm = () => {\n  Dialog.confirm({\n    content: \"confirm\",\n    onOk: () => {\n      return new Promise(resolve => {\n        setTimeout(resolve, 2000);\n      });\n    }\n  });\n};\n\nReactDOM.render(\n  <span>\n    <Button onClick={popupConfirm} type=\"primary\">\n      confirm\n    </Button>\n  </span>,\n  mountNode\n);\n\n","css":"","body":"\n在使用`alert`和`confirm`的时候，返回promise,可以延迟执行函数\n\n"},{"title":"简单确认框","order":"6","jsx":"import { Dialog, Button, LocaleProvider } from \"@icedesign/base\";\n\nconst popupAlert = () => {\n  Dialog.alert({\n    content: \"Alert content\",\n    closable: false,\n    title: \"Alert\",\n    onOk: () => {\n      Dialog.alert({ content: \"alert content\" });\n    }\n  });\n};\n\nconst popupConfirm = () => {\n  Dialog.confirm({\n    content: \"Confirm content\",\n    title: \"Confirm\"\n  });\n};\n\nconst setLocale = () => {\n  LocaleProvider.set(\"en-us\");\n};\n\nconst popupCustomize = () => {\n  const dialog = Dialog.alert({\n    needWrapper: false,\n    content: \"Alert content\",\n    title: \"Alert\",\n    footer: (\n      <Button type=\"primary\" onClick={() => dialog.hide()}>\n        Another button\n      </Button>\n    )\n  });\n};\n\nReactDOM.render(\n  <span>\n    <Button onClick={setLocale}>Set Locale</Button> &nbsp;\n    <Button onClick={popupAlert}>Alert</Button> &nbsp;\n    <Button onClick={popupConfirm}>Confirm</Button> &nbsp;\n    <Button onClick={popupCustomize}>Customize content & button</Button>\n  </span>,\n  mountNode\n);\n\n","css":"","body":"\nDialog提供`alert`和`confirm`两种方式进行便捷调用\n\n"},{"title":"简单确认框","order":"3","jsx":"import { Dialog, Button } from \"@icedesign/base\";\n\nconst content = <p>View messages from buyers & suppliers</p>;\n\nclass App extends React.Component {\n  state = {\n    visible: false,\n    content\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open Dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          shouldUpdatePosition\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <Button type=\"primary\" onClick={this.modifyContent}>\n            Modify content.\n          </Button>\n          {this.state.content}\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n      content\n    });\n  };\n\n  modifyContent = () => {\n    this.setState({\n      content: (\n        <div>\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n        </div>\n      )\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n通过shouldUpdatePosition更新对话框的位置\n\n"},{"title":"设置宽度等样式","order":"6","jsx":"import { Dialog, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      align: \"cc cc\",\n      style: {\n        width: \"80%\"\n      }\n    };\n  }\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.open.bind(this)} type=\"primary\">\n          Open dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose.bind(this)}\n          onCancel={this.onClose.bind(this)}\n          onClose={this.onClose.bind(this)}\n          title=\"Welcome to Alibaba.com\"\n          style={this.state.style}\n          align={this.state.align}\n        >\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n          <Button onClick={this.setPosition.bind(this)}>Set position</Button>\n        </Dialog>\n      </span>\n    );\n  }\n\n  onClose() {\n    this.setState({\n      visible: false\n    });\n  }\n\n  open() {\n    this.setState({\n      visible: true\n    });\n  }\n\n  setPosition() {\n    this.setState({\n      align: false,\n      style: {\n        top: \"10px\"\n      }\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n通过style设置dialog的宽度或者top等样式\n\n"}]},{"name":"DOM","category":"Utility","title":"DOM","importStatement":"import { DOM } from '@icedesign/base';","body":"\n\n## 使用指南\n\nDOM\n\n### 何时使用\n\n提供静态方法对 DOM 元素进行样式、事件、定位等类型的处理。\n\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本定位","order":"0","jsx":"import { dom } from \"@icedesign/base\";\n\nconst { position } = dom;\n\nclass App extends React.Component {\n  state = {\n    pinElementAlign: \"tl\",\n    baseElementAlign: \"tl\"\n  };\n\n  render() {\n    return (\n      <div className=\"basic-demo\">\n        <div className=\"cell\">\n          <div id=\"b1\" className=\"elem2\">\n            基准元素 b1\n          </div>\n          <div id=\"a1\" className=\"elem1\">\n            目标元素 a1\n          </div>\n        </div>\n        <div>\n          <h3>pinElement(目标元素 a1)</h3>\n          {this.renderRadio(\"pin\")}\n        </div>\n        <div>\n          <h3>baseElement(基准元素 b1)</h3>\n          {this.renderRadio(\"base\")}\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    position.place(\n      document.getElementById(\"a1\"),\n      document.getElementById(\"b1\"),\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  componentDidUpdate() {\n    position.place(\n      document.getElementById(\"a1\"),\n      document.getElementById(\"b1\"),\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  onPinElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      pinElementAlign: value\n    });\n  }\n\n  onBaseElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      baseElementAlign: value\n    });\n  }\n\n  renderRadio(type) {\n    const typeUpperCase = type.charAt(0).toUpperCase() + type.substring(1);\n    const onChange = this[`on${typeUpperCase}ElementAlignChange`].bind(this);\n    return [\"tl\", \"tc\", \"tr\", \"cl\", \"cc\", \"cr\", \"bl\", \"bc\", \"br\"].map(value => {\n      return (\n        <label key={value}>\n          <input\n            type=\"radio\"\n            value={value}\n            onChange={onChange}\n            checked={value == this.state[`${type}ElementAlign`]}\n          />{\" \"}\n          {value}{\" \"}\n        </label>\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".basic-demo .elem1 {\n    z-index: 99;\n    background-color: #7FBF4D;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#7FBF4D), to(#63A62F));\n    background-image: -webkit-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -moz-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -ms-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -o-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: linear-gradient(top, #7FBF4D, #63A62F);\n    border: 1px solid #63A62F;\n    border-bottom: 1px solid #5B992B;\n    box-shadow: inset 0 1px 0 0 #96CA6D;\n    color: white;\n    padding: 7px 3px 8px;\n    text-align: center;\n    text-shadow: 0 -1px 0 #4C9021;\n    opacity: 0.8;\n    width: 100px;\n}\n.basic-demo .elem2 {\n    box-sizing: border-box;\n    border: 20px solid #999;\n    background-color: #eee;\n    width: 340px;\n    height: 240px;\n    margin: 50px 0 0 100px;\n    line-height: 200px;\n    text-align: center;\n}\n","body":"\n目标元素相对基准元素的基本定位。\n\n"},{"title":"事件封装","order":"5","jsx":"import { dom } from \"@icedesign/base\";\n\nconst { events } = dom;\nconst { on, off } = events;\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { btn, inner, outter, link, btnOnce, btnOrder, btnOff } = this.refs;\n    on(btn, \"click\", function(e) {\n      console.log(this, e.target, e.currentTarget);\n    });\n\n    on(inner, \"click\", function(e) {\n      alert(\"Stop propagation!\");\n      e.stopPropagation();\n    });\n    on(outter, \"click\", function() {\n      alert(\"Stop propagation failed!\");\n    });\n\n    on(link, \"click\", function(e) {\n      alert(\"Prevent default!\");\n      e.preventDefault();\n    });\n\n    const onceHandler = function() {\n      alert(\"trigger\");\n    };\n    on(btnOnce, \"click\", onceHandler);\n    on(btnOnce, \"click\", onceHandler);\n\n    on(btnOrder, \"click\", function() {\n      alert(\"1\");\n    });\n    on(btnOrder, \"click\", function() {\n      alert(\"2\");\n    });\n\n    const removeHandler = function() {\n      alert(\"Remove event listener failed!\");\n    };\n    on(btnOff, \"click\", removeHandler).off();\n  }\n  render() {\n    return (\n      <div className=\"events-demo\">\n        <h2>Add event listener</h2>\n        <button ref=\"btn\">Click me!</button>\n        <h2>Stop propagation</h2>\n        <div ref=\"outter\" className=\"outter\">\n          Click me!\n          <div ref=\"inner\" className=\"inner\">\n            Click me!\n          </div>\n        </div>\n        <h2>Prevent default</h2>\n        <a ref=\"link\" href=\"http://www.taobao.com\">\n          Taobao\n        </a>\n        <h2>Same handler trigger once</h2>\n        <button ref=\"btnOnce\">Click me!</button>\n        <h2>Triggering order follows the registration order</h2>\n        <button ref=\"btnOrder\">Click me!</button>\n        <h2>Remove event listener</h2>\n        <button ref=\"btnOff\">Click me!</button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".events-demo .outter {\n    box-sizing: border-box;\n    color: #fff;\n    width: 200px;\n    height: 200px;\n    line-height: 50px;\n    padding: 0 50px 50px;\n    background: #999;\n    text-align: center;\n}\n\n.events-demo .inner {\n    color: #333;\n    width: 100px;\n    height: 100px;\n    line-height: 100px;\n    background: #eee;\n    text-align: center;\n}\n","body":"\n"},{"title":"fixed 类型的定位","order":"3","jsx":"import { dom } from \"@icedesign/base\";\n\nconst { position } = dom;\nclass App extends React.Component {\n  state = {\n    pinElementAlign: \"tl\",\n    baseElementAlign: \"tl\"\n  };\n\n  render() {\n    return (\n      <div className=\"fixed-demo\">\n        <div id=\"a4\" className=\"elem1\">\n          目标元素 a4\n        </div>\n        <div>\n          <h3>pinElement(目标元素 a4)</h3>\n          {this.renderRadio(\"pin\")}\n        </div>\n        <div>\n          <h3>baseElement(window)</h3>\n          {this.renderRadio(\"base\")}\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    position.place(\n      document.getElementById(\"a4\"),\n      position.VIEWPORT,\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  componentDidUpdate() {\n    position.place(\n      document.getElementById(\"a4\"),\n      position.VIEWPORT,\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  onPinElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      pinElementAlign: value\n    });\n  }\n\n  onBaseElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      baseElementAlign: value\n    });\n  }\n\n  renderRadio(type) {\n    const typeUpperCase = type.charAt(0).toUpperCase() + type.substring(1);\n    const onChange = this[`on${typeUpperCase}ElementAlignChange`].bind(this);\n    return [\"tl\", \"tc\", \"tr\", \"cl\", \"cc\", \"cr\", \"bl\", \"bc\", \"br\"].map(value => {\n      return (\n        <label key={value}>\n          <input\n            type=\"radio\"\n            value={value}\n            onChange={onChange}\n            checked={value == this.state[`${type}ElementAlign`]}\n          />{\" \"}\n          {value}{\" \"}\n        </label>\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".fixed-demo .elem1 {\n    z-index: 99;\n    background-color: #7FBF4D;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#7FBF4D), to(#63A62F));\n    background-image: -webkit-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -moz-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -ms-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -o-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: linear-gradient(top, #7FBF4D, #63A62F);\n    border: 1px solid #63A62F;\n    border-bottom: 1px solid #5B992B;\n    box-shadow: inset 0 1px 0 0 #96CA6D;\n    color: white;\n    padding: 7px 3px 8px;\n    text-align: center;\n    text-shadow: 0 -1px 0 #4C9021;\n    opacity: 0.8;\n    width: 100px;\n    position: fixed;\n}\n","body":"\n目标元素为 fixed 时的定位。\n\n"},{"title":"自动调整定位","order":"2","jsx":"import { dom } from \"@icedesign/base\";\n\nconst { position } = dom;\nclass App extends React.Component {\n  state = {\n    pinElementAlign: \"tl\",\n    baseElementAlign: \"tl\"\n  };\n\n  render() {\n    return (\n      <div className=\"adjust-demo\">\n        <div className=\"cell\">\n          <div className=\"ele-wrapper\">\n            <div id=\"a3\" className=\"elem1\">\n              目标元素 a3\n            </div>\n            <div id=\"b3\" className=\"elem2\">\n              基准元素 b3\n            </div>\n          </div>\n        </div>\n        <div>\n          <h3>pinElement(目标元素 a3)</h3>\n          {this.renderRadio(\"pin\")}\n        </div>\n        <div>\n          <h3>baseElement(基准元素 b3)</h3>\n          {this.renderRadio(\"base\")}\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    console.log(\n      position.place(\n        document.getElementById(\"a3\"),\n        document.getElementById(\"b3\"),\n        this.state.pinElementAlign + \" \" + this.state.baseElementAlign,\n        [0, 0],\n        true\n      )\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(\n      position.place(\n        document.getElementById(\"a3\"),\n        document.getElementById(\"b3\"),\n        this.state.pinElementAlign + \" \" + this.state.baseElementAlign,\n        [0, 0],\n        true\n      )\n    );\n  }\n\n  onPinElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      pinElementAlign: value\n    });\n  }\n\n  onBaseElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      baseElementAlign: value\n    });\n  }\n\n  renderRadio(type) {\n    const typeUpperCase = type.charAt(0).toUpperCase() + type.substring(1);\n    const onChange = this[`on${typeUpperCase}ElementAlignChange`].bind(this);\n    return [\"tl\", \"tc\", \"tr\", \"cl\", \"cc\", \"cr\", \"bl\", \"bc\", \"br\"].map(value => {\n      return (\n        <label key={value}>\n          <input\n            type=\"radio\"\n            value={value}\n            onChange={onChange}\n            checked={value == this.state[`${type}ElementAlign`]}\n          />{\" \"}\n          {value}{\" \"}\n        </label>\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".adjust-demo .elem1 {\n    z-index: 99;\n    background-color: #7FBF4D;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#7FBF4D), to(#63A62F));\n    background-image: -webkit-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -moz-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -ms-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -o-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: linear-gradient(top, #7FBF4D, #63A62F);\n    border: 1px solid #63A62F;\n    border-bottom: 1px solid #5B992B;\n    box-shadow: inset 0 1px 0 0 #96CA6D;\n    color: white;\n    padding: 7px 3px 8px;\n    text-align: center;\n    text-shadow: 0 -1px 0 #4C9021;\n    opacity: 0.8;\n    width: 100px;\n    height: 200px;\n}\n.adjust-demo .elem2 {\n    border: 1px solid #999;\n    background-color: #eee;\n    width: 300px;\n    height: 30px;\n    margin: 50px 0 0 100px;\n    line-height: 200px;\n    text-align: center;\n}\n.adjust-demo .ele-wrapper {\n    position: relative;\n    margin: 20px 20px 60px;\n    border: 2px red solid;\n    padding: 10px;\n}\n","body":"\n为不让目标元素超出当前可视区域，可设置 needAdjust 参数为 true ，定位时会自动调整目标元素的定位方向。\n\n"},{"title":"offsetParent","order":"1","jsx":"import { dom } from \"@icedesign/base\";\n\nconst { position } = dom;\nclass App extends React.Component {\n  state = {\n    pinElementAlign: \"tl\",\n    baseElementAlign: \"tl\"\n  };\n\n  render() {\n    return (\n      <div className=\"offset-demo\">\n        <div className=\"cell\">\n          <div className=\"ele-wrapper\">\n            <div id=\"a2\" className=\"elem1\">\n              目标元素 a2\n            </div>\n          </div>\n          <div id=\"b2\" className=\"elem2\">\n            基准元素 b2\n          </div>\n        </div>\n        <div>\n          <h3>pinElement(目标元素 a2)</h3>\n          {this.renderRadio(\"pin\")}\n        </div>\n        <div>\n          <h3>baseElement(基准元素 b2)</h3>\n          {this.renderRadio(\"base\")}\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    position.place(\n      document.getElementById(\"a2\"),\n      document.getElementById(\"b2\"),\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  componentDidUpdate() {\n    position.place(\n      document.getElementById(\"a2\"),\n      document.getElementById(\"b2\"),\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  onPinElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      pinElementAlign: value\n    });\n  }\n\n  onBaseElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      baseElementAlign: value\n    });\n  }\n\n  renderRadio(type) {\n    const typeUpperCase = type.charAt(0).toUpperCase() + type.substring(1);\n    const onChange = this[`on${typeUpperCase}ElementAlignChange`].bind(this);\n    return [\"tl\", \"tc\", \"tr\", \"cl\", \"cc\", \"cr\", \"bl\", \"bc\", \"br\"].map(value => {\n      return (\n        <label key={value}>\n          <input\n            type=\"radio\"\n            value={value}\n            onChange={onChange}\n            checked={value == this.state[`${type}ElementAlign`]}\n          />{\" \"}\n          {value}{\" \"}\n        </label>\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".offset-demo .elem1 {\n    z-index: 99;\n    background-color: #7FBF4D;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#7FBF4D), to(#63A62F));\n    background-image: -webkit-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -moz-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -ms-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -o-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: linear-gradient(top, #7FBF4D, #63A62F);\n    border: 1px solid #63A62F;\n    border-bottom: 1px solid #5B992B;\n    box-shadow: inset 0 1px 0 0 #96CA6D;\n    color: white;\n    padding: 7px 3px 8px;\n    text-align: center;\n    text-shadow: 0 -1px 0 #4C9021;\n    opacity: 0.8;\n    width: 100px;\n}\n.offset-demo .elem2 {\n    box-sizing: border-box;\n    border: 20px solid #999;\n    background-color: #eee;\n    width: 340px;\n    height: 240px;\n    margin: 50px 0 0 100px;\n    line-height: 200px;\n    text-align: center;\n}\n.offset-demo .ele-wrapper {\n    position: relative;\n    margin: 20px;\n    border: 2px red solid;\n    padding: 20px;\n}\n","body":"\n当目标元素的 offsetParent 不为 body 时的定位。\n\n"},{"title":"相对 Viewport 的定位","order":"4","jsx":"import { dom } from \"@icedesign/base\";\n\nconst { position } = dom;\nclass App extends React.Component {\n  state = {\n    pinElementAlign: \"tl\",\n    baseElementAlign: \"tl\"\n  };\n\n  render() {\n    return (\n      <div className=\"viewport-demo\">\n        <div className=\"cell\">\n          <div className=\"ele-wrapper\">\n            <div id=\"a5\" className=\"elem1\">\n              目标元素 a5\n            </div>\n          </div>\n        </div>\n        <div>\n          <h3>pinElement(目标元素 a5)</h3>\n          {this.renderRadio(\"pin\")}\n        </div>\n        <div>\n          <h3>baseElement(viewport)</h3>\n          {this.renderRadio(\"base\")}\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    console.log(\n      position.place(\n        document.getElementById(\"a5\"),\n        position.VIEWPORT,\n        this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n      )\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(\n      position.place(\n        document.getElementById(\"a5\"),\n        position.VIEWPORT,\n        this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n      )\n    );\n  }\n\n  onPinElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      pinElementAlign: value\n    });\n  }\n\n  onBaseElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      baseElementAlign: value\n    });\n  }\n\n  renderRadio(type) {\n    const typeUpperCase = type.charAt(0).toUpperCase() + type.substring(1);\n    const onChange = this[`on${typeUpperCase}ElementAlignChange`].bind(this);\n    return [\"tl\", \"tc\", \"tr\", \"cl\", \"cc\", \"cr\", \"bl\", \"bc\", \"br\"].map(value => {\n      return (\n        <label key={value}>\n          <input\n            type=\"radio\"\n            value={value}\n            onChange={onChange}\n            checked={value == this.state[`${type}ElementAlign`]}\n          />{\" \"}\n          {value}{\" \"}\n        </label>\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".viewport-demo .elem1 {\n    z-index: 99;\n    background-color: #7FBF4D;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#7FBF4D), to(#63A62F));\n    background-image: -webkit-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -moz-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -ms-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -o-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: linear-gradient(top, #7FBF4D, #63A62F);\n    border: 1px solid #63A62F;\n    border-bottom: 1px solid #5B992B;\n    box-shadow: inset 0 1px 0 0 #96CA6D;\n    color: white;\n    padding: 7px 3px 8px;\n    text-align: center;\n    text-shadow: 0 -1px 0 #4C9021;\n    opacity: 0.8;\n    width: 100px;\n}\n.viewport-demo .ele-wrapper {\n    position: relative;\n    margin: 20px 20px 60px;\n    border: 2px red solid;\n    padding: 20px;\n}\n","body":"\n目标元素相对 viewport 的定位。\n\n"}]},{"name":"Dropdown","category":"Components","title":"下拉菜单","type":"弹层","importStatement":"import { Dropdown } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。\n\n","propsSchema":{"name":"Dropdown","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"弹层内容","docblock":"弹层内容"},"visible":{"type":{"name":"bool"},"required":false,"description":"弹层当前是否可见","docblock":"弹层当前是否可见"},"defaultVisible":{"type":{"name":"bool"},"required":false,"description":"弹层默认是否可见","defaultValue":{"value":"false","computed":false},"docblock":"弹层默认是否可见"},"onVisibleChange":{"type":{"name":"func"},"required":false,"description":"弹层在显示和隐藏时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层在显示和隐藏时触发的回调函数\n@param {Boolean} visible 弹层是否显示\n@param {String} type 触发弹层显示和隐藏的来源\n@param {Object} event 事件对象","params":[{"name":"visible","description":"弹层是否显示","type":{"name":"Boolean"}},{"name":"type","description":"触发弹层显示和隐藏的来源","type":{"name":"String"}},{"name":"event","description":"事件对象","type":{"name":"Object"}}],"returns":null},"trigger":{"type":{"name":"node"},"required":false,"description":"触发弹层显示或者隐藏的元素","docblock":"触发弹层显示或者隐藏的元素"},"triggerType":{"type":{"name":"enum","value":[{"value":"'hover'","computed":false},{"value":"'click'","computed":false},{"value":"'focus'","computed":false}]},"required":false,"description":"触发弹层显示或者隐藏的事件","defaultValue":{"value":"'hover'","computed":false},"docblock":"触发弹层显示或者隐藏的事件"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用，如果设置为true，那么trigger不能触发弹层的显示或隐藏","defaultValue":{"value":"false","computed":false},"docblock":"是否禁用，如果设置为true，那么trigger不能触发弹层的显示或隐藏"},"align":{"type":{"name":"string"},"required":false,"description":"弹层相对于trigger的定位, 详见[Overlay的定位部分](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=overlay#demo-guide)","defaultValue":{"value":"'tl bl'","computed":false},"docblock":"弹层相对于trigger的定位, 详见[Overlay的定位部分](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=overlay#demo-guide)"},"offset":{"type":{"name":"array"},"required":false,"description":"弹层相对于trigger的定位的微调","defaultValue":{"value":"[0, 0]","computed":false},"docblock":"弹层相对于trigger的定位的微调"},"delay":{"type":{"name":"number"},"required":false,"description":"悬浮状态下延时时间","defaultValue":{"value":"200","computed":false},"docblock":"悬浮状态下延时时间"},"autoFocus":{"type":{"name":"bool"},"required":false,"description":"弹层弹出后是否自动获取焦点","defaultValue":{"value":"true","computed":false},"docblock":"弹层弹出后是否自动获取焦点"},"hasMask":{"type":{"name":"bool"},"required":false,"description":"是否带有遮罩","defaultValue":{"value":"false","computed":false},"docblock":"是否带有遮罩\n@type {Boolean}"},"cache":{"type":{"name":"bool"},"required":false,"description":"在弹层隐藏后是否保留当前的DOM","defaultValue":{"value":"false","computed":false},"docblock":"在弹层隐藏后是否保留当前的DOM"},"beforeOpen":{"type":{"name":"func"},"required":false,"description":"弹层显示前触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层显示前触发的回调函数","params":[],"returns":null},"afterOpen":{"type":{"name":"func"},"required":false,"description":"弹层显示后触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层显示后触发的回调函数","params":[],"returns":null},"beforeClose":{"type":{"name":"func"},"required":false,"description":"弹层关闭前触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层关闭前触发的回调函数","params":[],"returns":null},"afterClose":{"type":{"name":"func"},"required":false,"description":"弹层关闭后触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层关闭后触发的回调函数","params":[],"returns":null},"onPosition":{"type":{"name":"func"},"required":false,"description":"弹层定位完成后触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层定位完成后触发的回调函数\n@param {Object} config 定位的参数\n@param {Object} node 定位的元素","params":[{"name":"config","description":"定位的参数","type":{"name":"Object"}},{"name":"node","description":"定位的元素","type":{"name":"Object"}}],"returns":null},"animation":{"type":{"name":"union","value":[{"name":"bool"},{"name":"object"}]},"required":false,"description":"动画的配置，如果设置为false，将关闭动画","defaultValue":{"value":"{\n    in: 'expandInDown',\n    out: 'expandOutUp'\n}","computed":false},"docblock":"动画的配置，如果设置为false，将关闭动画"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 弹层内容 | ReactNode | -\nvisible | 弹层当前是否可见 | Boolean | -\ndefaultVisible | 弹层默认是否可见 | Boolean | false\nonVisibleChange | 弹层在显示和隐藏时触发的回调函数<br><br>**签名**:<br>Function(visible: Boolean, type: String, event: Object) => void<br>**参数**:<br>*visible*: {Boolean} 弹层是否显示<br>*type*: {String} 触发弹层显示和隐藏的来源<br>*event*: {Object} 事件对象 | Function | () =&gt; {}\ntrigger | 触发弹层显示或者隐藏的元素 | ReactNode | -\ntriggerType | 触发弹层显示或者隐藏的事件<br><br>**可选值**:<br>'hover', 'click', 'focus' | Enum | 'hover'\ndisabled | 是否禁用，如果设置为true，那么trigger不能触发弹层的显示或隐藏 | Boolean | false\nalign | 弹层相对于trigger的定位, 详见[Overlay的定位部分](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=overlay#demo-guide) | String | 'tl bl'\noffset | 弹层相对于trigger的定位的微调 | Array | [0, 0]\ndelay | 悬浮状态下延时时间 | Number | 200\nautoFocus | 弹层弹出后是否自动获取焦点 | Boolean | true\nhasMask | 是否带有遮罩 | Boolean | false\ncache | 在弹层隐藏后是否保留当前的DOM | Boolean | false\nbeforeOpen | 弹层显示前触发的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterOpen | 弹层显示后触发的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nbeforeClose | 弹层关闭前触发的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterClose | 弹层关闭后触发的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonPosition | 弹层定位完成后触发的回调函数<br><br>**签名**:<br>Function(config: Object, node: Object) => void<br>**参数**:<br>*config*: {Object} 定位的参数<br>*node*: {Object} 定位的元素 | Function | () =&gt; {}\nanimation | 动画的配置，如果设置为false，将关闭动画 | Boolean/Object | {     in: 'expandInDown',     out: 'expandOutUp' }\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Dropdown, Menu } from \"@icedesign/base\";\n\nconst menu = (\n  <Menu>\n    <Menu.Item>Option 1</Menu.Item>\n    <Menu.Item>Option 2</Menu.Item>\n    <Menu.Item>Option 3</Menu.Item>\n    <Menu.Item>Option 4</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <Dropdown\n    trigger={<a>Hello dropdown</a>}\n    afterOpen={() => console.log(\"after open\")}\n  >\n    {menu}\n  </Dropdown>,\n  mountNode\n);\n\n","css":"","body":"\n最简单的用法。\n\n"},{"title":"从弹层外关闭","order":"2","jsx":"import { Dropdown, Menu, Button } from \"@icedesign/base\";\n\nconst menu = (\n  <Menu>\n    <Menu.Item>Option 1</Menu.Item>\n    <Menu.Item>Option 2</Menu.Item>\n    <Menu.Item>Option 3</Menu.Item>\n    <Menu.Item>Option 4</Menu.Item>\n  </Menu>\n);\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  toggleVisible = () => {\n    this.setState({\n      visible: !this.state.visible\n    });\n  };\n\n  onVisibleChange = visible => {\n    this.setState({\n      visible\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={{ marginBottom: \"20px\" }}>\n          <Button onClick={this.toggleVisible} ref=\"button\">\n            切换弹层的显示隐藏\n          </Button>\n        </div>\n        <Dropdown\n          trigger={<span>Hello dropdown</span>}\n          triggerType=\"click\"\n          visible={this.state.visible}\n          onVisibleChange={this.onVisibleChange}\n          safeNode={() => this.refs.button}\n        >\n          {menu}\n        </Dropdown>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n使用 visible 属性控制弹层显示或者隐藏，需要使用 safeNode 将其控制的元素告诉 dropdown 组件。\n\n"},{"title":"触发的事件类型","order":"1","jsx":"import { Dropdown, Menu } from \"@icedesign/base\";\n\nconst menu = (\n  <Menu>\n    <Menu.Item>Option 1</Menu.Item>\n    <Menu.Item>Option 2</Menu.Item>\n    <Menu.Item>Option 3</Menu.Item>\n    <Menu.Item>Option 4</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <Dropdown trigger={<a>Click me</a>} triggerType=\"click\">\n    {menu}\n  </Dropdown>,\n  mountNode\n);\n\n","css":"","body":"\n使用 triggerType 设置触发的事件类型。\n\n"}]},{"name":"Feedback","category":"Components","title":"反馈","type":"展示","importStatement":"import { Feedback } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n用户在进行操作行为后（例如：输入、提交），系统对该操作行为内容作出的判断和校验反馈。\n\n-   成功：用户操作已成功。例如：宝贝发布成功。\n-   提示：需要用户知道采取行动的事件。例如：宝贝即将过期。\n-   错误：用户操作已失效或是需要马上采取行动的问题。例如：宝贝已经失效，提交失败。\n\n","propsSchema":{"name":"Feedback","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"type":{"type":{"name":"enum","value":[{"value":"'success'","computed":false},{"value":"'error'","computed":false},{"value":"'prompt'","computed":false},{"value":"'help'","computed":false},{"value":"'loading'","computed":false}]},"required":false,"description":"反馈类型","defaultValue":{"value":"'success'","computed":false},"docblock":"反馈类型"},"shape":{"type":{"name":"enum","value":[{"value":"'inline'","computed":false},{"value":"'addon'","computed":false},{"value":"'toast'","computed":false}]},"required":false,"description":"反馈外观","defaultValue":{"value":"'inline'","computed":false},"docblock":"反馈外观"},"size":{"type":{"name":"enum","value":[{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"反馈大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"反馈大小"},"title":{"type":{"name":"node"},"required":false,"description":"标题","defaultValue":{"value":"''","computed":false},"docblock":"标题"},"children":{"type":{"name":"node"},"required":false,"description":"内容","docblock":"内容"},"visible":{"type":{"name":"bool"},"required":false,"description":"是否显示","defaultValue":{"value":"true","computed":false},"docblock":"是否显示"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ntype | 反馈类型<br><br>**可选值**:<br>'success', 'error', 'prompt', 'help', 'loading' | Enum | 'success'\nshape | 反馈外观<br><br>**可选值**:<br>'inline', 'addon', 'toast' | Enum | 'inline'\nsize | 反馈大小<br><br>**可选值**:<br>'medium', 'large' | Enum | 'medium'\ntitle | 标题 | ReactNode | ''\nchildren | 内容 | ReactNode | -\nvisible | 是否显示 | Boolean | true\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"反馈外观","order":"1","jsx":"import { Feedback, Select } from \"@icedesign/base\";\n\nconst Option = Select.Option;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shape: \"inline\"\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleSelect(shape) {\n    this.setState({ shape });\n  }\n\n  render() {\n    const { shape } = this.state;\n\n    let types;\n    if (shape === \"toast\") {\n      types = [\"success\", \"prompt\", \"error\", \"help\", \"loading\"];\n    } else {\n      types = [\"success\", \"prompt\", \"error\"];\n    }\n\n    return (\n      <div className=\"feedback-shape-demo\">\n        <span className=\"demo-label\">请选择Shape：</span>\n        <Select defaultValue=\"inline\" onChange={this.handleSelect}>\n          <Option value=\"inline\">Inline</Option>\n          <Option value=\"addon\">Addon</Option>\n          <Option value=\"toast\">Toast</Option>\n        </Select>\n\n        {types.map(type => (\n          <Feedback key={type} title=\"title\" type={type} shape={shape}>\n            Content Content Content Content\n          </Feedback>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".feedback-shape-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 28px;\n    line-height: 28px;\n}\n\n.feedback-shape-demo .next-feedback {\n    margin-top: 10px;\n}\n\n.feedback-shape-demo .next-feedback.next-feedback-toast {\n    position: relative !important;\n}\n","body":"\n反馈组件通过设置`shape`为`inline`、`addon`、`toast`，可分别创建有背景，无背景以及弹出的反馈组件，`shape`默认值为`inline`。\n\n"},{"title":"反馈尺寸","order":"2","jsx":"import { Feedback, Select } from \"@icedesign/base\";\n\nconst Option = Select.Option;\n\nconst types = [\"success\", \"prompt\", \"error\"];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: \"medium\"\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleSelect(size) {\n    this.setState({ size });\n  }\n\n  render() {\n    const { size } = this.state;\n\n    return (\n      <div className=\"feedback-size-demo\">\n        <span className=\"demo-label\">请选择Size：</span>\n        <Select defaultValue=\"medium\" onChange={this.handleSelect}>\n          <Option value=\"medium\">Medium</Option>\n          <Option value=\"large\">Large</Option>\n        </Select>\n\n        {types.map(type => (\n          <Feedback key={type} title=\"title\" type={type} size={size}>\n            Content Content Content Content\n          </Feedback>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".feedback-size-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 28px;\n    line-height: 28px;\n}\n\n.feedback-size-demo .next-feedback {\n    margin-top: 10px;\n}\n","body":"\n反馈组件通过设置`size`为`medium`、`large`，可以分别创建中等尺寸以及大尺寸的反馈组件。\n\n"},{"title":"弹窗便捷方法","order":"4","jsx":"import { Feedback, Button } from \"@icedesign/base\";\n\nconst Toast = Feedback.toast;\n\nconst showSuccess = () => Toast.success(\"success 快捷调用\");\nconst showPrompt = () => Toast.prompt(\"prompt 快捷调用\");\nconst showError = () => Toast.error(\"error 快捷调用\");\nconst showHelp = () => Toast.help(\"help 快捷调用\");\nconst showLoading = () => Toast.loading(\"loading 快捷调用\");\n\nReactDOM.render(\n  <div className=\"feedback-toast-quick-demo\">\n    <Button onClick={showSuccess}>success 快捷调用</Button>\n    <Button onClick={showPrompt}>prompt 快捷调用</Button>\n    <Button onClick={showError}>error 快捷调用</Button>\n    <Button onClick={showHelp}>help 快捷调用</Button>\n    <Button onClick={showLoading}>loading 快捷调用</Button>\n  </div>,\n  mountNode\n);\n\n","css":".feedback-toast-quick-demo .next-btn.next-btn-medium {\n    margin-right: 10px;\n    margin-bottom: 10px;\n}\n","body":"\n可以通过`Feedback.toast.success`、`Feedback.toast.prompt`、`Feedback.toast.error`方法来方便的显示指定类型的反馈弹窗。\n\n"},{"title":"弹窗用法","order":"3","jsx":"import { Feedback, Button } from \"@icedesign/base\";\n\nconst Toast = Feedback.toast;\n\nconst show = () => {\n  Toast.show({\n    type: \"loading\",\n    content: \"将在3秒后关闭或手动点击关闭按钮\",\n    afterClose: () => console.log(\"Closed the toast\")\n  });\n};\nconst hide = () => Toast.hide();\n\nReactDOM.render(\n  <div className=\"feedback-toast-demo\">\n    <Button onClick={show}>显示</Button>\n    <Button onClick={hide}>关闭</Button>\n  </div>,\n  mountNode\n);\n\n","css":".feedback-toast-demo .next-btn.next-btn-medium {\n    margin-right: 10px;\n}\n","body":"\n可以通过`Feedback.toast.show`和`Feedback.toast.hide`方法来方便的显示或隐藏反馈弹窗。\n\n"},{"title":"反馈类型","order":"0","jsx":"import { Feedback } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div className=\"feedback-type-demo\">\n    <Feedback title=\"title\">Content Content Content Content</Feedback>\n    <Feedback title=\"title\" type=\"prompt\">\n      Content Content Content Content\n    </Feedback>\n    <Feedback title=\"title\" type=\"error\">\n      Content Content Content Content\n    </Feedback>\n  </div>,\n  mountNode\n);\n\n","css":".feedback-type-demo .next-feedback {\n    margin-bottom: 10px;\n}\n","body":"\n反馈组件通过设置`type`为`success`、`prompt`、`error`、`help`、`loading`，可分别创建类型为成功、提示、错误、帮助以及加载中的反馈组件，`type`默认值为`success`。\n\n"}]},{"name":"Field","category":"Components","title":"表单数据获取、校验工具","type":"表单","importStatement":"import { Field } from '@icedesign/base';","body":"\n\n## 开发指南\n\n### 何时使用\n\n涉及到表单数据操作、校验的地方都可以用Field来管理数据。和组件关联后可以自动对表单数据进行回写、读取、校验。\n\n### 使用注意\n\n- 使用Field `init` 过的组件，请勿再定义 `ref` `value` `onChange` 事件, 有可能被 init 覆盖。\n- `Form`已经和`Field` 在`数据获取`和`自动校验提示`方面做了深度优化，建议在`Form`中使用`Field`, 请查看 Form demo。\n- initValue 只有在组件第一次render的时候才生效(ajax异步调用设置initValue可能已经错过了第一次render)，这点类似于defauValue\n\n### 基本使用\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);    // 实例创建\n\n    onClick = ()=>{\n        console.log(this.field.getValue('name'));\n    }\n    render() {\n        const init = this.field.init;\n\n        // 注意：initVaue只会在组件第一次初始化的时候被赋值，如果你是异步赋值请用setValue\n        return <div>\n            <Input {...init('name',{initValue:'first value'})} />\n            <button onClick={this.onClick>获取数据</button>\n        </div>\n    }\n}\n```\n\n### 更新数据\n#### 事件更新\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    onClick = ()=>{\n        this.field.setValue('name', 'newvalue');    // 赋值会自动触发render\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n            <button onClick={this.onClick}>设置数据</button>\n        </div>\n    }\n}\n```\n\n#### props更新\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    // 在组件挂载之前把数据设置进去(可以用initValue替代这种用法)\n    componentWillMount() {\n        this.field.setValue('name', 'init Name')\n    }\n    // 接收来自props的数据\n    componentWillReceiveProps(nextProps) {\n        this.field.setValue('name', nextProps.name)\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n        </div>\n    }\n}\n```\n\n#### ajax更新\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    onClick = ()=>{\n        Ajax({\n            url:'/demo.json',\n            success:(json)=>{\n                // 回调事件中赋值更新\n                this.field.setValue('name',json.name);\n            }\n        });\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n            <button onClick={this.onClick}>设置数据</button>\n        </div>\n    }\n}\n```\n\n#### onChange更新监控\n两种用法：\n1. 统一管理\n\n```\nclass Demo extends React.Component {\n    field = new Field(this,{\n        onChange:(name, value) => {\n          switch(name) {\n            case 'name1':\n              this.field.setValue('name2','value set by name1');\n              break;\n            case 'name2':\n              this.field.setValue('name1','value set by name2');\n              break;\n          }\n        }\n    });\n    render() {\n        const init = this.field.init;\n\n        return <div>\n          <Input {...init('name1')} />\n          <Input {...init('name2')} />\n        </div>\n    }\n}\n```\n\n2. 各自管理\n\n```\nclass Demo extends React.Component {\n    render() {\n        const init = this.field.init;\n\n        return <div>\n          <Input {...init('name1',{\n              props:{\n                onChange:(v)=>{\n                  this.field.setValue('name2','value set by name1');\n                }\n              }\n            })} />\n          <Input {...init('name2',{\n              props:{\n                onChange:(v)=>{\n                  this.field.setValue('name1','value set by name2');\n                }\n              }\n            })} />\n        </div>\n    }\n}\n```\n\n详细请查看demo演示 `关联控制`\n\n","propsSchema":{},"propsREADME":"","methodREADME":["### 初始化\n\n```js\nlet myfield = new Field(this [,options]);\n```\n\n| 参数    | 说明                       | 类型            | 可选值   | 默认值 |\n| ------- | -------------------------- | --------------- | -------- | ------ |\n| this    | 传入调用 class 的 this     | React.Component | 必须设置 |        |\n| options | 一些事件配置, 详细参数如下 | React.Component | 非必须   |        |\n\n`options` 配置项\n\n| 参数               | 说明                                                                                                                                    | 类型                 | 默认值                      |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------- | -------------------- | --------------------------- |\n| onChange           | 所有组件的 change 都会到达这里[setValue 不会触发该函数]                                                                                 | Function(name,value) |                             |\n| parseName          | 是否翻译`init(name)`中的`name`(getValues 会把带`.`的字符串转换成对象)                                                                   | Boolean              | false                       |\n| forceUpdate        | 仅建议 PureComponent 的组件打开此强制刷新功能，会带来性能问题(500 个组件为例：打开的时候 render 花费 700ms, 关闭时候 render 花费 400ms) | Boolean              | false                       |\n| scrollToFirstError | field.validate 的时候滚动到第一个出错的组件                                                                                             | Boolean              | false (1.0 版本会改成 true) |\n| autoUnmount        | 自动删除(remove) Unmout 元素, getValues 不会出现冗余数据                                                                                | Boolean              | false (1.0 版本会改成 true) |\n| deepReset          | 强制重置数据(设置所有数据为 undefined，业务组件需要自己支持 value=undefined 情况清空数据)(版本要求>next@0.15)                           | Boolean              | false (1.0 版本会改成 true) |\n\n#### API 接口\n\n`new`之后的对象提供的 api 接口 （例：`myfield.getValues()`）(`set` 开头的 api 函数不要在 render 里面操作, 可能会触发死循环)\n\n| 参数      | 说明                                                                     | 类型                                                                               | 可选值                            | 默认值              |\n| --------- | ------------------------------------------------------------------------ | ---------------------------------------------------------------------------------- | --------------------------------- | ------------------- |\n| init      | 初始化每个组件，[详细参数如下](#init)）                                  | Function(name:String, option:Object)                                               |                                   |                     |\n| getValues | 获取一组输入控件的值，如不传入参数，则获取全部组件的值                   | Function([names: String[]])                                                        |                                   |                     |\n| getValue  | 获取单个输入控件的值                                                     | Function(name: String)                                                             |                                   |                     |\n| setValues | 设置一组输入控件的值（会触发 render，请遵循 react 时机使用)              | Function(obj: Object)                                                              |                                   |                     |\n| setValue  | 设置单个输入控件的值 （会触发 render，请遵循 react 时机使用)             | Function(name: String, value)                                                      |                                   |                     |\n| validate  | 校验并获取一组输入域的值与 Error                                         | Function([names: String[]], [options: Object], callback: Function(errors, values)) |                                   |                     |\n| getError  | 获取单个输入控件的 Error                                                 | Function(name: String)                                                             |                                   |                     |\n| getErrors | 获取一组输入控件的 Error                                                 | Function([name: String])                                                           |                                   |                     |\n| setError  | 设置单个输入控件的 Error                                                 | Function(name: String, errors:String/Array[String])                                |                                   |                     |\n| setErrors | 设置一组输入控件的 Error                                                 | Function(obj: Object)                                                              |                                   |                     |\n| reset     | 重置一组输入控件的值、清空校验, 第二个参数控制是否回到 defaultValue      | Function([names: String[]], backToDefault:Boolean)                                 |                                   | backToDefault=false |\n| getState  | 判断校验状态                                                             | Function(name: String)                                                             | 'error' 'success' 'validating' '' | ''                  |\n| getNames  | 获取所有组件的 key                                                       | Function()                                                                         |                                   |                     |\n| remove    | 删除某一个或者一组控件的数据，删除后与之相关的 validate/value 都会被清空 | Function(name: String/String[])                                                    |                                   |                     |\n\n#### init\n\n```js\ninit(name, options);\n```\n\n| 参数                      | 说明                                                                                          | 类型                                               | 可选值 | 默认值     |\n| ------------------------- | --------------------------------------------------------------------------------------------- | -------------------------------------------------- | ------ | ---------- |\n| name                      | 必填输入控件唯一标志                                                                          | String                                             |        |            |\n| options.valueName         | 组件值的属性名称，如 Checkbox 的是 `checked`，Input 是 `value`                                | String                                             |        | 'value'    |\n| options.initValue         | 组件初始值(组件第一次 render 的时候才会读取，后面再修改此值无效),类似 defaultValue            | any                                                |        |            |\n| options.trigger           | 触发数据变化的事件名称                                                                        | String                                             |        | 'onChange' |\n| options.rules             | 校验规则                                                                                      | Array/Object                                       |        |            |  |\n| options.props             | 组件自定义的事件可以写在这里，其他会透传(小包版本^0.3.0 支持，大包^0.7.0 支持)                | Object                                             |        |            |  |\n| options.getValueFromEvent | 自定义从`onChange`事件中获取 value 的方式，一般不需要设置. 详细用法查看 demo `自定义数据获取` | Function(value,...args) 参数顺序和组件是完全一致的 |        |            |  |\n\n返回值\n\n```js\n{\n  id, value, onChange;\n}\n```\n\n#### rules\n\n```js\n{\n  rules: [{ required: true }];\n}\n```\n\n多个 rule\n\n```js\n{\n  rules: [\n    { required: true, trigger: 'onBlur' },\n    { pattern: /abcd/, message: 'abcd不能缺' },\n    {\n      validator: (rule, value, callback) => {\n        callback('出错了');\n      }\n    }\n  ];\n}\n```\n\n| 参数       | 说明                                                                                                                                                                                                                   | 类型                                                    | 可选值                     | 默认值   |\n| ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------- | -------------------------- | -------- |\n| required   | 不能为空 (不能和`pattern`同时使用)                                                                                                                                                                                     | Boolean                                                 | true                       |          |\n| message    | 出错时候信息                                                                                                                                                                                                           | String                                                  |                            |          |\n| type       | 被校验数据类型(注意 `type:'number'` 表示数据类型为`Number`,而不是字符串形式的数字,字符串形式的数字请用`pattern:/^[0-9]*$/`) <a href=\"https://github.com/yiminghe/async-validator#rules\" target=\"_blank\">详细文档见</a> | String                                                  | String/Array/url/email/... | String   |\n| pattern    | 校验正则表达式                                                                                                                                                                                                         | 正则表达式（例如：`/^[0-9]*$/`表示字符串形式的 number） |                            |          |\n| len        | 长度校验，如果 max、mix 混合配置，len 的优先级最高                                                                                                                                                                     | Number                                                  |                            |          |\n| min        | 字符最小长度                                                                                                                                                                                                           | Number                                                  |                            |          |\n| max        | 字符最大长度                                                                                                                                                                                                           | Number                                                  |                            |          |\n| whitespace | 是否进行空白字符校验（true 进行校验)                                                                                                                                                                                   | Boolean                                                 |                            |          |\n| validator  | 自定义校验,(校验成功的时候不要忘记执行 `callback()`,否则会校验不返回)                                                                                                                                                  | Function(rule,value,callback)                           |                            |          |\n| trigger    | 触发校验的事件名称                                                                                                                                                                                                     | String/Array                                            | onChange/onBlur/...        | onChange |\n\n更加详细的 rules 建议规则见<a href=\"https://github.com/yiminghe/async-validator#rules\" target=\"_blank\">async-validator</a>的 rules 项\n\n* 支持受控模式(value+onChange) `必须`\n\n  * value 控制组件数据展现\n  * onChange 组件发生变化时候的回调函数（第一个参数可以给到 value)\n\n* 一次完整操作抛一次 onChange 事件 `建议`\n  比如有 Process 表示进展中的状态，建议增加 API `onProcess`；如果有 Start 表示启动状态，建议增加 API `onStart`\n\n* `value={undefined}`的时候清空数据, field 的 reset 函数会给所有组件下发 undefined 数据 `建议`\n\n```js\ncomponentWillReceiveProps(nextProps) {\n  if ('value' in nextProps ) {\n    this.setState({\n      value: nextProps.value === undefined? []: nextProps.value   //  设置组件的被清空后的数值\n    });\n  }\n}\n```\n\n## 已知问题\n\n* 为何手动调用 `this.field.validate` 的时候进不了回调函数？ 答: 是不是自定义了 validator 方法,确保`callback`在任何分支下都能被执行到。\n"],"subComponentsREADME":[],"demos":[{"title":"自动卸载","order":"11","jsx":"import { Input, Select, Button, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this, {\n    autoUnmount: true\n  });\n\n  onGetValue() {\n    console.log(this.field.getValues());\n  }\n\n  render() {\n    const { init, getValue } = this.field;\n\n    return (\n      <div className=\"demo\">\n        <Select {...init(\"select\", { initValue: \"yes\" })}>\n          <li value=\"yes\">yes</li>\n          <li value=\"no\">no</li>\n        </Select>\n        <br />\n\n        {getValue(\"select\") === \"yes\" ? <Input {...init(\"input\")} /> : null}\n        <br />\n        <br />\n        <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>\n          getValue\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\nautoUnmount 会自动把Unmout的元素删除。getValues里面也会自动remove组件数据\n\n"},{"title":"基本","order":"0","jsx":"import { Input, Button, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  onGetValue() {\n    console.log(this.field.getValue(\"input\"));\n  }\n\n  render() {\n    const { init, setValue, reset } = this.field;\n\n    return (\n      <div className=\"demo\">\n        <Input {...init(\"input\", { initValue: \"test\" })} />\n        <br />\n        <br />\n        <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>\n          getValue\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => setValue(\"input\", \"set me by click\")}\n        >\n          setValue\n        </Button>\n        <Button onClick={() => reset()}>reset</Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n`getValue` `setValue` `reset` 的使用\n\n"},{"title":"自定义组件使用Field","order":"7","jsx":"import { Button, Field } from \"@icedesign/base\";\n\n// 最简单的组件\nclass Custom extends React.Component {\n  static propTypes = {\n    onChange: React.PropTypes.func, // Field 从组件拿最新值\n    value: React.PropTypes.array // Feild 给组件设置新值\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: typeof props.value === \"undefined\" ? [] : props.value\n    };\n  }\n\n  // 用到了state的需要接受props传过来的value，以更新组件\n  componentWillReceiveProps(nextProps) {\n    if (\"value\" in nextProps) {\n      this.setState({\n        value: typeof nextProps.value === \"undefined\" ? [] : nextProps.value\n      });\n    }\n  }\n\n  onAdd = () => {\n    let value = this.state.value.concat([]);\n    value.push(\"new\");\n\n    this.setState({\n      value\n    });\n    this.props.onChange(value);\n  };\n\n  render() {\n    return (\n      <div className=\"custom\">\n        {this.state.value.map((v, i) => {\n          return <Button key={i}>{v}</Button>;\n        })}\n        <Button type=\"primary\" onClick={this.onAdd.bind(this)}>\n          Add ＋{\" \"}\n        </Button>\n      </div>\n    );\n  }\n}\n\n/* eslint-disable react/no-multi-comp */\nclass App extends React.Component {\n  field = new Field(this, {\n    deepReset: true\n  });\n\n  onGetValue() {\n    console.log(this.field.getValue(\"custom\"));\n  }\n\n  render() {\n    const { init, setValue, reset } = this.field;\n\n    return (\n      <div className=\"demo\">\n        <Custom {...init(\"custom\", { initValue: [\"test\"] })} />\n\n        <br />\n        <br />\n\n        <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>\n          getValue\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => setValue(\"custom\", [\"test\", \"setValue\"])}\n        >\n          setValue\n        </Button>\n        <Button onClick={() => reset()}>reset</Button>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n.custom {\n    border: 1px dashed;\n    padding: 4px;\n    display: inline-block;\n}\n.custom span {\n    border: 1px solid green;\n    padding: 0px 5px;\n    height: 24px;\n    display: inline-block;\n    margin-right: 2px;\n}\n","body":"\n`达到效果`：Field可以getValue从onChange获取数据，可以setValue通过value控制组件数据切换\n`完全支持`: 组件支持[受控](https://facebook.github.io/react/docs/forms.html#controlled-components)， 也就是支持两个api：`value` `onChange`. value: 设置组件的数据; onChange: 在组件修改的时候在第一个数暴露数据\n`最低标准`: 组件有`onChange`事件可以读取组件数据。`达到效果`：Field可以getValue，但是setValue无效\n自己的组件如何接入Field。\n\n"},{"title":"组合使用","order":"6","jsx":"import {\n  Button,\n  Checkbox,\n  Radio,\n  Select,\n  Range,\n  DatePicker,\n  TimePicker,\n  Field\n} from \"@icedesign/base\";\n\nconst { Group: CheckboxGroup } = Checkbox;\nconst { Group: RadioGroup } = Radio;\n\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\"\n  },\n  {\n    value: \"pear\",\n    label: \"梨\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\"\n  }\n];\nconst layout = {\n  marginBottom: 10,\n  width: 400\n};\n\nclass App extends React.Component {\n  field = new Field(this, {\n    deepReset: true\n  });\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <div className=\"demo\">\n        <Select {...init(\"select\", { initValue: \"lucy\" })} style={layout}>\n          <li value=\"jack\">jack</li>\n          <li value=\"lucy\">lucy</li>\n          <li value=\"disabled\" disabled>\n            disabled\n          </li>\n          <li value=\"hugohua\">hugohua</li>\n        </Select>\n        <br />\n\n        <Range\n          style={{ ...layout, marginTop: 30 }}\n          slider={\"double\"}\n          scales={10}\n          marks={10}\n          {...init(\"range\", { initValue: [20, 40] })}\n        />\n\n        <div style={{ marginBottom: 10 }}>\n          <CheckboxGroup\n            dataSource={list}\n            {...init(\"checkboxgroup\", { initValue: [\"apple\"] })}\n          />\n        </div>\n\n        <div style={{ marginBottom: 10 }}>\n          <RadioGroup {...init(\"radiogroup\", { initValue: \"b\" })}>\n            <Radio value=\"a\">A</Radio>\n            <Radio value=\"b\">B</Radio>\n            <Radio value=\"c\">C</Radio>\n            <Radio value=\"d\">D</Radio>\n          </RadioGroup>\n        </div>\n        <div style={{ marginBottom: 10 }}>\n          <DatePicker />\n        </div>\n        <div style={{ marginBottom: 10 }}>\n          <DatePicker.RangePicker />\n        </div>\n        <div style={{ marginBottom: 10 }}>\n          <TimePicker />\n        </div>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            console.log(this.field.getValues());\n          }}\n        >\n          getValues\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.setValues({\n              select: \"hugohua\",\n              range: [30, 50],\n              checkboxgroup: [\"orange\"],\n              radiogroup: \"d\"\n            });\n          }}\n        >\n          setValues\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.reset();\n          }}\n        >\n          reset\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n很多组件\n\n"},{"title":"自定义数据获取","order":"1","jsx":"import { Button, DatePicker, Upload, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  normFile(list) {\n    if (Array.isArray(list)) {\n      return list;\n    }\n    return list && list.fileList;\n  }\n\n  normDate(date, strdate) {\n    console.log(\"normDate:\", date, strdate);\n    return strdate;\n  }\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <div>\n        <DatePicker\n          {...init(\"datepicker\", {\n            getValueFromEvent: this.normDate\n          })}\n        />\n        <br />\n        <br />\n\n        <Upload\n          listType=\"text\"\n          {...init(\"upload\", {\n            getValueFromEvent: this.normFile\n          })}\n        />\n        <br />\n        <br />\n\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            console.log(this.field.getValues());\n          }}\n        >\n          getValues\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n通过 `getValueFromEvent` 自定义从组件的 `Event` 获取 `value` 的方式\n\n"},{"title":"关联控制","order":"2","jsx":"import { Input, Select, Range, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this, {\n    onChange: (name, value) => {\n      switch (name) {\n        case \"input\":\n          this.field.setValue(\"sync\", `被改成了: ${value}`);\n          break;\n        case \"select\":\n          this.field.setValue(\"sync\", `${value} 来了`);\n          break;\n        case \"range\":\n          this.field.setValue(\"sync\", `坐标 (${value.join(\",\")}) ready`);\n          break;\n      }\n    }\n  });\n\n  render() {\n    const init = this.field.init;\n    const layout = {\n      marginBottom: 10,\n      width: 400\n    };\n\n    return (\n      <div>\n        <Input\n          placeholder=\"我在Field的onChange里面做了控制\"\n          {...init(\"input\")}\n          style={layout}\n        />\n        <br />\n        <Input placeholder=\"受控同步\" {...init(\"input\")} style={layout} />\n        <br />\n\n        <Select style={layout} {...init(\"select\", { initValue: \"lucy\" })}>\n          <li value=\"jack\">jack</li>\n          <li value=\"lucy\">lucy</li>\n          <li value=\"disabled\" disabled>\n            disabled\n          </li>\n          <li value=\"hugo\">hugo</li>\n        </Select>\n        <br />\n\n        <Range\n          style={{ ...layout, marginTop: 30 }}\n          slider={\"double\"}\n          scales={10}\n          marks={10}\n          {...init(\"range\", { initValue: [20, 40] })}\n        />\n        <br />\n\n        <hr style={{ marginBottom: 10 }} />\n        <Input\n          placeholder=\"我就是被人打的波波, 谁都能控制我\"\n          {...init(\"sync\")}\n          style={layout}\n        />\n        <br />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n组件之间的关联控制. `onChange` 统一管理。\n\n"},{"title":"redux中使用","order":"4","jsx":"import { Input, Button, Field } from \"@icedesign/base\";\nimport { combineReducers, createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\n\nfunction formReducer(state = { email: \"frankqian@qq.com\" }, action) {\n  switch (action.type) {\n    case \"save_fields\":\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n}\n\nclass Demo extends React.Component {\n  static propTypes = {\n    email: React.PropTypes.string,\n    dispatch: React.PropTypes.func\n  };\n\n  componentWillReceiveProps(nextProps) {\n    this.field.setValues({\n      email: nextProps.email,\n      newlen: nextProps.email.length\n    });\n  }\n\n  field = new Field(this, {\n    onChange: (name, value) => {\n      console.log(\"onChange\", name, value);\n      this.field.setValue(\"newlen\", value.length);\n      this.props.dispatch({\n        type: \"save_fields\",\n        payload: {\n          [name]: value\n        }\n      });\n    }\n  });\n\n  setEmail() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      payload: {\n        email: \"qq@gmail.com\"\n      }\n    });\n  }\n\n  render() {\n    const init = this.field.init;\n\n    const newLen = init(\"newlen\", { initValue: this.props.email.length });\n\n    return (\n      <div>\n        <Input\n          {...init(\"email\", {\n            initValue: this.props.email,\n            rules: [\n              {\n                required: true,\n                type: \"email\",\n                message: \"用户名至少为 5 个字符\"\n              }\n            ]\n          })}\n        />\n        现在的长度是:{newLen.value}\n        <p>email: {this.props.email}</p>\n        <Button onClick={this.setEmail.bind(this)}>set</Button>\n      </div>\n    );\n  }\n}\n\nconst ReduxDemo = connect(state => {\n  return {\n    email: state.formReducer.email\n  };\n})(Demo);\n\nconst store = createStore(\n  combineReducers({\n    formReducer\n  })\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      <ReduxDemo />\n    </div>\n  </Provider>,\n  mountNode\n);\n\n","css":"","body":"\n在redux中使用, 在componentWillReceiveProps更新\n\n"},{"title":"自定义错误","order":"3","jsx":"import { Input, Button, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  render() {\n    const { init, getError, setError, setErrors } = this.field;\n    return (\n      <div className=\"demo\">\n        <Input\n          {...init(\"input\", {\n            rules: {\n              required: true,\n              pattern: /hello/,\n              message: \"我是真正的错误信息，必须填写hello\"\n            }\n          })}\n        />\n        <br />\n        <span style={{ color: \"red\" }}>{getError(\"input\")}</span>\n\n        <br />\n        <Button\n          onClick={() => {\n            setError(\"input\", \"设置的错误信息\");\n          }}\n        >\n          setError\n        </Button>\n\n        <Button\n          onClick={() => {\n            setErrors({ input: \"设置的错误信息2\" });\n          }}\n        >\n          setErrors\n        </Button>\n\n        <Button\n          onClick={() => {\n            setErrors({ input: \"\" });\n          }}\n        >\n          clear\n        </Button>\n\n        <br />\n        <br />\n        <Input {...init(\"input2\")} />\n        <br />\n        <span style={{ color: \"red\" }}>{getError(\"input2\")}</span>\n        <br />\n\n        <Button\n          onClick={() => {\n            setError(\"input2\", \"设置的错误信息onChange后会被去除\");\n          }}\n        >\n          setError\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n自己控制组件的errors\n\n"},{"title":"获取对象或数组","order":"10","jsx":"import { Input, Button, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this, {\n    parseName: true // 这里打开开关\n  });\n\n  onGetValue() {\n    console.log(this.field.getValues());\n  }\n\n  onSetValue() {\n    this.field.setValues({\n      a: {\n        b: \"b\",\n        c: \"c\"\n      },\n      arr: [\"first\", \"second\"]\n    });\n  }\n\n  render() {\n    const { init, reset } = this.field;\n\n    return (\n      <div className=\"demo\">\n        <h2>对象转换</h2>\n        <Input {...init(\"a.b\", { initValue: \"test1\" })} /> &nbsp;\n        <Input {...init(\"a.c\", { initValue: \"test2\" })} />\n        <br />\n        <h2>数组转换</h2>\n        <Input {...init(\"arr.0\", { initValue: \"0\" })} /> &nbsp;\n        <Input {...init(\"arr.1\", { initValue: \"1\" })} />\n        <br />\n        <br />\n        结构化数据:\n        <pre>{JSON.stringify(this.field.getValues(), null, 2)}</pre>\n        <br />\n        <br />\n        <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>\n          getValues\n        </Button>\n        <Button onClick={this.onSetValue.bind(this)}>setValues</Button>\n        <Button onClick={() => reset()}>reset</Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n把 `init('arr.0')` 的数据转换成 `obj={arr:['']}`；\n把 `init('a.b')` 的数据转换成 `obj={a:{b:'value'}}`；\n\n"},{"title":"校验","order":"3","jsx":"import { Input, Button, Checkbox, Field } from \"@icedesign/base\";\n\nconst CheckboxGroup = Checkbox.Group;\n\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\"\n  },\n  {\n    value: \"pear\",\n    label: \"梨\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\"\n  }\n];\n\nclass App extends React.Component {\n  state = {\n    checkboxStatus: true\n  };\n  field = new Field(this, { scrollToFirstError: true });\n\n  isChecked(rule, value, callback) {\n    if (!value) {\n      callback(\"没有勾选同意协议\");\n    } else {\n      callback();\n    }\n  }\n\n  userName(rule, value, callback) {\n    if (value === \"frank\") {\n      setTimeout(() => callback(\"名称已经存在\"), 200);\n    } else {\n      setTimeout(() => callback(), 200);\n    }\n  }\n\n  render() {\n    const init = this.field.init;\n    return (\n      <div className=\"demo\">\n        <Input\n          {...init(\"input\", {\n            initValue: \"删除试试\",\n            rules: { required: true }\n          })}\n        />\n        {this.field.getError(\"input\") ? (\n          <span style={{ color: \"red\" }}>\n            {this.field.getError(\"input\").join(\",\")}\n          </span>\n        ) : (\n          \"\"\n        )}\n        <br />\n        <br />\n        <Input\n          placeholder=\"离开焦点onBlur\"\n          {...init(\"input1\", {\n            rules: {\n              required: true,\n              message: \"不能为空\",\n              trigger: [\"onBlur\", \"onChange\"]\n            }\n          })}\n        />\n        {this.field.getError(\"input1\") ? (\n          <span style={{ color: \"red\" }}>\n            {this.field.getError(\"input1\").join(\",\")}\n          </span>\n        ) : (\n          \"\"\n        )}\n        <br />\n        <br />\n        <Input\n          defaultValue=\"\"\n          placeholder=\"填写frank\"\n          {...init(\"username\", {\n            rules: {\n              validator: this.userName,\n              trigger: [\"onBlur\", \"onChange\"]\n            }\n          })}\n        />\n        {this.field.isValidating(\"username\") ? \"正在校验中...\" : \"\"}\n        {this.field.getError(\"username\") ? (\n          <span style={{ color: \"red\" }}>\n            {this.field.getError(\"username\").join(\",\")}\n          </span>\n        ) : (\n          \"\"\n        )}\n        <br />\n        <br />\n        是否同意以上协议:\n        <Checkbox\n          {...init(\"checkbox\", {\n            valueName: \"checked\",\n            rules: { validator: this.isChecked }\n          })}\n        />\n        {this.field.getError(\"checkbox\") ? (\n          <span style={{ color: \"red\" }}>\n            {this.field.getError(\"checkbox\").join(\",\")}\n          </span>\n        ) : (\n          \"\"\n        )}\n        <br />\n        <br />\n        <Input\n          multiple\n          maxLength={10}\n          defaultValue=\"字符串长度在3-10之间\"\n          {...init(\"textarea\", {\n            rules: [\n              {\n                required: true,\n                min: 3,\n                max: 10\n              }\n            ]\n          })}\n        />\n        {this.field.getError(\"textarea\") ? (\n          <span style={{ color: \"red\" }}>\n            {this.field.getError(\"textarea\").join(\",\")}\n          </span>\n        ) : (\n          \"\"\n        )}\n        <br />\n        <br />\n        {this.state.checkboxStatus ? (\n          <div>\n            数组类型的数据校验：\n            <CheckboxGroup\n              dataSource={list}\n              {...init(\"checkboxgroup\", {\n                rules: {\n                  required: true,\n                  type: \"array\",\n                  message: \"必须勾选一个吧\"\n                }\n              })}\n              style={{ marginBottom: 10 }}\n            />\n            {this.field.getError(\"checkboxgroup\") ? (\n              <span style={{ color: \"red\" }}>\n                {this.field.getError(\"checkboxgroup\").join(\",\")}\n              </span>\n            ) : (\n              \"\"\n            )}\n          </div>\n        ) : null}\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.field.validate((errors, values) => {\n              console.log(errors, values);\n            });\n          }}\n        >\n          validate\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.reset();\n          }}\n        >\n          reset\n        </Button>\n        <Button\n          onClick={() => {\n            if (this.state.checkboxStatus) {\n              this.setState({ checkboxStatus: false });\n              this.field.remove(\"checkboxgroup\");\n            } else {\n              this.setState({ checkboxStatus: true });\n            }\n          }}\n        >\n          {this.state.checkboxStatus ? \"delete\" : \"restore\"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n`注意`：Form和Field做了深度结合，在Form中使用Field，错误信息不需`getError`获取会自动展现。\n校验的错误信息需要用`getError`获取\n\n"},{"title":"自定义受控字段","order":"6","jsx":"import { Button, Checkbox, Radio, Switch, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <div className=\"demo\">\n        <Radio {...init(\"radio\", { initValue: false, valueName: \"checked\" })}>\n          {\" \"}\n          checked\n        </Radio>\n        <br />\n        <Checkbox\n          {...init(\"checkbox\", { initValue: true, valueName: \"checked\" })}\n        >\n          defaultChecked\n        </Checkbox>\n        <br />\n        <Switch\n          {...init(\"switch\", { initValue: false, valueName: \"checked\" })}\n          style={{ marginTop: 10, marginBottom: 10 }}\n        />\n        <br />\n\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            console.log(this.field.getValues());\n          }}\n        >\n          getValues\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.setValues({\n              radio: true,\n              switch: true,\n              checkbox: false\n            });\n          }}\n        >\n          {\" \"}\n          setValues{\" \"}\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.reset();\n          }}\n        >\n          reset\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\nvalueName的默认值为value，如果为其他需要用valueName指定\n\n"}]},{"name":"Form","category":"Components","title":"表单","type":"表单","importStatement":"import { Form } from '@icedesign/base';","body":"\n\n## 开发指南\n\n### 何时使用\n\n表单校验、数据提交操作是用到。 Form表单包含了布局、数据获取、校验功能等功能， 其中 `数据获取`、`校验功能` 需要配合 `Field` 使用才能发挥。\n\n### 注意事项\n\n-   组件不要使用关键字 `nodeName` 作为 name、id \n-   使用了 Field `init` 过的组件，请勿在组件上面直接定义 `ref` `value` `onChange` 事件。\n-   Form 默认使用 `size=medium`, 并且会控制FormItem内所有组件的size。 如果想修改组件的size `<FormItem size=\"small\" >`\n-   在垂直表单中如果文字（一般 `<p>` 标签）或者组件向上偏离，可以通过 `className=\"next-form-text-align\"` 辅助调整\n\n","propsSchema":{"name":"Form","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"direction":{"type":{"name":"enum","value":[{"value":"'hoz'","computed":false,"description":"水平"},{"value":"'ver'","computed":false,"description":"垂直"}]},"required":false,"description":"表单展示方向","defaultValue":{"value":"'ver'","computed":false},"docblock":"表单展示方向\n@enumdesc 水平, 垂直","value":[{"value":"'hoz'","computed":false,"description":"水平"},{"value":"'ver'","computed":false,"description":"垂直"}]},"size":{"type":{"name":"enum","value":[{"value":"'large'","computed":false,"description":"大"},{"value":"'medium'","computed":false,"description":"中"},{"value":"'small'","computed":false,"description":"小"}]},"required":false,"description":"单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。","defaultValue":{"value":"'medium'","computed":false},"docblock":"单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。\n@enumdesc 大, 中, 小","value":[{"value":"'large'","computed":false,"description":"大"},{"value":"'medium'","computed":false,"description":"中"},{"value":"'small'","computed":false,"description":"小"}]},"labelAlign":{"type":{"name":"enum","value":[{"value":"'top'","computed":false,"description":"上"},{"value":"'left'","computed":false,"description":"左"},{"value":"'inset'","computed":false,"description":"内"}]},"required":false,"description":"标签的位置","defaultValue":{"value":"'left'","computed":false},"docblock":"标签的位置\n@enumdesc 上, 左, 内","value":[{"value":"'top'","computed":false,"description":"上"},{"value":"'left'","computed":false,"description":"左"},{"value":"'inset'","computed":false,"description":"内"}]},"labelTextAlign":{"type":{"name":"enum","value":[{"value":"''","computed":false,"description":""},{"value":"'left'","computed":false,"description":"左"},{"value":"'right'","computed":false,"description":"右"}]},"required":false,"description":"标签的左右对齐方式","docblock":"标签的左右对齐方式\n@enumdesc , 左, 右","value":[{"value":"''","computed":false,"description":""},{"value":"'left'","computed":false,"description":"左"},{"value":"'right'","computed":false,"description":"右"}]},"field":{"type":{"name":"any"},"required":false,"description":"经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项","docblock":"经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项"},"onSubmit":{"type":{"name":"func"},"required":false,"description":"form内有 `htmlType=\"submit\"` 的元素的时候会触发","defaultValue":{"value":"function(e) {\n    e.preventDefault();\n}","computed":false},"docblock":"form内有 `htmlType=\"submit\"` 的元素的时候会触发","params":[],"returns":null},"children":{"type":{"name":"any"},"required":false,"description":"子元素","docblock":"子元素"},"className":{"type":{"name":"string"},"required":false,"description":"扩展class","docblock":"扩展class"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]}},"methods":[],"subComponents":[{"name":"Item","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"label":{"type":{"name":"node"},"required":false,"description":"label 标签的文本","docblock":"label 标签的文本"},"labelCol":{"type":{"name":"object"},"required":false,"description":"label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效","docblock":"label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效","properties":[]},"help":{"type":{"name":"node"},"required":false,"description":"提示信息，如不设置，则会根据校验规则自动生成. 如果设置会受控（ps: 可以利用这点自定义错误位置,详细看demo自定义错误)","docblock":"提示信息，如不设置，则会根据校验规则自动生成. 如果设置会受控（ps: 可以利用这点自定义错误位置,详细看demo自定义错误)"},"validateStatus":{"type":{"name":"enum","value":[{"value":"''","computed":false,"description":""},{"value":"'success'","computed":false,"description":"成功"},{"value":"'error'","computed":false,"description":"失败"},{"value":"'loading'","computed":false,"description":"校验中"}]},"required":false,"description":"校验状态，如不设置，则会根据校验规则自动生成","docblock":"校验状态，如不设置，则会根据校验规则自动生成\n@enumdesc , 成功, 失败, 校验中","value":[{"value":"''","computed":false,"description":""},{"value":"'success'","computed":false,"description":"成功"},{"value":"'error'","computed":false,"description":"失败"},{"value":"'loading'","computed":false,"description":"校验中"}]},"hasFeedback":{"type":{"name":"bool"},"required":false,"description":"配合 validateStatus 属性使用，是否展示校验状态图标, 目前只有Input支持","defaultValue":{"value":"false","computed":false},"docblock":"配合 validateStatus 属性使用，是否展示校验状态图标, 目前只有Input支持"},"wrapperCol":{"type":{"name":"object"},"required":false,"description":"需要为输入控件设置布局样式时，使用该属性，用法同 labelCol","docblock":"需要为输入控件设置布局样式时，使用该属性，用法同 labelCol","properties":[]},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"extra":{"type":{"name":"node"},"required":false,"description":"额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面","docblock":"额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面"},"size":{"type":{"name":"enum","value":[{"value":"''","computed":false},{"value":"'large'","computed":false},{"value":"'small'","computed":false},{"value":"'medium'","computed":false}]},"required":false,"description":"单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。","docblock":"单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。"},"className":{"type":{"name":"string"},"required":false,"description":"扩展class","docblock":"扩展class"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\ndirection | 表单展示方向<br><br>**可选值**:<br>'hoz'(水平)<br>'ver'(垂直) | Enum | 'ver'\nsize | 单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。<br><br>**可选值**:<br>'large'(大)<br>'medium'(中)<br>'small'(小) | Enum | 'medium'\nlabelAlign | 标签的位置<br><br>**可选值**:<br>'top'(上)<br>'left'(左)<br>'inset'(内) | Enum | 'left'\nlabelTextAlign | 标签的左右对齐方式<br><br>**可选值**:<br>''<br>'left'(左)<br>'right'(右) | Enum | -\nfield | 经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项 | any | -\nonSubmit | form内有 `htmlType=\"submit\"` 的元素的时候会触发<br><br>**签名**:<br>Function() => void | Function | function(e) {     e.preventDefault(); }\nchildren | 子元素 | any | -\nclassName | 扩展class | String | -\nstyle | 自定义内联样式 | Object | -\n","methodREADME":[],"subComponentsREADME":[{"name":"Item","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nlabel | label 标签的文本 | ReactNode | -\nlabelCol | label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效 | Object | -\nhelp | 提示信息，如不设置，则会根据校验规则自动生成. 如果设置会受控（ps: 可以利用这点自定义错误位置,详细看demo自定义错误) | ReactNode | -\nvalidateStatus | 校验状态，如不设置，则会根据校验规则自动生成<br><br>**可选值**:<br>''<br>'success'(成功)<br>'error'(失败)<br>'loading'(校验中) | Enum | -\nhasFeedback | 配合 validateStatus 属性使用，是否展示校验状态图标, 目前只有Input支持 | Boolean | false\nwrapperCol | 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol | Object | -\nstyle | 自定义内联样式 | Object | -\nextra | 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面 | ReactNode | -\nsize | 单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。<br><br>**可选值**:<br>'', 'large', 'small', 'medium' | Enum | -\nclassName | 扩展class | String | -\n","methodREADME":[]}],"demos":[{"title":"自定义布局","order":"6","jsx":"import {\n  Form,\n  Input,\n  Switch,\n  Grid,\n  Button,\n  Icon,\n  Balloon,\n  Field\n} from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nconst FormItem = Form.Item;\nconst style = {\n  padding: \"20px\",\n  background: \"#F7F8FA\",\n  margin: \"20px\"\n};\nconst formItemLayout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 }\n};\nconst label = (\n  <span>\n    名称：<Balloon\n      type=\"primary\"\n      trigger={<Icon type=\"prompt\" size=\"small\" />}\n      closable={false}\n    >\n      blablablablablablablabla\n    </Balloon>\n  </span>\n);\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.field = new Field(this);\n  }\n\n  render() {\n    const { init, getValue } = this.field;\n\n    return (\n      <div>\n        <h3>标签位置</h3>\n        <Switch\n          checkedChildren=\"左\"\n          unCheckedChildren=\"上\"\n          {...init(\"labelAlign\", { initValue: false })}\n        />\n\n        <Form\n          labelAlign={!getValue(\"labelAlign\") ? \"top\" : \"left\"}\n          style={style}\n        >\n          <Row>\n            <Col>\n              <FormItem {...formItemLayout} label={label} required>\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"较长搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem {...formItemLayout} label=\"搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"较长搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem {...formItemLayout} label=\"搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"较长搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n            </Col>\n          </Row>\n          <Row>\n            <Col style={{ textAlign: \"right\" }}>\n              <Button type=\"primary\" style={{ marginRight: \"5px\" }}>\n                搜索\n              </Button>\n              <Button>清除条件</Button>\n            </Col>\n          </Row>\n        </Form>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n配合 `Row` `Col` 控制表单内元素布局\n标签位置：上、左\n\n"},{"title":"固定宽度","order":"1","jsx":"import { Form, Input, Button, Checkbox, Field } from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.field = new Field(this);\n  }\n\n  handleSubmit() {\n    console.log(\"收到表单值：\", this.field.getValues());\n  }\n\n  render() {\n    const init = this.field.init;\n    const formItemLayout = {\n      labelCol: {\n        fixedSpan: 10\n      },\n      wrapperCol: {\n        span: 14\n      }\n    };\n\n    return (\n      <Form direction=\"ver\" field={this.field}>\n        <FormItem label=\"用户名：\" {...formItemLayout}>\n          <p className=\"next-form-text-align\">固定名称</p>\n        </FormItem>\n        <FormItem label=\"密码：\" required {...formItemLayout}>\n          <Input\n            htmlType=\"password\"\n            {...init(\"pass\")}\n            placeholder=\"请输入密码\"\n          />\n        </FormItem>\n\n        <FormItem label=\"备注：\" {...formItemLayout} help=\"随便写点什么\">\n          <Input multiple placeholder=\"随便写\" {...init(\"remark\")} />\n        </FormItem>\n        <FormItem label=\" \" {...formItemLayout}>\n          <Checkbox {...init(\"agreement\")}>同意</Checkbox>\n        </FormItem>\n        <FormItem label=\" \" {...formItemLayout}>\n          <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>\n            确定\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n如果组件比较靠上，可以用 `class=next-form-text-align` 做调整\n拉伸浏览器的时候label宽度不变。\n\n"},{"title":"标签inset模式","order":"4","jsx":"import { Form, Input, Select } from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 20 }\n};\n\nReactDOM.render(\n  <div>\n    <h3>垂直</h3>\n\n    <Form labelAlign=\"inset\" style={{ maxWidth: \"500px\" }}>\n      <FormItem {...formItemLayout} label=\"账户：\">\n        <Input placeholder=\"请输入账户名\" id=\"userName\" name=\"userName\" />\n      </FormItem>\n\n      <FormItem {...formItemLayout} label=\"密码：\">\n        <Input\n          htmlType=\"password\"\n          placeholder=\"请输入密码\"\n          id=\"password\"\n          name=\"password\"\n        />\n      </FormItem>\n      <FormItem {...formItemLayout} label=\"密码：\" validateStatus=\"error\">\n        <Input\n          htmlType=\"password\"\n          placeholder=\"请输入密码\"\n          id=\"password\"\n          name=\"password\"\n        />\n      </FormItem>\n\n      <FormItem {...formItemLayout} label=\"大小：\">\n        <Select>\n          <div value=\"small\">small</div>\n          <div value=\"medium\">medium</div>\n          <div value=\"large\">large</div>\n        </Select>\n      </FormItem>\n    </Form>\n\n    <h2>水平</h2>\n\n    <Form labelAlign=\"inset\" direction=\"hoz\">\n      <FormItem label=\"账户：\">\n        <Input placeholder=\"请输入账户名\" id=\"userName\" name=\"userName\" />\n      </FormItem>\n\n      <FormItem label=\"密码：\">\n        <Input\n          htmlType=\"password\"\n          placeholder=\"请输入密码\"\n          id=\"password\"\n          name=\"password\"\n        />\n      </FormItem>\n      <FormItem label=\"密码：\" validateStatus=\"error\" help=\"密码不能为空\">\n        <Input\n          htmlType=\"password\"\n          placeholder=\"请输入密码\"\n          id=\"password\"\n          name=\"password\"\n        />\n      </FormItem>\n\n      <FormItem label=\"大小：\">\n        <Select style={{ width: 150 }}>\n          <div value=\"small\">small</div>\n          <div value=\"medium\">medium</div>\n          <div value=\"large\">large</div>\n        </Select>\n      </FormItem>\n    </Form>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n通过设置`labelAlign=\"inset\"` (只适用于Input、Select组件，其他组件不适用)\n\n"},{"title":"表单组合","order":"5","jsx":"import {\n  Form,\n  Input,\n  Button,\n  Checkbox,\n  Select,\n  Range,\n  Balloon,\n  DatePicker,\n  TimePicker,\n  NumberPicker,\n  Field,\n  Switch,\n  Upload,\n  Grid\n} from \"@icedesign/base\";\n\nconst { RangePicker } = DatePicker;\nconst { Row, Col } = Grid;\n\nconst FormItem = Form.Item;\n\nclass Demo extends React.Component {\n  field = new Field(this);\n\n  handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"收到表单值：\", this.field.getValues());\n    this.field.validate();\n  }\n\n  getValueFromFile(e) {\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  }\n\n  render() {\n    const init = this.field.init;\n    const formItemLayout = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 14 }\n    };\n\n    return (\n      <Form field={this.field}>\n        <FormItem label=\"密码：\" {...formItemLayout}>\n          <Balloon\n            trigger={<Input htmlType=\"password\" />}\n            align=\"r\"\n            closable={false}\n            triggerType=\"hover\"\n          >\n            input password\n          </Balloon>\n        </FormItem>\n\n        <FormItem label=\"我是标题：\" {...formItemLayout}>\n          <p className=\"next-form-text-align\">唧唧复唧唧木兰当户织呀</p>\n\n          <p className=\"next-form-text-align\">\n            <a href=\"#\">链接文字</a>\n          </p>\n        </FormItem>\n\n        <FormItem label=\"NumberPicker 数字输入框：\" {...formItemLayout}>\n          <NumberPicker\n            min={1}\n            max={10}\n            {...init(\"numberPicker\", { initValue: 3 })}\n          />\n          <span> 台机器</span>\n        </FormItem>\n\n        <FormItem label=\"Switch 开关：\" {...formItemLayout} required>\n          <Switch\n            {...init(\"switch\", { valueName: \"checked\", initValue: true })}\n          />\n        </FormItem>\n\n        <FormItem label=\"Range 滑动输入条：\" {...formItemLayout} required>\n          <Range\n            defaultValue={30}\n            scales={[0, 100]}\n            style={{ marginTop: \"10px\" }}\n            marks={[0, 100]}\n            {...init(\"range\")}\n          />\n        </FormItem>\n\n        <FormItem label=\"Select 选择器：\" {...formItemLayout} required>\n          <Select style={{ width: 200 }} {...init(\"select\")}>\n            <Option value=\"jack\">jack</Option>\n            <Option value=\"lucy\">lucy</Option>\n            <Option value=\"disabled\" disabled>\n              disabled\n            </Option>\n            <Option value=\"hugohua\">hugohua</Option>\n          </Select>\n        </FormItem>\n\n        <FormItem\n          label=\"DatePicker 日期选择框：\"\n          labelCol={{ span: 6 }}\n          required\n        >\n          <Row>\n            <FormItem style={{ marginRight: 10 }}>\n              <DatePicker {...init(\"startDate\")} />\n            </FormItem>\n            <FormItem>\n              <DatePicker {...init(\"endDate\")} />\n            </FormItem>\n          </Row>\n        </FormItem>\n\n        <FormItem\n          label=\"RangePicker 范围选择框：\"\n          labelCol={{ span: 6 }}\n          required\n        >\n          <RangePicker {...init(\"rangeDate\")} />\n        </FormItem>\n\n        <FormItem label=\"TimePicker 时间选择器：\" {...formItemLayout} required>\n          <TimePicker\n            {...init(\"time\", {\n              getValueFromEvent: time => {\n                time =\n                  time &&\n                  time.toLocaleTimeString(\"zh-CN\", {\n                    hour12: false\n                  });\n\n                return time;\n              }\n            })}\n          />\n        </FormItem>\n\n        <FormItem\n          className=\"next-form-text-align\"\n          label=\"Checkbox 多选框：\"\n          {...formItemLayout}\n        >\n          <Checkbox {...init(\"checkbox1\")}>选项一 </Checkbox>\n          <Checkbox {...init(\"checkbox2\")}>选项二 </Checkbox>\n          <Checkbox disabled {...init(\"checkbox3\")}>\n            选项三（不可选）\n          </Checkbox>\n        </FormItem>\n\n        <FormItem label=\"logo图：\" {...formItemLayout}>\n          <Upload\n            action=\"/upload.do\"\n            listType=\"text\"\n            onChange={this.handleUpload}\n            {...init(\"upload\", {\n              valueName: \"fileList\",\n              getValueFromEvent: this.getValueFromFile\n            })}\n          >\n            <Button type=\"primary\" style={{ margin: \"0 0 10px\" }}>\n              上传文件\n            </Button>\n          </Upload>\n        </FormItem>\n        <Row style={{ marginTop: 24 }}>\n          <Col offset=\"6\">\n            <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>\n              确定\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n展示和表单相关的其他组件。\n\n"},{"title":"Item 嵌套","order":"5","jsx":"import { Form, Input, Button, Field, Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nconst FormItem = Form.Item;\n\nclass Demo extends React.Component {\n  field = new Field(this);\n\n  handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"收到表单值：\", this.field.getValues());\n  }\n\n  normFile(e) {\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  }\n\n  render() {\n    const init = this.field.init;\n    const formItemLayout = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 14 }\n    };\n\n    const insetLayout = {\n      labelCol: { fixedSpan: 4 }\n    };\n\n    return (\n      <Form field={this.field}>\n        <FormItem id=\"control-input\" label=\"输入框：\" {...formItemLayout}>\n          <Row>\n            <Col>\n              <FormItem\n                label=\"内嵌模式\"\n                required={false}\n                labelAlign=\"inset\"\n                {...insetLayout}\n              >\n                <Input\n                  placeholder=\"Please enter...\"\n                  style={{ width: \"100%\" }}\n                  {...init(\"firstname\", {\n                    rules: [{ required: true, trigger: \"onBlur\" }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem\n                label=\"内嵌模式\"\n                required={false}\n                labelAlign=\"inset\"\n                {...insetLayout}\n              >\n                <Input\n                  placeholder=\"need onChange\"\n                  style={{ width: \"100%\" }}\n                  {...init(\"secondname\", {\n                    rules: [{ required: true }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n          </Row>\n        </FormItem>\n        <FormItem label=\"银行账户：\" {...formItemLayout}>\n          <Row>\n            <Col>\n              <FormItem>\n                <Input\n                  {...init(\"A\", {\n                    rules: [{ required: true, trigger: \"onBlur\" }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem>\n                <Input\n                  {...init(\"B\", {\n                    rules: [{ required: true, trigger: \"onBlur\" }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem>\n                <Input\n                  {...init(\"C\", {\n                    rules: [{ required: true, trigger: \"onBlur\" }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem>\n                <Input\n                  {...init(\"D\", {\n                    rules: [{ required: true, trigger: \"onBlur\" }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n          </Row>\n        </FormItem>\n\n        <Row style={{ marginTop: 24 }}>\n          <Col offset=\"6\">\n            <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>\n              确定\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\nFormItem嵌套\n\n"},{"title":"回车提交","order":"7","jsx":"import { Form, Input, Button } from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\n\nclass Demo extends React.Component {\n  onSubmit(e) {\n    e.preventDefault();\n    console.log(\"onsubmit\");\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.onSubmit.bind(this)}>\n        <FormItem>\n          <Input placeholder=\"回车也能触发onSubmit\" />\n        </FormItem>\n        <Button htmlType=\"submit\">submit</Button>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n需要Form里面有 htmlType=\"submit\" 的元素\n\n"},{"title":"手动设置错误","order":"21","jsx":"import { Form, Input, Button, Field } from \"@icedesign/base\";\nimport { combineReducers, createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\n\nconst initState = {\n  values: { email: \"\", username: \"xiachi\" },\n  errors: {}\n};\n\nfunction formReducer(state = initState, action) {\n  switch (action.type) {\n    case \"save_fields\":\n      return {\n        ...state,\n        values: {\n          ...state.values,\n          ...action.values\n        }\n      };\n    case \"set_errors\":\n      return {\n        ...state,\n        errors: {\n          ...state.errors,\n          ...action.errors\n        }\n      };\n    default:\n      return state;\n  }\n}\n\nclass FormDemo extends React.Component {\n  static propTypes = {\n    formData: React.PropTypes.object,\n    email: React.PropTypes.object,\n    dispatch: React.PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.field = new Field(this, {\n      onChange: (name, value) => {\n        console.log(\"onChange\", name, value, this.field.getError(name));\n        this.props.dispatch({\n          type: \"save_fields\",\n          values: {\n            [name]: value\n          }\n        });\n        this.props.dispatch({\n          type: \"set_errors\",\n          errors: {\n            [name]: this.field.getError(name)\n          }\n        });\n      }\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.field.setValues(nextProps.formData.values);\n    this.field.setErrors(nextProps.formData.errors);\n  }\n\n  setEmail() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      values: {\n        email: \"qq@gmail.com\"\n      }\n    });\n  }\n\n  setName() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      values: {\n        username: \"frank\"\n      }\n    });\n  }\n\n  setError() {\n    this.props.dispatch({\n      type: \"set_errors\",\n      errors: {\n        email: \"来自远程的错误消息\"\n      }\n    });\n  }\n\n  setErrors() {\n    this.props.dispatch({\n      type: \"set_errors\",\n      errors: {\n        email: \"来自远程的错误消息A\",\n        username: \"来自远程的错误消息B\"\n      }\n    });\n  }\n\n  render() {\n    const init = this.field.init;\n    return (\n      <Form field={this.field}>\n        <Form.Item>\n          <Input\n            {...init(\"email\", {\n              initValue: this.props.formData.values.email,\n              rules: [{ required: true, type: \"email\" }]\n            })}\n          />\n        </Form.Item>\n        <Form.Item help=\"\">\n          <Input\n            {...init(\"username\", {\n              initValue: this.props.formData.values.username,\n              rules: [{ required: true, message: \"不能为空\" }]\n            })}\n          />\n          <p style={{ color: \"blue\" }}>{this.field.getError(\"username\")}</p>\n        </Form.Item>\n\n        <p>email: {this.props.email && this.props.email.value}</p>\n        <Button onClick={this.setEmail.bind(this)}>setEmail</Button>\n        <Button onClick={this.setName.bind(this)}>setName</Button>\n        <Button onClick={this.setError.bind(this)}>setError</Button>\n        <Button onClick={this.setErrors.bind(this)}>setErrors</Button>\n        <Button onClick={() => this.field.reset()}>reset</Button>\n      </Form>\n    );\n  }\n}\n\nconst ReduxFormDemo = connect(state => {\n  return {\n    formData: state.formReducer\n  };\n})(FormDemo);\n\nconst store = createStore(\n  combineReducers({\n    formReducer\n  })\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      <ReduxFormDemo />\n    </div>\n  </Provider>,\n  mountNode\n);\n\n","css":"","body":"\n如果需要自己控制错误位置，可以让`help=\"\"` 然后自己放置展示错误的地方\n在`redux`中结合 `componentWillReceiveProps` `setErrors` 使用\n\n"},{"title":"配合redux使用","order":"20","jsx":"import { Form, Input, Button, Checkbox, Field } from \"@icedesign/base\";\nimport { combineReducers, createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\n\nconst CheckboxGroup = Checkbox.Group;\nfunction formReducer(\n  state = { email: \"\", username: \"xiachi\", fruit: [\"apple\"] },\n  action\n) {\n  switch (action.type) {\n    case \"save_fields\":\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n}\n\nclass FormDemo extends React.Component {\n  static propTypes = {\n    formData: React.PropTypes.object,\n    email: React.PropTypes.object,\n    dispatch: React.PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    this.field = new Field(this, {\n      onChange: (name, value) => {\n        console.log(\"onChange\", name, value, this.field.getValues());\n        this.props.dispatch({\n          type: \"save_fields\",\n          payload: {\n            [name]: value\n          }\n        });\n        /* 方法2, 所有值全部更新\n                 this.props.dispatch({\n                 type: 'save_fields',\n                 payload: this.field.getValues()\n                 });\n                 */\n      }\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.field.setValues(nextProps.formData);\n  }\n\n  setEmail() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      payload: {\n        email: \"qq@gmail.com\"\n      }\n    });\n  }\n\n  setName() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      payload: {\n        username: \"frank\"\n      }\n    });\n  }\n\n  setGroup() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      payload: {\n        fruit: [\"pear\"]\n      }\n    });\n  }\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <Form field={this.field}>\n        <Form.Item>\n          <Input\n            {...init(\"email\", {\n              rules: [{ required: true, message: \"不能为空!\" }]\n            })}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Input\n            defaultValue={this.props.formData.username}\n            {...init(\"username\", {\n              rules: [{ required: true, message: \"不能为空\" }]\n            })}\n          />\n        </Form.Item>\n        <Form.Item>\n          <CheckboxGroup\n            dataSource={[\n              { label: \"苹果\", value: \"apple\" },\n              { label: \"梨\", value: \"pear\" }\n            ]}\n            defaultValue={this.props.formData.fruit}\n            {...init(\"fruit\", {\n              rules: [{ required: true, type: \"array\", message: \"不能为空\" }]\n            })}\n          />\n        </Form.Item>\n\n        <p>email: {this.props.email && this.props.email.value}</p>\n        <Button onClick={this.setEmail.bind(this)}>setEmail</Button>\n        <Button onClick={this.setName.bind(this)}>setName</Button>\n        <Button onClick={this.setGroup.bind(this)}>setGroup</Button>\n      </Form>\n    );\n  }\n}\n\nconst ReduxFormDemo = connect(state => {\n  return {\n    formData: state.formReducer\n  };\n})(FormDemo);\n\nconst store = createStore(\n  combineReducers({\n    formReducer\n  })\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      <ReduxFormDemo />\n    </div>\n  </Provider>,\n  mountNode\n);\n\n","css":"","body":"\n在`redux`中结合 `componentWillReceiveProps` `setValues` 使用\n\n"},{"title":"尺寸+标签","order":"2","jsx":"import { Form, Input, Select, Field } from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\nconst formItemLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 20 }\n};\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.field = new Field(this);\n  }\n\n  render() {\n    const { init, getValue } = this.field;\n\n    return (\n      <div>\n        <Form direction=\"hoz\" className=\"demo-ctl\" field={this.field}>\n          <FormItem label=\"大小:\">\n            <Select {...init(\"size\", { initValue: \"medium\" })}>\n              <div value=\"small\">small</div>\n              <div value=\"medium\">medium</div>\n              <div value=\"large\">large</div>\n            </Select>\n          </FormItem>\n          <FormItem label=\"标签对齐方式:\" help=\"inset只能用于 Input、Select\">\n            <Select {...init(\"labelAlign\", { initValue: \"left\" })}>\n              <div value=\"top\">标签在上 top</div>\n              <div value=\"left\">标签在左 left</div>\n              <div value=\"inset\">标签在内 inset</div>\n            </Select>\n          </FormItem>\n          <FormItem label=\"标签左右对齐方式:\">\n            <Select {...init(\"labelTextAlign\")}>\n              <div value=\"\">系统自动</div>\n              <div value=\"left\">left</div>\n              <div value=\"right\">right</div>\n            </Select>\n          </FormItem>\n        </Form>\n\n        <h3>垂直</h3>\n\n        <Form\n          field={this.field}\n          size={getValue(\"size\")}\n          labelAlign={getValue(\"labelAlign\")}\n          labelTextAlign={getValue(\"labelTextAlign\")}\n          style={{ maxWidth: \"500px\" }}\n        >\n          <FormItem {...formItemLayout} label=\"账户：\">\n            <Input placeholder=\"请输入账户名\" id=\"userName\" name=\"userName\" />\n          </FormItem>\n\n          <FormItem {...formItemLayout} required label=\"密码：\">\n            <Input\n              htmlType=\"password\"\n              placeholder=\"请输入密码\"\n              id=\"password\"\n              name=\"password\"\n            />\n          </FormItem>\n\n          <FormItem {...formItemLayout} label=\"密码：\" validateStatus=\"error\">\n            <Input\n              htmlType=\"password\"\n              placeholder=\"请输入密码\"\n              id=\"password\"\n              name=\"password\"\n            />\n          </FormItem>\n\n          <FormItem {...formItemLayout} label=\"大小：\">\n            <Select style={{ width: \"100%\" }} {...init(\"size\")}>\n              <div value=\"small\">small</div>\n              <div value=\"medium\">medium</div>\n              <div value=\"large\">large</div>\n            </Select>\n          </FormItem>\n        </Form>\n\n        <h3>水平</h3>\n\n        <Form\n          size={getValue(\"size\")}\n          direction=\"hoz\"\n          labelAlign={getValue(\"labelAlign\")}\n        >\n          <FormItem label=\"账户：\">\n            <Input placeholder=\"请输入账户名\" id=\"userName\" name=\"userName\" />\n          </FormItem>\n\n          <FormItem label=\"密码：\">\n            <Input\n              htmlType=\"password\"\n              placeholder=\"请输入密码\"\n              id=\"password\"\n              name=\"password\"\n            />\n          </FormItem>\n          <FormItem label=\"密码：\" validateStatus=\"error\">\n            <Input\n              htmlType=\"password\"\n              placeholder=\"请输入密码\"\n              id=\"password\"\n              name=\"password\"\n            />\n          </FormItem>\n\n          <FormItem label=\"大小：\">\n            <Select style={{ width: \"100%\" }} {...init(\"size\")}>\n              <div value=\"small\">small</div>\n              <div value=\"medium\">medium</div>\n              <div value=\"large\">large</div>\n            </Select>\n          </FormItem>\n        </Form>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".demo-ctl {\n  background-color: #f1f1f1;\n  padding: 10.0px;\n  color: #0a7ac3;\n  border-left: 4.0px solid #0d599a;\n}\n","body":"\n`labelTextAlign` 文字左右对齐方式\n`labelAlign` label方位\n`size` 会强制设置 `FormItem` 下的所有组件的size\n\n"},{"title":"校验","order":"11","jsx":"import { Form, Input, Button, Radio, Field } from \"@icedesign/base\";\n\nconst { Item: FormItem } = Form;\nconst { Group: RadioGroup } = Radio;\n\nclass BasicDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.field = new Field(this);\n  }\n\n  handleReset(e) {\n    e.preventDefault();\n    this.field.reset();\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.field.validate((errors, values) => {\n      if (errors) {\n        console.log(\"Errors in form!!!\");\n        return;\n      }\n      console.log(\"Submit!!!\");\n      console.log(values);\n    });\n  }\n\n  userExists(rule, value, callback) {\n    if (!value) {\n      callback();\n    } else {\n      setTimeout(() => {\n        if (value === \"frank\") {\n          callback([new Error(\"抱歉，该用户名已被占用。\")]);\n        } else {\n          callback();\n        }\n      }, 1000);\n    }\n  }\n\n  checkPass(rule, value, callback) {\n    const { validate } = this.field;\n    if (value) {\n      validate([\"rePasswd\"]);\n    }\n    callback();\n  }\n\n  checkPass2(rule, value, callback) {\n    const { getValue } = this.field;\n    if (value && value !== getValue(\"passwd\")) {\n      callback(\"两次输入密码不一致！\");\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { init, getError, getState } = this.field;\n    const formItemLayout = {\n      labelCol: {\n        span: 6\n      },\n      wrapperCol: {\n        span: 14\n      }\n    };\n    return (\n      <Form field={this.field}>\n        <FormItem\n          label=\"用户名：\"\n          {...formItemLayout}\n          hasFeedback\n          help={\n            getState(\"name\") === \"validating\"\n              ? \"校验中...\"\n              : (getError(\"name\") || []).join(\", \")\n          }\n        >\n          <Input\n            maxLength={20}\n            hasLimitHint\n            placeholder=\"实时校验，输入 frank 看看\"\n            {...init(\"name\", {\n              rules: [\n                { required: true, min: 5, message: \"用户名至少为 5 个字符\" },\n                { validator: this.userExists }\n              ]\n            })}\n          />\n        </FormItem>\n\n        <FormItem label=\"邮箱：\" {...formItemLayout} hasFeedback>\n          <Input\n            type=\"email\"\n            placeholder=\"onBlur 与 onChange 相结合\"\n            {...init(\"email\", {\n              rules: [\n                { required: true, trigger: \"onBlur\" },\n                {\n                  type: \"email\",\n                  message: <span>请输入正确的邮箱地址</span>,\n                  trigger: [\"onBlur\", \"onChange\"]\n                }\n              ]\n            })}\n          />\n        </FormItem>\n\n        <FormItem label=\"密码：\" {...formItemLayout} hasFeedback>\n          <Input\n            htmlType=\"password\"\n            {...init(\"passwd\", {\n              rules: [\n                { required: true, whitespace: true, message: \"请填写密码\" },\n                { validator: this.checkPass.bind(this) }\n              ]\n            })}\n          />\n        </FormItem>\n\n        <FormItem label=\"确认密码：\" {...formItemLayout} hasFeedback>\n          <Input\n            htmlType=\"password\"\n            placeholder=\"两次输入密码保持一致\"\n            {...init(\"rePasswd\", {\n              rules: [\n                {\n                  required: true,\n                  whitespace: true,\n                  message: \"请再次输入密码\"\n                },\n                {\n                  validator: this.checkPass2.bind(this)\n                }\n              ]\n            })}\n          />\n        </FormItem>\n\n        <FormItem label=\"性别：\" hasFeedback {...formItemLayout}>\n          <RadioGroup\n            {...init(\"radio\", {\n              rules: [{ required: true, message: \"请选择您的性别\" }]\n            })}\n          >\n            <Radio value=\"male\">男</Radio>\n            <Radio value=\"female\">女</Radio>\n          </RadioGroup>\n        </FormItem>\n\n        <FormItem label=\"备注：\" {...formItemLayout}>\n          <Input\n            multiple\n            maxLength={20}\n            hasLimitHint\n            placeholder=\"随便写\"\n            {...init(\"textarea\", {\n              rules: [{ required: true, message: \"真的不打算写点什么吗？\" }]\n            })}\n          />\n        </FormItem>\n\n        <FormItem wrapperCol={{ offset: 6 }}>\n          <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>\n            确定\n          </Button>\n          &nbsp;&nbsp;&nbsp;\n          <Button onClick={this.handleReset.bind(this)}>重置</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<BasicDemo />, mountNode);\n\n","css":"","body":"\n基本的表单校验例子。\n\n"},{"title":"自定义校验规则","order":"13","jsx":"import { Form, Input, Button, Dialog, Field, Grid } from \"@icedesign/base\";\nimport classNames from \"classnames\";\n\nconst { Row, Col } = Grid;\n\nconst FormItem = Form.Item;\n\nfunction noop() {\n  return false;\n}\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.field = new Field(this);\n    this.state = {\n      passBarShow: false, // 是否显示密码强度提示条\n      rePassBarShow: false,\n      passStrength: \"L\", // 密码强度\n      rePassStrength: \"L\",\n      visible: false\n    };\n  }\n\n  handleSubmit() {\n    this.field.validate((errors, values) => {\n      if (errors) {\n        console.log(\"Errors in form!!!\");\n        return;\n      }\n      console.log(\"Submit!!!\");\n      console.log(values);\n      this.setState({ visible: false });\n    });\n  }\n\n  getPassStrenth(value, type) {\n    if (value) {\n      let strength;\n      // 密码强度的校验规则自定义，这里只是做个简单的示例\n      if (value.length < 6) {\n        strength = \"L\";\n      } else if (value.length <= 9) {\n        strength = \"M\";\n      } else {\n        strength = \"H\";\n      }\n      if (type === \"pass\") {\n        this.setState({ passBarShow: true, passStrength: strength });\n      } else {\n        this.setState({ rePassBarShow: true, rePassStrength: strength });\n      }\n    } else if (type === \"pass\") {\n      this.setState({ passBarShow: false });\n    } else {\n      this.setState({ rePassBarShow: false });\n    }\n  }\n\n  showDialog() {\n    this.setState({ visible: true });\n  }\n\n  hideDialog() {\n    this.setState({ visible: false });\n  }\n\n  checkPass(rule, value, callback) {\n    const field = this.field;\n    this.getPassStrenth(value, \"pass\");\n\n    if (field.getValue(\"pass\")) {\n      field.validate([\"rePass\"], { force: true });\n    }\n\n    callback();\n  }\n\n  checkPass2(rule, value, callback) {\n    const field = this.field;\n    this.getPassStrenth(value, \"rePass\");\n\n    if (value && value !== field.getValue(\"pass\")) {\n      callback(\"两次输入密码不一致！\");\n    } else {\n      callback();\n    }\n  }\n\n  renderPassStrengthBar(type) {\n    const strength =\n      type === \"pass\" ? this.state.passStrength : this.state.rePassStrength;\n    const classSet = classNames({\n      \"pwd-strength\": true,\n      \"pwd-strength-low\": strength === \"L\",\n      \"pwd-strength-medium\": strength === \"M\",\n      \"pwd-strength-high\": strength === \"H\"\n    });\n    const level = {\n      L: \"低\",\n      M: \"中\",\n      H: \"高\"\n    };\n\n    return (\n      <div>\n        <ul className={classSet}>\n          <li className=\"pwd-strength-item pwd-strength-item-1\" />\n          <li className=\"pwd-strength-item pwd-strength-item-2\" />\n          <li className=\"pwd-strength-item pwd-strength-item-3\" />\n          <span>{level[strength]}</span>\n        </ul>\n      </div>\n    );\n  }\n\n  render() {\n    const init = this.field.init;\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showDialog.bind(this)}>\n          修改密码\n        </Button>\n        <Dialog\n          title=\"修改密码\"\n          visible={this.state.visible}\n          onOk={this.handleSubmit.bind(this)}\n          onCancel={this.hideDialog.bind(this)}\n          onClose={this.hideDialog.bind(this)}\n        >\n          <Form field={this.field} style={{ width: 500 }}>\n            <Row>\n              <Col span=\"16\">\n                <FormItem\n                  label=\"密码：\"\n                  labelCol={{ span: 10 }}\n                  wrapperCol={{ span: 14 }}\n                >\n                  <Input\n                    htmlType=\"password\"\n                    {...init(\"pass\", {\n                      rules: [\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"请填写密码\"\n                        },\n                        { validator: this.checkPass.bind(this) }\n                      ]\n                    })}\n                    onContextMenu={noop}\n                    onPaste={noop}\n                    onCopy={noop}\n                    onCut={noop}\n                    autoComplete=\"off\"\n                    id=\"pass\"\n                  />\n                </FormItem>\n              </Col>\n              <Col span=\"8\">\n                {this.state.passBarShow\n                  ? this.renderPassStrengthBar(\"pass\")\n                  : null}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col span=\"16\">\n                <FormItem\n                  label=\"确认密码：\"\n                  labelCol={{ span: 10 }}\n                  wrapperCol={{ span: 14 }}\n                >\n                  <Input\n                    htmlType=\"password\"\n                    {...init(\"rePass\", {\n                      rules: [\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"请再次输入密码\"\n                        },\n                        {\n                          validator: this.checkPass2.bind(this)\n                        }\n                      ]\n                    })}\n                    onContextMenu={noop}\n                    onPaste={noop}\n                    onCopy={noop}\n                    onCut={noop}\n                    autoComplete=\"off\"\n                    id=\"rePass\"\n                  />\n                </FormItem>\n              </Col>\n              <Col span=\"8\">\n                {this.state.rePassBarShow\n                  ? this.renderPassStrengthBar(\"rePass\")\n                  : null}\n              </Col>\n            </Row>\n          </Form>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".pwd-strength {\n  display: inline-block;\n  margin-left: 8px;\n  margin-top: 0;\n  line-height: 32px;\n  height: 32px;\n  vertical-align: middle;\n}\n\n.pwd-strength-item {\n  float: left;\n  margin-right: 1px;\n  margin-top: 12px;\n  width: 19px;\n  height: 8px;\n  line-height: 8px;\n  list-style: none;\n  background-color: #f3f3f3;\n  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n}\n\n.pwd-strength-item-1 {\n  border-top-left-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n\n.pwd-strength-item-2 {\n  width: 20px;\n}\n\n.pwd-strength-item-3 {\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n  margin-right: 8px;\n}\n\n.pwd-strength-low .pwd-strength-item-1, .pwd-strength-medium .pwd-strength-item-1, .pwd-strength-high .pwd-strength-item-1 {\n  background-color: #FAC450;\n}\n\n.pwd-strength-medium .pwd-strength-item-2, .pwd-strength-high .pwd-strength-item-2 {\n  background-color: rgba(135, 208, 104, .6);\n  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#9987D068,endColorstr=#9987D068);\n}\n\n.pwd-strength-high .pwd-strength-item-3 {\n  background-color: #87D068;\n}\n","body":"\n这里使用了 validation 的 `validate(fields, callback)`  方法，在对第一次输入的密码进行校验时会触发二次密码的校验。\n密码校验实例。\n\n"},{"title":"校验其他组件","order":"12","jsx":"import {\n  Form,\n  Button,\n  Radio,\n  Select,\n  DatePicker,\n  NumberPicker,\n  Field\n} from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.field = new Field(this);\n  }\n\n  handleReset(e) {\n    e.preventDefault();\n    this.field.reset();\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.field.validate((errors, values) => {\n      if (errors) {\n        console.log(\"Errors in form!!!\");\n        return;\n      }\n      console.log(\"Submit!!!\");\n      console.log(values);\n    });\n  }\n\n  checkBirthday(rule, value, callback) {\n    console.log(value);\n    if (value && value.getTime() >= Date.now()) {\n      callback(new Error(\"你不可能在未来出生吧!\"));\n    } else {\n      callback();\n    }\n  }\n\n  checkPrime(rule, value, callback) {\n    if (value !== 11) {\n      callback(new Error(\"8~12之间的质数明明是11啊!\"));\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const init = this.field.init;\n\n    const formItemLayout = {\n      labelCol: {\n        span: 6\n      },\n      wrapperCol: {\n        span: 14\n      }\n    };\n\n    return (\n      <Form field={this.field}>\n        <FormItem label=\"国籍：\" {...formItemLayout}>\n          <Select\n            placeholder=\"请选择国家\"\n            style={{ width: 200 }}\n            {...init(\"select\", {\n              rules: [{ required: true, message: \"请选择您的国籍\" }]\n            })}\n          >\n            <li value=\"china\">中国</li>\n            <li value=\"use\">美国</li>\n            <li value=\"japan\">日本</li>\n            <li value=\"korean\">韩国</li>\n            <li value=\"Thailand\">泰国</li>\n          </Select>\n        </FormItem>\n\n        <FormItem label=\"喜欢的颜色：\" {...formItemLayout}>\n          <Select\n            multiple\n            placeholder=\"请选择颜色\"\n            style={{ width: 200 }}\n            {...init(\"multiSelect\", {\n              rules: [{ required: true, message: \"请选择您喜欢的颜色\" }]\n            })}\n          >\n            <li value=\"red\">红色</li>\n            <li value=\"orange\">橙色</li>\n            <li value=\"yellow\">黄色</li>\n            <li value=\"green\">绿色</li>\n            <li value=\"blue\">蓝色</li>\n          </Select>\n        </FormItem>\n\n        <FormItem label=\"性别：\" hasFeedback {...formItemLayout}>\n          <RadioGroup\n            {...init(\"radio\", {\n              rules: [{ required: true, message: \"请选择您的性别\" }]\n            })}\n          >\n            <Radio value=\"male\">男</Radio>\n            <Radio value=\"female\">女</Radio>\n          </RadioGroup>\n        </FormItem>\n\n        <FormItem label=\"生日：\" {...formItemLayout}>\n          <DatePicker\n            {...init(\"birthday\", {\n              rules: [\n                {\n                  required: true,\n                  type: \"date\",\n                  message: \"你的生日是什么呢?\"\n                },\n                {\n                  validator: this.checkBirthday\n                }\n              ]\n            })}\n          />\n        </FormItem>\n\n        <FormItem label=\"8~12间的质数：\" {...formItemLayout}>\n          <NumberPicker\n            min={8}\n            max={12}\n            {...init(\"primeNumber\", {\n              rules: [{ validator: this.checkPrime }]\n            })}\n          />\n        </FormItem>\n\n        <FormItem wrapperCol={{ span: 16, offset: 6 }}>\n          <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>\n            确定\n          </Button>\n          &nbsp;&nbsp;&nbsp;\n          <Button onClick={this.handleReset.bind(this)}>重置</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n`Select` `Radio` `DatePicker` `NumberPicker` 。\n提供以下组件表单域的校验。\n\n"},{"title":"校验提示","order":"10","jsx":"import {\n  Form,\n  Input,\n  DatePicker,\n  Radio,\n  NumberPicker,\n  Select\n} from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nconst formItemLayout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 14\n  }\n};\n\nReactDOM.render(\n  <Form>\n    <FormItem\n      label=\"失败校验：\"\n      {...formItemLayout}\n      validateStatus=\"error\"\n      help=\"请输入数字和字母组合\"\n    >\n      <Input defaultValue=\"无效选择\" id=\"error\" />\n    </FormItem>\n\n    <FormItem\n      label=\"校验中：\"\n      {...formItemLayout}\n      hasFeedback\n      validateStatus=\"loading\"\n      help=\"信息审核中...\"\n    >\n      <Input defaultValue=\"我是被校验的内容\" id=\"loading\" />\n    </FormItem>\n\n    <FormItem\n      label=\"成功校验：\"\n      {...formItemLayout}\n      hasFeedback\n      validateStatus=\"success\"\n    >\n      <Input defaultValue=\"我是正文\" id=\"success\" />\n    </FormItem>\n\n    <FormItem\n      label=\"失败校验：\"\n      {...formItemLayout}\n      hasFeedback\n      validateStatus=\"error\"\n      help=\"请输入数字和字母组合\"\n    >\n      <Input defaultValue=\"无效选择\" id=\"error\" />\n    </FormItem>\n\n    <FormItem\n      label=\"Datepicker：\"\n      {...formItemLayout}\n      validateStatus=\"error\"\n      help=\"请选择正确日期\"\n    >\n      <DatePicker />\n    </FormItem>\n\n    <FormItem label=\"性别：\" validateStatus=\"success\" {...formItemLayout}>\n      <RadioGroup>\n        <Radio value=\"male\">男</Radio>\n        <Radio value=\"female\">女</Radio>\n      </RadioGroup>\n    </FormItem>\n\n    <FormItem\n      label=\"年龄：\"\n      validateStatus=\"error\"\n      {...formItemLayout}\n      help=\"请选择国家\"\n    >\n      <Select placeholder=\"请选择国家\">\n        <li value=\"china\">中国</li>\n        <li value=\"use\">美国</li>\n        <li value=\"japan\">日本</li>\n        <li value=\"korean\">韩国</li>\n        <li value=\"Thailand\">泰国</li>\n      </Select>\n    </FormItem>\n\n    <FormItem label=\"国家：\" validateStatus=\"error\" {...formItemLayout}>\n      <NumberPicker />\n    </FormItem>\n  </Form>,\n  mountNode\n);\n\n","css":"","body":"\n**注意**: 反馈图标只对 `<Input />` 有效。\n如果是  `<Input>` 组件, 可在`<FormItem>`上面添加 `hasFeedback` 控制图标的展示\n为 `<FormItem>` 定义 `validateStatus` 属性控制三种校验状态。\n\n"}]},{"name":"Grid","category":"Components","title":"栅格","type":"布局","importStatement":"import { Grid } from '@icedesign/base';","body":"\n## 开发指南\n\n### 基本使用\n\n此栅格系统提供了320，480，720, 990，1200，1500等几乎所有主流分辨率场景的响应规则。<br>\n响应式栅格采用24列栅格体系和5分比实现，以满足2，3，4，5，6分比布局等多种情况。<br>\n固定栅格采用20px宽度作为单位栅格， 推荐使用9，10，12，14，16，18，24，但同时也提供了从1到30的所有栅格，也可根据需求定制固定栅格列。<br>\n响应式断点阈值为：xss(320px), xs(480px), s(720px), m(990px), l(1200px), xl(1500px)。<br />\n主要使用Flex实现，对IE9-的兼容通过`display:table;`实现，但IE9-下仅支持基本的响应式布局（详情请参考API和DEMO的说明）。\n\n","propsSchema":{"name":"Grid","subComponents":[{"name":"Row","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"行内容","docblock":"行内容"},"type":{"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}]},"required":false,"description":"布局方式 <br><br>**可选值**:<br>'fluid'(流体布局，仅设置最大宽度，宽度为各断点值，两侧根据分辨率情况自动留白)<br>'fixed'(固定宽度布局)<br>'wrap'(单行模式，列在行中宽度溢出后换行)<br>'no-wrap'(单行模式，列在行中宽度溢出后不换行)<br>'no-padding'(行边距以及所有列间距都为0)<br>'across'(通栏模式, 行边距为0)<br>'fixed'/'fluid', 'wrap'/'no-wrap', 'no-padding', 'across'可组合使用，例如: ['fixed', 'wrap', 'no-padding', 'across']","docblock":"布局方式 <br><br>**可选值**:<br>'fluid'(流体布局，仅设置最大宽度，宽度为各断点值，两侧根据分辨率情况自动留白)<br>'fixed'(固定宽度布局)<br>'wrap'(单行模式，列在行中宽度溢出后换行)<br>'no-wrap'(单行模式，列在行中宽度溢出后不换行)<br>'no-padding'(行边距以及所有列间距都为0)<br>'across'(通栏模式, 行边距为0)<br>'fixed'/'fluid', 'wrap'/'no-wrap', 'no-padding', 'across'可组合使用，例如: ['fixed', 'wrap', 'no-padding', 'across']\n@default 默认布局方式为 display:flex;width:100%;，两侧有边距留白。","defaultValue":{"value":"默认布局方式为 display:flex;width:100%;，两侧有边距留白。","computed":false}},"fixedWidth":{"type":{"name":"enum","value":[{"value":"'xxs'","computed":false,"description":"320px"},{"value":"'xs'","computed":false,"description":"480px"},{"value":"'s'","computed":false,"description":"720px"},{"value":"'m'","computed":false,"description":"990px"},{"value":"'l'","computed":false,"description":"1200px"},{"value":"'xl'","computed":false,"description":"1500px"}]},"required":false,"description":"固定宽度布局，指定固定宽度值后不再受断点值影响而变动","docblock":"固定宽度布局，指定固定宽度值后不再受断点值影响而变动\n@enumdesc 320px, 480px, 720px, 990px, 1200px, 1500px","value":[{"value":"'xxs'","computed":false,"description":"320px"},{"value":"'xs'","computed":false,"description":"480px"},{"value":"'s'","computed":false,"description":"720px"},{"value":"'m'","computed":false,"description":"990px"},{"value":"'l'","computed":false,"description":"1200px"},{"value":"'xl'","computed":false,"description":"1500px"}]},"align":{"type":{"name":"enum","value":[{"value":"'top'","computed":false,"description":"顶部对齐"},{"value":"'center'","computed":false,"description":"居中对齐"},{"value":"'bottom'","computed":false,"description":"底部对齐"},{"value":"'baseline'","computed":false,"description":"第一行文字基线对齐"},{"value":"'stretch'","computed":false,"description":"未设置高度或设为auto，将占满整个容器的高度，另还需手动设置 width:100%"}]},"required":false,"description":"(不支持IE9及以下浏览器)多列垂直方向对齐方式","docblock":"(不支持IE9及以下浏览器)多列垂直方向对齐方式\n@enumdesc 顶部对齐, 居中对齐, 底部对齐, 第一行文字基线对齐, 未设置高度或设为auto，将占满整个容器的高度，另还需手动设置 width:100%\n@default 'stretch'","value":[{"value":"'top'","computed":false,"description":"顶部对齐"},{"value":"'center'","computed":false,"description":"居中对齐"},{"value":"'bottom'","computed":false,"description":"底部对齐"},{"value":"'baseline'","computed":false,"description":"第一行文字基线对齐"},{"value":"'stretch'","computed":false,"description":"未设置高度或设为auto，将占满整个容器的高度，另还需手动设置 width:100%"}],"defaultValue":{"value":"'stretch'","computed":false}},"justify":{"type":{"name":"enum","value":[{"value":"'start'","computed":false,"description":"左对齐"},{"value":"'center'","computed":false,"description":"居中对齐"},{"value":"'end'","computed":false,"description":"右对齐"},{"value":"'space-between'","computed":false,"description":"两端对齐，列之间间距相等"},{"value":"'space-around'","computed":false,"description":"每列具有相同的左右间距，行两端间距是列间距的二分之一"}]},"required":false,"description":"(不支持IE9及以下浏览器)行内具有多余空间时的布局方式","docblock":"(不支持IE9及以下浏览器)行内具有多余空间时的布局方式\n@enumdesc 左对齐, 居中对齐, 右对齐, 两端对齐，列之间间距相等, 每列具有相同的左右间距，行两端间距是列间距的二分之一\n@default 'start'","value":[{"value":"'start'","computed":false,"description":"左对齐"},{"value":"'center'","computed":false,"description":"居中对齐"},{"value":"'end'","computed":false,"description":"右对齐"},{"value":"'space-between'","computed":false,"description":"两端对齐，列之间间距相等"},{"value":"'space-around'","computed":false,"description":"每列具有相同的左右间距，行两端间距是列间距的二分之一"}],"defaultValue":{"value":"'start'","computed":false}}},"methods":[],"order":1},{"name":"Col","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"列内容","docblock":"列内容"},"span":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24","docblock":"列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24"},"fixedSpan":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"固定列宽度，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30","docblock":"固定列宽度，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30"},"offset":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"（不支持IE9及以下浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24","docblock":"（不支持IE9及以下浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24"},"fixedOffset":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"（不支持IE9及以下浏览器）固定列偏移，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30","docblock":"（不支持IE9及以下浏览器）固定列偏移，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30"},"align":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'center'","computed":false},{"value":"'bottom'","computed":false},{"value":"'baseline'","computed":false},{"value":"'stretch'","computed":false}]},"required":false,"description":"(不支持IE9及以下浏览器)多列垂直方向对齐方式，可覆盖Row的align属性","docblock":"(不支持IE9及以下浏览器)多列垂直方向对齐方式，可覆盖Row的align属性"},"hidden":{"type":{"name":"union","value":[{"name":"bool"},{"name":"string"},{"name":"array"}]},"required":false,"description":"列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏）","docblock":"列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏）"},"xxs":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"object"}]},"required":false,"description":">=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象","docblock":">=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"},"xs":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"object"}]},"required":false,"description":">=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象","docblock":">=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"},"s":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"object"}]},"required":false,"description":">=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象","docblock":">=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"},"m":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"object"}]},"required":false,"description":">=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象","docblock":">=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"},"l":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"object"}]},"required":false,"description":">=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象","docblock":">=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"},"xl":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"object"}]},"required":false,"description":">=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象","docblock":">=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"}},"methods":[],"order":2}]},"propsREADME":"","methodREADME":[],"subComponentsREADME":[{"name":"Row","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 行内容 | ReactNode | -\ntype | 布局方式 <br><br>**可选值**:<br>'fluid'(流体布局，仅设置最大宽度，宽度为各断点值，两侧根据分辨率情况自动留白)<br>'fixed'(固定宽度布局)<br>'wrap'(单行模式，列在行中宽度溢出后换行)<br>'no-wrap'(单行模式，列在行中宽度溢出后不换行)<br>'no-padding'(行边距以及所有列间距都为0)<br>'across'(通栏模式, 行边距为0)<br>'fixed'/'fluid', 'wrap'/'no-wrap', 'no-padding', 'across'可组合使用，例如: ['fixed', 'wrap', 'no-padding', 'across'] | String/Array&lt;String&gt; | 默认布局方式为 display:flex;width:100%;，两侧有边距留白。\nfixedWidth | 固定宽度布局，指定固定宽度值后不再受断点值影响而变动<br><br>**可选值**:<br>'xxs'(320px)<br>'xs'(480px)<br>'s'(720px)<br>'m'(990px)<br>'l'(1200px)<br>'xl'(1500px) | Enum | -\nalign | (不支持IE9及以下浏览器)多列垂直方向对齐方式<br><br>**可选值**:<br>'top'(顶部对齐)<br>'center'(居中对齐)<br>'bottom'(底部对齐)<br>'baseline'(第一行文字基线对齐)<br>'stretch'(未设置高度或设为auto，将占满整个容器的高度，另还需手动设置 width:100%) | Enum | 'stretch'\njustify | (不支持IE9及以下浏览器)行内具有多余空间时的布局方式<br><br>**可选值**:<br>'start'(左对齐)<br>'center'(居中对齐)<br>'end'(右对齐)<br>'space-between'(两端对齐，列之间间距相等)<br>'space-around'(每列具有相同的左右间距，行两端间距是列间距的二分之一) | Enum | 'start'\n","methodREADME":[]},{"name":"Col","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 列内容 | ReactNode | -\nspan | 列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24 | String/Number | -\nfixedSpan | 固定列宽度，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30 | String/Number | -\noffset | （不支持IE9及以下浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24 | String/Number | -\nfixedOffset | （不支持IE9及以下浏览器）固定列偏移，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30 | String/Number | -\nalign | (不支持IE9及以下浏览器)多列垂直方向对齐方式，可覆盖Row的align属性<br><br>**可选值**:<br>'top', 'center', 'bottom', 'baseline', 'stretch' | Enum | -\nhidden | 列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏） | Boolean/String/Array | -\nxxs | >=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\nxs | >=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\ns | >=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\nm | >=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\nl | >=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\nxl | >=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\n","methodREADME":[]}],"demos":[{"title":"多列垂直方向对齐方式","order":"9","jsx":"import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">顶部对齐</div>\n    <Row className=\"demo-row\" align=\"top\">\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"100px\", lineHeight: \"100px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"50px\", lineHeight: \"50px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"150px\", lineHeight: \"150px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">居中对齐</div>\n    <Row className=\"demo-row\" align=\"center\">\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"100px\", lineHeight: \"100px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"50px\", lineHeight: \"50px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"150px\", lineHeight: \"150px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">底部对齐</div>\n    <Row className=\"demo-row\" align=\"bottom\">\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"100px\", lineHeight: \"100px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"50px\", lineHeight: \"50px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"150px\", lineHeight: \"150px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">第一行文字基线对齐</div>\n    <Row className=\"demo-row\" align=\"baseline\">\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"100px\", paddingTop: \"20px\", fontSize: \"30px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"50px\", paddingTop: \"20px\", fontSize: \"20px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"150px\", paddingTop: \"20px\", fontSize: \"40px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      占满整个容器的高度（需要将width设置为100%）\n    </div>\n    <Row className=\"demo-row\" align=\"stretch\">\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" style={{ width: \"100%\" }}>\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" style={{ width: \"100%\" }}>\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" style={{ width: \"100%\" }}>\n          col-8\n        </div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">单独设置列对齐方式</div>\n    <Row className=\"demo-row\" align=\"top\">\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"100px\", lineHeight: \"100px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\" align=\"bottom\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"50px\", lineHeight: \"50px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"150px\", lineHeight: \"150px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n（不支持IE9及以下浏览器）使用Flex的`align-items`和`align-self`属性实现，在`Row`上设置`align`属性，可控制`Row`下面所有`Col`的垂直方向对齐方式：start（顶部对齐，默认），center（居中对齐），end（底部对齐），baseline（第一行文字的基线对齐），stretch（如果未设置高度或设为auto，将占满整个容器的高度）；在`Col`上设置`align`属性，可允许它与其它列不一样的对齐方式，可覆盖`Row`的`align`属性。\n\n"},{"title":"基础布局","order":"0","jsx":"import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">单列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"24\">\n        <div className=\"demo-col-inset\">col-24</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">两列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"12\">\n        <div className=\"demo-col-inset\">col-12</div>\n      </Col>\n      <Col span=\"12\">\n        <div className=\"demo-col-inset\">col-12</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">三列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">四列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">五列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"1p5\">\n        <div className=\"demo-col-inset\">col-1p5</div>\n      </Col>\n      <Col span=\"1p5\">\n        <div className=\"demo-col-inset\">col-1p5</div>\n      </Col>\n      <Col span=\"1p5\">\n        <div className=\"demo-col-inset\">col-1p5</div>\n      </Col>\n      <Col span=\"1p5\">\n        <div className=\"demo-col-inset\">col-1p5</div>\n      </Col>\n      <Col span=\"1p5\">\n        <div className=\"demo-col-inset\">col-1p5</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">六列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n默认使用`flex`实现，IE9及其以下版本使用`display:table;`实现。\n通过`Col`的`span`属性指定该列占24分之几的空间。<br>\n`Row`为栅格系统的最外层容器（行），里面包括多个`Col`（列）。<br>\n\n"},{"title":"响应式布局","order":"7","jsx":"import { Grid, dom } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nconst { events } = dom;\nconst spans = [\n  { xs: 12, s: 8, m: 6 },\n  { xs: 6, s: 8, m: 6 },\n  { xs: 6, s: 8, m: 12 }\n];\n\nconst breakpoints = {\n  xs: 480,\n  s: 720,\n  m: 990\n};\n\nclass Demo extends React.Component {\n  componentDidMount() {\n    const row = ReactDOM.findDOMNode(this.refs.row);\n    const cols = [];\n    for (let i = 0; i < row.children.length; i++) {\n      cols.push(row.children[i]);\n    }\n\n    this.handleResize = () => {\n      let point = \"\";\n      const innerWidth =\n        window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth;\n      const keys = Object.keys(breakpoints);\n      for (let i = 0; i < keys.length; i++) {\n        const width = breakpoints[keys[i]];\n        const nextWidth = breakpoints[keys[i + 1]];\n        if (innerWidth > width && (innerWidth < nextWidth || !nextWidth)) {\n          point = keys[i];\n          break;\n        }\n      }\n\n      if (point) {\n        cols.forEach((col, index) => {\n          const colInset = col.children[0];\n          colInset.innerHTML = `col-${spans[index][point]}`;\n        });\n      }\n    };\n    events.on(window, \"resize\", this.handleResize);\n\n    this.handleResize();\n  }\n\n  componentWillUnmount() {\n    events.off(window, \"resize\", this.handleResize);\n  }\n\n  render() {\n    return (\n      <div className=\"demo\">\n        <div className=\"demo-title\">调整浏览器宽度查看各列所占栅格数变化</div>\n        <Row ref=\"row\" className=\"demo-row\">\n          {spans.map((span, index) => (\n            <Col key={index} {...span}>\n              <div className=\"demo-col-inset\" />\n            </Col>\n          ))}\n        </Row>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n提示类似Bootstrap的响应式设计，预设6个响应尺寸：xxs(320px), xs(480px), s(720px), m(990px), l(1200px), xl(1500px)。\n\n"},{"title":"指定列宽(固定栅格)","order":"4","jsx":"import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <Row className=\"demo-row\">\n      <Col fixedSpan=\"10\">\n        <div className=\"demo-col-inset\">col-fixed-10</div>\n      </Col>\n      <Col fixedSpan=\"18\">\n        <div className=\"demo-col-inset\">col-fixed-18</div>\n      </Col>\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n基础栅格宽度为`20px`，可用栅格为1到30，其宽度值为20 * 栅格数。\n\n"},{"title":"显示与隐藏","order":"8","jsx":"import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">\n      在所有断点下隐藏列，调整浏览器宽度查看各列隐藏还是显示\n    </div>\n    <Row className=\"demo-row\">\n      <Col span=\"8\" hidden>\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"16\" hidden>\n        <div className=\"demo-col-inset\">col-16</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      在某断点下(m)隐藏列，调整浏览器宽度查看各列隐藏还是显示\n    </div>\n    <Row className=\"demo-row\">\n      <Col span=\"8\" hidden=\"m\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"16\" hidden=\"m\">\n        <div className=\"demo-col-inset\">col-16</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      在部分断点下(m, l, xl)隐藏列，调整浏览器宽度查看各列隐藏还是显示\n    </div>\n    <Row className=\"demo-row\">\n      <Col span=\"8\" hidden={[\"m\", \"l\", \"xl\"]}>\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"16\" hidden={[\"m\", \"l\", \"xl\"]}>\n        <div className=\"demo-col-inset\">col-16</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n提供了强大的响应式的显示与隐藏功能，支持在不同断点下的显示与隐藏。\n\n"},{"title":"多列水平方向对齐方式","order":"10","jsx":"import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">左对齐</div>\n    <Row className=\"demo-row\" justify=\"start\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">居中对齐</div>\n    <Row className=\"demo-row\" justify=\"center\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">右对齐</div>\n    <Row className=\"demo-row\" justify=\"end\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">两端对齐，列之间的间隔都相等</div>\n    <Row className=\"demo-row\" justify=\"space-between\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      列两侧的间隔相等，列之间的间隔比列与边框的间隔大一倍\n    </div>\n    <Row className=\"demo-row\" justify=\"space-around\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n（不支持IE9及以下浏览器）使用Flex的`justify-content`属性实现行内多列水平方向对齐方式：start（左对齐，默认），center（居中对齐），end（右对齐），space-between（两端对齐，项目之间的间隔都相），space-around（两侧的间隔相等，列之间的间隔比列与边框的间隔大一倍）。\n\n"},{"title":"流式栅格和固定栅格混用","order":"4","jsx":"import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">两列布局，左列固定，右列自适应</div>\n    <Row className=\"demo-row\">\n      <Col fixedSpan=\"16\">\n        <div className=\"demo-col-inset\">col-fixed-16</div>\n      </Col>\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">两列布局，右列固定，左列自适应</div>\n    <Row className=\"demo-row\">\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n      <Col fixedSpan=\"16\">\n        <div className=\"demo-col-inset\">col-fixed-16</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">三列布局，左列右列固定，中间自适应</div>\n    <Row className=\"demo-row\">\n      <Col fixedSpan=\"8\">\n        <div className=\"demo-col-inset\">col-fixed-8</div>\n      </Col>\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n      <Col fixedSpan=\"8\">\n        <div className=\"demo-col-inset\">col-fixed-8</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n"},{"title":"嵌套布局","order":"2","jsx":"import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <Row className=\"demo-row\">\n      <Col span=\"10\">\n        <Row type=\"across\">\n          <Col span=\"6\">\n            <div className=\"demo-col-inset\">col-10-6</div>\n          </Col>\n          <Col span=\"18\">\n            <div className=\"demo-col-inset\">col-10-18</div>\n          </Col>\n        </Row>\n      </Col>\n      <Col span=\"14\">\n        <Row type=\"across\">\n          <Col span=\"18\">\n            <div className=\"demo-col-inset\">col-14-18</div>\n          </Col>\n          <Col span=\"6\">\n            <div className=\"demo-col-inset\">col-14-6</div>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n`Col`下也可嵌套`Row`，以完成更细致的布局，如果想保持不同嵌套的`Row`下的`Col`间间距相等，请设置`Row`的`type`为`across`，即通栏模式，或自己设置样式，将`Row`的左右padding设置为0。\n\n"},{"title":"偏移(固定栅格)","order":"6","jsx":"import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">常规偏移，可设置offset的值从0到23</div>\n    <Row className=\"demo-row\">\n      <Col fixedOffset=\"0\">\n        <div className=\"demo-col-inset\">offset-fixed-0</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col fixedOffset=\"4\">\n        <div className=\"demo-col-inset\">offset-fixed-4</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col fixedOffset=\"8\">\n        <div className=\"demo-col-inset\">offset-fixed-8</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col fixedOffset=\"12\">\n        <div className=\"demo-col-inset\">offset-fixed-12</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">自适应偏移</div>\n    <Row className=\"demo-row\">\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n      <Col fixedOffset=\"12\">\n        <div className=\"demo-col-inset\">offset-fixed-12</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n（不支持IE9及以下浏览器）列可以向右偏移一定的列数, 偏移的列数和固定栅格列数定义相同.\n\n"},{"title":"偏移(流式栅格)","order":"5","jsx":"import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">常规偏移，可设置offset的值从0到30</div>\n    <Row className=\"demo-row\">\n      <Col offset=\"0\">\n        <div className=\"demo-col-inset\">offset-fixed-0</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col offset=\"4\">\n        <div className=\"demo-col-inset\">offset-fixed-4</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col offset=\"8\">\n        <div className=\"demo-col-inset\">offset-fixed-8</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col offset=\"12\">\n        <div className=\"demo-col-inset\">offset-fixed-12</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">自适应偏移</div>\n    <Row className=\"demo-row\">\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n      <Col offset=\"12\">\n        <div className=\"demo-col-inset\">offset-12</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n（不支持IE9及以下浏览器）列可以向右偏移一定的列数，偏移的列数和流式布局栅格列数定义相同。\n\n"},{"title":"布局方式","order":"1","jsx":"import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">默认布局</div>\n    <Row className=\"demo-row\">\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">流式布局(fluid)</div>\n    <Row type=\"fluid\" className=\"demo-row\">\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">固定宽度布局(fixed)</div>\n    <Row type=\"fixed\" className=\"demo-row\">\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">固定宽度布局(fixed)，指定固定宽度</div>\n    <Row type=\"fixed\" fixedWidth=\"s\" className=\"demo-row\">\n      <Col>\n        <div className=\"demo-col-inset\">720px</div>\n      </Col>\n      <Col>\n        <div className=\"demo-col-inset\">720px</div>\n      </Col>\n      <Col>\n        <div className=\"demo-col-inset\">720px</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">单行模式(wrap)，列在行中宽度溢出后换行</div>\n    <Row type=\"wrap\" className=\"demo-row\">\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      单行模式(no-wrap)，列在行中宽度溢出后不换行\n    </div>\n    <Row type=\"no-wrap\" className=\"demo-row\">\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">无间距布局(no-padding)</div>\n    <Row type=\"no-padding\" className=\"demo-row\">\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">通栏布局(across)</div>\n    <Row type=\"across\" className=\"demo-row\">\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">多种布局模式组合使用(fixed, no-padding)</div>\n    <Row type={[\"fixed\", \"no-padding\"]} fixedWidth=\"s\" className=\"demo-row\">\n      <Col span=\"12\">\n        <div className=\"demo-col-inset\">col-12</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      多种布局模式组合使用(fluid, no-wrap, no-padding)\n    </div>\n    <Row type={[\"fluid\", \"no-wrap\", \"no-padding\"]} className=\"demo-row\">\n      <Col span=\"12\">\n        <div className=\"demo-col-inset\">col-12</div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n**Note:** 未来的`@alife/grid@1.x`中的默认布局即是`fluid`布局，并且去除最大宽度为1500px的限制。\n`across`为通拦模式，行边距为0。\n`no-padding`行边距以及所有列间距都为0。<br>\n`no-wrap`为单行模式, 列在行中宽度溢出后不换行。（IE9及以下版本不支持）<br>\n`wrap`为单行模式, 列在行中宽度溢出后换行。（IE9及以下版本不支持）<br>\n`fixed`为固定宽度布局，宽度为各断点值，两侧根据分辨率情况自动留白。<br>\n`fluid`也为流式布局，行的最大宽度随浏览器宽度变化而变化，直到最大宽度1500px。<br>\n默认布局为流式布局，行的最大宽度随浏览器宽度变化而变化。<br>\n\n"}]},{"name":"Icon","category":"Components","title":"图标","type":"展示","importStatement":"import { Icon } from '@icedesign/base';","body":"\n","propsSchema":{"name":"Icon","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"type":{"type":{"name":"string"},"required":false,"description":"指定显示哪种图标","docblock":"指定显示哪种图标"},"size":{"type":{"name":"enum","value":[{"value":"'xxs'","computed":false},{"value":"'xs'","computed":false},{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false},{"value":"'xl'","computed":false},{"value":"'xxl'","computed":false},{"value":"'xxxl'","computed":false}]},"required":false,"description":"指定图标大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"指定图标大小"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ntype | 指定显示哪种图标 | String | -\nsize | 指定图标大小<br><br>**可选值**:<br>'xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl' | Enum | 'medium'\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Icon } from \"@icedesign/base\";\n\nReactDOM.render(<Icon type=\"atm\" />, mountNode);\n\n","css":"","body":"\n展示图标基本使用方法。\n\n"},{"title":"尺寸","order":"2","jsx":"import { Icon } from \"@icedesign/base\";\n\nconst sizes = [\"xxs\", \"xs\", \"small\", \"medium\", \"large\", \"xl\", \"xxl\", \"xxxl\"];\n\nReactDOM.render(\n  <ul className=\"icon-sizes\">\n    {sizes.map((size, index) => (\n      <li key={index}>\n        <Icon type=\"smile\" size={size} />\n        <span>{size}</span>\n      </li>\n    ))}\n  </ul>,\n  mountNode\n);\n\n","css":".icon-sizes {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.icon-sizes li {\n    display: inline-block;\n    width: 80px;\n    height: 80px;\n}\n\n.icon-sizes i {\n    display: block;\n    margin: 12px auto 0 auto;\n    text-align: center;\n}\n\n.icon-sizes span {\n    display: block;\n    margin-top: 10px;\n    text-align: center;\n}\n","body":"\nICON的尺寸包括：`xxs`，`xs`，`small`，`medium`，`large`，`xl`，`xxl`，`xxxl`。\n\n"},{"title":"自定义样式","order":"3","jsx":"import { Icon } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <div className=\"icon-style-demo\">\n      <Icon type=\"success\" style={{ color: \"#1DC11D\", marginRight: \"10px\" }} />\n      这是一个成功的消息\n    </div>\n    <div className=\"icon-style-demo\">\n      <Icon type=\"warning\" style={{ color: \"#FFA003\", marginRight: \"10px\" }} />\n      这是一个警告的消息\n    </div>\n    <div className=\"icon-style-demo\">\n      <Icon type=\"error\" style={{ color: \"#FF3333\", marginRight: \"10px\" }} />\n      这是一个失败的消息\n    </div>\n  </div>,\n  mountNode\n);\n\n","css":".icon-style-demo {\n    margin-bottom: 10px;\n    color: #333;\n}\n","body":"\n图标字体本质上还是文字，可以使用 style 和 className 设置图标的大小和颜色。\n\n"},{"title":"图标列表","order":"1","jsx":"import { Icon, Feedback } from \"@icedesign/base\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\nconst types = [\n  \"all\",\n  \"cart\",\n  \"comments\",\n  \"cry\",\n  \"email\",\n  \"favorite\",\n  \"folder\",\n  \"form\",\n  \"help\",\n  \"refresh\",\n  \"set\",\n  \"training\",\n  \"account\",\n  \"atm\",\n  \"clock\",\n  \"attachment\",\n  \"3column\",\n  \"4column\",\n  \"discount\",\n  \"service\",\n  \"print\",\n  \"box\",\n  \"process\",\n  \"bags\",\n  \"electronics\",\n  \"gifts\",\n  \"lights\",\n  \"auto\",\n  \"browse\",\n  \"atm-away\",\n  \"scanning\",\n  \"compare\",\n  \"filter\",\n  \"pin\",\n  \"history\",\n  \"similar-product\",\n  \"link\",\n  \"cut\",\n  \"table\",\n  \"nav-list\",\n  \"image-text\",\n  \"text\",\n  \"move\",\n  \"subtract\",\n  \"dollar\",\n  \"office\",\n  \"operation\",\n  \"download\",\n  \"map\",\n  \"bad\",\n  \"good\",\n  \"skip\",\n  \"play\",\n  \"stop\",\n  \"compass\",\n  \"security\",\n  \"share\",\n  \"store\",\n  \"phone\",\n  \"ellipsis\",\n  \"email-filling\",\n  \"favorites-filling\",\n  \"account-filling\",\n  \"credit-level\",\n  \"credit-level-filling\",\n  \"mobile-phone\",\n  \"smile\",\n  \"personal-center\",\n  \"arrow-up-filling\",\n  \"arrow-right\",\n  \"arrow-left\",\n  \"arrow-down\",\n  \"arrow-up\",\n  \"add\",\n  \"minus\",\n  \"delete-filling\",\n  \"edit\",\n  \"error\",\n  \"select\",\n  \"ashbin\",\n  \"calendar\",\n  \"time\",\n  \"success\",\n  \"warning\",\n  \"search\",\n  \"display\",\n  \"category\",\n  \"prompt\",\n  \"arrow-down-filling\",\n  \"sorting\",\n  \"ascending\",\n  \"descending\",\n  \"success-filling\",\n  \"picture\",\n  \"close\",\n  \"semi-select\",\n  \"tag-subscript\",\n  \"survey\",\n  \"loading\",\n  \"arrow-double-left\",\n  \"arrow-double-right\"\n];\n\nlet customTypes = [];\n\n// 此处代码仅用于 fusion dev 展示自定义组件用\nif (window.customIcons) {\n  customTypes = window.customIcons;\n}\n\nconst handleCopy = () => Feedback.toast.success(\"Copied!\");\n\nReactDOM.render(\n  <div>\n    <div className=\"icon-list-title\">点击图标复制代码到剪贴板</div>\n    <ul className=\"icon-list\">\n      {types.map((type, index) => (\n        <CopyToClipboard\n          key={index}\n          text={`<Icon type=\"${type}\" />`}\n          onCopy={handleCopy}\n        >\n          <li>\n            <Icon type={type} size=\"xl\" />\n            <span>{type}</span>\n          </li>\n        </CopyToClipboard>\n      ))}\n    </ul>\n    {customTypes.length ? (\n      <div>\n        <div className=\"icon-list-custom-title\">自定义图标</div>\n        <ul className=\"icon-list\">\n          {customTypes.map((type, index) => (\n            <CopyToClipboard\n              key={index}\n              text={`<Icon type=\"${type}\" />`}\n              onCopy={handleCopy}\n            >\n              <li>\n                <Icon type={type} size=\"xl\" />\n                <span>{type}</span>\n              </li>\n            </CopyToClipboard>\n          ))}\n        </ul>\n      </div>\n    ) : null}\n  </div>,\n  mountNode\n);\n\n","css":".icon-list-title {\n    margin-bottom: 20px;\n    font-size: 24px;\n    color: #333;\n}\n\n.icon-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.icon-list li {\n    display: inline-block;\n    width: 160px;\n    height: 80px;\n    color: #333;\n    cursor: pointer;\n}\n\n.icon-list li:hover {\n    background-color: #f7f7f7;\n}\n\n.icon-list i {\n    display: block;\n    margin: 12px auto 0 auto;\n    text-align: center;\n}\n\n.icon-list span {\n    display: block;\n    margin-top: 10px;\n    text-align: center;\n}\n\n.icon-list-custom-title {\n    margin: 20px 0 20px 10px;\n    font-size: 20px;\n    color: #333;\n}\n","body":"\n点击图标复制代码。\n\n"}]},{"name":"Input","category":"Components","title":"输入框","type":"表单","importStatement":"import { Input } from '@icedesign/base';","body":"\n\n## 开发指南\n\n### 何时使用\n\n表单输入，一般配合Form使用\n\n","propsSchema":{"name":"Input","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"当前值","docblock":"当前值"},"defaultValue":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"初始化值","docblock":"初始化值"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false,"description":"小"},{"value":"'medium'","computed":false,"description":"中"},{"value":"'large'","computed":false,"description":"大"}]},"required":false,"description":"尺寸","defaultValue":{"value":"'medium'","computed":false},"docblock":"尺寸\n@enumdesc 小, 中, 大","value":[{"value":"'small'","computed":false,"description":"小"},{"value":"'medium'","computed":false,"description":"中"},{"value":"'large'","computed":false,"description":"大"}]},"disabled":{"type":{"name":"bool"},"required":false,"description":"状态 设置文本域禁用状态","defaultValue":{"value":"false","computed":false},"docblock":"状态 设置文本域禁用状态"},"multiple":{"type":{"name":"bool"},"required":false,"description":"是否为多行，不选则为单行","defaultValue":{"value":"false","computed":false},"docblock":"是否为多行，不选则为单行"},"maxLength":{"type":{"name":"number"},"required":false,"description":"最大长度","defaultValue":{"value":"null","computed":false},"docblock":"最大长度"},"hasLimitHint":{"type":{"name":"bool"},"required":false,"description":"是否展现最大长度样式","defaultValue":{"value":"false","computed":false},"docblock":"是否展现最大长度样式"},"cutString":{"type":{"name":"bool"},"required":false,"description":"是否允许切割字符串","defaultValue":{"value":"true","computed":false},"docblock":"是否允许切割字符串"},"hasClear":{"type":{"name":"bool"},"required":false,"description":"是否出现clear按钮","defaultValue":{"value":"false","computed":false},"docblock":"是否出现clear按钮"},"state":{"type":{"name":"enum","value":[{"value":"''","computed":false,"description":""},{"value":"'error'","computed":false,"description":"错误"},{"value":"'loading'","computed":false,"description":"校验中"},{"value":"'success'","computed":false,"description":"成功"}]},"required":false,"description":"状态（multiple模式不支持 loading/success 状态)","defaultValue":{"value":"''","computed":false},"docblock":"状态（multiple模式不支持 loading/success 状态)\n@enumdesc , 错误, 校验中, 成功","value":[{"value":"''","computed":false,"description":""},{"value":"'error'","computed":false,"description":"错误"},{"value":"'loading'","computed":false,"description":"校验中"},{"value":"'success'","computed":false,"description":"成功"}]},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"htmlType":{"type":{"name":"string"},"required":false,"description":"原生type","defaultValue":{"value":"'text'","computed":false},"docblock":"原生type"},"readOnly":{"type":{"name":"bool"},"required":false,"description":"只读","defaultValue":{"value":"false","computed":false},"docblock":"只读"},"trim":{"type":{"name":"bool"},"required":false,"description":"onChange返回会自动去除头尾空字符","defaultValue":{"value":"false","computed":false},"docblock":"onChange返回会自动去除头尾空字符"},"addonBefore":{"type":{"name":"node"},"required":false,"description":"文本域前附加内容","docblock":"文本域前附加内容"},"addonAfter":{"type":{"name":"node"},"required":false,"description":"文本域后附加内容","docblock":"文本域后附加内容"},"placeholder":{"type":{"name":"string"},"required":false,"description":"输入提示","docblock":"输入提示"},"onPressEnter":{"type":{"name":"func"},"required":false,"description":"按下回车的回调","defaultValue":{"value":"function() {\n}","computed":false},"docblock":"按下回车的回调","params":[],"returns":null},"onBlur":{"type":{"name":"func"},"required":false,"description":"失去焦点时候触发的回调","defaultValue":{"value":"function() {\n}","computed":false},"docblock":"失去焦点时候触发的回调","params":[],"returns":null},"onChange":{"type":{"name":"func"},"required":false,"description":"发生改变的时候触发的回调","defaultValue":{"value":"function() {\n}","computed":false},"docblock":"发生改变的时候触发的回调\n@param {String} value 数据\n@param {Event} e DOM事件对象","params":[{"name":"value","description":"数据","type":{"name":"String"}},{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null},"getValueLength":{"type":{"name":"func"},"required":false,"description":"自定义字符串计算长度方式","defaultValue":{"value":"function() {\n}","computed":false},"docblock":"自定义字符串计算长度方式\n@param {String} value 数据\n@returns {Number} 自定义长度","params":[{"name":"value","description":"数据","type":{"name":"String"}}],"returns":{"description":"自定义长度","type":{"name":"Number"}}},"rows":{"type":{"name":"number"},"required":false,"description":"multiple多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)","defaultValue":{"value":"4","computed":false},"docblock":"multiple多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)"},"textIndent":{"type":{"name":"number"},"required":false,"description":"文字缩进","docblock":"文字缩进"},"className":{"type":{"name":"string"},"required":false,"description":"自定义class","docblock":"自定义class"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nvalue | 当前值 | String/Number | -\ndefaultValue | 初始化值 | String/Number | -\nsize | 尺寸<br><br>**可选值**:<br>'small'(小)<br>'medium'(中)<br>'large'(大) | Enum | 'medium'\ndisabled | 状态 设置文本域禁用状态 | Boolean | false\nmultiple | 是否为多行，不选则为单行 | Boolean | false\nmaxLength | 最大长度 | Number | null\nhasLimitHint | 是否展现最大长度样式 | Boolean | false\ncutString | 是否允许切割字符串 | Boolean | true\nhasClear | 是否出现clear按钮 | Boolean | false\nstate | 状态（multiple模式不支持 loading/success 状态)<br><br>**可选值**:<br>''<br>'error'(错误)<br>'loading'(校验中)<br>'success'(成功) | Enum | ''\nstyle | 自定义内联样式 | Object | -\nhtmlType | 原生type | String | 'text'\nreadOnly | 只读 | Boolean | false\ntrim | onChange返回会自动去除头尾空字符 | Boolean | false\naddonBefore | 文本域前附加内容 | ReactNode | -\naddonAfter | 文本域后附加内容 | ReactNode | -\nplaceholder | 输入提示 | String | -\nonPressEnter | 按下回车的回调<br><br>**签名**:<br>Function() => void | Function | function() { }\nonBlur | 失去焦点时候触发的回调<br><br>**签名**:<br>Function() => void | Function | function() { }\nonChange | 发生改变的时候触发的回调<br><br>**签名**:<br>Function(value: String, e: Event) => void<br>**参数**:<br>*value*: {String} 数据<br>*e*: {Event} DOM事件对象 | Function | function() { }\ngetValueLength | 自定义字符串计算长度方式<br><br>**签名**:<br>Function(value: String) => Number<br>**参数**:<br>*value*: {String} 数据<br>**返回值**:<br>{Number} 自定义长度<br> | Function | function() { }\nrows | multiple多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题) | Number | 4\ntextIndent | 文字缩进 | Number | -\nclassName | 自定义class | String | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"Input 组合","order":"4","jsx":"import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input\n      addonBefore=\"http://\"\n      addonAfter=\".com\"\n      size=\"large\"\n      defaultValue=\"alibaba\"\n      maxLength={2}\n      hasLimitHint\n    />\n    <br />\n    <br />\n    <Input\n      addonBefore=\"http://\"\n      addonAfter=\".com\"\n      size=\"medium\"\n      value=\"alibaba\"\n    />\n    <br />\n    <br />\n    <Input\n      addonBefore=\"http://\"\n      addonAfter=\".com\"\n      size=\"small\"\n      value=\"alibaba\"\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n各类 `Input` 的组合展现。\n\n"},{"title":"Input 输入框","order":"0","jsx":"import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input size=\"large\" placeholder=\"Large\" />\n    <br />\n    <br />\n    <Input className=\"textClsName\" placeholder=\"Medium\" />\n    <br />\n    <br />\n    <Input placeholder=\"Small\" size=\"small\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n我们为 `<Input />` 输入框定义了三种尺寸（大、默认、小）\n\n"},{"title":"清除按钮","order":"8","jsx":"import { Input } from \"@icedesign/base\";\n\nconst onChange = value => {\n  console.log(value);\n};\nconst onBlur = e => {\n  console.log(e);\n};\n\nReactDOM.render(\n  <div>\n    <Input defaultValue=\"一键清除\" hasClear onChange={onChange} size=\"small\" />\n    <br />\n    <br />\n    <Input hasClear onChange={onChange} onBlur={onBlur} />\n    <br />\n    <br />\n    <Input defaultValue=\"一键清除\" hasClear onChange={onChange} size=\"large\" />\n    <br />\n    <br />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n通过设置 hasClear 添加清除按钮\n\n"},{"title":"禁用状态","order":"7","jsx":"import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input disabled placeholder=\"disabled\" size=\"small\" />\n\n    <br />\n    <br />\n\n    <Input\n      disabled\n      addonBefore=\"http://\"\n      addonAfter=\".com\"\n      size=\"medium\"\n      value=\"alibaba\"\n    />\n    <br />\n    <br />\n\n    <Input disabled placeholder=\"medium\" maxLength={10} hasLimitHint />\n    <br />\n    <br />\n\n    <Input multiple disabled placeholder=\"medium\" maxLength={10} hasLimitHint />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n为 `Input` 设置 `disabled` 状态；\n\n"},{"title":"最大长度","order":"9","jsx":"import { Input, NumberPicker } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      maxLen: 10,\n      control: \"maxLen control\"\n    };\n  }\n\n  onChange(v) {\n    console.log(v);\n    this.setState({\n      control: v\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Input\n          size=\"large\"\n          placeholder=\"Large\"\n          value={this.state.control}\n          maxLength={this.state.maxLen}\n          hasLimitHint\n          onChange={this.onChange.bind(this)}\n        />\n        <br />\n        <br />\n        <Input\n          placeholder=\"medium\"\n          maxLength={20}\n          hasLimitHint\n          cutString={false}\n          onChange={v => {\n            this.setState({ control: v });\n          }}\n        />\n        <br />\n        <br />\n        <Input size=\"small\" placeholder=\"small\" maxLength={100} hasLimitHint />\n        <br />\n        <br />\n        <Input multiple maxLength={100} rows=\"4\" hasLimitHint />\n        <br />\n        <br />\n        <Input maxLength={5} placeholder=\"原生maxLength=5\" />\n        <br />\n        <br />\n        maxLen受控：<NumberPicker\n          value={this.state.maxLen}\n          onChange={value => {\n            this.setState({ maxLen: parseInt(value) });\n          }}\n        />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n最大长度 hasLimitHint 会展现限制数字; cutString 可控制是否要切割字符串, 用于只展示最大长度\n\n"},{"title":"多行文本域","order":"6","jsx":"import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input multiple placeholder=\"multiple\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n设置 `Input` 为 多行文本域；\n\n"},{"title":"密码输入框","order":"7","jsx":"import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input htmlType=\"password\" size=\"small\" defaultValue=\"abcd\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n设置 `Input` 为 密码类型；\n\n"},{"title":"错误状态","order":"8","jsx":"import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input state=\"error\" placeholder=\"error\" size=\"small\" />\n    <br />\n    <br />\n    <Input\n      state=\"error\"\n      maxLength={100}\n      hasLimitHint\n      placeholder=\"error\"\n      size=\"medium\"\n    />\n    <br />\n    <br />\n\n    <Input state=\"error\" placeholder=\"error\" size=\"small\" multiple />\n\n    <br />\n    <br />\n    <Input state=\"success\" size=\"small\" value=\"success\" />\n    <br />\n    <br />\n    <Input\n      state=\"success\"\n      maxLength={100}\n      hasLimitHint\n      placeholder=\"success\"\n      size=\"medium\"\n    />\n    <br />\n    <br />\n    <Input state=\"success\" placeholder=\"success\" size=\"large\" />\n    <br />\n    <br />\n    <Input state=\"loading\" placeholder=\"loading\" size=\"small\" />\n    <br />\n    <br />\n    <Input state=\"loading\" placeholder=\"loading\" size=\"medium\" />\n    <br />\n    <br />\n    <Input state=\"loading\" placeholder=\"loading\" size=\"large\" />\n    <br />\n    <br />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n为 `Input` 设置 `error` 状态；\n\n"},{"title":"自定义style,className","order":"10","jsx":"import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input placeholder=\"width:400\" style={{ width: 400 }} />\n    <br />\n    <br />\n\n    <Input\n      addonBefore=\"http://\"\n      addonAfter=\".com\"\n      size=\"medium\"\n      value=\"alibaba\"\n      style={{ width: 400 }}\n    />\n    <br />\n    <br />\n\n    <Input\n      placeholder=\"medium\"\n      maxLength={10}\n      hasLimitHint\n      style={{ width: 400 }}\n    />\n    <br />\n    <br />\n    <Input\n      placeholder=\"medium\"\n      maxLength={10}\n      hasLimitHint\n      style={{ width: 400 }}\n      className=\"my-input-class\"\n      state=\"success\"\n    />\n    <br />\n    <br />\n    <Input placeholder=\"className\" className=\"my-input-class\" />\n    <Input htmlType=\"hidden\" />\n  </div>,\n  mountNode\n);\n\n","css":"body .my-input-class {\n    width:500px;\n}\n","body":"\n通过style设置宽度\n\n"},{"title":"trim","order":"9","jsx":"import { Input } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    value: \"\"\n  };\n  onChange(value) {\n    console.log(value);\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Input\n          trim\n          value={this.state.value}\n          onChange={this.onChange.bind(this)}\n          placeholder=\"无法输入空格哦！\"\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\nonChange返回会自动去除头尾空字符\n\n"}]},{"name":"Loading","category":"Components","title":"加载","type":"基本","importStatement":"import { Loading } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。\n\n### 注意事项\n\nLoading 默认使用 `display='inline-block'` 布局的方式包裹内部元素。\n\n如果希望 `通栏包裹` 可以修改 `<Loading style={{display: 'block'}} />`\n\n","propsSchema":{"name":"Loading","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"tip":{"type":{"name":"any"},"required":false,"description":"自定义内容","docblock":"自定义内容"},"visible":{"type":{"name":"bool"},"required":false,"description":"loading 状态, 默认 true","docblock":"loading 状态, 默认 true"},"className":{"type":{"name":"string"},"required":false,"description":"自定义class","docblock":"自定义class"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"shape":{"type":{"name":"enum","value":[{"value":"''","computed":false,"description":"无"},{"value":"'flower'","computed":false,"description":"icon"},{"value":"'fusion-reactor'","computed":false,"description":"fusion矢量"},{"value":"'dot-circle'","computed":false,"description":"点圈"}]},"required":false,"description":"动画类型","defaultValue":{"value":"''","computed":false},"docblock":"动画类型\n@enumdesc 无, icon, fusion矢量, 点圈","value":[{"value":"''","computed":false,"description":"无"},{"value":"'flower'","computed":false,"description":"icon"},{"value":"'fusion-reactor'","computed":false,"description":"fusion矢量"},{"value":"'dot-circle'","computed":false,"description":"点圈"}]},"color":{"type":{"name":"string"},"required":false,"description":"动画颜色","docblock":"动画颜色"},"children":{"type":{"name":"any"},"required":false,"description":"子元素","docblock":"子元素"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\ntip | 自定义内容 | any | -\nvisible | loading 状态, 默认 true | Boolean | -\nclassName | 自定义class | String | -\nstyle | 自定义内联样式 | Object | -\nshape | 动画类型<br><br>**可选值**:<br>''(无)<br>'flower'(icon)<br>'fusion-reactor'(fusion矢量)<br>'dot-circle'(点圈) | Enum | ''\ncolor | 动画颜色 | String | -\nchildren | 子元素 | any | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Loading } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Loading tip=\"加载中...\">\n    <div className=\"demo\">test</div>\n  </Loading>,\n  mountNode\n);\n\n","css":".demo {\n    width: 500px;\n    background-color: #0dcecb;\n    text-align: center;\n    padding:50px;\n}\n","body":"\n最简单的用法。\n\n"},{"title":"加载动画","order":"0","jsx":"import { Loading } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Loading shape=\"flower\" tip=\"loading...\" color=\"#333\">\n      <div className=\"demo\">flower</div>\n    </Loading>\n    <br />\n    <Loading shape=\"fusion-reactor\" color=\"#fff\">\n      <div className=\"demo\">fusion-reactor</div>\n    </Loading>\n    <Loading shape=\"dot-circle\">\n      <div className=\"demo\">dot-circle</div>\n    </Loading>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    width: 500px;\n    background-color: #0dcecb;\n    text-align: center;\n    padding:50px;\n}\n.next-loading {\n    margin-bottom: 5px;\n}\n","body":"\nshape 来区分多种加载动画\n\n"},{"title":"关闭加载","order":"0","jsx":"import { Loading, Form, Input, Button } from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\n\nconst layout = {\n  labelCol: {\n    fixedSpan: 4\n  },\n  wrapperCol: {\n    span: 18\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  setVisible(visible) {\n    this.setState({\n      visible\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Loading visible={this.state.visible} shape=\"fusion-reactor\">\n          <Form style={{ width: 500 }}>\n            <FormItem label=\"用户名：\" {...layout}>\n              <Input />\n            </FormItem>\n            <FormItem label=\"密码：\" {...layout}>\n              <Input htmlType=\"password\" placeholder=\"请输入密码\" />\n            </FormItem>\n            <FormItem label=\"备注：\" {...layout}>\n              <Input multiple />\n            </FormItem>\n          </Form>\n        </Loading>\n        <div style={{ paddingLeft: 100 }}>\n          <Button onClick={this.setVisible.bind(this, true)} type=\"primary\">\n            提交\n          </Button>\n          <Button onClick={this.setVisible.bind(this, false)}>取消</Button>\n        </div>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n可切换加载状态。\n\n"},{"title":"自定义","order":"0","jsx":"import { Loading } from \"@icedesign/base\";\n\nconst tipLoader1 = (\n  <div className=\"load-container load1\">\n    <div className=\"loader\">loading...</div>\n  </div>\n);\nconst tipLoader7 = (\n  <div className=\"load-container load7\">\n    <div className=\"loader\">loading...</div>\n  </div>\n);\n\nReactDOM.render(\n  <div>\n    <Loading tip={tipLoader1}>\n      <div className=\"demo\">test</div>\n    </Loading>\n    <Loading tip={tipLoader7}>\n      <div className=\"demo\">test</div>\n    </Loading>\n  </div>,\n  mountNode\n);\n\n","css":".demo {\n    width: 500px;\n    background-color: #0dcecb;\n    text-align: center;\n    padding:50px;\n}\n.next-loading {\n    margin-bottom: 5px;\n}\n\n/* css 从这里开始抄 */\n\n.load-container {\n  margin: 0 auto;\n  position: relative;\n}\n\n/* 第一个动画效果 */\n.load1 .loader,\n.load1 .loader:before,\n.load1 .loader:after {\n  background: #fff;\n  color: #fff;\n  -webkit-animation: load1 1s infinite ease-in-out;\n  animation: load1 1s infinite ease-in-out;\n  width: 1em;\n  height: 4em;\n}\n.load1 .loader:before,\n.load1 .loader:after {\n  position: absolute;\n  top: 0;\n  content: '';\n}\n.load1 .loader:before {\n  left: -1.5em;\n  -webkit-animation-delay: -0.32s;\n  animation-delay: -0.32s;\n}\n.load1 .loader {\n  text-indent: -9999em;\n  margin: 0 auto !important;\n  position: relative;\n  font-size: 11px;\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n}\n.load1 .loader:after {\n  left: 1.5em;\n}\n@-webkit-keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 ;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em ;\n    height: 5em;\n  }\n}\n@keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 ;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em ;\n    height: 5em;\n  }\n}\n\n/* 第二个动画效果 */\n.load7 .loader:before,\n.load7 .loader:after,\n.load7 .loader {\n  border-radius: 50%;\n  width: 2.5em;\n  height: 2.5em;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation: load7 1.8s infinite ease-in-out;\n  animation: load7 1.8s infinite ease-in-out;\n  top: -36px;\n}\n.load7 .loader {\n  margin: 0 auto !important;\n  font-size: 10px;\n  position: relative;\n  text-indent: -9999em;\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n}\n.load7 .loader:before {\n  left: -3.5em;\n  -webkit-animation-delay: -0.32s;\n  animation-delay: -0.32s;\n}\n.load7 .loader:after {\n  left: 3.5em;\n}\n.load7 .loader:before,\n.load7 .loader:after {\n  content: '';\n  position: absolute;\n  top: 0;\n}\n@-webkit-keyframes load7 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 2.5em 0 -1.3em #fff;\n  }\n  40% {\n    box-shadow: 0 2.5em 0 0 #fff;\n  }\n}\n@keyframes load7 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 2.5em 0 -1.3em #fff;\n  }\n  40% {\n    box-shadow: 0 2.5em 0 0 #fff;\n  }\n}\n","body":"\n你可以自定义动画，把自己的动画元素传进去, 需要自己写动画样式\n\n"}]},{"name":"LocaleProvider","category":"Utility","title":"国际化","importStatement":"import { LocaleProvider } from '@icedesign/base';","body":"\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { LocaleProvider, Select } from \"@icedesign/base\";\n\n/* eslint-disable react/no-multi-comp */\n\n// 组件\nclass MyComponent extends React.Component {\n  static propTypes = {\n    locale: React.PropTypes.object\n  };\n\n  render() {\n    const { locale } = this.props;\n\n    return <div ref=\"div\">{locale.content}</div>;\n  }\n}\nconst LocaleMyComponent = LocaleProvider(MyComponent);\nLocaleMyComponent.LOCALE = {\n  \"en-us\": {\n    content: \"en-us\"\n  },\n  \"zh-cn\": {\n    content: \"zh-cn\"\n  }\n};\n\n// 应用\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lang: \"zh-cn\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(lang) {\n    this.setState({\n      lang\n    });\n    // 获取被包裹组件的引用\n    console.log(this.refs[\"locale-my-component\"].getInstance());\n  }\n\n  render() {\n    const { lang } = this.state;\n\n    return (\n      <div>\n        <Select\n          style={{ marginBottom: \"20px\" }}\n          value={lang}\n          onChange={this.handleChange}\n        >\n          <Option value=\"zh-cn\">zh-cn</Option>\n          <Option value=\"en-us\">en-us</Option>\n        </Select>\n        <LocaleMyComponent language={lang} ref=\"locale-my-component\" />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n使用LocaleProvider包裹组件。\n\n"}]},{"name":"Menu","category":"Components","title":"菜单","type":"展示","importStatement":"import { Menu } from '@icedesign/base';","body":"\n\n","propsSchema":{"name":"Menu","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"selectedKeys":{"type":{"name":"union","value":[{"name":"array"},{"name":"node"}]},"required":false,"description":"当前选中的菜单项, 设置此属性，组件的选中变为受控状态","docblock":"当前选中的菜单项, 设置此属性，组件的选中变为受控状态"},"defaultSelectedKeys":{"type":{"name":"union","value":[{"name":"array"},{"name":"node"}]},"required":false,"description":"初始化选中的菜单项，只在组件初次render的时候生效","defaultValue":{"value":"[]","computed":false},"docblock":"初始化选中的菜单项，只在组件初次render的时候生效"},"selectMode":{"type":{"name":"enum","value":[{"value":"'single'","computed":false},{"value":"'multiple'","computed":false}]},"required":false,"description":"菜单选择的模式，支持单选和多选","docblock":"菜单选择的模式，支持单选和多选"},"openKeys":{"type":{"name":"union","value":[{"name":"array"},{"name":"node"}]},"required":false,"description":"当前打开的菜单项，设置此属性，组件的打开变为受控状态","docblock":"当前打开的菜单项，设置此属性，组件的打开变为受控状态"},"defaultOpenKeys":{"type":{"name":"union","value":[{"name":"array"},{"name":"node"}]},"required":false,"description":"初始化打开的菜单项，只在组件初次render的时候生效","defaultValue":{"value":"[]","computed":false},"docblock":"初始化打开的菜单项，只在组件初次render的时候生效"},"openMode":{"type":{"name":"enum","value":[{"value":"'single'","computed":false},{"value":"'multiple'","computed":false}]},"required":false,"description":"子菜单同时打开模式，是多个还是一个","defaultValue":{"value":"'multiple'","computed":false},"docblock":"子菜单同时打开模式，是多个还是一个"},"shallowSelect":{"type":{"name":"bool"},"required":false,"description":"如果此属性为true，表明只会选中第一级的菜单","docblock":"如果此属性为true，表明只会选中第一级的菜单"},"onSelect":{"type":{"name":"func"},"required":false,"description":"选中/取消选中了任意MenuItem","defaultValue":{"value":"() => {}","computed":false},"docblock":"选中/取消选中了任意MenuItem\n@param {Array} selectedKeys 选中的菜单的key\n@param {MenuItem} menuItem 当前点击的菜单项的实例\n@param {Object} meta 选中菜单项的上下级关系","params":[{"name":"selectedKeys","description":"选中的菜单的key","type":{"name":"Array"}},{"name":"menuItem","description":"当前点击的菜单项的实例","type":{"name":"MenuItem"}},{"name":"meta","description":"选中菜单项的上下级关系","type":{"name":"Object"}}],"returns":null},"onDeselect":{"type":{"name":"func"},"required":false,"description":"取消选中的菜单项","defaultValue":{"value":"() => {}","computed":false},"docblock":"取消选中的菜单项\n@param {String} selectedKey 取消选中的菜单项的key","params":[{"name":"selectedKey","description":"取消选中的菜单项的key","type":{"name":"String"}}],"returns":null},"onClick":{"type":{"name":"func"},"required":false,"description":"点击菜单项触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击菜单项触发的事件\n@param {Array} selectedKeys 点击的菜单项的key\n@param {MenuItem} menuItem 当前点击的菜单项的实例\n@param {Object} meta 选中菜单项的上下级关系","params":[{"name":"selectedKeys","description":"点击的菜单项的key","type":{"name":"Array"}},{"name":"menuItem","description":"当前点击的菜单项的实例","type":{"name":"MenuItem"}},{"name":"meta","description":"选中菜单项的上下级关系","type":{"name":"Object"}}],"returns":null},"onOpen":{"type":{"name":"func"},"required":false,"description":"打开子菜单的时候触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"打开子菜单的时候触发的事件\n@param {Array} openKeys 打开的子菜单的key","params":[{"name":"openKeys","description":"打开的子菜单的key","type":{"name":"Array"}}],"returns":null},"hasIcon":{"type":{"name":"bool"},"required":false,"description":"是否带有菜单的图标","defaultValue":{"value":"false","computed":false},"docblock":"是否带有菜单的图标"},"indentSize":{"type":{"name":"number"},"required":false,"description":"级联菜单下面缩进的尺寸","defaultValue":{"value":"20","computed":false},"docblock":"级联菜单下面缩进的尺寸"},"header":{"type":{"name":"any"},"required":false,"description":"配置菜单的头部","docblock":"配置菜单的头部"},"footer":{"type":{"name":"any"},"required":false,"description":"配置菜单的底部","docblock":"配置菜单的底部"},"multipleCol":{"type":{"name":"bool"},"required":false,"description":"是否启用多列模式","defaultValue":{"value":"false","computed":false},"docblock":"是否启用多列模式"},"autoFocusFirstItem":{"type":{"name":"bool"},"required":false,"description":"是否让第一个菜单自动获取焦点","defaultValue":{"value":"false","computed":false},"docblock":"是否让第一个菜单自动获取焦点"},"autoFocus":{"type":{"name":"bool"},"required":false,"description":"是否启用设置焦点功能","defaultValue":{"value":"true","computed":false},"docblock":"是否启用设置焦点功能"},"focusedKey":{"type":{"name":"string"},"required":false,"description":"焦点项索引值","docblock":"焦点项索引值"},"direction":{"type":{"name":"enum","value":[{"value":"'ver'","computed":false},{"value":"'hoz'","computed":false}]},"required":false,"description":"菜单的方向","defaultValue":{"value":"'ver'","computed":false},"docblock":"菜单的方向"}},"methods":[{"name":"_getLastChild","docblock":"获取最后一个直系子级\n@returns {*}\n@private","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"mixed"}},"description":"获取最后一个直系子级"},{"name":"_getNextChild","docblock":"获取当前子级的下一个子级\n@returns {*}\n@private","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"mixed"}},"description":"获取当前子级的下一个子级"},{"name":"_getPrevChild","docblock":"获取当前子级的上一个子级\n@returns {*}\n@private","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"mixed"}},"description":"获取当前子级的上一个子级"}],"subComponents":[{"name":"CheckboxItem","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"helper":{"type":{"name":"string"},"required":false,"description":"显示在菜单右侧的帮助文本，通常用于一些附加信息","defaultValue":{"value":"null","computed":false},"docblock":"显示在菜单右侧的帮助文本，通常用于一些附加信息"},"disabled":{"type":{"name":"bool"},"required":false,"description":"禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio","defaultValue":{"value":"false","computed":false},"docblock":"禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio"},"onClick":{"type":{"name":"func"},"required":false,"description":"点击了菜单项触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击了菜单项触发的事件\n@param {String} key 当前菜单项的key值\n@param {Event} e DOM事件","params":[{"name":"key","description":"当前菜单项的key值","type":{"name":"String"}},{"name":"e","description":"DOM事件","type":{"name":"Event"}}],"returns":null},"needIndent":{"type":{"name":"bool"},"required":false,"description":"是否显示缩进","defaultValue":{"value":"true","computed":false},"docblock":"是否显示缩进"},"checked":{"type":{"name":"bool"},"required":false,"description":"当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高","docblock":"当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高"},"onChange":{"type":{"name":"func"},"required":false,"description":"选择被改变的时候触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"选择被改变的时候触发的事件\n@param {Boolean} checked 是否选中","params":[{"name":"checked","description":"是否选中","type":{"name":"Boolean"}}],"returns":null}},"methods":[]},{"name":"Divider","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"}},"methods":[]},{"name":"Group","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"label":{"type":{"name":"any"},"required":false,"description":"分组的标签","defaultValue":{"value":"'menu-group'","computed":false},"docblock":"分组的标签"}},"methods":[]},{"name":"Item","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"helper":{"type":{"name":"string"},"required":false,"description":"显示在菜单右侧的帮助文本，通常用于一些附加信息","defaultValue":{"value":"null","computed":false},"docblock":"显示在菜单右侧的帮助文本，通常用于一些附加信息"},"disabled":{"type":{"name":"bool"},"required":false,"description":"禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio","defaultValue":{"value":"false","computed":false},"docblock":"禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio"},"selected":{"type":{"name":"bool"},"required":false,"description":"当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高","docblock":"当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高"},"onClick":{"type":{"name":"func"},"required":false,"description":"点击了菜单项触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击了菜单项触发的事件\n@param {String} key 当前菜单项的key值\n@param {Event} e DOM事件","params":[{"name":"key","description":"当前菜单项的key值","type":{"name":"String"}},{"name":"e","description":"DOM事件","type":{"name":"Event"}}],"returns":null},"hasSelectedIcon":{"type":{"name":"bool"},"required":false,"description":"是否显示选中图标","defaultValue":{"value":"true","computed":false},"docblock":"是否显示选中图标"},"needIndent":{"type":{"name":"bool"},"required":false,"description":"是否显示缩进","defaultValue":{"value":"true","computed":false},"docblock":"是否显示缩进"}},"methods":[]},{"name":"PopupItem","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"disabled":{"type":{"name":"bool"},"required":false,"description":"禁用当前菜单项, 被禁用不会触发事件","defaultValue":{"value":"false","computed":false},"docblock":"禁用当前菜单项, 被禁用不会触发事件"},"label":{"type":{"name":"any"},"required":false,"description":"菜单项的标签","defaultValue":{"value":"'popup-item'","computed":false},"docblock":"菜单项的标签"},"autoWidth":{"type":{"name":"bool"},"required":false,"description":"是否自动让弹出层的宽度和菜单项保持一致，逻辑是如果弹出层的宽度比菜单项小的话和菜单项保持一致，如果宽度大于菜单项则不做处理","defaultValue":{"value":"false","computed":false},"docblock":"是否自动让弹出层的宽度和菜单项保持一致，逻辑是如果弹出层的宽度比菜单项小的话和菜单项保持一致，如果宽度大于菜单项则不做处理"}},"methods":[]},{"name":"RadioItem","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"helper":{"type":{"name":"string"},"required":false,"description":"显示在菜单右侧的帮助文本，通常用于一些附加信息","defaultValue":{"value":"null","computed":false},"docblock":"显示在菜单右侧的帮助文本，通常用于一些附加信息"},"disabled":{"type":{"name":"bool"},"required":false,"description":"禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio","defaultValue":{"value":"false","computed":false},"docblock":"禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio"},"onClick":{"type":{"name":"func"},"required":false,"description":"点击了菜单项触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击了菜单项触发的事件\n@param {String} key 当前菜单项的key值\n@param {Event} e DOM事件","params":[{"name":"key","description":"当前菜单项的key值","type":{"name":"String"}},{"name":"e","description":"DOM事件","type":{"name":"Event"}}],"returns":null},"needIndent":{"type":{"name":"bool"},"required":false,"description":"是否显示缩进","defaultValue":{"value":"true","computed":false},"docblock":"是否显示缩进"},"checked":{"type":{"name":"bool"},"required":false,"description":"当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高","docblock":"当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高"},"onChange":{"type":{"name":"func"},"required":false,"description":"选择被改变的时候触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"选择被改变的时候触发的事件\n@param {Boolean} checked 是否选中","params":[{"name":"checked","description":"是否选中","type":{"name":"Boolean"}}],"returns":null}},"methods":[]},{"name":"SubMenu","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"label":{"type":{"name":"any"},"required":false,"description":"子菜单的标签","defaultValue":{"value":"'sub-item'","computed":false},"docblock":"子菜单的标签"},"visible":{"type":{"name":"bool"},"required":false,"description":"设置子菜单的显示状态","docblock":"设置子菜单的显示状态"},"mode":{"type":{"name":"enum","value":[{"value":"'inline'","computed":false},{"value":"'popup'","computed":false}]},"required":false,"description":"设置子菜单表现的形式","defaultValue":{"value":"'inline'","computed":false},"docblock":"设置子菜单表现的形式"},"triggerType":{"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'hover'","computed":false}]},"required":false,"description":"设置子菜单显示触发的类型","defaultValue":{"value":"'click'","computed":false},"docblock":"设置子菜单显示触发的类型"},"selectable":{"type":{"name":"bool"},"required":false,"description":"设置子菜单的label是否可以被选中","defaultValue":{"value":"false","computed":false},"docblock":"设置子菜单的label是否可以被选中"},"align":{"type":{"name":"enum","value":[{"value":"'outside'","computed":false},{"value":"'follow'","computed":false}]},"required":false,"description":"设置子菜单的跟随类型","defaultValue":{"value":"'follow'","computed":false},"docblock":"设置子菜单的跟随类型"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nselectedKeys | 当前选中的菜单项, 设置此属性，组件的选中变为受控状态 | Array/ReactNode | -\ndefaultSelectedKeys | 初始化选中的菜单项，只在组件初次render的时候生效 | Array/ReactNode | []\nselectMode | 菜单选择的模式，支持单选和多选<br><br>**可选值**:<br>'single', 'multiple' | Enum | -\nopenKeys | 当前打开的菜单项，设置此属性，组件的打开变为受控状态 | Array/ReactNode | -\ndefaultOpenKeys | 初始化打开的菜单项，只在组件初次render的时候生效 | Array/ReactNode | []\nopenMode | 子菜单同时打开模式，是多个还是一个<br><br>**可选值**:<br>'single', 'multiple' | Enum | 'multiple'\nshallowSelect | 如果此属性为true，表明只会选中第一级的菜单 | Boolean | -\nonSelect | 选中/取消选中了任意MenuItem<br><br>**签名**:<br>Function(selectedKeys: Array, menuItem: MenuItem, meta: Object) => void<br>**参数**:<br>*selectedKeys*: {Array} 选中的菜单的key<br>*menuItem*: {MenuItem} 当前点击的菜单项的实例<br>*meta*: {Object} 选中菜单项的上下级关系 | Function | () =&gt; {}\nonDeselect | 取消选中的菜单项<br><br>**签名**:<br>Function(selectedKey: String) => void<br>**参数**:<br>*selectedKey*: {String} 取消选中的菜单项的key | Function | () =&gt; {}\nonClick | 点击菜单项触发的事件<br><br>**签名**:<br>Function(selectedKeys: Array, menuItem: MenuItem, meta: Object) => void<br>**参数**:<br>*selectedKeys*: {Array} 点击的菜单项的key<br>*menuItem*: {MenuItem} 当前点击的菜单项的实例<br>*meta*: {Object} 选中菜单项的上下级关系 | Function | () =&gt; {}\nonOpen | 打开子菜单的时候触发的事件<br><br>**签名**:<br>Function(openKeys: Array) => void<br>**参数**:<br>*openKeys*: {Array} 打开的子菜单的key | Function | () =&gt; {}\nhasIcon | 是否带有菜单的图标 | Boolean | false\nindentSize | 级联菜单下面缩进的尺寸 | Number | 20\nheader | 配置菜单的头部 | any | -\nfooter | 配置菜单的底部 | any | -\nmultipleCol | 是否启用多列模式 | Boolean | false\nautoFocusFirstItem | 是否让第一个菜单自动获取焦点 | Boolean | false\nautoFocus | 是否启用设置焦点功能 | Boolean | true\nfocusedKey | 焦点项索引值 | String | -\ndirection | 菜单的方向<br><br>**可选值**:<br>'ver', 'hoz' | Enum | 'ver'\n","methodREADME":["**签名**:<br>Function() => mixed<br>**返回值**:<br>{mixed} null<br>","**签名**:<br>Function() => mixed<br>**返回值**:<br>{mixed} null<br>","**签名**:<br>Function() => mixed<br>**返回值**:<br>{mixed} null<br>"],"subComponentsREADME":[{"name":"CheckboxItem","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nhelper | 显示在菜单右侧的帮助文本，通常用于一些附加信息 | String | null\ndisabled | 禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio | Boolean | false\nonClick | 点击了菜单项触发的事件<br><br>**签名**:<br>Function(key: String, e: Event) => void<br>**参数**:<br>*key*: {String} 当前菜单项的key值<br>*e*: {Event} DOM事件 | Function | () =&gt; {}\nneedIndent | 是否显示缩进 | Boolean | true\nchecked | 当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高 | Boolean | -\nonChange | 选择被改变的时候触发的事件<br><br>**签名**:<br>Function(checked: Boolean) => void<br>**参数**:<br>*checked*: {Boolean} 是否选中 | Function | () =&gt; {}\n","methodREADME":[]},{"name":"Divider","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\n","methodREADME":[]},{"name":"Group","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nlabel | 分组的标签 | any | 'menu-group'\n","methodREADME":[]},{"name":"Item","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nhelper | 显示在菜单右侧的帮助文本，通常用于一些附加信息 | String | null\ndisabled | 禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio | Boolean | false\nselected | 当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高 | Boolean | -\nonClick | 点击了菜单项触发的事件<br><br>**签名**:<br>Function(key: String, e: Event) => void<br>**参数**:<br>*key*: {String} 当前菜单项的key值<br>*e*: {Event} DOM事件 | Function | () =&gt; {}\nhasSelectedIcon | 是否显示选中图标 | Boolean | true\nneedIndent | 是否显示缩进 | Boolean | true\n","methodREADME":[]},{"name":"PopupItem","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ndisabled | 禁用当前菜单项, 被禁用不会触发事件 | Boolean | false\nlabel | 菜单项的标签 | any | 'popup-item'\nautoWidth | 是否自动让弹出层的宽度和菜单项保持一致，逻辑是如果弹出层的宽度比菜单项小的话和菜单项保持一致，如果宽度大于菜单项则不做处理 | Boolean | false\n","methodREADME":[]},{"name":"RadioItem","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nhelper | 显示在菜单右侧的帮助文本，通常用于一些附加信息 | String | null\ndisabled | 禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio | Boolean | false\nonClick | 点击了菜单项触发的事件<br><br>**签名**:<br>Function(key: String, e: Event) => void<br>**参数**:<br>*key*: {String} 当前菜单项的key值<br>*e*: {Event} DOM事件 | Function | () =&gt; {}\nneedIndent | 是否显示缩进 | Boolean | true\nchecked | 当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高 | Boolean | -\nonChange | 选择被改变的时候触发的事件<br><br>**签名**:<br>Function(checked: Boolean) => void<br>**参数**:<br>*checked*: {Boolean} 是否选中 | Function | () =&gt; {}\n","methodREADME":[]},{"name":"SubMenu","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nlabel | 子菜单的标签 | any | 'sub-item'\nvisible | 设置子菜单的显示状态 | Boolean | -\nmode | 设置子菜单表现的形式<br><br>**可选值**:<br>'inline', 'popup' | Enum | 'inline'\ntriggerType | 设置子菜单显示触发的类型<br><br>**可选值**:<br>'click', 'hover' | Enum | 'click'\nselectable | 设置子菜单的label是否可以被选中 | Boolean | false\nalign | 设置子菜单的跟随类型<br><br>**可选值**:<br>'outside', 'follow' | Enum | 'follow'\n","methodREADME":[]}],"demos":[{"title":"基本","order":"0","jsx":"import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onClick={onClick} className=\"customize-limit\">\n    <Menu.Item key=\"1\">Option 1</Menu.Item>\n    <Menu.Item disabled key=\"2\">\n      Option 2\n    </Menu.Item>\n    <Menu.Divider key=\"d\" />\n    <Menu.SubMenu label=\"Sub Menu\">\n      <Menu.Item>Option 3</Menu.Item>\n    </Menu.SubMenu>\n    <Menu.Item>Option 4</Menu.Item>\n  </Menu>,\n  mountNode\n);\n\n","css":".customize-limit {\n    width: 200px;\n}\n","body":"\n最简单的用法\n\n"},{"title":"分组","order":"1","jsx":"import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onClick={onClick} className=\"customize-limit\">\n    <Menu.Group label=\"Group 1\" key=\"xxx\">\n      <Menu.Item key=\"1\">Option 1</Menu.Item>\n      <Menu.Item key=\"2\">Option 2</Menu.Item>\n      <Menu.Item key=\"3\">Option 3</Menu.Item>\n    </Menu.Group>\n    <Menu.Group label=\"Group 2\" key=\"xyz\">\n      <Menu.Item key=\"12\">Option 1</Menu.Item>\n      <Menu.Item key=\"22\">Option 2</Menu.Item>\n      <Menu.Item key=\"32\">Option 3</Menu.Item>\n    </Menu.Group>\n  </Menu>,\n  mountNode\n);\n\n","css":".customize-limit {\n    width: 200px;\n}\n","body":"\n分组菜单\n\n"},{"title":"头尾","order":"2","jsx":"import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu\n    onClick={onClick}\n    className=\"customize-limit\"\n    header={<h3>分组菜单</h3>}\n    footer={<h3>菜单尾部</h3>}\n  >\n    <Menu.Item key=\"1\" helper=\"CTRL+P\">\n      Option 1\n    </Menu.Item>\n    <Menu.Item key=\"2\">Option 2</Menu.Item>\n    <Menu.Item key=\"3\">Option 3</Menu.Item>\n    <Menu.Item key=\"4\">Option 4</Menu.Item>\n  </Menu>,\n  mountNode\n);\n\n","css":".customize-limit {\n    width: 200px;\n}\n.customize-limit h3 {\n    padding-left:10px;\n    font-size:14px;\n    color:#666;\n    margin:0;\n}\n","body":"\n可以设置菜单的头尾\n\n"},{"title":"Checkbox模式","order":"9","jsx":"import { Menu } from \"@icedesign/base\";\n\nconst onSelect = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <div>\n    <Menu onSelect={onSelect} className=\"customize-limit\">\n      <Menu.CheckboxItem key=\"1\">Option 1</Menu.CheckboxItem>\n      <Menu.CheckboxItem disabled key=\"2\">\n        Option 2\n      </Menu.CheckboxItem>\n      <Menu.Divider key=\"5\" />\n      <Menu.CheckboxItem key=\"3\">Option 3</Menu.CheckboxItem>\n      <Menu.CheckboxItem key=\"4\">Option 4</Menu.CheckboxItem>\n    </Menu>\n  </div>,\n  mountNode\n);\n\n","css":".customize-limit {\n    width: 200px;\n}\n","body":"\n多选菜单 Checkbox 模式\n\n"},{"title":"普通多选","order":"7","jsx":"import { Menu } from \"@icedesign/base\";\n\nconst onSelect = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onSelect={onSelect} selectMode=\"multiple\" className=\"customize-limit\">\n    <Menu.Item key=\"1\">Option 1</Menu.Item>\n    <Menu.Item disabled key=\"2\">\n      Option 2\n    </Menu.Item>\n    <Menu.Divider key=\"5\" />\n    <Menu.Item key=\"3\">Option 3</Menu.Item>\n    <Menu.Item key=\"4\">Option 4</Menu.Item>\n  </Menu>,\n  mountNode\n);\n\n","css":".customize-limit {\n    width: 200px;\n}\n","body":"\n多选菜单\n\n"},{"title":"外部弹出菜单","order":"5","jsx":"import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onClick={onClick} className=\"customize-limit\">\n    <Menu.PopupItem label=\"Popup Item 1\" key=\"xxx\">\n      <Menu>\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item key=\"2\">Option 2</Menu.Item>\n      </Menu>\n    </Menu.PopupItem>\n    <Menu.PopupItem label=\"Popup Item 2\" key=\"yyy\">\n      <Menu>\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n      </Menu>\n    </Menu.PopupItem>\n  </Menu>,\n  mountNode\n);\n\n","css":".customize-limit {\n    width: 200px;\n}\n","body":"\n使用 PopupItem 弹出子菜单，与 SubMenu[mode=popup] 的区别是子菜单会渲染到追加到 body 尾部的外部节点中\n\n"},{"title":"Radio模式","order":"8","jsx":"import { Menu } from \"@icedesign/base\";\n\nconst onSelect = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onSelect={onSelect} className=\"customize-limit\">\n    <Menu.RadioItem key=\"1\">Option 1</Menu.RadioItem>\n    <Menu.RadioItem disabled key=\"2\">\n      Option 2\n    </Menu.RadioItem>\n    <Menu.Divider key=\"5\" />\n    <Menu.RadioItem key=\"3\">Option 3</Menu.RadioItem>\n    <Menu.RadioItem key=\"4\">Option 4</Menu.RadioItem>\n  </Menu>,\n  mountNode\n);\n\n","css":".customize-limit {\n    width: 200px;\n}\n","body":"\n单选菜单 Radio 模式\n\n"},{"title":"单选","order":"6","jsx":"import { Menu } from \"@icedesign/base\";\n\nconst onSelect = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onSelect={onSelect} selectMode=\"single\" className=\"customize-limit\">\n    <Menu.Item key=\"1\">Option 1</Menu.Item>\n    <Menu.Item disabled key=\"2\">\n      Option 2\n    </Menu.Item>\n    <Menu.Divider key=\"5\" />\n    <Menu.Item key=\"3\">Option 3</Menu.Item>\n    <Menu.Item key=\"4\">Option 4</Menu.Item>\n  </Menu>,\n  mountNode\n);\n\n","css":".customize-limit {\n    width: 200px;\n}\n","body":"\n单选菜单\n\n"},{"title":"内联菜单","order":"3","jsx":"import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onClick={onClick} openMode=\"single\" className=\"customize-limit\">\n    <Menu.SubMenu label=\"Sub Menu 1\" key=\"xxx\">\n      <Menu.Item key=\"1\">Option 1</Menu.Item>\n      <Menu.Item key=\"2\">Option 2</Menu.Item>\n    </Menu.SubMenu>\n    <Menu.SubMenu label=\"Sub Menu 2\" key=\"yyy\">\n      <Menu.Item key=\"3\">Option 3</Menu.Item>\n    </Menu.SubMenu>\n  </Menu>,\n  mountNode\n);\n\n","css":".customize-limit {\n    width: 200px;\n}\n","body":"\nSubMenu 的内联模式\n\n"},{"title":"弹出菜单","order":"4","jsx":"import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onClick={onClick} openMode=\"single\" className=\"customize-limit\">\n    <Menu.SubMenu mode=\"popup\" label=\"Sub Menu 1\" key=\"xxx\">\n      <Menu.Item key=\"1\">Option 1</Menu.Item>\n      <Menu.Item key=\"2\">Option 2</Menu.Item>\n    </Menu.SubMenu>\n    <Menu.SubMenu mode=\"popup\" label=\"Sub Menu 2\" key=\"yyy\">\n      <Menu.Item key=\"3\">Option 3</Menu.Item>\n    </Menu.SubMenu>\n  </Menu>,\n  mountNode\n);\n\n","css":".customize-limit {\n    width: 200px;\n}\n","body":"\nSubMenu 的弹出模式，与 PopupItem 的区别是子菜单会被渲染在内容区域里\n\n"},{"title":"子菜单标签可选","order":"10","jsx":"import { Radio, Menu } from \"@icedesign/base\";\n\nconst onSelect = (...args) => {\n  console.log(...args);\n};\n\nclass App extends React.Component {\n  state = {\n    subMenuSelectable: false\n  };\n\n  toggleSubMenuSelectable = value => {\n    this.setState({\n      subMenuSelectable: value === \"true\"\n    });\n  };\n\n  render() {\n    const { subMenuSelectable } = this.state;\n\n    return (\n      <div>\n        <div className=\"button-wraper\">\n          <Radio.Group\n            shape=\"button\"\n            size=\"large\"\n            value={subMenuSelectable ? \"true\" : \"false\"}\n            onChange={this.toggleSubMenuSelectable}\n          >\n            <Radio value=\"false\">子菜单标签不可选</Radio>\n            <Radio value=\"true\">子菜单标签可选</Radio>\n          </Radio.Group>\n        </div>\n        <Menu\n          selectMode=\"single\"\n          onSelect={onSelect}\n          defaultOpenKeys={[\"4\", \"5\"]}\n          openMode=\"multiple\"\n          className=\"customize-limit\"\n        >\n          <Menu.Item key=\"1\">Option 1</Menu.Item>\n          <Menu.Item key=\"2\">Option 2</Menu.Item>\n          <Menu.Item key=\"3\">Option 3</Menu.Item>\n          <Menu.SubMenu\n            key=\"4\"\n            label=\"Sub Menu 1\"\n            selectable={this.state.subMenuSelectable}\n          >\n            <Menu.Item key=\"4-1\">Option 1</Menu.Item>\n            <Menu.Item key=\"4-2\">Option 2</Menu.Item>\n          </Menu.SubMenu>\n          <Menu.SubMenu\n            key=\"5\"\n            label=\"Sub Menu 2\"\n            selectable={this.state.subMenuSelectable}\n          >\n            <Menu.Item key=\"5-1\">Option 1</Menu.Item>\n            <Menu.Item key=\"5-2\">Option 2</Menu.Item>\n          </Menu.SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".button-wraper {\n    margin: 0 0 20px 0;\n}\n.customize-limit{\n    width:200px;\n}\n","body":"\n"}]},{"name":"Moment","category":"Components","title":"时间处理","type":"基本","importStatement":"import { moment } from '@icedesign/base';","body":"\n## Guide\n\nmoment.js 是一个 JavaScript 日期处理类库，用于解析、检验、操作、以及显示日期。\n本组件是 moment.js 的一个精简版，删掉了多余的 locale，留下主流的 locale 文案。\n具体用法参考 [moment.js](https://momentjs.com/docs/#/parsing/) 的官方文档。\n\n语言 | 缩写 | 备注\n----- | ----- | -----\n英语 | en-us | 默认\n阿拉伯语 | ar |\n德语 | de |\n西班牙语 | es |\n法语 | fr |\n印地语 | hi |\n意大利语 | it |\n日语 | ja |\n韩语 | ko |\n葡萄牙语 | pt |\n俄语 | ru |\n简体中文 | zh-cn |\n繁体中文 | zh-hk |\n繁体中文 | zh-tw |\n\n如果您不熟悉 moment.js ，强烈建议您先阅读官方的文档。\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { moment } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lang: \"zh-cn\"\n    };\n  }\n  onChangeLang(e) {\n    this.setState({\n      lang: e.target.value\n    });\n  }\n  render() {\n    const { lang } = this.state;\n\n    moment.locale(lang);\n\n    return (\n      <div>\n        <select value={lang} onChange={this.onChangeLang.bind(this)}>\n          <option value=\"none\">none</option>\n          <option value=\"en-us\">en-us</option>\n          <option value=\"ar\">ar</option>\n          <option value=\"de\">de</option>\n          <option value=\"es\">es</option>\n          <option value=\"fr\">fr</option>\n          <option value=\"hi\">hi</option>\n          <option value=\"it\">it</option>\n          <option value=\"ja\">ja</option>\n          <option value=\"ko\">ko</option>\n          <option value=\"pt\">pt</option>\n          <option value=\"ru\">ru</option>\n          <option value=\"zh-cn\">zh-cn</option>\n          <option value=\"zh-hk\">zh-hk</option>\n          <option value=\"zh-tw\">zh-tw</option>\n        </select>\n        <br />\n        <br />\n        <h3>Format Dates</h3>\n        <ul className=\"box\">\n          <li>\n            <span className=\"code\">\n              moment().format('MMMM Do YYYY, h:mm:ss a');\n            </span>\n            <span className=\"display\">\n              //{moment().format(\"MMMM Do YYYY, h:mm:ss a\")}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format('dddd');</span>\n            <span className=\"display\">//{moment().format(\"dddd\")}</span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format(\"MMM Do YY\");</span>\n            <span className=\"display\">//{moment().format(\"MMM Do YY\")}</span>\n          </li>\n          <li>\n            <span className=\"code\">\n              moment().format('YYYY [escaped] YYYY');\n            </span>\n            <span className=\"display\">\n              //{moment().format(\"YYYY [escaped] YYYY\")}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format();</span>\n            <span className=\"display\">//{moment().format()}</span>\n          </li>\n        </ul>\n        <h3>Relative Time</h3>\n        <ul className=\"box\">\n          <li>\n            <span className=\"code\">\n              moment(\"20111031\", \"YYYYMMDD\").fromNow();\n            </span>\n            <span className=\"display\">\n              //{moment(\"20111031\", \"YYYYMMDD\").fromNow()}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().startOf('day').fromNow();</span>\n            <span className=\"display\">\n              //{moment()\n                .startOf(\"day\")\n                .fromNow()}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().endOf('day').fromNow();</span>\n            <span className=\"display\">\n              //{moment()\n                .endOf(\"day\")\n                .fromNow()}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().startOf('hour').fromNow();</span>\n            <span className=\"display\">\n              //{moment()\n                .startOf(\"hour\")\n                .fromNow()}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format();</span>\n            <span className=\"display\">//{moment().format()}</span>\n          </li>\n        </ul>\n        <h3>Calendar Time</h3>\n        <ul className=\"box\">\n          <li>\n            <span className=\"code\">\n              moment().subtract(10, 'days').calendar();\n            </span>\n            <span className=\"display\">\n              //{moment()\n                .subtract(10, \"days\")\n                .calendar()}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().calendar();</span>\n            <span className=\"display\">//{moment().calendar()}</span>\n          </li>\n          <li>\n            <span className=\"code\">moment().add(10, 'days').calendar();</span>\n            <span className=\"display\">\n              //{moment()\n                .add(10, \"days\")\n                .calendar()}\n            </span>\n          </li>\n        </ul>\n        <h3>Multiple Locale Support</h3>\n        <ul className=\"box\">\n          <li>\n            <span className=\"code\">moment.locale();</span>\n            <span className=\"display\">//{moment.locale()}</span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format('LT');</span>\n            <span className=\"display\">//{moment().format(\"LT\")}</span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format('LLLL');</span>\n            <span className=\"display\">//{moment().format(\"LLLL\")}</span>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".box {\n    list-style: none;\n    border: 1px solid rgba(34,34,34,0.2);\n    border-radius: 4px;\n    color: #000;\n    font-size: 14px;\n    padding: 5px 8px;\n    margin: 0 0 20px;\n    line-height: 24px;\n    background: rgba(34,34,34,0.03);\n}\n.code {\n    display: inline-block;\n    width: 50%;\n}\n.display {\n    color: rgba(34,34,34,0.5);\n}\n","body":"\n最简单的用法。\n\n"}]},{"name":"Nav","category":"Components","title":"导航","type":"导航","importStatement":"import { Nav } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。\n\n可以替代原来的 Navigation 组件使用\n\n### 注意事项\n\n-   icononly 只适用垂直方向。\n\n-   Nav所有事件都继承自Menu，请参考Menu的API。\n\n","propsSchema":{"name":"Nav","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"type":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false,"description":"正常"},{"value":"'primary'","computed":false,"description":"主要"},{"value":"'secondary'","computed":false,"description":"次要"},{"value":"'text'","computed":false,"description":"文字"},{"value":"'line'","computed":false,"description":"线形"}]},"required":false,"description":"导航类型","defaultValue":{"value":"'normal'","computed":false},"docblock":"导航类型\n@enumdesc 正常, 主要, 次要, 文字, 线形","value":[{"value":"'normal'","computed":false,"description":"正常"},{"value":"'primary'","computed":false,"description":"主要"},{"value":"'secondary'","computed":false,"description":"次要"},{"value":"'text'","computed":false,"description":"文字"},{"value":"'line'","computed":false,"description":"线形"}]},"direction":{"type":{"name":"enum","value":[{"value":"'hoz'","computed":false,"description":"水平"},{"value":"'ver'","computed":false,"description":"垂直"}]},"required":false,"description":"导航方向","defaultValue":{"value":"'ver'","computed":false},"docblock":"导航方向\n@enumdesc 水平, 垂直","value":[{"value":"'hoz'","computed":false,"description":"水平"},{"value":"'ver'","computed":false,"description":"垂直"}]},"activeDirection":{"type":{"name":"enum","value":[{"value":"null","computed":false,"description":"无"},{"value":"'top'","computed":false,"description":"上"},{"value":"'bottom'","computed":false,"description":"下"},{"value":"'left'","computed":false,"description":"左"},{"value":"'right'","computed":false,"description":"右"}]},"required":false,"description":"设置组件选中状态的active边方向","docblock":"设置组件选中状态的active边方向\n@enumdesc 无, 上, 下, 左, 右","value":[{"value":"null","computed":false,"description":"无"},{"value":"'top'","computed":false,"description":"上"},{"value":"'bottom'","computed":false,"description":"下"},{"value":"'left'","computed":false,"description":"左"},{"value":"'right'","computed":false,"description":"右"}]},"popupAlign":{"type":{"name":"enum","value":[{"value":"'follow'","computed":false},{"value":"'outside'","computed":false}]},"required":false,"description":"Tree 展开时候右侧子item的对齐方式","defaultValue":{"value":"'follow'","computed":false},"docblock":"Tree 展开时候右侧子item的对齐方式"},"triggerType":{"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'hover'","computed":false}]},"required":false,"description":"PopupItem触发方式","docblock":"PopupItem触发方式"},"className":{"type":{"name":"string"},"required":false,"description":"自定义class","docblock":"自定义class"},"iconOnly":{"type":{"name":"bool"},"required":false,"description":"控制icon是否展示","docblock":"控制icon是否展示"},"hasTooltip":{"type":{"name":"bool"},"required":false,"description":"是否有ToolTIps(仅在iconOnly=true时生效)","defaultValue":{"value":"false","computed":false},"docblock":"是否有ToolTIps(仅在iconOnly=true时生效)"},"hasArrow":{"type":{"name":"bool"},"required":false,"description":"是否显示右侧的箭头(仅在iconOnly=true时生效)","defaultValue":{"value":"true","computed":false},"docblock":"是否显示右侧的箭头(仅在iconOnly=true时生效)"}},"methods":[],"description":"继承自`Menu`的能力请查看`Menu`文档","subComponents":[{"name":"Group","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"}},"methods":[],"description":"继承自`Menu.Group`的能力请查看`Menu.Group`文档"},{"name":"Item","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"icon":{"type":{"name":"union","value":[{"name":"string"},{"name":"node"}]},"required":false,"description":"自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`","docblock":"自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`"}},"methods":[],"description":"继承自`Menu.Item`的能力请查看`Menu.Item`文档"},{"name":"PopupItem","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"icon":{"type":{"name":"union","value":[{"name":"string"},{"name":"node"}]},"required":false,"description":"自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`","docblock":"自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`"}},"methods":[],"description":"继承自`Menu.PopupItem`的能力请查看`Menu.PopupItem`文档"},{"name":"SubNav","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"icon":{"type":{"name":"union","value":[{"name":"string"},{"name":"node"}]},"required":false,"description":"自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`","docblock":"自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`"}},"methods":[],"description":"继承自`Menu.SubMenu`的能力请查看`Menu.SubMenu`文档"}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\ntype | 导航类型<br><br>**可选值**:<br>'normal'(正常)<br>'primary'(主要)<br>'secondary'(次要)<br>'text'(文字)<br>'line'(线形) | Enum | 'normal'\ndirection | 导航方向<br><br>**可选值**:<br>'hoz'(水平)<br>'ver'(垂直) | Enum | 'ver'\nactiveDirection | 设置组件选中状态的active边方向<br><br>**可选值**:<br>null(无)<br>'top'(上)<br>'bottom'(下)<br>'left'(左)<br>'right'(右) | Enum | -\npopupAlign | Tree 展开时候右侧子item的对齐方式<br><br>**可选值**:<br>'follow', 'outside' | Enum | 'follow'\ntriggerType | PopupItem触发方式<br><br>**可选值**:<br>'click', 'hover' | Enum | -\nclassName | 自定义class | String | -\niconOnly | 控制icon是否展示 | Boolean | -\nhasTooltip | 是否有ToolTIps(仅在iconOnly=true时生效) | Boolean | false\nhasArrow | 是否显示右侧的箭头(仅在iconOnly=true时生效) | Boolean | true\n","methodREADME":[],"subComponentsREADME":[{"name":"Group","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\n","methodREADME":[]},{"name":"Item","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nicon | 自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>` | String/ReactNode | -\n","methodREADME":[]},{"name":"PopupItem","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nicon | 自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>` | String/ReactNode | -\n","methodREADME":[]},{"name":"SubNav","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nicon | 自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>` | String/ReactNode | -\n","methodREADME":[]}],"demos":[{"title":"选中状态","order":"2","jsx":"import { Nav, Select, Switch, Field } from \"@icedesign/base\";\n\nconst { Item } = Nav;\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  render() {\n    const { init, getValue } = this.field;\n\n    return (\n      <div>\n        <div className=\"demo-ctl\">\n          <Switch\n            checkedChildren=\"横\"\n            unCheckedChildren=\"竖\"\n            {...init(\"direction\")}\n          />\n          <Select\n            placeholder=\"active 位置\"\n            {...init(\"activeDirection\", { initValue: \"left\" })}\n          >\n            <Option value=\"\">无</Option>\n            <Option value=\"top\">top</Option>\n            <Option value=\"bottom\">bottom</Option>\n            <Option value=\"left\">left</Option>\n            <Option value=\"right\">right</Option>\n          </Select>\n        </div>\n        <br />\n\n        <Nav\n          style={{ width: getValue(\"direction\") ? \"100%\" : \"240px\" }}\n          direction={getValue(\"direction\") ? \"hoz\" : \"ver\"}\n          activeDirection={getValue(\"activeDirection\")}\n          defaultSelectedKeys={[\"1\"]}\n        >\n          <Item key=\"1\" icon=\"service\" hasSelectedIcon={false}>\n            Value Added Service\n          </Item>\n          <Item key=\"2\" icon=\"training\">\n            Training\n          </Item>\n          <Item key=\"3\" icon=\"favorite\">\n            Favorite\n          </Item>\n          <Item key=\"4\" icon=\"history\">\n            History\n          </Item>\n          <Item key=\"5\" icon=\"attachment\">\n            Attachment\n          </Item>\n          <Item key=\"6\" icon=\"electronics\">\n            Electronics\n          </Item>\n        </Nav>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo-ctl {\n  background-color: #f1f1f1;\n  padding: 10.0px;\n  color: #0a7ac3;\n  border-left: 4.0px solid #0d599a;\n}\n.demo-ctl .next-switch {\n  margin-right: 20px;\n}\n","body":"\ndirection水平方向只支持top/bottom，垂直方向只支持left/right。\nactiveDirection=top,bottom,left,right\n等待Menu支持\n\n"},{"title":"基本","order":"0","jsx":"import { Nav, Icon, Menu } from \"@icedesign/base\";\n\nconst { Item, PopupItem } = Nav;\n\nReactDOM.render(\n  <Nav direction=\"hoz\" activeDirection=\"bottom\">\n    <Item key=\"1\" icon=\"service\">\n      First\n    </Item>\n    <Item key=\"2\">Training</Item>\n    <Item key=\"3\" icon=\"favorite\">\n      Favorite\n    </Item>\n    <Item key=\"4\">\n      <a href=\"http://www.taobao.com\" target=\"_blank\">\n        <Icon type=\"attachment\" />Taobao\n      </a>\n    </Item>\n    <PopupItem key=\"5\" icon=\"history\" label=\"History\">\n      <Menu>\n        <Menu.Item key=\"51\">Option 1</Menu.Item>\n        <Menu.Item key=\"52\">Option 3</Menu.Item>\n        <Menu.Item disabled key=\"54\">\n          Option 2\n        </Menu.Item>\n        <Menu.Item key=\"53\">Option 4</Menu.Item>\n      </Menu>\n    </PopupItem>\n    <PopupItem key=\"6\" icon=\"electronics\" label=\"Sub Nav\">\n      <Menu>\n        <Menu.Item key=\"61\">Option 1</Menu.Item>\n        <Menu.Item key=\"62\">Option 3</Menu.Item>\n        <Menu.Item key=\"63\">Option 4</Menu.Item>\n        <Menu.PopupItem key=\"64\" label=\"popup\">\n          <Menu>\n            <Menu.Item key=\"640\">Option 1</Menu.Item>\n            <Menu.Item key=\"641\">Option 3</Menu.Item>\n            <Menu.Item key=\"642\">Option 4</Menu.Item>\n          </Menu>\n        </Menu.PopupItem>\n      </Menu>\n    </PopupItem>\n  </Nav>,\n  mountNode\n);\n\n","css":"","body":"\n横向导航\n\n"},{"title":"分组","order":"5","jsx":"import { Nav } from \"@icedesign/base\";\n\nconst { Item, Group } = Nav;\n\nReactDOM.render(\n  <Nav style={{ width: 240 }}>\n    <Group label=\"Website List\">\n      <Item key=\"1\" icon=\"service\">\n        Value Added Service\n      </Item>\n      <Item key=\"2\" icon=\"training\" disabled>\n        Training\n      </Item>\n      <Item key=\"3\" icon=\"favorite\">\n        Favorite\n      </Item>\n      <Item key=\"4\" icon=\"history\">\n        History\n      </Item>\n      <Item key=\"5\" icon=\"attachment\">\n        Attachment\n      </Item>\n      <Item key=\"6\" icon=\"electronics\">\n        Electronics\n      </Item>\n    </Group>\n  </Nav>,\n  mountNode\n);\n\n","css":"","body":"\ngroup\n\n"},{"title":"图标","order":"4","jsx":"import { Nav, Switch, Field } from \"@icedesign/base\";\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  render() {\n    const { init, getValue } = this.field;\n    return (\n      <div>\n        <Switch\n          {...init(\"iconOnly\", { initValue: true, valueName: \"checked\" })}\n        />\n        <br />\n        <Nav\n          iconOnly={getValue(\"iconOnly\")}\n          hasTooltip\n          style={{ display: \"inline-block\" }}\n        >\n          <Item key=\"1\" icon=\"service\">\n            Value Added Service\n          </Item>\n          <Item key=\"2\" icon=\"training\">\n            Training\n          </Item>\n          <Item key=\"3\" icon=\"favorite\">\n            Favorite\n          </Item>\n          <Item key=\"4\" icon=\"history\">\n            History\n          </Item>\n          <Item key=\"5\" icon=\"attachment\">\n            Attachment\n          </Item>\n          <Item key=\"6\" icon=\"electronics\">\n            Electronics\n          </Item>\n          <SubNav key=\"sub4\" label=\" Nav Three\">\n            <Item key=\"9\" icon=\"favorite\">\n              Option 9\n            </Item>\n            <Item key=\"10\" icon=\"favorite\">\n              Option 10\n            </Item>\n            <Item key=\"11\" icon=\"favorite\">\n              Option 11\n            </Item>\n            <Item key=\"12\" icon=\"favorite\">\n              Option 12\n            </Item>\n          </SubNav>\n        </Nav>\n        <br />\n        无箭头(hover最后一个item)\n        <br />\n        <Nav\n          iconOnly={getValue(\"iconOnly\")}\n          hasArrow={false}\n          hasTooltip\n          triggerType=\"hover\"\n          style={{ display: \"inline-block\" }}\n        >\n          <Item key=\"1\" icon=\"service\">\n            Value Added Service\n          </Item>\n          <Item key=\"2\" icon=\"training\">\n            Training\n          </Item>\n          <Item key=\"3\" icon=\"favorite\">\n            Favorite\n          </Item>\n          <Item key=\"4\" icon=\"history\">\n            History\n          </Item>\n          <Item key=\"5\" icon=\"attachment\">\n            Attachment\n          </Item>\n          <SubNav mode=\"popup\" key=\"sub4\" icon=\"electronics\" label=\"Nav Three\">\n            <Item key=\"9\" icon=\"favorite\">\n              Option 9\n            </Item>\n            <Item key=\"10\" icon=\"favorite\">\n              Option 10\n            </Item>\n            <Item key=\"11\" icon=\"favorite\">\n              Option 11\n            </Item>\n            <Item key=\"12\" icon=\"favorite\">\n              Option 12\n            </Item>\n          </SubNav>\n        </Nav>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\niconOnly切换图标\n\n"},{"title":"自定义头尾","order":"3","jsx":"import { Nav, Icon, Switch } from \"@icedesign/base\";\n\nconst { Item } = Nav;\n\nclass App extends React.Component {\n  state = { direction: \"hoz\" };\n\n  onChange(v) {\n    this.setState({\n      direction: v ? \"hoz\" : \"ver\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Switch\n          checkedChildren=\"横\"\n          unCheckedChildren=\"竖\"\n          defaultChecked\n          onChange={this.onChange.bind(this)}\n        />\n        <br />\n        <br />\n\n        <div>\n          <Nav\n            direction={this.state.direction}\n            type=\"primary\"\n            header={\n              <img\n                style={{ margin: \"0 10px\" }}\n                src=\"http://c.sg.ali-lazada.com/lazada/lib/0.0.1/image/lsc-logo.png\"\n              />\n            }\n            footer={\n              <div style={{ margin: \"0 10px\", lineHeight: \"44px\" }}>\n                <a href=\"javascript:;\"> Login in</a>\n              </div>\n            }\n          >\n            <Item key=\"1\" icon=\"service\">\n              Value Added Service\n            </Item>\n            <Item key=\"2\" icon=\"training\">\n              Training\n            </Item>\n            <Item key=\"3\" icon=\"favorite\">\n              Favorite\n            </Item>\n            <Item key=\"4\" icon=\"history\">\n              History\n            </Item>\n            <Item key=\"5\">\n              <a href=\"http://www.taobao.com\" target=\"_blank\">\n                <Icon type=\"attachment\" />Link\n              </a>\n            </Item>\n            <Item key=\"6\" icon=\"electronics\">\n              Electronics\n            </Item>\n          </Nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n自定义导航头尾\n\n"},{"title":"弹出","order":"7","jsx":"import { Nav, Icon } from \"@icedesign/base\";\n\nconst { Item, SubNav } = Nav;\n\nReactDOM.render(\n  <div>\n    <Nav style={{ width: 240 }} popupAlign=\"outside\" defaultOpenKeys={[\"sub2\"]}>\n      <SubNav\n        key=\"sub1\"\n        mode=\"popup\"\n        label={\n          <span>\n            <Icon type=\"service\" size=\"small\" />\n            <span> Nav One</span>\n          </span>\n        }\n      >\n        <Item key=\"1\">Option 1</Item>\n        <Item key=\"2\">Option 2</Item>\n        <Item key=\"3\">Option 3</Item>\n        <Item key=\"4\">Option 4</Item>\n      </SubNav>\n      <SubNav\n        key=\"sub2\"\n        mode=\"popup\"\n        label={\n          <span>\n            <Icon type=\"training\" size=\"small\" />\n            <span> Nav Two</span>\n          </span>\n        }\n      >\n        <Item key=\"5\">Option 5</Item>\n        <Item key=\"6\">Option 6</Item>\n      </SubNav>\n      <SubNav\n        key=\"sub3\"\n        mode=\"popup\"\n        label={\n          <span>\n            <Icon type=\"favorite\" size=\"small\" />\n            <span> Nav Three</span>\n          </span>\n        }\n      >\n        <Item key=\"9\">Option 9</Item>\n        <Item key=\"10\">Option 10</Item>\n        <Item key=\"11\">Option 11</Item>\n        <Item key=\"12\">Option 12</Item>\n      </SubNav>\n      <SubNav\n        key=\"sub4\"\n        mode=\"popup\"\n        label={\n          <span>\n            <Icon type=\"favorite\" size=\"small\" />\n            <span> Nav Three</span>\n          </span>\n        }\n      >\n        <Item key=\"21\">Option 9</Item>\n        <Item key=\"22\">Option 10</Item>\n        <Item key=\"23\">Option 11</Item>\n        <Item key=\"24\">Option 12</Item>\n      </SubNav>\n    </Nav>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\noutside: Nav顶端对齐。follow: Item顶端对齐\n当SubNav的mode=popup的时候，popAlign控制弹出菜单对齐方式\n\n"},{"title":"子菜单","order":"6","jsx":"import { Nav, Icon, Switch } from \"@icedesign/base\";\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n  state = {\n    openmode: \"single\"\n  };\n\n  onChange(v) {\n    this.setState({\n      openmode: v ? \"multiple\" : \"single\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Switch\n          checkedChildren=\"多\"\n          unCheckedChildren=\"单\"\n          onChange={this.onChange.bind(this)}\n        />\n        <br />\n        <br />\n        <Nav\n          style={{ width: 240 }}\n          direction=\"ver\"\n          openMode={this.state.openmode}\n        >\n          <SubNav\n            key=\"sub1\"\n            label={\n              <span>\n                <Icon type=\"service\" size=\"small\" />\n                <span>Nav One</span>\n              </span>\n            }\n          >\n            <Item key=\"1\">Option 1</Item>\n            <Item key=\"2\">Option 2</Item>\n            <Item key=\"3\">Option 3</Item>\n            <Item key=\"4\">Option 4</Item>\n          </SubNav>\n          <SubNav\n            key=\"sub2\"\n            label={\n              <span>\n                <Icon type=\"training\" size=\"small\" />\n                <a href=\"javascript:;\">Nav Two</a>\n              </span>\n            }\n          >\n            <Item key=\"5\">Option 5</Item>\n            <Item key=\"6\">Option 6</Item>\n            <SubNav key=\"sub3\" label=\"Submenu\">\n              <Item key=\"7\">\n                <a href=\"javascript:;\">Option 7</a>\n              </Item>\n              <Item key=\"8\">Option 8</Item>\n            </SubNav>\n          </SubNav>\n          <SubNav\n            key=\"sub4\"\n            label={\n              <span>\n                <Icon type=\"favorite\" size=\"small\" />\n                <span> Nav Three</span>\n              </span>\n            }\n          >\n            <Item key=\"9\">Option 9</Item>\n            <Item key=\"10\">Option 10</Item>\n            <Item key=\"11\">Option 11</Item>\n            <Item key=\"12\">Option 12</Item>\n          </SubNav>\n          <Item key=\"13\">Option 13</Item>\n        </Nav>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n单例、多例模式\n\n"},{"title":"类别","order":"1","jsx":"import { Nav, Switch } from \"@icedesign/base\";\n\nconst { Item } = Nav;\n\nfunction renderNav(type, direction) {\n  return (\n    <div className={`demo-${direction}`}>\n      <h2>{type}</h2>\n      <Nav type={type} direction={direction}>\n        <Item key=\"1\" icon=\"service\">\n          Value Added Service\n        </Item>\n        <Item key=\"2\" icon=\"training\">\n          Training\n        </Item>\n        <Item key=\"3\" icon=\"favorite\">\n          Favorite\n        </Item>\n        <Item key=\"4\" icon=\"history\">\n          History\n        </Item>\n        <Item key=\"5\" icon=\"attachment\">\n          Attachment\n        </Item>\n        <Item key=\"6\" icon=\"electronics\">\n          Electronics\n        </Item>\n      </Nav>\n    </div>\n  );\n}\n\nclass App extends React.Component {\n  state = { direction: \"hoz\" };\n\n  onChange(v) {\n    this.setState({\n      direction: v ? \"hoz\" : \"ver\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Switch\n          checkedChildren=\"横\"\n          unCheckedChildren=\"竖\"\n          defaultChecked\n          onChange={this.onChange.bind(this)}\n        />\n        <br />\n\n        <div style={{ display: \"inline-block\" }}>\n          {renderNav(\"primary\", this.state.direction)}\n          {renderNav(\"secondary\", this.state.direction)}\n          {renderNav(\"normal\", this.state.direction)}\n          {renderNav(\"line\", this.state.direction)}\n          {renderNav(\"text\", this.state.direction)}\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".demo-hoz {\n    width: 100%;\n}\n.demo-ver {\n    width: 200px;\n    display: inline-block;\n    float: left;\n}\n.demo-ver .next-nav{\n    margin-left: 5px;\n}\n","body":"\ntype控制类别切换\n\n"}]},{"name":"Navigation","category":"Components","title":"导航(废弃)","type":"导航","importStatement":"import { Navigation } from '@icedesign/base';","body":"\n## 注意\n\nNavigation已经废弃, 会在1.0版本中去除, 建议切换到Nav。\n\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"选中状态位置","order":"0","jsx":"import { Navigation, Select } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeDirection: \"top\",\n      type: \"filling\"\n    };\n  }\n\n  changePosition(value) {\n    this.setState({\n      activeDirection: value,\n      type: value === \"top\" || value === \"bottom\" ? \"filling\" : \"normal\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Select\n          value={this.state.activeDirection}\n          onChange={::this.changePosition}\n          className=\"tab-select-demo\"\n        >\n          <div value=\"left\">left</div>\n          <div value=\"top\">top</div>\n          <div value=\"bottom\">bottom</div>\n          <div value=\"right\">right</div>\n        </Select>\n\n        <Navigation\n          type={this.state.type}\n          activeDirection={this.state.activeDirection}\n        >\n          <Item itemid=\"1\" text=\"Value Added Service\" icon=\"service\" />\n          <Item itemid=\"2\" text=\"Training\" icon=\"training\" />\n          <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" />\n          <Item itemid=\"4\" text=\"History\" icon=\"history\" />\n          <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\" />\n        </Navigation>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n设置选中状态的方向，建议横向导航设置为top或bottom，纵向设置为left或right\n\n"},{"title":"基本","order":"0","jsx":"import { Navigation, Menu } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onMouseEnter = () => {\n  console.log(\"onMouseEnter\");\n};\n\nlet onMouseLeave = () => {\n  console.log(\"onMouseLeave\");\n};\n\nlet onClick = (itemid, item) => {\n  console.log(\"Click:\" + item.props.text);\n};\n\nlet onSelect = (itemid, item) => {\n  console.log(\"Select:\" + item.props.text);\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      trigger: \"hover\"\n    };\n  }\n\n  onToggleTrigger() {\n    this.setState({\n      trigger: this.state.trigger === \"hover\" ? \"click\" : \"hover\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          id=\"changeTriggerType\"\n          onClick={this.onToggleTrigger.bind(this)}\n        >\n          点击切换trigger方式\n        </button>\n        <Navigation\n          onClick={onClick}\n          onSelect={onSelect}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n          trigger={this.state.trigger}\n        >\n          <Item itemid=\"1\" text={<i>Value Added Service</i>}>\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n          <Item itemid=\"2\" text=\"Training\">\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n          <Item itemid=\"3\" text=\"Favorite\">\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n          <Item itemid=\"4\" text=\"History\">\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n          <Item itemid=\"5\" text=\"Attachment\">\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n          <Item itemid=\"6\" text=\"electronics\">\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n        </Navigation>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n最简单的用法.\n\n"},{"title":"填充背景","order":"0","jsx":"import { Navigation, Menu } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onMouseEnter = () => {\n  console.log(\"onMouseEnter\");\n};\n\nlet onMouseLeave = () => {\n  console.log(\"onMouseLeave\");\n};\n\nclass CustomItem extends React.Component {\n  render() {\n    const { link } = this.props;\n\n    return <Item content={link} />;\n  }\n}\n\nReactDOM.render(\n  <Navigation\n    onMouseEnter={onMouseEnter}\n    onMouseLeave={onMouseLeave}\n    type=\"filling\"\n    trigger=\"hover\"\n    activeDirection=\"left\"\n    morePositionKey=\"3\"\n    moreText=\"+ More\"\n    onSelect={id => console.log(id)}\n  >\n    <div>\n      <Item text=\"TestInnerItem\" />\n    </div>\n    <CustomItem link={<a href=\"#test\">test</a>} />\n    <Item itemid=\"2\" text=\"Training\" icon=\"training\" title=\"Training Long Long\">\n      <Menu>\n        <Menu.Item key=\"11\">OptionOptionOptionOptionOption 1</Menu.Item>\n        <Menu.Item disabled key=\"21\">\n          Option 2\n        </Menu.Item>\n        <Menu.Item key=\"31\">Option 3</Menu.Item>\n        <Menu.Item key=\"41\">Option 4</Menu.Item>\n        <Menu.SubMenu key=\"411\" label=\"xxx\" mode=\"popup\" triggerType=\"hover\">\n          <Menu.Item key=\"xxx\">Option2</Menu.Item>\n          <Menu.Item key=\"xxx2\">Option3</Menu.Item>\n        </Menu.SubMenu>\n      </Menu>\n    </Item>\n    <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" selected=\"true\">\n      <Menu>\n        <Menu.SubMenu label=\"xxx\" key=\"popup1\">\n          <Menu.Item disabled key=\"112\">\n            abc\n          </Menu.Item>\n          <Menu.Item key=\"222\">abc</Menu.Item>\n        </Menu.SubMenu>\n      </Menu>\n    </Item>\n    <Item itemid=\"4\" text=\"History\" icon=\"history\">\n      <Menu>\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item disabled key=\"2\">\n          Option 2\n        </Menu.Item>\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n        <Menu.Item key=\"4\">Option 4</Menu.Item>\n      </Menu>\n    </Item>\n    <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\">\n      <Menu>\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item disabled key=\"2\">\n          Option 2\n        </Menu.Item>\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n        <Menu.Item key=\"4\">Option 4</Menu.Item>\n      </Menu>\n    </Item>\n    <Item itemid=\"6\" text=\"electronics\" icon=\"Electronics\">\n      <Menu>\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item disabled key=\"2\">\n          Option 2\n        </Menu.Item>\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n        <Menu.Item key=\"4\">Option 4</Menu.Item>\n      </Menu>\n    </Item>\n  </Navigation>,\n  mountNode\n);\n\n","css":"","body":"\n注意：onMouseLeave、onMouseEnter，如果子元素有注册以上事件，注意兼容；\n\n"},{"title":"图标型","order":"0","jsx":"import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onClick = (itemid, item) => {\n  console.log(\"Click:\" + item.props.icon);\n};\n\nlet style = {\n  padding: \"20px 0\",\n  display: \"block\",\n  cursor: \"pointer\"\n};\n\nclass Content extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      type: \"icononly\"\n    };\n  }\n\n  changeType() {\n    this.setState({\n      type: this.state.type === \"icononly\" ? \"tree\" : \"icononly\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <a style={style} id=\"spread\" onClick={this.changeType.bind(this)}>\n          点我试试\n        </a>\n        <Navigation\n          type={this.state.type}\n          onClick={onClick}\n          style={{ maxWidth: \"240px\" }}\n        >\n          <Item\n            itemid=\"1\"\n            text=\"Value Added Service\"\n            icon=\"service\"\n            link=\"#icon\"\n            opened={true}\n          >\n            <Navigation>\n              <Item itemid=\"1-1-1\" text=\"Apps2\" icon=\"service\" opened={true}>\n                <Navigation>\n                  <Item itemid=\"1-1-1-1\" text=\"Apps2\" icon=\"service\" />\n                  <Item itemid=\"1-1-1-2\" text=\"Apps3\" icon=\"service\" />\n                </Navigation>\n              </Item>\n              <Item itemid=\"1-1-2\" text=\"Apps3\" icon=\"service\" />\n            </Navigation>\n          </Item>\n          <Item itemid=\"2\" text=\"Training\" icon=\"training\" />\n          <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" />\n          <Item itemid=\"4\" text=\"History\" icon=\"history\" />\n          <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\" />\n          <Item itemid=\"6\" text=\"Electronics\" icon=\"electronics\" />\n        </Navigation>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Content />, mountNode);\n\n","css":"","body":"\n最简单的用法。\n\n"},{"title":"横向","order":"0","jsx":"import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nReactDOM.render(\n  <Navigation type=\"line\" activeDirection=\"left\">\n    <Item\n      itemid=\"1\"\n      key=\"1\"\n      text=\"Value Added Service\"\n      icon=\"service\"\n      container={<span />}\n    />\n    <Item itemid=\"2\" text=\"Training\" icon=\"training\" />\n    <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" />\n    <Item itemid=\"4\" text=\"History\" icon=\"history\" />\n    <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\" />\n    <Item itemid=\"6\" text=\"Electronics\" icon=\"electronics\" />\n  </Navigation>,\n  mountNode\n);\n\n","css":"","body":"\n注意：onMouseLeave、onMouseEnter，如果子元素有注册以上事件，注意兼容；\n\n"},{"title":"Normal","order":"0","jsx":"import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nReactDOM.render(\n  <Navigation\n    type=\"normal\"\n    title=\"Website List\"\n    style={{ maxWidth: \"240px\" }}\n    activeDirection=\"left\"\n  >\n    <Item itemid=\"1\" text=\"Value Added Service\" icon=\"service\" />\n    <Item\n      itemid=\"2\"\n      text=\"Training\"\n      icon=\"training\"\n      link=\"http://taobao.com\"\n      target=\"_blank\"\n      selectedStyle={false}\n    />\n    <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" />\n    <Item itemid=\"4\" text=\"History\" icon=\"history\" />\n    <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\" />\n    <Item itemid=\"6\" text=\"Electronics\" icon=\"electronics\" />\n  </Navigation>,\n  mountNode\n);\n\n","css":"","body":"\n"},{"title":"横向","order":"0","jsx":"import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onMouseEnter = () => {\n  console.log(\"onMouseEnter\");\n};\n\nlet onMouseLeave = () => {\n  console.log(\"onMouseLeave\");\n};\n\nlet menus = [\n  { key: \"1\", text: \"下单\", icon: \"service\" },\n  {\n    key: \"2\",\n    text: \"购物车\",\n    icon: \"service\",\n    children: [\n      {\n        key: \"2-1\",\n        text: \"下单2\",\n        icon: \"service\",\n        children: [{ key: \"2-1-1\", text: \"下单\", icon: \"service\" }]\n      }\n    ]\n  },\n  {\n    key: \"3\",\n    text: \"订单\",\n    icon: \"service\",\n    children: (\n      <Navigation>\n        <Item text=\"子订单\" />\n      </Navigation>\n    )\n  }\n];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      current: []\n    };\n  }\n\n  onChange(e) {\n    let value = e.target.value;\n\n    this.setState({\n      current: value.split(\",\")\n    });\n  }\n\n  render() {\n    let render = menus => {\n      return menus.map((m, i) => (\n        <Item\n          key={m.key || i}\n          opened={this.state.current.indexOf(m.key) > -1}\n          text={m.text}\n          icon={m.icon}\n        >\n          {\"length\" in (m.children || {}) ? (\n            <Navigation>{render(m.children)}</Navigation>\n          ) : (\n            m.children\n          )}\n        </Item>\n      ));\n    };\n\n    let renderItem = render(menus);\n\n    console.log(renderItem);\n\n    return (\n      <div>\n        <div style={{ padding: \"10px\" }}>\n          <label>输入切换key/itemid(多个用半角,隔开):</label>\n          <input\n            id=\"myInput\"\n            value={this.state.value}\n            onChange={this.onChange.bind(this)}\n          />\n        </div>\n        <Navigation\n          type=\"tree\"\n          trigger=\"hover\"\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          {renderItem}\n        </Navigation>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n注意：onMouseLeave、onMouseEnter，如果子元素有注册以上事件，注意兼容；\n\n"},{"title":"横向","order":"0","jsx":"import { Navigation, Menu } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onMouseEnter = () => {\n  console.log(\"onMouseEnter\");\n};\n\nlet onMouseLeave = () => {\n  console.log(\"onMouseLeave\");\n};\n\nlet menus = [\n  { key: \"1\", text: \"Value\", icon: \"service\" },\n  { key: \"2\", text: \"Value\", icon: \"service\" },\n  {\n    key: \"3\",\n    text: \"Value\",\n    icon: \"service\",\n    children: (\n      <Menu>\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item key=\"2\">Option 2</Menu.Item>\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n        <Menu.Item key=\"4\">Option 4</Menu.Item>\n        <Menu.SubMenu key=\"41\" label=\"xxx\" mode=\"popup\" triggerType=\"hover\">\n          <Menu.Item key=\"5\">Option 5</Menu.Item>\n        </Menu.SubMenu>\n      </Menu>\n    )\n  }\n];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      current: null\n    };\n  }\n\n  onChange(e) {\n    let value = e.target.value;\n\n    this.setState({\n      current: value.trim()\n    });\n  }\n\n  render() {\n    let renderItem = menus.map(m => {\n      return (\n        <Item\n          key={m.key}\n          text={m.text}\n          icon={m.icon}\n          selected={m.key === this.state.current}\n        >\n          {m.children}\n        </Item>\n      );\n    });\n\n    return (\n      <div>\n        <div style={{ padding: \"10px\" }}>\n          <label>输入切换key/itemid:</label>\n          <input\n            id=\"selectInput\"\n            value={this.state.value}\n            onChange={this.onChange.bind(this)}\n          />\n        </div>\n        <Navigation\n          type=\"filling\"\n          trigger=\"hover\"\n          selectedKey={this.state.current}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          {renderItem}\n        </Navigation>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n注意：onMouseLeave、onMouseEnter，如果子元素有注册以上事件，注意兼容；\n\n"},{"title":"Slip","order":"0","jsx":"import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet timer, result, onSelect;\n\nonSelect = (id, item, nav) => {\n  //模拟异步\n  if (item.props.children) {\n    return clearTimeout(timer);\n  }\n\n  if (result) {\n    return nav.setContent(result);\n  }\n\n  nav.setContent(<div>请稍后</div>);\n\n  timer = setTimeout(() => {\n    nav.setContent((result = <div>加载完毕</div>));\n  }, 1000);\n};\n\nReactDOM.render(\n  <Navigation\n    type=\"slip\"\n    onSelect={onSelect}\n    style={{ maxWidth: \"240px\" }}\n    title=\"Web Sites\"\n    container={<div className=\"custom-container\" />}\n  >\n    <Item\n      itemid=\"1\"\n      text=\"Value Added Service\"\n      icon=\"service\"\n      link=\"http://www.taobao.com\"\n      target=\"_blank\"\n    />\n    <Item key=\"2\" text=\"Training\" icon=\"training\">\n      <i>Training</i>\n    </Item>\n    <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\">\n      <div>Favorite</div>\n    </Item>\n    <Item itemid=\"4\" text=\"History\" icon=\"history\">\n      <div>History</div>\n    </Item>\n    <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\">\n      <div>Attachment</div>\n    </Item>\n    <Item itemid=\"6\" text=\"Electronics\" icon=\"electronics\">\n      <div>Electronics</div>\n    </Item>\n  </Navigation>,\n  mountNode\n);\n\n","css":"","body":"\n"},{"title":"Text","order":"0","jsx":"import { Navigation, Menu } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onMouseEnter = () => {\n  console.log(\"onMouseEnter\");\n};\n\nlet onMouseLeave = () => {\n  console.log(\"onMouseLeave\");\n};\n\nReactDOM.render(\n  <Navigation\n    type=\"text\"\n    onMouseEnter={onMouseEnter}\n    onMouseLeave={onMouseLeave}\n    trigger=\"hover\"\n    cententAlign=\"left\"\n    activeDirection=\"bottom\"\n    morePositionKey=\"5\"\n    moreText=\"+ More\"\n  >\n    <Item itemid=\"1\" text=\"淘宝，淘你喜欢\" icon=\"folder\" />\n    <Item itemid=\"2\" text=\"天猫，正品选择\" icon=\"account\" />\n    <Item itemid=\"3\" text=\"菜单一\" icon=\"cart\" menuAlign=\"left\" />\n    <Item\n      link=\"http://www.baidu.com\"\n      target=\"_blank\"\n      itemid=\"4\"\n      text=\"菜单一\"\n      icon=\"cart\"\n      menuAlign=\"left\"\n    />\n    <Item itemid=\"5\" text=\"菜单一\" icon=\"cart\" menuAlign=\"left\" />\n    <Item itemid=\"6\" text=\"菜单一\" icon=\"cart\" menuAlign=\"left\" />\n  </Navigation>,\n  mountNode\n);\n\n","css":"","body":"\n注意：onMouseLeave、onMouseEnter，如果子元素有注册以上事件，注意兼容；\n\n"},{"title":"树型","order":"0","jsx":"import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      selectedKey: \"3\"\n    };\n  }\n\n  onSelect(id, itemid) {\n    this.setState({\n      selectedKey: id\n    });\n  }\n\n  onUnFold(id, item, tree, e) {\n    console.log(\"UnFold\");\n  }\n\n  render() {\n    return (\n      <Navigation\n        onSelect={this.onSelect.bind(this)}\n        selectedKey={this.state.selectedKey}\n        onUnFold={this.onUnFold.bind(this)}\n        style={{ maxWidth: \"240px\" }}\n        type=\"tree\"\n        title=\"Web Sites\"\n        accordion={true}\n        activeDirection=\"left\"\n        branchPadding=\"20\"\n      >\n        <Item\n          itemid=\"1\"\n          text=\"Value Added Service\"\n          icon=\"service\"\n          opened={false}\n          hasLeaf={false}\n        >\n          <Navigation>\n            <Item itemid=\"1-1\" text=\"Apps-One\" icon=\"service\" opened={true}>\n              <Navigation>\n                <Item itemid=\"1-1-1\" text=\"Apps-One-One\" icon=\"service\" />\n                <Item itemid=\"1-1-2\" text=\"Apps-one-Two\" icon=\"service\" />\n              </Navigation>\n            </Item>\n            <Item itemid=\"1-2\" text=\"Apps-Two\" icon=\"service\">\n              <Navigation>\n                <Item itemid=\"1-2-1\" text=\"Apps2\" icon=\"service\" />\n                <Item itemid=\"1-2-2\" text=\"Apps3\" icon=\"service\" />\n              </Navigation>\n            </Item>\n            <Item itemid=\"1-3\" text=\"Apps-Three\" icon=\"service\" />\n          </Navigation>\n        </Item>\n        <Item itemid=\"2\" text=\"Training\" icon=\"training\">\n          <Navigation>\n            <Item itemid=\"2-1\" text=\"Apps1\" icon=\"service\" opened={false}>\n              <Navigation>\n                <Item itemid=\"2-1-1\" text=\"Apps2\" icon=\"service\" />\n                <Item itemid=\"2-1-2\" text=\"Apps3\" icon=\"service\" />\n              </Navigation>\n            </Item>\n            <Item itemid=\"2-2\" text=\"Apps2\" icon=\"service\">\n              <Navigation>\n                <Item itemid=\"2-2-1\" text=\"Apps2\" icon=\"service\" />\n                <Item itemid=\"2-2-2\" text=\"Apps3\" icon=\"service\" />\n              </Navigation>\n            </Item>\n            <Item itemid=\"2-3\" text=\"Apps3\" icon=\"service\" />\n          </Navigation>\n        </Item>\n        <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" />\n        <Item itemid=\"4\" text=\"History\" icon=\"history\" />\n        <Item\n          itemid=\"5\"\n          text=\"有链接\"\n          icon=\"attachment\"\n          link=\"https://www.taobao.com\"\n          target=\"_blank\"\n        />\n        <Item itemid=\"6\" text=\"Electronics\" icon=\"electronics\" />\n      </Navigation>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n最简单的用法。\n\n"}]},{"name":"Notice","category":"Components","title":"消息提示","type":"展示","importStatement":"import { Notice } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n主动出现在页面上的非常态式信息，公告等。它具有一定的时效性，非功能性。\n\n","propsSchema":{"name":"Notice","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"type":{"type":{"name":"enum","value":[{"value":"'prompt'","computed":false},{"value":"'warning'","computed":false},{"value":"'system'","computed":false}]},"required":false,"description":"提示类型","defaultValue":{"value":"'prompt'","computed":false},"docblock":"提示类型"},"shape":{"type":{"name":"enum","value":[{"value":"'standalone'","computed":false},{"value":"'addon'","computed":false}]},"required":false,"description":"外观形状","defaultValue":{"value":"'standalone'","computed":false},"docblock":"外观形状"},"size":{"type":{"name":"enum","value":[{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"尺寸大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"尺寸大小"},"title":{"type":{"name":"node"},"required":false,"description":"标题","defaultValue":{"value":"''","computed":false},"docblock":"标题"},"children":{"type":{"name":"node"},"required":false,"description":"内容","docblock":"内容"},"defaultVisible":{"type":{"name":"bool"},"required":false,"description":"默认是否显示","defaultValue":{"value":"true","computed":false},"docblock":"默认是否显示"},"visible":{"type":{"name":"bool"},"required":false,"description":"当前是否显示","docblock":"当前是否显示"},"closable":{"type":{"name":"bool"},"required":false,"description":"是否可关闭","defaultValue":{"value":"false","computed":false},"docblock":"是否可关闭"},"onClose":{"type":{"name":"func"},"required":false,"description":"关闭时的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"关闭时的回调函数","params":[],"returns":null},"afterClose":{"type":{"name":"func"},"required":false,"description":"关闭后（动画播放完毕）的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"关闭后（动画播放完毕）的回调函数","params":[],"returns":null},"iconType":{"type":{"name":"string"},"required":false,"description":"自定义图标类型，支持Icon列表请参考[Icon组件](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=icon#Icon-0)","docblock":"自定义图标类型，支持Icon列表请参考[Icon组件](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=icon#Icon-0)"},"animation":{"type":{"name":"bool"},"required":false,"description":"是否开启动画","defaultValue":{"value":"true","computed":false},"docblock":"是否开启动画"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ntype | 提示类型<br><br>**可选值**:<br>'prompt', 'warning', 'system' | Enum | 'prompt'\nshape | 外观形状<br><br>**可选值**:<br>'standalone', 'addon' | Enum | 'standalone'\nsize | 尺寸大小<br><br>**可选值**:<br>'medium', 'large' | Enum | 'medium'\ntitle | 标题 | ReactNode | ''\nchildren | 内容 | ReactNode | -\ndefaultVisible | 默认是否显示 | Boolean | true\nvisible | 当前是否显示 | Boolean | -\nclosable | 是否可关闭 | Boolean | false\nonClose | 关闭时的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterClose | 关闭后（动画播放完毕）的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\niconType | 自定义图标类型，支持Icon列表请参考[Icon组件](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=icon#Icon-0) | String | -\nanimation | 是否开启动画 | Boolean | true\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"组件类型","order":"0","jsx":"import { Notice } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Notice title=\"title\">Content Content Content Content</Notice>\n    <Notice title=\"title\" type=\"warning\">\n      Content Content Content Content\n    </Notice>\n    <Notice title=\"title\" type=\"system\">\n      Content Content Content Content\n    </Notice>\n  </div>,\n  mountNode\n);\n\n","css":".next-notice {\n    margin-bottom: 10px;\n}\n","body":"\n通过设置`type`为`prompt`、`warning`、`system`可分别创建普通、警告、系统提示组件，`type`默认值为`prompt`。\n提示组件有三种类型：普通提示、警告提示、系统提示。\n\n"},{"title":"可关闭组件","order":"3","jsx":"import { Notice } from \"@icedesign/base\";\n\nconst onClose = () => console.log(\"onClose triggered!\");\nconst afterClose = () => console.log(\"afterClose triggered!\");\n\nReactDOM.render(\n  <div>\n    <Notice title=\"title\" closable onClose={onClose} afterClose={afterClose}>\n      Content Content Content Content\n    </Notice>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n通过增加`closable`属性可以控制提示框是否可关闭。\n\n"},{"title":"受控显示隐藏","order":"4","jsx":"import { Notice, Button } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: true\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleChange() {\n    this.setState({\n      visible: !this.state.visible\n    });\n  }\n\n  handleClose() {\n    this.setState({\n      visible: false\n    });\n  }\n\n  render() {\n    const { visible } = this.state;\n\n    return (\n      <div className=\"control-demo\">\n        <Button onClick={this.handleChange}>Toggle Visible</Button>\n        <Notice\n          type=\"warning\"\n          visible={visible}\n          title=\"警告\"\n          closable\n          onClose={this.handleClose}\n        >\n          现在不是一个买房的低点，建议慎重考虑。\n        </Notice>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".control-demo .next-btn-medium {\n    margin-bottom: 10px;\n}\n","body":"\n"},{"title":"定制组件外观","order":"5","jsx":"import { Notice } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Notice\n    className=\"custom\"\n    closable\n    iconType=\"success\"\n    title={\n      <span>\n        您的 信用保障极速贷款服务申请 已通过，获得信用保障极速贷款总额度：<a\n          className=\"redit-lines\"\n          href=\"\"\n        >\n          300000\n        </a>{\" \"}\n        人民币\n      </span>\n    }\n  />,\n  mountNode\n);\n\n","css":".custom.next-notice.next-notice-prompt.next-notice-standalone {\n    border-color: #1DC11D;\n}\n\n.custom .next-icon-success:before {\n    color: #1DC11D;\n}\n\n.custom .redit-lines {\n    color: #FF6A00;\n}\n","body":"\n"},{"title":"组件外观","order":"1","jsx":"import { Notice, Select } from \"@icedesign/base\";\n\nconst Option = Select.Option;\n\nconst types = [\"prompt\", \"warning\", \"system\"];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shape: \"standalone\"\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleSelect(shape) {\n    this.setState({ shape });\n  }\n\n  render() {\n    const { shape } = this.state;\n\n    return (\n      <div className=\"notice-shape-demo\">\n        <span className=\"demo-label\">请选择Shape：</span>\n        <Select defaultValue=\"standalone\" onChange={this.handleSelect}>\n          <Option value=\"standalone\">Standalone</Option>\n          <Option value=\"addon\">Addon</Option>\n        </Select>\n\n        {types.map(type => (\n          <Notice\n            key={type}\n            title=\"title\"\n            type={type}\n            shape={shape}\n            animation={false}\n          >\n            Content Content Content Content\n          </Notice>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".notice-shape-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 28px;\n    line-height: 28px;\n}\n\n.notice-shape-demo .next-notice {\n    margin-top: 10px;\n}\n","body":"\n注意，当通知组件的`type`属性值为`system`时，无论是否设置组件的外观`shape`值，组件都表现为有外观。\n- `addon` 嵌入型，即通知组件会取消边框的显示，用于嵌入在某些内容区域中\n- `standalone` 默认外观，即提示组件会自带边框\n提示组件有三种外观，可以通过`shape`属性设置。\n\n"},{"title":"组件尺寸","order":"2","jsx":"import { Notice, Select } from \"@icedesign/base\";\n\nconst Option = Select.Option;\n\nconst types = [\"prompt\", \"warning\", \"system\"];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: \"medium\"\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleSelect(size) {\n    this.setState({ size });\n  }\n\n  render() {\n    const { size } = this.state;\n\n    return (\n      <div className=\"notice-size-demo\">\n        <span className=\"demo-label\">请选择Size：</span>\n        <Select defaultValue=\"medium\" onChange={this.handleSelect}>\n          <Option value=\"medium\">Medium</Option>\n          <Option value=\"large\">Large</Option>\n        </Select>\n\n        {types.map(type => (\n          <Notice\n            key={type}\n            title=\"title\"\n            type={type}\n            size={size}\n            animation={false}\n          >\n            Content Content Content Content\n          </Notice>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".notice-size-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 28px;\n    line-height: 28px;\n}\n\n.notice-size-demo .next-notice {\n    margin-top: 10px;\n}\n","body":"\n通过设置`size`属性为`medium`、`large`可分别创建普通尺寸、大尺寸的提示组件，`size`默认值为`medium`。\n提示组件共有两种尺寸：普通、大型。\n\n"}]},{"name":"NumberPicker","category":"Components","title":"数字输入框","type":"表单","importStatement":"import { NumberPicker } from '@icedesign/base';","body":"\n\n## 开发指南\n\n### 何时使用\n\n数字选择器，并对输入的数据做正确性检查、自动订正。\n\n### 注意事项\n\n1.  自动订正可能会导致onChange返回值和你输入的数据不一样。\n\n2.  其中有些中间输入状态无法触发onChange，主要考虑到自动订正可能永远无法到达想要的值了。例如：\n\n    -   `0`=>`0.`=>`0.0`=>`0.01`  中间两步不会触发onChange，因为如果订正会一直停留在0导致永远无法到达想要的值\n    -   min=10 的情况下, 输入 `1`=>`12`  第一步 `1` 不会触发onChange也不会订正数据，因为数字是一个一个输入的\n\n3.  如果输入时没触发onChange，会在onBlur检测数据正确性并触发onChange\n\n","propsSchema":{"name":"NumberPicker","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"type":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false,"description":"普通"},{"value":"'inline'","computed":false,"description":"内联"}]},"required":false,"description":"设置类型","defaultValue":{"value":"'normal'","computed":false},"docblock":"设置类型\n@enumdesc 普通, 内联","value":[{"value":"'normal'","computed":false,"description":"普通"},{"value":"'inline'","computed":false,"description":"内联"}]},"value":{"type":{"name":"number"},"required":false,"description":"当前值","docblock":"当前值"},"defaultValue":{"type":{"name":"number"},"required":false,"description":"默认值","defaultValue":{"value":"0","computed":false},"docblock":"默认值"},"step":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"步长","defaultValue":{"value":"1","computed":false},"docblock":"步长"},"editable":{"type":{"name":"bool"},"required":false,"description":"用户是否可以输入","defaultValue":{"value":"true","computed":false},"docblock":"用户是否可以输入"},"inputWidth":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"输入框的宽度","docblock":"输入框的宽度"},"onChange":{"type":{"name":"func"},"required":false,"description":"数值被改变的事件","defaultValue":{"value":"function noop() {\n}","computed":false},"docblock":"数值被改变的事件\n@param {Number} value 数据\n@param {Event} e DOM事件对象","params":[{"name":"value","description":"数据","type":{"name":"Number"}},{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null},"onKeyDown":{"type":{"name":"func"},"required":false,"description":"键盘按下","defaultValue":{"value":"function noop() {\n}","computed":false},"docblock":"键盘按下","params":[],"returns":null},"onFocus":{"type":{"name":"func"},"required":false,"description":"焦点获得","defaultValue":{"value":"function noop() {\n}","computed":false},"docblock":"焦点获得","params":[],"returns":null},"onBlur":{"type":{"name":"func"},"required":false,"description":"焦点失去","defaultValue":{"value":"function noop() {\n}","computed":false},"docblock":"焦点失去","params":[],"returns":null},"onDisabled":{"type":{"name":"func"},"required":false,"description":"按钮被禁用时候点击的回调","defaultValue":{"value":"function noop() {\n}","computed":false},"docblock":"按钮被禁用时候点击的回调\n@param {Event} e DOM事件对象","params":[{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null},"onCorrect":{"type":{"name":"func"},"required":false,"description":"数值订正后的回调","defaultValue":{"value":"function noop() {\n}","computed":false},"docblock":"数值订正后的回调\n@param {Object} obj {currentValue,oldValue:String}","params":[{"name":"obj","description":"{currentValue,oldValue:String}","type":{"name":"Object"}}],"returns":null},"max":{"type":{"name":"number"},"required":false,"description":"最大值","defaultValue":{"value":"Infinity","computed":true},"docblock":"最大值"},"min":{"type":{"name":"number"},"required":false,"description":"最小值","defaultValue":{"value":"-Infinity","computed":false},"docblock":"最小值"},"className":{"type":{"name":"string"},"required":false,"description":"自定义class","docblock":"自定义class"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","defaultValue":{"value":"{}","computed":false},"docblock":"自定义内联样式","properties":[]}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\ntype | 设置类型<br><br>**可选值**:<br>'normal'(普通)<br>'inline'(内联) | Enum | 'normal'\nvalue | 当前值 | Number | -\ndefaultValue | 默认值 | Number | 0\nstep | 步长 | Number/String | 1\neditable | 用户是否可以输入 | Boolean | true\ninputWidth | 输入框的宽度 | Number/String | -\nonChange | 数值被改变的事件<br><br>**签名**:<br>Function(value: Number, e: Event) => void<br>**参数**:<br>*value*: {Number} 数据<br>*e*: {Event} DOM事件对象 | Function | function noop() { }\nonKeyDown | 键盘按下<br><br>**签名**:<br>Function() => void | Function | function noop() { }\nonFocus | 焦点获得<br><br>**签名**:<br>Function() => void | Function | function noop() { }\nonBlur | 焦点失去<br><br>**签名**:<br>Function() => void | Function | function noop() { }\nonDisabled | 按钮被禁用时候点击的回调<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>*e*: {Event} DOM事件对象 | Function | function noop() { }\nonCorrect | 数值订正后的回调<br><br>**签名**:<br>Function(obj: Object) => void<br>**参数**:<br>*obj*: {Object} {currentValue,oldValue:String} | Function | function noop() { }\nmax | 最大值 | Number | Infinity\nmin | 最小值 | Number | -Infinity\nclassName | 自定义class | String | -\nstyle | 自定义内联样式 | Object | {}\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本用法","order":"0","jsx":"import { NumberPicker } from \"@icedesign/base\";\n\nfunction onChange(value, e) {\n  console.log(value, e.type, e.triggerType);\n}\n\nReactDOM.render(\n  <div>\n    <NumberPicker onChange={onChange} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n如果是点击`+` `-` 触发，可以通过 `e.triggerType` 获取\nonChange 第二个参数 e.type 可以获取事件类型。\n\n"},{"title":"不可用","order":"2","jsx":"import { NumberPicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <NumberPicker disabled />\n    <br />\n    <br />\n    <NumberPicker type=\"inline\" disabled />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n不可用的 number picker。\n\n"},{"title":"不可直接输入","order":"0","jsx":"import { NumberPicker, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editable: false,\n      value: 0\n    };\n  }\n\n  toogle() {\n    this.setState({\n      editable: !this.state.editable\n    });\n  }\n\n  onChange(value) {\n    console.log(\"changed\", value);\n    this.setState({\n      value: value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <NumberPicker\n          onChange={this.onChange.bind(this)}\n          value={this.state.value}\n          editable={this.state.editable}\n        />\n        <br />\n        <br />\n        <Button onClick={this.toogle.bind(this)}>\n          切换到 {!this.state.editable ? \"可编辑\" : \"不可编辑\"}\n        </Button>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n用户不可直接输入编辑数据\n\n"},{"title":"inline 的 number picker","order":"1","jsx":"import { NumberPicker } from \"@icedesign/base\";\n\nfunction onChange(value) {\n  console.log(\"changed\", value);\n}\n\nReactDOM.render(\n  <div>\n    <NumberPicker type=\"inline\" onChange={onChange} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\ntype 为 inline 的 number picker。\n\n"},{"title":"宽度自定义","order":"0","jsx":"import { NumberPicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <NumberPicker inputWidth={\"60px\"} defaultValue={100000} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\ninputWidth 控制input宽度\n\n"},{"title":"最大最小值","order":"0","jsx":"import { NumberPicker } from \"@icedesign/base\";\n\nfunction onChange(value, e) {\n  console.log(value, e);\n}\nfunction onDisabled(e) {\n  console.log(e);\n}\nfunction onCorrect(obj) {\n  console.log(obj);\n}\nReactDOM.render(\n  <div>\n    <NumberPicker\n      type=\"inline\"\n      step={3}\n      min={6}\n      max={30}\n      defaultValue={6}\n      onChange={onChange}\n      onDisabled={onDisabled}\n      onCorrect={onCorrect}\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n当数据自动订正会触发 onCorrect\nmin max 来限制value的最大最小值。\n\n"},{"title":"步长","order":"0","jsx":"import { NumberPicker } from \"@icedesign/base\";\n\nfunction onChange(value) {\n  console.log(\"changed\", value);\n}\nfunction onCorrect(obj) {\n  console.log(obj);\n}\nReactDOM.render(\n  <div>\n    <NumberPicker onChange={onChange} onCorrect={onCorrect} step={0.01} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n通过step控制每次加减步长\n\n"}]},{"name":"Overlay","category":"Utility","title":"弹层","importStatement":"import { Overlay } from '@icedesign/base';","body":"\n用于弹层类的工具类集合.\n\n## 开发指南\n\nOverlay提供了一系列的组件的集合用于创建弹层组件。其中包含：\n\n### Gateway\n\nGateway的作用是将节点渲染到指定的容器中。正常情况下React使用当前节点所在的父节点作为容器，但是Gateway可以将其包含的节点渲染到另外的节点中。\n\nGateway只有一个配置项就是`container`, 它可以接受字符串和函数。\n\n```html\n// 将span渲染到id为container的节点中\n<Gateway container=\"container\">\n    <span>123</span>\n</Gateway>\n```\n\n实际上也可以传入container为函数，返回节点的ref.\n\n```html\n<div ref=\"container\"></div>\n<Gateway container={() => this.refs.container}>\n    <span>123</span>\n</Gateway>\n```\n\n### Overlay\n\nOverlay利用了Gateway提供的能力，可以在页面中弹出一个浮层，封装了动画和定位及一些可用性的功能。\n\nOverlay被设计为无状态的组件，其本身并不控制自己的显示和隐藏的状态。\n\n**注意:** 类似的canCloseby\\*的配置也需要配合onRequestClose才能关闭Overlay\n\n#### 安全节点\n\n弹层同时提供点击文档中的节点隐藏该弹层的功能，但是由于React内部维护了一个事件队列，且并未提供针对document的事件绑定方式，所以在点击任何一个节点\n都会触发document的click，即便手动阻止冒泡也不行， Overlay采用了一个安全节点的设置来避免这个问题.\n\n#### 定位\n\n1.  align由空格隔开的字符串表示，例如 `tl bl`. 其中`tl`代表目标元素的左上方，`bl`代表基准元素的左下方，所以`tl bl`的意思是目标元素的左上方对齐基准元素左下方。\n    其中定位的可选值有 `tl`, `tc`, `tr`, `cl`, `cc`, `cr`, `bl`, `bc`, `br`.\n\n2.  align支持的Boolean值仅为false，在设置为false的时候，不使用JS定位，这样你可以根据你的需要传入style或者className进行CSS定位。\n\n**说明**  `t`为`top`的缩写，`b`为`bottom`的缩写，`c`为`center`的缩写，`l`为`left`的缩写，`r`为`right`的缩写.\n\n下面的例子演示了如何将弹层定位到页面的右上角\n\n```html\n<Overlay visible align=\"tr tr\"><span>123</span></Overlay>\n```\n\n### Popup\n\n接收某个节点，弹出一个浮层, 这个浮层默认情况下使用这个节点作为定位的参照对象\n\n","propsSchema":{"name":"Overlay","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义样式对象","docblock":"自定义样式对象","properties":[]},"children":{"type":{"name":"any"},"required":false,"description":"浮层内容","docblock":"浮层内容"},"visible":{"type":{"name":"bool"},"required":false,"description":"是否显示浮层, 如果此属性为false，浮层不会被渲染","defaultValue":{"value":"false","computed":false},"docblock":"是否显示浮层, 如果此属性为false，浮层不会被渲染"},"canCloseByEsc":{"type":{"name":"bool"},"required":false,"description":"是否支持esc按键关闭浮层","defaultValue":{"value":"true","computed":false},"docblock":"是否支持esc按键关闭浮层"},"canCloseByOutSideClick":{"type":{"name":"bool"},"required":false,"description":"点击浮层外的区域是否关闭浮层","defaultValue":{"value":"true","computed":false},"docblock":"点击浮层外的区域是否关闭浮层"},"canCloseByMask":{"type":{"name":"bool"},"required":false,"description":"点击遮罩区域是否关闭浮层","defaultValue":{"value":"true","computed":false},"docblock":"点击遮罩区域是否关闭浮层"},"animation":{"type":{"name":"union","value":[{"name":"object"},{"name":"bool"}]},"required":false,"description":"配置动画的播放方式","defaultValue":{"value":"{\n    in: 'expandInDown',\n    out: 'expandOutUp'\n}","computed":false},"docblock":"配置动画的播放方式\n@param {String} in 进场动画\n@param {String} out 出场动画"},"target":{"type":{"name":"any"},"required":false,"description":"配置浮层定位的参照元素","defaultValue":{"value":"Position.VIEWPORT","computed":true},"docblock":"配置浮层定位的参照元素"},"align":{"type":{"name":"union","value":[{"name":"string"},{"name":"bool"}]},"required":false,"description":"浮层相对于target的定位, 详见开发指南的[定位部分](#定位)","defaultValue":{"value":"'tl bl'","computed":false},"docblock":"浮层相对于target的定位, 详见开发指南的[定位部分](#定位)"},"offset":{"type":{"name":"array"},"required":false,"description":"浮层相对于target定位的微调","defaultValue":{"value":"[0, 0]","computed":false},"docblock":"浮层相对于target定位的微调"},"beforeClose":{"type":{"name":"func"},"required":false,"description":"浮层关闭前触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"浮层关闭前触发的事件","params":[],"returns":null},"onClose":{"type":{"name":"func"},"required":false,"description":"浮层关闭后触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"浮层关闭后触发的事件","params":[],"returns":null},"afterClose":{"type":{"name":"func"},"required":false,"description":"浮层关闭后触发的事件, 如果有动画，则在动画结束后触发","defaultValue":{"value":"() => {}","computed":false},"docblock":"浮层关闭后触发的事件, 如果有动画，则在动画结束后触发","params":[],"returns":null},"beforeOpen":{"type":{"name":"func"},"required":false,"description":"浮层打开前触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"浮层打开前触发的事件","params":[],"returns":null},"onOpen":{"type":{"name":"func"},"required":false,"description":"浮层打开后触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"浮层打开后触发的事件","params":[],"returns":null},"afterOpen":{"type":{"name":"func"},"required":false,"description":"浮层打开后触发的事件, 如果有动画，则在动画结束后触发","defaultValue":{"value":"() => {}","computed":false},"docblock":"浮层打开后触发的事件, 如果有动画，则在动画结束后触发","params":[],"returns":null},"onRequestClose":{"type":{"name":"func"},"required":false,"description":"浮层请求关闭触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"浮层请求关闭触发的事件\n@param {String} reason 浮层关闭的来源\n@param {Event} e DOM事件","params":[{"name":"reason","description":"浮层关闭的来源","type":{"name":"String"}},{"name":"e","description":"DOM事件","type":{"name":"Event"}}],"returns":null},"beforePosition":{"type":{"name":"func"},"required":false,"description":"浮层定位完成前触发的事件","docblock":"浮层定位完成前触发的事件","params":[],"returns":null},"onPosition":{"type":{"name":"func"},"required":false,"description":"浮层定位完成后触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"浮层定位完成后触发的事件\n@param {Object} config 定位的参数\n@param {Object} node 定位的元素","params":[{"name":"config","description":"定位的参数","type":{"name":"Object"}},{"name":"node","description":"定位的元素","type":{"name":"Object"}}],"returns":null},"autoFocus":{"type":{"name":"bool"},"required":false,"description":"浮层打开的时候是否让里面的元素自动获取焦点","defaultValue":{"value":"false","computed":false},"docblock":"浮层打开的时候是否让里面的元素自动获取焦点"},"hasMask":{"type":{"name":"bool"},"required":false,"description":"是否显示遮罩","defaultValue":{"value":"false","computed":false},"docblock":"是否显示遮罩"},"cache":{"type":{"name":"bool"},"required":false,"description":"隐藏时是否保留子节点","defaultValue":{"value":"false","computed":false},"docblock":"隐藏时是否保留子节点"},"safeNode":{"type":{"name":"any"},"required":false,"description":"安全节点,当点击document的时候, 如果包含该节点则不会关闭浮层, 如果是函数需要返回ref, 如果是字符串则是该DOM的id, 也可以直接传入DOM节点","docblock":"安全节点,当点击document的时候, 如果包含该节点则不会关闭浮层, 如果是函数需要返回ref, 如果是字符串则是该DOM的id, 也可以直接传入DOM节点"},"wrapperClassName":{"type":{"name":"string"},"required":false,"description":"浮层的根节点的样式类","docblock":"浮层的根节点的样式类"},"container":{"type":{"name":"any"},"required":false,"description":"指定渲染组件的容器","docblock":"指定渲染组件的容器"},"shouldUpdatePosition":{"type":{"name":"bool"},"required":false,"description":"强制更新定位信息","docblock":"强制更新定位信息"},"needAdjust":{"type":{"name":"bool"},"required":false,"description":"是否自动调整定位的位置","docblock":"是否自动调整定位的位置"},"disableScroll":{"type":{"name":"bool"},"required":false,"description":"是否禁用页面滚动","defaultValue":{"value":"false","computed":false},"docblock":"是否禁用页面滚动"}},"methods":[],"subComponents":[{"name":"Gateway","props":{"container":{"type":{"name":"any"},"required":false,"description":"指定渲染children的容器","defaultValue":{"value":"() => document.body","computed":false},"docblock":"指定渲染children的容器"}},"methods":[]},{"name":"Popup","props":{"align":{"type":{"name":"string"},"required":false,"description":"弹层相对于target的定位, 详见开发指南的[定位部分](#定位)","defaultValue":{"value":"'tl bl'","computed":false},"docblock":"弹层相对于target的定位, 详见开发指南的[定位部分](#定位)"},"offset":{"type":{"name":"array"},"required":false,"description":"弹层相对于target定位的微调","defaultValue":{"value":"[0, 0]","computed":false},"docblock":"弹层相对于target定位的微调"},"trigger":{"type":{"name":"any"},"required":false,"description":"触发弹层显示或者隐藏的元素","defaultValue":{"value":"<div></div>","computed":false},"docblock":"触发弹层显示或者隐藏的元素"},"triggerType":{"type":{"name":"string"},"required":false,"description":"触发弹层显示的类型","defaultValue":{"value":"'hover'","computed":false},"docblock":"触发弹层显示的类型"},"visible":{"type":{"name":"bool"},"required":false,"description":"弹层当前显示的状态","docblock":"弹层当前显示的状态"},"defaultVisible":{"type":{"name":"bool"},"required":false,"description":"弹层默认显示的状态","docblock":"弹层默认显示的状态"},"disabled":{"type":{"name":"bool"},"required":false,"description":"设置此属性，弹层无法打开","defaultValue":{"value":"false","computed":false},"docblock":"设置此属性，弹层无法打开"},"delay":{"type":{"name":"number"},"required":false,"description":"弹层在触发以后的延时显示","defaultValue":{"value":"200","computed":false},"docblock":"弹层在触发以后的延时显示"},"canCloseByOutSideClick":{"type":{"name":"bool"},"required":false,"description":"点击浮层外的区域是否关闭浮层","defaultValue":{"value":"true","computed":false},"docblock":"点击浮层外的区域是否关闭浮层"},"onVisibleChange":{"type":{"name":"func"},"required":false,"description":"弹层在显示和隐藏触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层在显示和隐藏触发的事件\n@param {Boolean} visible 弹层是否隐藏和显示\n@param {String} type 触发弹层显示和隐藏的来源\n@param {Event} e DOM事件","params":[{"name":"visible","description":"弹层是否隐藏和显示","type":{"name":"Boolean"}},{"name":"type","description":"触发弹层显示和隐藏的来源","type":{"name":"String"}},{"name":"e","description":"DOM事件","type":{"name":"Event"}}],"returns":null},"autoFocus":{"type":{"name":"bool"},"required":false,"description":"浮层打开的时候是否让里面的元素自动获取焦点","docblock":"浮层打开的时候是否让里面的元素自动获取焦点"},"animation":{"type":{"name":"union","value":[{"name":"object"},{"name":"bool"}]},"required":false,"description":"配置动画的播放方式","defaultValue":{"value":"{\n    in: 'expandInDown',\n    out: 'expandOutUp'\n}","computed":false},"docblock":"配置动画的播放方式\n@param {String} in 进场动画\n@param {String} out 出场动画"},"target":{"type":{"name":"any"},"required":false,"description":"配置弹层定位的参照元素","docblock":"配置弹层定位的参照元素"}},"methods":[]},{"name":"Position","props":{"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"target":{"type":{"name":"any"},"required":false,"description":"定位参照的元素","docblock":"定位参照的元素"},"contentNode":{"type":{"name":"any"},"required":false,"description":"定位的目标元素","docblock":"定位的目标元素"},"align":{"type":{"name":"union","value":[{"name":"string"},{"name":"bool"}]},"required":false,"description":"定位的方式, 详见开发指南的[定位部分](#定位)","defaultValue":{"value":"'tl bl'","computed":false},"docblock":"定位的方式, 详见开发指南的[定位部分](#定位)"},"offset":{"type":{"name":"array"},"required":false,"description":"相对于target定位的微调","defaultValue":{"value":"[0, 0]","computed":false},"docblock":"相对于target定位的微调"},"beforePosition":{"type":{"name":"func"},"required":false,"description":"定位完成前触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"定位完成前触发的事件","params":[],"returns":null},"onPosition":{"type":{"name":"func"},"required":false,"description":"定位完成后触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"定位完成后触发的事件\n@param {Object} config 定位的参数\n@param {Object} node 定位的元素","params":[{"name":"config","description":"定位的参数","type":{"name":"Object"}},{"name":"node","description":"定位的元素","type":{"name":"Object"}}],"returns":null},"needAdjust":{"type":{"name":"bool"},"required":false,"description":"是否自动调整定位的位置","defaultValue":{"value":"true","computed":false},"docblock":"是否自动调整定位的位置"},"needListenResize":{"type":{"name":"bool"},"required":false,"description":"是否监听Resize事件","defaultValue":{"value":"true","computed":false},"docblock":"是否监听Resize事件"},"shouldUpdatePosition":{"type":{"name":"bool"},"required":false,"description":"强制更新定位信息","defaultValue":{"value":"false","computed":false},"docblock":"强制更新定位信息"},"isRtl":{"type":{"name":"bool"},"required":false,"description":"对齐方式","defaultValue":{"value":"false","computed":false},"docblock":"对齐方式"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义样式对象 | Object | -\nchildren | 浮层内容 | any | -\nvisible | 是否显示浮层, 如果此属性为false，浮层不会被渲染 | Boolean | false\ncanCloseByEsc | 是否支持esc按键关闭浮层 | Boolean | true\ncanCloseByOutSideClick | 点击浮层外的区域是否关闭浮层 | Boolean | true\ncanCloseByMask | 点击遮罩区域是否关闭浮层 | Boolean | true\nanimation | 配置动画的播放方式 | Object/Boolean | {     in: 'expandInDown',     out: 'expandOutUp' }\ntarget | 配置浮层定位的参照元素 | any | Position.VIEWPORT\nalign | 浮层相对于target的定位, 详见开发指南的[定位部分](#定位) | String/Boolean | 'tl bl'\noffset | 浮层相对于target定位的微调 | Array | [0, 0]\nbeforeClose | 浮层关闭前触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonClose | 浮层关闭后触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterClose | 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nbeforeOpen | 浮层打开前触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonOpen | 浮层打开后触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterOpen | 浮层打开后触发的事件, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonRequestClose | 浮层请求关闭触发的事件<br><br>**签名**:<br>Function(reason: String, e: Event) => void<br>**参数**:<br>*reason*: {String} 浮层关闭的来源<br>*e*: {Event} DOM事件 | Function | () =&gt; {}\nbeforePosition | 浮层定位完成前触发的事件<br><br>**签名**:<br>Function() => void | Function | -\nonPosition | 浮层定位完成后触发的事件<br><br>**签名**:<br>Function(config: Object, node: Object) => void<br>**参数**:<br>*config*: {Object} 定位的参数<br>*node*: {Object} 定位的元素 | Function | () =&gt; {}\nautoFocus | 浮层打开的时候是否让里面的元素自动获取焦点 | Boolean | false\nhasMask | 是否显示遮罩 | Boolean | false\ncache | 隐藏时是否保留子节点 | Boolean | false\nsafeNode | 安全节点,当点击document的时候, 如果包含该节点则不会关闭浮层, 如果是函数需要返回ref, 如果是字符串则是该DOM的id, 也可以直接传入DOM节点 | any | -\nwrapperClassName | 浮层的根节点的样式类 | String | -\ncontainer | 指定渲染组件的容器 | any | -\nshouldUpdatePosition | 强制更新定位信息 | Boolean | -\nneedAdjust | 是否自动调整定位的位置 | Boolean | -\ndisableScroll | 是否禁用页面滚动 | Boolean | false\n","methodREADME":[],"subComponentsREADME":[{"name":"Gateway","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\ncontainer | 指定渲染children的容器 | any | () =&gt; document.body\n","methodREADME":[]},{"name":"Popup","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nalign | 弹层相对于target的定位, 详见开发指南的[定位部分](#定位) | String | 'tl bl'\noffset | 弹层相对于target定位的微调 | Array | [0, 0]\ntrigger | 触发弹层显示或者隐藏的元素 | any | &lt;div&gt;&lt;/div&gt;\ntriggerType | 触发弹层显示的类型 | String | 'hover'\nvisible | 弹层当前显示的状态 | Boolean | -\ndefaultVisible | 弹层默认显示的状态 | Boolean | -\ndisabled | 设置此属性，弹层无法打开 | Boolean | false\ndelay | 弹层在触发以后的延时显示 | Number | 200\ncanCloseByOutSideClick | 点击浮层外的区域是否关闭浮层 | Boolean | true\nonVisibleChange | 弹层在显示和隐藏触发的事件<br><br>**签名**:<br>Function(visible: Boolean, type: String, e: Event) => void<br>**参数**:<br>*visible*: {Boolean} 弹层是否隐藏和显示<br>*type*: {String} 触发弹层显示和隐藏的来源<br>*e*: {Event} DOM事件 | Function | () =&gt; {}\nautoFocus | 浮层打开的时候是否让里面的元素自动获取焦点 | Boolean | -\nanimation | 配置动画的播放方式 | Object/Boolean | {     in: 'expandInDown',     out: 'expandOutUp' }\ntarget | 配置弹层定位的参照元素 | any | -\n","methodREADME":[]},{"name":"Position","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nclassName | 自定义类名 | String | -\ntarget | 定位参照的元素 | any | -\ncontentNode | 定位的目标元素 | any | -\nalign | 定位的方式, 详见开发指南的[定位部分](#定位) | String/Boolean | 'tl bl'\noffset | 相对于target定位的微调 | Array | [0, 0]\nbeforePosition | 定位完成前触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonPosition | 定位完成后触发的事件<br><br>**签名**:<br>Function(config: Object, node: Object) => void<br>**参数**:<br>*config*: {Object} 定位的参数<br>*node*: {Object} 定位的元素 | Function | () =&gt; {}\nneedAdjust | 是否自动调整定位的位置 | Boolean | true\nneedListenResize | 是否监听Resize事件 | Boolean | true\nshouldUpdatePosition | 强制更新定位信息 | Boolean | false\nisRtl | 对齐方式 | Boolean | false\n","methodREADME":[]}],"demos":[{"title":"遮罩","order":"2","jsx":"import { Overlay } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      visible: false\n    };\n  }\n  render() {\n    return (\n      <span>\n        <button onClick={this.onClick.bind(this)} ref=\"target\">\n          Open\n        </button>\n        <Overlay\n          visible={this.state.visible}\n          hasMask\n          disableScroll\n          align=\"cc cc\"\n          safeNode={() => this.refs.target}\n          onRequestClose={this.onClose.bind(this)}\n        >\n          <span className=\"overlay-demo\">Hello World From Overlay!</span>\n        </Overlay>\n      </span>\n    );\n  }\n  onClick() {\n    this.setState({ visible: true });\n  }\n  onClose = reason => {\n    console.log(\"onRequestClose emit!, reason: \", reason);\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n","body":"\n带有遮罩的弹出层\n\n"},{"title":"受控","order":"3","jsx":"import { Overlay } from \"@icedesign/base\";\n\nconst Popup = Overlay.Popup;\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n  render() {\n    return (\n      <Popup\n        trigger={<button>Open</button>}\n        visible={this.state.visible}\n        triggerType=\"click\"\n        onVisibleChange={this.onVisibleChange}\n      >\n        <div className=\"overlay-demo\">\n          <button onClick={this.onClose}>Close</button>\n          <p>Hello World From Popup!</p>\n        </div>\n      </Popup>\n    );\n  }\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n  onVisibleChange = visible => {\n    this.setState({\n      visible\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n","body":"\n演示了Popup受控的示例,可以在内部控制Popup的显示和隐藏\n\n"},{"title":"Gateway","order":"0","jsx":"import { Overlay } from \"@icedesign/base\";\n\nconst { Gateway } = Overlay;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <span ref=\"container\" />\n        <Gateway container={() => this.refs.container}>\n          <span>Hello World from gateway.</span>\n        </Gateway>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\nGateway 的基本用法\n\n"},{"title":"弹层嵌套","order":"4","jsx":"import { Overlay } from \"@icedesign/base\";\n\nconst Popup = Overlay.Popup;\n\nclass App extends React.Component {\n  state = {\n    visible: false,\n    overlayVisible: false\n  };\n  render() {\n    return (\n      <Popup\n        trigger={<button>Open</button>}\n        triggerType=\"click\"\n        visible={this.state.visible}\n        onVisibleChange={this.onVisibleChange}\n      >\n        <div className=\"overlay-demo\">\n          <Popup\n            triggerType=\"click\"\n            trigger={<button>Open overlay</button>}\n            container={trigger => trigger && trigger.parentNode}\n            visible={this.state.overlayVisible}\n            onVisibleChange={this.onOverlayVisibleChange}\n          >\n            <div className=\"overlay-demo\" onClick={this.hideOverlay}>\n              Click me will close this overlay, but popup will not close.\n            </div>\n          </Popup>\n          <p>Hello World From Popup!</p>\n        </div>\n      </Popup>\n    );\n  }\n  hideOverlay = () => {\n    this.setState({\n      overlayVisible: false\n    });\n  };\n  showOverlay = () => {\n    this.setState({\n      overlayVisible: true\n    });\n  };\n  onVisibleChange = visible => {\n    this.setState({\n      visible\n    });\n  };\n  onOverlayVisibleChange = overlayVisible => {\n    this.setState({\n      overlayVisible\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n","body":"\n弹层嵌套的时候，使用container属性将容器渲染到第一个弹层的节点内部。\n\n"},{"title":"弹出层","order":"1","jsx":"import { Overlay } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      visible: false\n    };\n  }\n  render() {\n    return (\n      <span>\n        <button onClick={this.onClick.bind(this)} ref=\"target\">\n          Toggle visible\n        </button>\n        <Overlay\n          visible={this.state.visible}\n          target={() => this.refs.target}\n          safeNode={() => this.refs.target}\n          onRequestClose={this.onClose.bind(this)}\n        >\n          <span className=\"overlay-demo\">Hello World From Overlay!</span>\n        </Overlay>\n      </span>\n    );\n  }\n  onClick() {\n    this.setState({ visible: !this.state.visible });\n  }\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n","body":"\n弹出一个浮层\n\n"},{"title":"触发的弹层","order":"3","jsx":"import { Overlay } from \"@icedesign/base\";\n\nconst Popup = Overlay.Popup;\nconst afterClose = () => {\n  console.log(\"close\");\n};\nconst trigger = <button>Open</button>;\nReactDOM.render(\n  <Popup trigger={trigger} triggerType=\"click\" afterClose={afterClose}>\n    <div className=\"overlay-demo\">Hello World From Popup!</div>\n  </Popup>,\n  mountNode\n);\n\n","css":".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n","body":"\n使用Popup弹出一个浮层\n\n"},{"title":"跟随滚动","order":"4","jsx":"import { Overlay } from \"@icedesign/base\";\n\nconst Popup = Overlay.Popup;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"scroll-container\" ref=\"scroll\">\n        <Popup\n          trigger={<button>Open</button>}\n          container={() => this.refs.scroll}\n          triggerType=\"click\"\n        >\n          <div className=\"overlay-demo\">\n            <p>Hello World From Popup!</p>\n          </div>\n        </Popup>\n        <div style={{ height: \"300px\" }} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n.scroll-container {\n    position: relative;\n    height: 150px;\n    border: 1px solid #999;\n    padding: 10px;\n    overflow: auto;\n}\n","body":"\n演示弹层如何跟随滚动\n\n"}]},{"name":"Pagination","category":"Components","title":"翻页器","type":"导航","importStatement":"import { Pagination } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n在有大量内容展现需要进行分页加载处理的时候。\n\n","propsSchema":{"name":"Pagination","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"type":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'simple'","computed":false},{"value":"'mini'","computed":false}]},"required":false,"description":"分页组件类型","defaultValue":{"value":"'normal'","computed":false},"docblock":"分页组件类型"},"shape":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'arrow-only'","computed":false},{"value":"'arrow-prev-only'","computed":false},{"value":"'no-border'","computed":false}]},"required":false,"description":"前进后退按钮样式","defaultValue":{"value":"'normal'","computed":false},"docblock":"前进后退按钮样式"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"分页组件大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"分页组件大小"},"current":{"type":{"name":"number"},"required":false,"description":"（受控）当前页码","docblock":"（受控）当前页码"},"defaultCurrent":{"type":{"name":"number"},"required":false,"description":"（非受控）初始页码","defaultValue":{"value":"1","computed":false},"docblock":"（非受控）初始页码"},"onChange":{"type":{"name":"func"},"required":false,"description":"页码发生改变时的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"页码发生改变时的回调函数\n@param {Number} current 改变后的页码数\n@param {Object} e 点击事件对象","params":[{"name":"current","description":"改变后的页码数","type":{"name":"Number"}},{"name":"e","description":"点击事件对象","type":{"name":"Object"}}],"returns":null},"total":{"type":{"name":"number"},"required":false,"description":"总记录数","defaultValue":{"value":"100","computed":false},"docblock":"总记录数"},"pageShowCount":{"type":{"name":"number"},"required":false,"description":"页码显示的数量，更多的使用...代替","defaultValue":{"value":"5","computed":false},"docblock":"页码显示的数量，更多的使用...代替"},"pageSize":{"type":{"name":"number"},"required":false,"description":"一页中的记录数","defaultValue":{"value":"10","computed":false},"docblock":"一页中的记录数"},"pageSizeSelector":{"type":{"name":"enum","value":[{"value":"false","computed":false},{"value":"'filter'","computed":false},{"value":"'dropdown'","computed":false}]},"required":false,"description":"每页显示记录数量选择器类型","defaultValue":{"value":"false","computed":false},"docblock":"每页显示记录数量选择器类型"},"pageSizeList":{"type":{"name":"arrayOf","value":{"name":"number"}},"required":false,"description":"每页显示记录数量选择器可选值","defaultValue":{"value":"[5, 10, 20]","computed":false},"docblock":"每页显示记录数量选择器可选值"},"pageSizePosition":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'end'","computed":false}]},"required":false,"description":"每页显示记录数量选择器在组件中的位置","defaultValue":{"value":"'start'","computed":false},"docblock":"每页显示记录数量选择器在组件中的位置"},"onPageSizeChange":{"type":{"name":"func"},"required":false,"description":"每页显示记录数量改变时的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"每页显示记录数量改变时的回调函数\n@param {Number} pageSize 改变后的每页显示记录数","params":[{"name":"pageSize","description":"改变后的每页显示记录数","type":{"name":"Number"}}],"returns":null},"hideOnlyOnePage":{"type":{"name":"bool"},"required":false,"description":"当分页数为1时，是否隐藏分页器","defaultValue":{"value":"false","computed":false},"docblock":"当分页数为1时，是否隐藏分页器"},"showJump":{"type":{"name":"bool"},"required":false,"description":"type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域","defaultValue":{"value":"true","computed":false},"docblock":"type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域"},"link":{"type":{"name":"string"},"required":false,"description":"设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：http://xxx.com/{page}","docblock":"设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：http://xxx.com/{page}"},"locale":{"type":{"name":"object"},"required":false,"description":"自定义国际化文案对象","docblock":"自定义国际化文案对象","properties":[]},"language":{"type":{"name":"enum","value":[{"value":"'zh-cn'","computed":false},{"value":"'en-us'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"自定义国际化语言","docblock":"自定义国际化语言"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ntype | 分页组件类型<br><br>**可选值**:<br>'normal', 'simple', 'mini' | Enum | 'normal'\nshape | 前进后退按钮样式<br><br>**可选值**:<br>'normal', 'arrow-only', 'arrow-prev-only', 'no-border' | Enum | 'normal'\nsize | 分页组件大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\ncurrent | （受控）当前页码 | Number | -\ndefaultCurrent | （非受控）初始页码 | Number | 1\nonChange | 页码发生改变时的回调函数<br><br>**签名**:<br>Function(current: Number, e: Object) => void<br>**参数**:<br>*current*: {Number} 改变后的页码数<br>*e*: {Object} 点击事件对象 | Function | () =&gt; {}\ntotal | 总记录数 | Number | 100\npageShowCount | 页码显示的数量，更多的使用...代替 | Number | 5\npageSize | 一页中的记录数 | Number | 10\npageSizeSelector | 每页显示记录数量选择器类型<br><br>**可选值**:<br>false, 'filter', 'dropdown' | Enum | false\npageSizeList | 每页显示记录数量选择器可选值 | Array&lt;Number&gt; | [5, 10, 20]\npageSizePosition | 每页显示记录数量选择器在组件中的位置<br><br>**可选值**:<br>'start', 'end' | Enum | 'start'\nonPageSizeChange | 每页显示记录数量改变时的回调函数<br><br>**签名**:<br>Function(pageSize: Number) => void<br>**参数**:<br>*pageSize*: {Number} 改变后的每页显示记录数 | Function | () =&gt; {}\nhideOnlyOnePage | 当分页数为1时，是否隐藏分页器 | Boolean | false\nshowJump | type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域 | Boolean | true\nlink | 设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：http://xxx.com/{page} | String | -\nlocale | 自定义国际化文案对象 | Object | -\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'zh-cn', 'en-us', 'zh-tw' | Enum | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"受控分页","order":"1","jsx":"import { Pagination } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      current: 2\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(current) {\n    this.setState({\n      current\n    });\n  }\n\n  render() {\n    return (\n      <Pagination current={this.state.current} onChange={this.handleChange} />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n受控分页，是指分页组件的状态由父组件维护，组件自身只负责渲染其父组件传递的值，父组件通过 `current` 属性传递当前的值。\n\n"},{"title":"分页按钮链接","order":"7","jsx":"import { Pagination } from \"@icedesign/base\";\n\nconst format = window.location.href + \"#/{page}\";\n\nReactDOM.render(<Pagination defaultCurrent={2} link={format} />, mountNode);\n\n","css":"","body":"\n可以通过指定 `link` 属性来设置页码按钮的跳转链接，方便SEO，link属性的值为一个包含`{page}`的模板字符串，Pagination组件会将该占位符替换为具体的页码数字。\n\n"},{"title":"每页显示","order":"5","jsx":"import { Pagination } from \"@icedesign/base\";\n\nconst handlePageSizeChange = size => console.log(size);\n\nReactDOM.render(\n  <div>\n    <h3>无每页数量选择器</h3>\n    <Pagination pageSizeSelector={false} />\n    <h3>filter类型每页数量选择器</h3>\n    <Pagination\n      pageSizeSelector=\"filter\"\n      onPageSizeChange={handlePageSizeChange}\n    />\n    <h3>dropdown类型每页数量选择器，并且至于整个组件的尾部</h3>\n    <Pagination\n      pageSizeSelector=\"dropdown\"\n      pageSizePosition=\"end\"\n      onPageSizeChange={handlePageSizeChange}\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过设置 `onPageSizeChange` 属性来指定每页显示的数量变化时的回调函数。\n可以通过设置 `pageSizePosition` 属性来指定 每页显示数量选择 的部件显示在整个组件的开始位置还是结束位置。\n可以通过设置 `pageSizeList` 属性来指定 每页显示数量 可选的值。<br>\n可以通过设置 `pageSizeSelector` 属性来指定是否显示 每页数量选择 的部件以及部件形状。<br>\n可以通过设置 `pageSize` 属性来指定每页显示的数量。<br>\n\n"},{"title":"配合react-router使用","order":"8","jsx":"import { Pagination } from \"@icedesign/base\";\nimport { hashHistory } from \"react-router\";\n\nfunction handleChange(page) {\n  hashHistory.push(page.toString());\n}\n\nReactDOM.render(\n  <Pagination defaultCurrent={2} onChange={handleChange} />,\n  mountNode\n);\n\n","css":"","body":"\n单页应用场景下，Pagination组件可以使用外部跳转的方法来实现单页内部跳转。\n\n"},{"title":"前进后退按钮只显示箭头","order":"4","jsx":"import { Pagination } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>normal</h3>\n    <Pagination defaultCurrent={2} />\n    <h3>arrow-only</h3>\n    <Pagination defaultCurrent={2} shape=\"arrow-only\" />\n    <h3>arrow-prev-only</h3>\n    <Pagination defaultCurrent={2} shape=\"arrow-prev-only\" />\n    <h3>no-border</h3>\n    <Pagination defaultCurrent={2} shape=\"no-border\" type=\"simple\" />\n  </div>,\n  mountNode\n);\n\n","css":".next-pagination + .next-pagination {\n    margin-top: 20px;\n}\n","body":"\n可以通过指定 `shape` 属性来设置前进后退按钮箭头的显示方式。\n\n"},{"title":"显示总数","order":"6","jsx":"import { Pagination } from \"@icedesign/base\";\n\nconst total = 50;\n\nReactDOM.render(\n  <div>\n    <span>{`共 ${total} 项`}</span>\n    <Pagination className=\"custom-pagination\" total={total} />\n  </div>,\n  mountNode\n);\n\n","css":".custom-pagination {\n    display: inline-block;\n    margin-left: 10px;\n}\n","body":"\n分页组件自身并未提供显示总数的功能，但是你可以像这个例子所展示的那样轻松实现该功能。\n\n"},{"title":"分页尺寸","order":"2","jsx":"import { Pagination } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>small</h3>\n    <Pagination defaultCurrent={2} size=\"small\" />\n    <h3>medium</h3>\n    <Pagination defaultCurrent={2} size=\"medium\" />\n    <h3>large</h3>\n    <Pagination defaultCurrent={2} size=\"large\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过指定 `size` 属性来设置分页的尺寸。\n\n"},{"title":"分页类型","order":"3","jsx":"import { Pagination } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>normal</h3>\n    <Pagination defaultCurrent={2} />\n    <h3>simple</h3>\n    <Pagination defaultCurrent={2} type=\"simple\" />\n    <h3>mini</h3>\n    <Pagination defaultCurrent={2} type=\"mini\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过指定 `type` 属性来设置分页的类型。\n\n"},{"title":"非受控分页","order":"0","jsx":"import { Pagination } from \"@icedesign/base\";\n\nconst change = function(value) {\n  console.log(value);\n};\n\nReactDOM.render(<Pagination defaultCurrent={2} onChange={change} />, mountNode);\n\n","css":"","body":"\n非受控分页，是指分页组件的状态由自己维护，组件值的改变可以通过 `onChange` 事件通知父组件，默认值由 `defaultCurrent` 初始化。\n\n"}]},{"name":"Progress","category":"Components","title":"进度","type":"展示","importStatement":"import { Progress } from '@icedesign/base';","body":"\n\n## Guide\n\n展示操作的当前进度。\n\n### 何时使用\n\n在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。\n\n-   操作在后台运行，需要耗费一定的客户端等待时间。\n-   操作需要展示一个完成进度的百分比。\n\n","propsSchema":{"name":"Progress","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式的品牌前缀"},"shape":{"type":{"name":"enum","value":[{"value":"'circle'","computed":false},{"value":"'line'","computed":false}]},"required":false,"description":"形态","defaultValue":{"value":"'line'","computed":false},"docblock":"形态"},"type":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'progressive'","computed":false}]},"required":false,"description":"类型","defaultValue":{"value":"'normal'","computed":false},"docblock":"类型"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"尺寸","defaultValue":{"value":"'medium'","computed":false},"docblock":"尺寸"},"percent":{"type":{"name":"number"},"required":false,"description":"所占百分比","defaultValue":{"value":"0","computed":false},"docblock":"所占百分比"},"suffix":{"type":{"name":"node"},"required":false,"description":"进度条上的说明内容","docblock":"进度条上的说明内容"},"showInfo":{"type":{"name":"bool"},"required":false,"description":"是否展示内容","defaultValue":{"value":"true","computed":false},"docblock":"是否展示内容"},"state":{"type":{"name":"enum","value":[{"value":"'success'","computed":false},{"value":"'error'","computed":false}]},"required":false,"description":"状态","docblock":"状态"},"className":{"type":{"name":"string"},"required":false,"description":"自定义样式名","docblock":"自定义样式名"},"animation":{"type":{"name":"bool"},"required":false,"description":"是否开启动效","defaultValue":{"value":"true","computed":false},"docblock":"是否开启动效"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\nshape | 形态<br><br>**可选值**:<br>'circle', 'line' | Enum | 'line'\ntype | 类型<br><br>**可选值**:<br>'normal', 'progressive' | Enum | 'normal'\nsize | 尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\npercent | 所占百分比 | Number | 0\nsuffix | 进度条上的说明内容 | ReactNode | -\nshowInfo | 是否展示内容 | Boolean | true\nstate | 状态<br><br>**可选值**:<br>'success', 'error' | Enum | -\nclassName | 自定义样式名 | String | -\nanimation | 是否开启动效 | Boolean | true\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本进度条","order":"0","jsx":"import { Progress } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Progress percent={30} />\n    <Progress percent={50} />\n    <Progress percent={90} />\n    <Progress percent={40} showInfo={false} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n普通模式的进度条，通过 `showInfo` 属性控制是否显示右侧的文本信息。\n\n"},{"title":"圆形进度条","order":"1","jsx":"import { Progress } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Progress percent={30} shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={50} shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={90} shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={40} shape=\"circle\" showInfo={false} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\nState 目前支持两种不同类型的进度条，分别是条状进度条和圆形进度条。可以通过 `shape` 属性来控制。\n\n"},{"title":"动态展示","order":"4","jsx":"import { Progress, Button, Select } from \"@icedesign/base\";\n\nclass CustomProgress extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percent: 0,\n      shape: \"circle\",\n      type: \"progressive\",\n      size: \"medium\"\n    };\n  }\n  startProgress() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n    this.interval = setInterval(() => {\n      if (this.state.percent > 99) {\n        clearInterval(this.interval);\n      }\n      this.setState(prevState => {\n        const current =\n          prevState.percent + 15 > 100 ? 100 : prevState.percent + 15;\n        return { percent: current };\n      });\n    }, 500);\n  }\n  stopProgress() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n    this.setState({ percent: 0 });\n  }\n  onChangeShape(val) {\n    this.setState({\n      shape: val\n    });\n  }\n  onChangeType(val) {\n    this.setState({\n      type: val\n    });\n  }\n  onChangeSize(val) {\n    this.setState({\n      size: val\n    });\n  }\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <div className=\"progress-panel\">\n          <Select\n            onChange={this.onChangeShape.bind(this)}\n            className=\"custom-select\"\n            placeholder=\"选择进度条的外观\"\n          >\n            {[\"circle\", \"line\"].map((item, index) => (\n              <Select.Option key={index} value={item}>\n                {item}\n              </Select.Option>\n            ))}\n          </Select>\n\n          <Select\n            onChange={this.onChangeType.bind(this)}\n            className=\"custom-select\"\n            placeholder=\"请选择进度条的类型\"\n          >\n            {[\"normal\", \"progressive\"].map((item, index) => (\n              <Select.Option key={index} value={item}>\n                {item}\n              </Select.Option>\n            ))}\n          </Select>\n\n          <Select\n            onChange={this.onChangeSize.bind(this)}\n            className=\"custom-select\"\n            placeholder=\"请选择进度条的尺寸\"\n          >\n            {[\"small\", \"medium\", \"large\"].map((item, index) => (\n              <Select.Option key={index} value={item}>\n                {item}\n              </Select.Option>\n            ))}\n          </Select>\n\n          <Button.Group>\n            <Button\n              onClick={this.startProgress.bind(this)}\n              disabled={state.percent > 0}\n            >\n              开始\n            </Button>\n            <Button\n              onClick={this.stopProgress.bind(this)}\n              type=\"primary\"\n              disabled={state.percent === 0}\n            >\n              归零\n            </Button>\n          </Button.Group>\n        </div>\n\n        <Progress\n          percent={state.percent}\n          type={state.type}\n          shape={state.shape}\n          size={state.size}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<CustomProgress />, mountNode);\n\n","css":".progress-panel {\n    display: flex;\n    margin-bottom: 14px;\n}\n\n.custom-select {\n    margin-right: 20px;\n}\n","body":"\n当 `type` 取值为 `progressive`，此时为增强模式的进度条，会根据当前进度展示不同的样式\n\n"},{"title":"自定义展示内容","order":"5","jsx":"import { Progress, Icon } from \"@icedesign/base\";\n\nconst successPrefix = (\n  <Icon type=\"select\" size=\"xl\" style={{ color: \"green\" }} />\n);\nconst errorPrefix = <Icon type=\"close\" size=\"xl\" style={{ color: \"red\" }} />;\n\nReactDOM.render(\n  <div>\n    <Progress percent={66} shape=\"circle\" state=\"error\" suffix={errorPrefix} />{\" \"}\n    &nbsp;&nbsp;\n    <Progress\n      percent={100}\n      shape=\"circle\"\n      state=\"success\"\n      suffix={successPrefix}\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过 `Suffix` 属性传入您想要的展示的文本内容。\n\n"},{"title":"尺寸","order":"2","jsx":"import { Progress } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>不同尺寸的进度条</h3>\n    <Progress percent={30} size=\"small\" />\n    <Progress percent={50} size=\"medium\" />\n    <Progress percent={90} size=\"large\" />\n    <br />\n    <h3>不同尺寸的圆形进度条</h3>\n    <Progress percent={30} size=\"small\" shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={50} size=\"medium\" shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={90} size=\"large\" shape=\"circle\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过 `size` 属性制定进度条的大小。\n\n"},{"title":"进度条不同状态","order":"3","jsx":"import { Progress } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div className=\"\">\n    <Progress percent={20} shape=\"circle\" className=\"custom-progress\" />\n    <Progress\n      percent={95}\n      state=\"success\"\n      shape=\"circle\"\n      className=\"custom-progress\"\n    />\n    <Progress\n      percent={95}\n      state=\"error\"\n      shape=\"circle\"\n      className=\"custom-progress\"\n    />\n  </div>,\n  mountNode\n);\n\n","css":".custom-progress {\n    margin: 0 20px;\n}\n","body":"\n当您不设置 `state` 属性的值时，或者不提供 `state` 属性值时，Progress 处于常规状态。\nProgress 组件支持三种状态的展示，分别是常规状态、成功状态，和失败状态。您可以通过 `state` 属性展示流程的不同周期。\n\n"}]},{"name":"Radio","category":"Components","title":"单按钮","type":"表单","importStatement":"import { Radio } from '@icedesign/base';","body":"\n## 开发指南\n\n单选框\n\n### 何时使用\n\n单选按钮允许用户从一个数据集中选择单个选项。如果你觉得用户需要并排看到所有的可选项，使用单选按钮进行排他操作。此外，考虑使用下拉列表，相对于显示所有的选项占用更少的空间。\n\n","propsSchema":{"name":"Radio","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内敛样式","docblock":"自定义内敛样式","properties":[]},"checked":{"type":{"name":"bool"},"required":false,"description":"设置radio是否选中","docblock":"设置radio是否选中"},"defaultChecked":{"type":{"name":"bool"},"required":false,"description":"radio的默认选中","docblock":"radio的默认选中"},"onChange":{"type":{"name":"func"},"required":false,"description":"状态变化时触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"状态变化时触发的事件\n@param {Boolean} checked 是否选中\n@param {Event} e Dom 事件对象","params":[{"name":"checked","description":"是否选中","type":{"name":"Boolean"}},{"name":"e","description":"Dom 事件对象","type":{"name":"Event"}}],"returns":null},"disabled":{"type":{"name":"bool"},"required":false,"description":"表示radio被禁用","docblock":"表示radio被禁用"}},"methods":[],"order":1,"subComponents":[{"name":"Group","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内敛样式","docblock":"自定义内敛样式","properties":[]},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"bool"}]},"required":false,"description":"radio group的选中项的值","docblock":"radio group的选中项的值"},"defaultValue":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"bool"}]},"required":false,"description":"radio group的默认值","docblock":"radio group的默认值"},"onChange":{"type":{"name":"func"},"required":false,"description":"选中值改变时的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"选中值改变时的事件\n@param {String/Number} value 选中项的值\n@param {Event} e Dom 事件对象","params":[{"name":"value","description":"选中项的值","type":{"name":"String/Number"}},{"name":"e","description":"Dom 事件对象","type":{"name":"Event"}}],"returns":null},"disabled":{"type":{"name":"bool"},"required":false,"description":"表示radio被禁用","docblock":"表示radio被禁用"},"shape":{"type":{"name":"enum","value":[{"value":"'button'","computed":false,"description":"按钮状"}]},"required":false,"description":"可以设置成 button 展示形状","docblock":"可以设置成 button 展示形状\n@enumdesc 按钮状","value":[{"value":"'button'","computed":false,"description":"按钮状"}]},"size":{"type":{"name":"enum","value":[{"value":"'large'","computed":false,"description":"大"},{"value":"'medium'","computed":false,"description":"中"},{"value":"'small'","computed":false,"description":"小"}]},"required":false,"description":"与 `shape` 属性配套使用，shape设为button时有效","defaultValue":{"value":"'medium'","computed":false},"docblock":"与 `shape` 属性配套使用，shape设为button时有效\n@enumdesc 大, 中, 小","value":[{"value":"'large'","computed":false,"description":"大"},{"value":"'medium'","computed":false,"description":"中"},{"value":"'small'","computed":false,"description":"小"}]},"dataSource":{"type":{"name":"arrayOf","value":{"name":"any"}},"required":false,"description":"可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']`","defaultValue":{"value":"[]","computed":false},"docblock":"可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']`"},"children":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"element"}},{"name":"element"}]},"required":false,"description":"通过子元素方式设置内部radio","docblock":"通过子元素方式设置内部radio"}},"methods":[],"order":2}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nchecked | 设置radio是否选中 | Boolean | -\ndefaultChecked | radio的默认选中 | Boolean | -\nonChange | 状态变化时触发的事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>*checked*: {Boolean} 是否选中<br>*e*: {Event} Dom 事件对象 | Function | () =&gt; {}\ndisabled | 表示radio被禁用 | Boolean | -\n","methodREADME":[],"subComponentsREADME":[{"name":"Group","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nvalue | radio group的选中项的值 | String/Number/Boolean | -\ndefaultValue | radio group的默认值 | String/Number/Boolean | -\nonChange | 选中值改变时的事件<br><br>**签名**:<br>Function(value: String/Number, e: Event) => void<br>**参数**:<br>*value*: {String/Number} 选中项的值<br>*e*: {Event} Dom 事件对象 | Function | () =&gt; {}\ndisabled | 表示radio被禁用 | Boolean | -\nshape | 可以设置成 button 展示形状<br><br>**可选值**:<br>'button'(按钮状) | Enum | -\nsize | 与 `shape` 属性配套使用，shape设为button时有效<br><br>**可选值**:<br>'large'(大)<br>'medium'(中)<br>'small'(小) | Enum | 'medium'\ndataSource | 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` | Array&lt;any&gt; | []\nchildren | 通过子元素方式设置内部radio | Array&lt;ReactElement&gt;/ReactElement | -\n","methodREADME":[]}],"demos":[{"title":"基本","order":"0","jsx":"import { Radio } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h6>Without Label</h6>\n    <Radio defaultChecked />&nbsp;\n    <Radio checked />&nbsp;\n    <Radio disabled />&nbsp;\n    <Radio checked disabled />&nbsp;\n    <Radio />\n    <br />\n    <h6>With Label</h6>\n    <Radio id=\"apple\">苹果</Radio>\n    <Radio id=\"banana\" />\n    <label htmlFor=\"banana\" className=\"next-radio-label\">\n      香蕉\n    </label>\n    <label>\n      <Radio id=\"pear\" />\n      <span className=\"next-radio-label\">雪梨</span>\n    </label>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n使用 `Radio` 渲染的基本组件。\n\n"},{"title":"按钮样式组件","order":"4","jsx":"import { Radio } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\",\n    disabled: false\n  },\n  {\n    value: \"pear\",\n    label: \"梨子\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\",\n    disabled: true\n  }\n];\n\nclass ControlApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value1: \"apple\",\n      value2: \"\"\n    };\n\n    this.onNestChange = this.onNestChange.bind(this);\n    this.onNormalChange = this.onNormalChange.bind(this);\n  }\n\n  onNormalChange(value) {\n    this.setState({\n      value1: value\n    });\n  }\n\n  onNestChange(value) {\n    this.setState({\n      value2: value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>size 为 medium的正常状态</h4>\n        <RadioGroup\n          dataSource={list}\n          shape=\"button\"\n          size=\"medium\"\n          value={this.state.value1}\n          onChange={this.onNormalChange}\n        />\n        <br />\n        <br />\n        <h4>size 为large 的状态</h4>\n        <RadioGroup\n          shape=\"button\"\n          size=\"large\"\n          value={this.state.value2}\n          onChange={this.onNestChange}\n        >\n          <Radio id=\"banana\" value=\"banana\">\n            香蕉\n          </Radio>\n          <Radio id=\"watermelon\" value=\"watermelon\">\n            西瓜\n          </Radio>\n          <Radio id=\"peach\" value=\"peach\">\n            桃子\n          </Radio>\n        </RadioGroup>\n        <br />\n        <br />\n        <h4>disabled 和选中后disabled的样子</h4>\n        <RadioGroup\n          shape=\"button\"\n          size=\"medium\"\n          value=\"banana\"\n          onChange={this.onNestChange}\n        >\n          <Radio id=\"peach\" disabled value=\"peach\">\n            桃子\n          </Radio>\n          <Radio id=\"banana\" disabled value=\"banana\">\n            香蕉\n          </Radio>\n        </RadioGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n\n","css":"","body":"\n使用 `RadioGroup` 渲染的组，通过设置 `shape=\"button\"` 可以让组件以按钮形式展示，同时可以通过 `size` 来控制组件大小。\n\n"},{"title":"受限组件","order":"1","jsx":"import { Radio } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nconst list = [\n  {\n    value: 0,\n    label: \"苹果\"\n  },\n  {\n    value: \"pear\",\n    label: \"梨\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\"\n  }\n];\n\nclass ControlApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"orange\"\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(value) {\n    this.setState({\n      value: value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        normal:{\" \"}\n        <RadioGroup\n          dataSource={list}\n          value={this.state.value}\n          onChange={this.onChange}\n        />\n        <br />\n        <br />\n        <br />\n        disabled:{\" \"}\n        <RadioGroup\n          disabled\n          dataSource={list}\n          value={this.state.value}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n\n","css":"","body":"\n使用 `RadioGroup` 渲染的组，通过设置 `value` 属性可以让组件变成[受限组件](https://facebook.github.io/react/docs/forms.html#controlled-components)。\n\n"},{"title":"嵌套组件","order":"3","jsx":"import { Radio } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nclass NestApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"orange\"\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(value) {\n    this.setState({\n      value: value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <RadioGroup value={this.state.value} onChange={this.onChange}>\n          <Radio id=\"apple\" value=\"apple\">\n            苹果\n          </Radio>\n          <Radio id=\"watermelon\" value=\"watermelon\">\n            西瓜\n          </Radio>\n          <Radio id=\"orange\" value=\"orange\">\n            橙子\n          </Radio>\n        </RadioGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<NestApp />, mountNode);\n\n","css":"","body":"\n使用 `RadioGroup`，通过直接嵌套 `Radio` 组件来渲染的组。\n\n"},{"title":"非受限组件","order":"2","jsx":"import { Radio } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\",\n    disabled: false\n  },\n  {\n    value: \"pear\",\n    label: \"梨\",\n    disabled: true\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\"\n  }\n];\n\nconst UnControlApp = () => {\n  return (\n    <div>\n      <RadioGroup dataSource={list} defaultValue={\"apple\"} />\n    </div>\n  );\n};\n\nReactDOM.render(<UnControlApp />, mountNode);\n\n","css":"","body":"\n使用 `RadioGroup` 渲染的组，通过设置 `defaultValue` 属性可以让组件变成[非受限组件](https://facebook.github.io/react/docs/forms.html#uncontrolled-components)。\n\n"}]},{"name":"Range","category":"Components","title":"区段选择器","type":"表单","importStatement":"import { Range } from '@icedesign/base';","body":"\n\n## 开发指南\n\n区间选择\n\n### 何时使用\n\n滑块控件(Sliders，简称滑块)可以让我们通过在连续或间断的区间内滑动锚点来选择一个合适的数值。区间最小值放在左边，对应的，最大值放在右边。滑块(Sliders)可以在滑动条的左右两端设定图标来反映数值的强度。这种交互特性使得它在设置诸如音量、亮度、色彩饱和度等需要反映强度等级的选项时成为一种极好的选择。\n\n### 使用注意\n\n-   onChange是和value进行配置做受控处理的。onChange在滑动过程中不会触发，滑动停止后会触发。\n-   onProcess不建议内部做setState 进行受控，因为会频繁触发，整个滑动过程中会一直触发。\n\n","propsSchema":{"name":"Range","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内敛样式","docblock":"自定义内敛样式","properties":[]},"slider":{"type":{"name":"enum","value":[{"value":"'single'","computed":false,"description":"单个"},{"value":"'double'","computed":false,"description":"两个"}]},"required":false,"description":"滑块个数","defaultValue":{"value":"'single'","computed":false},"docblock":"滑块个数\n@enumdesc 单个, 两个","value":[{"value":"'single'","computed":false,"description":"单个"},{"value":"'double'","computed":false,"description":"两个"}]},"min":{"type":{"name":"number"},"required":false,"description":"最小值","defaultValue":{"value":"0","computed":false},"docblock":"最小值"},"max":{"type":{"name":"number"},"required":false,"description":"最大值","defaultValue":{"value":"100","computed":false},"docblock":"最大值"},"step":{"type":{"name":"number"},"required":false,"description":"步长，取值必须大于 0，并且可被 (max - min) 整除。","defaultValue":{"value":"1","computed":false},"docblock":"步长，取值必须大于 0，并且可被 (max - min) 整除。"},"value":{"type":{"name":"union","value":[{"name":"number"},{"name":"arrayOf","value":{"name":"number"}}]},"required":false,"description":"设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`","docblock":"设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`"},"defaultValue":{"type":{"name":"union","value":[{"name":"number"},{"name":"arrayOf","value":{"name":"number"}}]},"required":false,"description":"设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`","docblock":"设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`"},"marks":{"type":{"name":"union","value":[{"name":"bool"},{"name":"number"},{"name":"arrayOf","value":{"name":"number"}},{"name":"object"}]},"required":false,"description":"刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示）","defaultValue":{"value":"false","computed":false},"docblock":"刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示）"},"disabled":{"type":{"name":"bool"},"required":false,"description":"值为 `true` 时，滑块为禁用状态","defaultValue":{"value":"false","computed":false},"docblock":"值为 `true` 时，滑块为禁用状态"},"onChange":{"type":{"name":"func"},"required":false,"description":"当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用\n@param {String/number} value","params":[{"name":"value","description":null,"type":{"name":"String/number"}}],"returns":null},"onProcess":{"type":{"name":"func"},"required":false,"description":"滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用\n@param {String/number} value","params":[{"name":"value","description":null,"type":{"name":"String/number"}}],"returns":null},"hasTip":{"type":{"name":"bool"},"required":false,"description":"是否显示tip","defaultValue":{"value":"true","computed":false},"docblock":"是否显示tip"},"tipFormatter":{"type":{"name":"func"},"required":false,"description":"tip文件自定义处理","defaultValue":{"value":"(value) => {\n    return value;\n}","computed":false},"docblock":"tip文件自定义处理","params":[],"returns":null},"reverse":{"type":{"name":"bool"},"required":false,"description":"选中态反转","defaultValue":{"value":"false","computed":false},"docblock":"选中态反转"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nslider | 滑块个数<br><br>**可选值**:<br>'single'(单个)<br>'double'(两个) | Enum | 'single'\nmin | 最小值 | Number | 0\nmax | 最大值 | Number | 100\nstep | 步长，取值必须大于 0，并且可被 (max - min) 整除。 | Number | 1\nvalue | 设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]` | Number/Array&lt;Number&gt; | -\ndefaultValue | 设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]` | Number/Array&lt;Number&gt; | -\nmarks | 刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示） | Boolean/Number/Array&lt;Number&gt;/Object | false\ndisabled | 值为 `true` 时，滑块为禁用状态 | Boolean | false\nonChange | 当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用<br><br>**签名**:<br>Function(value: String/number) => void<br>**参数**:<br>*value*: {String/number} null | Function | () =&gt; { }\nonProcess | 滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用<br><br>**签名**:<br>Function(value: String/number) => void<br>**参数**:<br>*value*: {String/number} null | Function | () =&gt; { }\nhasTip | 是否显示tip | Boolean | true\ntipFormatter | tip文件自定义处理<br><br>**签名**:<br>Function() => void | Function | (value) =&gt; {     return value; }\nreverse | 选中态反转 | Boolean | false\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Range } from \"@icedesign/base\";\n\nconst style = {\n  marginBottom: \"15px\"\n};\n\nReactDOM.render(\n  <div style={{ width: \"400px\", margin: \"50px\" }}>\n    <h4>单滑块-左向右</h4>\n    <Range defaultValue={30} style={style} hasTip={false} />\n    <h4>单滑块-右向左</h4>\n    <Range defaultValue={30} style={style} reverse hasTip={false} />\n    <h4>双滑块-从外到里</h4>\n    <Range slider={\"double\"} defaultValue={[20, 40]} style={style} />\n    <h4>双滑块-从里到外</h4>\n    <Range slider={\"double\"} defaultValue={[20, 40]} style={style} reverse />\n    <h4>Disabled</h4>\n    <Range defaultValue={30} disabled style={style} />\n    <h4>Disabled</h4>\n    <Range slider={\"double\"} defaultValue={[20, 40]} disabled style={style} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n基本滑块，当 `slider` 为 `double` 时，渲染为双滑块。当 `disabled` 为 `true` 时，滑块处于不可用状态。\n\n"},{"title":"事件","order":"3","jsx":"import { Range } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 128,\n      doubleValue: [10, 30]\n    };\n  }\n\n  //受控使用, onChange,移动结束时,如果startValue和endValue不等,会触发这个事件\n  onChange(value) {\n    console.log(\"onChange value:\", value);\n    this.setState({ value });\n  }\n\n  //mouseDown以及onMove的时候,如果startValue和endValue不等,会触发这个事件,不建议在这里做setState.\n  onProcess(value) {\n    this.setState({ value });\n    console.log(\"onProcess: \", value);\n  }\n\n  onChangeDouble(value) {\n    this.setState({\n      doubleValue: value\n    });\n  }\n  render() {\n    return (\n      <div style={{ width: \"400px\", margin: \"50px\" }}>\n        <p>范围 0 ~ 1024</p>\n        <div style={{ width: \"400px\", marginTop: \"50px\" }}>\n          <Range\n            value={this.state.value}\n            onChange={this.onChange.bind(this)}\n            onProcess={this.onProcess.bind(this)}\n            min={0}\n            max={1024}\n            marks={[0, 1024]}\n          />\n        </div>\n\n        <p>设了value受控后的,不设置onChange的状态</p>\n        <div style={{ width: \"400px\", marginTop: \"50px\" }}>\n          <Range\n            defaultValue={256}\n            value={300}\n            onProcess={this.onProcess.bind(this)}\n            min={0}\n            max={1024}\n            marks={[0, 1024]}\n          />\n        </div>\n\n        <p>double slider controlled</p>\n        <div style={{ width: \"400px\", marginTop: \"50px\" }}>\n          <Range\n            slider=\"double\"\n            value={this.state.doubleValue}\n            onChange={this.onChangeDouble.bind(this)}\n            onProcess={this.onProcess.bind(this)}\n            min={0}\n            max={1024}\n            marks={[0, 1024]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\nonChange,onProcess事件\n\n"},{"title":"范围与 step","order":"5","jsx":"import { Range, NumberPicker, Grid, Icon } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      valueInt: 3,\n      valueDec: 0.05,\n      valueIcon: 1,\n      preIconClass: \"\",\n      afterIconClass: \"\"\n    };\n  }\n\n  onChangeInt(value) {\n    console.log(value);\n    this.setState(\n      Object.assign({}, this.state, {\n        valueInt: value\n      })\n    );\n  }\n\n  onChangeDec(value) {\n    this.setState(\n      Object.assign({}, this.state, {\n        valueDec: value\n      })\n    );\n  }\n\n  onIconRangeProcess(value) {\n    let mid = 50;\n    this.setState(\n      Object.assign({}, this.state, {\n        valueIcon: value,\n        preIconClass: value < mid ? \"myicon-highlight\" : \"\",\n        afterIconClass: value >= mid ? \"myicon-highlight\" : \"\"\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"400px\", margin: \"50px\" }}>\n        <h2>numberPicker联动</h2>\n        <Row>\n          <Col span=\"12\" style={{ marginTop: \"10px\" }}>\n            <Range\n              value={this.state.valueInt}\n              min={0}\n              max={20}\n              step={1}\n              onChange={this.onChangeInt.bind(this)}\n            />\n          </Col>\n          <Col span=\"12\">\n            <NumberPicker\n              value={this.state.valueInt}\n              min={0}\n              max={1024}\n              step={1}\n              onChange={this.onChangeInt.bind(this)}\n            />\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col span=\"12\" style={{ marginTop: \"10px\" }}>\n            <Range\n              value={this.state.valueDec}\n              min={0}\n              max={1}\n              step={0.01}\n              onChange={this.onChangeDec.bind(this)}\n            />\n          </Col>\n          <Col span=\"12\">\n            <NumberPicker\n              value={this.state.valueDec}\n              min={0}\n              max={1}\n              step={0.01}\n              onChange={this.onChangeDec.bind(this)}\n            />\n          </Col>\n        </Row>\n        <h2>与Icon结合使用</h2>\n\n        <div className=\"iconWrapper\">\n          <Icon className={\"myicon \" + this.state.preIconClass} type=\"cry\" />\n          <Range\n            min={1}\n            max={100}\n            onChange={this.onIconRangeProcess.bind(this)}\n            value={this.state.valueIcon}\n          />\n          <Icon\n            className={\"myicon \" + this.state.afterIconClass}\n            type=\"smile\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".iconWrapper {\n  position: relative;\n  padding: 0px 40px;\n}\n\n.iconWrapper .myicon {\n  position: absolute;\n  top: -3px;\n  width: 16px;\n  height: 16px;\n  line-height: 1;\n  font-size: 16px;\n  color: #ccc;\n}\n\n.iconWrapper .myicon:first-child {\n  left: 0;\n}\n\n.iconWrapper .myicon:last-child {\n  right: 0;\n}\n\n.myicon.myicon-highlight {\n  color: #666;\n}\n","body":"\n与number-picker结合,外部控制,与Icon结合设置边界Icon\n\n"},{"title":"刻度及标识","order":"1","jsx":"import { Range } from \"@icedesign/base\";\n\nconst style = {\n  marginBottom: \"40px\",\n  marginTop: \"40px\"\n};\n\nReactDOM.render(\n  <div style={{ width: \"400px\", margin: \"50px\" }}>\n    <p>设置首尾</p>\n    <Range defaultValue={0} marks={[0, 100]} style={style} />\n    <Range\n      slider={\"double\"}\n      defaultValue={[20, 40]}\n      scales={[0, 100]}\n      marks={[0, 100]}\n      style={style}\n    />\n    <Range defaultValue={30} style={style} />\n    <p>平分</p>\n    <Range defaultValue={30} marks={5} style={style} />\n    <Range\n      slider={\"double\"}\n      defaultValue={[20, 40]}\n      scales={10}\n      marks={10}\n      style={style}\n    />\n    <Range\n      disabled\n      slider={\"double\"}\n      defaultValue={[20, 40]}\n      scales={10}\n      marks={10}\n      style={style}\n    />\n    <p>自由刻度</p>\n    <Range defaultValue={30} marks={[0, 26, 37, 100]} style={style} />\n    <Range\n      slider={\"double\"}\n      defaultValue={[20, 40]}\n      marks={[0, 26, 37, 100]}\n      style={style}\n      hasTip={false}\n    />\n    <Range\n      defaultValue={30}\n      marks={{ 0: \"0°C\", 26: \"26°C\", 37: \"37°C\", 100: \"100°C\" }}\n      style={style}\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n通过 `scales` 与 `marks` 属性设置刻度及标识。\n\n"},{"title":"min,max,step","order":"2","jsx":"import { Range } from \"@icedesign/base\";\n\nconst style = {\n  marginBottom: \"40px\",\n  marginTop: \"40px\"\n};\nReactDOM.render(\n  <div style={{ width: \"400px\", margin: \"50px\" }}>\n    <p>范围 0 ~ 1024</p>\n    <Range\n      defaultValue={128}\n      min={0}\n      max={1024}\n      marks={[0, 1024]}\n      style={style}\n    />\n    <p>范围 0 ~ 1024，一次移动 128</p>\n    <Range\n      defaultValue={512}\n      min={0}\n      max={1024}\n      step={128}\n      marks={[0, 1024]}\n      style={style}\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过 `min` 与 `max` 设置范围边界。通过 `step`(被 max - min 整除) 设置移动的最小步频。min默认为0,max默认为100.\n\n"},{"title":"选择态反转","order":"7","jsx":"import { Range } from \"@icedesign/base\";\n\nconst style = {\n  marginBottom: \"15px\"\n};\n\nReactDOM.render(\n  <div style={{ width: \"400px\", margin: \"50px\" }}>\n    <Range defaultValue={30} style={style} hasTip={false} />\n    <Range defaultValue={30} style={style} reverse hasTip={false} />\n    <Range slider={\"double\"} defaultValue={[20, 40]} style={style} />\n    <Range slider={\"double\"} defaultValue={[20, 40]} style={style} reverse />\n    <Range defaultValue={30} disabled style={style} />\n    <Range defaultValue={30} disabled style={style} reverse />\n    <Range slider={\"double\"} defaultValue={[20, 40]} disabled style={style} />\n    <Range\n      slider={\"double\"}\n      defaultValue={[20, 40]}\n      disabled\n      style={style}\n      reverse\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n设置reverse为true, 选中态会反转。\n\n"},{"title":"tipFormmater","order":"5","jsx":"import { Range } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 128\n    };\n  }\n\n  //onChange,移动结束时,如果startValue和endValue不等,会触发这个事件\n  onChange(value) {\n    console.log(\"onChange value:\", value);\n  }\n\n  //mouseDown以及onMove的时候,如果startValue和endValue不等,会触发这个事件.如果是受控组件,改变state要写在这个事件里\n  onProcess(value) {\n    console.log(\"onProcess\");\n    this.setState({ value });\n  }\n\n  formatter(value) {\n    return \"$\" + value;\n  }\n  render() {\n    return (\n      <div style={{ width: \"400px\", margin: \"50px\" }}>\n        <p>范围 0 ~ 1024</p>\n        <div style={{ width: \"400px\", marginTop: \"50px\" }}>\n          <Range\n            defaultValue={256}\n            tipFormatter={this.formatter.bind(this)}\n            value={this.state.value}\n            onChange={this.onChange.bind(this)}\n            onProcess={this.onProcess.bind(this)}\n            min={0}\n            max={1024}\n            marks={[0, 1024]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\ntipFormatter 示例\n\n"}]},{"name":"Rating","category":"Components","title":"评分","type":"基本","importStatement":"import { Rating } from '@icedesign/base';","body":"\n\n## Guide\n\n评分组件通常用于用户反馈场景。\n\n","propsSchema":{"name":"Rating","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式的品牌前缀"},"defaultValue":{"type":{"name":"number"},"required":false,"description":"默认值","defaultValue":{"value":"0","computed":false},"docblock":"默认值"},"value":{"type":{"name":"number"},"required":false,"description":"值","docblock":"值"},"count":{"type":{"name":"number"},"required":false,"description":"评分的总数","defaultValue":{"value":"5","computed":false},"docblock":"评分的总数"},"type":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'grade'","computed":false}]},"required":false,"description":"类型","defaultValue":{"value":"'normal'","computed":false},"docblock":"类型"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"尺寸","defaultValue":{"value":"'medium'","computed":false},"docblock":"尺寸"},"allowHalf":{"type":{"name":"bool"},"required":false,"description":"是否允许半星评分","defaultValue":{"value":"false","computed":false},"docblock":"是否允许半星评分"},"onChange":{"type":{"name":"func"},"required":false,"description":"用户点击评分时触发的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"用户点击评分时触发的回调\n@param {String} value 评分值","params":[{"name":"value","description":"评分值","type":{"name":"String"}}],"returns":null},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","defaultValue":{"value":"false","computed":false},"docblock":"是否禁用"},"showInfo":{"type":{"name":"union","value":[{"name":"bool"},{"name":"func"}]},"required":false,"description":"是否展示文本信息","defaultValue":{"value":"false","computed":false},"docblock":"是否展示文本信息"},"className":{"type":{"name":"string"},"required":false,"description":"自定义样式名","docblock":"自定义样式名"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\ndefaultValue | 默认值 | Number | 0\nvalue | 值 | Number | -\ncount | 评分的总数 | Number | 5\ntype | 类型<br><br>**可选值**:<br>'normal', 'grade' | Enum | 'normal'\nsize | 尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nallowHalf | 是否允许半星评分 | Boolean | false\nonChange | 用户点击评分时触发的回调<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>*value*: {String} 评分值 | Function | () =&gt; {}\ndisabled | 是否禁用 | Boolean | false\nshowInfo | 是否展示文本信息 | Boolean/Function | false\nclassName | 自定义样式名 | String | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Rating defaultValue={3.2} onChange={val => console.log(val)} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n最简单的用法。\n\n"},{"title":"只读模式","order":"4","jsx":"import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(<Rating defaultValue={3.2} disabled />, mountNode);\n\n","css":"","body":"\n设置 `disabled` 属性后，评分组件仅展示模式，不可选择。\n\n"},{"title":"等级提示","order":"5","jsx":"import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(<Rating defaultValue={2} type=\"grade\" />, mountNode);\n\n","css":"","body":"\n设置 `type` 属性取值为 `grade`，使评分组件具有等级提示信息。\n\n"},{"title":"半星评分","order":"2","jsx":"import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(<Rating defaultValue={3.2} allowHalf />, mountNode);\n\n","css":"","body":"\n默认情况下评分组件只支持整数评分，通过开启 `allowHalf` 属性可以支持半星评分。\n\n"},{"title":"显示文案","order":"6","jsx":"import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Rating\n      defaultValue={3.2}\n      onChange={val => console.log(val)}\n      showInfo={val => val}\n    />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n评分组件提供了 `showInfo` 属性，它支持传入一个函数来返回组件展示的文案信息。\n\n"},{"title":"尺寸","order":"1","jsx":"import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Rating defaultValue={3.2} size=\"small\" />\n    <br />\n    <br />\n    <Rating defaultValue={3.2} />\n    <br />\n    <br />\n    <Rating defaultValue={3.2} size=\"large\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n默认尺寸为 `medium` 。\n通过 `size` 属性可以控制评分组件的大小，支持三种尺寸 `small`, `medium`, `large`。\n\n"}]},{"name":"Search","category":"Components","title":"搜索","type":"表单","importStatement":"import { Search } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n页面、表单数据搜索时使用\n\n","propsSchema":{"name":"Search","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"size":{"type":{"name":"string"},"required":false,"description":"大小，可选 `primary/secondary` 可选择 `medium/large`; `normal` 可选择 `small/medium`","defaultValue":{"value":"'medium'","computed":false},"docblock":"大小，可选 `primary/secondary` 可选择 `medium/large`; `normal` 可选择 `small/medium`"},"filter":{"type":{"name":"array"},"required":false,"description":"前置下拉框,default为默认选中项 `[{text:'Products', value:'Products',default: true},{text:'Suppliers',valuse:'Suppliers'}]`","defaultValue":{"value":"[]","computed":false},"docblock":"前置下拉框,default为默认选中项 `[{text:'Products', value:'Products',default: true},{text:'Suppliers',valuse:'Suppliers'}]`"},"hasIcon":{"type":{"name":"bool"},"required":false,"description":"搜索按钮图标","defaultValue":{"value":"true","computed":false},"docblock":"搜索按钮图标"},"searchText":{"type":{"name":"string"},"required":false,"description":"搜索按钮文案","defaultValue":{"value":"'Search'","computed":false},"docblock":"搜索按钮文案"},"combox":{"type":{"name":"node"},"required":false,"description":"定制下拉框,适合业务特殊定制","defaultValue":{"value":"false","computed":false},"docblock":"定制下拉框,适合业务特殊定制"},"inputWidth":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"搜索框宽度","defaultValue":{"value":"'auto'","computed":false},"docblock":"搜索框宽度"},"overlayVisible":{"type":{"name":"bool"},"required":false,"description":"与combox配合使用,控制定制下拉框的展现","docblock":"与combox配合使用,控制定制下拉框的展现"},"dataSource":{"type":{"name":"array"},"required":false,"description":"下拉提示框:历史搜索/搜索建议 `[{label:'',value:'',disabled:true}]`","defaultValue":{"value":"[]","computed":false},"docblock":"下拉提示框:历史搜索/搜索建议 `[{label:'',value:'',disabled:true}]`"},"type":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'secondary'","computed":false},{"value":"'normal'","computed":false}]},"required":false,"description":"类型","defaultValue":{"value":"'primary'","computed":false},"docblock":"类型"},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"数值","docblock":"数值"},"defaultValue":{"type":{"name":"string"},"required":false,"description":"搜索框默认值 (不适用于Combox)","docblock":"搜索框默认值 (不适用于Combox)"},"className":{"type":{"name":"string"},"required":false,"description":"样式名称","docblock":"样式名称"},"placeholder":{"type":{"name":"string"},"required":false,"description":"默认提示","docblock":"默认提示"},"onInputFocus":{"type":{"name":"func"},"required":false,"description":"input获取焦点的时候触发的回调","defaultValue":{"value":"function() {\n}","computed":false},"docblock":"input获取焦点的时候触发的回调","params":[],"returns":null},"onInputBlur":{"type":{"name":"func"},"required":false,"description":"input失去焦点的时候触发的回调","defaultValue":{"value":"function() {\n}","computed":false},"docblock":"input失去焦点的时候触发的回调","params":[],"returns":null},"onSearch":{"type":{"name":"func"},"required":false,"description":"点击搜索按钮触发的回调","defaultValue":{"value":"function() {\n}","computed":false},"docblock":"点击搜索按钮触发的回调\n@param {Object} object {filter:'',key:''}","params":[{"name":"object","description":"{filter:'',key:''}","type":{"name":"Object"}}],"returns":null},"onChange":{"type":{"name":"func"},"required":false,"description":"输入关键字时的回掉","defaultValue":{"value":"function() {\n}","computed":false},"docblock":"输入关键字时的回掉","params":[],"returns":null},"onFilterChange":{"type":{"name":"func"},"required":false,"description":"Filter改变时的回掉（filterValue）","defaultValue":{"value":"function() {\n}","computed":false},"docblock":"Filter改变时的回掉（filterValue）","params":[],"returns":null},"autoWidth":{"type":{"name":"bool"},"required":false,"description":"搜索框100%自适应父容器","defaultValue":{"value":"false","computed":false},"docblock":"搜索框100%自适应父容器"},"filterAutoWidth":{"type":{"name":"bool"},"required":false,"description":"filter的下拉菜单是否与选择器对齐","defaultValue":{"value":"true","computed":false},"docblock":"filter的下拉菜单是否与选择器对齐"},"style":{"type":{"name":"object"},"required":false,"description":"自定义样式","docblock":"自定义样式","properties":[]},"container":{"type":{"name":"node"},"required":false,"description":"指定渲染combox的容器","docblock":"指定渲染combox的容器"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nsize | 大小，可选 `primary/secondary` 可选择 `medium/large`; `normal` 可选择 `small/medium` | String | 'medium'\nfilter | 前置下拉框,default为默认选中项 `[{text:'Products', value:'Products',default: true},{text:'Suppliers',valuse:'Suppliers'}]` | Array | []\nhasIcon | 搜索按钮图标 | Boolean | true\nsearchText | 搜索按钮文案 | String | 'Search'\ncombox | 定制下拉框,适合业务特殊定制 | ReactNode | false\ninputWidth | 搜索框宽度 | String/Number | 'auto'\noverlayVisible | 与combox配合使用,控制定制下拉框的展现 | Boolean | -\ndataSource | 下拉提示框:历史搜索/搜索建议 `[{label:'',value:'',disabled:true}]` | Array | []\ntype | 类型<br><br>**可选值**:<br>'primary', 'secondary', 'normal' | Enum | 'primary'\nvalue | 数值 | String/Number | -\ndefaultValue | 搜索框默认值 (不适用于Combox) | String | -\nclassName | 样式名称 | String | -\nplaceholder | 默认提示 | String | -\nonInputFocus | input获取焦点的时候触发的回调<br><br>**签名**:<br>Function() => void | Function | function() { }\nonInputBlur | input失去焦点的时候触发的回调<br><br>**签名**:<br>Function() => void | Function | function() { }\nonSearch | 点击搜索按钮触发的回调<br><br>**签名**:<br>Function(object: Object) => void<br>**参数**:<br>*object*: {Object} {filter:'',key:''} | Function | function() { }\nonChange | 输入关键字时的回掉<br><br>**签名**:<br>Function() => void | Function | function() { }\nonFilterChange | Filter改变时的回掉（filterValue）<br><br>**签名**:<br>Function() => void | Function | function() { }\nautoWidth | 搜索框100%自适应父容器 | Boolean | false\nfilterAutoWidth | filter的下拉菜单是否与选择器对齐 | Boolean | true\nstyle | 自定义样式 | Object | -\ncontainer | 指定渲染combox的容器 | ReactNode | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"自适应宽度","order":"5","jsx":"import { Search } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: [\n        {\n          text: \"Products\",\n          value: \"Products\"\n        },\n        {\n          text: \"Products1\",\n          value: \"Products1\"\n        },\n        {\n          text: \"Products2\",\n          value: \"Products2\"\n        },\n        {\n          text: \"Products3\",\n          value: \"Products3\"\n        },\n        {\n          text: \"Products4\",\n          value: \"Products4\"\n        },\n        {\n          text: \"Products5\",\n          value: \"Products5\"\n        },\n        {\n          text: \"Products6\",\n          value: \"Products6\"\n        },\n        {\n          text: \"Products7\",\n          value: \"Products7\"\n        },\n        {\n          text: \"Products8\",\n          value: \"Products8\"\n        },\n        {\n          text: \"Products9\",\n          value: \"Products9\"\n        },\n        {\n          text: \"Products10\",\n          value: \"Products10\"\n        },\n        {\n          text: \"Suppliers\",\n          value: \"Suppliers\",\n          default: true\n        }\n      ],\n      value: \"\",\n      dataSource: []\n    };\n  }\n\n  onSearch(value) {\n    console.log(value);\n  }\n\n  onChange(value) {\n    console.log(\"input is:\", value);\n\n    this.setState({\n      value: value\n    });\n  }\n\n  onFilterChange(value) {\n    console.log(\"filter is:\", value);\n  }\n\n  render() {\n    return (\n      <div style={{ width: 700 }}>\n        <Search\n          onSearch={this.onSearch.bind(this)}\n          onChange={this.onChange.bind(this)}\n          dataSource={this.state.dataSource}\n          autoWidth\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n自适应宽度\n\n"},{"title":"自定义下拉框内容","order":"4","jsx":"import { Search, Menu } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      overlayVisible: false,\n      value: \"111222\",\n      menuData: [\n        {\n          text: \"Option 1\",\n          value: \"Option 1 Value\",\n          index: \"1\"\n        },\n        {\n          text: \"Option 2\",\n          value: \"Option 2 Value\",\n          index: \"2\"\n        },\n        {\n          text: \"Option 3\",\n          value: \"Option 3 Value\",\n          index: \"3\"\n        },\n        {\n          text: \"Option 4\",\n          value: \"Option 4 Value\",\n          index: \"4\"\n        }\n      ],\n      filter: [\n        {\n          text: \"Products\",\n          value: \"Products\"\n        },\n        {\n          text: \"Products1\",\n          value: \"Products1\"\n        },\n        {\n          text: \"Products2\",\n          value: \"Products2\"\n        },\n        {\n          text: \"Products3\",\n          value: \"Products3\"\n        },\n        {\n          text: \"Products4\",\n          value: \"Products4\"\n        },\n        {\n          text: \"Products5\",\n          value: \"Products5\"\n        },\n        {\n          text: \"Products6\",\n          value: \"Products6\"\n        },\n        {\n          text: \"Products7\",\n          value: \"Products7\"\n        },\n        {\n          text: \"Products8\",\n          value: \"Products8\"\n        },\n        {\n          text: \"Products9\",\n          value: \"Products9\"\n        },\n        {\n          text: \"Products10\",\n          value: \"Products10\"\n        },\n        {\n          text: \"Suppliers\",\n          value: \"Suppliers\",\n          default: true\n        }\n      ]\n    };\n  }\n\n  renderMenu() {\n    const menuData = this.state.menuData;\n\n    return (\n      <Menu onClick={this.onClick.bind(this)} className=\"diy-menu\">\n        <Menu.Group label=\"Recent\" key=\"xxx\">\n          {menuData.map(item => {\n            return (\n              <Menu.Item key={item.value}>\n                {\" \"}\n                {item.text}{\" \"}\n                <a\n                  onClick={this.onDelete.bind(this)}\n                  target=\"_self\"\n                  data-index={item.index}\n                >\n                  Delete\n                </a>{\" \"}\n              </Menu.Item>\n            );\n          })}\n        </Menu.Group>\n      </Menu>\n    );\n  }\n\n  onSearch(value) {\n    console.log(value);\n  }\n\n  onChange(value) {\n    this.setState({\n      overlayVisible: value.length > 0,\n      value: value\n    });\n  }\n\n  onClick(selectedKeys) {\n    if (typeof selectedKeys === \"string\") {\n      this.setState({\n        overlayVisible: false,\n        value: selectedKeys\n      });\n    }\n  }\n\n  onDelete(e) {\n    e.stopPropagation();\n\n    const index = e.currentTarget.getAttribute(\"data-index\");\n\n    const menuData = this.state.menuData;\n\n    const menuDataNew = [];\n\n    menuData.forEach(function(item) {\n      if (item.index !== index) {\n        menuDataNew.push(item);\n      }\n    });\n\n    this.setState({\n      menuData: menuDataNew\n    });\n  }\n\n  onInputFocus() {\n    this.setState({\n      overlayVisible: true\n    });\n  }\n\n  render() {\n    const overlayVisible = this.state.overlayVisible;\n    const value = this.state.value;\n\n    return (\n      <div style={{ width: 700 }}>\n        <Search\n          placeholder=\"123\"\n          autoWidth\n          combox={<div>{this.renderMenu()}</div>}\n          overlayVisible={overlayVisible}\n          value={value}\n          onSearch={this.onSearch.bind(this)}\n          onChange={this.onChange.bind(this)}\n          onInputFocus={this.onInputFocus.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"\n.diy-menu{\n    /*width: 275px*/;\n}\n\n.diy-menu .next-menu-item a{\n    display:none;\n    float: right;\n    cursor: pointer;\n}\n.diy-menu .next-menu-item:hover a{\n    display:inline-block;\n}\n","body":"\n自定义下拉框内容。\n\n"},{"title":"普通search的事件以及受控方式","order":"1","jsx":"import { Search, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: [\n        {\n          label: \"Recent\",\n          value: \"Recent\",\n          disabled: true\n        },\n        {\n          label: \"连衣裙\",\n          value: \"连衣裙\",\n          disabled: false\n        },\n        {\n          label: \"墨镜\",\n          value: \"墨镜\",\n          disabled: false\n        },\n        {\n          label: \"短袖\",\n          value: \"短袖\",\n          disabled: false\n        }\n      ],\n      value: \"\"\n    };\n  }\n  onSearchClick() {\n    let time = new Date();\n\n    time = time.getTime();\n\n    this.setState({\n      value: time\n    });\n  }\n\n  onClearClick() {\n    this.setState({\n      value: \"\"\n    });\n  }\n  // 点击search按钮和在选中项上回车时触发\n  // 参数为obj：\n  // {\n  //    filter: [],\n  //    key: xx\n  // }\n  onSearch(obj) {\n    console.log(obj);\n  }\n  // input 输入时触发\n  onChange(value) {\n    this.setState({\n      value\n    });\n  }\n\n  onInputBlur(e, obj) {\n    console.log(e, obj);\n  }\n\n  onInputFocus(e, clickByUser, state) {\n    console.log(e, clickByUser, state);\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Button onClick={this.onSearchClick.bind(this)}>\n            改变搜索关键字\n          </Button>\n          <Button onClick={this.onClearClick.bind(this)}>清除关键字</Button>\n        </div>\n        <br />\n\n        <Search\n          inputWidth={300}\n          value={this.state.value}\n          onSearch={this.onSearch.bind(this)}\n          onChange={this.onChange.bind(this)}\n          onInputBlur={this.onInputBlur.bind(this)}\n          onInputFocus={this.onInputFocus.bind(this)}\n          dataSource={this.state.dataSource}\n          placeholder=\"What are you looking for...\"\n          name=\"textName\"\n        />\n        <br />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\nonSearch, onChange, onInputBlur, onInputFocus事件。\n\n"},{"title":"下拉框","order":"2","jsx":"import { Search, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: [\n        {\n          text: \"Products\",\n          value: \"Products\"\n        },\n        {\n          text: \"Products1\",\n          value: \"Products1\"\n        },\n        {\n          text: \"Products2\",\n          value: \"Products2\"\n        },\n        {\n          text: \"Products3\",\n          value: \"Products3\"\n        },\n        {\n          text: \"Products4\",\n          value: \"Products4\"\n        },\n        {\n          text: \"Products5\",\n          value: \"Products5\"\n        },\n        {\n          text: \"Products6\",\n          value: \"Products6\"\n        },\n        {\n          text: \"Products7\",\n          value: \"Products7\"\n        },\n        {\n          text: \"Products8\",\n          value: \"Products8\"\n        },\n        {\n          text: \"Products9\",\n          value: \"Products9\"\n        },\n        {\n          text: \"Products10\",\n          value: \"Products10\"\n        },\n        {\n          text: \"Suppliers\",\n          value: \"Suppliers\",\n          default: true\n        }\n      ],\n      value: \"\"\n    };\n  }\n\n  onSearch(value) {\n    console.log(value);\n  }\n\n  onChange(value) {\n    console.log(`input is: ${value}`);\n\n    this.setState({\n      value: value\n    });\n  }\n\n  // value为filter的值，obj为search的全量值\n  onFilterChange(value, obj) {\n    console.log(`filter is: ${value}`);\n    console.log(\"fullData: \", obj);\n  }\n\n  onButtonClick() {\n    this.setState({\n      filter: [\n        {\n          text: \"111111111111111111\",\n          value: \"111111111111111111\"\n        },\n        {\n          text: \"2222222\",\n          value: \"22222222\",\n          default: true\n        }\n      ]\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Button onClick={this.onButtonClick.bind(this)}>修改filter</Button>\n        </div>\n        <br />\n\n        <Search\n          onChange={this.onChange.bind(this)}\n          onSearch={this.onSearch.bind(this)}\n          filter={this.state.filter}\n          onFilterChange={this.onFilterChange.bind(this)}\n        />\n        <br />\n        <br />\n        <Search\n          size=\"large\"\n          onChange={this.onChange.bind(this)}\n          onSearch={this.onSearch.bind(this)}\n          filter={this.state.filter}\n          onFilterChange={this.onFilterChange.bind(this)}\n        />\n        <br />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n带下拉框的用法。可以设置onFilterChange事件\n\n"},{"title":"size","order":"1","jsx":"import { Search } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: \"medium\",\n      normalSize: \"small\"\n    };\n  }\n  onButtonClick() {\n    this.setState({\n      size: this.state.size === \"medium\" ? \"large\" : \"medium\",\n      normalSize: this.state.normalSize === \"medium\" ? \"small\" : \"medium\"\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Primary</h2>\n        <Search\n          size=\"large\"\n          inputWidth={300}\n          defaultValue=\"large\"\n          placeholder=\"What are you looking for...\"\n        />\n        <br />\n        <Search\n          size=\"medium\"\n          inputWidth={300}\n          defaultValue=\"medium\"\n          placeholder=\"What are you looking for...\"\n        />\n\n        <h2>Secondary</h2>\n        <Search\n          size=\"large\"\n          inputWidth={300}\n          defaultValue=\"large\"\n          type=\"secondary\"\n          placeholder=\"What are you looking for...\"\n        />\n        <br />\n        <Search\n          inputWidth={300}\n          size=\"medium\"\n          defaultValue=\"medium\"\n          type=\"secondary\"\n          placeholder=\"What are you looking for...\"\n        />\n\n        <h2>normal</h2>\n        <Search\n          size=\"medium\"\n          type=\"normal\"\n          inputWidth={300}\n          defaultValue=\"medium\"\n          placeholder=\"What are you looking for...\"\n        />\n        <br />\n        <Search\n          size=\"small\"\n          type=\"normal\"\n          inputWidth={300}\n          defaultValue=\"small\"\n          placeholder=\"What are you looking for...\"\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n【注意】type为primary和secondary的时候size只能为'medium'和'large'，type为normal是size只能为'medium'和'small'.\ntype 切换，展示出不同的样式风格。size进行大小设置 .\n\n"},{"title":"type","order":"0","jsx":"import { Search } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Search type=\"primary\" inputWidth={300} placeholder=\"primary\" />\n\n    <br />\n    <Search type=\"secondary\" inputWidth={300} placeholder=\"Secondary\" />\n\n    <br />\n    <Search type=\"normal\" inputWidth={300} placeholder=\"normal\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n简单用法\n\n"}]},{"name":"Select","category":"Components","title":"选择器","type":"表单","importStatement":"import { Select } from '@icedesign/base';","body":"\n\n## Guide\n\n### 何时使用\n\n#### Select\n\n如果你不期望用户输入的值生效而仅仅是选择，那么使用Select. 同时可以使用Select的showSearch属性进行过滤。\n\n### Combobox\n\n唯一和Select不一致的点在于Combobox会保留用户输入的值。\n\n### 常见问题\n\n#### 出现类似的`flatternChildren`的warning\n\nSelect默认使用`value`作为菜单项的key，如果没有设置key值，则使用默认的序列index作为key值，确保这些值不会发生重复。\n\n#### Combobox与Field配合使用\n\n由于`Field`会让组件变成受控组件，所以如果你发现你的输入框无法输入值，记得监听下`onInputUpdate`，然后调用`Field`的`setValue`方法进行赋值。\n\n伪代码如下\n\n```js\nthis.field.setValue(name, value);\n```\n\n#### dataSource的使用\n\nSelect同时支持children和在props中传入dataSource作为数据源,如果同时设置,则以children为准.\n\n注意： Select默认使用`value`作为渲染的菜单项的`key`值，所以`value`不能重复, 否则无法渲染下拉菜单\n\n1.  `children`的方式\n\n```html\n<Select>\n    <Select.Option value=\"option1\">option1</Select.Option>\n    <Select.Option value=\"option2\">option2</Select.Option>\n    <Select.Option disabled>disabled</Select.Option>\n</Select>\n```\n\n2.  `props`的方式\n\n```html\nconst dataSource = [\n    {label:'option1', value:'option1'},\n    {label:'option2', value:'option2'},\n    {label:'disabled', disabled:true}\n]\n<Select dataSource={dataSource}/>\n```\n\n#### 定制弹出层\n\n参见示例中的`弹层定制`。唯一需要注意的是`overlay`的元素记得透传props.\n这是因为Overlay的弹层的动画是依靠`className`实现的，如果不透传props则会造成无法监听到动画播放结束的事件。\n\n","propsSchema":{"name":"Select","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"container":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":false,"description":"弹层挂载容器节点","docblock":"弹层挂载容器节点"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"选择器的尺寸","defaultValue":{"value":"'medium'","computed":false},"docblock":"选择器的尺寸"},"shape":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'arrow-only'","computed":false}]},"required":false,"description":"选择器的形状","defaultValue":{"value":"'normal'","computed":false},"docblock":"选择器的形状"},"placeholder":{"type":{"name":"string"},"required":false,"description":"没有值的时候的占位符","defaultValue":{"value":"''","computed":false},"docblock":"没有值的时候的占位符"},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"array"},{"name":"node"},{"name":"object"}]},"required":false,"description":"当前值","docblock":"当前值"},"defaultValue":{"type":{"name":"union","value":[{"name":"string"},{"name":"array"},{"name":"node"},{"name":"object"}]},"required":false,"description":"初始默认值","docblock":"初始默认值"},"visible":{"type":{"name":"bool"},"required":false,"description":"当前弹层是否显示","docblock":"当前弹层是否显示"},"defaultVisible":{"type":{"name":"bool"},"required":false,"description":"弹层初始是否显示","docblock":"弹层初始是否显示"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","defaultValue":{"value":"false","computed":false},"docblock":"是否禁用"},"dataSource":{"type":{"name":"array"},"required":false,"description":"传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用)","docblock":"传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用)"},"multiple":{"type":{"name":"bool"},"required":false,"description":"是否是多选","defaultValue":{"value":"false","computed":false},"docblock":"是否是多选"},"fillProps":{"type":{"name":"string"},"required":false,"description":"填充到选择框里面的值","defaultValue":{"value":"'label'","computed":false},"docblock":"填充到选择框里面的值"},"showSearch":{"type":{"name":"bool"},"required":false,"description":"是否显示顶部的搜索框","defaultValue":{"value":"false","computed":false},"docblock":"是否显示顶部的搜索框"},"filterBy":{"type":{"name":"func"},"required":false,"description":"在输入的时候过滤的函数,仅在filterLocal为true时候有效","docblock":"在输入的时候过滤的函数,仅在filterLocal为true时候有效\n@param {String} filterValue 筛选值\n@param {Object} option 选项\n@return {Boolean} 是否保留当前选项","params":[{"name":"filterValue","description":"筛选值","type":{"name":"String"}},{"name":"option","description":"选项","type":{"name":"Object"}}],"returns":{"description":"是否保留当前选项","type":{"name":"Boolean"}}},"filterLocal":{"type":{"name":"bool"},"required":false,"description":"是否使用本地过滤,在数据源为远程的时候需要关闭此选项","defaultValue":{"value":"true","computed":false},"docblock":"是否使用本地过滤,在数据源为远程的时候需要关闭此选项"},"hasArrow":{"type":{"name":"bool"},"required":false,"description":"是否显示右侧的箭头","defaultValue":{"value":"true","computed":false},"docblock":"是否显示右侧的箭头"},"autoWidth":{"type":{"name":"bool"},"required":false,"description":"下拉菜单是否与选择器对齐","defaultValue":{"value":"true","computed":false},"docblock":"下拉菜单是否与选择器对齐"},"onChange":{"type":{"name":"func"},"required":false,"description":"Select发生改变的时候触发的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"Select发生改变的时候触发的回调\n@param {String} value 数据\n@param {Object} option 选项","params":[{"name":"value","description":"数据","type":{"name":"String"}},{"name":"option","description":"选项","type":{"name":"Object"}}],"returns":null},"onSearch":{"type":{"name":"func"},"required":false,"description":"在搜索框中输入触发的事件，仅在showSearch为true时候有效","defaultValue":{"value":"() => {}","computed":false},"docblock":"在搜索框中输入触发的事件，仅在showSearch为true时候有效\n@param {String} value 搜索值","params":[{"name":"value","description":"搜索值","type":{"name":"String"}}],"returns":null},"hasClear":{"type":{"name":"bool"},"required":false,"description":"是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效","defaultValue":{"value":"false","computed":false},"docblock":"是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效"},"popupClassName":{"type":{"name":"string"},"required":false,"description":"弹出层的样式类","docblock":"弹出层的样式类"},"popupProps":{"type":{"name":"object"},"required":false,"description":"弹出层的属性","docblock":"弹出层的属性","properties":[]},"onVisibleChange":{"type":{"name":"func"},"required":false,"description":"弹层显示或隐藏的时候触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层显示或隐藏的时候触发的事件\n@param {Boolean} visible 弹层是否隐藏和显示","params":[{"name":"visible","description":"弹层是否隐藏和显示","type":{"name":"Boolean"}}],"returns":null},"onOpen":{"type":{"name":"func"},"required":false,"description":"弹层显示时触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层显示时触发的事件","params":[],"returns":null},"onClose":{"type":{"name":"func"},"required":false,"description":"弹层隐藏时触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层隐藏时触发的事件","params":[],"returns":null},"locale":{"type":{"name":"object"},"required":false,"description":"自定义国际化文案对象","defaultValue":{"value":"{\n    selectPlaceHolder: '请选择',\n    comboboxPlaceHolder: '请输入'\n}","computed":false},"docblock":"自定义国际化文案对象\n@property {String} selectPlaceHolder 请选择的提示文案\n@property {String} comboboxPlaceHolder 请输入的提示文案","properties":[{"name":"selectPlaceHolder","description":"请选择的提示文案","type":{"name":"String"}},{"name":"comboboxPlaceHolder","description":"请输入的提示文案","type":{"name":"String"}}]},"language":{"type":{"name":"enum","value":[{"value":"'en-us'","computed":false},{"value":"'zh-cn'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"自定义国际化语言","docblock":"自定义国际化语言"}},"methods":[],"subComponents":[{"name":"Combobox","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"container":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":false,"description":"弹层挂载容器节点","docblock":"弹层挂载容器节点"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"选择器的尺寸","defaultValue":{"value":"'medium'","computed":false},"docblock":"选择器的尺寸"},"shape":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'arrow-only'","computed":false}]},"required":false,"description":"选择器的形状","defaultValue":{"value":"'normal'","computed":false},"docblock":"选择器的形状"},"placeholder":{"type":{"name":"string"},"required":false,"description":"没有值的时候的占位符","defaultValue":{"value":"''","computed":false},"docblock":"没有值的时候的占位符"},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"array"},{"name":"node"},{"name":"object"}]},"required":false,"description":"当前值","docblock":"当前值"},"defaultValue":{"type":{"name":"union","value":[{"name":"string"},{"name":"array"},{"name":"node"},{"name":"object"}]},"required":false,"description":"初始默认值","docblock":"初始默认值"},"visible":{"type":{"name":"bool"},"required":false,"description":"当前弹层是否显示","docblock":"当前弹层是否显示"},"defaultVisible":{"type":{"name":"bool"},"required":false,"description":"弹层初始是否显示","docblock":"弹层初始是否显示"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","defaultValue":{"value":"false","computed":false},"docblock":"是否禁用"},"dataSource":{"type":{"name":"array"},"required":false,"description":"传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用)","docblock":"传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用)"},"multiple":{"type":{"name":"bool"},"required":false,"description":"是否是多选","defaultValue":{"value":"false","computed":false},"docblock":"是否是多选"},"tags":{"type":{"name":"bool"},"required":false,"description":"是否启用标签模式, 仅在多选时有效,效果是除了自动提示外的选项, 也可以使用输入的文字作为标签","docblock":"是否启用标签模式, 仅在多选时有效,效果是除了自动提示外的选项, 也可以使用输入的文字作为标签"},"fillProps":{"type":{"name":"string"},"required":false,"description":"填充到选择框里面的值","defaultValue":{"value":"'value'","computed":false},"docblock":"填充到选择框里面的值"},"showSearch":{"type":{"name":"bool"},"required":false,"description":"是否显示顶部的搜索框","defaultValue":{"value":"false","computed":false},"docblock":"是否显示顶部的搜索框"},"filterBy":{"type":{"name":"func"},"required":false,"description":"在输入的时候过滤的函数,仅在filterLocal为true时候有效","docblock":"在输入的时候过滤的函数,仅在filterLocal为true时候有效\n@param {String} filterValue 筛选值\n@param {Object} option 选项\n@return {Boolean} 是否保留当前选项","params":[{"name":"filterValue","description":"筛选值","type":{"name":"String"}},{"name":"option","description":"选项","type":{"name":"Object"}}],"returns":{"description":"是否保留当前选项","type":{"name":"Boolean"}}},"filterLocal":{"type":{"name":"bool"},"required":false,"description":"是否使用本地过滤,在数据源为远程的时候需要关闭此选项","defaultValue":{"value":"true","computed":false},"docblock":"是否使用本地过滤,在数据源为远程的时候需要关闭此选项"},"hasArrow":{"type":{"name":"bool"},"required":false,"description":"是否显示右侧的箭头","defaultValue":{"value":"true","computed":false},"docblock":"是否显示右侧的箭头"},"autoWidth":{"type":{"name":"bool"},"required":false,"description":"下拉菜单是否与选择器对齐","defaultValue":{"value":"true","computed":false},"docblock":"下拉菜单是否与选择器对齐"},"hiddenSelected":{"type":{"name":"bool"},"required":false,"description":"选择后是否立即隐藏菜单，单选是默认隐藏的，因此该选项只在多选的时候有效","defaultValue":{"value":"false","computed":false},"docblock":"选择后是否立即隐藏菜单，单选是默认隐藏的，因此该选项只在多选的时候有效"},"onInputUpdate":{"type":{"name":"func"},"required":false,"description":"Combobox在用户输入的时候触发的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"Combobox在用户输入的时候触发的回调\n@param {String} value 输入值","params":[{"name":"value","description":"输入值","type":{"name":"String"}}],"returns":null},"onInputFocus":{"type":{"name":"func"},"required":false,"description":"Combobox获取焦点的时候触发的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"Combobox获取焦点的时候触发的回调\n@param {Event} e DOM事件对象\n@param {Boolean} clickByUser 是否用户点击","params":[{"name":"e","description":"DOM事件对象","type":{"name":"Event"}},{"name":"clickByUser","description":"是否用户点击","type":{"name":"Boolean"}}],"returns":null},"onInputBlur":{"type":{"name":"func"},"required":false,"description":"Combobox失去焦点的时候触发的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"Combobox失去焦点的时候触发的回调\n@param {Event} e DOM事件对象\n@param {String} inputValue 输入值","params":[{"name":"e","description":"DOM事件对象","type":{"name":"Event"}},{"name":"inputValue","description":"输入值","type":{"name":"String"}}],"returns":null},"onInputEnter":{"type":{"name":"func"},"required":false,"description":"Combobox回车的时候触发的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"Combobox回车的时候触发的回调\n@param {Event} e DOM事件对象","params":[{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null},"onChange":{"type":{"name":"func"},"required":false,"description":"Combobox发生改变的时候触发的回调, 注意在输入的时候该事件不会被触发，如果需要监听输入的事件请使用onInputUpdate","defaultValue":{"value":"() => {}","computed":false},"docblock":"Combobox发生改变的时候触发的回调, 注意在输入的时候该事件不会被触发，如果需要监听输入的事件请使用onInputUpdate\n@param {String} value 数据\n@param {Object} option 选项","params":[{"name":"value","description":"数据","type":{"name":"String"}},{"name":"option","description":"选项","type":{"name":"Object"}}],"returns":null},"onSearch":{"type":{"name":"func"},"required":false,"description":"在搜索框中输入触发的事件，仅在showSearch为true时候有效","defaultValue":{"value":"() => {}","computed":false},"docblock":"在搜索框中输入触发的事件，仅在showSearch为true时候有效\n@param {String} value 搜索值","params":[{"name":"value","description":"搜索值","type":{"name":"String"}}],"returns":null},"hasClear":{"type":{"name":"bool"},"required":false,"description":"是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效","defaultValue":{"value":"false","computed":false},"docblock":"是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效"},"popupClassName":{"type":{"name":"string"},"required":false,"description":"弹出层的样式类","docblock":"弹出层的样式类"},"popupProps":{"type":{"name":"object"},"required":false,"description":"弹出层的属性","docblock":"弹出层的属性","properties":[]},"onVisibleChange":{"type":{"name":"func"},"required":false,"description":"弹层显示或隐藏的时候触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层显示或隐藏的时候触发的事件\n@param {Boolean} visible 弹层是否隐藏和显示","params":[{"name":"visible","description":"弹层是否隐藏和显示","type":{"name":"Boolean"}}],"returns":null},"onOpen":{"type":{"name":"func"},"required":false,"description":"弹层显示时触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层显示时触发的事件","params":[],"returns":null},"onClose":{"type":{"name":"func"},"required":false,"description":"弹层隐藏时触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"弹层隐藏时触发的事件","params":[],"returns":null},"locale":{"type":{"name":"object"},"required":false,"description":"自定义国际化文案对象","defaultValue":{"value":"{\n    selectPlaceHolder: '请选择',\n    comboboxPlaceHolder: '请输入'\n}","computed":false},"docblock":"自定义国际化文案对象\n@property {String} selectPlaceHolder 请选择的提示文案\n@property {String} comboboxPlaceHolder 请输入的提示文案","properties":[{"name":"selectPlaceHolder","description":"请选择的提示文案","type":{"name":"String"}},{"name":"comboboxPlaceHolder","description":"请输入的提示文案","type":{"name":"String"}}]},"language":{"type":{"name":"enum","value":[{"value":"'en-us'","computed":false},{"value":"'zh-cn'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"自定义国际化语言","docblock":"自定义国际化语言"}},"methods":[]},{"name":"OptionGroup","props":{"label":{"type":{"name":"union","value":[{"name":"string"},{"name":"node"}]},"required":false,"description":"设置分组的文案","docblock":"设置分组的文案"}},"methods":[]},{"name":"Option","props":{"value":{"type":{"name":"any"},"required":false,"description":"选项值","docblock":"选项值"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","docblock":"是否禁用"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ncontainer | 弹层挂载容器节点 | String/Function | -\nsize | 选择器的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nshape | 选择器的形状<br><br>**可选值**:<br>'normal', 'arrow-only' | Enum | 'normal'\nplaceholder | 没有值的时候的占位符 | String | ''\nvalue | 当前值 | String/Array/ReactNode/Object | -\ndefaultValue | 初始默认值 | String/Array/ReactNode/Object | -\nvisible | 当前弹层是否显示 | Boolean | -\ndefaultVisible | 弹层初始是否显示 | Boolean | -\ndisabled | 是否禁用 | Boolean | false\ndataSource | 传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用) | Array | -\nmultiple | 是否是多选 | Boolean | false\nfillProps | 填充到选择框里面的值 | String | 'label'\nshowSearch | 是否显示顶部的搜索框 | Boolean | false\nfilterBy | 在输入的时候过滤的函数,仅在filterLocal为true时候有效<br><br>**签名**:<br>Function(filterValue: String, option: Object) => Boolean<br>**参数**:<br>*filterValue*: {String} 筛选值<br>*option*: {Object} 选项<br>**返回值**:<br>{Boolean} 是否保留当前选项<br> | Function | -\nfilterLocal | 是否使用本地过滤,在数据源为远程的时候需要关闭此选项 | Boolean | true\nhasArrow | 是否显示右侧的箭头 | Boolean | true\nautoWidth | 下拉菜单是否与选择器对齐 | Boolean | true\nonChange | Select发生改变的时候触发的回调<br><br>**签名**:<br>Function(value: String, option: Object) => void<br>**参数**:<br>*value*: {String} 数据<br>*option*: {Object} 选项 | Function | () =&gt; {}\nonSearch | 在搜索框中输入触发的事件，仅在showSearch为true时候有效<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>*value*: {String} 搜索值 | Function | () =&gt; {}\nhasClear | 是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效 | Boolean | false\npopupClassName | 弹出层的样式类 | String | -\npopupProps | 弹出层的属性 | Object | -\nonVisibleChange | 弹层显示或隐藏的时候触发的事件<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>*visible*: {Boolean} 弹层是否隐藏和显示 | Function | () =&gt; {}\nonOpen | 弹层显示时触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonClose | 弹层隐藏时触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nlocale | 自定义国际化文案对象<br><br>**属性**:<br>*selectPlaceHolder*: {String} 请选择的提示文案<br>*comboboxPlaceHolder*: {String} 请输入的提示文案 | Object | {     selectPlaceHolder: '请选择',     comboboxPlaceHolder: '请输入' }\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'en-us', 'zh-cn', 'zh-tw' | Enum | -\n","methodREADME":[],"subComponentsREADME":[{"name":"Combobox","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ncontainer | 弹层挂载容器节点 | String/Function | -\nsize | 选择器的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nshape | 选择器的形状<br><br>**可选值**:<br>'normal', 'arrow-only' | Enum | 'normal'\nplaceholder | 没有值的时候的占位符 | String | ''\nvalue | 当前值 | String/Array/ReactNode/Object | -\ndefaultValue | 初始默认值 | String/Array/ReactNode/Object | -\nvisible | 当前弹层是否显示 | Boolean | -\ndefaultVisible | 弹层初始是否显示 | Boolean | -\ndisabled | 是否禁用 | Boolean | false\ndataSource | 传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用) | Array | -\nmultiple | 是否是多选 | Boolean | false\ntags | 是否启用标签模式, 仅在多选时有效,效果是除了自动提示外的选项, 也可以使用输入的文字作为标签 | Boolean | -\nfillProps | 填充到选择框里面的值 | String | 'value'\nshowSearch | 是否显示顶部的搜索框 | Boolean | false\nfilterBy | 在输入的时候过滤的函数,仅在filterLocal为true时候有效<br><br>**签名**:<br>Function(filterValue: String, option: Object) => Boolean<br>**参数**:<br>*filterValue*: {String} 筛选值<br>*option*: {Object} 选项<br>**返回值**:<br>{Boolean} 是否保留当前选项<br> | Function | -\nfilterLocal | 是否使用本地过滤,在数据源为远程的时候需要关闭此选项 | Boolean | true\nhasArrow | 是否显示右侧的箭头 | Boolean | true\nautoWidth | 下拉菜单是否与选择器对齐 | Boolean | true\nhiddenSelected | 选择后是否立即隐藏菜单，单选是默认隐藏的，因此该选项只在多选的时候有效 | Boolean | false\nonInputUpdate | Combobox在用户输入的时候触发的回调<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>*value*: {String} 输入值 | Function | () =&gt; {}\nonInputFocus | Combobox获取焦点的时候触发的回调<br><br>**签名**:<br>Function(e: Event, clickByUser: Boolean) => void<br>**参数**:<br>*e*: {Event} DOM事件对象<br>*clickByUser*: {Boolean} 是否用户点击 | Function | () =&gt; {}\nonInputBlur | Combobox失去焦点的时候触发的回调<br><br>**签名**:<br>Function(e: Event, inputValue: String) => void<br>**参数**:<br>*e*: {Event} DOM事件对象<br>*inputValue*: {String} 输入值 | Function | () =&gt; {}\nonInputEnter | Combobox回车的时候触发的回调<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>*e*: {Event} DOM事件对象 | Function | () =&gt; {}\nonChange | Combobox发生改变的时候触发的回调, 注意在输入的时候该事件不会被触发，如果需要监听输入的事件请使用onInputUpdate<br><br>**签名**:<br>Function(value: String, option: Object) => void<br>**参数**:<br>*value*: {String} 数据<br>*option*: {Object} 选项 | Function | () =&gt; {}\nonSearch | 在搜索框中输入触发的事件，仅在showSearch为true时候有效<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>*value*: {String} 搜索值 | Function | () =&gt; {}\nhasClear | 是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效 | Boolean | false\npopupClassName | 弹出层的样式类 | String | -\npopupProps | 弹出层的属性 | Object | -\nonVisibleChange | 弹层显示或隐藏的时候触发的事件<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>*visible*: {Boolean} 弹层是否隐藏和显示 | Function | () =&gt; {}\nonOpen | 弹层显示时触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonClose | 弹层隐藏时触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nlocale | 自定义国际化文案对象<br><br>**属性**:<br>*selectPlaceHolder*: {String} 请选择的提示文案<br>*comboboxPlaceHolder*: {String} 请输入的提示文案 | Object | {     selectPlaceHolder: '请选择',     comboboxPlaceHolder: '请输入' }\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'en-us', 'zh-cn', 'zh-tw' | Enum | -\n","methodREADME":[]},{"name":"OptionGroup","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nlabel | 设置分组的文案 | String/ReactNode | -\n","methodREADME":[]},{"name":"Option","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nvalue | 选项值 | any | -\ndisabled | 是否禁用 | Boolean | -\n","methodREADME":[]}],"demos":[{"title":"Combobox","order":"5","jsx":"import { Select, Button } from \"@icedesign/base\";\n\nconst { Combobox } = Select;\n\nconst onChange = function(...args) {\n  console.log(args);\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  onToggle() {\n    this.setState({\n      disabled: !this.state.disabled\n    });\n  }\n\n  onSelect(type, value) {\n    switch (type) {\n      case \"mode\":\n        this.setState({\n          [type]: value === \"multiple\"\n        });\n        break;\n      case \"search\":\n      case \"hasArrow\":\n      case \"hasClear\":\n        this.setState({\n          [type]: value === \"yes\"\n        });\n        break;\n      default:\n        this.setState({\n          [type]: value\n        });\n    }\n  }\n\n  onInputUpdate(value) {\n    console.log(value);\n  }\n\n  onInputBlur(e, value) {\n    console.log(\"blur\", value);\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <p>\n          <Select\n            placeholder=\"选择尺寸\"\n            onChange={this.onSelect.bind(this, \"size\")}\n          >\n            <Option value=\"small\">Small</Option>\n            <Option value=\"medium\">Medium</Option>\n            <Option value=\"large\">Large</Option>\n          </Select>\n          <Select\n            placeholder=\"选择模式\"\n            onChange={this.onSelect.bind(this, \"mode\")}\n          >\n            <Option value=\"single\">单选</Option>\n            <Option value=\"multiple\">多选</Option>\n          </Select>\n          <Select\n            placeholder=\"显示箭头\"\n            onChange={this.onSelect.bind(this, \"hasArrow\")}\n          >\n            <Option value=\"yes\">常规</Option>\n            <Option value=\"no\">无下拉箭头</Option>\n          </Select>\n          <Select\n            placeholder=\"显示清空按钮\"\n            onChange={this.onSelect.bind(this, \"hasClear\")}\n          >\n            <Option value=\"no\">不显示</Option>\n            <Option value=\"yes\">显示</Option>\n          </Select>\n          <Select\n            placeholder=\"填充属性\"\n            onChange={this.onSelect.bind(this, \"fillProps\")}\n          >\n            <Option value=\"value\">value</Option>\n            <Option value=\"label\">label</Option>\n          </Select>\n          <Button onClick={this.onToggle.bind(this)} type=\"primary\">\n            Toggle disabled\n          </Button>\n        </p>\n        <h4>预览</h4>\n        <Combobox\n          size={this.state.size}\n          multiple={this.state.mode}\n          hasArrow={this.state.hasArrow}\n          disabled={this.state.disabled}\n          fillProps={this.state.fillProps}\n          hasClear={this.state.hasClear}\n          onChange={onChange}\n          onInputBlur={this.onInputBlur.bind(this)}\n          onInputUpdate={this.onInputUpdate.bind(this)}\n        >\n          <Option value=\"\">空</Option>\n          <Option value=\"jack\">Jack</Option>\n          <Option value=\"lucy\">Lucy</Option>\n          <Option value=\"andy\">Andy</Option>\n          <Option value=\"disabled\" disabled>\n            Disabled\n          </Option>\n        </Combobox>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n","body":"\n演示了Combobox的多种形态.\n\n"},{"title":"受控Combo","order":"7","jsx":"import { Select } from \"@icedesign/base\";\nimport jsonp from \"jsonp\";\n\nconst { Combobox } = Select;\n\nclass App extends React.Component {\n  state = {\n    dataSource: [],\n    value: \"test\"\n  };\n  onInputUpdate(value) {\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout);\n    }\n    this.searchTimeout = setTimeout(() => {\n      jsonp(\n        `https://suggest.taobao.com/sug?code=utf-8&q=${value}`,\n        (err, data) => {\n          const dataSource = data.result.map(item => {\n            return {\n              label: item[0],\n              value: item[1]\n            };\n          });\n          this.setState({\n            dataSource\n          });\n        }\n      );\n    }, 100);\n    //单选情况下需要更新input的值\n    this.setState({\n      value\n    });\n  }\n  onChange(value) {\n    this.setState({\n      value\n    });\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Combobox\n          onInputUpdate={this.onInputUpdate.bind(this)}\n          filterLocal={false}\n          value={this.state.value}\n          fillProps=\"label\"\n          placeholder=\"请输入淘宝商品\"\n          onChange={this.onChange.bind(this)}\n          dataSource={this.state.dataSource}\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n","body":"\n演示Combobox的受控状态\n\n"},{"title":"多选受控","order":"8","jsx":"import { Select } from \"@icedesign/base\";\nimport jsonp from \"jsonp\";\n\nconst { Combobox } = Select;\n\nclass App extends React.Component {\n  state = {\n    dataSource: [],\n    value: \"test\"\n  };\n  //多选情况下不需要更新input的值\n  onInputUpdate(value) {\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout);\n    }\n    this.searchTimeout = setTimeout(() => {\n      jsonp(\n        `https://suggest.taobao.com/sug?code=utf-8&q=${value}`,\n        (err, data) => {\n          const dataSource = data.result.map(item => {\n            return {\n              label: item[0],\n              value: item[1]\n            };\n          });\n          this.setState({\n            dataSource\n          });\n        }\n      );\n    }, 100);\n  }\n  onChange(value) {\n    this.setState({\n      value\n    });\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Combobox\n          onInputUpdate={this.onInputUpdate.bind(this)}\n          filterLocal={false}\n          value={this.state.value}\n          fillProps=\"label\"\n          multiple\n          placeholder=\"请输入淘宝商品\"\n          onChange={this.onChange.bind(this)}\n          dataSource={this.state.dataSource}\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n","body":"\n演示多选情况下Combobox的受控状态\n\n"},{"title":"动态数据","order":"6","jsx":"import { Select } from \"@icedesign/base\";\nimport jsonp from \"jsonp\";\n\nconst { Combobox } = Select;\n\nconst onChange = function(...args) {\n  console.log(args);\n};\n\nclass App extends React.Component {\n  state = {\n    dataSource: []\n  };\n  onInputUpdate(value) {\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout);\n    }\n    this.searchTimeout = setTimeout(() => {\n      jsonp(\n        `https://suggest.taobao.com/sug?code=utf-8&q=${value}`,\n        (err, data) => {\n          const dataSource = data.result.map(item => {\n            return {\n              label: item[0],\n              value: item[1]\n            };\n          });\n          this.setState({\n            dataSource\n          });\n        }\n      );\n    }, 100);\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Combobox\n          onInputUpdate={this.onInputUpdate.bind(this)}\n          filterLocal={false}\n          fillProps=\"label\"\n          placeholder=\"请输入淘宝商品\"\n          onChange={onChange}\n          dataSource={this.state.dataSource}\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n","body":"\n使用动态数据填充Combobox, 设置`filterLocal`为false\n\n"},{"title":"图文展示","order":"7","jsx":"import { Select, Icon } from \"@icedesign/base\";\nimport jsonp from \"jsonp\";\n\nconst { Combobox } = Select;\n\nconst onChange = function(...args) {\n  console.log(args);\n};\n\nconst formatter = function(item) {\n  return (\n    <div>\n      <Icon type=\"gifts\" size=\"small\" />&nbsp;{item}\n    </div>\n  );\n};\n\nclass App extends React.Component {\n  state = {\n    dataSource: []\n  };\n  onInputUpdate(value) {\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout);\n    }\n    this.searchTimeout = setTimeout(() => {\n      jsonp(\n        `https://suggest.taobao.com/sug?code=utf-8&q=${value}`,\n        (err, data) => {\n          const dataSource = data.result.map(item => {\n            return {\n              label: formatter(item[0]),\n              value: item[1],\n              originLabel: item[0]\n            };\n          });\n          this.setState({\n            dataSource\n          });\n        }\n      );\n    }, 100);\n  }\n  // 由于这个时候展示的是富文本，所以fillProps需要设置成展示合理的值(originLabel)\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Combobox\n          onInputUpdate={this.onInputUpdate.bind(this)}\n          filterLocal={false}\n          fillProps=\"originLabel\"\n          placeholder=\"请输入淘宝商品\"\n          onChange={onChange}\n          dataSource={this.state.dataSource}\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n","body":"\n展示较为复杂的内容\n\n"},{"title":"tags","order":"8","jsx":"import { Select, Button } from \"@icedesign/base\";\n\nconst { Combobox } = Select;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: [\n        {\n          value: \"测试\",\n          label: \"测试\",\n          time: 123\n        }\n      ],\n      value: \"测试\",\n      visible: false\n    };\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <p>\n          <Button onClick={this.toggleTags.bind(this)}>切换tags模式</Button>&nbsp;\n          <Button onClick={this.toggleHiddenSelect.bind(this)}>\n            切换在多选的时候是否隐藏菜单\n          </Button>&nbsp;\n          <Button onClick={this.toggleVisible.bind(this)} ref=\"visibleElement\">\n            切换显示\n          </Button>&nbsp;\n        </p>\n        <Combobox\n          size=\"large\"\n          value={this.state.value}\n          dataSource={this.state.dataSource}\n          onChange={this.onChange.bind(this)}\n          onInputUpdate={this.onInputUpdate.bind(this)}\n          multiple\n          tags={this.state.tags}\n          filterLocal={false}\n          safeNode={() => this.refs.visibleElement}\n          visible={this.state.visible}\n          onInputBlur={() => console.log(\"blur\")}\n          onVisibleChange={this.onVisibleChange.bind(this)}\n          hiddenSelected={this.state.hiddenSelected}\n        />\n      </div>\n    );\n  }\n  onInputUpdate(value) {\n    let options;\n    if (!value || value.indexOf(\"@\") > 0) {\n      options = [];\n    } else {\n      options = [\"126.com\", \"163.com\", \"gmail.com\"].map(mail => {\n        return {\n          label: value + \"@\" + mail,\n          value: value + \"@\" + mail,\n          time: Math.random()\n        };\n      });\n    }\n    this.setState({ dataSource: options });\n  }\n  onChange(value, item) {\n    this.setState({ value });\n    console.log(item);\n  }\n  toggleTags() {\n    this.setState({ tags: !this.state.tags });\n  }\n  toggleHiddenSelect() {\n    this.setState({ hiddenSelected: !this.state.hiddenSelected });\n  }\n  toggleVisible() {\n    this.setState({ visible: !this.state.visible });\n  }\n  onVisibleChange(visible) {\n    this.setState({ visible });\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":".demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n","body":"\n演示combobox的tags功能\n\n"},{"title":"弹层定制","order":"9","jsx":"import { Select } from \"@icedesign/base\";\nimport classnames from \"classnames\";\n\n/* eslint-disable react/prop-types, react/no-multi-comp */\nclass Menu extends React.Component {\n  data = [\n    {\n      label: \"value1\",\n      value: 1\n    },\n    {\n      label: \"value2\",\n      value: 2\n    }\n  ];\n  render() {\n    const { className, ...others } = this.props;\n    const cls = classnames({\n      \"overlay-content\": true,\n      [className]: className\n    });\n    return (\n      <ul className={cls} {...others}>\n        {this.renderItems()}\n      </ul>\n    );\n  }\n  renderItems() {\n    return this.data.map(item => (\n      <li onClick={this.onClick.bind(this, item)} key={item.value}>\n        {item.label}\n      </li>\n    ));\n  }\n  onClick(item) {\n    this.props.onChange(item);\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: null\n    };\n  }\n  onSelect = value => {\n    this.setState({\n      value,\n      visible: false\n    });\n  };\n  onVisibleChange = visible => {\n    this.setState({\n      visible\n    });\n  };\n  render() {\n    const overlay = <Menu onChange={this.onSelect} />;\n    return (\n      <div className=\"demo-ctl\">\n        <Select\n          placeholder=\"选择自定义数据\"\n          visible={this.state.visible}\n          onVisibleChange={this.onVisibleChange}\n          value={this.state.value}\n          overlay={overlay}\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n.overlay-content{\n    border:1px solid #ddd;\n    padding:10px;\n    background:#fff;\n    margin:0;\n    min-width:150px;\n    font-family: Arial;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n.overlay-content li{\n    list-style: none;\n    line-height:30px;\n    padding: 0 5px;\n    cursor: pointer;\n}\n.overlay-content li:hover{\n    background:#f8f8f8;\n}\n.overlay-content li:last-child{\n    border-width:0;\n}\n","body":"\n通过overlay定制select弹层\n\n"},{"title":"基本使用","order":"0","jsx":"import { Select, Button } from \"@icedesign/base\";\n\nconst { Option } = Select;\n\nconst onChange = function(...args) {\n  console.log(args);\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <p>\n          <Select\n            placeholder=\"选择尺寸\"\n            onChange={this.onSelect.bind(this, \"size\")}\n          >\n            <Option value=\"small\">Small</Option>\n            <Option value=\"medium\">Medium</Option>\n            <Option value=\"large\">Large</Option>\n          </Select>\n          <Select\n            placeholder=\"选择模式\"\n            onChange={this.onSelect.bind(this, \"mode\")}\n          >\n            <Option value=\"single\">单选</Option>\n            <Option value=\"multiple\">多选</Option>\n          </Select>\n          <Select\n            placeholder=\"显示搜索框\"\n            onChange={this.onSelect.bind(this, \"search\")}\n          >\n            <Option value=\"no\">不显示</Option>\n            <Option value=\"yes\">显示</Option>\n          </Select>\n          <Select\n            placeholder=\"选择形状\"\n            onChange={this.onSelect.bind(this, \"shape\")}\n          >\n            <Option value=\"normal\">常规</Option>\n            <Option value=\"arrow-only\">无边框</Option>\n          </Select>\n          <Select\n            placeholder=\"显示箭头\"\n            onChange={this.onSelect.bind(this, \"hasArrow\")}\n          >\n            <Option value=\"yes\">常规</Option>\n            <Option value=\"no\">无下拉箭头</Option>\n          </Select>\n          <Select\n            placeholder=\"显示清空按钮\"\n            onChange={this.onSelect.bind(this, \"hasClear\")}\n          >\n            <Option value=\"no\">不显示</Option>\n            <Option value=\"yes\">显示</Option>\n          </Select>\n          <Button onClick={this.onToggle.bind(this)} type=\"primary\">\n            Toggle disabled\n          </Button>\n        </p>\n        <h4>预览</h4>\n        <Select\n          size={this.state.size}\n          multiple={this.state.mode}\n          showSearch={this.state.search}\n          shape={this.state.shape}\n          hasArrow={this.state.hasArrow}\n          disabled={this.state.disabled}\n          hasClear={this.state.hasClear}\n          onChange={onChange}\n        >\n          <Option value=\"\">空</Option>\n          <Option value=\"jack\">Jack</Option>\n          <Option value=\"lucy\">Lucy</Option>\n          <Option value=\"andy\">Andy</Option>\n          <Option value=\"disabled\" disabled>\n            Disabled\n          </Option>\n        </Select>\n      </div>\n    );\n  }\n  onToggle() {\n    this.setState({\n      disabled: !this.state.disabled\n    });\n  }\n  onSelect(type, value) {\n    switch (type) {\n      case \"mode\":\n        this.setState({\n          [type]: value === \"multiple\"\n        });\n        break;\n      case \"search\":\n      case \"hasArrow\":\n      case \"hasClear\":\n        this.setState({\n          [type]: value === \"yes\"\n        });\n        break;\n      default:\n        this.setState({\n          [type]: value\n        });\n    }\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n    margin-top:5px;\n}\n\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n    padding:5px 10px 10px 10px;\n    border:2px dotted #ddd;\n    border-radius:3px;\n}\n.demo-ctl p .next-btn{\n    margin-top:5px;\n    vertical-align: middle;\n}\n","body":"\n演示了Select的多种形态.\n\n"},{"title":"级联选择","order":"1","jsx":"import { Select } from \"@icedesign/base\";\n\nconst provinceData = [\"浙江\", \"江苏\"];\nconst cityData = {\n  浙江: [\"杭州\", \"宁波\", \"温州\"],\n  江苏: [\"南京\", \"苏州\", \"镇江\"]\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      disabled: true\n    };\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Select\n          placeholder=\"选择省份\"\n          dataSource={provinceData}\n          value={this.state.province}\n          onChange={this.onSelect.bind(this)}\n        />\n        <Select\n          placeholder=\"选择城市\"\n          dataSource={this.state.data}\n          value={this.state.city}\n          onChange={this.onChange.bind(this)}\n          disabled={this.state.disabled}\n        />\n      </div>\n    );\n  }\n  onSelect(value) {\n    const data = cityData[value];\n    this.setState({ data, province: value, disabled: false });\n  }\n  onChange(value) {\n    this.setState({ city: value });\n    console.log(this.state.province, value);\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n","css":".next-select{margin-right:10px;}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n","body":"\n使用Select构建级联选择框.\n\n"},{"title":"分组","order":"3","jsx":"import { Select } from \"@icedesign/base\";\n\nconst { Option, OptionGroup } = Select;\n\nconst dataSource = [\n  {\n    label: \"文案1\",\n    children: [\n      {\n        label: \"文案11\",\n        value: \"text11\"\n      }\n    ]\n  },\n  {\n    label: \"文案2\",\n    children: [\n      {\n        label: \"文案22\",\n        value: \"text22\"\n      }\n    ]\n  }\n];\n\nReactDOM.render(\n  <div className=\"demo-ctl\">\n    <Select placeholder=\"选择尺寸\" showSearch>\n      <OptionGroup label=\"尺寸1\">\n        <Option value=\"small\">Small</Option>\n        <Option value=\"medium\">Medium</Option>\n        <Option value=\"large\">Large</Option>\n      </OptionGroup>\n      <OptionGroup label=\"尺寸2\">\n        <Option value=\"small2\">Small2</Option>\n        <Option value=\"medium2\">Medium2</Option>\n        <Option value=\"large2\">Large2</Option>\n      </OptionGroup>\n    </Select>\n    <Select dataSource={dataSource} />\n  </div>,\n  mountNode\n);\n\n","css":".next-select{margin-right:10px;}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n","body":"\n使用OptionGroup针对选项进行分组\n\n"},{"title":"搜索框","order":"4","jsx":"import { Select } from \"@icedesign/base\";\nimport jsonp from \"jsonp\";\n\nclass App extends React.Component {\n  state = {\n    dataSource: []\n  };\n\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Select\n          showSearch\n          dataSource={this.state.dataSource}\n          onSearch={this.onSearch}\n          filterLocal={false}\n          className=\"temp\"\n        />\n      </div>\n    );\n  }\n\n  onSearch = value => {\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout);\n    }\n    this.searchTimeout = setTimeout(() => {\n      jsonp(\n        `https://suggest.taobao.com/sug?code=utf-8&q=${value}`,\n        (err, data) => {\n          const dataSource = data.result.map(item => {\n            return {\n              label: item[0],\n              value: item[1]\n            };\n          });\n          this.setState({\n            dataSource\n          });\n        }\n      );\n    }, 100);\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".next-select.temp{\n    margin-right:10px;\n    width:200px;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n","body":"\n使用showSearch显示搜索框\n\n"}]},{"name":"Slider","category":"Components","title":"图片轮播","type":"展示","importStatement":"import { Slider } from '@icedesign/base';","body":"\n\n## Guide\n\n轮播组件，就是以幻灯片的方式，在页面中横向展示诸多内容的组件。\n轮播内容相互独立，前后在内容以及数据上都不存在逻辑关系。\n\n### 何时使用\n\n-   **单图轮播**：该样式通常用于承载运营banner，是一个位置相对固定的模块。\n-   **多图轮播**：单元信息浏览\n\n### 使用注意点\n\n1.  当轮播组件中只有一张图片的时候，轮播组件会隐藏导航锚点、禁止自动循环（即使上层设置了）、禁止拖拽播放（即使上层设置了）。\n2.  如果您要将 Slider 放到 Dialog 中，此时你需要关闭 Dialog 的动画，避免 Slider 在计算内部元素宽度时造成出错。\n3.  如果出现图片高度 1px 的问题，可以尝试在 `img` 标签的外部包裹一层 `div` 标签。\n\n","propsSchema":{"name":"Slider","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义传入的样式","docblock":"自定义传入的样式"},"adaptiveHeight":{"type":{"name":"bool"},"required":false,"description":"是否使用自适应高度","defaultValue":{"value":"false","computed":false},"docblock":"是否使用自适应高度"},"animation":{"type":{"name":"bool"},"required":false,"description":"是否开启动效","defaultValue":{"value":"true","computed":false},"docblock":"是否开启动效"},"arrows":{"type":{"name":"bool"},"required":false,"description":"是否显示箭头","defaultValue":{"value":"true","computed":false},"docblock":"是否显示箭头"},"arrowSize":{"type":{"name":"enum","value":[{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"导航箭头大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"导航箭头大小"},"arrowPos":{"type":{"name":"enum","value":[{"value":"'inline'","computed":false},{"value":"'outer'","computed":false}]},"required":false,"description":"导航箭头位置","defaultValue":{"value":"'inline'","computed":false},"docblock":"导航箭头位置"},"arrowDirection":{"type":{"name":"enum","value":[{"value":"'horizontal'","computed":false},{"value":"'vertical'","computed":false}]},"required":false,"description":"导航箭头的方向","defaultValue":{"value":"'horizontal'","computed":false},"docblock":"导航箭头的方向"},"nextArrow":{"type":{"name":"element"},"required":false,"description":"向后箭头","defaultValue":{"value":"null","computed":false},"docblock":"向后箭头"},"prevArrow":{"type":{"name":"element"},"required":false,"description":"向后箭头","defaultValue":{"value":"null","computed":false},"docblock":"向后箭头"},"autoplay":{"type":{"name":"bool"},"required":false,"description":"是否自动播放","defaultValue":{"value":"false","computed":false},"docblock":"是否自动播放"},"autoplaySpeed":{"type":{"name":"number"},"required":false,"description":"自动播放的速度","defaultValue":{"value":"3000","computed":false},"docblock":"自动播放的速度"},"centerMode":{"type":{"name":"bool"},"required":false,"description":"是否启用居中模式","defaultValue":{"value":"false","computed":false},"docblock":"是否启用居中模式"},"dots":{"type":{"name":"bool"},"required":false,"description":"是否显示导航锚点","defaultValue":{"value":"true","computed":false},"docblock":"是否显示导航锚点"},"dotsDirection":{"type":{"name":"enum","value":[{"value":"'horizontal'","computed":false},{"value":"'vertical'","computed":false}]},"required":false,"description":"导航锚点到位置","defaultValue":{"value":"'horizontal'","computed":false},"docblock":"导航锚点到位置"},"draggable":{"type":{"name":"bool"},"required":false,"description":"是否可拖拽","defaultValue":{"value":"true","computed":false},"docblock":"是否可拖拽"},"fade":{"type":{"name":"bool"},"required":false,"description":"是否使用淡入淡出效果","defaultValue":{"value":"false","computed":false},"docblock":"是否使用淡入淡出效果"},"infinite":{"type":{"name":"bool"},"required":false,"description":"是否使用无穷循环模式","defaultValue":{"value":"true","computed":false},"docblock":"是否使用无穷循环模式"},"initialSlide":{"type":{"name":"number"},"required":false,"description":"初始被激活的轮播图","defaultValue":{"value":"0","computed":false},"docblock":"初始被激活的轮播图"},"lazyLoad":{"type":{"name":"bool"},"required":false,"description":"是否启用懒加载","defaultValue":{"value":"false","computed":false},"docblock":"是否启用懒加载"},"slideDirection":{"type":{"name":"enum","value":[{"value":"'horizontal'","computed":false},{"value":"'vertical'","computed":false}]},"required":false,"description":"轮播方向","defaultValue":{"value":"'horizontal'","computed":false},"docblock":"轮播方向"},"slidesToShow":{"type":{"name":"number"},"required":false,"description":"同时展示的图片数量","defaultValue":{"value":"1","computed":false},"docblock":"同时展示的图片数量"},"slidesToScroll":{"type":{"name":"number"},"required":false,"description":"同时滑动到图片数量","defaultValue":{"value":"1","computed":false},"docblock":"同时滑动到图片数量"},"speed":{"type":{"name":"number"},"required":false,"description":"轮播速度","defaultValue":{"value":"500","computed":false},"docblock":"轮播速度"},"slickGoTo":{"type":{"name":"number"},"required":false,"description":"跳转到指定的轮播图（受控）","docblock":"跳转到指定的轮播图（受控）"},"afterChange":{"type":{"name":"func"},"required":false,"description":"轮播切换后的回调函数","defaultValue":{"value":"null","computed":false},"docblock":"轮播切换后的回调函数\n@param {Number} index 当前幻灯片的索引","params":[{"name":"index","description":"当前幻灯片的索引","type":{"name":"Number"}}],"returns":null},"beforeChange":{"type":{"name":"func"},"required":false,"description":"轮播切换前的回调函数","defaultValue":{"value":"null","computed":false},"docblock":"轮播切换前的回调函数\n@param {Number} currentIndex 当前幻灯片的索引\n@param {Number} nextIndex    下一张幻灯片的索引","params":[{"name":"currentIndex","description":"当前幻灯片的索引","type":{"name":"Number"}},{"name":"nextIndex","description":"下一张幻灯片的索引","type":{"name":"Number"}}],"returns":null}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nclassName | 自定义传入的样式 | String | -\nadaptiveHeight | 是否使用自适应高度 | Boolean | false\nanimation | 是否开启动效 | Boolean | true\narrows | 是否显示箭头 | Boolean | true\narrowSize | 导航箭头大小<br><br>**可选值**:<br>'medium', 'large' | Enum | 'medium'\narrowPos | 导航箭头位置<br><br>**可选值**:<br>'inline', 'outer' | Enum | 'inline'\narrowDirection | 导航箭头的方向<br><br>**可选值**:<br>'horizontal', 'vertical' | Enum | 'horizontal'\nnextArrow | 向后箭头 | ReactElement | null\nprevArrow | 向后箭头 | ReactElement | null\nautoplay | 是否自动播放 | Boolean | false\nautoplaySpeed | 自动播放的速度 | Number | 3000\ncenterMode | 是否启用居中模式 | Boolean | false\ndots | 是否显示导航锚点 | Boolean | true\ndotsDirection | 导航锚点到位置<br><br>**可选值**:<br>'horizontal', 'vertical' | Enum | 'horizontal'\ndraggable | 是否可拖拽 | Boolean | true\nfade | 是否使用淡入淡出效果 | Boolean | false\ninfinite | 是否使用无穷循环模式 | Boolean | true\ninitialSlide | 初始被激活的轮播图 | Number | 0\nlazyLoad | 是否启用懒加载 | Boolean | false\nslideDirection | 轮播方向<br><br>**可选值**:<br>'horizontal', 'vertical' | Enum | 'horizontal'\nslidesToShow | 同时展示的图片数量 | Number | 1\nslidesToScroll | 同时滑动到图片数量 | Number | 1\nspeed | 轮播速度 | Number | 500\nslickGoTo | 跳转到指定的轮播图（受控） | Number | -\nafterChange | 轮播切换后的回调函数<br><br>**签名**:<br>Function(index: Number) => void<br>**参数**:<br>*index*: {Number} 当前幻灯片的索引 | Function | null\nbeforeChange | 轮播切换前的回调函数<br><br>**签名**:<br>Function(currentIndex: Number, nextIndex: Number) => void<br>**参数**:<br>*currentIndex*: {Number} 当前幻灯片的索引<br>*nextIndex*: {Number} 下一张幻灯片的索引 | Function | null\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"导航箭头位置","order":"5","jsx":"import { Slider } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Slider slidesToShow={4} arrowPos=\"outer\">\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">1</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">2</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">3</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">4</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">5</h4>\n      </div>\n    </Slider>\n\n    <br />\n\n    <Slider>\n      <div>\n        <h3 className=\"h3\">1</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">2</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">3</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">4</h3>\n      </div>\n    </Slider>\n  </div>,\n  mountNode\n);\n\n","css":".next-slick .h3, .h4 {\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.next-slick .h4 {\n    margin: 0 5px;\n    position: relative;\n}\n","body":"\n可以通过指定`arrowPos`的属性值为`outer`，使用外置按钮，其默认值为`inline`。\n轮播组件的导航按钮在默认情况下为内置模式。在多图同时导航的情况下，如果想要使用外置按钮，\n\n"},{"title":"自动播放","order":"5","jsx":"import { Slider } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div style={{ width: \"600px\" }}>\n    <Slider\n      slidesToShow={4}\n      arrowPos=\"outer\"\n      dots={false}\n      autoplay\n      autoplaySpeed={1000}\n    >\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">1</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">2</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">3</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">4</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">5</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">6</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">7</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">8</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">9</h4>\n      </div>\n    </Slider>\n  </div>,\n  mountNode\n);\n\n","css":".next-slick .h3, .h4 {\n    margin: 0 5px;\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n","body":"\n可以通过 `autoplay` 和 `autoplaySpeed` 属性来设置组件是否自动轮播 和 自动轮播的速度。\n\n"},{"title":"基本","order":"0","jsx":"import { Slider } from \"@icedesign/base\";\n\nconst slides = [\n  {\n    url: \"https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png\",\n    text: \"手机淘宝皮肤征集\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg\",\n    text: \"阿里公益T恤设计大概\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg\",\n    text: \"淘公仔设计大赛\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg\",\n    text: \"磁带播放器换肤设计大赛\"\n  }\n];\n\nReactDOM.render(\n  <Slider>\n    {slides.map((item, index) => (\n      <div key={index} className=\"slider-img-wrapper\">\n        <img src={item.url} alt={item.text} />\n      </div>\n    ))}\n  </Slider>,\n  mountNode\n);\n\n","css":".slider-img-wrapper img {\n    width: 100%;\n}\n","body":"\n**注意：** 如果出现图片 1px 高度的问题，建议将图片的外部包括一层 `div` 来避免这个问题。\n在默认模式下（不指定任何属性值），轮播组件为单图轮播模式。\n轮播组件共有两种类型：单图轮播和多图同时轮播。\n\n"},{"title":"导航按钮尺寸","order":"3","jsx":"import { Slider } from \"@icedesign/base\";\n\nconst bigSlides = [\n  {\n    url: \"https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png\",\n    text: \"磁带播放器换肤设计大赛\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg\",\n    text: \"手机淘宝皮肤征集\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg\",\n    text: \"设计赋能公益\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg\",\n    text: \"淘公仔设计大赛\"\n  }\n];\n\nReactDOM.render(\n  <div>\n    <Slider>\n      {bigSlides.map((item, index) => (\n        <div key={index} className=\"slider-img-wrapper\">\n          <img src={item.url} alt={item.text} />\n        </div>\n      ))}\n    </Slider>\n\n    <br />\n\n    <Slider arrowSize=\"large\">\n      {bigSlides.map((item, index) => (\n        <div key={index} className=\"slider-img-wrapper\">\n          <img src={item.url} alt={item.text} />\n        </div>\n      ))}\n    </Slider>\n  </div>,\n  mountNode\n);\n\n","css":".slider-img-wrapper img {\n    width: 100%;\n}\n","body":"\n对特定场景，比如展示的图片较大的情况下，可以选择`large`，将导航按钮设置为大按钮。\n可以通过`arrowSize`属性来更改导航组件的按钮尺寸，默认值为`normal`，\n\n"},{"title":"居中模式","order":"9","jsx":"import { Slider } from \"@icedesign/base\";\n\nconst settings = {\n  className: \"custom-slide center\",\n  centerMode: true,\n  infinite: true,\n  dots: false,\n  arrowPos: \"outer\",\n  centerPadding: \"60px\",\n  slidesToShow: 3,\n  speed: 500\n};\n\nReactDOM.render(\n  <Slider {...settings}>\n    <div>\n      <h3>1</h3>\n    </div>\n    <div>\n      <h3>2</h3>\n    </div>\n    <div>\n      <h3>3</h3>\n    </div>\n    <div>\n      <h3>4</h3>\n    </div>\n    <div>\n      <h3>5</h3>\n    </div>\n    <div>\n      <h3>6</h3>\n    </div>\n    <div>\n      <h3>7</h3>\n    </div>\n    <div>\n      <h3>8</h3>\n    </div>\n    <div>\n      <h3>9</h3>\n    </div>\n  </Slider>,\n  mountNode\n);\n\n","css":".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n\n.center h3 {\n    opacity: 0.8;\n    transition: all 300ms ease;\n}\n\n.center .next-slick-center h3 {\n  color: #e67e22;\n  opacity: 1;\n  transform: scale(1.08);\n}\n","body":"\n居中模式可以突出显示最核心区域的内容，您可以通过设置 `centerMode` 属性址为 `true` 开启该功能。\n\n"},{"title":"自定义导航箭头","order":"3","jsx":"import { Slider, Icon } from \"@icedesign/base\";\n\nconst slides = [\n  {\n    url: \"https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png\",\n    text: \"手机淘宝皮肤征集\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg\",\n    text: \"阿里公益T恤设计大概\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg\",\n    text: \"淘公仔设计大赛\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg\",\n    text: \"磁带播放器换肤设计大赛\"\n  }\n];\n\nconst arrowStyle = {\n  display: \"block\",\n  background: \"red\",\n  opacity: 1,\n  margin: \"0 20px\"\n};\n\nconst CustomNextArrow = props => {\n  return (\n    <div {...props} style={arrowStyle}>\n      <Icon type=\"arrow-double-right\" />\n    </div>\n  );\n};\n\nconst CustomPrevArrow = props => {\n  return (\n    <div {...props} style={arrowStyle}>\n      <Icon type=\"arrow-double-left\" />\n    </div>\n  );\n};\n\nReactDOM.render(\n  <Slider\n    nextArrow={<CustomNextArrow />}\n    prevArrow={<CustomPrevArrow />}\n    lazyLoad\n  >\n    {slides.map((item, index) => (\n      <div key={index} className=\"slider-img-wrapper\">\n        <img src={item.url} alt={item.text} />\n      </div>\n    ))}\n  </Slider>,\n  mountNode\n);\n\n","css":".slider-img-wrapper img {\n    width: 100%;\n}\n","body":"\n开发者可以通过 `prevArrow` 和 `nextArrow` 两个属性传入自定义的导航箭头组件。\n\n"},{"title":"使用自定义组件","order":"11","jsx":"import { Slider } from \"@icedesign/base\";\nimport PropTypes from \"prop-types\";\n\nconst pages = [1, 2, 3, 4];\n\nfunction Inner({ children, ...others }) {\n  // 注意这里要透传其他属性到到下层节点上，Slider 底层需要执行元素的 clone 操作\n  return <div {...others}>{children}</div>;\n}\n\nInner.propTypes = {\n  children: PropTypes.any\n};\n\nconst slider = (\n  <Slider>\n    {pages.map((page, index) => {\n      return (\n        <Inner className=\"custom-inner\" key={index}>\n          custom {page}\n        </Inner>\n      );\n    })}\n  </Slider>\n);\n\nReactDOM.render(<div>{slider}</div>, mountNode);\n\n","css":".custom-inner {\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n","body":"\n你可以为传递自定义组件到 Slider 组件中。前提是该组件一定要开放透传 props 到下层组件或元素，Slider 底层需要执行元素的 clone 操作。\n\n"},{"title":"导航锚点方向","order":"5","jsx":"import { Slider } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Slider dotsDirection=\"horizontal\" arrows={false}>\n      <div>\n        <h3 className=\"h3\">1</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">2</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">3</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">4</h3>\n      </div>\n    </Slider>\n\n    <br />\n\n    <Slider dotsDirection=\"vertical\" arrows={false}>\n      <div>\n        <h3 className=\"h3\">1</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">2</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">3</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">4</h3>\n      </div>\n    </Slider>\n  </div>,\n  mountNode\n);\n\n","css":".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin-right: 5px;\n        position: relative;\n}\n","body":"\n当其值设为 `vertical` 时为垂直方向展示。\n通过 `dotsDirection` 可以改变导航锚点的位置，默认为 `horizontal` 即水平方向。\n\n"},{"title":"Fade","order":"12","jsx":"import { Slider } from \"@icedesign/base\";\n\nconst settings = {\n  arrowPos: \"outer\",\n  dots: false,\n  fade: true,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  className: \"custom-slide\"\n};\n\nReactDOM.render(\n  <Slider {...settings}>\n    <div>\n      <h3>1</h3>\n    </div>\n    <div>\n      <h3>2</h3>\n    </div>\n    <div>\n      <h3>3</h3>\n    </div>\n    <div>\n      <h3>4</h3>\n    </div>\n    <div>\n      <h3>5</h3>\n    </div>\n    <div>\n      <h3>6</h3>\n    </div>\n    <div>\n      <h3>7</h3>\n    </div>\n    <div>\n      <h3>8</h3>\n    </div>\n    <div>\n      <h3>9</h3>\n    </div>\n  </Slider>,\n  mountNode\n);\n\n","css":".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n","body":"\n切换跑马灯时使用渐变效果。\n\n"},{"title":"禁止循环","order":"6","jsx":"import { Slider } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Slider slidesToShow={4} arrowPos=\"outer\" infinite={false} dots={false}>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">1</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">2</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">3</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">4</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">5</h4>\n      </div>\n    </Slider>\n\n    <br />\n\n    <Slider infinite={false}>\n      <div>\n        <h3 className=\"h3\">1</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">2</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">3</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">4</h3>\n      </div>\n    </Slider>\n  </div>,\n  mountNode\n);\n\n","css":".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin: 0 5px;\n        position: relative;\n}\n","body":"\n如果你不想启用这样的复制效果，只要关闭 `infinite` 属性即可。\n值得注意的是，由于组件的默认行为是无穷模式，所以默认情况下，自动将单张图片复制了两份，\n可以通过设置 `infinite` 为 `false`，用来禁止循环模式。\n默认情况下，轮播组件的表现为无穷循环模式。如果你不想无穷循环，\n\n"},{"title":"多图轮播","order":"2","jsx":"import { Slider } from \"@icedesign/base\";\n\nconst slides = [1, 2, 3, 4, 5, 6, 7, 8, 9].map(item => (\n  <div style={{ width: \"25%\" }} key={item}>\n    <h4 className=\"h4\">1</h4>\n  </div>\n));\n\nReactDOM.render(\n  <div style={{ width: \"600px\" }}>\n    <div className=\"demo-item-title\">一次轮播一张图片</div>\n    <Slider slidesToShow={4} arrowPos=\"outer\" dots={false}>\n      {slides}\n    </Slider>\n\n    <div className=\"demo-item-title\">一次轮播多张图片</div>\n    <Slider slidesToShow={4} slidesToScroll={4} arrowPos=\"outer\" dots={false}>\n      {slides}\n    </Slider>\n  </div>,\n  mountNode\n);\n\n","css":".next-slick .h3, .h4 {\n    margin: 0 5px;\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n","body":"\n可以通过 `slidesToScroll` 属性制定单次轮播图片的个数。\n在单图轮播的基础上，通过指定`slidesToShow`属性值，可以同时进行多图轮播。\n\n"},{"title":"悬浮时暂停","order":"10","jsx":"import { Slider } from \"@icedesign/base\";\n\nconst settings = {\n  className: \"custom-slide\",\n  arrowPos: \"outer\",\n  dots: false,\n  infinite: true,\n  slidesToShow: 3,\n  slidesToScroll: 1,\n  autoplay: true,\n  autoplaySpeed: 2000,\n  pauseOnHover: true\n};\n\nReactDOM.render(\n  <Slider {...settings}>\n    <div>\n      <h3>1</h3>\n    </div>\n    <div>\n      <h3>2</h3>\n    </div>\n    <div>\n      <h3>3</h3>\n    </div>\n    <div>\n      <h3>4</h3>\n    </div>\n    <div>\n      <h3>5</h3>\n    </div>\n    <div>\n      <h3>6</h3>\n    </div>\n    <div>\n      <h3>7</h3>\n    </div>\n    <div>\n      <h3>8</h3>\n    </div>\n    <div>\n      <h3>9</h3>\n    </div>\n  </Slider>,\n  mountNode\n);\n\n","css":".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n","body":"\n可以通过设置 `pauseOnHover` 属性为 `true` 使得 Slide 在鼠标悬浮时自动停止轮播。\n\n"},{"title":"slickGoTo","order":"10","jsx":"import { Slider } from \"@icedesign/base\";\n\nconst slides = [\n  {\n    url: \"https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png\",\n    text: \"磁带播放器换肤设计大赛\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg\",\n    text: \"手机淘宝皮肤征集\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg\",\n    text: \"设计赋能公益\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg\",\n    text: \"淘公仔设计大赛\"\n  }\n];\n\nclass SlickGoTo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentSlide: 0 // 这里初始值需要置为 0，如果你希望初始值不为 0 ，可以使用 initialSlide 属性设置\n    };\n    this.changeHandler = this.changeHandler.bind(this);\n  }\n  changeHandler(e) {\n    this.setState({\n      currentSlide: parseInt(e.target.value)\n    });\n  }\n  render() {\n    const settings = {\n      dots: false,\n      infinite: true,\n      slickGoTo: this.state.currentSlide\n    };\n    return (\n      <div>\n        <div className=\"demo-item-title\">拉动下面的滚动条切换</div>\n        <input\n          onChange={this.changeHandler}\n          defaultValue={0}\n          type=\"range\"\n          min={0}\n          max={3}\n        />\n        <Slider {...settings}>\n          {slides.map((item, index) => (\n            <div key={index} className=\"slider-img-wrapper\">\n              <img src={item.url} alt={item.text} />\n            </div>\n          ))}\n        </Slider>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<SlickGoTo />, mountNode);\n\n","css":".slider-img-wrapper img {\n    width: 100%;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n","body":"\n通过 `slickGoTo` 方法可以快速的定位到指定次序的 slider 。\n\n"},{"title":"beforeChange 和 afterChange 钩子","order":"13","jsx":"import { Slider } from \"@icedesign/base\";\n\nconst settings = {\n  className: \"custom-slide\",\n  arrowPos: \"outer\",\n  dots: false,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  beforeChange: function(currentSlide, nextSlide) {\n    console.log(\"before change\", currentSlide, nextSlide);\n  },\n  afterChange: function(currentSlide) {\n    console.log(\"after change\", currentSlide);\n  }\n};\n\nReactDOM.render(\n  <Slider {...settings}>\n    <div>\n      <h3>1</h3>\n    </div>\n    <div>\n      <h3>2</h3>\n    </div>\n    <div>\n      <h3>3</h3>\n    </div>\n    <div>\n      <h3>4</h3>\n    </div>\n    <div>\n      <h3>5</h3>\n    </div>\n    <div>\n      <h3>6</h3>\n    </div>\n    <div>\n      <h3>7</h3>\n    </div>\n    <div>\n      <h3>8</h3>\n    </div>\n    <div>\n      <h3>9</h3>\n    </div>\n  </Slider>,\n  mountNode\n);\n\n","css":".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n","body":"\n你可以利用 `beforeChange` 和 `afterChange` 两个钩子函数处理一些额外的逻辑。\n\n"},{"title":"垂直滑动","order":"4","jsx":"import { Slider } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div style={{ width: \"200px\" }}>\n    <div className=\"demo-item-title\">垂直多图模式</div>\n    <Slider\n      slideDirection=\"vertical\"\n      slidesToShow={3}\n      slidesToScroll={1}\n      dots={false}\n      arrowPos=\"inline\"\n      arrowDirection=\"vertical\"\n      className=\"vertical-slick\"\n    >\n      {[1, 2, 3, 4, 5].map((item, index) => (\n        <div\n          key={index}\n          className=\"custom-slider\"\n          style={{ border: \"1px solid transparent\" }}\n        >\n          <h3 className=\"h3\">{item}</h3>\n        </div>\n      ))}\n    </Slider>\n\n    <div className=\"demo-item-title\">垂直单图模式</div>\n    <Slider\n      slideDirection=\"vertical\"\n      dots={false}\n      arrowPos=\"inline\"\n      arrowDirection=\"vertical\"\n      className=\"vertical-slick\"\n    >\n      {[1, 2, 3, 4, 5].map((item, index) => (\n        <div key={index} className=\"custom-slider\">\n          <h3 className=\"h3\">{item}</h3>\n        </div>\n      ))}\n    </Slider>\n  </div>,\n  mountNode\n);\n\n","css":".vertical-slick .h3 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        font-size: 36px;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n","body":"\n默认为值为 `horizontal` 。垂直模式也可以设置单图和多图轮播。\n轮播组件可以通过 `slideDirection` 属性设置两种轮播方向。当值为 `vertical` 时轮播方向为垂直方向，\n\n"},{"title":"弹出来的跑马灯","order":"12","jsx":"import { Slider, Dialog, Button } from \"@icedesign/base\";\nimport PropTypes from \"prop-types\";\n\nconst slides = [\n  {\n    url: \"https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png\",\n    text: \"磁带播放器换肤设计大赛\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg\",\n    text: \"手机淘宝皮肤征集\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg\",\n    text: \"设计赋能公益\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg\",\n    text: \"淘公仔设计大赛\"\n  }\n];\n\nconst dialogStyle = {\n  width: \"800px\"\n};\n\nclass FlappySlider extends React.Component {\n  static propTypes = {\n    slides: PropTypes.array\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  setVisible() {\n    this.setState(prevState => {\n      return {\n        visible: !prevState.visible\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"demo-wrapper\">\n        <Button type=\"primary\" onClick={this.setVisible.bind(this)}>\n          显示跑马灯\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          title=\"Alibaba.com\"\n          footer={false}\n          style={dialogStyle}\n          animation={false}\n          onClose={this.setVisible.bind(this)}\n        >\n          <Slider>\n            {this.props.slides.map((item, index) => (\n              <div key={index} className=\"slider-img-wrapper\">\n                <img key={index} src={item.url} alt={item.text} />\n              </div>\n            ))}\n          </Slider>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<FlappySlider slides={slides} />, mountNode);\n\n","css":".slider-img-wrapper img {\n    width: 100%;\n}\n","body":"\n如果你要将 Slider 放到 Dialog 中，此时你需要关闭 Dialog 的动画，避免 Slider 在计算内部元素宽度时造成出错。\n\n"},{"title":"外部控制","order":"8","jsx":"import { Slider, Select } from \"@icedesign/base\";\n\nconst { Option } = Select;\n\nclass SliderWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      autoplay: false,\n      autoplaySpeed: 1000\n    };\n  }\n\n  onSelectAutoplay(value) {\n    this.setState({ autoplay: value });\n  }\n\n  onSelectAutoplaySpeed(value) {\n    this.setState({ autoplaySpeed: value });\n  }\n\n  render() {\n    return (\n      <div>\n        <Select\n          placeholder=\"自动播放\"\n          onChange={this.onSelectAutoplay.bind(this)}\n        >\n          <Option value>True</Option>\n          <Option value={false}>False</Option>\n        </Select>\n        &nbsp;&nbsp;\n        <Select\n          placeholder=\"轮播速度\"\n          onChange={this.onSelectAutoplaySpeed.bind(this)}\n        >\n          <Option value={1000}>1 second</Option>\n          <Option value={2000}>2 seconds</Option>\n          <Option value={3000}>3 seconds</Option>\n        </Select>\n        <br />\n        <br />\n        <Slider\n          autoplay={this.state.autoplay}\n          autoplaySpeed={this.state.autoplaySpeed}\n        >\n          <div>\n            <h3 className=\"h3\">1</h3>\n          </div>\n          <div>\n            <h3 className=\"h3\">2</h3>\n          </div>\n          <div>\n            <h3 className=\"h3\">3</h3>\n          </div>\n          <div>\n            <h3 className=\"h3\">4</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<SliderWrapper />, mountNode);\n\n","css":".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n","body":"\n用户可以包装 Slider 组件，以便进行外部控制。例如通过包装组件实现外部对 Slider 组件 `autoplay` 和 `autoplaySpeed` 值的控制。\n\n"},{"title":"不同的图片宽度","order":"11","jsx":"import { Slider } from \"@icedesign/base\";\n\nconst settings = {\n  className: \"custom-slide variable-width\",\n  arrowPos: \"outer\",\n  dots: true,\n  infinite: true,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  variableWidth: true\n};\n\nReactDOM.render(\n  <Slider {...settings}>\n    <div style={{ width: 100 }}>\n      <p>100</p>\n    </div>\n    <div style={{ width: 200 }}>\n      <p>200</p>\n    </div>\n    <div style={{ width: 75 }}>\n      <p>75</p>\n    </div>\n    <div style={{ width: 300 }}>\n      <p>300</p>\n    </div>\n    <div style={{ width: 225 }}>\n      <p>225</p>\n    </div>\n    <div style={{ width: 175 }}>\n      <p>175</p>\n    </div>\n  </Slider>,\n  mountNode\n);\n\n","css":".variable-width .next-slick-slide p {\n  background: #4F74B3;;\n  height: 100px;\n  color: #fff;\n  margin: 5px;\n  line-height: 100px;\n  text-align: center;\n}\n","body":"\n通过设置 `variableWidth` 为 `true`，您可以在 Slider 中放置不同宽度的图片。\nSlider 在默认情况下会认为所有的子元素是等宽的。\n\n"}]},{"name":"Step","category":"Components","title":"步骤","type":"展示","importStatement":"import { Step } from '@icedesign/base';","body":"\n\n## Guide\n\n可以通过 `animation` 属性关闭步骤条的动画，使 Step 变为纯展示型。\n\n","propsSchema":{"name":"Step","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式的品牌前缀"},"current":{"type":{"name":"number"},"required":false,"description":"当前步骤","defaultValue":{"value":"0","computed":false},"docblock":"当前步骤"},"direction":{"type":{"name":"enum","value":[{"value":"'horizontal'","computed":false},{"value":"'vertical'","computed":false}]},"required":false,"description":"展示方向","defaultValue":{"value":"'horizontal'","computed":false},"docblock":"展示方向"},"type":{"type":{"name":"enum","value":[{"value":"'circle'","computed":false},{"value":"'arrow'","computed":false},{"value":"'dot'","computed":false}]},"required":false,"description":"类型","defaultValue":{"value":"'circle'","computed":false},"docblock":"类型"},"readOnly":{"type":{"name":"bool"},"required":false,"description":"是否只读模式","docblock":"是否只读模式"},"animation":{"type":{"name":"bool"},"required":false,"description":"是否开启动效","defaultValue":{"value":"true","computed":false},"docblock":"是否开启动效"},"className":{"type":{"name":"string"},"required":false,"description":"自定义样式名","docblock":"自定义样式名"}},"methods":[],"subComponents":[{"name":"Item","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"组件的样式品牌前缀","docblock":"组件的样式品牌前缀"},"status":{"type":{"name":"enum","value":[{"value":"'wait'","computed":false},{"value":"'process'","computed":false},{"value":"'finish'","computed":false}]},"required":false,"description":"步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`","docblock":"步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`"},"title":{"type":{"name":"node"},"required":false,"description":"标题","docblock":"标题"},"icon":{"type":{"name":"string"},"required":false,"description":"图标","docblock":"图标"},"content":{"type":{"name":"node"},"required":false,"description":"内容，用于垂直状态下的内容填充","docblock":"内容，用于垂直状态下的内容填充"},"itemRender":{"type":{"name":"func"},"required":false,"description":"StepItem 的自定义渲染","docblock":"StepItem 的自定义渲染\n@param {Number} index   节点索引\n@param {String} status  节点状态\n@returns {Node} 节点的渲染结果","params":[{"name":"index","description":"节点索引","type":{"name":"Number"}},{"name":"status","description":"节点状态","type":{"name":"String"}}],"returns":{"description":"节点的渲染结果","type":{"name":"Node"}}},"percent":{"type":{"name":"number"},"required":false,"description":"百分比","docblock":"百分比"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","docblock":"是否禁用"},"onClick":{"type":{"name":"func"},"required":false,"description":"点击步骤时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击步骤时的回调\n@param {Number} index 节点索引","params":[{"name":"index","description":"节点索引","type":{"name":"Number"}}],"returns":null},"className":{"type":{"name":"string"},"required":false,"description":"自定义样式","docblock":"自定义样式"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\ncurrent | 当前步骤 | Number | 0\ndirection | 展示方向<br><br>**可选值**:<br>'horizontal', 'vertical' | Enum | 'horizontal'\ntype | 类型<br><br>**可选值**:<br>'circle', 'arrow', 'dot' | Enum | 'circle'\nreadOnly | 是否只读模式 | Boolean | -\nanimation | 是否开启动效 | Boolean | true\nclassName | 自定义样式名 | String | -\n","methodREADME":[],"subComponentsREADME":[{"name":"Item","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 组件的样式品牌前缀 | String | -\nstatus | 步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`<br><br>**可选值**:<br>'wait', 'process', 'finish' | Enum | -\ntitle | 标题 | ReactNode | -\nicon | 图标 | String | -\ncontent | 内容，用于垂直状态下的内容填充 | ReactNode | -\nitemRender | StepItem 的自定义渲染<br><br>**签名**:<br>Function(index: Number, status: String) => Node<br>**参数**:<br>*index*: {Number} 节点索引<br>*status*: {String} 节点状态<br>**返回值**:<br>{Node} 节点的渲染结果<br> | Function | -\npercent | 百分比 | Number | -\ndisabled | 是否禁用 | Boolean | -\nonClick | 点击步骤时的回调<br><br>**签名**:<br>Function(index: Number) => void<br>**参数**:<br>*index*: {Number} 节点索引 | Function | () =&gt; {}\nclassName | 自定义样式 | String | -\n","methodREADME":[]}],"demos":[{"title":"基本","order":"0","jsx":"import { Step } from \"@icedesign/base\";\n\nconst steps = [\"打开冰箱门\", \"把大象放进冰箱\", \"关上冰箱门\"].map(\n  (item, index) => <Step.Item key={index} title={item} />\n);\n\nReactDOM.render(\n  <div>\n    <h3>箭头型</h3>\n    <Step current={1} type=\"arrow\">\n      {steps}\n    </Step>\n\n    <h3>圆型</h3>\n    <Step current={1} type=\"circle\">\n      {steps}\n    </Step>\n\n    <h3>点型</h3>\n    <Step current={1} type=\"dot\">\n      {steps}\n    </Step>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n在最简单的情况下，Step 有三种类型，可以通过 `type` 属性进行切换。\n\n"},{"title":"受控模式","order":"6","jsx":"import { Step, Button, Select } from \"@icedesign/base\";\n\nconst { Item: StepItem } = Step;\nconst { Group: ButtonGroup } = Button;\n\nclass Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentStep: 3,\n      stepType: \"circle\",\n      stepAnimation: true\n    };\n\n    this.onClick = this.onClick.bind(this);\n  }\n  next() {\n    const s = this.state.currentStep + 1;\n\n    this.setState({\n      currentStep: s > 6 ? 6 : s\n    });\n  }\n  prev() {\n    const s = this.state.currentStep - 1;\n\n    this.setState({\n      currentStep: s < 0 ? 0 : s\n    });\n  }\n  onClick(currentStep) {\n    console.log(currentStep);\n\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n  onStepTypeChange(value) {\n    this.setState({ stepType: value });\n  }\n  onStepAnimation(value) {\n    this.setState({ stepAnimation: value });\n  }\n  render() {\n    const { currentStep } = this.state;\n\n    return (\n      <div>\n        <div className=\"custom-step-option\">\n          <Select\n            placeholder=\"选择展示类型\"\n            onChange={this.onStepTypeChange.bind(this)}\n            className=\"custom-select\"\n          >\n            {[\"circle\", \"arrow\", \"dot\"].map(item => (\n              <Select.Option value={item} key={item}>\n                {item}\n              </Select.Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"是否开启动效\"\n            onChange={this.onStepAnimation.bind(this)}\n            className=\"custom-select\"\n          >\n            {[true, false].map((item, index) => (\n              <Select.Option value={item} key={index}>\n                {item ? \"开启动效\" : \"关闭动效\"}\n              </Select.Option>\n            ))}\n          </Select>\n        </div>\n\n        <Step\n          current={currentStep}\n          type={this.state.stepType}\n          animation={this.state.stepAnimation}\n        >\n          <StepItem title=\"步骤1\" onClick={this.onClick} />\n          <StepItem title=\"步骤2\" onClick={this.onClick} />\n          <StepItem title=\"步骤3\" onClick={this.onClick} />\n          <StepItem title=\"步骤4\" onClick={this.onClick} />\n          <StepItem title=\"步骤5\" onClick={this.onClick} />\n          <StepItem title=\"步骤6\" onClick={this.onClick} />\n        </Step>\n        <br />\n        <br />\n        <ButtonGroup>\n          <Button\n            onClick={this.prev.bind(this)}\n            type=\"primary\"\n            disabled={currentStep === 0}\n          >\n            上一步\n          </Button>\n          <Button\n            onClick={this.next.bind(this)}\n            type=\"primary\"\n            disabled={currentStep === 6}\n          >\n            下一步\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Component />, mountNode);\n\n","css":".custom-step-option {\n    margin-bottom: 20px;\n}\n\n.custom-select {\n    margin-right: 20px;\n}\n","body":"\n默认情况下，Step 定义为展示型组件，上层组件可以通过修改传入的 current 属性值来修改当前的步骤，同时可以设置每个节点的 click 事件，来自定义回调。\n\n"},{"title":"Step.Item 自定义渲染","order":"4","jsx":"import { Step, Icon } from \"@icedesign/base\";\n\nconst steps = [\"one\", \"two\", \"three\", \"four\"];\n\nfunction itemRender(index, status) {\n  return index + 1;\n}\n\nfunction itemRender2(index, status) {\n  return status === \"finish\" ? <Icon type=\"good\" /> : index + 1;\n}\n\nReactDOM.render(\n  <div className=\"fusion-demo\">\n    <div className=\"fusion-demo-item\">\n      <Step current={2} animation={false}>\n        {steps.map(item => (\n          <Step.Item key={item} title={item} itemRender={itemRender} />\n        ))}\n      </Step>\n    </div>\n\n    <div className=\"fusion-demo-item\">\n      <Step current={2} animation={false}>\n        {steps.map(item => (\n          <Step.Item key={item} title={item} itemRender={itemRender2} />\n        ))}\n      </Step>\n    </div>\n  </div>,\n  mountNode\n);\n\n","css":".fusion-demo-item {\n    margin: 15px 0;\n}\n","body":"\n用户可以通过传递 `itemRender` 属性进行自定义的渲染。\n`Step.Item` 默认有三种状态，分别是 `wait`, `process`, `finish`。\n\n"},{"title":"垂直模式","order":"1","jsx":"import { Step, Icon } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>把大象装进冰箱的正确姿势</h3>\n    <Step current={1} direction=\"vertical\" animation={false}>\n      <Step.Item title=\"步骤1\" content=\"打开冰箱门\" />\n      <Step.Item title=\"步骤2\" content=\"把大象塞进去\" />\n      <Step.Item title=\"步骤3\" content=\"关上冰箱门\" />\n    </Step>\n\n    <h3>把大象装进冰箱的正确姿势</h3>\n    <Step current={1} direction=\"vertical\" type=\"dot\" animation={false}>\n      <Step.Item title=\"步骤1\" content=\"打开冰箱门\" />\n      <Step.Item title=\"步骤2\" content=\"把大象塞进去\" />\n      <Step.Item title=\"步骤3\" content=\"关上冰箱门\" />\n    </Step>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n箭头形不支持垂直模式。\n对于点型和圆圈型的 Step 组件而言，可以通过设置 `direction` 属性设置其展示方向为垂直。\n\n"},{"title":"禁用步骤项","order":"3","jsx":"import { Step } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Step current={1} type=\"arrow\">\n      <Step.Item title=\"步骤1\" />\n      <Step.Item title=\"步骤2\" />\n      <Step.Item title=\"步骤3\" disabled />\n      <Step.Item title=\"步骤4\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} type=\"dot\">\n      <Step.Item title=\"步骤1\" />\n      <Step.Item title=\"步骤2\" />\n      <Step.Item title=\"步骤3\" disabled />\n      <Step.Item title=\"步骤4\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} type=\"circle\">\n      <Step.Item title=\"步骤1\" />\n      <Step.Item title=\"步骤2\" />\n      <Step.Item title=\"步骤3\" disabled />\n      <Step.Item title=\"步骤4\" />\n    </Step>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过在 `Step.Item` 上设置 `disabled` 属性来禁用某个步骤。\n\n"},{"title":"图标和百分比","order":"2","jsx":"import { Step, Icon } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Step current={1} animation={false} type=\"dot\">\n      <Step.Item title=\"步骤1\" content=\"打开冰箱门\" icon=\"box\" />\n      <Step.Item title=\"步骤2\" content=\"把大象塞进去\" percent={40} />\n      <Step.Item title=\"步骤3\" content=\"关闭冰箱门\" icon=\"smile\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} animation={false}>\n      <Step.Item title=\"步骤1\" content=\"打开冰箱门\" icon=\"box\" />\n      <Step.Item title=\"步骤2\" content=\"把大象塞进去\" percent={40} />\n      <Step.Item title=\"步骤3\" content=\"关闭冰箱门\" icon=\"smile\" />\n    </Step>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n可以在点型和圆形步骤条中使用图标，圆形步骤条还只是使用百分比。\n\n"},{"title":"只读模式","order":"5","jsx":"import { Step, Button } from \"@icedesign/base\";\n\nconst { Item: StepItem } = Step;\nconst { Group: ButtonGroup } = Button;\n\nclass Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentStep: 3\n    };\n  }\n  next() {\n    const s = this.state.currentStep + 1;\n\n    this.setState({\n      currentStep: s > 6 ? 6 : s\n    });\n  }\n  prev() {\n    const s = this.state.currentStep - 1;\n\n    this.setState({\n      currentStep: s < 0 ? 0 : s\n    });\n  }\n  onClick(currentStep) {\n    console.log(currentStep);\n\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n  render() {\n    const { currentStep } = this.state;\n\n    return (\n      <div>\n        <Step current={currentStep} readOnly>\n          <StepItem title=\"步骤1\" onClick={this.onClick.bind(this)} />\n          <StepItem title=\"步骤2\" onClick={this.onClick.bind(this)} />\n          <StepItem title=\"步骤3\" onClick={this.onClick.bind(this)} />\n          <StepItem title=\"步骤4\" onClick={this.onClick.bind(this)} />\n          <StepItem title=\"步骤5\" onClick={this.onClick.bind(this)} />\n          <StepItem title=\"步骤6\" onClick={this.onClick.bind(this)} />\n        </Step>\n        <br />\n        <br />\n        <ButtonGroup>\n          <Button\n            onClick={this.prev.bind(this)}\n            type=\"primary\"\n            disabled={currentStep === 0}\n          >\n            上一步\n          </Button>\n          <Button\n            onClick={this.next.bind(this)}\n            type=\"primary\"\n            disabled={currentStep === 6}\n          >\n            下一步\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Component />, mountNode);\n\n","css":"","body":"\n只读模式，不可触发回调。\n\n"}]},{"name":"Switch","category":"Components","title":"开关组件","type":"表单","importStatement":"import { Switch } from '@icedesign/base';","body":"\n\n## 开发指南\n\n开关组件\n\n### 何时使用\n\n开/关切换器切换单个设置选项的状态。开关控制器中的选项，以及它所在的状态，应该用伴随的内联标签显示清楚。开关选择器具有和单选按钮一样的视觉属性。使用文本“开”和“关”滑动切换已经过时了。使用这里显示的开关选择器代替。\n\n### 使用注意\n\n-   对于checkChildren和unCheckedChildren的自定义要考虑文字大小，因为switch的宽度有限，默认一个汉字大小。如果设置成多个字或者英文要注意宽度控制。\n-   size 等于small时不支持文案和Icon设置\n\n","propsSchema":{"name":"Switch","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内敛样式","docblock":"自定义内敛样式","properties":[]},"checkedChildren":{"type":{"name":"any"},"required":false,"description":"打开时的内容","docblock":"打开时的内容"},"unCheckedChildren":{"type":{"name":"any"},"required":false,"description":"关闭时的内容","docblock":"关闭时的内容"},"onChange":{"type":{"name":"func"},"required":false,"description":"开关状态改变是触发此事件","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"开关状态改变是触发此事件\n@param {Boolean} checked 是否为打开状态\n@param {Event} e DOM事件对象","params":[{"name":"checked","description":"是否为打开状态","type":{"name":"Boolean"}},{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null},"checked":{"type":{"name":"bool"},"required":false,"description":"开关当前的值(针对受控组件)","docblock":"开关当前的值(针对受控组件)"},"defaultChecked":{"type":{"name":"bool"},"required":false,"description":"开关默认值 (针对非受控组件)","docblock":"开关默认值 (针对非受控组件)"},"disabled":{"type":{"name":"bool"},"required":false,"description":"表示开关被禁用","defaultValue":{"value":"false","computed":false},"docblock":"表示开关被禁用"},"size":{"type":{"name":"enum","value":[{"value":"'medium'","computed":false,"description":"正常大小"},{"value":"'small'","computed":false,"description":"缩小版大小"}]},"required":false,"description":"switch的尺寸","defaultValue":{"value":"'medium'","computed":false},"docblock":"switch的尺寸\n@enumdesc 正常大小, 缩小版大小","value":[{"value":"'medium'","computed":false,"description":"正常大小"},{"value":"'small'","computed":false,"description":"缩小版大小"}]},"onClick":{"type":{"name":"func"},"required":false,"description":"鼠标点击事件","docblock":"鼠标点击事件\n@param {Event} e DOM事件对象","params":[{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null},"onKeyDown":{"type":{"name":"func"},"required":false,"description":"键盘按键事件","docblock":"键盘按键事件\n@param {Event} e DOM事件对象","params":[{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\ncheckedChildren | 打开时的内容 | any | -\nunCheckedChildren | 关闭时的内容 | any | -\nonChange | 开关状态改变是触发此事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>*checked*: {Boolean} 是否为打开状态<br>*e*: {Event} DOM事件对象 | Function | () =&gt; { }\nchecked | 开关当前的值(针对受控组件) | Boolean | -\ndefaultChecked | 开关默认值 (针对非受控组件) | Boolean | -\ndisabled | 表示开关被禁用 | Boolean | false\nsize | switch的尺寸<br><br>**可选值**:<br>'medium'(正常大小)<br>'small'(缩小版大小) | Enum | 'medium'\nonClick | 鼠标点击事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>*e*: {Event} DOM事件对象 | Function | -\nonKeyDown | 键盘按键事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>*e*: {Event} DOM事件对象 | Function | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"简单","order":"0","jsx":"import { Switch } from \"@icedesign/base\";\n\nfunction onChange(checked) {\n  console.log(\"switch to \" + checked);\n}\n\nReactDOM.render(\n  <div>\n    <Switch checkedChildren=\"开\" onChange={onChange} unCheckedChildren=\"关\" />\n    <br />\n    <Switch defaultChecked={false} onChange={onChange} size=\"small\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n最简单的用法,size可设置大小。\n\n"},{"title":"受控开关","order":"2","jsx":"import { Switch } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: false\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"line\">\n          开关的值: {this.state.checked ? \"true\" : \"false\"}\n        </div>\n        <div className=\"line\">\n          <Switch checked={this.state.checked} onChange={this.onChange} />\n          <Switch\n            checked={this.state.checked}\n            onChange={this.onChange}\n            disabled\n          />\n        </div>\n      </div>\n    );\n  }\n\n  onChange(checked) {\n    this.setState({ checked });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".line {\n  margin-bottom: 10px;\n}\n.next-switch {\n  margin-right: 20px;\n}\n","body":"\n对于受控开关, 每一次 React 数据渲染时, 都会使用传入的值来更新开关, 开关本身是不能更新自己的状态的.\n受控开关, 是指组件的值由上层组件决定, 如果开关定义了 `value` 属性, 就表示此开关是受控开关.\n\n"},{"title":"不可用","order":"2","jsx":"import { Button, Icon, Switch } from \"@icedesign/base\";\n\nclass Test extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: true\n    };\n  }\n\n  toggle() {\n    this.setState(\n      Object.assign({}, this.state, {\n        disabled: !this.state.disabled\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <Switch\n          checkedChildren={<Icon type=\"select\" size=\"small\" />}\n          unCheckedChildren={<Icon type=\"close\" size=\"small\" />}\n          disabled={this.state.disabled}\n        />\n        <Switch\n          checkedChildren=\"开\"\n          unCheckedChildren=\"关\"\n          disabled={this.state.disabled}\n        />\n        <br />\n        <br />\n        <Button type=\"primary\" onClick={this.toggle.bind(this)}>\n          Toggle disabled\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Test />, mountNode);\n\n","css":"","body":"\nSwitch 失效状态。\n\n"}]},{"name":"Tab","category":"Components","title":"选项卡","type":"导航","importStatement":"import { Tab } from '@icedesign/base';","body":"\n\n## Guide\n\nTAB 让用户可以在不同子任务、视图、模式之间切换，它具有全局导航的作用，\n是全局功能的主要展示和切换区域，一个TAB标记一个核心功能，TAB之间可以快速点击切换。\n该窗口包含2个以上的选项卡，所有选项卡可以排列在一行中，即使该用户界面被本地化后也是如此。\n提供平级的区域将大块内容进行收纳和展现，保持界面整洁。\n\n### 何时使用\n\nFusion 提供了三级选项卡，分别用于不同的场景。\n\n-   普通选项卡，引领整页面的内容，起导航的作用。\n-   文本型选项卡。\n-   包裹型选项卡，在页面结构中，只是局部展示，需要和其他内容结合出现。\n-   胶囊型选项卡。\n\n### 关于动效\n\n如果您不想开启动效，可以通过设置 `animation` 属性值为 `false` 来关闭。\n\n### 注意事项\n\n对于 `0.x` 版本的 Tab 组件而言，在实现上使用了 `key` 作为内部标识字段，如果用户使用了 React 官方提供的类似于 `React.Children.toArray` 等子元素遍历方法时，会导致原始的 `key` 值被修改，这一行为会导致部分逻辑出错（判断当前激活的 TabPane）。为了保证兼容性，我们将会在 `1.x` 版本进行变更。\n如果你需要用到 `React.Children.toArray` 方法，可以使用 `@alife/next-util` 中提供的 `children.toArray` 方法。\n\n","propsSchema":{"name":"Tab","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"activeKey":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"被激活的选项卡的 key（受控）","docblock":"被激活的选项卡的 key（受控）"},"defaultActiveKey":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"初始化时被激活的选项卡的 key（非受控）","docblock":"初始化时被激活的选项卡的 key（非受控）"},"type":{"type":{"name":"enum","value":[{"value":"'bar'","computed":false},{"value":"'wrapped'","computed":false},{"value":"'text'","computed":false},{"value":"'capsule'","computed":false}]},"required":false,"description":"类型","defaultValue":{"value":"'bar'","computed":false},"docblock":"类型"},"animation":{"type":{"name":"bool"},"required":false,"description":"是否开启动效","defaultValue":{"value":"true","computed":false},"docblock":"是否开启动效"},"resDirection":{"type":{"name":"enum","value":[{"value":"'horizontal'","computed":false},{"value":"'vertical'","computed":false}]},"required":false,"description":"多余项的展现方向","defaultValue":{"value":"'horizontal'","computed":false},"docblock":"多余项的展现方向"},"tabPosition":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'bottom'","computed":false},{"value":"'left'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"导航选项卡的位置，只适用于包裹型（wrapped）选项卡","defaultValue":{"value":"'top'","computed":false},"docblock":"导航选项卡的位置，只适用于包裹型（wrapped）选项卡"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false}]},"required":false,"description":"尺寸","defaultValue":{"value":"'medium'","computed":false},"docblock":"尺寸"},"closeable":{"type":{"name":"bool"},"required":false,"description":"是否可关闭选项卡，只支持 `bar` 和 `wrapped` 两种类型","defaultValue":{"value":"false","computed":false},"docblock":"是否可关闭选项卡，只支持 `bar` 和 `wrapped` 两种类型"},"triggerType":{"type":{"name":"enum","value":[{"value":"'hover'","computed":false},{"value":"'click'","computed":false}]},"required":false,"description":"触发选项卡的方式","defaultValue":{"value":"'click'","computed":false},"docblock":"触发选项卡的方式"},"lazyLoad":{"type":{"name":"bool"},"required":false,"description":"是否提前渲染好所有 TabPane 的内容","defaultValue":{"value":"true","computed":false},"docblock":"是否提前渲染好所有 TabPane 的内容"},"navStyle":{"type":{"name":"object"},"required":false,"description":"导航条的附加样式","defaultValue":{"value":"{}","computed":false},"docblock":"导航条的附加样式","properties":[]},"contentStyle":{"type":{"name":"object"},"required":false,"description":"内容区的附加样式","defaultValue":{"value":"{}","computed":false},"docblock":"内容区的附加样式","properties":[]},"tabBarExtraContent":{"type":{"name":"node"},"required":false,"description":"导航栏附加内容","defaultValue":{"value":"null","computed":false},"docblock":"导航栏附加内容"},"onChange":{"type":{"name":"func"},"required":false,"description":"选项卡发生切换时的事件回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"选项卡发生切换时的事件回调\n@param {String} key 改变后的 key","params":[{"name":"key","description":"改变后的 key","type":{"name":"String"}}],"returns":null},"onClose":{"type":{"name":"func"},"required":false,"description":"选项卡被关闭时的事件回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"选项卡被关闭时的事件回调\n@param {String} key   关闭的选项卡的 key\n@param {Object} event Event 对象","params":[{"name":"key","description":"关闭的选项卡的 key","type":{"name":"String"}},{"name":"event","description":"Event 对象","type":{"name":"Object"}}],"returns":null}},"methods":[],"subComponents":[{"name":"TabPane","props":{"tab":{"type":{"name":"any"},"required":false,"description":"选项卡标题","docblock":"选项卡标题"},"closeable":{"type":{"name":"bool"},"required":false,"description":"单个选项卡是否可关闭","defaultValue":{"value":"true","computed":false},"docblock":"单个选项卡是否可关闭"},"tabStyle":{"type":{"name":"object"},"required":false,"description":"单个选项卡的补充样式","docblock":"单个选项卡的补充样式","properties":[]},"tabClassName":{"type":{"name":"string"},"required":false,"description":"单个选项卡的附加样式类","docblock":"单个选项卡的附加样式类"},"onClick":{"type":{"name":"func"},"required":false,"description":"点击单个选项卡时触发的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击单个选项卡时触发的回调\n@param {String} key 选项卡的 key","params":[{"name":"key","description":"选项卡的 key","type":{"name":"String"}}],"returns":null},"onMouseEnter":{"type":{"name":"func"},"required":false,"description":"鼠标进入时触发的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"鼠标进入时触发的回调\n@param {String} key 选项卡的 key","params":[{"name":"key","description":"选项卡的 key","type":{"name":"String"}}],"returns":null},"onMouseLeave":{"type":{"name":"func"},"required":false,"description":"鼠标离开时出发的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"鼠标离开时出发的回调\n@param {String} key 选项卡的 key","params":[{"name":"key","description":"选项卡的 key","type":{"name":"String"}}],"returns":null}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nactiveKey | 被激活的选项卡的 key（受控） | Number/String | -\ndefaultActiveKey | 初始化时被激活的选项卡的 key（非受控） | Number/String | -\ntype | 类型<br><br>**可选值**:<br>'bar', 'wrapped', 'text', 'capsule' | Enum | 'bar'\nanimation | 是否开启动效 | Boolean | true\nresDirection | 多余项的展现方向<br><br>**可选值**:<br>'horizontal', 'vertical' | Enum | 'horizontal'\ntabPosition | 导航选项卡的位置，只适用于包裹型（wrapped）选项卡<br><br>**可选值**:<br>'top', 'bottom', 'left', 'right' | Enum | 'top'\nsize | 尺寸<br><br>**可选值**:<br>'small', 'medium' | Enum | 'medium'\ncloseable | 是否可关闭选项卡，只支持 `bar` 和 `wrapped` 两种类型 | Boolean | false\ntriggerType | 触发选项卡的方式<br><br>**可选值**:<br>'hover', 'click' | Enum | 'click'\nlazyLoad | 是否提前渲染好所有 TabPane 的内容 | Boolean | true\nnavStyle | 导航条的附加样式 | Object | {}\ncontentStyle | 内容区的附加样式 | Object | {}\ntabBarExtraContent | 导航栏附加内容 | ReactNode | null\nonChange | 选项卡发生切换时的事件回调<br><br>**签名**:<br>Function(key: String) => void<br>**参数**:<br>*key*: {String} 改变后的 key | Function | () =&gt; {}\nonClose | 选项卡被关闭时的事件回调<br><br>**签名**:<br>Function(key: String, event: Object) => void<br>**参数**:<br>*key*: {String} 关闭的选项卡的 key<br>*event*: {Object} Event 对象 | Function | () =&gt; {}\n","methodREADME":[],"subComponentsREADME":[{"name":"TabPane","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\ntab | 选项卡标题 | any | -\ncloseable | 单个选项卡是否可关闭 | Boolean | true\ntabStyle | 单个选项卡的补充样式 | Object | -\ntabClassName | 单个选项卡的附加样式类 | String | -\nonClick | 点击单个选项卡时触发的回调<br><br>**签名**:<br>Function(key: String) => void<br>**参数**:<br>*key*: {String} 选项卡的 key | Function | () =&gt; {}\nonMouseEnter | 鼠标进入时触发的回调<br><br>**签名**:<br>Function(key: String) => void<br>**参数**:<br>*key*: {String} 选项卡的 key | Function | () =&gt; {}\nonMouseLeave | 鼠标离开时出发的回调<br><br>**签名**:<br>Function(key: String) => void<br>**参数**:<br>*key*: {String} 选项卡的 key | Function | () =&gt; {}\n","methodREADME":[]}],"demos":[{"title":"简单用法","order":"0","jsx":"import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst tabs = [\n  { tab: \"首页\", key: \"home\", content: \"这里是首页内容\" },\n  { tab: \"文档\", key: \"doc\", content: \"这里是文档内容\" },\n  { tab: \"API\", key: \"api\", content: \"这里是 API 内容\" }\n];\n\nfunction handleChange(key) {\n  console.log(\"change\", key);\n}\n\nfunction handleClick(key) {\n  console.log(\"click\", key);\n}\n\nReactDOM.render(\n  <Tab onChange={handleChange}>\n    {tabs.map(item => (\n      <TabPane key={item.key} tab={item.tab} onClick={handleClick}>\n        {item.content}\n      </TabPane>\n    ))}\n  </Tab>,\n  mountNode\n);\n\n","css":"","body":"\n请务必给每个 TabPane 传入一个 `key` 值作为每个 TabPane 的唯一标识字段。\n创建一个基本的选项卡，其默认类型为`bar`，并默认选中第一项。\n\n"},{"title":"可关闭选项卡","order":"6","jsx":"import { Tab, Button, Icon } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst panes = [\n  { tab: \"邮件\", key: 1, closeable: false },\n  { tab: \"消息通知\", key: 2 },\n  { tab: \"设置\", key: 3 },\n  { tab: \"未读邮件\", key: 4 }\n];\n\nclass CloseableTab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      panes: panes,\n      activeKey: panes[0].key\n    };\n  }\n\n  /*eslint-disable eqeqeq */\n  remove(targetKey) {\n    let activeKey = this.state.activeKey;\n    let lastIndex;\n    this.state.panes.forEach((item, i) => {\n      if (item.key == targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = this.state.panes.filter(pane => pane.key != targetKey);\n    if (lastIndex >= 0 && activeKey == targetKey) {\n      activeKey = panes[lastIndex].key;\n    }\n    this.setState({ panes, activeKey });\n  }\n\n  onClose(targetKey) {\n    this.remove(targetKey);\n  }\n\n  onChange(activeKey) {\n    this.setState({ activeKey });\n  }\n\n  addTabpane() {\n    this.setState(prevState => {\n      const { panes } = prevState;\n      panes.push({ tab: \"new tab\", key: Math.random() });\n      return { panes };\n    });\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Button onClick={::this.addTabpane}>\n          <Icon type=\"add\" /> 新建选项卡\n        </Button>\n\n        <Tab\n          type=\"wrapped\"\n          activeKey={state.activeKey}\n          closeable\n          onChange={::this.onChange}\n          onClose={::this.onClose}\n          className=\"custom-tab\"\n        >\n          {state.panes.map(item => (\n            <TabPane tab={item.tab} key={item.key} closeable={item.closeable}>\n              {item.tab}的内容区域\n            </TabPane>\n          ))}\n        </Tab>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<CloseableTab />, mountNode);\n\n","css":".custom-tab {\n    margin-top: 14px;\n}\n","body":"\n此外用户还可以单独在单个 `TabPane` 上设置是否可关闭的属性。\n可关闭选项卡，可以通过控制 `closable` 属性设置选项卡是否可关闭。处于视觉上的考虑，目前该属性只支持包裹型选项卡（`wrapped`）和普通选项卡（`bar`）。\n\n"},{"title":"自定义样式","order":"9","jsx":"import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst panes = [\n  {\n    tab: \"未处理任务\",\n    key: 0\n  },\n  {\n    tab: \"已处理任务\",\n    key: 1\n  },\n  {\n    tab: \"未处理消息\",\n    key: 2\n  },\n  {\n    tab: \"已处理消息\",\n    key: 3\n  },\n  {\n    tab: \"过期消息\",\n    key: 4\n  }\n];\n\nconst detachedContentStyle = {\n  borderLeft: 0,\n  borderRight: 0,\n  borderBottom: 0\n};\n\nReactDOM.render(\n  <div className=\"fusion-demo\">\n    <div className=\"demo-item-title\">\n      通过 contentStyle 属性移除内容区默认边框\n    </div>\n    <Tab type=\"wrapped\" contentStyle={detachedContentStyle}>\n      {panes.map(pane => (\n        <TabPane tab={pane.tab} key={pane.key}>\n          {pane.tab}\n        </TabPane>\n      ))}\n    </Tab>\n\n    <div className=\"demo-item-title\">\n      搭配使用 contentStyle, navStyle, tabClassName, tabStyle 等自定义样式属性\n    </div>\n    <Tab\n      type=\"wrapped\"\n      contentStyle={{ padding: 0 }}\n      navStyle={{ background: \"#FFF0E6\" }}\n    >\n      {panes.map(pane => {\n        return (\n          <TabPane\n            tab={pane.tab}\n            key={pane.key}\n            className=\"custom-content\"\n            tabStyle={{ background: \"#FFF\" }}\n            tabClassName=\"custom-tabs-tab\"\n          >\n            {pane.tab}\n          </TabPane>\n        );\n      })}\n    </Tab>\n\n    <div className=\"demo-item-title\">利用 tabClassName 实现等宽导航</div>\n    <Tab type=\"capsule\">\n      {panes.map(pane => (\n        <TabPane tab={pane.tab} key={pane.key} tabClassName=\"justify-tabs-tab\">\n          {pane.tab}\n        </TabPane>\n      ))}\n    </Tab>\n  </div>,\n  mountNode\n);\n\n","css":".fusion-demo .demo-item-title {\n    font-size: 16px;\n    background: #eee;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n    text-align: center;\n}\n\n.custom-content {\n    color: #333;\n    padding: 15px;\n}\n\n.custom-tabs-tab {\n    margin-right: -1px !important;\n}\n\n.justify-tabs-tab {\n    width: 140px;\n    text-align: center;\n}\n","body":"\n此外，某些场合下，用户可能需要在某些特定的 `tab` 上添加样式，为此可以在 `TabPane` 上使用 `tabClassName` 和 `tabStyle` 来控制。\n如果需要定制导航条的样式，可以通过 `navStyle` 属性进行设置。\n如果需要定制内容区的样式，可以通过 `contentStyle` 属性进行设置。\nTab 提供了丰富的属性让用户自定义组件的默认样式。\n\n"},{"title":"自定义选项卡","order":"10","jsx":"import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst complexTab1 = (\n  <div className=\"custom-tab-wrapper\">\n    <p className=\"tab-title\">e-Checking</p>\n    <p className=\"tab-desc\">Transaction fee: US $15</p>\n  </div>\n);\n\nconst complexTab2 = (\n  <div className=\"custom-tab-wrapper\">\n    <p className=\"tab-title\">Bank Card</p>\n    <p className=\"tab-desc\">Transaction fee: US $26</p>\n  </div>\n);\n\nconst panes = [\n  {\n    tab: complexTab1,\n    key: 0\n  },\n  {\n    tab: complexTab2,\n    key: 1\n  }\n];\n\nfunction callback(key) {\n  console.log(key);\n}\n\nReactDOM.render(\n  <Tab onChange={callback} type=\"wrapped\">\n    {panes.map(pane => (\n      <TabPane tab={pane.tab} key={pane.key} tabStyle={{ height: \"60px\" }}>\n        {pane.tab}\n      </TabPane>\n    ))}\n  </Tab>,\n  mountNode\n);\n\n","css":".custom-tab-wrapper {\n    line-height: 16px;\n}\n\n.tab-title {\n    margin: 10px 0 0 0;\n    font-size: 16px;\n}\n.tab-desc {\n    margin: 10px 0 0 0;\n    font-size: 12px;\n}\n","body":"\n除了使用简单文本作为选项卡的标题，用户还可以传入自定义组件作为标题。\n\n"},{"title":"禁用","order":"8","jsx":"import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nReactDOM.render(\n  <Tab>\n    <TabPane tab=\"选项卡一\" key=\"1\">\n      选项卡一\n    </TabPane>\n    <TabPane tab=\"选项卡二\" disabled key=\"2\">\n      选项卡二\n    </TabPane>\n    <TabPane tab=\"选项卡三\" key=\"3\">\n      选项卡三\n    </TabPane>\n  </Tab>,\n  mountNode\n);\n\n","css":"","body":"\n可以通过 `disabled` 属性禁用某一个选型卡。\n\n"},{"title":"可编辑的 Tab","order":"12","jsx":"import { Tab, Input } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nclass EditableTabPane extends React.Component {\n  static propTypes = {\n    defaultTitle: React.PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabTitle: props.defaultTitle,\n      editable: false\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.defaultTitle !== this.state.tabTitle) {\n      this.setState({\n        tabTitle: nextProps.defaultTitle\n      });\n    }\n  }\n\n  onKeyDown(e) {\n    const { keyCode } = e;\n    // 由于 Tab 会监听键盘的 keyUp, keyDown, keyLeft, keyRight 四个按键用于支持键盘导航\n    // 如果上层需要使用到键盘事件，需要在这里停止事件冒泡\n    if (keyCode > 36 && keyCode < 41) {\n      e.stopPropagation();\n    }\n  }\n\n  onBlur(e) {\n    this.setState({\n      editable: false,\n      tabTitle: e.target.value\n    });\n  }\n\n  onDblClick() {\n    this.setState({\n      editable: true\n    });\n  }\n\n  render() {\n    const { tabTitle, editable } = this.state;\n    if (editable) {\n      return (\n        <Input\n          defaultValue={tabTitle}\n          onKeyDown={this.onKeyDown.bind(this)}\n          onBlur={this.onBlur.bind(this)}\n        />\n      );\n    }\n    return <span onDoubleClick={this.onDblClick.bind(this)}>{tabTitle}</span>;\n  }\n}\n\nReactDOM.render(\n  <Tab defaultActiveKey=\"1\">\n    <TabPane tab={<EditableTabPane defaultTitle=\"选项卡一\" />} key=\"1\">\n      选项卡一\n    </TabPane>\n    <TabPane tab=\"选项卡二\" key=\"2\">\n      选项卡二\n    </TabPane>\n  </Tab>,\n  mountNode\n);\n\n","css":"","body":"\n此时用户只要传入自定义组件给 TabPane 即可，Tab 可以将底层事件对象传递给用户的自定义组件。\nTab 允许开发者在上层进行自由的行为控制，例如用户可以基于 Tab 开发一个标题部分双击可编辑的 Tab ，\n\n"},{"title":"附加额外内容","order":"11","jsx":"import { Tab, Button } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nfunction handleChange(key) {\n  console.log(key);\n}\n\nfunction handleClick() {\n  console.log(\"hello world\");\n}\n\nconst extraContent = (\n  <Button type=\"primary\" onClick={handleClick}>\n    Hello world\n  </Button>\n);\n\nReactDOM.render(\n  <div className=\"fusion-demo\">\n    <div className=\"demo-item-title\">水平方向加 tabBarExtraContent</div>\n    <Tab\n      type=\"wrapped\"\n      onChange={handleChange}\n      tabBarExtraContent={extraContent}\n    >\n      <TabPane tab=\"选项卡一\" key=\"1\">\n        选项卡一内容\n      </TabPane>\n      <TabPane tab=\"选项卡二\" key=\"2\">\n        选项卡二内容\n      </TabPane>\n      <TabPane tab=\"选项卡三\" key=\"3\">\n        选项卡三内容\n      </TabPane>\n    </Tab>\n\n    <div className=\"demo-item-title\">垂直方向加 tabBarExtraContent</div>\n    <Tab\n      type=\"wrapped\"\n      tabPosition=\"left\"\n      onChange={handleChange}\n      tabBarExtraContent={extraContent}\n    >\n      <TabPane tab=\"选项卡一\" key=\"1\">\n        选项卡一内容\n      </TabPane>\n      <TabPane tab=\"选项卡二\" key=\"2\">\n        选项卡二内容\n      </TabPane>\n      <TabPane tab=\"选项卡三\" key=\"3\">\n        选项卡三内容\n      </TabPane>\n    </Tab>\n  </div>,\n  mountNode\n);\n\n","css":".fusion-demo .demo-item-title {\n    font-size: 16px;\n    background: #eee;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n    text-align: center;\n}\n","body":"\n可以通过设置 `tabBarExtraContent` 为 Tab 组件附加额外的内容，确保只在有限选项卡的情况下才使用附加内容。\n\n"},{"title":"关闭 Lazyload","order":"3","jsx":"import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst tabs = [\n  { tab: \"首页\", key: 0, content: \"这里是首页内容\" },\n  { tab: \"文档\", key: 1, content: \"这里是文档内容\" },\n  { tab: \"API\", key: 2, content: \"这里是 API 内容\" }\n];\n\nReactDOM.render(\n  <Tab lazyLoad={false}>\n    {tabs.map(item => (\n      <TabPane key={item.key} tab={item.tab}>\n        {item.content}\n      </TabPane>\n    ))}\n  </Tab>,\n  mountNode\n);\n\n","css":"","body":"\n如果您需要在某些时候提前渲染好所有的 Content 内容，可以使用在 Tab 上关闭 `lazyLoad` 属性。\n默认情况 Tab 不会提前渲染好所有的内容，而是根据 Tab 的激活情况依次渲染。\n\n"},{"title":"选项卡嵌套","order":"14","jsx":"import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nReactDOM.render(\n  <Tab onChange={callback} type=\"wrapped\">\n    <TabPane tab=\"选项卡一\" key=\"1\">\n      <Tab type=\"wrapped\">\n        <TabPane tab=\"1-1\" key=\"11\">\n          1-1\n        </TabPane>\n        <TabPane tab=\"1-2\" key=\"12\">\n          1-2\n        </TabPane>\n        <TabPane tab=\"1-3\" key=\"13\">\n          1-3\n        </TabPane>\n      </Tab>\n    </TabPane>\n    <TabPane tab=\"选项卡二\" key=\"2\">\n      <Tab type=\"bar\">\n        <TabPane tab=\"2-1\" key=\"21\">\n          2-1\n        </TabPane>\n        <TabPane tab=\"2-2\" key=\"22\">\n          2-2\n        </TabPane>\n        <TabPane tab=\"3-3\" key=\"23\">\n          2-3\n        </TabPane>\n      </Tab>\n    </TabPane>\n    <TabPane tab=\"选项卡三\" key=\"3\">\n      <Tab type=\"capsule\">\n        <TabPane tab=\"3-1\" key=\"31\">\n          3-1\n        </TabPane>\n        <TabPane tab=\"3-2\" key=\"32\">\n          3-2\n        </TabPane>\n        <TabPane tab=\"3-3\" key=\"33\">\n          3-3\n        </TabPane>\n      </Tab>\n    </TabPane>\n    <TabPane tab=\"选项卡三\" key=\"4\">\n      <Tab type=\"text\">\n        <TabPane tab=\"4-1\" key=\"41\">\n          4-1\n        </TabPane>\n        <TabPane tab=\"4-2\" key=\"42\">\n          4-2\n        </TabPane>\n        <TabPane tab=\"4-3\" key=\"43\">\n          4-3\n        </TabPane>\n      </Tab>\n    </TabPane>\n  </Tab>,\n  mountNode\n);\n\n","css":"","body":"\n可以将不同类型的选项卡进行嵌套\n\n"},{"title":"位置","order":"4","jsx":"import { Select, Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst contentStyle = {\n  background: \"#FFF\"\n};\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabPosition: \"bottom\"\n    };\n  }\n\n  changeTabPosition(value) {\n    this.setState({ tabPosition: value });\n  }\n\n  render() {\n    return (\n      <div>\n        <Select\n          value={this.state.tabPosition}\n          onChange={::this.changeTabPosition}\n          className=\"tab-select-demo\"\n        >\n          <div value=\"top\">top</div>\n          <div value=\"bottom\">bottom</div>\n          <div value=\"left\">left</div>\n          <div value=\"right\">right</div>\n        </Select>\n\n        <Tab\n          tabPosition={this.state.tabPosition}\n          type=\"wrapped\"\n          contentStyle={contentStyle}\n        >\n          <TabPane tab=\"选项卡一\" key=\"1\">\n            选项卡一内容\n          </TabPane>\n          <TabPane tab=\"选项卡二\" key=\"2\">\n            选项卡二内容\n          </TabPane>\n          <TabPane tab=\"选项卡三\" key=\"3\">\n            选项卡三内容\n          </TabPane>\n        </Tab>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".tab-select-demo {\n    margin-bottom: 20px;\n}\n","body":"\n内容区的高度将会被自动附加一个 `min-height` 值，该值为导航条的高度。\n需要注意的是，当 `tabPosition=\"left|right\"` 时，并且用户没有通过 `contentStyle` 属性自定义内容区的最小高度时，\n有四个位置，`tabPosition=\"left|right|top|bottom\"`。\n对于包裹型（`type` 值为 `wrapped`）选项卡，支持通过 `tabPosition` 来指定选项卡标签的位置。\n\n"},{"title":"尺寸","order":"2","jsx":"import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst tabs = [\n  { tab: \"首页\", key: \"home\", content: \"这里是首页内容\" },\n  { tab: \"文档\", key: \"doc\", content: \"这里是文档内容\" },\n  { tab: \"API\", key: \"api\", content: \"这里是 API 内容\" }\n];\n\nReactDOM.render(\n  <div>\n    <Tab size=\"small\">\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab}>\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n    <br />\n    <Tab size=\"small\" type=\"wrapped\">\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab}>\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n    <br />\n    <Tab size=\"small\" type=\"text\">\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab}>\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n    <br />\n    <Tab size=\"small\" type=\"capsule\">\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab}>\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n`small`尺寸的选项卡组件可以用在弹出框等较狭窄的容器内。\n组件尺寸，可以通过`size`属性设置，提供`medium`(默认)和`small`两种尺寸，\n\n"},{"title":"自适应方向","order":"5","jsx":"import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst tabs = [\n  { tab: \"选项卡一\", key: 1 },\n  { tab: \"选项卡二\", key: 2 },\n  { tab: \"选项卡三\", key: 3 },\n  { tab: \"选项卡四\", key: 4 },\n  { tab: \"选项卡五\", key: 5 },\n  { tab: \"选项卡六\", key: 6 },\n  { tab: \"选项卡七\", key: 7 },\n  { tab: \"选项卡八\", key: 8 },\n  { tab: \"选项卡九\", key: 9 }\n];\n\nfunction onClick(key) {\n  console.log(key);\n}\n\nReactDOM.render(\n  <div className=\"fusion-demo\" style={{ width: \"510px\" }}>\n    <div className=\"demo-item-title\">默认使用左右活动</div>\n    <Tab defaultActiveKey={1}>\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab} onClick={onClick}>\n          {item.tab}的内容。这里可以容纳更多内容。\n        </TabPane>\n      ))}\n    </Tab>\n\n    <div className=\"demo-item-title\">\n      resDirection = \"vertical\" 时使用下拉框容纳多余元素\n    </div>\n    <Tab defaultActiveKey={1} resDirection=\"vertical\">\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab} onClick={onClick}>\n          {item.tab}的内容。这里可以容纳更多内容。\n        </TabPane>\n      ))}\n    </Tab>\n  </div>,\n  mountNode\n);\n\n","css":".fusion-demo .demo-item-title {\n    font-size: 16px;\n    background: #eee;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n    text-align: center;\n}\n\n","body":"\n用户可以通过 `resDirection` 属性进行控制该行为。\n当容器无法容纳所有的选项卡标签时，Tab 组件支持选项卡左右滑动选择，或者下拉选择。\n\n"},{"title":"在 Grid 中使用 Tab","order":"13","jsx":"import { Tab, Grid } from \"@icedesign/base\";\n\nconst { TabPane } = Tab;\nconst { Row, Col } = Grid;\n\nconst tabs = (function(length) {\n  const arr = [];\n  for (let i = 1; i < length; i++) {\n    arr.push({ tab: `tab ${i}`, key: i, content: `tab ${i} 的内容` });\n  }\n  return arr;\n})(15);\n\nfunction handleChange(key) {\n  console.log(\"change\", key);\n}\n\nfunction handleClick(key) {\n  console.log(\"click\", key);\n}\n\nReactDOM.render(\n  <div className=\"custom-wrapper\">\n    <Row className=\"custom-row\">\n      <Col fixedSpan=\"12\" className=\"custom-col-sidebar\">\n        Sidebar\n      </Col>\n      <Col className=\"custom-col-content\">\n        <Tab onChange={handleChange}>\n          {tabs.map(item => (\n            <TabPane key={item.key} tab={item.tab} onClick={handleClick}>\n              {item.content}\n            </TabPane>\n          ))}\n        </Tab>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n","css":".custom-row {\n    border: 1px solid #ccc;\n}\n\n.custom-col-sidebar {\n    border-right: 1px solid #ccc;\n    height: 130px;\n    line-height: 130px;\n    text-align: center;\n}\n\n.custom-col-content {\n    overflow: hidden;\n}\n","body":"\n值得注意的是，当使用 Grid 组件进行外层的布局时，由于 Gird 默认使用的是 `flex` 进行布局。因此，如果 Tab 组件拥有过多的选项卡时，会导致内层元素撑起整个 `flex` 容器。此时，需要给容器添加自定义样式 `overflow: hidden`。\n\n"},{"title":"触发类型","order":"7","jsx":"import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst tabs = [\n  { tab: \"首页\", key: 0, content: \"这里是首页内容\" },\n  { tab: \"文档\", key: 1, content: \"这里是文档内容\" },\n  { tab: \"API\", key: 2, content: \"这里是 API 内容\" }\n];\n\nfunction onChange(key) {\n  console.log(\"change\", key);\n}\n\nfunction handleClick(key) {\n  console.log(\"click\", key);\n}\n\nfunction onMouseEnter(key, e) {\n  console.log(\"enter\", e.target, key);\n}\n\nfunction onMouseLeave(key, e) {\n  console.log(\"leave\", e.target, key);\n}\n\nReactDOM.render(\n  <div className=\"fusion-demo\">\n    <div className=\"demo-item-title\">triggerType = click</div>\n    <Tab triggerType=\"click\" onChange={onChange}>\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab} onClick={handleClick}>\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n    <div className=\"demo-item-title\">triggerType = hover</div>\n    <Tab triggerType=\"hover\" onChange={onChange}>\n      {tabs.map(item => (\n        <TabPane\n          key={item.key}\n          tab={item.tab}\n          onClick={handleClick}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n  </div>,\n  mountNode\n);\n\n","css":".fusion-demo .demo-item-title {\n    font-size: 16px;\n    background: #eee;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n    text-align: center;\n}\n\n","body":"\nTab 支持 `click` 切换和 `hover` 切换两种触发类型，默认为 `click` 触发，您可以使用 `triggerType` 属性修改默认的触发类型。\n\n"},{"title":"类型","order":"1","jsx":"import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nfunction onChange(key) {\n  console.log(key);\n}\n\nconst tabs = [\n  { tab: \"首页\", key: \"home\", content: \"这里是首页内容\" },\n  { tab: \"文档\", key: \"doc\", content: \"这里是文档内容\" },\n  { tab: \"API\", key: \"api\", content: \"这里是 API 内容\" },\n  { tab: \"仓库\", key: \"repo\", content: \"这里是仓库内容\" }\n];\n\nconst types = [\"bar\", \"wrapped\", \"text\", \"capsule\"];\n\nReactDOM.render(\n  <div className=\"fusion-demo\">\n    {types.map(type => (\n      <div key={type} className=\"fusion-demo-item\">\n        <Tab type={type} onChange={onChange}>\n          {tabs.map(tab => (\n            <TabPane tab={tab.tab} key={tab.key}>\n              {tab.content}\n            </TabPane>\n          ))}\n        </Tab>\n      </div>\n    ))}\n  </div>,\n  mountNode\n);\n\n","css":".fusion-demo-item {\n    margin: 14px 0;\n}\n","body":"\n`capsule` 胶囊型选项卡\n`text` 文本型选项卡<br />\n`wrapped`  包裹型选项卡<br />\n`bar` 普通选项卡（如不指定`type`属性，则默认使用`bar`型选项卡）<br />\n根据使用场景及触发控件的类型，可以通过 `type` 属性配置选项卡的类型，主要包括：\n\n"}]},{"name":"Table","category":"Components","title":"表格","type":"展示","importStatement":"import { Table } from '@icedesign/base';","body":"\n\n## Guide\n\nTable负责将数据呈现为高度可定制和具备可访问性的HTML表格，其核心功能为将结构化的数据使用表格的方式展现，\n然后可以使用各种参数来向表格中加入一些特性，比如排序，过滤，滚动，锁列等。\n\n### 基本使用\n\n基本的Table包含行和列，使用Table.Column来定义列的信息，使用传入的dataSource属性数据来创建行。\n\n下面的代码将会创建一行两列的数据表。\n\n```js\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(<Table dataSource={dataSource}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n</Table>, mountNode)\n```\n\n### 列配置\n\nTable.Column提供了非常多的配置属性用于自定义列，最常见的就是使用`cell`自定义单元格的渲染逻辑. 其他的配置选项可以参考下面的Table.Column的API\n\n下面的代码会让cell根据值渲染不同的视图\n\n```js\nconst dataSource = [{id: 1, time: '2016'}];\nconst renderTime = value => {\n    if (value == '2016') {\n        return '今年';\n    }\n    return value;\n}\nReactDOM.render(<Table dataSource={dataSource}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Time\" dataIndex=\"time\" cell={renderTime}/>\n</Table>, mountNode)\n```\n\n### 多表头\n\n使用Table.ColumnGroup包裹Table.Column来创建有多个表头的表格\n\n```js\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(<Table dataSource={dataSource}>\n    <Table.ColumnGroup>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    </Table.ColumnGroup>\n    <Table.ColumnGroup>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    </Table.ColumnGroup>\n</Table>, mountNode)\n```\n\n### 已知问题\n\n#### GroupList不支持在Hover状态和选中状态下显示背景色\n\n#### 无法完全支持在锁列的情况下合并单元格\n\n无法支持在锁列的区域和非锁列的区域内合并单元格\n\n#### 性能问题\n\n由于React的机制问题，在做与Table无关的更新的时候，可能会导致diff计算花费大量的时间，\n\n在你确认只有props和state才能影响Table渲染的情况下，可以设置`optimization`为`true`来开启, 原理就是通过\n\n`shouldComponentUpdate`的生命周期来对比props和state的变更，开启了该选项后可能导致下面的副作用。\n\n```js\nclass App extends React.Component{\n    state = {\n        extra: 'abc'\n    }\n    cellRender = (value) => {\n        return value + this.state.extra;\n    }\n    render(){\n        return <Table dataSource={[{id: 1}]}>\n            <Table.Column cell={this.cellRender} dataIndex=\"id\"/>\n        </Table>\n    }\n    componentDidMount(){\n        setTimeout(() => {\n            this.setState({\n                extra: 'bcd'\n            })\n        },1000)\n    }\n}\n```\n\n上面的代码在`componentDidMount`之后的`setState`虽然更新了`extra`, 但是并不会触发Table的重新渲染。\n\n解决方式如下:\n\n1.  将cellRender访问的state通过props的方式传入。\n\n    ```js\n    class App extends React.Component{\n        state = {\n            extra: 'abc'\n        }\n        cellRender = (value, index, record, context) => {\n            return value + context.props.extra;\n        }\n        render(){\n            return <Table dataSource={[{id: 1}]} extra={this.state.extra}>\n                <Table.Column cell={this.cellRender} dataIndex=\"id\"/>\n            </Table>\n        }\n        componentDidMount(){\n            setTimeout(() => {\n                this.setState({\n                    extra: 'bcd'\n                })\n            },1000)\n        }\n    }\n    ```\n\n2.  通过设置`optimization`为`false`来关闭Table的`shouldComponentUpdate`配置。\n\n    ```js\n    class App extends React.Component{\n        state = {\n            extra: 'abc'\n        }\n        cellRender = (value, index, record, context) => {\n            return value + this.state.extra;\n        }\n        render(){\n            return <Table dataSource={[{id: 1}]} optimization={false}>\n                <Table.Column cell={this.cellRender} dataIndex=\"id\"/>\n            </Table>\n        }\n        componentDidMount(){\n            setTimeout(() => {\n                this.setState({\n                    extra: 'bcd'\n                })\n            },1000)\n        }\n    }\n    ```\n\n","propsSchema":{"name":"Table","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"dataSource":{"type":{"name":"array"},"required":false,"description":"表格展示的数据源","defaultValue":{"value":"[]","computed":false},"docblock":"表格展示的数据源"},"rowSelection":{"type":{"name":"object"},"required":false,"description":"是否启用选择模式","defaultValue":{"value":"null","computed":false},"docblock":"是否启用选择模式\n@property {Function} getProps `Function(record)=>Object` 获取selection的默认属性\n@property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。\n@property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调\n@property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调\n@property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值\n@property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`","properties":[{"name":"getProps","description":"`Function(record)=>Object` 获取selection的默认属性","type":{"name":"Function"}},{"name":"onChange","description":"`Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。","type":{"name":"Function"}},{"name":"onSelect","description":"`Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调","type":{"name":"Function"}},{"name":"onSelectAll","description":"`Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调","type":{"name":"Function"}},{"name":"selectedRowKeys","description":"设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值","type":{"name":"Array"}},{"name":"mode","description":"选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`","type":{"name":"String"}}]},"onRowClick":{"type":{"name":"func"},"required":false,"description":"点击表格每一行触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击表格每一行触发的事件\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@param {Event} e DOM事件对象","params":[{"name":"record","description":"该行所对应的数据","type":{"name":"Object"}},{"name":"index","description":"该行所对应的序列","type":{"name":"Number"}},{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null},"onRowMouseEnter":{"type":{"name":"func"},"required":false,"description":"悬浮在表格每一行的时候触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"悬浮在表格每一行的时候触发的事件\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@param {Event} e DOM事件对象","params":[{"name":"record","description":"该行所对应的数据","type":{"name":"Object"}},{"name":"index","description":"该行所对应的序列","type":{"name":"Number"}},{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null},"onRowMouseLeave":{"type":{"name":"func"},"required":false,"description":"离开表格每一行的时候触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"离开表格每一行的时候触发的事件\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@param {Event} e DOM事件对象","params":[{"name":"record","description":"该行所对应的数据","type":{"name":"Object"}},{"name":"index","description":"该行所对应的序列","type":{"name":"Number"}},{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null},"onSort":{"type":{"name":"func"},"required":false,"description":"点击列排序触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击列排序触发的事件\n@param {String} dataIndex 指定的排序的字段\n@param {String} order 排序对应的顺序, 有`desc`和`asc`两种","params":[{"name":"dataIndex","description":"指定的排序的字段","type":{"name":"String"}},{"name":"order","description":"排序对应的顺序, 有`desc`和`asc`两种","type":{"name":"String"}}],"returns":null},"onFilter":{"type":{"name":"func"},"required":false,"description":"点击过滤确认按钮触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击过滤确认按钮触发的事件\n@param {Object} filterParams 过滤的字段信息","params":[{"name":"filterParams","description":"过滤的字段信息","type":{"name":"Object"}}],"returns":null},"getRowClassName":{"type":{"name":"func"},"required":false,"description":"设置每一行的样式名称","defaultValue":{"value":"() => {}","computed":false},"docblock":"设置每一行的样式名称\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@returns {String} 需要设置的样式名称","params":[{"name":"record","description":"该行所对应的数据","type":{"name":"Object"}},{"name":"index","description":"该行所对应的序列","type":{"name":"Number"}}],"returns":{"description":"需要设置的样式名称","type":{"name":"String"}}},"getRowProps":{"type":{"name":"func"},"required":false,"description":"设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。","defaultValue":{"value":"() => {}","computed":false},"docblock":"设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@returns {Object} 需要设置的行属性","params":[{"name":"record","description":"该行所对应的数据","type":{"name":"Object"}},{"name":"index","description":"该行所对应的序列","type":{"name":"Number"}}],"returns":{"description":"需要设置的行属性","type":{"name":"Object"}}},"getCellProps":{"type":{"name":"func"},"required":false,"description":"设置单元格的属性，通过该属性可以进行合并单元格","defaultValue":{"value":"() => {}","computed":false},"docblock":"设置单元格的属性，通过该属性可以进行合并单元格\n@param {Number} rowIndex 该列所对应的序列\n@param {Number} colIndex 该行所对应的序列\n@param {Object} record 该行对应的记录\n@returns {Object} 返回td元素的所支持的属性对象","params":[{"name":"rowIndex","description":"该列所对应的序列","type":{"name":"Number"}},{"name":"colIndex","description":"该行所对应的序列","type":{"name":"Number"}},{"name":"record","description":"该行对应的记录","type":{"name":"Object"}}],"returns":{"description":"返回td元素的所支持的属性对象","type":{"name":"Object"}}},"fixedHeader":{"type":{"name":"bool"},"required":false,"description":"表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条","defaultValue":{"value":"false","computed":false},"docblock":"表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条"},"maxBodyHeight":{"type":{"name":"number"},"required":false,"description":"最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条","defaultValue":{"value":"200","computed":false},"docblock":"最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条"},"hasBorder":{"type":{"name":"bool"},"required":false,"description":"表格是否具有边框","defaultValue":{"value":"true","computed":false},"docblock":"表格是否具有边框"},"hasHeader":{"type":{"name":"bool"},"required":false,"description":"表格是否具有头部","defaultValue":{"value":"true","computed":false},"docblock":"表格是否具有头部"},"isZebra":{"type":{"name":"bool"},"required":false,"description":"表格是否是斑马线","defaultValue":{"value":"false","computed":false},"docblock":"表格是否是斑马线"},"isLoading":{"type":{"name":"bool"},"required":false,"description":"表格是否在加载中","defaultValue":{"value":"false","computed":false},"docblock":"表格是否在加载中"},"primaryKey":{"type":{"name":"string"},"required":false,"description":"dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中","defaultValue":{"value":"'id'","computed":false},"docblock":"dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中"},"filterParams":{"type":{"name":"object"},"required":false,"description":"当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}\n示例:\n假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中\n`<Table filterParams={{id: {selectedKeys: ['one']}}}/>`","docblock":"当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}\n示例:\n假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中\n`<Table filterParams={{id: {selectedKeys: ['one']}}}/>`","properties":[]},"sort":{"type":{"name":"object"},"required":false,"description":"当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'}","docblock":"当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'}","properties":[]},"expandedRowRender":{"type":{"name":"func"},"required":false,"description":"额外渲染行的渲染函数","docblock":"额外渲染行的渲染函数\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@returns {Element}","params":[{"name":"record","description":"该行所对应的数据","type":{"name":"Object"}},{"name":"index","description":"该行所对应的序列","type":{"name":"Number"}}],"returns":{"description":null,"type":{"name":"Element"}}},"expandedRowIndent":{"type":{"name":"array"},"required":false,"description":"额外渲染行的缩进","defaultValue":{"value":"[1, 0]","computed":false},"docblock":"额外渲染行的缩进"},"expandedRowKeys":{"type":{"name":"array"},"required":false,"description":"默认情况下展开的额外渲染行, 传入此属性为受控状态","docblock":"默认情况下展开的额外渲染行, 传入此属性为受控状态"},"hasExpandedRowCtrl":{"type":{"name":"bool"},"required":false,"description":"是否显示点击展开额外渲染行的+号按钮","defaultValue":{"value":"true","computed":false},"docblock":"是否显示点击展开额外渲染行的+号按钮"},"getExpandedColProps":{"type":{"name":"func"},"required":false,"description":"设置额外渲染行的属性","defaultValue":{"value":"() => {}","computed":false},"docblock":"设置额外渲染行的属性","params":[],"returns":null},"onExpandedChange":{"type":{"name":"func"},"required":false,"description":"在额外渲染行展开或者收齐的时候触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"在额外渲染行展开或者收齐的时候触发的事件\n@param {Array} expandedRowKeys 展开的渲染行的key\n@param {String} currentRowKey 当前点击的渲染行的key\n@param {Boolean} expanded 当前点击是展开还是收起\n@param {Object} currentRecord 当前点击额外渲染行的记录","params":[{"name":"expandedRowKeys","description":"展开的渲染行的key","type":{"name":"Array"}},{"name":"currentRowKey","description":"当前点击的渲染行的key","type":{"name":"String"}},{"name":"expanded","description":"当前点击是展开还是收起","type":{"name":"Boolean"}},{"name":"currentRecord","description":"当前点击额外渲染行的记录","type":{"name":"Object"}}],"returns":null},"onExpandedRowClick":{"type":{"name":"func"},"required":false,"description":"点击额外渲染行触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击额外渲染行触发的事件\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@param {Event} e DOM事件对象","params":[{"name":"record","description":"该行所对应的数据","type":{"name":"Object"}},{"name":"index","description":"该行所对应的序列","type":{"name":"Number"}},{"name":"e","description":"DOM事件对象","type":{"name":"Event"}}],"returns":null},"indentSize":{"type":{"name":"number"},"required":false,"description":"在tree模式下的缩进尺寸， 仅在isTree为true时候有效","defaultValue":{"value":"12","computed":false},"docblock":"在tree模式下的缩进尺寸， 仅在isTree为true时候有效"},"openRowKeys":{"type":{"name":"array"},"required":false,"description":"默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作","docblock":"默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作"},"onRowOpen":{"type":{"name":"func"},"required":false,"description":"点击tree展开或者关闭的时候触发的事件","defaultValue":{"value":"() => {}","computed":false},"docblock":"点击tree展开或者关闭的时候触发的事件\n@param {Array} openRowKeys tree模式下展开的key\n@param {String} currentRowKey 当前点击行的key\n@param {Boolean} opened 当前点击是展开还是收起\n@param {Object} currentRecord 当前点击行的记录","params":[{"name":"openRowKeys","description":"tree模式下展开的key","type":{"name":"Array"}},{"name":"currentRowKey","description":"当前点击行的key","type":{"name":"String"}},{"name":"opened","description":"当前点击是展开还是收起","type":{"name":"Boolean"}},{"name":"currentRecord","description":"当前点击行的记录","type":{"name":"Object"}}],"returns":null},"isTree":{"type":{"name":"bool"},"required":false,"description":"开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table","defaultValue":{"value":"false","computed":false},"docblock":"开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table"},"optimization":{"type":{"name":"bool"},"required":false,"description":"是否开启性能优化，开启了性能优化后，会自动加入`shouldComponentUpdate`","defaultValue":{"value":"false","computed":false},"docblock":"是否开启性能优化，开启了性能优化后，会自动加入`shouldComponentUpdate`"},"locale":{"type":{"name":"object"},"required":false,"description":"自定义国际化文案对象","docblock":"自定义国际化文案对象\n@property {String} empty 没有数据时的提示文案\n@property {String} ok 过滤器中确认按钮文案\n@property {String} reset 过滤器中重置按钮文案","properties":[{"name":"empty","description":"没有数据时的提示文案","type":{"name":"String"}},{"name":"ok","description":"过滤器中确认按钮文案","type":{"name":"String"}},{"name":"reset","description":"过滤器中重置按钮文案","type":{"name":"String"}}]},"language":{"type":{"name":"enum","value":[{"value":"'en-us'","computed":false},{"value":"'zh-cn'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"自定义国际化语言","docblock":"自定义国际化语言"}},"methods":[],"subComponents":[{"name":"ColumnGroup","props":{"title":{"type":{"name":"union","value":[{"name":"element"},{"name":"node"},{"name":"func"}]},"required":false,"description":"表头显示的内容","defaultValue":{"value":"'column-group'","computed":false},"docblock":"表头显示的内容"}},"methods":[]},{"name":"Column","props":{"dataIndex":{"type":{"name":"string"},"required":false,"description":"指定列对应的字段，支持`a.b`形式的快速取值","docblock":"指定列对应的字段，支持`a.b`形式的快速取值"},"cell":{"type":{"name":"union","value":[{"name":"element"},{"name":"node"},{"name":"func"}]},"required":false,"description":"行渲染的逻辑\nFunction(value, index, record) => Element","defaultValue":{"value":"(value) => value","computed":false},"docblock":"行渲染的逻辑\nFunction(value, index, record) => Element"},"title":{"type":{"name":"union","value":[{"name":"element"},{"name":"node"},{"name":"func"}]},"required":false,"description":"表头显示的内容","defaultValue":{"value":"'column'","computed":false},"docblock":"表头显示的内容"},"sortable":{"type":{"name":"bool"},"required":false,"description":"是否支持排序","docblock":"是否支持排序"},"width":{"type":{"name":"node"},"required":false,"description":"在锁列的情况下需要配置的宽度","docblock":"在锁列的情况下需要配置的宽度"},"align":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'center'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"单元格的对齐方式","docblock":"单元格的对齐方式"},"filters":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"label":{"name":"string","required":false},"value":{"name":"union","value":[{"name":"node"},{"name":"string"}],"required":false}}}},"required":false,"description":"生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`","docblock":"生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`"},"filterMode":{"type":{"name":"enum","value":[{"value":"'single'","computed":false},{"value":"'multiple'","computed":false}]},"required":false,"description":"过滤的模式是单选还是多选","defaultValue":{"value":"'multiple'","computed":false},"docblock":"过滤的模式是单选还是多选"},"lock":{"type":{"name":"union","value":[{"name":"bool"},{"name":"string"}]},"required":false,"description":"是否支持锁列,可选值为`left`,`right`, `true`","docblock":"是否支持锁列,可选值为`left`,`right`, `true`"}},"methods":[]},{"name":"GroupHeader","props":{"cell":{"type":{"name":"union","value":[{"name":"element"},{"name":"node"},{"name":"func"}]},"required":false,"description":"行渲染的逻辑","defaultValue":{"value":"() => ''","computed":false},"docblock":"行渲染的逻辑"},"hasSelection":{"type":{"name":"bool"},"required":false,"description":"是否在GroupHeader上面渲染selection","defaultValue":{"value":"false","computed":false},"docblock":"是否在GroupHeader上面渲染selection"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ndataSource | 表格展示的数据源 | Array | []\nrowSelection | 是否启用选择模式<br><br>**属性**:<br>*getProps*: {Function} `Function(record)=>Object` 获取selection的默认属性<br>*onChange*: {Function} `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。<br>*onSelect*: {Function} `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调<br>*onSelectAll*: {Function} `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调<br>*selectedRowKeys*: {Array} 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值<br>*mode*: {String} 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple` | Object | null\nonRowClick | 点击表格每一行触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>*e*: {Event} DOM事件对象 | Function | () =&gt; {}\nonRowMouseEnter | 悬浮在表格每一行的时候触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>*e*: {Event} DOM事件对象 | Function | () =&gt; {}\nonRowMouseLeave | 离开表格每一行的时候触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>*e*: {Event} DOM事件对象 | Function | () =&gt; {}\nonSort | 点击列排序触发的事件<br><br>**签名**:<br>Function(dataIndex: String, order: String) => void<br>**参数**:<br>*dataIndex*: {String} 指定的排序的字段<br>*order*: {String} 排序对应的顺序, 有`desc`和`asc`两种 | Function | () =&gt; {}\nonFilter | 点击过滤确认按钮触发的事件<br><br>**签名**:<br>Function(filterParams: Object) => void<br>**参数**:<br>*filterParams*: {Object} 过滤的字段信息 | Function | () =&gt; {}\ngetRowClassName | 设置每一行的样式名称<br><br>**签名**:<br>Function(record: Object, index: Number) => String<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>**返回值**:<br>{String} 需要设置的样式名称<br> | Function | () =&gt; {}\ngetRowProps | 设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。<br><br>**签名**:<br>Function(record: Object, index: Number) => Object<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>**返回值**:<br>{Object} 需要设置的行属性<br> | Function | () =&gt; {}\ngetCellProps | 设置单元格的属性，通过该属性可以进行合并单元格<br><br>**签名**:<br>Function(rowIndex: Number, colIndex: Number, record: Object) => Object<br>**参数**:<br>*rowIndex*: {Number} 该列所对应的序列<br>*colIndex*: {Number} 该行所对应的序列<br>*record*: {Object} 该行对应的记录<br>**返回值**:<br>{Object} 返回td元素的所支持的属性对象<br> | Function | () =&gt; {}\nfixedHeader | 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条 | Boolean | false\nmaxBodyHeight | 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条 | Number | 200\nhasBorder | 表格是否具有边框 | Boolean | true\nhasHeader | 表格是否具有头部 | Boolean | true\nisZebra | 表格是否是斑马线 | Boolean | false\nisLoading | 表格是否在加载中 | Boolean | false\nprimaryKey | dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中 | String | 'id'\nfilterParams | 当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}<br>示例:<br>假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中<br>`<Table filterParams={{id: {selectedKeys: ['one']}}}/>` | Object | -\nsort | 当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'} | Object | -\nexpandedRowRender | 额外渲染行的渲染函数<br><br>**签名**:<br>Function(record: Object, index: Number) => Element<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>**返回值**:<br>{Element} null<br> | Function | -\nexpandedRowIndent | 额外渲染行的缩进 | Array | [1, 0]\nexpandedRowKeys | 默认情况下展开的额外渲染行, 传入此属性为受控状态 | Array | -\nhasExpandedRowCtrl | 是否显示点击展开额外渲染行的+号按钮 | Boolean | true\ngetExpandedColProps | 设置额外渲染行的属性<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonExpandedChange | 在额外渲染行展开或者收齐的时候触发的事件<br><br>**签名**:<br>Function(expandedRowKeys: Array, currentRowKey: String, expanded: Boolean, currentRecord: Object) => void<br>**参数**:<br>*expandedRowKeys*: {Array} 展开的渲染行的key<br>*currentRowKey*: {String} 当前点击的渲染行的key<br>*expanded*: {Boolean} 当前点击是展开还是收起<br>*currentRecord*: {Object} 当前点击额外渲染行的记录 | Function | () =&gt; {}\nonExpandedRowClick | 点击额外渲染行触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>*e*: {Event} DOM事件对象 | Function | () =&gt; {}\nindentSize | 在tree模式下的缩进尺寸， 仅在isTree为true时候有效 | Number | 12\nopenRowKeys | 默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作 | Array | -\nonRowOpen | 点击tree展开或者关闭的时候触发的事件<br><br>**签名**:<br>Function(openRowKeys: Array, currentRowKey: String, opened: Boolean, currentRecord: Object) => void<br>**参数**:<br>*openRowKeys*: {Array} tree模式下展开的key<br>*currentRowKey*: {String} 当前点击行的key<br>*opened*: {Boolean} 当前点击是展开还是收起<br>*currentRecord*: {Object} 当前点击行的记录 | Function | () =&gt; {}\nisTree | 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table | Boolean | false\noptimization | 是否开启性能优化，开启了性能优化后，会自动加入`shouldComponentUpdate` | Boolean | false\nlocale | 自定义国际化文案对象<br><br>**属性**:<br>*empty*: {String} 没有数据时的提示文案<br>*ok*: {String} 过滤器中确认按钮文案<br>*reset*: {String} 过滤器中重置按钮文案 | Object | -\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'en-us', 'zh-cn', 'zh-tw' | Enum | -\n","methodREADME":[],"subComponentsREADME":[{"name":"ColumnGroup","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\ntitle | 表头显示的内容 | ReactElement/ReactNode/Function | 'column-group'\n","methodREADME":[]},{"name":"Column","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\ndataIndex | 指定列对应的字段，支持`a.b`形式的快速取值 | String | -\ncell | 行渲染的逻辑<br>Function(value, index, record) => Element | ReactElement/ReactNode/Function | (value) =&gt; value\ntitle | 表头显示的内容 | ReactElement/ReactNode/Function | 'column'\nsortable | 是否支持排序 | Boolean | -\nwidth | 在锁列的情况下需要配置的宽度 | ReactNode | -\nalign | 单元格的对齐方式<br><br>**可选值**:<br>'left', 'center', 'right' | Enum | -\nfilters | 生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]` | Array&lt;Object&gt; | -\nfilterMode | 过滤的模式是单选还是多选<br><br>**可选值**:<br>'single', 'multiple' | Enum | 'multiple'\nlock | 是否支持锁列,可选值为`left`,`right`, `true` | Boolean/String | -\n","methodREADME":[]},{"name":"GroupHeader","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\ncell | 行渲染的逻辑 | ReactElement/ReactNode/Function | () =&gt; ''\nhasSelection | 是否在GroupHeader上面渲染selection | Boolean | false\n","methodREADME":[]}],"demos":[{"title":"简单","order":"0","jsx":"import { Table } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nReactDOM.render(\n  <Table dataSource={getData()} onRowClick={onRowClick}>\n    <Table.Column title=\"Id\" dataIndex=\"id\" />\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\" />\n    <Table.Column cell={render} width=\"40%\" />\n  </Table>,\n  mountNode\n);\n\n","css":"","body":"\n简单的表格渲染\n\n"},{"title":"选择可控","order":"1","jsx":"import { Table, Button } from \"@icedesign/base\";\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowSelection: {\n        onChange: this.onChange.bind(this),\n        onSelect: function(selected, record, records) {\n          console.log(\"onSelect\", selected, record, records);\n        },\n        onSelectAll: function(selected, records) {\n          console.log(\"onSelectAll\", selected, records);\n        },\n        selectedRowKeys: [],\n        getProps: record => {\n          return {\n            disabled: record.id === 100306660941\n          };\n        }\n      },\n      dataSource: getData(0, 5)\n    };\n  }\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.clear.bind(this)}>Clear Selection</Button>&nbsp;\n          <Button onClick={this.changeMode.bind(this)}>\n            Switch single mode\n          </Button>&nbsp;\n          <Button onClick={this.toggleLoading.bind(this)}>\n            Toggle loading\n          </Button>&nbsp;\n          <Button onClick={this.modifyDataSource.bind(this)}>\n            Modify dataSource\n          </Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          isLoading={this.state.isLoading}\n          rowSelection={this.state.rowSelection}\n        >\n          <Table.Column title=\"Id\" dataIndex=\"id\" />\n          <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </div>\n    );\n  }\n  onChange(ids, records) {\n    let { rowSelection } = this.state;\n    rowSelection.selectedRowKeys = ids;\n    console.log(\"onChange\", ids, records);\n    this.setState({ rowSelection });\n  }\n  clear() {\n    let { rowSelection } = this.state;\n    rowSelection.selectedRowKeys = [];\n    this.setState({ rowSelection });\n  }\n  toggleLoading() {\n    this.setState({ isLoading: !this.state.isLoading });\n  }\n  changeMode() {\n    let { rowSelection } = this.state;\n    rowSelection.mode = \"single\";\n    this.setState({ rowSelection });\n  }\n  modifyDataSource() {\n    this.setState({\n      dataSource: getData(9, 14)\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n演示全选和单选受控的功能\n\n"},{"title":"行列合并","order":"0","jsx":"import { Table } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  },\n  getCellProps = (rowIndex, colIndex) => {\n    if (rowIndex === 2 && colIndex === 1) {\n      return {\n        colSpan: 2,\n        rowSpan: 3\n      };\n    }\n    if (rowIndex === 1 && colIndex === 2) {\n      return {\n        colSpan: 2,\n        rowSpan: 1\n      };\n    }\n  };\n\nReactDOM.render(\n  <Table\n    dataSource={getData()}\n    onRowClick={onRowClick}\n    getCellProps={getCellProps}\n  >\n    <Table.Column title=\"Id\" dataIndex=\"id\" />\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\" />\n    <Table.Column cell={render} width={200} />\n  </Table>,\n  mountNode\n);\n\n","css":"","body":"\n通过getCellProps进行列合并。\n\n"},{"title":"定制列","order":"9","jsx":"import { Table, Button, Dialog, Checkbox } from \"@icedesign/base\";\n\nconst { Group } = Checkbox;\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  cols = [\n    {\n      title: \"id\",\n      dataIndex: \"id\"\n    },\n    {\n      title: \"Title\",\n      dataIndex: \"title\"\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"time\"\n    }\n  ];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: getData(),\n      cols: cols\n    };\n  }\n  openDialog = () => {\n    Dialog.alert({\n      needWrapper: false,\n      content: this.renderControlContent(),\n      title: \"选择需要显示的列\",\n      onOk: () => {\n        this.setState({\n          cols: this.changedCols\n        });\n      }\n    });\n  };\n\n  renderControlContent() {\n    const groupSource = cols.map(col => {\n        return {\n          label: col.title,\n          value: col.dataIndex\n        };\n      }),\n      defaultValue = this.state.cols.map(col => col.dataIndex);\n    return (\n      <Group\n        dataSource={groupSource}\n        onChange={this.onChange}\n        defaultValue={defaultValue}\n      />\n    );\n  }\n\n  onChange = value => {\n    this.changedCols = cols.filter(col => value.indexOf(col.dataIndex) > -1);\n  };\n\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.openDialog}> 选择显示的列数 </Button>\n        </p>\n        <Table dataSource={this.state.dataSource}>{this.renderCols()}</Table>\n      </div>\n    );\n  }\n  renderCols() {\n    const { cols } = this.state;\n    return cols.map(col => {\n      return (\n        <Table.Column\n          title={col.title}\n          dataIndex={col.dataIndex}\n          key={col.dataIndex}\n        />\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n定制显示的表格列数\n\n"},{"title":"增删改查","order":"0","jsx":"import { Table, Button } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  };\n\nclass App extends React.Component {\n  state = {\n    dataSource: getData()\n  };\n  render() {\n    const renderOper = (value, index, record) => {\n      return (\n        <a onClick={this.onRemove.bind(this, record.id)}>Remove({record.id})</a>\n      );\n    };\n    return (\n      <div>\n        <p>\n          <Button onClick={this.onAdd}>Add Item</Button>\n        </p>\n        <Table dataSource={this.state.dataSource} onRowClick={onRowClick}>\n          <Table.Column title=\"Id\" dataIndex=\"id\" />\n          <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={renderOper} width=\"20%\" />\n        </Table>\n      </div>\n    );\n  }\n  onAdd = () => {\n    // 注意在没有通过shouldComponentUpdate判断的时候可以使用此写法\n    // 否则注意数组和对象的引用关系\n    const { dataSource } = this.state;\n    dataSource.push({\n      title: {\n        name: \"Quotation for 1PCS Nano controller compatible\"\n      },\n      id: Date.now(),\n      time: 2000\n    });\n    this.setState({\n      dataSource\n    });\n  };\n\n  onRemove = id => {\n    const { dataSource } = this.state;\n    let index = -1;\n    dataSource.forEach((item, i) => {\n      if (item.id === id) {\n        index = i;\n      }\n    });\n    if (index !== -1) {\n      dataSource.splice(index, 1);\n      this.setState({\n        dataSource\n      });\n    }\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n演示对表格的增删改查\n\n"},{"title":"可展开-复杂","order":"4","jsx":"import { Table, Button } from \"@icedesign/base\";\n\n/*eslint-disable react/prop-types, react/no-multi-comp*/\nclass ExpandedApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: this.props.dataSource\n    };\n  }\n  render() {\n    const style = {\n      borderTop: \"1px solid #eee\",\n      textAlign: \"center\",\n      background: \"#f8f8f8\",\n      lineHeight: \"28px\"\n    };\n    return (\n      <div style={{ marginTop: 10 }}>\n        <Table\n          dataSource={this.state.dataSource}\n          hasHeader={false}\n          hasBorder={false}\n        >\n          <Table.Column title=\"Title\" dataIndex=\"title\" />\n          <Table.Column title=\"Time\" dataIndex=\"time\" width={200} />\n        </Table>\n        <p style={style} onClick={this.load.bind(this)}>\n          Load more data.\n        </p>\n      </div>\n    );\n  }\n  load() {\n    let { dataSource } = this.state;\n    dataSource = dataSource.concat(dataSource);\n    this.setState({ dataSource });\n  }\n}\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n        id: 100306660940 + i,\n        time: 2000 + i,\n        children: [\n          {\n            title: `Sub title for Quotation ${3 + i}`,\n            time: 2000 + i\n          },\n          {\n            title: `Sub2 title for Quotation ${3 + i}`,\n            time: 2000 + i\n          }\n        ]\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  },\n  expandedRowRender = record => {\n    let children = record.children;\n    return <ExpandedApp dataSource={children} />;\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: getData(),\n      hasBorder: false,\n      expandedRowKeys: []\n    };\n  }\n  render() {\n    const renderTitle = (value, index, record) => {\n      return (\n        <div>\n          {value}\n          <span onClick={this.toggleExpand.bind(this, record)}>+++++</span>\n        </div>\n      );\n    };\n    return (\n      <span>\n        <p>\n          {\" \"}\n          <Button onClick={this.disabledExpandedCol.bind(this)}>\n            {\" \"}\n            设置第4行禁用{\" \"}\n          </Button>{\" \"}\n          &nbsp;\n          <Button onClick={this.toggleCol.bind(this)}> 隐藏+号 </Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          isZebra={this.state.isZebra}\n          hasBorder={this.state.hasBorder}\n          onSort={this.onSort.bind(this)}\n          expandedRowRender={expandedRowRender}\n          expandedRowIndent={[1, 1]}\n          expandedRowKeys={this.state.expandedRowKeys}\n          getExpandedColProps={this.state.getExpandedColProps}\n          hasExpandedRowCtrl={this.state.hasExpandedRowCtrl}\n          onExpandedChange={this.onExpandedChange.bind(this)}\n        >\n          <Table.Column title=\"Id\" dataIndex=\"id\" sortable />\n          <Table.Column title=\"Title\" dataIndex=\"title\" cell={renderTitle} />\n          <Table.Column title=\"Time\" dataIndex=\"time\" width={200} />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </span>\n    );\n  }\n  onSort(dataIndex, order) {\n    let dataSource = this.state.dataSource.sort(function(a, b) {\n      let result = a[dataIndex] - b[dataIndex];\n      return order === \"asc\" ? (result > 0 ? 1 : -1) : result > 0 ? -1 : 1;\n    });\n    this.setState({\n      dataSource\n    });\n  }\n  disabledExpandedCol() {\n    this.setState({\n      getExpandedColProps: (record, index) => {\n        if (index === 3) {\n          return {\n            disabled: true\n          };\n        }\n      }\n    });\n  }\n  toggleCol() {\n    this.setState({\n      hasExpandedRowCtrl: false\n    });\n  }\n  onExpandedChange(expandedRowKeys) {\n    this.setState({ expandedRowKeys });\n  }\n  toggleExpand(record) {\n    let key = record.id,\n      { expandedRowKeys } = this.state,\n      index = expandedRowKeys.indexOf(key);\n    if (index > -1) {\n      expandedRowKeys.splice(index, 1);\n    } else {\n      expandedRowKeys.push(key);\n    }\n    this.setState({\n      expandedRowKeys: expandedRowKeys\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n可以通过 `expandedRowRender` 额外渲染行，但是会包含复杂的组件\n\n"},{"title":"可展开","order":"3","jsx":"import { Table, Button } from \"@icedesign/base\";\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: getData()\n    };\n  }\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.toggleIndent.bind(this)}>\n            {\" \"}\n            设置缩进为左二右一{\" \"}\n          </Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          isZebra={this.state.isZebra}\n          hasBorder={false}\n          onSort={this.onSort.bind(this)}\n          expandedRowRender={record => record.title}\n          onRowClick={() => console.log(\"rowClick\")}\n          onExpandedRowClick={() => console.log(\"expandedRowClick\")}\n          expandedRowIndent={this.state.expandedRowIndent}\n        >\n          <Table.Column title=\"Id\" dataIndex=\"id\" sortable />\n          <Table.Column title=\"Title\" dataIndex=\"title\" />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </div>\n    );\n  }\n  onSort(dataIndex, order) {\n    let dataSource = this.state.dataSource.sort(function(a, b) {\n      let result = a[dataIndex] - b[dataIndex];\n      return order === \"asc\" ? (result > 0 ? 1 : -1) : result > 0 ? -1 : 1;\n    });\n    this.setState({\n      dataSource\n    });\n  }\n  toggleIndent() {\n    this.setState({\n      expandedRowIndent: [2, 1]\n    });\n  }\n  toggleCol() {\n    this.setState({\n      hasExpandedRowCtrl: false\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n可以通过 `expandedRowRender` 额外渲染行\n\n"},{"title":"排序与过滤","order":"2","jsx":"import { Table, Button } from \"@icedesign/base\";\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: getData(),\n      filterMode: \"multiple\"\n    };\n  }\n  render() {\n    let filters = [\n      {\n        label: \"Nano 包含3\",\n        value: 3\n      },\n      {\n        label: \"Nano 包含2\",\n        value: 2,\n        children: [\n          {\n            label: \"Nano 包含12\",\n            value: 22\n          },\n          {\n            label: \"Nano 包含23\",\n            value: 23\n          }\n        ]\n      },\n      {\n        label: \"其他\",\n        children: [\n          {\n            label: \"Nano 包含4\",\n            value: 4\n          },\n          {\n            label: \"Nano 包含5\",\n            value: 5\n          }\n        ]\n      }\n    ];\n    return (\n      <div>\n        <p>\n          <Button onClick={this.changeMode.bind(this)}>\n            切换过滤为单选模式\n          </Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          onSort={this.onSort.bind(this)}\n          onFilter={this.onFilter.bind(this)}\n        >\n          <Table.Column title=\"Id\" dataIndex=\"id\" sortable />\n          <Table.Column\n            title=\"Title\"\n            dataIndex=\"title\"\n            filters={filters}\n            filterMode={this.state.filterMode}\n          />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </div>\n    );\n  }\n  onSort(dataIndex, order) {\n    let dataSource = this.state.dataSource.sort(function(a, b) {\n      let result = a[dataIndex] - b[dataIndex];\n      return order === \"asc\" ? (result > 0 ? 1 : -1) : result > 0 ? -1 : 1;\n    });\n    this.setState({\n      dataSource\n    });\n  }\n  onFilter(filterParams) {\n    let dataSource = getData();\n\n    for (let key in filterParams) {\n      let selectedKeys = filterParams[key].selectedKeys;\n      if (selectedKeys.length) {\n        dataSource = dataSource.filter(record => {\n          return selectedKeys.some(value => {\n            return record[key].indexOf(value) > -1;\n          });\n        });\n      }\n    }\n    this.setState({ dataSource });\n  }\n  changeMode() {\n    this.setState({\n      filterMode: \"single\"\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n示例演示了排序和过滤的特性\n\n"},{"title":"固定表头","order":"5","jsx":"import { Table, Button } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = length => {\n    let result = [];\n    for (let i = 0; i < length; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  state = {\n    dataSource: getData(10)\n  };\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.reduceContent.bind(this)}>切换到2条数据</Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          onRowClick={onRowClick}\n          fixedHeader\n        >\n          <Table.Column title=\"Id\" dataIndex=\"id\" />\n          <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </div>\n    );\n  }\n  reduceContent() {\n    this.setState({\n      dataSource: getData(2)\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n表格可以固定表头\n\n"},{"title":"分组列表","order":"6","jsx":"import { Table, Button } from \"@icedesign/base\";\n\nlet dataSource = [\n    {\n      price: \"US $2.45\",\n      status: 0,\n      id: 1,\n      product: [\n        {\n          title:\n            \"2014 New Fashion Novelty Tank Slim Women's Fashion Dresses With Lace\",\n          avatar:\n            \"https://sc01.alicdn.com/kf/HTB1ravHKXXXXXccXVXXq6xXFXXXJ/Chinese-Style-Fashion-Custom-Digital-Print-Silk.jpg_220x220.jpg\"\n        }\n      ],\n      children: [\n        {\n          price: \"US $2.5\",\n          status: 1,\n          id: 2,\n          product: [\n            {\n              title:\n                \"Free shipping women Casual dresses lady dress plus size 2014\",\n              avatar:\n                \"https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg\"\n            }\n          ]\n        },\n        {\n          price: \"US $2.5\",\n          status: 1,\n          id: 3,\n          product: [\n            {\n              title:\n                \"Free shipping women Casual dresses lady dress plus size 2014\",\n              avatar:\n                \"https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      price: \"US $2.5\",\n      status: 1,\n      id: 4,\n      product: [\n        {\n          title: \"Free shipping women Casual dresses lady dress plus size 2014\",\n          avatar:\n            \"https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg\"\n        }\n      ]\n    }\n  ],\n  productRender = function(product) {\n    return (\n      <div className=\"media\">\n        <img src={product[0].avatar} className=\"media-side\" />\n        <div className=\"media-content\">{product[0].title}</div>\n      </div>\n    );\n  },\n  priceRender = function(price) {\n    return <b>{price}</b>;\n  },\n  statusRender = function(status) {\n    if (status) {\n      return \"Already Priced\";\n    } else {\n      return \"No Priced\";\n    }\n  },\n  operRender = function() {\n    return <a href=\"javascript:;\">View</a>;\n  },\n  groupHeaderRender = function(record) {\n    return <div>{record.product[0].title}</div>;\n  },\n  getRowClassName = function(record) {\n    if (record.status === 0) {\n      return \"highlight-row\";\n    }\n  },\n  rowSelection = {\n    onChange: function(selectedKeys) {\n      console.log(selectedKeys);\n    }\n  };\n\nclass App extends React.Component {\n  state = {\n    hasSelection: false\n  };\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.toggleGroupSelection}>\n            Toggle GroupHeader Selection\n          </Button>\n        </p>\n        <Table\n          dataSource={dataSource}\n          getCellProps={(rowIndex, colIndex) => {\n            if (\n              (colIndex === 3 && rowIndex === 1) ||\n              (colIndex === 4 && rowIndex === 1)\n            ) {\n              return {\n                colSpan: 1,\n                rowSpan: 2\n              };\n            }\n          }}\n          getRowClassName={getRowClassName}\n          rowSelection={rowSelection}\n        >\n          <Table.GroupHeader\n            cell={groupHeaderRender}\n            hasSelection={this.state.hasSelection}\n          />\n          <Table.Column\n            cell={productRender}\n            title=\"Product Details\"\n            dataIndex=\"product\"\n          />\n          <Table.Column\n            cell={priceRender}\n            title=\"Price\"\n            dataIndex=\"price\"\n            width={120}\n          />\n          <Table.Column\n            cell={statusRender}\n            title=\"Status\"\n            dataIndex=\"status\"\n            width={100}\n          />\n          <Table.Column cell={operRender} title=\"\" width={100} />\n        </Table>\n      </div>\n    );\n  }\n  toggleGroupSelection = () => {\n    this.setState({\n      hasSelection: !this.state.hasSelection\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".media-side{\n    width:48px;\n    height:48px;\n    float:left;\n    margin-right:10px;\n}\n.media-content{\n    overflow: hidden;\n    vertical-align: top;\n}\n.media{\n    overflow: hidden;\n}\n.next-table .highlight-row .next-table-group-header td{\n    background: #E8F6FF;\n}\n.next-table .highlight-row td{\n    border-color: #D3E9F7;\n}\n","body":"\n分组列表展现\n\n"},{"title":"锁列","order":"0","jsx":"import { Table, Button } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 100; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  state = {\n    dataSource: [],\n    cols: [\n      <Table.Column\n        title=\"Title\"\n        dataIndex=\"title.name\"\n        width={400}\n        key=\"name1\"\n        lock\n      />,\n      <Table.ColumnGroup title=\"abc\" key=\"name-group\">\n        <Table.Column\n          title=\"Title\"\n          dataIndex=\"title.name\"\n          width={100}\n          key=\"name2\"\n        />\n        <Table.Column\n          title=\"Title\"\n          dataIndex=\"title.name\"\n          width={400}\n          key=\"name3\"\n        />\n      </Table.ColumnGroup>,\n      <Table.Column title=\"Time\" dataIndex=\"time\" width={500} key=\"time\" />\n    ],\n    isLoading: true\n  };\n  render() {\n    let filters = [\n      {\n        label: \"Nano 包含3\",\n        value: 3\n      },\n      {\n        label: \"Nano 包含2\",\n        value: 2,\n        children: [\n          {\n            label: \"Nano 包含12\",\n            value: 22\n          },\n          {\n            label: \"Nano 包含23\",\n            value: 23\n          }\n        ]\n      },\n      {\n        label: \"其他\",\n        children: [\n          {\n            label: \"Nano 包含4\",\n            value: 4\n          },\n          {\n            label: \"Nano 包含5\",\n            value: 5\n          }\n        ]\n      }\n    ];\n    return (\n      <div>\n        <p>\n          <Button onClick={this.reduceCol}>Reduce Cols</Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          onRowClick={onRowClick}\n          fixedHeader\n          isLoading={this.state.isLoading}\n        >\n          <Table.Column\n            title=\"Id-Id-Id-Id-Id-Id-Id-Id-Id-Id-Id-Id\"\n            dataIndex=\"id\"\n            lock\n            width={140}\n            filters={filters}\n          />\n          {this.state.cols}\n          <Table.Column cell={render} width={200} lock=\"right\" />\n        </Table>\n      </div>\n    );\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        dataSource: getData(),\n        isLoading: false\n      });\n    }, 200);\n  }\n  reduceCol = () => {\n    this.setState({\n      cols: [\n        <Table.Column\n          title=\"Title\"\n          dataIndex=\"title.name\"\n          width={400}\n          key=\"name1\"\n          lock\n        />,\n        <Table.Column title=\"Time\" dataIndex=\"time\" width={100} key=\"time\" />\n      ]\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n演示表格锁列的功能\n\n"},{"title":"混合模式","order":"0","jsx":"import { Table } from \"@icedesign/base\";\n\nconst data = [\n  {\n    key: 1,\n    name: \"a\",\n    age: 32,\n    address: \"我是a\",\n    children: [\n      {\n        key: 11,\n        name: \"aa\",\n        age: 33,\n        address: \"我是aa\"\n      },\n      {\n        key: 12,\n        name: \"ab\",\n        age: 33,\n        address: \"我是ab\",\n        children: [\n          {\n            key: 121,\n            name: \"aba\",\n            age: 33,\n            address: \"我是aba\"\n          }\n        ]\n      },\n      {\n        key: 13,\n        name: \"ac\",\n        age: 33,\n        address: \"我是ac\",\n        children: [\n          {\n            key: 131,\n            name: \"aca\",\n            age: 33,\n            address: \"我是aca\",\n            children: [\n              {\n                key: 1311,\n                name: \"acaa\",\n                age: 33,\n                address: \"我是acaa\"\n              },\n              {\n                key: 1312,\n                name: \"acab\",\n                age: 33,\n                address: \"我是acab\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    key: 2,\n    name: \"b\",\n    age: 32,\n    address: \"我是b\",\n    children: []\n  }\n];\n\nconst tableMixTree = (\n  <Table\n    dataSource={data}\n    primaryKey=\"key\"\n    isTree\n    rowSelection={{ onChange: () => {} }}\n  >\n    <Table.Column title=\"Key\" dataIndex=\"key\" />\n    <Table.Column title=\"Name\" dataIndex=\"name\" />\n    <Table.Column title=\"Age\" dataIndex=\"age\" />\n    <Table.Column title=\"Address\" dataIndex=\"address\" />\n  </Table>\n);\n\nconst tableMixExpanded = (\n  <Table\n    dataSource={data}\n    primaryKey=\"key\"\n    expandedRowRender={record => record.address}\n    rowSelection={{ onChange: () => {} }}\n  >\n    <Table.Column title=\"Key\" dataIndex=\"key\" />\n    <Table.Column title=\"Name\" dataIndex=\"name\" />\n    <Table.Column title=\"Age\" dataIndex=\"age\" />\n    <Table.Column title=\"Address\" dataIndex=\"address\" />\n  </Table>\n);\n\nconst tableMixSelectionTreeLock = (\n  <div style={{ width: \"500px\" }}>\n    <Table\n      dataSource={data}\n      primaryKey=\"key\"\n      rowSelection={{ onChange: () => {} }}\n      isTree\n    >\n      <Table.Column title=\"Key\" dataIndex=\"key\" width={100} />\n      <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100} />\n      <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\" />\n      <Table.Column title=\"Address\" dataIndex=\"address\" width={200} />\n    </Table>\n  </div>\n);\n\nconst tableMixLock = (\n  <div style={{ width: \"500px\" }}>\n    <Table\n      dataSource={data}\n      primaryKey=\"key\"\n      rowSelection={{ onChange: () => {} }}\n    >\n      <Table.Column title=\"Key\" dataIndex=\"key\" width={100} />\n      <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100} />\n      <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\" />\n      <Table.Column title=\"Address\" dataIndex=\"address\" width={200} />\n    </Table>\n  </div>\n);\n\nconst tableMixExpandedLock = (\n  <div style={{ width: \"500px\" }}>\n    <Table\n      dataSource={data}\n      primaryKey=\"key\"\n      rowSelection={{ onChange: () => {} }}\n      expandedRowRender={record => record.address}\n      expandedRowIndent={[3, 0]}\n    >\n      <Table.Column title=\"Key\" dataIndex=\"key\" width={100} />\n      <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100} />\n      <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\" />\n      <Table.Column title=\"Address\" dataIndex=\"address\" width={200} />\n    </Table>\n  </div>\n);\n\nconst tableMixTreeLock = (\n  <div style={{ width: \"500px\" }}>\n    <Table dataSource={data} primaryKey=\"key\" isTree>\n      <Table.Column title=\"Key\" dataIndex=\"key\" width={100} />\n      <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100} />\n      <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\" />\n      <Table.Column title=\"Address\" dataIndex=\"address\" width={200} />\n    </Table>\n  </div>\n);\n\nReactDOM.render(\n  <div className=\"mix-demo\">\n    <div className=\"row\">\n      <h4>tree和选择混合</h4>\n      {tableMixTree}\n    </div>\n    <div className=\"row\">\n      <h4>额外渲染和选择混合</h4>\n      {tableMixExpanded}\n    </div>\n    <div className=\"row\">\n      <h4>tree和锁列和选择混合</h4>\n      {tableMixSelectionTreeLock}\n    </div>\n    <div className=\"row\">\n      <h4>额外渲染列和锁列和选择混合</h4>\n      {tableMixExpandedLock}\n    </div>\n    <div className=\"row\">\n      <h4>锁列和选择混合</h4>\n      {tableMixLock}\n    </div>\n    <div className=\"row\">\n      <h4>tree和锁列混合</h4>\n      {tableMixTreeLock}\n    </div>\n  </div>,\n  mountNode\n);\n\n","css":".mix-demo .row {\n  margin-top:10px;\n}\n","body":"\n演示了tree模式和rowSelection模式混合\n\n"},{"title":"多表头","order":"7","jsx":"import { Table, Button } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = j => {\n    let result = [];\n    for (let i = 0; i < j; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  state = {\n    dataSource: getData(15)\n  };\n\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.onClick}>Reduce count</Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          onRowClick={onRowClick}\n          fixedHeader\n          maxBodyHeight={400}\n        >\n          <Table.Column title=\"Id1\" dataIndex=\"id\" width={140} />\n          <Table.ColumnGroup>\n            <Table.Column title=\"Id2\" dataIndex=\"id\" lock width={140} />\n            <Table.Column title=\"Title\" dataIndex=\"title.name\" width={400} />\n            <Table.Column title=\"Title\" dataIndex=\"title.name\" width={200} />\n          </Table.ColumnGroup>\n          <Table.ColumnGroup>\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={500} />\n            <Table.Column cell={render} width={200} lock=\"right\" />\n          </Table.ColumnGroup>\n        </Table>\n      </div>\n    );\n  }\n\n  onClick = () => {\n    this.setState({\n      dataSource: getData(4)\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n多个表头\n\n"},{"title":"选择框属性","order":"0","jsx":"import { Table } from \"@icedesign/base\";\n\nconst onChange = function(...args) {\n    console.log(...args);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  },\n  rowSelection = {\n    onChange: onChange,\n    getProps: record => {\n      return {\n        disabled: record.id === 100306660942\n      };\n    }\n  };\n\nReactDOM.render(\n  <Table dataSource={getData()} rowSelection={rowSelection}>\n    <Table.Column title=\"Id\" dataIndex=\"id\" />\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\" />\n    <Table.Column cell={render} width={200} />\n  </Table>,\n  mountNode\n);\n\n","css":"","body":"\n通过getProps来控制选择框属性\n\n"},{"title":"可选择","order":"0","jsx":"import { Table } from \"@icedesign/base\";\n\nconst onChange = function(...args) {\n    console.log(...args);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nReactDOM.render(\n  <Table dataSource={getData()} rowSelection={{ onChange: onChange }}>\n    <Table.Column title=\"Id\" dataIndex=\"id\" />\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\" />\n    <Table.Column cell={render} width={200} />\n  </Table>,\n  mountNode\n);\n\n","css":"","body":"\n表格可选择功能\n\n"},{"title":"样式","order":"10","jsx":"import { Table, Button } from \"@icedesign/base\";\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: getData(),\n      className: \"\",\n      align: \"left\"\n    };\n  }\n  render() {\n    return (\n      <span>\n        <p>\n          <Button onClick={this.toggleZebra.bind(this)}> Toggle zebra </Button>{\" \"}\n          &nbsp;\n          <Button onClick={this.toggleBorder.bind(this)}>\n            {\" \"}\n            Toggle border\n          </Button>{\" \"}\n          &nbsp;\n          <Button onClick={this.makeBeauty.bind(this)}>\n            {\" \"}\n            Make second column beauty{\" \"}\n          </Button>{\" \"}\n          &nbsp;\n          <Button onClick={this.makeAlign.bind(this)}>\n            {\" \"}\n            Make first column align right{\" \"}\n          </Button>{\" \"}\n          &nbsp;\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          isZebra={this.state.isZebra}\n          hasBorder={this.state.hasBorder}\n          onSort={this.onSort.bind(this)}\n        >\n          <Table.Column\n            title=\"Id\"\n            dataIndex=\"id\"\n            sortable\n            align={this.state.align}\n          />\n          <Table.Column\n            title=\"Title\"\n            dataIndex=\"title\"\n            className={this.state.className}\n          />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </span>\n    );\n  }\n  onSort(dataIndex, order) {\n    let dataSource = this.state.dataSource.sort(function(a, b) {\n      let result = a[dataIndex] - b[dataIndex];\n      return order === \"asc\" ? (result > 0 ? 1 : -1) : result > 0 ? -1 : 1;\n    });\n    this.setState({\n      dataSource\n    });\n  }\n  toggleZebra() {\n    this.setState({\n      isZebra: !this.state.isZebra\n    });\n  }\n  toggleBorder() {\n    this.setState({\n      hasBorder: !this.state.hasBorder\n    });\n  }\n  makeBeauty() {\n    this.setState({\n      className: \"beauty\"\n    });\n  }\n  makeAlign() {\n    this.setState({\n      align: \"right\"\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":".beauty{\n  background: #f7f7f7;\n}\n","body":"\n自定义表格边框\n\n"}]},{"name":"Tag","category":"Components","title":"标签","type":"展示","importStatement":"import { Tag } from '@icedesign/base';","body":"\n\n## Guide\n\n标签用于标记事物的属性和维度，或者可以使用标签来对一组事物分类。\n\n### 何时使用\n\n-   用于标记事物的属性和维度。\n-   进行分类。\n\n### 使用注意点\n\n1.  目前 `0.x` 版本的 tag 存在一个默认的 `margin`，如果你不想要有，可以在配置平台中配置移除。`1.x` 版本会默认移除。\n2.  虽然可以设置 `size` 属性取值 `large`，但该值只是为了兼容表单场景，实际取值时 `large` 等同于 `medium`。\n3.  不建议在 Tag 中使用大段文本。\n\n","propsSchema":{"name":"Tag","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"shape":{"type":{"name":"enum","value":[{"value":"'selectable'","computed":false},{"value":"'deletable'","computed":false},{"value":"'interactive'","computed":false},{"value":"'link'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"标签的形态","defaultValue":{"value":"'selectable'","computed":false},"docblock":"标签的形态"},"type":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'primary'","computed":false},{"value":"'secondary'","computed":false}]},"required":false,"description":"标签的类型","defaultValue":{"value":"'normal'","computed":false},"docblock":"标签的类型"},"size":{"type":{"name":"enum","value":[{"value":"'medium'","computed":false},{"value":"'small'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"标签的尺寸（large 尺寸为兼容表单场景 large = medium）","defaultValue":{"value":"'medium'","computed":false},"docblock":"标签的尺寸（large 尺寸为兼容表单场景 large = medium）"},"disabled":{"type":{"name":"bool"},"required":false,"description":"标签是否禁用","defaultValue":{"value":"false","computed":false},"docblock":"标签是否禁用"},"count":{"type":{"name":"number"},"required":false,"description":"标签附加显示的重复次数","docblock":"标签附加显示的重复次数"},"selected":{"type":{"name":"bool"},"required":false,"description":"选择型标签是否被选中（受控）","docblock":"选择型标签是否被选中（受控）"},"defaultSelected":{"type":{"name":"bool"},"required":false,"description":"选型型标签默认是否被选中（非受控）","defaultValue":{"value":"false","computed":false},"docblock":"选型型标签默认是否被选中（非受控）"},"closed":{"type":{"name":"bool"},"required":false,"description":"可删除标签是否被关闭（受控）","docblock":"可删除标签是否被关闭（受控）"},"defaultClosed":{"type":{"name":"bool"},"required":false,"description":"可删除标签默认是否被关闭（非受控）","defaultValue":{"value":"false","computed":false},"docblock":"可删除标签默认是否被关闭（非受控）"},"marked":{"type":{"name":"bool"},"required":false,"description":"互动型标签是否被标记过（受控）","defaultValue":{"value":"false","computed":false},"docblock":"互动型标签是否被标记过（受控）"},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"array"},{"name":"object"},{"name":"bool"}]},"required":false,"description":"标签暂存的值","docblock":"标签暂存的值"},"animation":{"type":{"name":"bool"},"required":false,"description":"是否开启动效","defaultValue":{"value":"true","computed":false},"docblock":"是否开启动效"},"onChange":{"type":{"name":"func"},"required":false,"description":"互动型标签被 mark 的数量变化时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"互动型标签被 mark 的数量变化时的回调\n@param {Number} count 被标记的次数","params":[{"name":"count","description":"被标记的次数","type":{"name":"Number"}}],"returns":null},"onClose":{"type":{"name":"func"},"required":false,"description":"可删除标签被关闭时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"可删除标签被关闭时的回调\n@param {String} value 值\n@param {Boolean} closed 是否关闭状态","params":[{"name":"value","description":"值","type":{"name":"String"}},{"name":"closed","description":"是否关闭状态","type":{"name":"Boolean"}}],"returns":null},"onSelect":{"type":{"name":"func"},"required":false,"description":"可选择标签被选中时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"可选择标签被选中时的回调\n@param {Boolean} selected 是否被选择","params":[{"name":"selected","description":"是否被选择","type":{"name":"Boolean"}}],"returns":null},"afterAppear":{"type":{"name":"func"},"required":false,"description":"标签出现后执行的回调\nFunction() => void","defaultValue":{"value":"() => {}","computed":false},"docblock":"标签出现后执行的回调\nFunction() => void","params":[],"returns":null},"afterClose":{"type":{"name":"func"},"required":false,"description":"标签关闭后执行的回调\nFunction() => void","defaultValue":{"value":"() => {}","computed":false},"docblock":"标签关闭后执行的回调\nFunction() => void","params":[],"returns":null}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nshape | 标签的形态<br><br>**可选值**:<br>'selectable', 'deletable', 'interactive', 'link', 'readonly' | Enum | 'selectable'\ntype | 标签的类型<br><br>**可选值**:<br>'normal', 'primary', 'secondary' | Enum | 'normal'\nsize | 标签的尺寸（large 尺寸为兼容表单场景 large = medium）<br><br>**可选值**:<br>'medium', 'small', 'large' | Enum | 'medium'\ndisabled | 标签是否禁用 | Boolean | false\ncount | 标签附加显示的重复次数 | Number | -\nselected | 选择型标签是否被选中（受控） | Boolean | -\ndefaultSelected | 选型型标签默认是否被选中（非受控） | Boolean | false\nclosed | 可删除标签是否被关闭（受控） | Boolean | -\ndefaultClosed | 可删除标签默认是否被关闭（非受控） | Boolean | false\nmarked | 互动型标签是否被标记过（受控） | Boolean | false\nvalue | 标签暂存的值 | String/Array/Object/Boolean | -\nanimation | 是否开启动效 | Boolean | true\nonChange | 互动型标签被 mark 的数量变化时的回调<br><br>**签名**:<br>Function(count: Number) => void<br>**参数**:<br>*count*: {Number} 被标记的次数 | Function | () =&gt; {}\nonClose | 可删除标签被关闭时的回调<br><br>**签名**:<br>Function(value: String, closed: Boolean) => void<br>**参数**:<br>*value*: {String} 值<br>*closed*: {Boolean} 是否关闭状态 | Function | () =&gt; {}\nonSelect | 可选择标签被选中时的回调<br><br>**签名**:<br>Function(selected: Boolean) => void<br>**参数**:<br>*selected*: {Boolean} 是否被选择 | Function | () =&gt; {}\nafterAppear | 标签出现后执行的回调<br>Function() => void<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterClose | 标签关闭后执行的回调<br>Function() => void<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"关闭动效","order":"4","jsx":"import { Tag } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Tag shape=\"deletable\">默认有动效的 Tag</Tag> <br />\n    <Tag shape=\"deletable\" animation={false}>\n      关闭动效的 Tag\n    </Tag>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n默认情况下 Tag 使用了出现和关闭的动效，如果某些情况下，您不需要动效，可以使用 `animation` 属性进行关闭。\n\n"},{"title":"受控型可选择标签","order":"2","jsx":"import { Tag, Button } from \"@icedesign/base\";\n\nclass ControlledTag extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      select: false\n    };\n  }\n\n  onClick() {\n    this.setState(prevState => {\n      return {\n        select: !prevState.select\n      };\n    });\n  }\n\n  render() {\n    const label = this.state.select ? \"反选 Tag\" : \"选中 Tag\";\n    return (\n      <div>\n        <Button onClick={::this.onClick} type=\"normal\">\n          {label}\n        </Button>\n        <Tag shape=\"selectable\" selected={this.state.select}>\n          Controlled Selectable Tag\n        </Tag>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<ControlledTag />, mountNode);\n\n","css":"","body":"\n`defaultSelected` 提供了非受控的选中状态，`selected` 提供了受控的选中状态。\n对于可选择标签而言，除了使用组件提供的默认行为，用户还可以通过自行控制组件状态来实现自定义组件的选择行为。\n\n"},{"title":"自定义的可关闭标签","order":"3","jsx":"import { Tag } from \"@icedesign/base\";\n\nclass ControlledClosableTag extends React.Component {\n  static propTypes = {\n    value: React.PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      closed: false\n    };\n  }\n\n  onClose() {\n    this.setState(prevState => {\n      return { closed: !prevState.closed };\n    });\n  }\n\n  render() {\n    const { value } = this.props;\n    return (\n      <Tag\n        shape=\"deletable\"\n        closed={this.state.closed}\n        onClose={::this.onClose}\n        value={value}\n      >\n        Controlled Deletable Tag\n      </Tag>\n    );\n  }\n}\n\nReactDOM.render(<ControlledClosableTag value=\"hello world\" />, mountNode);\n\n","css":"","body":"\n组件提供了 `closed` 属性用于实现关闭行为的受控。\n对于可关闭标签而言，除了使用组件提供的默认行为，用户还可以实现自定义的组件关闭行为。\n\n"},{"title":"标签形态","order":"0","jsx":"import { Tag } from \"@icedesign/base\";\n\nfunction onClose(value, closed) {\n  console.log(value, closed);\n}\n\nfunction onChange(count) {\n  console.log(count);\n}\n\nReactDOM.render(\n  <div className=\"tag-list\">\n    <div className=\"tag-list-item\">\n      <Tag shape=\"selectable\" type=\"normal\">\n        Normal Selectable Tag\n      </Tag>\n      <Tag shape=\"selectable\" type=\"primary\">\n        Primary Selectable Tag\n      </Tag>\n      <Tag shape=\"selectable\" type=\"secondary\">\n        Secondary Selectable Tag\n      </Tag>\n    </div>\n\n    <div className=\"tag-list-item\">\n      <Tag\n        shape=\"deletable\"\n        type=\"normal\"\n        value=\"Normal Deletable Tag\"\n        onClose={onClose}\n      >\n        Normal Deletable Tag\n      </Tag>\n      <Tag\n        shape=\"deletable\"\n        type=\"primary\"\n        value=\"Primary Deletable Tag\"\n        onClose={onClose}\n      >\n        Primary Deletable Tag\n      </Tag>\n      <Tag\n        shape=\"deletable\"\n        type=\"secondary\"\n        value=\"Secondary Deletable Tag\"\n        onClose={onClose}\n      >\n        Secondary Deletable Tag\n      </Tag>\n    </div>\n\n    <div className=\"tag-list-item\">\n      <Tag shape=\"interactive\" count={2} onChange={onChange}>\n        Interfactive Tag\n      </Tag>\n    </div>\n\n    <div className=\"tag-list-item\">\n      <Tag shape=\"link\" type=\"normal\">\n        <a href=\"//www.alibaba.com\" target=\"_blank\">\n          Normal Link Tag\n        </a>\n      </Tag>\n      <Tag shape=\"link\" type=\"primary\">\n        <a href=\"//www.alibaba.com\" target=\"_blank\">\n          Primary Link Tag\n        </a>\n      </Tag>\n      <Tag shape=\"link\" type=\"secondary\">\n        <a href=\"//www.alibaba.com\" target=\"_blank\">\n          Secondary Link Tag\n        </a>\n      </Tag>\n    </div>\n\n    <div className=\"tag-list-item\">\n      <Tag shape=\"readonly\">Readonly Tag</Tag>\n    </div>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n`closable` 和 `interactive` 则会直接隐藏超出区域的文本。\n建议不要在标签中使用过长的文本，对于 `selectable`, `link`, `readonly` 这三种 tag 而言，超出宽度的文本会使用 `...` 表示。\n可以通过 `type` 属性来控制标签在某种形态下的类型。\n`readonly` 只读型标签：无交互行为。并且，只读型标签没有级别。\n`link` 跳转型标签<br />\n`interactive` 可互动标签<br />\n`closable` 可关闭标签<br />\n`selectable` 可选择标签<br />\n通过设置 `shape` 属性值来更改标签的类型，可选值包括：\n标签有四种类型：可选择标签、可关闭标签、可互动标签、跳转型标签和只读型标签。\n\n"},{"title":"尺寸","order":"1","jsx":"import { Tag } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Tag shape=\"selectable\">Medium Tag</Tag>\n    <Tag shape=\"selectable\" size=\"small\">\n      Small Tag\n    </Tag>\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n则默认使用 `medium` 尺寸的值。\n需要注意的，`large` 尺寸只是为了兼容表单场景而存在，实际并不存在 `large` 尺寸，如果用户设置了 `size='large'`，\n通过设置 `size` 为 `small` `medium` 可分别创建小标签、中等标签，若不设置 `type` 值则为中等标签。\n\n"}]},{"name":"TimePicker","category":"Components","title":"时间选择框","type":"表单","importStatement":"import { TimePicker } from '@icedesign/base';","body":"\n\n## Guide\n\n### 何时使用\n\n当用户需要输入一个时间，可以点击标准输入框，弹出时间面板进行选择。\n\n","propsSchema":{"name":"TimePicker","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式的品牌前缀"},"placeholder":{"type":{"name":"string"},"required":false,"description":"输入框提示文案","docblock":"输入框提示文案"},"defaultValue":{"type":{"name":"any"},"required":false,"description":"默认时间","docblock":"默认时间"},"value":{"type":{"name":"any"},"required":false,"description":"时间","docblock":"时间"},"onChange":{"type":{"name":"func"},"required":false,"description":"时间值改变时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"时间值改变时的回调\n@param {String} date 日期值\n@param {String} formatDate 格式化后的日期值","params":[{"name":"date","description":"日期值","type":{"name":"String"}},{"name":"formatDate","description":"格式化后的日期值","type":{"name":"String"}}],"returns":null},"defaultOpen":{"type":{"name":"bool"},"required":false,"description":"默认是否展开","docblock":"默认是否展开"},"open":{"type":{"name":"bool"},"required":false,"description":"展开","docblock":"展开"},"onOpenChange":{"type":{"name":"func"},"required":false,"description":"展开状态改变时的回调","defaultValue":{"value":"() => {}","computed":false},"docblock":"展开状态改变时的回调\n@param {Boolean} open 是否展开","params":[{"name":"open","description":"是否展开","type":{"name":"Boolean"}}],"returns":null},"format":{"type":{"name":"string"},"required":false,"description":"展示的时间格式，目前只支持 24 小时值","defaultValue":{"value":"'HH:mm:ss'","computed":false},"docblock":"展示的时间格式，目前只支持 24 小时值"},"disabled":{"type":{"name":"bool"},"required":false,"description":"禁用全部操作","docblock":"禁用全部操作"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"输入框尺寸","defaultValue":{"value":"'medium'","computed":false},"docblock":"输入框尺寸"},"popupStyle":{"type":{"name":"object"},"required":false,"description":"弹层样式","docblock":"弹层样式","properties":[]},"popupAlign":{"type":{"name":"string"},"required":false,"description":"弹层对齐方式","defaultValue":{"value":"'tl tl'","computed":false},"docblock":"弹层对齐方式"},"popupOffset":{"type":{"name":"array"},"required":false,"description":"弹层偏移","defaultValue":{"value":"[0, 0]","computed":false},"docblock":"弹层偏移"},"disabledHours":{"type":{"name":"func"},"required":false,"description":"禁止选择指定分小时\nFunction() => Array","docblock":"禁止选择指定分小时\nFunction() => Array","params":[],"returns":null},"disabledMinutes":{"type":{"name":"func"},"required":false,"description":"禁止选择指定分钟\nFunction() => Array","docblock":"禁止选择指定分钟\nFunction() => Array","params":[],"returns":null},"disabledSeconds":{"type":{"name":"func"},"required":false,"description":"禁止选择部分秒\nFunction() => Array","docblock":"禁止选择部分秒\nFunction() => Array","params":[],"returns":null},"hasClear":{"type":{"name":"bool"},"required":false,"description":"是否显示清空按钮","defaultValue":{"value":"true","computed":false},"docblock":"是否显示清空按钮"},"className":{"type":{"name":"string"},"required":false,"description":"自定样式名","docblock":"自定样式名"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\nplaceholder | 输入框提示文案 | String | -\ndefaultValue | 默认时间 | any | -\nvalue | 时间 | any | -\nonChange | 时间值改变时的回调<br><br>**签名**:<br>Function(date: String, formatDate: String) => void<br>**参数**:<br>*date*: {String} 日期值<br>*formatDate*: {String} 格式化后的日期值 | Function | () =&gt; {}\ndefaultOpen | 默认是否展开 | Boolean | -\nopen | 展开 | Boolean | -\nonOpenChange | 展开状态改变时的回调<br><br>**签名**:<br>Function(open: Boolean) => void<br>**参数**:<br>*open*: {Boolean} 是否展开 | Function | () =&gt; {}\nformat | 展示的时间格式，目前只支持 24 小时值 | String | 'HH:mm:ss'\ndisabled | 禁用全部操作 | Boolean | -\nsize | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\npopupStyle | 弹层样式 | Object | -\npopupAlign | 弹层对齐方式 | String | 'tl tl'\npopupOffset | 弹层偏移 | Array | [0, 0]\ndisabledHours | 禁止选择指定分小时<br>Function() => Array<br><br>**签名**:<br>Function() => void | Function | -\ndisabledMinutes | 禁止选择指定分钟<br>Function() => Array<br><br>**签名**:<br>Function() => void | Function | -\ndisabledSeconds | 禁止选择部分秒<br>Function() => Array<br><br>**签名**:<br>Function() => void | Function | -\nhasClear | 是否显示清空按钮 | Boolean | true\nclassName | 自定样式名 | String | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { TimePicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <TimePicker\n    onChange={(val, str) => console.log(val, str)}\n    language=\"en-us\"\n  />,\n  mountNode\n);\n\n","css":"","body":"\n最简单的用法。\n\n"},{"title":"默认值","order":"2","jsx":"import { TimePicker } from \"@icedesign/base\";\n\nReactDOM.render(<TimePicker defaultValue=\"11:11:11\" />, mountNode);\n\n","css":"","body":"\n默认值。\n\n"},{"title":"禁用时分秒","order":"3","jsx":"import { TimePicker } from \"@icedesign/base\";\n\nfunction disabledHours() {\n  return [6, 12, 18, 23];\n}\n\nfunction disabledMinutes() {\n  return [10, 20, 30, 40, 50];\n}\n\nfunction disabledSeconds() {\n  return [10, 20, 30, 40, 50];\n}\n\nReactDOM.render(\n  <div>\n    <h3>禁用全部</h3>\n    <TimePicker disabled defaultValue=\"11:11:11\" />\n    <h3>禁用时</h3>\n    <TimePicker disabledHours={disabledHours} />\n    <h3>禁用分</h3>\n    <TimePicker disabledMinutes={disabledMinutes} />\n    <h3>禁用秒</h3>\n    <TimePicker disabledSeconds={disabledSeconds} />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n禁用全部和禁用部分选择项\n\n"},{"title":"结合 Field 使用","order":"4","jsx":"import { TimePicker, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  render() {\n    const init = this.field.init;\n    const props = init(\"test-time-picker\", {\n      rules: [{ required: true, message: \"具体时间点必须要选\" }],\n      initValue: \"00:00:00\"\n    });\n\n    return <TimePicker {...props} />;\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n配合Field使用\n\n"},{"title":"格式化时间","order":"5","jsx":"import { TimePicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>不可选择秒</h3>\n    <TimePicker format=\"HH:mm\" />\n    <h3>不可选择小时</h3>\n    <TimePicker format=\"mm:ss\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n例如不可选择小时，或者不可选择秒\n可以通过 `format` 属性来格式化时间，可以通过该属性来禁用某一列。\n\n"},{"title":"尺寸","order":"1","jsx":"import { TimePicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>大号</h3>\n    <TimePicker size=\"large\" />\n    <h3>中号</h3>\n    <TimePicker />\n    <h3>小号</h3>\n    <TimePicker size=\"small\" />\n  </div>,\n  mountNode\n);\n\n","css":"","body":"\n其中默认尺寸为 `medium`。\n可以通过 `size` 属性调整组件输入框的大小，可选值包括 `large`, `medium`, `small`。\n\n"}]},{"name":"Timeline","category":"Components","title":"时间轴","type":"展示","importStatement":"import { Timeline } from '@icedesign/base';","body":"\n\n## Guide\n\n垂直展示的时间流信息。\n\n### 何时使用\n\n-   当有一系列信息需要从上至下按时间排列时。\n-   需要有一条时间轴进行视觉上的串联时。\n\n","propsSchema":{"name":"Timeline","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式的品牌前缀"},"fold":{"type":{"name":"array"},"required":false,"description":"自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]`","defaultValue":{"value":"[]","computed":false},"docblock":"自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]`"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"}},"methods":[],"subComponents":[{"name":"Item","props":{"state":{"type":{"name":"enum","value":[{"value":"'done'","computed":false},{"value":"'process'","computed":false},{"value":"'error'","computed":false},{"value":"'success'","computed":false}]},"required":false,"description":"节点状态","defaultValue":{"value":"'done'","computed":false},"docblock":"节点状态"},"icon":{"type":{"name":"string"},"required":false,"description":"图标","docblock":"图标"},"time":{"type":{"name":"node"},"required":false,"description":"格式化后的时间","docblock":"格式化后的时间"},"title":{"type":{"name":"node"},"required":false,"description":"标题","docblock":"标题"},"content":{"type":{"name":"node"},"required":false,"description":"内容","docblock":"内容"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\nfold | 自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]` | Array | []\nclassName | 自定义类名 | String | -\n","methodREADME":[],"subComponentsREADME":[{"name":"Item","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nstate | 节点状态<br><br>**可选值**:<br>'done', 'process', 'error', 'success' | Enum | 'done'\nicon | 图标 | String | -\ntime | 格式化后的时间 | ReactNode | -\ntitle | 标题 | ReactNode | -\ncontent | 内容 | ReactNode | -\n","methodREADME":[]}],"demos":[{"title":"基本","order":"0","jsx":"import { Timeline } from \"@icedesign/base\";\n\nconst { Item: TimelineItem } = Timeline;\n\nReactDOM.render(\n  <Timeline>\n    <TimelineItem title=\"收件\" state=\"process\" />\n    <TimelineItem title=\"发货\" />\n    <TimelineItem title=\"下单\" />\n  </Timeline>,\n  mountNode\n);\n\n","css":"","body":"\n最简单的用法。\n\n"},{"title":"内容","order":"1","jsx":"import { Timeline } from \"@icedesign/base\";\n\nconst { Item: TimelineItem } = Timeline;\n\nReactDOM.render(\n  <Timeline>\n    <TimelineItem\n      title=\"签收\"\n      content={\n        <div>\n          【杭州市】已签收,签收人是阿里巴巴小邮局，感谢使用申通快递，期待再次为您服务\n        </div>\n      }\n      time={\"2016-06-10 10:30:00\"}\n      state=\"process\"\n    />\n    <TimelineItem\n      title=\"派送\"\n      content=\"【杭州市】快件已到达 浙江杭州滨江公司\"\n      time={\"2016-06-10 09:30:00\"}\n    />\n    <TimelineItem\n      title=\"派送\"\n      content=\"【杭州市】浙江杭州滨江公司派件员正在为您派件\"\n      time={\"2016-06-10 09:03:00\"}\n    />\n    <TimelineItem\n      title=\"运输\"\n      content=\"【杭州市】浙江杭州转运中心 已发出\"\n      time={\"2016-06-10 06:10:00\"}\n    />\n    <TimelineItem\n      title=\"运输\"\n      content=\"【东莞市】广东东莞转运中心 已发出\"\n      time={\"2016-06-09 18:00:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】申通快递 广东东莞凤岗分部收件员 已揽件\"\n      time={\"2016-06-09 16:12:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】商家正通知快递公司揽件\"\n      time={\"2016-06-09 14:00:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】您的订单待配货\"\n      time={\"2016-06-09 10:12:19\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】您的订单开始处理\"\n      time={\"2016-06-09 10:01:09\"}\n      icon=\"atm\"\n    />\n  </Timeline>,\n  mountNode\n);\n\n","css":"","body":"\n带内容的用法，分别添加title，content，icon的效果。\n\n"},{"title":"折叠","order":"2","jsx":"import { Timeline } from \"@icedesign/base\";\n\nconst { Item: TimelineItem } = Timeline;\n\nReactDOM.render(\n  <Timeline\n    fold={[\n      { foldArea: [1, 2], foldShow: false },\n      { foldArea: [5], foldShow: false }\n    ]}\n  >\n    <TimelineItem\n      title=\"签收\"\n      content=\"【杭州市】已签收,签收人是阿里巴巴小邮局，感谢使用申通快递，期待再次为您服务\"\n      time={\"2016-06-10 10:30:00\"}\n      state=\"process\"\n    />\n    <TimelineItem\n      title=\"派送\"\n      content=\"【杭州市】快件已到达 浙江杭州滨江公司\"\n      time={\"2016-06-10 09:30:00\"}\n    />\n    <TimelineItem\n      title=\"派送\"\n      content=\"【杭州市】浙江杭州滨江公司派件员正在为您派件\"\n      time={\"2016-06-10 09:03:00\"}\n    />\n    <TimelineItem\n      title=\"运输\"\n      content=\"【杭州市】浙江杭州转运中心 已发出\"\n      time={\"2016-06-10 06:10:00\"}\n    />\n    <TimelineItem\n      title=\"运输\"\n      content=\"【东莞市】广东东莞转运中心 已发出\"\n      time={\"2016-06-09 18:00:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】申通快递 广东东莞凤岗分部收件员 已揽件\"\n      time={\"2016-06-09 16:12:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】商家正通知快递公司揽件\"\n      time={\"2016-06-09 14:00:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】您的订单待配货\"\n      time={\"2016-06-09 10:12:19\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】您的订单开始处理\"\n      time={\"2016-06-09 10:01:09\"}\n    />\n  </Timeline>,\n  mountNode\n);\n\n","css":"","body":"\n自定义折叠区域。\n\n"},{"title":"状态","order":"0","jsx":"import { Timeline } from \"@icedesign/base\";\n\nconst { Item: TimelineItem } = Timeline;\n\nReactDOM.render(\n  <Timeline>\n    <TimelineItem title=\"多云\" time={\"2016-06-10 10:30:00\"} state=\"process\" />\n    <TimelineItem title=\"晴天\" time={\"2016-06-11\"} state=\"success\" />\n    <TimelineItem title=\"下雨\" time={\"2016-06-09\"} state=\"error\" />\n  </Timeline>,\n  mountNode\n);\n\n","css":"","body":"\n设置每个节点不同的状态。\n\n"}]},{"name":"Transfer","category":"Components","title":"穿梭框","type":"基本","importStatement":"import { Transfer } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n用直观的方式在两栏中移动元素，完成选择行为。\n\n","propsSchema":{"name":"Transfer","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"dataSource":{"type":{"name":"arrayOf","value":{"name":"object"}},"required":false,"description":"数据源","defaultValue":{"value":"[]","computed":false},"docblock":"数据源"},"value":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"（用于受控）当前值","docblock":"（用于受控）当前值"},"defaultValue":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"（用于非受控）初始值","defaultValue":{"value":"[]","computed":false},"docblock":"（用于非受控）初始值"},"onChange":{"type":{"name":"func"},"required":false,"description":"值发生改变的时候触发的回调函数","docblock":"值发生改变的时候触发的回调函数\n@param {Array} value 右面板值\n@param {Array} data 右面板数据\n@param {Object} extra 额外参数\n@param {Array} extra.leftValue 左面板值\n@param {Array} extra.leftData 左面板数据\n@param {Array} extra.movedValue 发生移动的值\n@param {Object} extra.movedData 发生移动的数据\n@param {String} extra.direction 移动的方向，值为'left'或'right'","params":[{"name":"value","description":"右面板值","type":{"name":"Array"}},{"name":"data","description":"右面板数据","type":{"name":"Array"}},{"name":"extra","description":"额外参数","type":{"name":"Object"}},{"name":"extra.leftValue","description":"左面板值","type":{"name":"Array"}},{"name":"extra.leftData","description":"左面板数据","type":{"name":"Array"}},{"name":"extra.movedValue","description":"发生移动的值","type":{"name":"Array"}},{"name":"extra.movedData","description":"发生移动的数据","type":{"name":"Object"}},{"name":"extra.direction","description":"移动的方向，值为'left'或'right'","type":{"name":"String"}}],"returns":null},"showSearch":{"type":{"name":"bool"},"required":false,"description":"是否显示搜索框","defaultValue":{"value":"false","computed":false},"docblock":"是否显示搜索框"},"searchPlaceholder":{"type":{"name":"string"},"required":false,"description":"搜索框占位符","defaultValue":{"value":"'Search'","computed":false},"docblock":"搜索框占位符"},"titles":{"type":{"name":"arrayOf","value":{"name":"node"}},"required":false,"description":"左右面板标题","defaultValue":{"value":"[]","computed":false},"docblock":"左右面板标题"},"operations":{"type":{"name":"arrayOf","value":{"name":"node"}},"required":false,"description":"向右向左移动按钮显示内容","defaultValue":{"value":"[<Icon type=\"arrow-right\" />, <Icon type=\"arrow-left\" />]","computed":false},"docblock":"向右向左移动按钮显示内容"},"defaultLeftChecked":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"左面板默认选中值","defaultValue":{"value":"[]","computed":false},"docblock":"左面板默认选中值"},"defaultRightChecked":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"右面板默认选中值","defaultValue":{"value":"[]","computed":false},"docblock":"右面板默认选中值"},"listStyle":{"type":{"name":"object"},"required":false,"description":"左右面板列表自定义样式","docblock":"左右面板列表自定义样式","properties":[]},"locale":{"type":{"name":"object"},"required":false,"description":"自定义国际化文案对象","docblock":"自定义国际化文案对象","properties":[]},"language":{"type":{"name":"enum","value":[{"value":"'zh-cn'","computed":false},{"value":"'en-us'","computed":false},{"value":"'zh-tw'","computed":false}]},"required":false,"description":"自定义国际化语言","docblock":"自定义国际化语言"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ndataSource | 数据源 | Array&lt;Object&gt; | []\nvalue | （用于受控）当前值 | Array&lt;String&gt; | -\ndefaultValue | （用于非受控）初始值 | Array&lt;String&gt; | []\nonChange | 值发生改变的时候触发的回调函数<br><br>**签名**:<br>Function(value: Array, data: Array, extra: Object) => void<br>**参数**:<br>*value*: {Array} 右面板值<br>*data*: {Array} 右面板数据<br>*extra*: {Object} 额外参数<br>*extra.leftValue*: {Array} 左面板值<br>*extra.leftData*: {Array} 左面板数据<br>*extra.movedValue*: {Array} 发生移动的值<br>*extra.movedData*: {Object} 发生移动的数据<br>*extra.direction*: {String} 移动的方向，值为'left'或'right' | Function | -\nshowSearch | 是否显示搜索框 | Boolean | false\nsearchPlaceholder | 搜索框占位符 | String | 'Search'\ntitles | 左右面板标题 | Array&lt;ReactNode&gt; | []\noperations | 向右向左移动按钮显示内容 | Array&lt;ReactNode&gt; | [&lt;Icon type=\"arrow-right\" /&gt;, &lt;Icon type=\"arrow-left\" /&gt;]\ndefaultLeftChecked | 左面板默认选中值 | Array&lt;String&gt; | []\ndefaultRightChecked | 右面板默认选中值 | Array&lt;String&gt; | []\nlistStyle | 左右面板列表自定义样式 | Object | -\nlocale | 自定义国际化文案对象 | Object | -\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'zh-cn', 'en-us', 'zh-tw' | Enum | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Transfer } from \"@icedesign/base\";\n\nconst dataSource = (() => {\n  const dataSource = [];\n\n  for (let i = 0; i < 10; i++) {\n    dataSource.push({\n      label: `content${i}`,\n      value: `${i}`,\n      disabled: i % 4 === 0\n    });\n  }\n\n  return dataSource;\n})();\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  render() {\n    return (\n      <Transfer\n        defaultValue={[\"3\"]}\n        dataSource={dataSource}\n        defaultLeftChecked={[\"1\"]}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n最简单的用法。\n\n"},{"title":"受控","order":"1","jsx":"import { Transfer } from \"@icedesign/base\";\n\nconst dataSource = (() => {\n  const dataSource = [];\n\n  for (let i = 0; i < 10; i++) {\n    dataSource.push({\n      label: `content${i}`,\n      value: `${i}`,\n      disabled: i % 4 === 0\n    });\n  }\n\n  return dataSource;\n})();\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: [\"3\"]\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <Transfer\n        value={this.state.value}\n        dataSource={dataSource}\n        defaultLeftChecked={[\"1\"]}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n展示受控的用法。\n\n"},{"title":"自定义","order":"3","jsx":"import { Transfer } from \"@icedesign/base\";\n\nconst dataSource = (() => {\n  const dataSource = [];\n\n  for (let i = 0; i < 10; i++) {\n    dataSource.push({\n      label:\n        i % 3 === 0\n          ? `content${i}contentcontentcontentcontentcontent`\n          : `content${i}`,\n      value: `${i}`,\n      disabled: i % 4 === 0\n    });\n  }\n\n  return dataSource;\n})();\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  render() {\n    return (\n      <Transfer\n        defaultValue={[\"3\"]}\n        dataSource={dataSource}\n        listStyle={{ width: \"200px\", height: \"192px\" }}\n        defaultLeftChecked={[\"1\"]}\n        onChange={this.handleChange}\n        language=\"en-us\"\n        titles={[\"Source\", \"Target\"]}\n        operations={[\">>\", \"<<\"]}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n展示自定义样式的用法。\n\n"},{"title":"搜索","order":"2","jsx":"import { Transfer } from \"@icedesign/base\";\n\nconst dataSource = (() => {\n  const dataSource = [];\n\n  for (let i = 0; i < 10; i++) {\n    dataSource.push({\n      label: `content${i}`,\n      value: `${i}`,\n      disabled: i % 4 === 0\n    });\n  }\n\n  return dataSource;\n})();\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  render() {\n    return (\n      <Transfer\n        showSearch\n        defaultValue={[\"3\"]}\n        dataSource={dataSource}\n        defaultLeftChecked={[\"1\"]}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n展示搜索的用法。\n\n"}]},{"name":"TreeSelect","category":"Components","title":"树型选择控件","type":"基本","importStatement":"import { TreeSelect } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n类似 Select 的选择控件，可选择的数据结构是一个树形结构时，可以使用 TreeSelect，例如公司层级、学科系统、分类目录等等。\n\n","propsSchema":{"name":"TreeSelect","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"树节点","docblock":"树节点"},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"选择框大小","defaultValue":{"value":"'medium'","computed":false},"docblock":"选择框大小"},"shape":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'arrow-only'","computed":false}]},"required":false,"description":"选择框形状","defaultValue":{"value":"'normal'","computed":false},"docblock":"选择框形状"},"placeholder":{"type":{"name":"string"},"required":false,"description":"选择框占位符","docblock":"选择框占位符"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁用","defaultValue":{"value":"false","computed":false},"docblock":"是否禁用"},"hasArrow":{"type":{"name":"bool"},"required":false,"description":"是否显示右侧的箭头","defaultValue":{"value":"true","computed":false},"docblock":"是否显示右侧的箭头"},"hasClear":{"type":{"name":"bool"},"required":false,"description":"是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效","defaultValue":{"value":"false","computed":false},"docblock":"是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效"},"autoWidth":{"type":{"name":"bool"},"required":false,"description":"下拉框是否与选择器对齐","defaultValue":{"value":"false","computed":false},"docblock":"下拉框是否与选择器对齐"},"dataSource":{"type":{"name":"arrayOf","value":{"name":"object"}},"required":false,"description":"数据源，该属性优先级高于 children","docblock":"数据源，该属性优先级高于 children"},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}]},"required":false,"description":"（受控）当前值","docblock":"（受控）当前值"},"defaultValue":{"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}]},"required":false,"description":"（非受控）默认值","defaultValue":{"value":"null","computed":false},"docblock":"（非受控）默认值"},"onChange":{"type":{"name":"func"},"required":false,"description":"选中值改变时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"选中值改变时触发的回调函数\n@param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n@param {Object|Array} data 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点","params":[{"name":"value","description":"选中的值，单选时返回单个值，多选时返回数组","type":{"name":"union","value":["String","Array"]}},{"name":"data","description":"选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点","type":{"name":"union","value":["Object","Array"]}}],"returns":null},"defaultVisible":{"type":{"name":"bool"},"required":false,"description":"初始下拉框是否显示","defaultValue":{"value":"false","computed":false},"docblock":"初始下拉框是否显示"},"showSearch":{"type":{"name":"bool"},"required":false,"description":"是否显示搜索框","defaultValue":{"value":"false","computed":false},"docblock":"是否显示搜索框"},"onSearch":{"type":{"name":"func"},"required":false,"description":"在搜索框中输入时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"在搜索框中输入时触发的回调函数\n@param {String} keyword 输入的关键字","params":[{"name":"keyword","description":"输入的关键字","type":{"name":"String"}}],"returns":null},"multiple":{"type":{"name":"bool"},"required":false,"description":"是否支持多选","defaultValue":{"value":"false","computed":false},"docblock":"是否支持多选"},"treeCheckable":{"type":{"name":"bool"},"required":false,"description":"下拉框中的树是否支持勾选节点的复选框","defaultValue":{"value":"false","computed":false},"docblock":"下拉框中的树是否支持勾选节点的复选框"},"treeCheckStrictly":{"type":{"name":"bool"},"required":false,"description":"下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）","defaultValue":{"value":"false","computed":false},"docblock":"下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）"},"treeDefaultExpandAll":{"type":{"name":"bool"},"required":false,"description":"下拉框中的树是否默认展开所有节点","defaultValue":{"value":"false","computed":false},"docblock":"下拉框中的树是否默认展开所有节点"},"treeDefaultExpandedKeys":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"下拉框中的树默认展开节点key的数组","defaultValue":{"value":"[]","computed":false},"docblock":"下拉框中的树默认展开节点key的数组"},"treeLoadData":{"type":{"name":"func"},"required":false,"description":"下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=tree#tree-4)","docblock":"下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=tree#tree-4)\n@param {ReactElement} node 被点击展开的节点","params":[{"name":"node","description":"被点击展开的节点","type":{"name":"ReactElement"}}],"returns":null},"popupClassName":{"type":{"name":"string"},"required":false,"description":"下拉框样式自定义类名","docblock":"下拉框样式自定义类名"},"container":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":false,"description":"下拉框挂载的容器节点","docblock":"下拉框挂载的容器节点"}},"methods":[],"subComponents":[]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 树节点 | ReactNode | -\nsize | 选择框大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nshape | 选择框形状<br><br>**可选值**:<br>'normal', 'arrow-only' | Enum | 'normal'\nplaceholder | 选择框占位符 | String | -\ndisabled | 是否禁用 | Boolean | false\nhasArrow | 是否显示右侧的箭头 | Boolean | true\nhasClear | 是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效 | Boolean | false\nautoWidth | 下拉框是否与选择器对齐 | Boolean | false\ndataSource | 数据源，该属性优先级高于 children | Array&lt;Object&gt; | -\nvalue | （受控）当前值 | String/Array&lt;String&gt; | -\ndefaultValue | （非受控）默认值 | String/Array&lt;String&gt; | null\nonChange | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array) => void<br>**参数**:<br>*value*: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>*data*: {Object/Array} 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点 | Function | () =&gt; {}\ndefaultVisible | 初始下拉框是否显示 | Boolean | false\nshowSearch | 是否显示搜索框 | Boolean | false\nonSearch | 在搜索框中输入时触发的回调函数<br><br>**签名**:<br>Function(keyword: String) => void<br>**参数**:<br>*keyword*: {String} 输入的关键字 | Function | () =&gt; {}\nmultiple | 是否支持多选 | Boolean | false\ntreeCheckable | 下拉框中的树是否支持勾选节点的复选框 | Boolean | false\ntreeCheckStrictly | 下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联） | Boolean | false\ntreeDefaultExpandAll | 下拉框中的树是否默认展开所有节点 | Boolean | false\ntreeDefaultExpandedKeys | 下拉框中的树默认展开节点key的数组 | Array&lt;String&gt; | []\ntreeLoadData | 下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=tree#tree-4)<br><br>**签名**:<br>Function(node: ReactElement) => void<br>**参数**:<br>*node*: {ReactElement} 被点击展开的节点 | Function | -\npopupClassName | 下拉框样式自定义类名 | String | -\ncontainer | 下拉框挂载的容器节点 | String/Function | -\n","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { TreeSelect } from \"@icedesign/base\";\n\nconst TreeNode = TreeSelect.Node;\n\nclass Demo extends React.Component {\n  handleChange(value, data) {\n    console.log(value, data);\n  }\n\n  render() {\n    return (\n      <TreeSelect\n        treeDefaultExpandAll\n        onChange={::this.handleChange}\n        hasClear\n        autoWidth\n        style={{ width: 200 }}\n      >\n        <TreeNode key=\"1\" value=\"1\" label=\"服装\">\n          <TreeNode key=\"2\" value=\"2\" label=\"男装\">\n            <TreeNode key=\"4\" value=\"4\" label=\"外套\" />\n            <TreeNode key=\"5\" value=\"5\" label=\"夹克\" />\n          </TreeNode>\n          <TreeNode key=\"3\" value=\"3\" label=\"女装\">\n            <TreeNode key=\"6\" value=\"6\" label=\"裙子\" />\n          </TreeNode>\n        </TreeNode>\n      </TreeSelect>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n最简单的单选用法。\n\n"},{"title":"复选框多选","order":"2","jsx":"import { TreeSelect } from \"@icedesign/base\";\n\nconst treeData = [\n  {\n    label: \"服装\",\n    value: \"1\",\n    children: [\n      {\n        label: \"男装\",\n        value: \"2\",\n        children: [\n          {\n            label: \"外套\",\n            value: \"4\"\n          },\n          {\n            label: \"夹克\",\n            value: \"5\"\n          }\n        ]\n      },\n      {\n        label: \"女装\",\n        value: \"3\",\n        children: [\n          {\n            label: \"裙子\",\n            value: \"6\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  handleChange(value, data) {\n    console.log(value, data);\n  }\n\n  render() {\n    return (\n      <TreeSelect\n        treeDefaultExpandAll\n        treeCheckable\n        autoWidth\n        dataSource={treeData}\n        onChange={::this.handleChange}\n        style={{ width: 200 }}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n展示复选框多选的功能。\n\n"},{"title":"受控","order":"3","jsx":"import { TreeSelect } from \"@icedesign/base\";\n\nconst treeData = [\n  {\n    label: \"服装\",\n    value: \"1\",\n    children: [\n      {\n        label: \"男装\",\n        value: \"2\",\n        children: [\n          {\n            label: \"外套\",\n            value: \"4\"\n          },\n          {\n            label: \"夹克\",\n            value: \"5\"\n          }\n        ]\n      },\n      {\n        label: \"女装\",\n        value: \"3\",\n        children: [\n          {\n            label: \"裙子\",\n            value: \"6\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  state = {\n    value: [\"4\", \"6\"]\n  };\n\n  handleChange(value, data) {\n    console.log(value, data);\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <TreeSelect\n        treeDefaultExpandAll\n        treeCheckable\n        autoWidth\n        dataSource={treeData}\n        value={this.state.value}\n        onChange={::this.handleChange}\n        style={{ width: 200 }}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n展示树选择受控的用法。\n\n"},{"title":"使用数据直接生成","order":"1","jsx":"import { TreeSelect } from \"@icedesign/base\";\n\nconst treeData = [\n  {\n    label: \"服装\",\n    value: \"1\",\n    selectable: false,\n    children: [\n      {\n        label: \"男装\",\n        value: \"2\",\n        children: [\n          {\n            label: \"外套\",\n            value: \"4\"\n          },\n          {\n            label: \"夹克\",\n            value: \"5\",\n            disabled: true\n          }\n        ]\n      },\n      {\n        label: \"女装\",\n        value: \"3\",\n        children: [\n          {\n            label: \"裙子\",\n            value: \"6\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  handleChange(value, data) {\n    console.log(value, data);\n  }\n\n  render() {\n    return (\n      <TreeSelect\n        treeDefaultExpandAll\n        dataSource={treeData}\n        onChange={::this.handleChange}\n        style={{ width: 200 }}\n        autoWidth\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n使用`dataSource`生成树结构，除设置label, value, children属性外，还可传入TreeNode的其他属性，包括selectable, disabled, disableCheckbox, isLeaf，推荐使用`dataSource`而不是手动生成`TreeNode`的方式生成树，这样使用更简单，性能更好。\n\n"},{"title":"搜索用法","order":"4","jsx":"import { TreeSelect } from \"@icedesign/base\";\n\nconst treeData = [\n  {\n    label: \"服装\",\n    value: \"1\",\n    selectable: false,\n    children: [\n      {\n        label: \"男装\",\n        value: \"2\",\n        children: [\n          {\n            label: \"外套\",\n            value: \"4\"\n          },\n          {\n            label: \"夹克\",\n            value: \"5\",\n            disabled: true\n          }\n        ]\n      },\n      {\n        label: \"女装\",\n        value: \"3\",\n        children: [\n          {\n            label: \"裙子\",\n            value: \"6\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  handleChange(value, data) {\n    console.log(value, data);\n  }\n\n  handleSearch(keyword) {\n    console.log(keyword);\n  }\n\n  render() {\n    return (\n      <TreeSelect\n        treeDefaultExpandAll\n        autoWidth\n        showSearch\n        dataSource={treeData}\n        onChange={::this.handleChange}\n        onSearch={::this.handleSearch}\n        style={{ width: 200 }}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n展示树选择的搜索用法。\n\n"}]},{"name":"Tree","category":"Components","title":"树形控件","type":"基本","importStatement":"import { Tree } from '@icedesign/base';","body":"\n\n## 何时使用\n\n文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用`树控件`可以完整展现其中的层级关系，并具有展开收起选择等交互功能。\n\n","propsSchema":{"name":"Tree","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"树节点","docblock":"树节点"},"showLine":{"type":{"name":"bool"},"required":false,"description":"是否显示树的线","defaultValue":{"value":"false","computed":false},"docblock":"是否显示树的线"},"selectable":{"type":{"name":"bool"},"required":false,"description":"是否支持选中节点","defaultValue":{"value":"true","computed":false},"docblock":"是否支持选中节点"},"selectedKeys":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"（用于受控）当前选中节点key的数组","docblock":"（用于受控）当前选中节点key的数组"},"defaultSelectedKeys":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"（用于非受控）默认选中节点key的数组","defaultValue":{"value":"[]","computed":false},"docblock":"（用于非受控）默认选中节点key的数组"},"onSelect":{"type":{"name":"func"},"required":false,"description":"选中或取消选中节点时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"选中或取消选中节点时触发的回调函数\n@param {Array} selectedKeys 选中节点key的数组\n@param {Object} extra 额外参数\n@param {Array} extra.selectedNodes 选中节点的数组\n@param {ReactElement} extra.node 当前操作的节点\n@param {Boolean} extra.selected 当前操作是否是选中\n@param {String} extra.event 当前操作的类型，值为'select'","params":[{"name":"selectedKeys","description":"选中节点key的数组","type":{"name":"Array"}},{"name":"extra","description":"额外参数","type":{"name":"Object"}},{"name":"extra.selectedNodes","description":"选中节点的数组","type":{"name":"Array"}},{"name":"extra.node","description":"当前操作的节点","type":{"name":"ReactElement"}},{"name":"extra.selected","description":"当前操作是否是选中","type":{"name":"Boolean"}},{"name":"extra.event","description":"当前操作的类型，值为'select'","type":{"name":"String"}}],"returns":null},"multiple":{"type":{"name":"bool"},"required":false,"description":"是否支持多选","defaultValue":{"value":"false","computed":false},"docblock":"是否支持多选"},"checkable":{"type":{"name":"bool"},"required":false,"description":"是否支持勾选节点的复选框","defaultValue":{"value":"false","computed":false},"docblock":"是否支持勾选节点的复选框"},"checkedKeys":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"string"}},{"name":"object"}]},"required":false,"description":"（用于受控）当前勾选复选框节点key的数组或`{checked: Array, halfChecked: Array}`的对象","docblock":"（用于受控）当前勾选复选框节点key的数组或`{checked: Array, halfChecked: Array}`的对象"},"defaultCheckedKeys":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"（用于非受控）默认勾选复选框节点key的数组","defaultValue":{"value":"[]","computed":false},"docblock":"（用于非受控）默认勾选复选框节点key的数组"},"checkStrictly":{"type":{"name":"bool"},"required":false,"description":"勾选节点复选框是否完全受控（父子节点选中状态不再关联）","defaultValue":{"value":"false","computed":false},"docblock":"勾选节点复选框是否完全受控（父子节点选中状态不再关联）"},"enableCheckedCache":{"type":{"name":"bool"},"required":false,"description":"是否启用勾选节点复选框的缓存来提高性能，如果dataSource需要被动态更新，请将其设置为false","defaultValue":{"value":"true","computed":false},"docblock":"是否启用勾选节点复选框的缓存来提高性能，如果dataSource需要被动态更新，请将其设置为false"},"onCheck":{"type":{"name":"func"},"required":false,"description":"勾选或取消勾选复选框时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"勾选或取消勾选复选框时触发的回调函数\n@param {Array} checkedKeys 勾选复选框节点key的数组\n@param {Object} extra 额外参数\n@param {Array} extra.checkedNodes 勾选复选框节点的数组\n@param {Array} extra.checkedNodesPositions 包含有勾选复选框节点和其位置的对象的数组\n@param {Array} extra.halfCheckedKeys 半选复选框节点key的数组\n@param {ReactElement} extra.node 当前操作的节点\n@param {Boolean} extra.checked 当前操作是否是勾选\n@param {String} extra.event 当前操作的类型，值为'check'","params":[{"name":"checkedKeys","description":"勾选复选框节点key的数组","type":{"name":"Array"}},{"name":"extra","description":"额外参数","type":{"name":"Object"}},{"name":"extra.checkedNodes","description":"勾选复选框节点的数组","type":{"name":"Array"}},{"name":"extra.checkedNodesPositions","description":"包含有勾选复选框节点和其位置的对象的数组","type":{"name":"Array"}},{"name":"extra.halfCheckedKeys","description":"半选复选框节点key的数组","type":{"name":"Array"}},{"name":"extra.node","description":"当前操作的节点","type":{"name":"ReactElement"}},{"name":"extra.checked","description":"当前操作是否是勾选","type":{"name":"Boolean"}},{"name":"extra.event","description":"当前操作的类型，值为'check'","type":{"name":"String"}}],"returns":null},"expandedKeys":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"（用于受控）当前展开的节点key的数组","docblock":"（用于受控）当前展开的节点key的数组"},"defaultExpandedKeys":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"（用于非受控）默认展开的节点key的数组","defaultValue":{"value":"[]","computed":false},"docblock":"（用于非受控）默认展开的节点key的数组"},"defaultExpandAll":{"type":{"name":"bool"},"required":false,"description":"是否默认展开所有节点","defaultValue":{"value":"false","computed":false},"docblock":"是否默认展开所有节点"},"autoExpandParent":{"type":{"name":"bool"},"required":false,"description":"是否自动展开父节点","defaultValue":{"value":"true","computed":false},"docblock":"是否自动展开父节点"},"onExpand":{"type":{"name":"func"},"required":false,"description":"展开或收起节点时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"展开或收起节点时触发的回调函数\n@param {Array} expandedKeys 展开的节点key的数组\n@param {Object} extra 额外参数\n@param {ReactElement} extra.node 当前操作的节点\n@param {Boolean} extra.expanded 当前操作是否是展开","params":[{"name":"expandedKeys","description":"展开的节点key的数组","type":{"name":"Array"}},{"name":"extra","description":"额外参数","type":{"name":"Object"}},{"name":"extra.node","description":"当前操作的节点","type":{"name":"ReactElement"}},{"name":"extra.expanded","description":"当前操作是否是展开","type":{"name":"Boolean"}}],"returns":null},"editable":{"type":{"name":"bool"},"required":false,"description":"是否支持编辑节点内容","defaultValue":{"value":"false","computed":false},"docblock":"是否支持编辑节点内容"},"onEditFinish":{"type":{"name":"func"},"required":false,"description":"编辑节点内容完成时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"编辑节点内容完成时触发的回调函数\n@param {String} key 编辑节点的key\n@param {String} label 编辑节点完成时节点的文本","params":[{"name":"key","description":"编辑节点的key","type":{"name":"String"}},{"name":"label","description":"编辑节点完成时节点的文本","type":{"name":"String"}}],"returns":null},"draggable":{"type":{"name":"bool"},"required":false,"description":"是否支持拖拽节点","defaultValue":{"value":"false","computed":false},"docblock":"是否支持拖拽节点"},"onDragStart":{"type":{"name":"func"},"required":false,"description":"开始拖拽节点时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"开始拖拽节点时触发的回调函数\n@param {Object} info 拖拽信息\n@param {Object} info.event 事件对象\n@param {ReactElement} info.node 拖拽的节点","params":[{"name":"info","description":"拖拽信息","type":{"name":"Object"}},{"name":"info.event","description":"事件对象","type":{"name":"Object"}},{"name":"info.node","description":"拖拽的节点","type":{"name":"ReactElement"}}],"returns":null},"onDragEnter":{"type":{"name":"func"},"required":false,"description":"拖拽节点进入目标节点时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"拖拽节点进入目标节点时触发的回调函数\n@param {Object} info 拖拽信息\n@param {Object} info.event 事件对象\n@param {ReactElement} info.node 目标节点\n@param {Array} info.expandedKeys 当前展开的节点key的数组","params":[{"name":"info","description":"拖拽信息","type":{"name":"Object"}},{"name":"info.event","description":"事件对象","type":{"name":"Object"}},{"name":"info.node","description":"目标节点","type":{"name":"ReactElement"}},{"name":"info.expandedKeys","description":"当前展开的节点key的数组","type":{"name":"Array"}}],"returns":null},"onDragOver":{"type":{"name":"func"},"required":false,"description":"拖拽节点在目标节点上移动的时候触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"拖拽节点在目标节点上移动的时候触发的回调函数\n@param {Object} info 拖拽信息\n@param {Object} info.event 事件对象\n@param {ReactElement} info.node 目标节点","params":[{"name":"info","description":"拖拽信息","type":{"name":"Object"}},{"name":"info.event","description":"事件对象","type":{"name":"Object"}},{"name":"info.node","description":"目标节点","type":{"name":"ReactElement"}}],"returns":null},"onDragLeave":{"type":{"name":"func"},"required":false,"description":"拖拽节点离开目标节点时触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"拖拽节点离开目标节点时触发的回调函数\n@param {Object} info 拖拽信息\n@param {Object} info.event 事件对象\n@param {ReactElement} info.node 目标节点","params":[{"name":"info","description":"拖拽信息","type":{"name":"Object"}},{"name":"info.event","description":"事件对象","type":{"name":"Object"}},{"name":"info.node","description":"目标节点","type":{"name":"ReactElement"}}],"returns":null},"onDrop":{"type":{"name":"func"},"required":false,"description":"拖拽节点放入目标节点内或前后触发的回调函数","defaultValue":{"value":"() => {}","computed":false},"docblock":"拖拽节点放入目标节点内或前后触发的回调函数\n@param {Object} info 拖拽信息\n@param {Object} info.event 事件对象\n@param {ReactElement} info.node 目标节点\n@param {ReactElement} info.dragNode 拖拽的节点\n@param {Array} info.dragNodesKeys 拖拽的节点和其子节点key的数组\n@param {Number} info.dropPosition 拖拽的节点在拖拽后被放置在当前层级的位置\n@param {Boolean} info.dropToGap 是否被放置在目标节点的前后（没有被放置在目标节点内部）","params":[{"name":"info","description":"拖拽信息","type":{"name":"Object"}},{"name":"info.event","description":"事件对象","type":{"name":"Object"}},{"name":"info.node","description":"目标节点","type":{"name":"ReactElement"}},{"name":"info.dragNode","description":"拖拽的节点","type":{"name":"ReactElement"}},{"name":"info.dragNodesKeys","description":"拖拽的节点和其子节点key的数组","type":{"name":"Array"}},{"name":"info.dropPosition","description":"拖拽的节点在拖拽后被放置在当前层级的位置","type":{"name":"Number"}},{"name":"info.dropToGap","description":"是否被放置在目标节点的前后（没有被放置在目标节点内部）","type":{"name":"Boolean"}}],"returns":null},"canDrop":{"type":{"name":"func"},"required":false,"description":"节点是否可被作为拖拽的目标节点","defaultValue":{"value":"() => true","computed":false},"docblock":"节点是否可被作为拖拽的目标节点\n@param {Object} info 拖拽信息\n@param {ReactElement} info.node 目标节点\n@param {ReactElement} info.dragNode 拖拽的节点\n@param {Array} info.dragNodesKeys 拖拽的节点和其子节点key的数组\n@param {Number} info.dropPosition 拖拽的节点在拖拽后被放置在当前层级的位置\n@param {Boolean} info.dropToGap 是否被放置在目标节点的前后（没有被放置在目标节点内部）\n@return {Boolean} 是否可以被当作目标节点","params":[{"name":"info","description":"拖拽信息","type":{"name":"Object"}},{"name":"info.node","description":"目标节点","type":{"name":"ReactElement"}},{"name":"info.dragNode","description":"拖拽的节点","type":{"name":"ReactElement"}},{"name":"info.dragNodesKeys","description":"拖拽的节点和其子节点key的数组","type":{"name":"Array"}},{"name":"info.dropPosition","description":"拖拽的节点在拖拽后被放置在当前层级的位置","type":{"name":"Number"}},{"name":"info.dropToGap","description":"是否被放置在目标节点的前后（没有被放置在目标节点内部）","type":{"name":"Boolean"}}],"returns":{"description":"是否可以被当作目标节点","type":{"name":"Boolean"}}},"loadData":{"type":{"name":"func"},"required":false,"description":"异步加载数据的函数","docblock":"异步加载数据的函数\n@param {ReactElement} node 被点击展开的节点","params":[{"name":"node","description":"被点击展开的节点","type":{"name":"ReactElement"}}],"returns":null},"filterTreeNode":{"type":{"name":"func"},"required":false,"description":"按需筛选高亮节点","docblock":"按需筛选高亮节点\n@param {ReactElement} node 待筛选的节点\n@return {Boolean} 是否被筛选中","params":[{"name":"node","description":"待筛选的节点","type":{"name":"ReactElement"}}],"returns":{"description":"是否被筛选中","type":{"name":"Boolean"}}},"onRightClick":{"type":{"name":"func"},"required":false,"description":"右键点击节点时触发的回调函数","docblock":"右键点击节点时触发的回调函数\n@param {Object} event 事件对象\n@param {ReactElement} node 点击的节点","params":[{"name":"event","description":"事件对象","type":{"name":"Object"}},{"name":"node","description":"点击的节点","type":{"name":"ReactElement"}}],"returns":null},"isLabelBlock":{"type":{"name":"bool"},"required":false,"description":"设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助flex实现，暂时只支持ie10+)","defaultValue":{"value":"false","computed":false},"docblock":"设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助flex实现，暂时只支持ie10+)"},"animation":{"type":{"name":"bool"},"required":false,"description":"是否开启展开收起动画","defaultValue":{"value":"true","computed":false},"docblock":"是否开启展开收起动画"}},"methods":[],"subComponents":[{"name":"Node","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式类名的品牌前缀","docblock":"样式类名的品牌前缀"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"树节点","docblock":"树节点"},"label":{"type":{"name":"node"},"required":false,"description":"节点文本内容","defaultValue":{"value":"'---'","computed":false},"docblock":"节点文本内容"},"selectable":{"type":{"name":"bool"},"required":false,"description":"单独设置是否支持选中，覆盖Tree的selectable","docblock":"单独设置是否支持选中，覆盖Tree的selectable"},"editable":{"type":{"name":"bool"},"required":false,"description":"单独设置是否支持编辑，覆盖Tree的editable","docblock":"单独设置是否支持编辑，覆盖Tree的editable"},"draggable":{"type":{"name":"bool"},"required":false,"description":"单独设置是否支持拖拽，覆盖Tree的draggable","docblock":"单独设置是否支持拖拽，覆盖Tree的draggable"},"disabled":{"type":{"name":"bool"},"required":false,"description":"是否禁止节点响应","defaultValue":{"value":"false","computed":false},"docblock":"是否禁止节点响应"},"disableCheckbox":{"type":{"name":"bool"},"required":false,"description":"是否禁止勾选节点复选框","defaultValue":{"value":"false","computed":false},"docblock":"是否禁止勾选节点复选框"},"isLeaf":{"type":{"name":"bool"},"required":false,"description":"是否是叶子节点，设置loadData时生效","defaultValue":{"value":"false","computed":false},"docblock":"是否是叶子节点，设置loadData时生效"}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 树节点 | ReactNode | -\nshowLine | 是否显示树的线 | Boolean | false\nselectable | 是否支持选中节点 | Boolean | true\nselectedKeys | （用于受控）当前选中节点key的数组 | Array&lt;String&gt; | -\ndefaultSelectedKeys | （用于非受控）默认选中节点key的数组 | Array&lt;String&gt; | []\nonSelect | 选中或取消选中节点时触发的回调函数<br><br>**签名**:<br>Function(selectedKeys: Array, extra: Object) => void<br>**参数**:<br>*selectedKeys*: {Array} 选中节点key的数组<br>*extra*: {Object} 额外参数<br>*extra.selectedNodes*: {Array} 选中节点的数组<br>*extra.node*: {ReactElement} 当前操作的节点<br>*extra.selected*: {Boolean} 当前操作是否是选中<br>*extra.event*: {String} 当前操作的类型，值为'select' | Function | () =&gt; {}\nmultiple | 是否支持多选 | Boolean | false\ncheckable | 是否支持勾选节点的复选框 | Boolean | false\ncheckedKeys | （用于受控）当前勾选复选框节点key的数组或`{checked: Array, halfChecked: Array}`的对象 | Array&lt;String&gt;/Object | -\ndefaultCheckedKeys | （用于非受控）默认勾选复选框节点key的数组 | Array&lt;String&gt; | []\ncheckStrictly | 勾选节点复选框是否完全受控（父子节点选中状态不再关联） | Boolean | false\nenableCheckedCache | 是否启用勾选节点复选框的缓存来提高性能，如果dataSource需要被动态更新，请将其设置为false | Boolean | true\nonCheck | 勾选或取消勾选复选框时触发的回调函数<br><br>**签名**:<br>Function(checkedKeys: Array, extra: Object) => void<br>**参数**:<br>*checkedKeys*: {Array} 勾选复选框节点key的数组<br>*extra*: {Object} 额外参数<br>*extra.checkedNodes*: {Array} 勾选复选框节点的数组<br>*extra.checkedNodesPositions*: {Array} 包含有勾选复选框节点和其位置的对象的数组<br>*extra.halfCheckedKeys*: {Array} 半选复选框节点key的数组<br>*extra.node*: {ReactElement} 当前操作的节点<br>*extra.checked*: {Boolean} 当前操作是否是勾选<br>*extra.event*: {String} 当前操作的类型，值为'check' | Function | () =&gt; {}\nexpandedKeys | （用于受控）当前展开的节点key的数组 | Array&lt;String&gt; | -\ndefaultExpandedKeys | （用于非受控）默认展开的节点key的数组 | Array&lt;String&gt; | []\ndefaultExpandAll | 是否默认展开所有节点 | Boolean | false\nautoExpandParent | 是否自动展开父节点 | Boolean | true\nonExpand | 展开或收起节点时触发的回调函数<br><br>**签名**:<br>Function(expandedKeys: Array, extra: Object) => void<br>**参数**:<br>*expandedKeys*: {Array} 展开的节点key的数组<br>*extra*: {Object} 额外参数<br>*extra.node*: {ReactElement} 当前操作的节点<br>*extra.expanded*: {Boolean} 当前操作是否是展开 | Function | () =&gt; {}\neditable | 是否支持编辑节点内容 | Boolean | false\nonEditFinish | 编辑节点内容完成时触发的回调函数<br><br>**签名**:<br>Function(key: String, label: String) => void<br>**参数**:<br>*key*: {String} 编辑节点的key<br>*label*: {String} 编辑节点完成时节点的文本 | Function | () =&gt; {}\ndraggable | 是否支持拖拽节点 | Boolean | false\nonDragStart | 开始拖拽节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.event*: {Object} 事件对象<br>*info.node*: {ReactElement} 拖拽的节点 | Function | () =&gt; {}\nonDragEnter | 拖拽节点进入目标节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.event*: {Object} 事件对象<br>*info.node*: {ReactElement} 目标节点<br>*info.expandedKeys*: {Array} 当前展开的节点key的数组 | Function | () =&gt; {}\nonDragOver | 拖拽节点在目标节点上移动的时候触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.event*: {Object} 事件对象<br>*info.node*: {ReactElement} 目标节点 | Function | () =&gt; {}\nonDragLeave | 拖拽节点离开目标节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.event*: {Object} 事件对象<br>*info.node*: {ReactElement} 目标节点 | Function | () =&gt; {}\nonDrop | 拖拽节点放入目标节点内或前后触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.event*: {Object} 事件对象<br>*info.node*: {ReactElement} 目标节点<br>*info.dragNode*: {ReactElement} 拖拽的节点<br>*info.dragNodesKeys*: {Array} 拖拽的节点和其子节点key的数组<br>*info.dropPosition*: {Number} 拖拽的节点在拖拽后被放置在当前层级的位置<br>*info.dropToGap*: {Boolean} 是否被放置在目标节点的前后（没有被放置在目标节点内部） | Function | () =&gt; {}\ncanDrop | 节点是否可被作为拖拽的目标节点<br><br>**签名**:<br>Function(info: Object) => Boolean<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.node*: {ReactElement} 目标节点<br>*info.dragNode*: {ReactElement} 拖拽的节点<br>*info.dragNodesKeys*: {Array} 拖拽的节点和其子节点key的数组<br>*info.dropPosition*: {Number} 拖拽的节点在拖拽后被放置在当前层级的位置<br>*info.dropToGap*: {Boolean} 是否被放置在目标节点的前后（没有被放置在目标节点内部）<br>**返回值**:<br>{Boolean} 是否可以被当作目标节点<br> | Function | () =&gt; true\nloadData | 异步加载数据的函数<br><br>**签名**:<br>Function(node: ReactElement) => void<br>**参数**:<br>*node*: {ReactElement} 被点击展开的节点 | Function | -\nfilterTreeNode | 按需筛选高亮节点<br><br>**签名**:<br>Function(node: ReactElement) => Boolean<br>**参数**:<br>*node*: {ReactElement} 待筛选的节点<br>**返回值**:<br>{Boolean} 是否被筛选中<br> | Function | -\nonRightClick | 右键点击节点时触发的回调函数<br><br>**签名**:<br>Function(event: Object, node: ReactElement) => void<br>**参数**:<br>*event*: {Object} 事件对象<br>*node*: {ReactElement} 点击的节点 | Function | -\nisLabelBlock | 设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助flex实现，暂时只支持ie10+) | Boolean | false\nanimation | 是否开启展开收起动画 | Boolean | true\n","methodREADME":[],"subComponentsREADME":[{"name":"Node","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | -\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 树节点 | ReactNode | -\nlabel | 节点文本内容 | ReactNode | '---'\nselectable | 单独设置是否支持选中，覆盖Tree的selectable | Boolean | -\neditable | 单独设置是否支持编辑，覆盖Tree的editable | Boolean | -\ndraggable | 单独设置是否支持拖拽，覆盖Tree的draggable | Boolean | -\ndisabled | 是否禁止节点响应 | Boolean | false\ndisableCheckbox | 是否禁止勾选节点复选框 | Boolean | false\nisLeaf | 是否是叶子节点，设置loadData时生效 | Boolean | false\n","methodREADME":[]}],"demos":[{"title":"基本","order":"0","jsx":"import { Tree } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nclass Demo extends React.Component {\n  onSelect(keys, info) {\n    console.log(\"onSelect\", keys, info);\n  }\n\n  onCheck(keys, info) {\n    console.log(\"onCheck\", keys, info);\n  }\n\n  onEditFinish(info) {\n    console.log(\"onEditFinish\", info);\n  }\n\n  onRightClick(info) {\n    console.log(\"onRightClick\", info);\n  }\n\n  render() {\n    return (\n      <Tree\n        multiple\n        checkable\n        editable\n        defaultExpandedKeys={[\"0-0-0\", \"0-0-1\"]}\n        defaultCheckedKeys={[\"0-0-0\", \"0-0-1\"]}\n        onSelect={this.onSelect}\n        onCheck={this.onCheck}\n        onEditFinish={this.onEditFinish}\n        onRightClick={this.onRightClick}\n      >\n        <TreeNode label=\"parent 1\" key=\"0-0\">\n          <TreeNode label=\"parent 1-0\" key=\"0-0-0\" disabled>\n            <TreeNode label=\"leaf\" key=\"0-0-0-0\" disableCheckbox />\n            <TreeNode label=\"leaf\" key=\"0-0-0-1\" />\n          </TreeNode>\n          <TreeNode label=\"parent 1-1\" key=\"0-0-1\">\n            <TreeNode\n              label={<span style={{ color: \"#08c\" }}>abc</span>}\n              key=\"0-0-1-0\"\n            />\n          </TreeNode>\n        </TreeNode>\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n最简单的用法，展示可展开，可选中，可勾选，可编辑，可右键，禁用，禁用勾选，默认展开，默认选中，默认勾选等功能。\n\n"},{"title":"父子节点选中是否关联","order":"3","jsx":"import { Tree, Checkbox } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nconst data = [\n  {\n    id: \"0-0\",\n    children: [\n      {\n        id: \"0-0-0\",\n        children: [\n          {\n            id: \"0-0-0-0\",\n            children: [\n              {\n                id: \"0-0-0-0-0\"\n              }\n            ]\n          },\n          {\n            id: \"0-0-0-1\"\n          }\n        ]\n      },\n      {\n        id: \"0-0-1\",\n        children: [\n          {\n            id: \"0-0-1-0\"\n          },\n          {\n            id: \"0-0-1-1\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkedKeys: [],\n      checkStrictly: false\n    };\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleCheckStrictly = this.handleCheckStrictly.bind(this);\n  }\n\n  handleCheck(keys, info) {\n    console.log(keys, info);\n\n    this.setState({\n      checkedKeys: keys\n    });\n  }\n\n  handleCheckStrictly() {\n    this.setState({\n      checkStrictly: !this.state.checkStrictly,\n      checkedKeys: []\n    });\n  }\n\n  render() {\n    const loop = data =>\n      data.map(item => {\n        return (\n          <TreeNode label={item.id} key={item.id}>\n            {item.children && item.children.length ? loop(item.children) : null}\n          </TreeNode>\n        );\n      });\n\n    const { checkedKeys, checkStrictly } = this.state;\n\n    return (\n      <div className=\"control-check-demo\">\n        <label className=\"strictly-check\">\n          <Checkbox value={checkStrictly} onChange={this.handleCheckStrictly} />\n          <span className=\"strictly-text\">\n            开启严格受控，父子节点选中不再关联\n          </span>\n        </label>\n        <Tree\n          defaultExpandAll\n          checkable\n          checkStrictly={checkStrictly}\n          checkedKeys={checkedKeys}\n          onCheck={this.handleCheck}\n        >\n          {loop(data)}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".control-check-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-check-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n展示父子节点选中是否关联的用法。\n\n"},{"title":"单选与多选","order":"2","jsx":"import { Tree, Checkbox } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nconst data = [\n  {\n    id: \"0-0\",\n    children: [\n      {\n        id: \"0-0-0\",\n        children: [\n          {\n            id: \"0-0-0-0\",\n            children: [\n              {\n                id: \"0-0-0-0-0\"\n              }\n            ]\n          },\n          {\n            id: \"0-0-0-1\"\n          }\n        ]\n      },\n      {\n        id: \"0-0-1\",\n        children: [\n          {\n            id: \"0-0-1-0\"\n          },\n          {\n            id: \"0-0-1-1\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedKeys: [],\n      multiple: false\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n  }\n\n  handleSelect(keys, info) {\n    console.log(keys, info);\n\n    this.setState({\n      selectedKeys: keys\n    });\n  }\n\n  handleCheck() {\n    this.setState({\n      multiple: !this.state.multiple,\n      selectedKeys: []\n    });\n  }\n\n  render() {\n    const loop = data =>\n      data.map(item => {\n        return (\n          <TreeNode label={item.id} key={item.id}>\n            {item.children && item.children.length ? loop(item.children) : null}\n          </TreeNode>\n        );\n      });\n\n    const { multiple, selectedKeys } = this.state;\n\n    return (\n      <div className=\"control-select-demo\">\n        <label className=\"multiple-check\">\n          <Checkbox value={multiple} onChange={this.handleCheck} />\n          <span className=\"multiple-text\">开启多选</span>\n        </label>\n        <Tree\n          defaultExpandAll\n          multiple={multiple}\n          selectedKeys={selectedKeys}\n          onSelect={this.handleSelect}\n        >\n          {loop(data)}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":".control-select-demo .multiple-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-select-demo .multiple-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n展示单选与多选的用法。\n\n"},{"title":"拖动","order":"6","jsx":"import { Tree } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || \"0\";\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ label: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gData,\n      expandedKeys: [\"0-0\", \"0-0-0\", \"0-0-0-0\"]\n    };\n  }\n  // eslint-disable-next-line\n  onDragEnter(info) {\n    // expandedKeys 需要受控时设置\n    // this.setState({\n    //   expandedKeys: info.expandedKeys,\n    // });\n  }\n  onDrop(info) {\n    const dragKey = info.dragNode.props.eventKey;\n    const dropKey = info.node.props.eventKey;\n    const dropPos = info.node.props.pos.split(\"-\");\n    // 通过info.node.props.pos计算得到的dropPos为-1则为拖动到节点之上，1则为拖动到节点之下\n    const dropPosition =\n      info.dropPosition - Number(dropPos[dropPos.length - 1]);\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n    const data = [...this.state.gData];\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n    // dropToGap为true 则拖动到节点内部\n    if (info.dropToGap) {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    } else {\n      loop(data, dropKey, item => {\n        item.children = item.children || [];\n        // where to insert 示例添加到尾部，可以是随意位置\n        item.children.push(dragObj);\n      });\n    }\n    this.setState({\n      gData: data\n    });\n  }\n  render() {\n    const loop = data =>\n      data.map(item => {\n        if (item.children) {\n          return (\n            <TreeNode key={item.key} label={item.key}>\n              {loop(item.children)}\n            </TreeNode>\n          );\n        }\n        return <TreeNode key={item.key} label={item.key} />;\n      });\n\n    return (\n      <Tree\n        defaultExpandedKeys={this.state.expandedKeys}\n        draggable\n        selectable={false}\n        onDragEnter={this.onDragEnter.bind(this)}\n        onDrop={this.onDrop.bind(this)}\n      >\n        {loop(this.state.gData)}\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n将节点拖拽到其他节点内部或前后。\n\n"},{"title":"异步加载数据","order":"5","jsx":"import { Tree } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nfunction generateTreeNodes(treeNode) {\n  const arr = [];\n  const key = treeNode.props.eventKey;\n  for (let i = 0; i < 3; i++) {\n    arr.push({ name: `leaf ${key}-${i}`, key: `${key}-${i}` });\n  }\n  return arr;\n}\n\nfunction setLeaf(treeData, curKey, level) {\n  const loopLeaf = (data, lev) => {\n    const l = lev - 1;\n    data.forEach(item => {\n      if (\n        item.key.length > curKey.length\n          ? item.key.indexOf(curKey) !== 0\n          : curKey.indexOf(item.key) !== 0\n      ) {\n        return;\n      }\n      if (item.children) {\n        loopLeaf(item.children, l);\n      } else if (l < 1) {\n        item.isLeaf = true;\n      }\n    });\n  };\n  loopLeaf(treeData, level + 1);\n}\n\nfunction getNewTreeData(treeData, curKey, child, level) {\n  const loop = data => {\n    if (level < 1 || curKey.length - 3 > level * 2) {\n      return;\n    }\n\n    data.forEach(item => {\n      if (curKey.indexOf(item.key) === 0) {\n        if (item.children) {\n          loop(item.children);\n        } else {\n          item.children = child;\n        }\n      }\n    });\n  };\n  loop(treeData);\n  setLeaf(treeData, curKey, level);\n}\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      treeData: []\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        treeData: [\n          { name: \"pNode 01\", key: \"0-0\" },\n          { name: \"pNode 02\", key: \"0-1\" },\n          { name: \"pNode 03\", key: \"0-2\", isLeaf: true }\n        ]\n      });\n    }, 100);\n  }\n  onSelect(info) {\n    console.log(\"selected\", info);\n  }\n  onLoadData(treeNode) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const treeData = [...this.state.treeData];\n        getNewTreeData(\n          treeData,\n          treeNode.props.eventKey,\n          generateTreeNodes(treeNode),\n          2\n        );\n        this.setState({ treeData });\n        resolve();\n      }, 500);\n    });\n  }\n  render() {\n    const loop = data =>\n      data.map(item => {\n        if (item.children) {\n          return (\n            <TreeNode label={item.name} key={item.key}>\n              {loop(item.children)}\n            </TreeNode>\n          );\n        }\n        return (\n          <TreeNode\n            label={item.name}\n            key={item.key}\n            isLeaf={item.isLeaf}\n            disabled={item.key === \"0-0-0\"}\n          />\n        );\n      });\n    const treeNodes = loop(this.state.treeData);\n    return (\n      <Tree\n        onSelect={this.onSelect.bind(this)}\n        loadData={this.onLoadData.bind(this)}\n      >\n        {treeNodes}\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n点击展开节点，动态加载数据。\n\n"},{"title":"带线样式","order":"1","jsx":"import { Tree } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nReactDOM.render(\n  <Tree defaultExpandAll showLine>\n    <TreeNode label=\"Trunk\">\n      <TreeNode label=\"Branch\">\n        <TreeNode label=\"Branch\">\n          <TreeNode label=\"Leaf\" />\n        </TreeNode>\n        <TreeNode label=\"Leaf\" />\n      </TreeNode>\n      <TreeNode label=\"Branch\">\n        <TreeNode label=\"Leaf\" />\n        <TreeNode label=\"Leaf\" />\n      </TreeNode>\n    </TreeNode>\n  </Tree>,\n  mountNode\n);\n\n","css":"","body":"\n展示Tree组件带线的样式外观。\n\n"},{"title":"可搜索的树","order":"4","jsx":"import { Tree, Search } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nconst data = [\n  {\n    id: \"0-0\",\n    children: [\n      {\n        id: \"0-0-0\",\n        children: [\n          {\n            id: \"0-0-0-0\",\n            children: [\n              {\n                id: \"0-0-0-0-0\"\n              }\n            ]\n          },\n          {\n            id: \"0-0-0-1\"\n          }\n        ]\n      },\n      {\n        id: \"0-0-1\",\n        children: [\n          {\n            id: \"0-0-1-0\"\n          },\n          {\n            id: \"0-0-1-1\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n      expandedKeys: [\"0-0\"],\n      autoExpandParent: true\n    };\n    this.matchedKeys = [];\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleExpand = this.handleExpand.bind(this);\n  }\n\n  handleSearch(result) {\n    const value = result.key;\n    const matchedKeys = [];\n    const loop = data =>\n      data.forEach(item => {\n        if (item.id.indexOf(value.trim()) > -1) {\n          matchedKeys.push(item.id);\n        }\n        if (item.children && item.children.length) {\n          loop(item.children);\n        }\n      });\n    loop(data);\n\n    this.setState({\n      value: result.key,\n      expandedKeys: matchedKeys,\n      autoExpandParent: true\n    });\n    this.matchedKeys = matchedKeys;\n  }\n\n  handleExpand(keys) {\n    this.setState({\n      expandedKeys: keys,\n      autoExpandParent: false\n    });\n  }\n\n  render() {\n    const loop = data =>\n      data.map(item => {\n        return (\n          <TreeNode label={item.id} key={item.id}>\n            {item.children && loop(item.children)}\n          </TreeNode>\n        );\n      });\n\n    const { value, expandedKeys, autoExpandParent } = this.state;\n    const filterTreeNode = node =>\n      value && this.matchedKeys.indexOf(node.props.eventKey) > -1;\n\n    return (\n      <div>\n        <Search\n          type=\"normal\"\n          size=\"medium\"\n          searchText=\"\"\n          value={value}\n          onSearch={this.handleSearch}\n        />\n        <Tree\n          expandedKeys={expandedKeys}\n          autoExpandParent={autoExpandParent}\n          filterTreeNode={filterTreeNode}\n          onExpand={this.handleExpand}\n        >\n          {loop(data)}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n展示可搜索的树。\n\n"}]},{"name":"Upload","category":"Components","title":"上传组件","type":"表单","importStatement":"import { Upload } from '@icedesign/base';","body":"\n## 开发指南\n\n### 何时使用\n\n用户根据提示将自己本地的相应信息(包含本地和云储存)上传到网站，上传组件可以帮助用户对上传过程和上传结果有预期，并可以更改或撤销上传行为。\n#### onChange\n\n文件状态改变的回调，返回为：\n\n```js\n{\n  file: { ... },\n  fileList: [ ... ],\n  event: { ... }\n}\n```\n\n- `file` 当前操作的文件对象。\n```js\n{ \n  uid: 'uid', // 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突 \n  name: 'xx.png' // 文件名 \n  status: 'done', // 状态有：uploading done error removed \n  response: '{\"status\":\"success\"}' // 服务端响应内容 \n  fileURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>', \n  imgURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>', \n}\n```\n\n如果上传控件是 multiple 时，此参数将为一个对象数组 `[file, ...]`。\n\n- `fileList` 当前的文件列表。\n- `event` 上传中的服务端响应内容，包含了上传进度等信息，高级浏览器支持。\n\n#### onSuccess(res, file)\n\n- `res` 后台返回的响应信息。\n\n- `file` 当前操作的文件对象。\n- ​\n```js\n  { uid: 'uid', // 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突 name: 'xx.png' // 文件名 status: 'done', // 状态 response: '{\"status\": \"success\"}' // 服务端响应内容 fileURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>', imgURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>', }\n```\n\n#### onRemove(file, fileList)\n\n- `file` 当前操作的文件对象。\n```js\n{ \n  uid: 'uid', // 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突 \n  name: 'xx.png' // 文件名 \n  status: 'removed', // 状态 \n  response: '{\"status\": \"success\"}' // 服务端响应内容 \n  fileURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>', \n  imgURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>',\n}\n```\n\n- `fileList` 当前的文件列表。\n\n#### 显示下载链接\n\n请使用 fileList 属性设置数组项的 url 属性进行展示控制。\n\n#### 返回数据格式要求\n\n```js\n// 标准 JSON 字符串\n{\n  \"code\": \"0\",                                           // 状态码，0 代表成功\n  \"imgURL\": \"http://kfupload.example.com/a.png\",         // 图片预览地址\n  \"downloadURL\": \"http://kfupload.example.com/a.png\",    // 文件下载地址 (可选)\n  \"size\": \"1024\",                                        // 文件大小 (可选)\n  \"fileHeight\": \"50\",                                    // 图片高度，非图片类型不需要 (可选)\n  \"fileWidth\": \"50\",                                     // 图片宽度，非图片类型不需要 (可选)\n  \"fileMd5\": \"ddahsjccbajh\"                              // 文件 hash 值 (可选)\n}\n```\n\n#### 后端数据格式化\n\n通过 `formatter` 将来自后端的不规则数据转换为符合组件要求的数据格式\n\n- `假设` 服务器的响应数据如下\n\n ```js\n{\n  \"status\": \"success\", // 上传成功返回码 \n  \"img_src\": \"<http://kfupload.example.com/a.jpg>\", // 图片链接\n  \"img_size\": 1024 // 文件大小 \n}\n ```\n\n- 转换方法\n\n```js\n// 函数里面根据当前服务器返回的响应数据 \n// 重新拼装符合组件要求的数据格式 \nfunction formatter(res) {\n  return { \n    code: res.status === 'success' ? '0' : '1', \n    imgURL: res.img_src, \n    size: res.img_size \n  };\n}\n```\n\n\n## IE9兼容性\n\n- ie9 下用因为使用 iframe 作为无刷新上传方案，必须保证表单页面的域名和上传的服务器端的域名相同。\n- ie9 下服务器端返回数据需要设置头部 `context-type` 为 `text/html`，不要设置为 `application/json`\n- 如果只是一级域名相同（`taobao.com` 为一级域名 `shop.taobao.com` 为二级域名），可以通过降域的方式实现跨域上传。\n\n假设你表单页面的域是：shop.taobao.com，而上传的服务器端路径却是 upload.taobao.com。服务端返回必须带额外 scrip t标签\n\n```html\n<script>document.domain = \"taobao.com\";</script>\n{\"status\":1,\"type\":\"ajax\",\"name\":\"54.png\",\"url\":\".\\/files\\/54.png\"}\n```\n\niframe上传会额外传递参数 `_documentDomain` 方便你设置域名\n","propsSchema":{"name":"Upload","props":{"prefix":{"type":{"name":"string"},"required":true,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"action":{"type":{"name":"string"},"required":false,"description":"必选参数，上传的地址","defaultValue":{"value":"'//kfupload.example.com/mupload'","computed":false},"docblock":"必选参数，上传的地址"},"fileList":{"type":{"name":"array"},"required":false,"description":"上传文件列表，数据格式请参考","docblock":"上传文件列表，数据格式请参考"},"defaultFileList":{"type":{"name":"array"},"required":false,"description":"默认上传文件列表，数据格式请参考","defaultValue":{"value":"[]","computed":false},"docblock":"默认上传文件列表，数据格式请参考"},"listType":{"type":{"name":"enum","value":[{"value":"'text'","computed":false,"description":"文字"},{"value":"'text-image'","computed":false,"description":"图文"},{"value":"'picture-card'","computed":false,"description":"卡片"}]},"required":false,"description":"上传列表的样式","defaultValue":{"value":"'text'","computed":false},"docblock":"上传列表的样式\n@enumdesc 文字, 图文, 卡片","value":[{"value":"'text'","computed":false,"description":"文字"},{"value":"'text-image'","computed":false,"description":"图文"},{"value":"'picture-card'","computed":false,"description":"卡片"}]},"data":{"type":{"name":"union","value":[{"name":"object"},{"name":"func"}]},"required":false,"description":"上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }）","docblock":"上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }）"},"formatter":{"type":{"name":"func"},"required":false,"description":"数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)","docblock":"数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)","params":[],"returns":null},"maxSize":{"type":{"name":"number"},"required":false,"description":"选择上传的文件的最大尺寸（单位：Byte）","defaultValue":{"value":"Infinity","computed":true},"docblock":"选择上传的文件的最大尺寸（单位：Byte）"},"language":{"type":{"name":"string"},"required":false,"description":"语言种类，支持 `en-us`、`zh-cn`、`zh-tw`","docblock":"语言种类，支持 `en-us`、`zh-cn`、`zh-tw`"},"locale":{"type":{"name":"object"},"required":false,"description":"自定义语言包，会与默认提供的语言包做合并操作，[详细参考](http://gitlab.alibaba-inc.com/next/upload/blob/master/src/locale/index.js)","docblock":"自定义语言包，会与默认提供的语言包做合并操作，[详细参考](http://gitlab.alibaba-inc.com/next/upload/blob/master/src/locale/index.js)","properties":[]},"limit":{"type":{"name":"number"},"required":false,"description":"最大文件上传个数","docblock":"最大文件上传个数"},"dragable":{"type":{"name":"bool"},"required":false,"description":"可选参数，是否支持拖拽上传，`ie10+` 支持。","defaultValue":{"value":"true","computed":false},"docblock":"可选参数，是否支持拖拽上传，`ie10+` 支持。"},"disabled":{"type":{"name":"bool"},"required":false,"description":"可选参数，是否禁用上传功能","docblock":"可选参数，是否禁用上传功能"},"showUploadList":{"type":{"name":"bool"},"required":false,"description":"是否显示上传列表","defaultValue":{"value":"true","computed":false},"docblock":"是否显示上传列表"},"onChange":{"type":{"name":"func"},"required":false,"description":"上传文件改变时的状态","defaultValue":{"value":"() => {}","computed":false},"docblock":"上传文件改变时的状态\n@param {Object} info 文件事件对象","params":[{"name":"info","description":"文件事件对象","type":{"name":"Object"}}],"returns":null},"onSuccess":{"type":{"name":"func"},"required":false,"description":"可选参数，上传成功回调函数，参数为请求下响应信息以及文件","defaultValue":{"value":"() => {}","computed":false},"docblock":"可选参数，上传成功回调函数，参数为请求下响应信息以及文件","params":[],"returns":null},"onRemove":{"type":{"name":"func"},"required":false,"description":"移除文件回调函数，详见 [onRemove](#onRemove)","defaultValue":{"value":"() => {}","computed":false},"docblock":"移除文件回调函数，详见 [onRemove](#onRemove)","params":[],"returns":null},"onError":{"type":{"name":"func"},"required":false,"description":"可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件","defaultValue":{"value":"() => {}","computed":false},"docblock":"可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件","params":[],"returns":null},"className":{"type":{"name":"string"},"required":false,"description":"自定义class","docblock":"自定义class"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"children":{"type":{"name":"node"},"required":false,"description":"子元素","docblock":"子元素"},"accept":{"type":{"name":"string"},"required":false,"description":"可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept)","docblock":"可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept)"},"headers":{"type":{"name":"object"},"required":false,"description":"可选参数，设置上传的请求头部","docblock":"可选参数，设置上传的请求头部","properties":[]},"name":{"type":{"name":"string"},"required":false,"description":"传递给服务器的文件参数","docblock":"传递给服务器的文件参数"},"withCredentials":{"type":{"name":"bool"},"required":false,"description":"可选参数，是否允许请求携带 cookie","docblock":"可选参数，是否允许请求携带 cookie"},"beforeUpload":{"type":{"name":"func"},"required":false,"description":"可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传","docblock":"可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传","params":[],"returns":null}},"methods":[{"name":"onFileDrop","docblock":"文件拖拽处理函数\n@param  {Event} e - 拖拽事件\n@return {void}","modifiers":[],"params":[{"name":"e","description":"拖拽事件","type":{"name":"Event"}}],"returns":{"description":null,"type":{"name":"void"}},"description":"文件拖拽处理函数"},{"name":"onStart","docblock":"上传开始\n@param {FileList} files - 文件列表\n@return {void}","modifiers":[],"params":[{"name":"files","description":"文件列表","type":{"name":"FileList"}}],"returns":{"description":null,"type":{"name":"void"}},"description":"上传开始"},{"name":"onSuccess","docblock":"上传成功回调\n@param  {Object} response - 服务器响应\n@param  {File} file - 文件对象\n@return {void}","modifiers":[],"params":[{"name":"response","description":"服务器响应","type":{"name":"Object"}},{"name":"file","description":"文件对象","type":{"name":"File"}}],"returns":{"description":null,"type":{"name":"void"}},"description":"上传成功回调"},{"name":"removeFile","docblock":"删除文件\n@param {File} file\n@return {void}","modifiers":[],"params":[{"name":"file","description":null,"type":{"name":"File"}}],"returns":{"description":null,"type":{"name":"void"}},"description":"删除文件"},{"name":"cancelFile","docblock":"取消上传\n@param {File} file\n@return {void}","modifiers":[],"params":[{"name":"file","description":null,"type":{"name":"File"}}],"returns":{"description":null,"type":{"name":"void"}},"description":"取消上传"}],"subComponents":[{"name":"ImageUpload","props":{},"methods":[],"description":"继承 Upload 的 API，除非特别说明","order":1},{"name":"DragUpload","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"onDragOver":{"type":{"name":"func"},"required":false,"description":"可选参数，拖拽到达拖拽区域回调函数","docblock":"可选参数，拖拽到达拖拽区域回调函数","params":[],"returns":null},"onDrop":{"type":{"name":"func"},"required":false,"description":"可选参数，拖拽释放回调函数，参数为拖拽的文件","docblock":"可选参数，拖拽释放回调函数，参数为拖拽的文件","params":[],"returns":null},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]}},"methods":[{"name":"onFileDrop","docblock":"控制拖拽状态","modifiers":[],"params":[{"name":"e"}],"returns":null,"description":"控制拖拽状态"},{"name":"dropEnd","docblock":"`drop`类型事件触发后重置拖拽状态及清空传递的数据，防止子组件中`nextProps`继续获取重复数据","modifiers":[],"params":[],"returns":null,"description":"`drop`类型事件触发后重置拖拽状态及清空传递的数据，防止子组件中`nextProps`继续获取重复数据"},{"name":"onListChange","docblock":"当上传列表不为空时，不需要展示拖拽提示文案","modifiers":[],"params":[{"name":"fileList"}],"returns":null,"description":"当上传列表不为空时，不需要展示拖拽提示文案"}],"description":"IE10+ 支持。继承 Upload 的 API，除非特别说明","order":2},{"name":"CropUpload","props":{"prefix":{"type":{"name":"string"},"required":false,"description":"样式前缀","defaultValue":{"value":"'next-'","computed":false},"docblock":"样式前缀"},"action":{"type":{"name":"string"},"required":false,"description":"必选参数，上传的地址。使用 fileserver，跨域解决方案参考 [fileserver 接入](#fileserver)，[`非 fileserver` 使用说明](#not-fileserver)","defaultValue":{"value":"'//kfupload.example.com/mupload'","computed":false},"docblock":"必选参数，上传的地址。使用 fileserver，跨域解决方案参考 [fileserver 接入](#fileserver)，[`非 fileserver` 使用说明](#not-fileserver)"},"name":{"type":{"name":"string"},"required":false,"description":"可选参数，传递给服务器的文件参数","defaultValue":{"value":"'avatar'","computed":false},"docblock":"可选参数，传递给服务器的文件参数"},"cropSize":{"type":{"name":"union","value":[{"name":"number"},{"name":"object"}]},"required":false,"description":"可选参数，设置裁剪图片生成的尺寸，如设置 `100`，会生成 `100*100` 的图片","docblock":"可选参数，设置裁剪图片生成的尺寸，如设置 `100`，会生成 `100*100` 的图片"},"minCropBoxSize":{"type":{"name":"number"},"required":false,"description":"可选参数，设置裁剪框的最小尺寸","docblock":"可选参数，设置裁剪框的最小尺寸"},"className":{"type":{"name":"string"},"required":false,"description":"自定义类名","docblock":"自定义类名"},"style":{"type":{"name":"object"},"required":false,"description":"自定义内联样式","docblock":"自定义内联样式","properties":[]},"headers":{"type":{"name":"object"},"required":false,"description":"可选参数，设置上传的请求头部","docblock":"可选参数，设置上传的请求头部","properties":[]},"formatter":{"type":{"name":"func"},"required":false,"description":"可选参数，数据格式化函数，配合自定义 `action` 使用，参数为服务器的响应数据，详见 [formatter](#formatter)","docblock":"可选参数，数据格式化函数，配合自定义 `action` 使用，参数为服务器的响应数据，详见 [formatter](#formatter)","params":[],"returns":null},"data":{"type":{"name":"union","value":[{"name":"object"},{"name":"func"}]},"required":false,"description":"上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }）","docblock":"上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }）"},"locale":{"type":{"name":"object"},"required":false,"description":"自定义语言包，会与默认提供的语言包做合并操作，请严格按照默认语言包的格式，参考 [demo](http://next.alibaba-inc.com/demo/pc/upload#react-Upload-2)","docblock":"自定义语言包，会与默认提供的语言包做合并操作，请严格按照默认语言包的格式，参考 [demo](http://next.alibaba-inc.com/demo/pc/upload#react-Upload-2)","properties":[]},"preview":{"type":{"name":"bool"},"required":false,"description":"是否使用预览功能","docblock":"是否使用预览功能"},"previewList":{"type":{"name":"array"},"required":false,"description":"预览展示列表，用来配置预览元素。目前仅支持 `80`、`60`、`40` 三种，例如，配置 `[80, 40]`，会展示 `80*80` 以及 `40*40` 两种尺寸","docblock":"预览展示列表，用来配置预览元素。目前仅支持 `80`、`60`、`40` 三种，例如，配置 `[80, 40]`，会展示 `80*80` 以及 `40*40` 两种尺寸"},"popupClassName":{"type":{"name":"string"},"required":false,"description":"裁剪弹层自定义类名","docblock":"裁剪弹层自定义类名"},"aspectRatio":{"type":{"name":"number"},"required":false,"description":"裁剪比例，例如 `1 / 2` 表示 `宽 / 高`。**注意：1、设置了裁剪比例，而且值不等于 `1` 时，不能使用预览功能；2、设置成 'auto' 可以支持任意裁剪比例**","docblock":"裁剪比例，例如 `1 / 2` 表示 `宽 / 高`。**注意：1、设置了裁剪比例，而且值不等于 `1` 时，不能使用预览功能；2、设置成 'auto' 可以支持任意裁剪比例**"},"viewMode":{"type":{"name":"number"},"required":false,"description":"可选参数，[定义裁剪框的模式](https://github.com/fengyuanchen/cropperjs#viewmode)","docblock":"可选参数，[定义裁剪框的模式](https://github.com/fengyuanchen/cropperjs#viewmode)"},"autoCropArea":{"type":{"name":"number"},"required":false,"description":"可选参数，[定义自动裁剪区域的尺寸（百分比）](https://github.com/fengyuanchen/cropperjs#autocroparea)，介于 `0` 与 `1` 之间的值","docblock":"可选参数，[定义自动裁剪区域的尺寸（百分比）](https://github.com/fengyuanchen/cropperjs#autocroparea)，介于 `0` 与 `1` 之间的值"},"zoomable":{"type":{"name":"bool"},"required":false,"description":"图片是否可以伸缩","docblock":"图片是否可以伸缩"},"beforeCrop":{"type":{"name":"func"},"required":false,"description":"可选参数，选择文件后、唤起裁剪框前的钩子，参数为上传的文件。若返回 `false`、`Promise.reject()` 或者 `Promise.resolve(false)` 都会阻断后续流程，不会唤起裁剪框及后续动作","docblock":"可选参数，选择文件后、唤起裁剪框前的钩子，参数为上传的文件。若返回 `false`、`Promise.reject()` 或者 `Promise.resolve(false)` 都会阻断后续流程，不会唤起裁剪框及后续动作","params":[],"returns":null},"onCrop":{"type":{"name":"func"},"required":false,"description":"完成裁剪并上传的回调函数，参数为裁剪后的文件的base64字符串数据","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"完成裁剪并上传的回调函数，参数为裁剪后的文件的base64字符串数据","params":[],"returns":null},"onChange":{"type":{"name":"func"},"required":false,"description":"可选参数，裁剪文件改变时触发","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"可选参数，裁剪文件改变时触发","params":[],"returns":null},"beforeUpload":{"type":{"name":"func"},"required":false,"description":"可选参数，点击裁剪之后、上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"可选参数，点击裁剪之后、上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传","params":[],"returns":null},"onSuccess":{"type":{"name":"func"},"required":false,"description":"上传成功回调函数，`res` 为后台响应，`dataUrl` 为裁剪后的文件的base64字符串数据(注意与 `Upload` 的参数区别)","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"上传成功回调函数，`res` 为后台响应，`dataUrl` 为裁剪后的文件的base64字符串数据(注意与 `Upload` 的参数区别)","params":[],"returns":null},"onError":{"type":{"name":"func"},"required":false,"description":"可选参数，上传失败回调函数，参数为上传失败的文件信息","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"可选参数，上传失败回调函数，参数为上传失败的文件信息","params":[],"returns":null},"accept":{"type":{"name":"string"},"required":false,"description":"图片类型","defaultValue":{"value":"'image/png,image/jpg,image/jpeg,image/bmp,image/gif'","computed":false},"docblock":"图片类型"}},"methods":[],"description":"IE10+ 支持","order":3},{"name":"Core","props":{"style":{"type":{"name":"object"},"required":false,"description":"可选参数，自定义样式","docblock":"可选参数，自定义样式","properties":[]},"action":{"type":{"name":"string"},"required":true,"description":"必选参数，上传的地址","docblock":"必选参数，上传的地址"},"name":{"type":{"name":"string"},"required":true,"description":"可选参数，传递给服务器的文件参数","defaultValue":{"value":"'file'","computed":false},"docblock":"可选参数，传递给服务器的文件参数"},"disabled":{"type":{"name":"bool"},"required":false,"description":"可选参数，是否禁用上传功能","docblock":"可选参数，是否禁用上传功能"},"multiple":{"type":{"name":"bool"},"required":false,"description":"可选参数，是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件","defaultValue":{"value":"false","computed":false},"docblock":"可选参数，是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件"},"dragable":{"type":{"name":"bool"},"required":false,"description":"可选参数，是否支持拖拽上传，`ie10+` 支持。","docblock":"可选参数，是否支持拖拽上传，`ie10+` 支持。"},"accept":{"type":{"name":"string"},"required":false,"description":"可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept)","docblock":"可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept)"},"data":{"type":{"name":"union","value":[{"name":"object"},{"name":"func"}]},"required":false,"description":"上传额外传参","docblock":"上传额外传参"},"headers":{"type":{"name":"object"},"required":false,"description":"可选参数，设置上传的请求头部","docblock":"可选参数，设置上传的请求头部","properties":[]},"withCredentials":{"type":{"name":"bool"},"required":false,"description":"可选参数，是否允许请求携带 cookie","defaultValue":{"value":"false","computed":false},"docblock":"可选参数，是否允许请求携带 cookie"},"beforeUpload":{"type":{"name":"func"},"required":false,"description":"可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传","params":[],"returns":null},"onStart":{"type":{"name":"func"},"required":false,"description":"可选参数，开始上传文件的钩子，参数为上传的文件。如果开启了 `multiple`，参数为文件列表","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"可选参数，开始上传文件的钩子，参数为上传的文件。如果开启了 `multiple`，参数为文件列表","params":[],"returns":null},"onProgress":{"type":{"name":"func"},"required":false,"description":"可选参数，正在上传文件的钩子，参数为上传的事件以及文件","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"可选参数，正在上传文件的钩子，参数为上传的事件以及文件","params":[],"returns":null},"onSuccess":{"type":{"name":"func"},"required":false,"description":"可选参数，上传成功回调函数，参数为请求下响应信息以及文件","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"可选参数，上传成功回调函数，参数为请求下响应信息以及文件","params":[],"returns":null},"onError":{"type":{"name":"func"},"required":false,"description":"可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件","params":[],"returns":null},"onAbort":{"type":{"name":"func"},"required":false,"description":"可选参数，中断上传请求回调函数，参数为中断事件以及文件","defaultValue":{"value":"() => {\n}","computed":false},"docblock":"可选参数，中断上传请求回调函数，参数为中断事件以及文件","params":[],"returns":null}},"methods":[{"name":"onChange","docblock":"上传文件变化\n@param  {SyntheticEvent} e\n@return {void}","modifiers":[],"params":[{"name":"e","description":null,"type":{"name":"SyntheticEvent"}}],"returns":{"description":null,"type":{"name":"void"}},"description":"上传文件变化"},{"name":"onClick","docblock":"点击上传按钮\n@return {void}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"void"}},"description":"点击上传按钮"},{"name":"onKeyDown","docblock":"键盘事件\n@param  {SyntheticEvent} e\n@return {void}","modifiers":[],"params":[{"name":"e","description":null,"type":{"name":"SyntheticEvent"}}],"returns":{"description":null,"type":{"name":"void"}},"description":"键盘事件"},{"name":"onFileDrop","docblock":"拖拽\n@param  {SyntheticEvent} e\n@return {void}","modifiers":[],"params":[{"name":"e","description":null,"type":{"name":"SyntheticEvent"}}],"returns":{"description":null,"type":{"name":"void"}},"description":"拖拽"},{"name":"uploadFiles","docblock":"上传文件列表\n@param  {File} files - 文件列表\n@return {void}","modifiers":[],"params":[{"name":"files","description":"文件列表","type":{"name":"File"}}],"returns":{"description":null,"type":{"name":"void"}},"description":"上传文件列表"},{"name":"upload","docblock":"上传文件\n@param  {File} file - 文件\n@return {void}","modifiers":[],"params":[{"name":"file","description":"文件","type":{"name":"File"}}],"returns":{"description":null,"type":{"name":"void"}},"description":"上传文件"}],"description":"为了开放基础上传能力，独立向外提供了 Core 模块。使用该模块可以实现基本的上传功能，跟业务 UI 分离，满足业务自定义 UI 的需求"},{"name":"List","props":{"listType":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'text-image'","computed":false},{"value":"'picture-card'","computed":false}]},"required":false,"description":"文件列表，数据格式请参考 文件对象","defaultValue":{"value":"'text'","computed":false},"docblock":"文件列表，数据格式请参考 文件对象"},"fileList":{"type":{"name":"array"},"required":false,"description":"文件列表","defaultValue":{"value":"[]","computed":false},"docblock":"文件列表"},"cell":{"type":{"name":"func"},"required":false,"description":"渲染","docblock":"渲染\n@param {Object} value 该行数据\n@param {Number} idx   序列\n@return {Element} 自定义内容","params":[{"name":"value","description":"该行数据","type":{"name":"Object"}},{"name":"idx","description":"序列","type":{"name":"Number"}}],"returns":{"description":"自定义内容","type":{"name":"Element"}}}},"methods":[]}]},"propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\naction | 必选参数，上传的地址 | String | '//kfupload.example.com/mupload'\nfileList | 上传文件列表，数据格式请参考 | Array | -\ndefaultFileList | 默认上传文件列表，数据格式请参考 | Array | []\nlistType | 上传列表的样式<br><br>**可选值**:<br>'text'(文字)<br>'text-image'(图文)<br>'picture-card'(卡片) | Enum | 'text'\ndata | 上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }） | Object/Function | -\nformatter | 数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)<br><br>**签名**:<br>Function() => void | Function | -\nmaxSize | 选择上传的文件的最大尺寸（单位：Byte） | Number | Infinity\nlanguage | 语言种类，支持 `en-us`、`zh-cn`、`zh-tw` | String | -\nlocale | 自定义语言包，会与默认提供的语言包做合并操作，[详细参考](http://gitlab.alibaba-inc.com/next/upload/blob/master/src/locale/index.js) | Object | -\nlimit | 最大文件上传个数 | Number | -\ndragable | 可选参数，是否支持拖拽上传，`ie10+` 支持。 | Boolean | true\ndisabled | 可选参数，是否禁用上传功能 | Boolean | -\nshowUploadList | 是否显示上传列表 | Boolean | true\nonChange | 上传文件改变时的状态<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 文件事件对象 | Function | () =&gt; {}\nonSuccess | 可选参数，上传成功回调函数，参数为请求下响应信息以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonRemove | 移除文件回调函数，详见 [onRemove](#onRemove)<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonError | 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nclassName | 自定义class | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 子元素 | ReactNode | -\naccept | 可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept) | String | -\nheaders | 可选参数，设置上传的请求头部 | Object | -\nname | 传递给服务器的文件参数 | String | -\nwithCredentials | 可选参数，是否允许请求携带 cookie | Boolean | -\nbeforeUpload | 可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传<br><br>**签名**:<br>Function() => void | Function | -\n","methodREADME":["**签名**:<br>Function(e: Event) => void<br>**参数**:<br>*e*: {Event} 拖拽事件<br>**返回值**:<br>{void} null<br>","**签名**:<br>Function(files: FileList) => void<br>**参数**:<br>*files*: {FileList} 文件列表<br>**返回值**:<br>{void} null<br>","**签名**:<br>Function(response: Object, file: File) => void<br>**参数**:<br>*response*: {Object} 服务器响应<br>*file*: {File} 文件对象<br>**返回值**:<br>{void} null<br>","**签名**:<br>Function(file: File) => void<br>**参数**:<br>*file*: {File} null<br>**返回值**:<br>{void} null<br>","**签名**:<br>Function(file: File) => void<br>**参数**:<br>*file*: {File} null<br>**返回值**:<br>{void} null<br>"],"subComponentsREADME":[{"name":"ImageUpload","propsREADME":"","methodREADME":[]},{"name":"DragUpload","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nonDragOver | 可选参数，拖拽到达拖拽区域回调函数<br><br>**签名**:<br>Function() => void | Function | -\nonDrop | 可选参数，拖拽释放回调函数，参数为拖拽的文件<br><br>**签名**:<br>Function() => void | Function | -\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\n","methodREADME":["**签名**:<br>Function(e: unknown) => void<br>**参数**:<br>*e*: {unknown} undefined","**签名**:<br>Function() => void","**签名**:<br>Function(fileList: unknown) => void<br>**参数**:<br>*fileList*: {unknown} undefined"]},{"name":"CropUpload","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\naction | 必选参数，上传的地址。使用 fileserver，跨域解决方案参考 [fileserver 接入](#fileserver)，[`非 fileserver` 使用说明](#not-fileserver) | String | '//kfupload.example.com/mupload'\nname | 可选参数，传递给服务器的文件参数 | String | 'avatar'\ncropSize | 可选参数，设置裁剪图片生成的尺寸，如设置 `100`，会生成 `100*100` 的图片 | Number/Object | -\nminCropBoxSize | 可选参数，设置裁剪框的最小尺寸 | Number | -\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nheaders | 可选参数，设置上传的请求头部 | Object | -\nformatter | 可选参数，数据格式化函数，配合自定义 `action` 使用，参数为服务器的响应数据，详见 [formatter](#formatter)<br><br>**签名**:<br>Function() => void | Function | -\ndata | 上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }） | Object/Function | -\nlocale | 自定义语言包，会与默认提供的语言包做合并操作，请严格按照默认语言包的格式，参考 [demo](http://next.alibaba-inc.com/demo/pc/upload#react-Upload-2) | Object | -\npreview | 是否使用预览功能 | Boolean | -\npreviewList | 预览展示列表，用来配置预览元素。目前仅支持 `80`、`60`、`40` 三种，例如，配置 `[80, 40]`，会展示 `80*80` 以及 `40*40` 两种尺寸 | Array | -\npopupClassName | 裁剪弹层自定义类名 | String | -\naspectRatio | 裁剪比例，例如 `1 / 2` 表示 `宽 / 高`。**注意：1、设置了裁剪比例，而且值不等于 `1` 时，不能使用预览功能；2、设置成 'auto' 可以支持任意裁剪比例** | Number | -\nviewMode | 可选参数，[定义裁剪框的模式](https://github.com/fengyuanchen/cropperjs#viewmode) | Number | -\nautoCropArea | 可选参数，[定义自动裁剪区域的尺寸（百分比）](https://github.com/fengyuanchen/cropperjs#autocroparea)，介于 `0` 与 `1` 之间的值 | Number | -\nzoomable | 图片是否可以伸缩 | Boolean | -\nbeforeCrop | 可选参数，选择文件后、唤起裁剪框前的钩子，参数为上传的文件。若返回 `false`、`Promise.reject()` 或者 `Promise.resolve(false)` 都会阻断后续流程，不会唤起裁剪框及后续动作<br><br>**签名**:<br>Function() => void | Function | -\nonCrop | 完成裁剪并上传的回调函数，参数为裁剪后的文件的base64字符串数据<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonChange | 可选参数，裁剪文件改变时触发<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nbeforeUpload | 可选参数，点击裁剪之后、上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonSuccess | 上传成功回调函数，`res` 为后台响应，`dataUrl` 为裁剪后的文件的base64字符串数据(注意与 `Upload` 的参数区别)<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonError | 可选参数，上传失败回调函数，参数为上传失败的文件信息<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\naccept | 图片类型 | String | 'image/png,image/jpg,image/jpeg,image/bmp,image/gif'\n","methodREADME":[]},{"name":"Core","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nstyle | 可选参数，自定义样式 | Object | -\naction | 必选参数，上传的地址 | String | -\nname | 可选参数，传递给服务器的文件参数 | String | 'file'\ndisabled | 可选参数，是否禁用上传功能 | Boolean | -\nmultiple | 可选参数，是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件 | Boolean | false\ndragable | 可选参数，是否支持拖拽上传，`ie10+` 支持。 | Boolean | -\naccept | 可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept) | String | -\ndata | 上传额外传参 | Object/Function | -\nheaders | 可选参数，设置上传的请求头部 | Object | -\nwithCredentials | 可选参数，是否允许请求携带 cookie | Boolean | false\nbeforeUpload | 可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonStart | 可选参数，开始上传文件的钩子，参数为上传的文件。如果开启了 `multiple`，参数为文件列表<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonProgress | 可选参数，正在上传文件的钩子，参数为上传的事件以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonSuccess | 可选参数，上传成功回调函数，参数为请求下响应信息以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonError | 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonAbort | 可选参数，中断上传请求回调函数，参数为中断事件以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\n","methodREADME":["**签名**:<br>Function(e: SyntheticEvent) => void<br>**参数**:<br>*e*: {SyntheticEvent} null<br>**返回值**:<br>{void} null<br>","**签名**:<br>Function() => void<br>**返回值**:<br>{void} null<br>","**签名**:<br>Function(e: SyntheticEvent) => void<br>**参数**:<br>*e*: {SyntheticEvent} null<br>**返回值**:<br>{void} null<br>","**签名**:<br>Function(e: SyntheticEvent) => void<br>**参数**:<br>*e*: {SyntheticEvent} null<br>**返回值**:<br>{void} null<br>","**签名**:<br>Function(files: File) => void<br>**参数**:<br>*files*: {File} 文件列表<br>**返回值**:<br>{void} null<br>","**签名**:<br>Function(file: File) => void<br>**参数**:<br>*file*: {File} 文件<br>**返回值**:<br>{void} null<br>"]},{"name":"List","propsREADME":"\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nlistType | 文件列表，数据格式请参考 文件对象<br><br>**可选值**:<br>'text', 'text-image', 'picture-card' | Enum | 'text'\nfileList | 文件列表 | Array | []\ncell | 渲染<br><br>**签名**:<br>Function(value: Object, idx: Number) => Element<br>**参数**:<br>*value*: {Object} 该行数据<br>*idx*: {Number} 序列<br>**返回值**:<br>{Element} 自定义内容<br> | Function | -\n","methodREADME":[]}],"demos":[{"title":"核心上传","order":"5","jsx":"import { Upload, Button } from \"@icedesign/base\";\n\nconst { Core } = Upload;\n\nclass UploadCore extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      disabled: false,\n      dragable: false\n    };\n\n    /* eslint-disable */\n    [\"onDisabledHandler\", \"onDragableHandler\", \"onAbortHandler\"].map(fn => {\n      this[fn] = this[fn].bind(this);\n    });\n    /* eslint-enable */\n  }\n\n  onDisabledHandler() {\n    this.setState({\n      disabled: !this.state.disabled\n    });\n  }\n\n  onDragableHandler() {\n    this.setState({\n      dragable: !this.state.dragable\n    });\n  }\n\n  onAbortHandler() {\n    this.refs.inner.abort();\n  }\n\n  render() {\n    return (\n      <div>\n        <Core\n          ref=\"inner\"\n          style={{\n            display: \"block\",\n            textAlign: \"center\",\n            width: \"200px\",\n            height: \"150px\",\n            lineHeight: \"150px\",\n            border: \"1px dashed #aaa\",\n            borderRadius: \"5px\",\n            fontSize: \"12px\"\n          }}\n          action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n          accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n          name=\"filename\"\n          disabled={this.state.disabled}\n          multiple\n          dragable={this.state.dragable}\n          multipart={{ _token: \"sdj23da\" }}\n          headers={{ Authorization: \"user_1\" }}\n          beforeUpload={beforeUpload}\n          onStart={onStart}\n          onProgress={onProgress}\n          onSuccess={onSuccess}\n          onError={onError}\n          onAbort={onAbort}\n        >\n          {this.state.disabled\n            ? \"禁止上传\"\n            : this.state.dragable ? \"支持点击或者拖拽上传\" : \"支持点击上传\"}\n        </Core>\n        <br />\n        <div>\n          <Button type=\"primary\" onClick={this.onDisabledHandler}>\n            切换 disabled 状态\n          </Button>&nbsp;\n          <Button type=\"primary\" onClick={this.onDragableHandler}>\n            切换 dragable 状态\n          </Button>&nbsp;\n          <Button type=\"primary\" onClick={this.onAbortHandler}>\n            中断全部上传\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<UploadCore />, mountNode);\n\nfunction beforeUpload(file) {\n  console.log(\"beforeUpload callback : \", file);\n}\n\nfunction onStart(files) {\n  console.log(\"onStart callback : \", files);\n}\n\nfunction onProgress(e, file) {\n  console.log(\"onProgress callback : \", e, file);\n}\n\nfunction onSuccess(res, file) {\n  console.log(\"onSuccess callback : \", res, file);\n}\n\nfunction onError(err, res, file) {\n  console.log(\"onError callback : \", err, res, file);\n}\n\nfunction onAbort(e, file) {\n  console.log(\"onAbort callback : \", e, file);\n}\n\n","css":"","body":"\n"},{"title":"裁剪上传","order":"4","jsx":"import { Upload, Button, Dialog } from \"@icedesign/base\";\n\nconst { CropUpload } = Upload;\n\nclass CropUploadApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSuccess = this.onSuccess.bind(this);\n  }\n\n  beforeCrop(file) {\n    console.log(\"beforeCrop callback : \", file);\n\n    // 返回 `false` 的方式\n    if (file.size > 1024 * 1024 * 3) {\n      Dialog.alert({\n        content: \"图片尺寸超过最大限制 3MB，请重新选择！\",\n        closable: false,\n        title: \"裁剪提醒\"\n      });\n      return false;\n    }\n\n    // 返回 `promise` 的方式\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const img = new Image();\n        img.onload = () => {\n          if (img.width <= 1200) {\n            resolve();\n          } else {\n            Dialog.alert({\n              content: `图片宽度为${\n                img.width\n              }px, 超过最大限制 1200px，请重新选择！`,\n              closable: false,\n              title: \"裁剪提醒\"\n            });\n            reject(); // resolve(false) 也能阻断流程\n          }\n        };\n        img.src = reader.result;\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n\n  onCrop(dataUrl) {\n    console.log(\"onCrop callback : \", dataUrl);\n  }\n\n  beforeUpload(file) {\n    console.log(\"beforeUpload callback : \", file);\n  }\n\n  onChange(file) {\n    console.log(\"onChange callback : \", file);\n  }\n\n  onSuccess(res, dataUrl) {\n    console.log(\"onSuccess callback : \", res);\n    this.refs.targetViewer.src = dataUrl;\n  }\n\n  render() {\n    return (\n      <CropUpload\n        action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n        preview\n        previewList={[80, 60, 40]}\n        minCropBoxSize={100}\n        beforeCrop={this.beforeCrop}\n        onCrop={this.onCrop}\n        beforeUpload={this.beforeUpload}\n        onChange={this.onChange}\n        onSuccess={this.onSuccess}\n      >\n        {/* CropUpload 内嵌的标签会成为呼出系统弹窗的 trigger */}\n        <Button type=\"primary\" style={{ margin: 0 }}>\n          上传头像\n        </Button>\n        <div style={{ marginTop: \"20px\" }}>\n          <img\n            ref=\"targetViewer\"\n            src=\"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n            width=\"120px\"\n            height=\"120px\"\n          />\n        </div>\n        {/* trigger end */}\n      </CropUpload>\n    );\n  }\n}\n\nReactDOM.render(<CropUploadApp />, mountNode);\n\n","css":"","body":"\n"},{"title":"自定义上传参数","order":"1","jsx":"import { Upload, Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Upload\n    listType=\"text\"\n    action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n    accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n    data={{ token: \"abcd\" }}\n    beforeUpload={beforeUpload}\n    onChange={onChange}\n    defaultFileList={[\n      {\n        name: \"IMG.png\",\n        status: \"done\",\n        size: 1024,\n        downloadURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        fileURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        imgURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n      }\n    ]}\n  >\n    <Button type=\"primary\" style={{ margin: \"0 0 10px\" }}>\n      上传文件\n    </Button>\n  </Upload>,\n  mountNode\n);\n\nfunction beforeUpload(info) {\n  console.log(\"beforeUpload callback : \", info);\n}\n\nfunction onChange(info) {\n  console.log(\"onChane callback : \", info);\n}\n\n","css":"","body":"\n`next@0.19.5` 开始参数从 multipart 改造为 `data`\n\n"},{"title":"拖拽上传","order":"3","jsx":"import { Upload } from \"@icedesign/base\";\n\nconst { DragUpload } = Upload;\n\nReactDOM.render(\n  <DragUpload\n    action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n    accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n    onDragOver={onDragOver}\n    onDrop={onDrop}\n  />,\n  mountNode\n);\n\nfunction onDragOver() {\n  console.log(\"dragover callback\");\n}\n\nfunction onDrop(fileList) {\n  console.log(\"drop callback : \", fileList);\n}\n\n","css":"","body":"\n"},{"title":"内容回填","order":"5","jsx":"import { Upload, Button, Field, Form } from \"@icedesign/base\";\n\nconst { ImageUpload } = Upload;\n\nconst FormItem = Form.Item;\n\nconst fileList = [\n  {\n    name: \"pic.png\",\n    fileName: \"pic.png\",\n    status: \"done\",\n    size: 1000,\n    downloadURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n    fileURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n    imgURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n  }\n];\n\nclass App extends React.Component {\n  field = new Field(this, {\n    deepReset: true // 打开清楚特殊类型模式(fileList是数组需要特别开启)\n  });\n\n  setValues = () => {\n    this.field.setValues({\n      upload: [...fileList]\n    });\n  };\n\n  getValues = () => {\n    const values = this.field.getValues();\n    console.log(values);\n  };\n\n  normFile = info => {\n    if (info.file.status === \"uploading\") {\n      console.log(\"正在上传文件，请稍后！\");\n    }\n    if (info.file.status === \"error\") {\n      console.log(\"上传文件出错，请重新上传！\");\n    }\n    if (info.file.status === \"done\") {\n      console.log(\"上传文件成功！\");\n    }\n\n    if (info.fileList && info.fileList.length) {\n      return info.fileList;\n    }\n    return [];\n  };\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <Form field={this.field}>\n        <FormItem>\n          <ImageUpload\n            listType=\"picture-card\"\n            action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n            accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n            {...init(\"upload\", {\n              valueName: \"fileList\",\n              initValue: fileList,\n              getValueFromEvent: this.normFile,\n              rules: [{ required: true, message: \"列表不能为空\" }]\n            })}\n          />\n        </FormItem>\n        <div>\n          <Button\n            onClick={this.setValues}\n            type=\"primary\"\n            style={{ margin: \"0 0 10px\" }}\n          >\n            设置数据\n          </Button>&nbsp;&nbsp;\n          <Button\n            onClick={this.getValues}\n            type=\"primary\"\n            style={{ margin: \"0 0 10px\" }}\n          >\n            获取数据\n          </Button>&nbsp;&nbsp;\n          <Button\n            onClick={() => this.field.reset()}\n            type=\"primary\"\n            style={{ margin: \"0 0 10px\" }}\n          >\n            重置\n          </Button>&nbsp;&nbsp;\n          <Button\n            onClick={() => this.field.validate()}\n            type=\"primary\"\n            style={{ margin: \"0 0 10px\" }}\n          >\n            校验\n          </Button>\n        </div>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n"},{"title":"图片上传（卡片式）","order":"2","jsx":"import { Upload } from \"@icedesign/base\";\n\nconst { ImageUpload } = Upload;\n\nReactDOM.render(\n  <ImageUpload\n    listType=\"picture-card\"\n    action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n    accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n    locale={{\n      image: {\n        cancel: \"取消上传\",\n        addPhoto: \"上传图片\"\n      }\n    }}\n    beforeUpload={beforeUpload}\n    onChange={onChange}\n    onSuccess={onSuccess}\n    onError={onError}\n    defaultFileList={[\n      {\n        name: \"IMG.png\",\n        status: \"done\",\n        downloadURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        fileURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        imgURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n      }\n    ]}\n  />,\n  mountNode\n);\n\nfunction beforeUpload(info) {\n  console.log(\"beforeUpload callback : \", info);\n}\n\nfunction onChange(info) {\n  console.log(\"onChane callback : \", info);\n}\n\nfunction onSuccess(res, file) {\n  console.log(\"onSuccess callback : \", res, file);\n}\n\nfunction onError(file) {\n  console.log(\"onError callback : \", file);\n}\n\n","css":"","body":"\n"},{"title":"文件上传","order":"8","jsx":"import { Upload } from \"@icedesign/base\";\n\nconst fileList = [\n  {\n    fileName: \"IMG.png\",\n    status: \"done\",\n    size: 1024,\n    downloadURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n    fileURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n    imgURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n  }\n];\n\nconst cell = (file, idx) => {\n  return (\n    <div className=\"custom\" key={idx}>\n      <img src={file.imgURL} />\n      <span>\n        <li> {file.fileName} </li>\n        <li> {file.size / 1024}KB</li>\n      </span>\n    </div>\n  );\n};\n\nReactDOM.render(\n  <div>\n    <Upload.List listType=\"text\" fileList={fileList} />\n    <br />\n    <Upload.List listType=\"text-image\" fileList={fileList} />\n    <br />\n    <Upload.List listType=\"picture-card\" fileList={fileList} />\n    <br />自定义内容\n    <Upload.List listType=\"text-image\" cell={cell} fileList={fileList} />\n  </div>,\n  mountNode\n);\n\n","css":".custom img {\n    width: 50px;\n    height: 50px;\n    float: left;\n}\n.custom span {\n    float: left;\n    color: blue;\n    margin-left: 10px;\n}\n.custom li {\n    list-style: none;\n    line-height: 25px;\n}\n","body":"\n"},{"title":"图片上传","order":"1","jsx":"import { Upload, Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Upload\n    listType=\"text-image\"\n    action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n    accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n    beforeUpload={beforeUpload}\n    onChange={onChange}\n    defaultFileList={[\n      {\n        name: \"IMG.png\",\n        status: \"done\",\n        size: 100,\n        downloadURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        fileURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        imgURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n      }\n    ]}\n  >\n    <Button type=\"primary\" style={{ margin: \"0 0 10px\" }}>\n      上传文件\n    </Button>\n  </Upload>,\n  mountNode\n);\n\nfunction beforeUpload(info) {\n  console.log(\"beforeUpload callback : \", info);\n}\n\nfunction onChange(info) {\n  console.log(\"onChane callback : \", info);\n}\n\n","css":"","body":"\n"},{"title":"文件上传","order":"0","jsx":"import { Upload, Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Upload\n    listType=\"text\"\n    action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n    accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n    beforeUpload={beforeUpload}\n    onChange={onChange}\n    onSuccess={onSuccess}\n    multiple\n    defaultFileList={[\n      {\n        name: \"IMG.png\",\n        status: \"done\",\n        size: 1024,\n        downloadURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        fileURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        imgURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n      }\n    ]}\n  >\n    <Button type=\"primary\" style={{ margin: \"0 0 10px\" }}>\n      上传文件\n    </Button>\n  </Upload>,\n  mountNode\n);\n\nfunction beforeUpload(info) {\n  console.log(\"beforeUpload : \", info);\n}\n\nfunction onChange(info) {\n  console.log(\"onChane : \", info);\n}\n\nfunction onSuccess(info) {\n  console.log(\"onSuccess : \", info);\n}\n\n","css":"","body":"\n"}]}];

/***/ }),
/* 251 */
/***/ (function(module) {

module.exports = [{"name":"Affix","category":"Components","title":"固钉","type":"基本","importStatement":"import { Affix } from '@alifd/next';","body":"\n## Guide\n\n### 何时使用\n\n当用户需要将某个组件固定在页面的某个位置时，可以使用 Affix 组件进行固定。\n\n API\n\n### Affix\n\n| 参数           | 说明                                                                                                                  | 类型       | 默认值          |\n| ------------ | ------------------------------------------------------------------------------------------------------------------- | -------- | ------------ |\n| container    | 设置 Affix 需要监听滚动事件的容器元素<br><br>**签名**:<br>Function() => ReactElement<br>**返回值**:<br>{ReactElement} 目标容器元素的实例<br>     | Function | () => window |\n| offsetTop    | 距离窗口顶部达到指定偏移量后触发                                                                                                    | Number   | -            |\n| offsetBottom | 距离窗口底部达到制定偏移量后触发                                                                                                    | Number   | -            |\n| onAffix      | 当元素的样式发生固钉样式变化时触发的回调函数<br><br>**签名**:<br>Function(元素是否被固钉: Boolean) => void<br>**参数**:<br>_元素是否被固钉_: {Boolean} null | Function | func.noop    |\n| useAbsolute  | 是否启用绝对布局实现 affix                                                                                                    | Boolean  | -            |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"启用绝对布局","order":"3","jsx":"import { Affix, Button } from '@alifd/next';\n\nclass Demo extends React.Component {\n\n    _containerRefHandler(ref) {\n        this.container = ref;\n    }\n\n    render() {\n        return (\n            <div className=\"custom-affix-container\" ref={this._containerRefHandler.bind(this)}>\n                <div className=\"affix-wrapper\">\n                    <Affix container={() => this.container} offsetTop={0} useAbsolute>\n                        <Button type=\"secondary\">Affixed Button</Button>\n                    </Affix>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nReactDOM.render(<Demo />, mountNode);\n","css":".custom-affix-container {\n    height: 150px;\n    overflow-y: scroll;\n    width: 50px;\n    background: url(https://img.alicdn.com/tfs/TB1AbJXSpXXXXXJXpXXXXXXXXXX-32-32.jpg) repeat 50% 50%;\n}\n\n.custom-affix-container .affix-wrapper {\n    padding-top: 100px;\n    height: 500px;\n}\n","body":"\n<p>可以通过 <code>container</code> 属性设置 Affix 组件需要监听其滚动事件的元素，该属性接收一个函数作为参数，默认为 <code>() =&gt; window</code>；\n设置 useAbsolute 为 true，通过 absolute 布局实现组件固定。</p>\n"},{"title":"基本","order":"0","jsx":"import { Affix, Button } from '@alifd/next';\n\nReactDOM.render(<div className=\"custom-affix-wrapper\">\n    <Affix>\n        <Button type=\"secondary\">Affixed Button</Button>\n    </Affix>\n</div>, mountNode);\n","css":".custom-affix-wrapper {\n    padding: 40px 0;\n}\n","body":"\n<p>默认情况下，Affix 的默认目标容器元素是整个 <code>window</code>，并且 <code>offsetTop = 0</code>，\n也就意味着当页面往下滚动时，当 Affix 元素接触到浏览器边框时，此时会将 Affix 钉住。</p>\n"},{"title":"自定义目标容器","order":"2","jsx":"import { Affix, Button } from '@alifd/next';\n\nclass Demo extends React.Component {\n\n    _containerRefHandler(ref) {\n        this.container = ref;\n    }\n\n    render() {\n        return (\n            <div className=\"custom-affix-container\" ref={this._containerRefHandler.bind(this)}>\n                <div className=\"affix-wrapper\">\n                    <Affix container={() => this.container} offsetTop={0}>\n                        <Button type=\"secondary\">Affixed Button</Button>\n                    </Affix>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nReactDOM.render(<Demo />, mountNode);\n","css":".custom-affix-container {\n    height: 150px;\n    overflow-y: scroll;\n    background: url(https://img.alicdn.com/tfs/TB1AbJXSpXXXXXJXpXXXXXXXXXX-32-32.jpg) repeat 50% 50%;\n}\n\n.custom-affix-container .affix-wrapper {\n    padding-top: 50px;\n    height: 500px;\n}\n","body":"\n<p>可以通过 <code>container</code> 属性设置 Affix 组件需要监听其滚动事件的元素，该属性接收一个函数作为参数，默认为 <code>() =&gt; window</code>。</p>\n"},{"title":"自定义偏移量","order":"1","jsx":"import { Affix, Button } from '@alifd/next';\n\nReactDOM.render(<div className=\"custom-affix-wrapper\">\n    <Affix offsetBottom={0}>\n        <Button type=\"secondary\">Affixed Button</Button>\n    </Affix>\n</div>, mountNode);\n","css":".custom-affix-wrapper {\n    padding: 40px 0;\n}\n","body":"\n<p>可以通过 <code>offsetTop</code> 或 <code>offsetBottom</code> 自定义偏移量。</p>\n"},{"title":"onAffix","order":"4","jsx":"import { Affix, Button } from '@alifd/next';\n\nclass Demo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            affixed: false,\n        };\n    }\n\n    onAffix = (affixed) => {\n        this.setState({\n            affixed,\n        });\n    }\n\n    render() {\n        const state = this.state;\n\n        return (<div className=\"affix-demo-wrapper\">\n            <Affix onAffix={this.onAffix}>\n                <Button type=\"secondary\">{state.affixed ? 'Affixed Button' : 'Unaffixed Button'}</Button>\n            </Affix>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<Demo />, mountNode);\n","css":".affix-demo-wrapper {\n    padding: 40px 0;\n}\n","body":"\n<p>可以通过传入 <code>onAffix</code> 的事件回调函数来监听元素是否发生了固钉状态。该函数会在状态变化时返回固钉状态。</p>\n"}]},{"name":"Animate","category":"Components","title":"动画","importStatement":"import { Animate } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n需要自定义动效\n\n API\n\n### Animate\n\n| 参数              | 说明                                                                                                                                                | 类型                                  | 默认值      |\n| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------- | -------- |\n| animation       | 动画 className                                                                                                                                      | String/Object                       | -        |\n| animationAppear | 子元素第一次挂载时是否执行动画                                                                                                                                   | Boolean                             | true     |\n| component       | 包裹子元素的标签                                                                                                                                          | any                                 | 'div'    |\n| singleMode      | 是否只有单个子元素，如果有多个子元素，请设置为 false                                                                                                                     | Boolean                             | true     |\n| children        | 子元素                                                                                                                                               | ReactElement/Array&lt;ReactElement> | -        |\n| beforeAppear    | 执行第一次挂载动画前触发的回调函数<br><br>**签名**:<br>Function() => void                                                                                            | Function                            | () => {} |\n| onAppear        | 执行第一次挂载动画，添加 xxx-appear-active 类名后触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素 | Function                            | () => {} |\n| afterAppear     | 执行完第一次挂载动画后触发的函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素                          | Function                            | () => {} |\n| beforeEnter     | 执行进场动画前触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素                            | Function                            | () => {} |\n| onEnter         | 执行进场动画，添加 xxx-enter-active 类名后触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素     | Function                            | () => {} |\n| afterEnter      | 执行完进场动画后触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素                           | Function                            | () => {} |\n| beforeLeave     | 执行离场动画前触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素                            | Function                            | () => {} |\n| onLeave         | 执行离场动画，添加 xxx-leave-active 类名后触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素     | Function                            | () => {} |\n| afterLeave      | 执行完离场动画后触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素                           | Function                            | () => {} |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Animate } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { visible: true };\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle() {\n        this.setState({\n            visible: !this.state.visible\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.handleToggle}>Toggle visible</button>\n                <Animate animation={{\n                    enter: 'my-zoom-in',\n                    leave: 'my-zoom-out'\n                }}>\n                    {this.state.visible ?\n                        <div className=\"basic-demo\">Next Animate</div> :\n                        null}\n                </Animate>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".basic-demo {\n    font-size: 96px;\n    text-align: center;\n}\n\n.my-zoom-in {\n    opacity: 0;\n}\n\n.my-zoom-in-active {\n    animation: my-zoom-in 500ms linear;\n}\n\n.my-zoom-out {\n    opacity: 1;\n}\n\n.my-zoom-out-active {\n    animation: my-zoom-out 500ms linear;\n}\n\n@keyframes my-zoom-in {\n    from {\n        opacity: 0;\n        transform: scale3d(.3, .3, .3);\n    }\n\n    50% {\n        opacity: 1;\n    }\n\n    to {\n        opacity: 1;\n    }\n}\n\n@keyframes my-zoom-out {\n    from {\n        opacity: 1;\n    }\n\n    50% {\n        opacity: 0;\n        transform: scale3d(.3, .3, .3);\n    }\n\n    to {\n        opacity: 0;\n    }\n}\n","body":"\n<p>展示单个子元素的进场离场动画。</p>\n"},{"title":"展开收起动画","order":"2","jsx":"import { Animate } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { expand: true };\n        ['beforeEnter', 'onEnter', 'afterEnter', 'beforeLeave', 'onLeave', 'afterLeave', 'handleToggle'].forEach(method => {\n            this[method] = this[method].bind(this);\n        });\n    }\n\n    handleToggle() {\n        this.setState({\n            expand: !this.state.expand\n        });\n    }\n\n    beforeEnter(node) {\n        this.height = node.offsetHeight;\n        node.style.height = '0px';\n    }\n\n    onEnter(node) {\n        node.style.height = `${this.height}px`;\n    }\n\n    afterEnter(node) {\n        this.height = null;\n        node.style.height = null;\n    }\n\n    beforeLeave(node) {\n        node.style.height = `${this.height}px`;\n    }\n\n    onLeave(node) {\n        node.style.height = '0px';\n    }\n\n    afterLeave(node) {\n        node.style.height = null;\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.handleToggle}>Toggle expand</button>\n                <Animate animation=\"expand\"\n                    beforeEnter={this.beforeEnter}\n                    onEnter={this.onEnter}\n                    afterEnter={this.afterEnter}\n                    beforeLeave={this.beforeLeave}\n                    onLeave={this.onLeave}\n                    afterLeave={this.afterLeave}>\n                    {this.state.expand ?\n                        <div className=\"notice\"></div> :\n                        null}\n                </Animate>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".expand-enter {\n    overflow: hidden;\n}\n\n.expand-enter-active {\n    transition: height 0.3s ease-out;\n}\n\n.expand-leave {\n    overflow: hidden;\n}\n\n.expand-leave-active {\n    transition: height 0.3s ease-out;\n}\n\n.notice {\n    width: 200px;\n    height: 100px;\n    margin-top: 20px;\n    border: 1px solid #ccc;\n}\n","body":"\n<p>展示单个子元素的展开收起动画。</p>\n"},{"title":"多个子元素动画","order":"1","jsx":"import { Animate } from '@alifd/next';\n\nclass TodoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { items: ['hello', 'world', 'click', 'me'] };\n    }\n\n    handleAdd() {\n        this.setState({\n            items: [\n                ...this.state.items,\n                // eslint-disable-next-line\n                prompt('Enter some text')\n            ]\n        });\n    }\n\n    handleRemove(i) {\n        const newItems = this.state.items.slice();\n        newItems.splice(i, 1);\n        this.setState({ items: newItems });\n    }\n\n    render() {\n        return (\n            <div className=\"totolist-container\">\n                <Animate animationAppear animation=\"fade\" className=\"todo-list\" singleMode={false}\n                    beforeAppear={() => console.log('before appear')}\n                    onAppear={() => console.log('appear')}\n                    afterAppear={() => console.log('after appear')}\n                    beforeEnter={() => console.log('before enter')}\n                    onEnter={() => console.log('enter')}\n                    afterEnter={() => console.log('after enter')}\n                    beforeLeave={() => console.log('before leave')}\n                    onLeave={() => console.log('leave')}\n                    afterLeave={() => console.log('after leave')}>\n                    {this.state.items.map((item, i) => (\n                        <div key={item}>\n                            {item}\n                            <button onClick={() => this.handleRemove(i)}>\n                                &times;\n                            </button>\n                        </div>\n                    ))}\n                </Animate>\n                <button onClick={() => this.handleAdd()}>Add Item</button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<TodoList />, mountNode);\n","css":".fade-appear {\n  opacity: 0.01;\n}\n\n.fade-appear.fade-appear-active {\n  opacity: 1;\n  transition: opacity 1000ms ease-in;\n}\n\n.fade-enter {\n  opacity: 0.01;\n}\n\n.fade-enter.fade-enter-active {\n  opacity: 1;\n  transition: opacity 1000ms ease-in;\n}\n\n.fade-leave {\n  opacity: 1;\n}\n\n.fade-leave.fade-leave-active {\n  opacity: 0.01;\n  transition: opacity 800ms ease-in;\n}\n\n.totolist-container {\n  padding: 20px;\n  border: 1px solid #ccc;\n  width: 200px;\n  border-radius: 4px;\n}\n\n.todo-list > * {\n  margin: 5px 0;\n  padding: 5px 0;\n  border-bottom:  1px solid #ccc;\n}\n\n.totolist-container > button {\n  margin-top: 20px;\n}\n","body":"\n<p>展示多个子元素的进场离场动画。</p>\n"}]},{"name":"Badge","category":"Components","title":"徽标数","type":"展示","importStatement":"import { Badge } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n在有新消息、讯息时，或者是app/插件/功能模块可以更新、升级时使用这个组件。\n\n API\n\n### Badge\n\n| 参数            | 说明                                                    | 类型            | 默认值   |\n| ------------- | ----------------------------------------------------- | ------------- | ----- |\n| children      | 徽章依托的内容                                               | ReactNode     | -     |\n| count         | 展示的数字，大于 overflowCount 时显示为 ${overflowCount}+，为 0 时隐藏 | Number/String | 0     |\n| content       | 自定义节点内容                                               | ReactNode     | -     |\n| overflowCount | 展示的封顶的数字                                              | Number/String | 99    |\n| dot           | 不展示数字，只展示一个小红点                                        | Boolean       | false |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Badge } from '@alifd/next';\n\nReactDOM.render(\n    <Badge count={5}>\n        <a href=\"#\" className=\"basic-example\"></a>\n    </Badge>, mountNode);\n","css":".basic-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 8px;\n    background: #eee;\n}\n","body":"\n<p>简单的徽章展示。</p>\n"},{"title":"动态","order":"3","jsx":"import { Badge, Button, Icon } from '@alifd/next';\n\n\n\nconst ButtonGroup = Button.Group;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            count: 5,\n            show: true\n        };\n\n        this.increase = this.increase.bind(this);\n        this.decrease = this.decrease.bind(this);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    increase() {\n        const count = this.state.count + 1;\n        this.setState({ count });\n    }\n\n    decrease() {\n        let count = this.state.count - 1;\n        if (count < 0) {\n            count = 0;\n        }\n        this.setState({ count });\n    }\n\n    onClick() {\n        this.setState({\n            show: !this.state.show\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"change-count\">\n                    <Badge count={this.state.count}>\n                        <a href=\"#\" className=\"head-example\"></a>\n                    </Badge>\n                    <ButtonGroup>\n                        <Button onClick={this.increase}>\n                            <Icon type=\"add\"/>\n                        </Button>\n                        <Button onClick={this.decrease}>\n                            <Icon type=\"minus\"/>\n                        </Button>\n                    </ButtonGroup>\n                </div>\n                <div>\n                    <Badge dot={this.state.show}>\n                        <a href=\"#\" className=\"head-example\"></a>\n                    </Badge>\n                    <Button onClick={this.onClick}>\n                        Toggle Display\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".next-badge {\n    margin-right: 16px;\n}\n.change-count {\n    margin-bottom: 16px;\n}\n.head-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 8px;\n    background: #eee;\n}\n","body":"\n<p>展示动态变化的效果。</p>\n"},{"title":"自定义徽标内容","order":"4","jsx":"import { Badge, Icon } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Badge content=\"hot\" style={{backgroundColor: '#FC0E3D', color: '#FFFFFF'}}>\n            <a href=\"#\" className=\"head-example\"></a>\n        </Badge>\n        <Badge content={<Icon type=\"error\" />} style={{backgroundColor: 'transparent', color: 'red', padding: 0}}>\n            <a href=\"#\" className=\"head-example\"></a>\n        </Badge>\n    </div>, mountNode);\n","css":".next-badge {\n    margin-right: 24px;\n}\n.head-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 8px;\n    background-color: #eee;\n}\n","body":"\n<p>通过 <code>content</code> 属性可以自定义徽标的内容，自定义内容不包含任何色彩样式，完全由使用者自己定义。</p>\n"},{"title":"讨嫌的小红点","order":"2","jsx":"import { Badge, Icon } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Badge dot>\n            <Icon type=\"email\" />\n        </Badge>\n        <Badge dot>\n            <a href=\"#\">A Link</a>\n        </Badge>\n    </div>, mountNode);\n","css":".next-badge {\n    margin-right: 16px;\n}\n","body":"\n<p>没有具体的数字。</p>\n"},{"title":"独立使用","order":"5","jsx":"import { Badge } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Badge count={25} />\n        <Badge count={4} style={{backgroundColor: '#fff', color: '#999', border: '1px solid #d9d9d9'}} />\n        <Badge count={109} style={{backgroundColor: '#87d068'}} />\n        <Badge dot />\n        <Badge content=\"hot\" style={{backgroundColor: '#FC0E3D', color: '#FFFFFF'}} />\n    </div>, mountNode);\n","css":".next-badge {\n    margin-right: 16px;\n}\n","body":"\n<p>不包裹任何元素即独立使用，可自定样式展示。</p>\n"},{"title":"大数字","order":"1","jsx":"import { Badge } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Badge count={100}>\n            <a href=\"#\" className=\"head-example\"></a>\n        </Badge>\n        <Badge count={200} overflowCount={199}>\n            <a href=\"#\" className=\"head-example\"></a>\n        </Badge>\n    </div>, mountNode);\n","css":".next-badge {\n    margin-right: 16px;\n}\n.head-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 8px;\n    background: #eee;\n}\n","body":"\n<p>超过overflow的数值，会显示<code>\\${overflow}+</code>，overflow默认值为<code>99</code>。</p>\n"}]},{"name":"Balloon","category":"Components","title":"气泡提示","type":"弹层","importStatement":"import { Balloon } from '@alifd/next';","body":"\n## 开发指南\n\n气泡组件\n\n### 何时使用\n\n-   当用户与被说明对象（文字，图片，输入框等）发生交互行为的action开始时, 即刻跟随动作出现一种辅助或帮助的提示信息。\n-   其中Balloon.Tooltip是简化版本，主要用于hover时显示简单文案。\n\n### 使用注意\n\n-   对于trigger是自定义的React Component的情况，自定义的React Component 需要透传onMouseEnter/onMouseLeave/onClick 事件。\n\n API\n\n### Balloon\n\n| 参数                   | 说明                                                                                                                                                                    | 类型              | 默认值                                      |\n| -------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- | ---------------------------------------- |\n| children             | 浮层的内容                                                                                                                                                                 | any             | -                                        |\n| type                 | 样式类型<br><br>**可选值**:<br>'normal', 'primary'                                                                                                                           | Enum            | 'normal'                                 |\n| visible              | 弹层当前显示的状态                                                                                                                                                             | Boolean         | -                                        |\n| defaultVisible       | 弹层默认显示的状态                                                                                                                                                             | Boolean         | false                                    |\n| onVisibleChange      | 弹层在显示和隐藏触发的事件<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否隐藏和显示                                                       | Function        | func.noop                                |\n| alignEdge            | 弹出层对齐方式                                                                                                                                                               | Boolean         | false                                    |\n| closable             | 是否显示关闭按钮                                                                                                                                                              | Boolean         | true                                     |\n| align                | 弹出层位置<br><br>**可选值**:<br>'t'(上)<br>'r'(右)<br>'b'(下)<br>'l'(左)<br>'tl'(上左)<br>'tr'(上右)<br>'bl'(下左)<br>'br'(下右)<br>'lt'(左上)<br>'lb'(左下)<br>'rt'(右上)<br>'rb'(右下 及其 两两组合) | Enum            | 'b'                                      |\n| offset               | 弹层相对于trigger的定位的微调                                                                                                                                                    | Array           | [0, 0]                                   |\n| trigger              | 触发元素                                                                                                                                                                  | any             | &lt;span>&lt;/span>                      |\n| triggerType          | 触发行为<br>鼠标悬浮, 获取到焦点, 鼠标点击('hover'，'focus'，'click')或者它们组成的数组，如 ['hover', 'focus']                                                                                      | String/Array    | 'hover'                                  |\n| onClose              | 任何visible为false时会触发的事件<br><br>**签名**:<br>Function() => void                                                                                                           | Function        | func.noop                                |\n| needAdjust           | 是否进行自动位置调整                                                                                                                                                            | Boolean         | false                                    |\n| delay                | 弹层在触发以后的延时显示, 单位毫秒 ms                                                                                                                                                 | Number          | -                                        |\n| afterClose           | 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void                                                                                                      | Function        | func.noop                                |\n| shouldUpdatePosition | 强制更新定位信息                                                                                                                                                              | Boolean         | -                                        |\n| autoFocus            | 弹层出现后是否自动focus到内部第一个元素                                                                                                                                                | Boolean         | false                                    |\n| safeNode             | 安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象                                                                         | String          | undefined                                |\n| safeId               | 用来指定safeNode节点的id，和safeNode配合使用                                                                                                                                       | String          | null                                     |\n| animation            | 配置动画的播放方式                                                                                                                                                             | Object/Boolean  | {     in: 'zoomIn',     out: 'zoomOut' } |\n| cache                | 弹层的dom节点关闭时是否删除                                                                                                                                                       | Boolean         | false                                    |\n| popupContainer       | 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。                                                                                                                                   | String/Function | -                                        |\n| popupStyle           | 弹层组件style，透传给Popup                                                                                                                                                    | Object          | {}                                       |\n| popupClassName       | 弹层组件className，透传给Popup                                                                                                                                                | String          | ''                                       |\n| popupProps           | 弹层组件属性，透传给Popup                                                                                                                                                       | Object          | {}                                       |\n| id                   | 弹层id, 传入值才会支持无障碍                                                                                                                                                      | String          | -                                        |\n\n### Balloon.Tooltip\n\n| 参数             | 说明                                                                                                                                                                    | 类型              | 默认值                 |\n| -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- | ------------------- |\n| children       | tooltip的内容                                                                                                                                                            | any             | -                   |\n| align          | 弹出层位置<br><br>**可选值**:<br>'t'(上)<br>'r'(右)<br>'b'(下)<br>'l'(左)<br>'tl'(上左)<br>'tr'(上右)<br>'bl'(下左)<br>'br'(下右)<br>'lt'(左上)<br>'lb'(左下)<br>'rt'(右上)<br>'rb'(右下 及其 两两组合) | Enum            | 'b'                 |\n| trigger        | 触发元素                                                                                                                                                                  | any             | &lt;span>&lt;/span> |\n| triggerType    | 触发行为<br>鼠标悬浮, 获取到焦点, 鼠标点击('hover'，'focus'，'click')或者它们组成的数组，如 ['hover', 'focus']                                                                                      | String/Array    | 'hover'             |\n| popupStyle     | 弹层组件style，透传给Popup                                                                                                                                                    | Object          | -                   |\n| popupClassName | 弹层组件className，透传给Popup                                                                                                                                                | String          | -                   |\n| popupProps     | 弹层组件属性，透传给Popup                                                                                                                                                       | Object          | -                   |\n| pure           | 是否pure render                                                                                                                                                         | Boolean         | -                   |\n| popupContainer | 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。                                                                                                                                   | String/Function | -                   |\n| id             | 弹层id, 传入值才会支持无障碍                                                                                                                                                      | String          | -                   |\n\n## 已知问题\n\n-   对于 disabled 的元素，onMouseLeave 事件在chrome下无法触发，此为chrome的bug，暂时无法绕过。\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"边缘对齐设置","order":"3","jsx":"import { Button, Balloon } from '@alifd/next';\n\n\n\n\nconst top = <Button  id=\"top\" style={{margin: '5px'}} className=\"btrigger\">top</Button>;\nconst right = <Button  id=\"right\" style={{margin: '5px'}} className=\"btrigger\">right</Button>;\nconst bottom = <Button id=\"bottom\" style={{margin: '5px'}} className=\"btrigger\">bottom</Button>;\nconst left = <Button id=\"left\" style={{margin: '5px'}} className=\"btrigger\">left</Button>;\nconst topLeft = <Button id=\"topLeft\" style={{margin: '5px'}} className=\"btrigger\">top left</Button>;\nconst topRight = <Button id=\"topRight\" style={{margin: '5px'}} className=\"btrigger\">top right</Button>;\nconst rightTop = <Button id=\"rightTop\" style={{margin: '5px'}} className=\"btrigger\">right top</Button>;\nconst rightBottom = <Button id=\"rightBottom\" style={{margin: '5px'}} className=\"btrigger\">right bottom</Button>;\nconst bottomLeft = <Button id=\"bottomLeft\" style={{margin: '5px'}} className=\"btrigger\">bottom left</Button>;\nconst bottomRight = <Button id=\"bottomRight\" style={{margin: '5px'}} className=\"btrigger\">bottom right</Button>;\nconst leftTop = <Button id=\"leftTop\" style={{margin: '5px'}} className=\"btrigger\">left top</Button>;\nconst leftBottom = <Button id=\"leftBottom\" style={{margin: '5px'}} className=\"btrigger\">left bottom</Button>;\n\nconst Content = () => (\n    <div>\n        <h4 style={{marginTop: 0}}>balloon title</h4>\n        <hr/>\n        <p>\n            balloon content\n        </p>\n    </div>\n);\n\nconst App = () => (\n    <div style={{paddingLeft: 320, paddingTop: 100}}>\n        <div style={{marginLeft: 75}}>\n            <Balloon trigger={topLeft} align=\"tl\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={top} align=\"t\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={topRight} align=\"tr\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n        </div>\n        <div style={{width: 80, float: 'left'}}>\n            <Balloon trigger={leftTop} align=\"lt\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={left} align=\"l\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={leftBottom} align=\"lb\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n        </div>\n        <div style={{width: 80, marginLeft: 290}}>\n            <Balloon trigger={rightTop} align=\"rt\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={right} align=\"r\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={rightBottom} align=\"rb\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n        </div>\n        <div style={{marginLeft: 80, clear: 'both'}}>\n            <Balloon trigger={bottomLeft} align=\"bl\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={bottom} align=\"b\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={bottomRight} align=\"br\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n        </div>\n    </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n<p>位置有十二个方向。</p>\n"},{"title":"基本","order":"0","jsx":"import { Button, Balloon } from '@alifd/next';\n\n\n\nconst defaultTrigger = <Button className=\"btrigger\" style={{margin: '5px'}}>default style</Button>;\nconst primary = <Button className=\"btrigger\" style={{margin: '5px'}}>primary style</Button>;\n\n\nconst Demo = () => (\n    <div className=\"container\">\n        <Balloon  trigger={defaultTrigger} closable={false}>\n            default\n        </Balloon>\n        <Balloon type=\"primary\" trigger={primary}  triggerType=\"click\">\n            primary\n        </Balloon>\n    </div>\n);\n\nReactDOM.render(<Demo />, mountNode);\n\n","css":"","body":"\n<p>最简单的用法。</p>\n"},{"title":"从浮层内关闭, 事件回调","order":"4","jsx":"import { Button, Balloon } from '@alifd/next';\n\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false\n        };\n    }\n\n    hide() {\n        this.setState({\n            visible: false\n        });\n    }\n\n    // onVisibleChange callback will be triggered when visible changes.\n    // For example, for click type, it'll be triggered when clicking the button and later the other areas;\n    // for hover type, it'll be triggered when mouse enter and mouse leave\n    handleVisibleChange(visible) {\n        this.setState({visible});\n    }\n\n    onClose() {\n        console.log('onClose doing!');\n    }\n\n    afterClose() {\n        console.log('afterClose doing!');\n    }\n    render() {\n        const visibleTrigger = <Button type=\"primary\" style={{margin: '5px'}}>click to popup the card</Button>;\n        const clickTrigger = <Button type=\"primary\" style={{margin: '5px'}}>hover to popup the card</Button>;\n\n        const content = (<div>\n            click the button<br/>\n            <a style={{right: 0}} id=\"confirmBtn\" onClick={this.hide.bind(this)}>confirm</a>\n            <a style={{marginLeft: '4px'}} id=\"cancelBtn\" onClick={this.hide.bind(this)}>cancel</a>\n        </div>);\n        return (\n            <div>\n                <Balloon trigger={visibleTrigger}\n                    triggerType=\"click\"\n                    visible={this.state.visible}\n                    onVisibleChange={this.handleVisibleChange.bind(this)}\n                >\n                    {content}\n                </Balloon>\n                <Balloon trigger={clickTrigger}\n                    triggerType=\"hover\"\n                    onClose={this.onClose.bind(this)}\n                    afterClose={this.afterClose.bind(this)}>\n                    {content}\n                </Balloon>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n<p>使用 <code>visible</code> ,属性控制浮层显示, 使 balloon 变为受限组件。</p>\n"},{"title":"嵌套浮层问题","order":"6","jsx":"import { Button, Balloon, DatePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst primary = <Button className=\"btrigger\">primary</Button>;\nconst innerButton = <Button className=\"btrigger\">innerButton</Button>;\nconst dateValue = moment('2018-01-01', 'YYYY-MM-DD', true);\n\nconst App = () => (\n    <div className=\"container nested\">\n        <Balloon type=\"primary\" trigger={primary} closable={false} triggerType=\"click\">\n            <DatePicker defaultValue={dateValue} popupContainer={\n                (trigger) => trigger.parentNode\n            } />\n        </Balloon>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        <Balloon type=\"primary\"  trigger={innerButton} closable={false} triggerType=\"click\">\n            <Balloon trigger={<Button type=\"primary\">please click</Button>} popupContainer={(trigger) => trigger.parentNode} triggerType=\"click\">\n                nesting balloon content\n            </Balloon>\n        </Balloon>\n    </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n","css":"\n.container.nested {\n    margin-left: 100px;\n    margin-bottom: 50px;\n}\n\n","body":"\n<p>浮层中如果又有浮层,比如在Balloon中有DatePicker的浮层,需要用safeNode解决datePicker选择时,balloon浮层关闭的问题.</p>\n"},{"title":"close按钮事件，手动控制visible","order":"5","jsx":"import { Button, Balloon } from '@alifd/next';\n\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false\n        };\n    }\n\n    // triggered every time visible becomes false\n    onClose() {\n        console.log('onClose doing!');\n    }\n\n    onClick() {\n        this.setState({visible: true});\n    }\n\n    render() {\n        const visibleTrigger = <Button onClick={this.onClick.bind(this)} type=\"primary\">click to pupup the card</Button>;\n        const content = (<div>content</div>);\n\n        return (\n            <div style={{marginBottom: '100px'}}>\n                <Balloon trigger={visibleTrigger}\n                    triggerType=\"click\"\n                    visible={this.state.visible}\n                    onClose={this.onClose.bind(this)} >\n                    {content}\n                </Balloon>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n<p>使用 <code>visible</code>,属性控制浮层显示, 使balloon变为受限组件。</p>\n"},{"title":"tooltip","order":"7","jsx":"import { Button, Balloon } from '@alifd/next';\n\n\n\nconst Tooltip = Balloon.Tooltip;\n\nconst top = <Button  style={{margin: '5px'}} id=\"top\" className=\"btrigger\">top</Button>;\nconst right = <Button style={{margin: '5px'}}id=\"right\" className=\"btrigger\">right</Button>;\nconst bottom = <Button style={{margin: '5px'}} id=\"bottom\" className=\"btrigger\">bottom</Button>;\nconst left = <Button style={{margin: '5px'}} id=\"left\" className=\"btrigger\">left</Button>;\nconst topLeft = <Button style={{margin: '5px'}} id=\"topLeft\" className=\"btrigger\">top left</Button>;\nconst topRight = <Button style={{margin: '5px'}} id=\"topRight\" className=\"btrigger\">top right</Button>;\nconst rightTop = <Button style={{margin: '5px'}} id=\"rightTop\" className=\"btrigger\">right top</Button>;\nconst rightBottom = <Button style={{margin: '5px'}} id=\"rightBottom\" className=\"btrigger\">right bottom</Button>;\nconst bottomLeft = <Button style={{margin: '5px'}} id=\"bottomLeft\" className=\"btrigger\">bottom left</Button>;\nconst bottomRight = <Button style={{margin: '5px'}} id=\"bottomRight\" className=\"btrigger\">bottom right</Button>;\nconst leftTop = <Button style={{margin: '5px'}} id=\"leftTop\" className=\"btrigger\">left top</Button>;\nconst leftBottom = <Button style={{margin: '5px'}} id=\"leftBottom\" className=\"btrigger\">left bottom</Button>;\n\nconst App = () => (\n    <div style={{paddingLeft: 220, paddingTop: 100}}>\n        <div style={{marginLeft: 75}}>\n            <Tooltip trigger={topLeft} align=\"tl\">text text</Tooltip>\n            <Tooltip trigger={top} align=\"t\">text text</Tooltip>\n            <Tooltip trigger={topRight} align=\"tr\">text text</Tooltip>\n        </div>\n        <div style={{width: 80, float: 'left'}}>\n            <Tooltip trigger={leftTop} align=\"lt\">text text</Tooltip>\n            <Tooltip trigger={left} align=\"l\">text text</Tooltip>\n            <Tooltip trigger={leftBottom} align=\"lb\">text text</Tooltip>\n        </div>\n        <div style={{width: 80, marginLeft: 290}}>\n            <Tooltip trigger={rightTop} align=\"rt\">text text</Tooltip>\n            <Tooltip trigger={right} align=\"r\">text text</Tooltip>\n            <Tooltip trigger={rightBottom} align=\"rb\">text text</Tooltip>\n        </div>\n        <div style={{marginLeft: 80, clear: 'both'}}>\n            <Tooltip trigger={bottomLeft} align=\"bl\">text text</Tooltip>\n            <Tooltip trigger={bottom} align=\"b\">text text</Tooltip>\n            <Tooltip trigger={bottomRight} align=\"br\">text text</Tooltip>\n        </div>\n    </div>\n\n);\n\nReactDOM.render(<App />, mountNode);\n\n","css":".code-box-demo .sui-btn {\n    margin-right: 1em;\n    margin-bottom: 1em;\n}\n","body":"\n<p>简化的Balloon, 只能设置align, trigger和children, 触发条件是hover.</p>\n"},{"title":"三种触发方式","order":"1","jsx":"import { Button, Balloon } from '@alifd/next';\n\n\nconst content = (<div><p>content</p></div>);\nconst MoveTarget = <Button style={{margin: '5px'}}>hover</Button>;\nconst ClickTarget = <Button style={{margin: '5px'}}>click</Button>;\nconst FocusTarget = <Button style={{margin: '5px'}}>focus</Button>;\n\nconst App = () => (\n    <div>\n        <Balloon trigger={MoveTarget} triggerType=\"hover\">\n            {content}\n        </Balloon>\n\n        <Balloon trigger={ClickTarget} triggerType=\"click\">\n            {content}\n        </Balloon>\n\n        <Balloon trigger={FocusTarget} triggerType=\"focus\">\n            {content}\n        </Balloon>\n    </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n<p>鼠标移入、聚集、点击。</p>\n"}]},{"name":"Breadcrumb","category":"Components","title":"面包屑","type":"导航","importStatement":"import { Breadcrumb } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n用来告知用户当前的位置，以及当前页面在整个网站中的位置，属于一种辅助的导航方式，适用于清晰且具多层次结构的网站，每一层内容为层级归属关系，方便用户返回上一级或各个层级的页面。\n\n API\n\n### Breadcrumb\n\n| 参数        | 说明                         | 类型        | 默认值                            |\n| --------- | -------------------------- | --------- | ------------------------------ |\n| children  | 面包屑子节点，需传入 Breadcrumb.Item | custom    | -                              |\n| maxNode   | 面包屑最多显示个数，超出部分会被隐藏         | Number    | 100                            |\n| separator | 分隔符，可以是文本或 Icon            | ReactNode | &lt;Icon type=\"arrow-right\" /> |\n\n### Breadcrumb.Item\n\n| 参数   | 说明                                           | 类型     | 默认值 |\n| ---- | -------------------------------------------- | ------ | --- |\n| link | 面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />` | String | -   |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本用法","order":"0","jsx":"import { Breadcrumb } from '@alifd/next';\n\nReactDOM.render(\n    <Breadcrumb>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Home</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">All Categories</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Women’s Clothing</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Blouses & Shirts</Breadcrumb.Item>\n        <Breadcrumb.Item>\n            T-shirts&nbsp; <b>78,999</b> Results\n        </Breadcrumb.Item>\n    </Breadcrumb>,\n    mountNode);\n","css":"","body":"\n<p>使用 <code>Breadcrumb.Item</code> 来设置面包屑子节点，如果设置其 <code>link</code> 属性就是 <code>&lt;a /&gt;</code> 节点，否则为 <code>&lt;span /&gt;</code> 节点。</p>\n"},{"title":"显示省略","order":"1","jsx":"import { Breadcrumb } from '@alifd/next';\n\nReactDOM.render(\n    <Breadcrumb maxNode={5}>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Home 1</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Whatever 2</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">All Categories 3</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Women’s Clothing 4</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Blouses & Shirts 5</Breadcrumb.Item>\n        <Breadcrumb.Item>T-shirts 6</Breadcrumb.Item>\n    </Breadcrumb>,\n    mountNode);\n","css":"","body":"\n<p>当超过设置的最大个数的时候，显示省略号。</p>\n"},{"title":"设置分隔符","order":"2","jsx":"import { Breadcrumb } from '@alifd/next';\n\nReactDOM.render(\n    <Breadcrumb separator=\"/\">\n        <Breadcrumb.Item link=\"javascript:void(0);\">Home</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">All Categories</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Women’s Clothing</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Blouses & Shirts</Breadcrumb.Item>\n        <Breadcrumb.Item>T-shirts</Breadcrumb.Item>\n    </Breadcrumb>,\n    mountNode);\n","css":"","body":"\n<p>也可以设置不同的分隔符。</p>\n"}]},{"name":"Button","category":"Components","title":"按钮","type":"表单","importStatement":"import { Button } from '@alifd/next';","body":"\n按钮用于开始一个即时操作。\n\n## Guide\n\n### 何时使用\n\n标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。\n\n API\n\n### Button\n\n| 参数        | 说明                                                                                                           | 类型       | 默认值      |\n| --------- | ------------------------------------------------------------------------------------------------------------ | -------- | -------- |\n| size      | 按钮的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                          | Enum     | 'medium' |\n| type      | 按钮的类型<br><br>**可选值**:<br>'primary', 'secondary', 'normal'                                                    | Enum     | 'normal' |\n| iconSize  | 按钮中 Icon 的尺寸，用于替代 Icon 的默认大小<br><br>**可选值**:<br>'xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl' | Enum     | -        |\n| htmlType  | 当 component = 'button' 时，设置 button 标签的 type 值<br><br>**可选值**:<br>'submit', 'reset', 'button'                 | Enum     | 'button' |\n| component | 设置标签类型<br><br>**可选值**:<br>'button', 'a'                                                                      | Enum     | 'button' |\n| loading   | 设置按钮的载入状态                                                                                                    | Boolean  | false    |\n| ghost     | 是否为幽灵按钮<br><br>**可选值**:<br>true, false, 'light', 'dark'                                                      | Enum     | false    |\n| text      | 是否为文本按钮                                                                                                      | Boolean  | false    |\n| warning   | 是否为警告按钮                                                                                                      | Boolean  | false    |\n| disabled  | 是否禁用                                                                                                         | Boolean  | false    |\n| onClick   | 点击按钮的回调<br><br>**签名**:<br>Function(e: Object) => void<br>**参数**:<br>_e_: {Object} Event Object               | Function | () => {} |\n\n### Button.Group\n\n| 参数   | 说明                  | 类型     | 默认值      |\n| ---- | ------------------- | ------ | -------- |\n| size | 统一设置 Button 组件的按钮大小 | String | 'medium' |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"按钮类型","order":"0","jsx":"import { Button } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Button type=\"normal\">Normal</Button> &nbsp;&nbsp;\n    <Button type=\"primary\">Prirmary</Button> &nbsp;&nbsp;\n    <Button type=\"secondary\">Secondary</Button>\n    <br /><br />\n    <Button type=\"normal\" text>Normal</Button> &nbsp;&nbsp;\n    <Button type=\"primary\" text>Primary</Button> &nbsp;&nbsp;\n    <Button type=\"secondary\" text>Secondary</Button>\n    <br /><br />\n    <Button type=\"normal\" warning>Normal</Button> &nbsp;&nbsp;\n    <Button type=\"primary\" warning>Primary</Button> &nbsp;&nbsp;\n</div>, mountNode);\n","css":"","body":"\n<p>按钮有三种视觉层次：主按钮、次按钮、普通按钮。不同的类型可以用来区别按钮的重要程度。</p>\n"},{"title":"自定义标签类型","order":"6","jsx":"import { Button } from '@alifd/next';\n\nconst props = {\n    component: 'a',\n    href: 'http://www.alibaba.com',\n    target: '_blank',\n};\n\nReactDOM.render(<div>\n    <Button {...props} type=\"primary\">alibaba.com</Button> &nbsp;&nbsp;\n    <Button {...props} type=\"secondary\">alibaba.com</Button> &nbsp;&nbsp;\n    <Button {...props} type=\"normal\">alibaba.com</Button>\n</div>, mountNode);\n","css":"","body":"\n<p>默认情况下 Button 组件使用 <code>&lt;button&gt;</code> 标签来渲染按钮，通过 <code>component</code> 属性可以自定义 Button 的标签类型。\n可选值为 <code>button</code> 和 <code>a</code>。</p>\n"},{"title":"不可用状态","order":"5","jsx":"import { Button } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Button type=\"primary\">Primary</Button>&nbsp;&nbsp;\n    <Button component=\"a\" type=\"primary\" disabled>Primary</Button>\n    <br />\n    <br />\n    <Button type=\"secondary\">Secondary</Button>&nbsp;&nbsp;\n    <Button type=\"secondary\" disabled>Secondary</Button>\n    <br />\n    <br />\n    <Button type=\"normal\">Normal</Button>&nbsp;&nbsp;\n    <Button type=\"normal\" disabled>Normal</Button>\n    <br />\n    <br />\n    <div>\n        <div className=\"ghost-light-background\">\n            <Button ghost=\"light\" disabled>Ghost Light</Button>\n        </div>\n        <div className=\"ghost-dark-background\">\n            <Button ghost=\"dark\" disabled>Ghost Dark</Button>\n        </div>\n    </div>\n</div>, mountNode);\n","css":".ghost-light-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #EBECF0;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n.ghost-dark-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #333;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n","body":"\n<p>添加 <code>disabled</code> 属性即可让按钮处于不可用状态，同时按钮样式也会改变。</p>\n"},{"title":"幽灵按钮","order":"4","jsx":"import { Button } from '@alifd/next';\n\nReactDOM.render(<div style={{ clear: 'both' }}>\n    <div className=\"ghost-light-background\">\n        <Button ghost=\"light\">Ghost light</Button>\n    </div>\n    <div className=\"ghost-dark-background\">\n        <Button ghost=\"dark\">Ghost dark</Button>\n    </div>\n</div>, mountNode);\n","css":".ghost-light-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #EBECF0;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n.ghost-dark-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #333;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n","body":"\n<p>幽灵按钮通常用在有色背景下，可以使用 <code>ghost</code> 属性开启，此时 Button 为透明背景。对于浅色背景和深色背景，通过取值 <code>light</code>, <code>dark</code> 可以配置使用幽灵按钮的场景。</p>\n"},{"title":"按钮组","order":"7","jsx":"import { Button, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Button.Group>\n        <Button type=\"primary\">OK</Button>\n        <Button type=\"secondary\">Cancel</Button>\n    </Button.Group>\n    &nbsp;&nbsp;\n    <Button.Group>\n        <Button disabled>Left</Button>\n        <Button disabled>Middle</Button>\n        <Button disabled>Right</Button>\n    </Button.Group>\n    <br />\n    <br />\n\n    <Button.Group>\n        <Button type=\"primary\"><Icon type=\"arrow-left\" /> Backward</Button>\n        <Button type=\"primary\">Forward <Icon type=\"arrow-right\" /></Button>\n    </Button.Group>\n    &nbsp;&nbsp;\n    <Button.Group>\n        <Button type=\"primary\"><Icon type=\"prompt\" /></Button>\n        <Button type=\"primary\"><Icon type=\"clock\" /></Button>\n        <Button type=\"primary\"><Icon type=\"set\" /></Button>\n    </Button.Group>\n</div>, mountNode);\n","css":"","body":"\n<p><code>Button.Group</code> 子组件用于将多个按钮组合在一个容器中。</p>\n"},{"title":"图标按钮","order":"2","jsx":"import { Button, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Button><Icon type=\"atm\" /> ATM</Button> &nbsp;&nbsp;\n    <Button text><Icon type=\"atm\" /> ATM</Button> &nbsp;&nbsp;\n    <Button warning><Icon type=\"atm\" /> ATM</Button> &nbsp;&nbsp;\n    <Button iconSize=\"xxs\"><Icon type=\"arrow-left\" /> ARROW</Button> &nbsp;&nbsp;\n</div>, mountNode);\n","css":"","body":"\n<p>Button 可以嵌入 Icon，默认情况下 Icon 尺寸自动跟随 Button 的尺寸。如果用户想要控制 Icon 的大小，可以通过 <code>iconSize</code> 属性进行设置。</p>\n"},{"title":"加载中","order":"3","jsx":"import { Button } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            loading: false,\n        };\n    }\n\n    setLoading = () => {\n        this.setState({ loading: true });\n    }\n\n    render() {\n        return (<div>\n            <Button type=\"secondary\" loading>Loading</Button>&nbsp;&nbsp;\n            <Button type=\"primary\" loading={this.state.loading} onClick={this.setLoading}>Click to loading</Button>\n        </div>);\n    }\n}\n\nReactDOM.render(<Demo/>, mountNode);\n","css":"","body":"\n<p>通过设置 <code>loading</code> 属性即可以让按钮处于加载状态。</p>\n"},{"title":"按钮尺寸","order":"1","jsx":"import { Button, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Button type=\"primary\" size=\"large\"><Icon type=\"atm\" />Large</Button>&nbsp;&nbsp;\n    <Button type=\"primary\"><Icon type=\"atm\" />Medium</Button>&nbsp;&nbsp;\n    <Button type=\"primary\" size=\"small\"><Icon type=\"atm\" />Small</Button>\n    <br />\n    <br />\n    <Button.Group size=\"large\">\n        <Button>Button</Button>\n        <Button>Button</Button>\n        <Button>Button</Button>\n    </Button.Group>\n</div>, mountNode);\n","css":"","body":"\n<p>可以通过设置 <code>size</code> 属性控制按钮的尺寸，可选值为 <code>large</code> <code>medium</code> <code>small</code>，其中默认值为 <code>medium</code>。</p>\n"}]},{"name":"Calendar","category":"Components","title":"日历","type":"展示","importStatement":"import { Calendar } from '@alifd/next';","body":"\n## Guide\n\n按照日历形式展示数据的容器。\n\n### 何时使用\n\n日历组件是一个偏向于展示与受控的基础组件，可用于日程、课表、价格日历、农历展示等。\n\n### 日期值的多语言\n\n由于 Calendar 组件内部使用 moment 对象来设置日期（请使用最新版 moment），部分 Locale 读取自 moment，因此用户需要在外部使用时[正确的设置 moment 的 locale](http://momentjs.cn/docs/#/i18n/changing-locale/) 。\n\n```js\nimport moment from 'moment';\n\nmoment.locale('zh-cn');\n```\n\n API\n\n### Calendar\n\n| 参数                   | 说明                                                                                                                                                                        | 类型       | 默认值                     |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ----------------------- |\n| defaultValue         | 默认选中的日期（moment 对象）                                                                                                                                                        | custom   | -                       |\n| shape                | 展现形态<br><br>**可选值**:<br>'card', 'fullscreen', 'panel'                                                                                                                     | Enum     | 'fullscreen'            |\n| value                | 选中的日期值 (moment 对象)                                                                                                                                                        | custom   | -                       |\n| showOtherMonth       | 是否展示非本月的日期                                                                                                                                                                | Boolean  | true                    |\n| defaultVisibleMonth  | 默认展示的月份<br><br>**签名**:<br>Function() => void                                                                                                                              | Function | -                       |\n| onSelect             | 选择日期单元格时的回调<br><br>**签名**:<br>Function(value: Object) => void<br>**参数**:<br>_value_: {Object} 对应的日期值 (moment 对象)                                                          | Function | func.noop               |\n| onVisibleMonthChange | 展现的月份变化时的回调<br><br>**签名**:<br>Function(value: Object, reason: String) => void<br>**参数**:<br>_value_: {Object} 显示的月份 (moment 对象)<br>_reason_: {String} 触发月份改变原因            | Function | func.noop               |\n| dateCellRender       | 自定义日期渲染函数<br><br>**签名**:<br>Function(value: Object) => ReactNode<br>**参数**:<br>_value_: {Object} 日期值（moment对象）<br>**返回值**:<br>{ReactNode} null<br>                        | Function | (value) => value.date() |\n| monthCellRender      | 自定义月份渲染函数<br><br>**签名**:<br>Function(calendarDate: Object) => ReactNode<br>**参数**:<br>_calendarDate_: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{ReactNode} null<br> | Function | -                       |\n| disabledDate         | 不可选择的日期<br><br>**签名**:<br>Function(calendarDate: Object) => Boolean<br>**参数**:<br>_calendarDate_: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Boolean} null<br>       | Function | -                       |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"全屏日历","order":"0","jsx":"import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\nfunction onDateChange(value) {\n    console.log(value.format('L'));\n}\n\nReactDOM.render(<div>\n    <Calendar onSelect={onDateChange} defaultValue={moment().add(1, 'days')} /></div>, mountNode);\n","css":"","body":"\n<p>最简单的日历用法，用户可以切换年/月。</p>\n"},{"title":"日历卡片","order":"1","jsx":"import { Calendar } from '@alifd/next';\n\nfunction onDateChange(value) {\n    console.log(value);\n}\n\nReactDOM.render(<div className=\"wrapped-calendar\">\n    <Calendar onSelect={onDateChange} shape=\"card\" />\n</div>, mountNode);\n","css":".wrapped-calendar {\n    width: 300px;\n    border: 1px solid #C4C6CF;\n    border-radius: 3px;\n    padding: 8px;\n}\n","body":"\n<p>可以将 <code>card</code> 形态的日历组件嵌套在宽高受限的容器中。</p>\n"},{"title":"定制日历内容","order":"3","jsx":"import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\nconst currentDate = moment();\nconst localeData = currentDate.clone().localeData();\nconst monthLocale = localeData.monthsShort();\n\n\nfunction dateCellRender(date) {\n    const dateNum = date.date();\n    if (currentDate.month() !== date.month()) {\n        return dateNum;\n    }\n\n    let eventList;\n    switch (dateNum) {\n        case 1:\n            eventList = [\n                { type: 'primary', content: 'Event 1' },\n                { type: 'normal', content: 'Event 2' },\n            ];\n            break;\n        case 10:\n            eventList = [\n                { type: 'normal', content: 'Event 3' },\n                { type: 'normal', content: 'Event 4' },\n            ];\n            break;\n        case 11:\n            eventList = [\n                { type: 'primary', content: 'Event 5' },\n                { type: 'primary', content: 'Event 6' },\n            ];\n            break;\n        default:\n            eventList = [];\n    }\n\n    return (<div className=\"custom-calendar-cell\">\n        <div className=\"custom-calendar-cell-value\">{dateNum}</div>\n        <div className=\"custom-calendar-cell-content\">\n            <ul className=\"event-list\">\n                {eventList.map((item, key) => <li className={`${item.type}-event`} key={key}>{item.content}</li>)}\n            </ul>\n        </div>\n    </div>);\n}\n\nfunction monthCellRender(date) {\n    if (currentDate.month() === date.month()) {\n        return (<div>\n            <div>{monthLocale[date.month()]}</div>\n            <div>Events</div>\n        </div>);\n    }\n    return monthLocale[date.month()];\n}\n\nReactDOM.render(<Calendar dateCellRender={dateCellRender} monthCellRender={monthCellRender} />, mountNode);\n","css":".custom-calendar-guide {\n    width: 270px;\n    border: 1px solid #C4C6CF;\n    border-radius: 3px;\n    overflow: hidden;\n    margin-top: 20px;\n}\n\n.custom-calendar-cell-content {\n    height: 50px;\n    text-align: left;\n}\n\n.event-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.primary-event {\n    color: white;\n    background: red;\n    border-radius: 3px;\n    padding-left: 10px;\n    margin-bottom: 3px;\n}\n\n.normal-event {\n    color: white;\n    background: blue;\n    border-radius: 3px;\n    padding-left: 10px;\n    margin-bottom: 3px;\n}\n","body":"\n<p>通过 <code>dateCellRender</code> 和  <code>monthCellRender</code> 用户可以在日历中添加自定义内容。</p>\n"},{"title":"日历默认展示月份","order":"4","jsx":"import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\nfunction onSelect(value) {\n    console.log(value.format('L'));\n}\n\nfunction onVisibleMonthChange(value, reason) {\n    console.log('Visible month changed to %s from <%s>', value.format('YYYY-MM'), reason);\n}\n\nReactDOM.render(<Calendar onSelect={onSelect} defaultVisibleMonth={() => moment('2018-01', 'YYYY-MM', true)} onVisibleMonthChange={onVisibleMonthChange} />, mountNode);\n","css":"","body":"\n<p>日历组件默认使用当前月作为展示的月份，用户可以可以通过 <code>defaultVisibleMonth</code> 属性进行定制。并可以通过 <code>onVisibleMonthChange</code> 属性监听面板可视月份的变化。</p>\n"},{"title":"禁用日期","order":"2","jsx":"import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\nconst currentDate = moment();\nconst disabledDate = function (date) {\n    return date.valueOf() > currentDate.valueOf();\n};\n\nReactDOM.render(<div className=\"wrapped-calendar\">\n    <Calendar disabledDate={disabledDate} shape=\"card\" />\n</div>, mountNode);\n","css":".wrapped-calendar {\n    width: 300px;\n    border: 1px solid #C4C6CF;\n    border-radius: 3px;\n    padding: 8px;\n}\n","body":"\n<p>可以通过 <code>disabledDate</code> 属性禁止用户选择某些日期。</p>\n"},{"title":"多语言","order":"6","jsx":"import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\n// Setting moment locale to Chinese\nmoment.locale('zh-cn');\n\nReactDOM.render(<Calendar />, mountNode);\n","css":"","body":"\n<p>日期时间的多语言来源于 moment ，可以通过 <code>moment.locale(&#39;zh-cn&#39;)</code> 来设置显示中文。</p>\n"},{"title":"日历面板","order":"5","jsx":"import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\nReactDOM.render(<div>\n    <Calendar shape=\"panel\" value={moment().add(1, 'days')} />\n</div>, mountNode);\n","css":"","body":"\n<p>日历面板通用用于嵌套在弹层容器中。</p>\n"}]},{"name":"Card","category":"Components","title":"卡片","type":"基本","importStatement":"import { Card } from '@alifd/next';","body":"\n## Guide\n\n一个通用的卡片组件。\n\n### 何时使用\n\n当一个模块的同类信息不能自然形成区块感，可借助 Card 组件将信息整合，帮助界面信息模块感更强。\n\n API\n\n### Card\n\n| 参数              | 说明           | 类型            | 默认值  |\n| --------------- | ------------ | ------------- | ---- |\n| title           | 卡片的标题        | ReactNode     | -    |\n| subTitle        | 卡片的副标题       | ReactNode     | -    |\n| showTitleBullet | 是否显示标题的项目符号  | Boolean       | true |\n| showHeadDivider | 是否展示头部的分隔线   | Boolean       | true |\n| contentHeight   | 内容区域的固定高度    | String/Number | 120  |\n| extra           | 标题区域的用户自定义内容 | ReactNode     | -    |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Card } from '@alifd/next';\n\nconst commonProps = {\n    style: { width: 300 },\n    subTitle: 'SubTitle',\n    extra: 'Link',\n};\n\nReactDOM.render(<div>\n    <Card {...commonProps} title=\"Simple Card\">\n        <div className=\"card-placeholder\"></div>\n    </Card>\n</div>, mountNode);\n","css":".card-placeholder {\n    height: 500px;\n    text-align: center;\n    background: #F7F8FA;\n}\n","body":"\n<p>最简单的用法。</p>\n"},{"title":"自定义卡片样式","order":"2","jsx":"import { Card } from '@alifd/next';\n\nReactDOM.render(<Card className=\"image-card\" contentHeight=\"auto\">\n    <img src=\"https://img.alicdn.com/tfs/TB1FNIOSFXXXXaWXXXXXXXXXXXX-260-188.png\" alt=\"father day\" />\n    <div className=\"custom-card\">\n        <h3>Father's Day</h3>\n        <p>Thank you, papa</p>\n    </div>\n</Card>, mountNode);\n","css":".image-card {\n    display: inline-block;\n    text-align: center;\n}\n\n.custom-card p {\n    color: #999;\n}\n","body":"\n<p>如果默认的卡片样式不能满足您的需求，除了通过 Fusion 配置平台修改，还可以通过传入自定义样式修改。\n如果 <code>title</code> 属性不传入任何值，则默认会去除整个头部区域。</p>\n"},{"title":"自定义内容高度","order":"1","jsx":"import { Card } from '@alifd/next';\n\nconst commonProps = {\n    style: { width: 300 },\n    title: 'Title',\n    subTitle: 'Sub-title',\n};\n\nReactDOM.render(<div>\n    <Card {...commonProps} contentHeight=\"auto\">\n        <div className=\"custom-content\">\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n        </div>\n    </Card>\n    &nbsp;&nbsp;\n    <Card {...commonProps} contentHeight={200}>\n        <div className=\"custom-content\">\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n        </div>\n    </Card>\n</div>, mountNode);\n","css":".custom-content p {\n    margin: 0;\n}\n","body":"\n<p>可以通过 <code>contentHeight</code> 属性自定义内容区的高度。例如取值为 <code>auto</code> 的时候会默认关闭卡片的收缩效果。</p>\n"},{"title":"标题无项目符号","order":"3","jsx":"import { Card, Button } from '@alifd/next';\n\nconst commonProps = {\n    style: { width: 300 },\n    title: 'Title',\n    extra: <Button text>More</Button>\n};\n\nReactDOM.render(<div>\n    <Card {...commonProps} showTitleBullet={false}>\n        Card Content\n    </Card>\n</div>, mountNode);\n","css":"","body":"\n<p>可以通过配置 <code>hasTitleBullet</code> 属性配置卡片标题是否显示项目符号。此外，<code>extra</code> 允许用户传入自定义的 React 组件。</p>\n"},{"title":"隐藏头部下划线","order":"4","jsx":"import { Card } from '@alifd/next';\n\nconst commonProps = {\n    title: 'Title',\n    style: { width: 300 },\n    subTitle: 'Sub-title',\n    extra: 'Link',\n};\n\nReactDOM.render(<div>\n    <Card {...commonProps} showHeadDivider={false}>\n        <div className=\"card-placeholder\"></div>\n    </Card>\n</div>, mountNode);\n","css":".card-placeholder {\n    height: 500px;\n    text-align: center;\n    background: #F7F8FA;\n}\n","body":"\n<p>可以通过设置 <code>showHeadDivider={false}</code> 隐藏头部下划线。</p>\n"}]},{"name":"CascaderSelect","category":"Components","title":"级联选择","type":"基本","importStatement":"import { CascaderSelect } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n级联选择由选择器和级联组成。把级联组件以弹层的方式隐藏，多用于表单场景。\n\n API\n\n### CascaderSelect\n\n| 参数                   | 说明| 类型                      | 默认值                                                                                     |\n| -------------------- || ----------------------- | --------------------------------------------------------------------------------------- |\n| size                 | 选择框大小<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | Enum                    | 'medium'                                                                                |\n| placeholder          | 选择框占位符| String                  | -                                                                                       |\n| disabled             | 是否禁用| Boolean                 | false                                                                                   |\n| hasArrow             | 是否有下拉箭头| Boolean                 | true                                                                                    |\n| hasBorder            | 是否有边框| Boolean                 | true                                                                                    |\n| hasClear             | 是否有清除按钮| Boolean                 | false                                                                                   |\n| label                | 自定义内联 label                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | ReactNode               | -                                                                                       |\n| readOnly             | 是否只读，只读模式下可以展开弹层但不能选                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean                 | -                                                                                       |\n| dataSource           | 数据源，结构可参考下方说明                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Array&lt;Object>        | \\[]                                                                                     |\n| defaultValue         | （非受控）默认值                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | String/Array&lt;String> | null                                                                                    |\n| value                | （受控）当前值| String/Array&lt;String> | -                                                                                       |\n| onChange             | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array, extra: Object) => void<br>**参数**:<br>_value_: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>_data_: {Object/Array} 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点<br>_extra_: {Object} 额外参数<br>_extra.selectedPath_: {Array} 单选时选中的数据的路径<br>_extra.checked_: {Boolean} 多选时当前的操作是选中还是取消选中<br>_extra.currentData_: {Object} 多选时当前操作的数据<br>_extra.checkedData_: {Array} 多选时所有被选中的数据<br>_extra.indeterminateData_: {Array} 多选时半选的数据 | Function                | -                                                                                       |\n| defaultExpandedValue | 默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Array&lt;String>        | -                                                                                       |\n| expandTriggerType    | 展开触发的方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | Enum                    | 'click'                                                                                 |\n| useVirtual           | 是否开启虚拟滚动                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Boolean                 | false                                                                                   |\n| multiple             | 是否多选| Boolean                 | false                                                                                   |\n| changeOnSelect       | 是否选中即发生改变, 该属性仅在单选模式下有效                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | Boolean                 | false                                                                                   |\n| canOnlyCheckLeaf     | 是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Boolean                 | false                                                                                   |\n| checkStrictly        | 父子节点是否选中不关联                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | Boolean                 | false                                                                                   |\n| listStyle            | 每列列表样式对象                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Object                  | -                                                                                       |\n| listClassName        | 每列列表类名| String                  | -                                                                                       |\n| displayRender        | 选择框单选时展示结果的自定义渲染函数<br><br>**签名**:<br>Function(label: Array) => ReactNode<br>**参数**:<br>_label_: {Array} 选中路径的文本数组<br>**返回值**:<br>{ReactNode} 渲染在选择框中的内容<br>                                                                                                                                                                                                                                                                                                                                                                | Function                | 单选时：labelPath => labelPath.join(' / ')；多选时：labelPath => labelPath[labelPath.length - 1] |\n| showSearch           | 是否显示搜索框| Boolean                 | false                                                                                   |\n| filter               | 自定义搜索函数<br><br>**签名**:<br>Function(searchValue: String, path: Array) => Boolean<br>**参数**:<br>_searchValue_: {String} 搜索的关键字<br>_path_: {Array} 节点路径<br>**返回值**:<br>{Boolean} 是否匹配<br>                                                                                                                                                                                                                                                                                                                                     | Function                | 根据路径所有节点的文本值模糊匹配                                                                        |\n| resultRender         | 搜索结果自定义渲染函数<br><br>**签名**:<br>Function(searchValue: String, path: Array) => ReactNode<br>**参数**:<br>_searchValue_: {String} 搜索的关键字<br>_path_: {Array} 匹配到的节点路径<br>**返回值**:<br>{ReactNode} 渲染的内容<br>                                                                                                                                                                                                                                                                                                                        | Function                | 按照节点文本 a / b / c 的模式渲染                                                                  |\n| resultAutoWidth      | 搜索结果列表是否和选择框等宽                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             | Boolean                 | true                                                                                    |\n| notFoundContent      | 无数据时显示内容                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | ReactNode               | 'Not Found'                                                                             |\n| loadData             | 异步加载数据函数<br><br>**签名**:<br>Function(data: Object) => void<br>**参数**:<br>_data_: {Object} 当前点击异步加载的数据                                                                                                                                                                                                                                                                                                                                                                                                                       | Function                | -                                                                                       |\n| header               | 自定义下拉框头部                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | ReactNode               | -                                                                                       |\n| footer               | 自定义下拉框底部                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | ReactNode               | -                                                                                       |\n| defaultVisible       | 初始下拉框是否显示                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Boolean                 | false                                                                                   |\n| visible              | 当前下拉框是否显示                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Boolean                 | -                                                                                       |\n| onVisibleChange      | 下拉框显示或关闭时触发事件的回调函数<br><br>**签名**:<br>Function(visible: Boolean, type: String) => void<br>**参数**:<br>_visible_: {Boolean} 是否显示<br>_type_: {String} 触发显示关闭的操作类型                                                                                                                                                                                                                                                                                                                                                              | Function                | () => {}                                                                                |\n| popupStyle           | 下拉框自定义样式对象                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | Object                  | -                                                                                       |\n| popupClassName       | 下拉框样式自定义类名                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | String                  | -                                                                                       |\n| popupContainer       | 下拉框挂载的容器节点                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | String/Function         | -                                                                                       |\n| popupProps           | 透传到 Popup 的属性对象                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Object                  | {}                                                                                      |\n\n<!-- api-extra-start -->\n\n### dataSource数据结构\n\n```js\nconst dataSource = [{\n    value: '2974',\n    label: '西安',\n    children: [\n        { value: '2975', label: '西安市', disabled: true },\n        { value: '2976', label: '高陵县', checkboxDisabled: true },\n        { value: '2977', label: '蓝田县' },\n        { value: '2978', label: '户县' },\n        { value: '2979', label: '周至县' },\n        { value: '4208', label: '灞桥区' },\n        { value: '4209', label: '长安区' },\n        { value: '4210', label: '莲湖区' },\n        { value: '4211', label: '临潼区' },\n        { value: '4212', label: '未央区' },\n        { value: '4213', label: '新城区' },\n        { value: '4214', label: '阎良区' },\n        { value: '4215', label: '雁塔区' },\n        { value: '4388', label: '碑林区' },\n        { value: '610127', label: '其它区' }\n    ]\n}];\n```\n\n数组中 Item 的自定义属性也会被透传到 onChange 函数的 data 参数中。\n\n<!-- api-extra-end -->\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本使用","order":"0","jsx":"import { CascaderSelect } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => {\n                data[1].disabled = true;\n                this.setState({ data });\n            })\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return <CascaderSelect style={{ width: '302px' }} dataSource={this.state.data} onChange={this.handleChange} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>展示基本的单选用法。</p>\n"},{"title":"自定义样式","order":"6","jsx":"import { CascaderSelect } from '@alifd/next';\n\nconst dataSource = [{\n    value: '2973',\n    label: '陕西',\n    children: [{\n        value: '2974',\n        label: '西安',\n        children: [\n            { value: '2975', label: '西安市' },\n            { value: '2976', label: '高陵县' }\n        ]\n    }, {\n        value: '2980',\n        label: '铜川',\n        children: [\n            { value: '2981', label: '铜川市' },\n            { value: '2982', label: '宜君县' }\n        ]\n    }]\n}, {\n    value: '3371',\n    label: '新疆',\n    children: [{\n        value: '3430',\n        label: '巴音郭楞蒙古自治州',\n        children: [\n            { value: '3431', label: '库尔勒市' },\n            { value: '3432', label: '和静县' }\n        ]\n    }]\n}];\n\nReactDOM.render(<CascaderSelect style={{ width: '452px'}} listStyle={{ width: '150px', height: '160px' }} displayRender={labels => labels[labels.length - 1]} defaultValue=\"3431\" dataSource={dataSource} />, mountNode);\n","css":"","body":"\n<p>可以通过 displayRender 来定制单选时展示的结果，可以通过 listStyle，listClassName 来定制组件宽高。</p>\n"},{"title":"异步加载数据","order":"7","jsx":"import { CascaderSelect } from '@alifd/next';\n\nconst dataSource = [{\n    value: '2973',\n    label: '陕西'\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataSource\n        };\n\n        this.onLoadData = this.onLoadData.bind(this);\n    }\n\n    onLoadData(data) {\n        console.log(data);\n\n        return new Promise(resolve => {\n            setTimeout(() => {\n                this.setState({\n                    dataSource: [{\n                        value: '2973',\n                        label: '陕西',\n                        children: [{\n                            value: '2974',\n                            label: '西安',\n                            children: [\n                                { value: '2975', label: '西安市', isLeaf: true },\n                                { value: '2976', label: '高陵县', isLeaf: true }\n                            ]\n                        }, {\n                            value: '2980',\n                            label: '铜川',\n                            children: [\n                                { value: '2981', label: '铜川市', isLeaf: true },\n                                { value: '2982', label: '宜君县', isLeaf: true }\n                            ]\n                        }]\n                    }]\n                }, resolve);\n            }, 500);\n        });\n    }\n\n    render() {\n        return <CascaderSelect style={{ width: '302px' }} dataSource={this.state.dataSource} loadData={this.onLoadData} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>展示动态获取数据的用法。</p>\n"},{"title":"展开触发行为","order":"1","jsx":"import { Radio, CascaderSelect } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            triggerType: 'click',\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleTriggerTypeChange = this.handleTriggerTypeChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data }))\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    handleTriggerTypeChange(triggerType) {\n        this.setState({\n            triggerType\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"trigger-check\">\n                    Expand trigger type:\n                    <RadioGroup dataSource={['click', 'hover']} value={this.state.triggerType} onChange={this.handleTriggerTypeChange} />\n                </div>\n\n                <CascaderSelect style={{ width: '302px' }} expandTriggerType={this.state.triggerType} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".trigger-check {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n\n.trigger-check .next-radio-group {\n    margin-left: 10px;\n}\n","body":"\n<p>展示可通过 expandTriggerType 来设置不同的展开触发行为，支持 click 和 hover，默认值为 click。</p>\n"},{"title":"设置父子节点选中是否关联","order":"4","jsx":"import { Checkbox, CascaderSelect } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: [],\n            data: [],\n            checkStrictly: false\n        };\n\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data, value: ['2975'] }))\n            .catch(e => console.log(e));\n    }\n\n    handleCheck() {\n        this.setState({\n            checkStrictly: !this.state.checkStrictly,\n            value: []\n        });\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"control-multiple-demo\">\n                <label className=\"strictly-check\">\n                    <Checkbox value={this.state.checkStrictly} onChange={this.handleCheck} />\n                    <span className=\"strictly-text\">Enable checkStrictly</span>\n                </label>\n                <CascaderSelect style={{ width: '302px' }} multiple checkStrictly={this.state.checkStrictly} value={this.state.value} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".control-multiple-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-multiple-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n<p>展示受控多选以及是否开启严格受控父子节点选中不再关联的用法。</p>\n"},{"title":"多选","order":"2","jsx":"import { CascaderSelect } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => {\n                data[1].disabled = true;\n                data[2].checkboxDisabled = true;\n                this.setState({ data });\n            })\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return <CascaderSelect style={{ width: '302px' }} multiple dataSource={this.state.data} onChange={this.handleChange} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".cascader-value {\n    width: 500px;\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n<p>展示基本的多选用法。</p>\n"},{"title":"搜索","order":"5","jsx":"import { Checkbox, CascaderSelect } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: [],\n            data: [],\n            multiple: false\n        };\n\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data, value: ['2975'] }))\n            .catch(e => console.log(e));\n    }\n\n    handleCheck() {\n        this.setState({\n            multiple: !this.state.multiple,\n            value: []\n        });\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"search-demo\">\n                <label className=\"multiple-check\">\n                    <Checkbox value={this.state.multiple} onChange={this.handleCheck} />\n                    <span className=\"multiple-text\">Multiple select</span>\n                </label>\n                <CascaderSelect style={{ width: '302px' }} showSearch multiple={this.state.multiple} value={this.state.value} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".search-demo .multiple-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.search-demo .multiple-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n<p>通过设置 showSearch 为 true，可以开启组件的搜索功能。</p>\n"},{"title":"设置是否只能选择叶子项","order":"3","jsx":"import { Checkbox, CascaderSelect } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null,\n            changeOnSelect: false,\n            data: []\n        };\n\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data, value: '2975' }))\n            .catch(e => console.log(e));\n    }\n\n    handleCheck() {\n        this.setState({\n            changeOnSelect: !this.state.changeOnSelect,\n            value: null\n        });\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"control-single-demo\">\n                <label className=\"change-check\">\n                    <Checkbox value={!this.state.changeOnSelect} onChange={this.handleCheck} />\n                    <span className=\"change-text\">Enable changeOnSelect</span>\n                </label>\n                <CascaderSelect style={{ width: '302px' }} changeOnSelect={this.state.changeOnSelect} value={this.state.value} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".control-single-demo .change-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-single-demo .change-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n<p>展示受控单选以及是否选择即改变。</p>\n"}]},{"name":"Cascader","category":"Components","title":"级联","type":"基本","importStatement":"import { Cascader } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n-   适用于从一组具有关联性的数据集合中进行选择的交互方式。\n-   由于子集目录隐藏，级联是一种节约屏幕空间的有效方法。\n-   级别数因业务需求而定，建议不超过5级。\n-   级联多用于表单场景，可以独立在页面中使用，也可以与其他元素组合使用，如级联选择。\n\n API\n\n### Cascader\n\n| 参数                   | 说明| 类型                      | 默认值                |\n| -------------------- || ----------------------- | ------------------ |\n| dataSource           | 数据源，结构可参考下方说明                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Array&lt;Object>        | \\[]                |\n| defaultValue         | （非受控）默认值                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | String/Array&lt;String> | null               |\n| value                | （受控）当前值| String/Array&lt;String> | -                  |\n| onChange             | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array, extra: Object) => void<br>**参数**:<br>_value_: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>_data_: {Object/Array} 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点<br>_extra_: {Object} 额外参数<br>_extra.selectedPath_: {Array} 单选时选中的数据的路径<br>_extra.checked_: {Boolean} 多选时当前的操作是选中还是取消选中<br>_extra.currentData_: {Object} 多选时当前操作的数据<br>_extra.checkedData_: {Array} 多选时所有被选中的数据<br>_extra.indeterminateData_: {Array} 多选时半选的数据 | Function                | -                  |\n| defaultExpandedValue | （非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Array&lt;String>        | -                  |\n| expandedValue        | （受控）当前展开值                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Array&lt;String>        | -                  |\n| expandTriggerType    | 展开触发的方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | Enum                    | 'click'            |\n| onExpand             | 展开时触发的回调函数<br><br>**签名**:<br>Function(expandedValue: Array) => void<br>**参数**:<br>_expandedValue_: {Array} 各列展开值的数组                                                                                                                                                                                                                                                                                                                                                                                                        | Function                | -                  |\n| useVirtual           | 是否开启虚拟滚动                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Boolean                 | false              |\n| multiple             | 是否多选| Boolean                 | false              |\n| canOnlySelectLeaf    | 单选时是否只能选中叶子节点                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Boolean                 | false              |\n| canOnlyCheckLeaf     | 多选时是否只能选中叶子节点                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Boolean                 | false              |\n| checkStrictly        | 父子节点是否选中不关联                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | Boolean                 | false              |\n| listStyle            | 每列列表样式对象                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Object                  | -                  |\n| listClassName        | 每列列表类名                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | String                  | -                  |\n| itemRender           | 每列列表项渲染函数<br><br>**签名**:<br>Function(data: Object) => ReactNode<br>**参数**:<br>_data_: {Object} 数据<br>**返回值**:<br>{ReactNode} 列表项内容<br>                                                                                                                                                                                                                                                                                                                                                                                     | Function                | item => item.label |\n| loadData             | 异步加载数据函数<br><br>**签名**:<br>Function(data: Object, source: Object) => void<br>**参数**:<br>_data_: {Object} 当前点击异步加载的数据<br>_source_: {Object} 当前点击数据                                                                                                                                                                                                                                                                                                                                                                          | Function                | -                  |\n\n<!-- api-extra-start -->\n\n### dataSource数据结构\n\n```js\nconst dataSource = [{\n    value: '2974',\n    label: '西安',\n    children: [\n        { value: '2975', label: '西安市', disabled: true },\n        { value: '2976', label: '高陵县', checkboxDisabled: true },\n        { value: '2977', label: '蓝田县' },\n        { value: '2978', label: '户县' },\n        { value: '2979', label: '周至县' },\n        { value: '4208', label: '灞桥区' },\n        { value: '4209', label: '长安区' },\n        { value: '4210', label: '莲湖区' },\n        { value: '4211', label: '临潼区' },\n        { value: '4212', label: '未央区' },\n        { value: '4213', label: '新城区' },\n        { value: '4214', label: '阎良区' },\n        { value: '4215', label: '雁塔区' },\n        { value: '4388', label: '碑林区' },\n        { value: '610127', label: '其它区' }\n    ]\n}];\n```\n\n数组中 Item 的自定义属性也会被透传到 onChange 函数的 data 参数中。\n\n<!-- api-extra-end -->\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本使用","order":"0","jsx":"import { Cascader } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            label: '',\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => {\n                data[1].disabled = true;\n                this.setState({ data });\n            })\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            label: extra.selectedPath.map(d => d.label).join(' / ')\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"cascader-value\">Select: {this.state.label}</div>\n                <Cascader dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".cascader-value {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n<p>展示基本的单选用法。</p>\n"},{"title":"自定义样式","order":"5","jsx":"import { Cascader } from '@alifd/next';\n\nconst dataSource = [{\n    value: '2973',\n    label: '陕西',\n    children: [{\n        value: '2974',\n        label: '西安',\n        children: [\n            { value: '2975', label: '西安市' },\n            { value: '2976', label: '高陵县' }\n        ]\n    }, {\n        value: '2980',\n        label: '铜川',\n        children: [\n            { value: '2981', label: '铜川市' },\n            { value: '2982', label: '宜君县' }\n        ]\n    }]\n}, {\n    value: '3371',\n    label: '新疆',\n    children: [{\n        value: '3430',\n        label: '巴音郭楞蒙古自治州',\n        children: [\n            { value: '3431', label: '库尔勒市' },\n            { value: '3432', label: '和静县' }\n        ]\n    }]\n}];\n\nReactDOM.render(<Cascader defaultValue=\"3439\" defaultExpandedValue={['3371', '3430']} listStyle={{ width: '200px', height: '256px' }} dataSource={dataSource} />, mountNode);\n","css":"","body":"\n<p>可以通过<code>listStyle</code>，<code>listClassName</code>来定制组件宽高。</p>\n"},{"title":"异步加载数据","order":"6","jsx":"import { Cascader } from '@alifd/next';\n\nconst dataSource = [{\n    value: '2973',\n    label: '陕西'\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataSource\n        };\n\n        this.onLoadData = this.onLoadData.bind(this);\n    }\n\n    onLoadData(data) {\n        console.log(data);\n\n        return new Promise(resolve => {\n            setTimeout(() => {\n                this.setState({\n                    dataSource: [{\n                        value: '2973',\n                        label: '陕西',\n                        children: [{\n                            value: '2974',\n                            label: '西安',\n                            children: [\n                                { value: '2975', label: '西安市', isLeaf: true },\n                                { value: '2976', label: '高陵县', isLeaf: true }\n                            ]\n                        }, {\n                            value: '2980',\n                            label: '铜川',\n                            children: [\n                                { value: '2981', label: '铜川市', isLeaf: true },\n                                { value: '2982', label: '宜君县', isLeaf: true }\n                            ]\n                        }]\n                    }]\n                }, resolve);\n            }, 500);\n        });\n    }\n\n    render() {\n        return <Cascader canOnlySelectLeaf dataSource={this.state.dataSource} loadData={this.onLoadData} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".cascader-value {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n<p>展示动态获取数据的用法。</p>\n"},{"title":"展开触发行为","order":"1","jsx":"import { Radio, Cascader } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            triggerType: 'click',\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleTriggerTypeChange = this.handleTriggerTypeChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data }))\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    handleTriggerTypeChange(triggerType) {\n        this.setState({\n            triggerType\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"trigger-check\">\n                    Expand trigger type:\n                    <RadioGroup dataSource={['click', 'hover']} value={this.state.triggerType} onChange={this.handleTriggerTypeChange} />\n                </div>\n\n                <Cascader expandTriggerType={this.state.triggerType} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".trigger-check {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n\n.trigger-check .next-radio-group {\n    margin-left: 10px;\n}\n","body":"\n<p>展示可通过<code>expandTriggerType</code>来设置不同的展开触发行为，支持<code>click</code>和<code>hover</code>，默认值为<code>click</code>。</p>\n"},{"title":"设置父子节点选中是否关联","order":"4","jsx":"import { Checkbox, Cascader } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: [],\n            data: [],\n            checkStrictly: false\n        };\n\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data, value: ['2975'] }))\n            .catch(e => console.log(e));\n    }\n\n    handleCheck() {\n        this.setState({\n            checkStrictly: !this.state.checkStrictly,\n            value: []\n        });\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"control-multiple-demo\">\n                <label className=\"strictly-check\">\n                    <Checkbox value={this.state.checkStrictly} onChange={this.handleCheck} />\n                    <span className=\"strictly-text\">Enable checkStrictly</span>\n                </label>\n                <Cascader multiple checkStrictly={this.state.checkStrictly} value={this.state.value} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".control-multiple-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-multiple-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n<p>展示受控多选以及是否开启严格受控父子节点选中不再关联的用法。</p>\n"},{"title":"多选","order":"2","jsx":"import { Cascader } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            label: '',\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => {\n                data[1].disabled = true;\n                data[2].checkboxDisabled = true;\n                this.setState({ data });\n            })\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            label: data.map(d => d.label).join(', ')\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"cascader-value\">Select: {this.state.label}</div>\n                <Cascader multiple dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".cascader-value {\n    width: 500px;\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n<p>展示基本的多选用法。</p>\n"},{"title":"设置是否只能选择叶子项","order":"3","jsx":"import { Checkbox, Cascader } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null,\n            canOnlySelectLeaf: false,\n            data: []\n        };\n\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data, value: '2975' }))\n            .catch(e => console.log(e));\n    }\n\n    handleCheck() {\n        this.setState({\n            canOnlySelectLeaf: !this.state.canOnlySelectLeaf,\n            value: null\n        });\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"control-single-demo\">\n                <label className=\"leaf-check\">\n                    <Checkbox value={this.state.canOnlySelectLeaf} onChange={this.handleCheck} />\n                    <span className=\"leaf-text\">Enable canOnlySelectLeaf</span>\n                </label>\n                <Cascader canOnlySelectLeaf={this.state.canOnlySelectLeaf} value={this.state.value} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".control-single-demo .leaf-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-single-demo .leaf-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n<p>展示受控单选以及是否只能选择叶子项的用法。</p>\n"},{"title":"异步加载数据","order":"7","jsx":"import { Cascader } from '@alifd/next';\n\nconst dataSource = [{\n    value: '2974',\n    label: '西安'\n}, {\n    value: '2980',\n    label: '铜川'\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataSource\n        };\n\n        this.onLoadData = this.onLoadData.bind(this);\n    }\n\n    onLoadData(data, source) {\n        console.log(data, source);\n\n        return new Promise(resolve => {\n            source.children = source.value === '2974' ? [\n                { value: '2975', label: '西安市', isLeaf: true },\n                { value: '2976', label: '高陵县', isLeaf: true }\n            ] : [\n                { value: '2981', label: '铜川市', isLeaf: true },\n                { value: '2982', label: '宜君县', isLeaf: true }\n            ];\n            setTimeout(() => {\n                this.setState({\n                    dataSource: this.state.dataSource\n                }, resolve);\n            }, 500);\n        });\n    }\n\n    render() {\n        return <Cascader canOnlySelectLeaf dataSource={this.state.dataSource} loadData={this.onLoadData} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".cascader-value {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n","body":"\n<p>展示动态获取数据的用法。</p>\n"}]},{"name":"Checkbox","category":"Components","title":"复选按钮","type":"表单","importStatement":"import { Checkbox } from '@alifd/next';","body":"\n## 开发指南\n\n多选框\n\n### 何时使用\n\n复选框允许用户从一个数据集中选择多个选项。如果在一个列表中有多个选项，你可以通过使用复选框而不是开/关切换来节省空间。如果你有一个单选项，不要用复选框，使用开/关切换。\n\n API\n\n### Checkbox\n\n| 参数                   | 说明                                                                                                                                         | 类型        | 默认值       |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ | --------- | --------- |\n| id                   | checkbox id, 挂载在input上                                                                                                                     | String    | -         |\n| checked              | 选中状态                                                                                                                                       | Boolean   | -         |\n| defaultChecked       | 默认选中状态                                                                                                                                     | Boolean   | false     |\n| disabled             | 禁用                                                                                                                                         | Boolean   | -         |\n| label                | 通过属性配置label，                                                                                                                               | ReactNode | -         |\n| indeterminate        | Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性                                                                                         | Boolean   | -         |\n| defaultIndeterminate | Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性                                                                                        | Boolean   | false     |\n| onChange             | 状态变化时触发的事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>_checked_: {Boolean} 是否选中<br>_e_: {Event} Dom 事件对象 | Function  | func.noop |\n| onMouseEnter         | 鼠标进入enter事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} Dom 事件对象                                               | Function  | func.noop |\n| onMouseLeave         | 鼠标离开Leave事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} Dom 事件对象                                               | Function  | func.noop |\n\n### Checkbox.Group\n\n| 参数            | 说明                                                                                                                                                                | 类型                     | 默认值       |\n| ------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------- | --------- |\n| disabled      | 整体禁用                                                                                                                                                              | Boolean                | -         |\n| dataSource    | 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]` | Array&lt;any>          | \\[]       |\n| value         | 被选中的值列表                                                                                                                                                           | Array/String/Number    | -         |\n| defaultValue  | 默认被选中的值列表                                                                                                                                                         | Array/String/Number    | -         |\n| children      | 通过子元素方式设置内部 checkbox                                                                                                                                              | Array&lt;ReactElement> | -         |\n| onChange      | 选中值改变时的事件<br><br>**签名**:<br>Function(value: Array, e: Event) => void<br>**参数**:<br>_value_: {Array} 选中项列表<br>_e_: {Event} Dom 事件对象                                | Function               | () => { } |\n| itemDirection | 子项目的排列方式<br>- hoz: 水平排列 (default)<br>- ver: 垂直排列<br><br>**可选值**:<br>'hoz', 'ver'                                                                                  | Enum                   | 'hoz'     |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Checkbox } from '@alifd/next';\n\nReactDOM.render((\n    <div>\n        <h6>Different status without label:</h6>\n        Unchecked：<Checkbox />&nbsp;\n        DefaultChecked：<Checkbox defaultChecked />&nbsp;\n        Indeterminate：<Checkbox defaultIndeterminate />&nbsp;\n        Disabled：<Checkbox disabled />&nbsp;\n        Checked-Disabled：<Checkbox disabled checked />&nbsp;\n        Checked：<Checkbox checked />&nbsp;\n        <h6>Using with label</h6>\n        <Checkbox>Banana</Checkbox>&nbsp;\n        <Checkbox id=\"apple\" /><label htmlFor=\"apple\" className=\"next-checkbox-label\">Apple</label>&nbsp;\n        <label>\n            <Checkbox id=\"pear\" />\n            <span className=\"next-checkbox-label\">Pear</span>\n        </label>&nbsp;\n        <Checkbox label=\"Banana\" />\n    </div>\n), mountNode);\n","css":"","body":"\n<p>使用 <code>Checkbox</code> 渲染的基本组件。</p>\n"},{"title":"受限组件","order":"2","jsx":"import { Checkbox } from '@alifd/next';\n\nconst { Group: CheckboxGroup } = Checkbox;\nconst list = [\n    {\n        value: 'apple',\n        label: 'Apple'\n    }, {\n        value: 'pear',\n        label: 'Pear'\n    }, {\n        value: 'orange',\n        label: 'Orange'\n    }\n];\n\nclass ControlApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ['orange']\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(selectedItems) {\n        console.log('onChange callback', selectedItems);\n        this.setState({\n            value: selectedItems\n        });\n    }\n\n    render() {\n        return (\n            <div style={{padding: '20px'}}>\n                <CheckboxGroup value={this.state.value} dataSource={list} onChange={this.onChange} />\n            </div>\n        );\n    }\n\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n","css":"","body":"\n<p>使用 <code>CheckboxGroup</code> 渲染的组，通过设置 <code>value</code> 属性可以让组件变成<a href=\"https://facebook.github.io/react/docs/forms.html#controlled-components\">受限组件</a>。</p>\n"},{"title":"分组","order":"1","jsx":"import { Checkbox } from '@alifd/next';\n\nconst CheckboxGroup = () => (\n    <div>\n        <h4>Horizonal direction</h4>\n        <p>\n            <Checkbox.Group itemDirection=\"hoz\">\n                <Checkbox value=\"react\">React</Checkbox>\n                <Checkbox value=\"vue\">Vue</Checkbox>\n                <Checkbox value=\"angular\">Angular</Checkbox>\n            </Checkbox.Group>\n        </p>\n        <h4>Vertical direction</h4>\n        <p>\n            <Checkbox.Group itemDirection=\"ver\">\n                <Checkbox value=\"react\">React</Checkbox>\n                <Checkbox value=\"vue\">Vue</Checkbox>\n                <Checkbox value=\"angular\">Angular</Checkbox>\n            </Checkbox.Group>\n        </p>\n    </div>\n);\n\nReactDOM.render(<CheckboxGroup />, mountNode);\n","css":"","body":"\n<p>使用 <code>&lt;Checkbox.Group&gt;</code> 渲染 <code>&lt;Checkbox&gt;</code> 分组。</p>\n"},{"title":"中间状态组件","order":"1","jsx":"import { Checkbox, Button } from '@alifd/next';\n\nclass IndeterminateApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checked: false,\n            indeterminate: true,\n            disabled: false\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <Checkbox\n                    checked={this.state.checked}\n                    indeterminate={this.state.indeterminate}\n                    disabled={this.state.disabled}\n                    onChange={\n                        (checked) => {\n                            this.setState({checked: checked, indeterminate: false});\n                        }\n                    }\n                />\n                <br />\n                <br />\n                <Button\n                    type=\"primary\"\n                    onClick={\n                        () => {\n                            this.setState({checked: true, indeterminate: false});\n                        }\n                    }>checked = true</Button>\n                <br />\n                <br />\n                <Button\n                    type=\"primary\"\n                    onClick={\n                        () => {\n                            this.setState({checked: false});\n                        }\n                    }\n                >checked = false</Button>\n                <br />\n                <br />\n                <Button\n                    type=\"primary\"\n                    onClick={\n                        () => {\n                            this.setState({checked: false, indeterminate: true});\n                        }\n                    }\n                >indeterminate = true</Button>\n                <br />\n                <br />\n                <Button\n                    type=\"primary\"\n                    onClick={\n                        () => {\n                            this.setState({indeterminate: false});\n                        }\n                    }\n                >indeterminate = false</Button>\n                <br />\n                <br />\n                <Button\n                    type=\"primary\"\n                    onClick={\n                        () => {\n                            this.setState({disabled: !this.state.disabled});\n                        }\n                    }\n                >toggle disabled</Button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<IndeterminateApp />, mountNode);\n","css":"","body":"\n<p>通过使用 <code>indeterminate</code> 来渲染<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\">中间状态</a>的组件。</p>\n"},{"title":"Checkbox嵌套使用","order":"4","jsx":"import { Checkbox } from '@alifd/next';\n\nconst { Group: CheckboxGroup } = Checkbox;\n\nclass NestApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ['orange']\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(selectedItems) {\n        this.setState({\n            value: selectedItems\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <CheckboxGroup value={this.state.value} onChange={this.onChange}>\n                    <Checkbox id=\"apple\" value=\"apple\" disabled>Apple</Checkbox>\n                    <Checkbox id=\"watermelon\" value=\"watermelon\">Watermelon</Checkbox>\n                    <Checkbox id=\"orange\" value=\"orange\">Orange</Checkbox>\n                </CheckboxGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<NestApp />, mountNode);\n","css":"","body":"\n<p>使用 <code>CheckboxGroup</code>，通过直接嵌套 <code>Checkbox</code> 组件来渲染的组。</p>\n"},{"title":"非受限组件","order":"3","jsx":"import { Checkbox } from '@alifd/next';\n\nconst { Group: CheckboxGroup } = Checkbox;\nconst list = [\n    {\n        value: 'apple',\n        label: 'Apple',\n        disabled: false\n    }, {\n        value: 'pear',\n        label: 'Pear'\n    }, {\n        value: 'orange',\n        label: 'Orange',\n        disabled: true\n    }\n];\n\nclass UnControlApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(selectedItems) {\n        console.log('onChange callback', selectedItems);\n    }\n\n    render() {\n        return (\n            <div style={{padding: '20px'}}>\n                <CheckboxGroup defaultValue={['apple']} dataSource={list} onChange={this.onChange} />\n            </div>\n        );\n    }\n\n}\n\nReactDOM.render(<UnControlApp />, mountNode);\n","css":"","body":"\n<p>使用 <code>CheckboxGroup</code> 渲染的组，通过设置 <code>defaultValue</code> 属性可以让组件变成<a href=\"https://facebook.github.io/react/docs/forms.html#uncontrolled-components\">非受限组件</a>。</p>\n"}]},{"name":"Collapse","category":"Components","title":"折叠面板","type":"布局","importStatement":"import { Collapse } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n可以折叠/展开的内容区域。\n\n API\n\n### Collapse\n\n| 参数                  | 说明                                                 | 类型       | 默认值       |\n| ------------------- | -------------------------------------------------- | -------- | --------- |\n| dataSource          | 使用数据模型构建                                           | Array    | -         |\n| defaultExpandedKeys | 默认展开keys                                           | Array    | -         |\n| expandedKeys        | 受控展开keys                                           | Array    | -         |\n| onExpand            | 展开状态发升变化时候的回调<br><br>**签名**:<br>Function() => void | Function | func.noop |\n| disabled            | 所有禁用                                               | Boolean  | -         |\n| accordion           | 手风琴模式，一次只能打开一个                                     | Boolean  | false     |\n\n### Collapse.Panel\n\n| 参数       | 说明       | 类型        | 默认值 |\n| -------- | -------- | --------- | --- |\n| disabled | 是否禁止用户操作 | Boolean   | -   |\n| title    | 标题       | ReactNode | -   |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"手风琴","order":"2","jsx":"import { Collapse } from '@alifd/next';\n\nconst Panel = Collapse.Panel;\n\nReactDOM.render(<Collapse accordion>\n    <Panel\n        title=\"There is a long title, you can set the multiTitle to multi line display, the associated configuration properties and a single height is not the same, the specific configuration platform configuration can be configured.\">\n        <ul>\n            <li>Promotions are marketing campaigns ran by Marketplace</li>\n            <li>Participate to sale your products during that promotion and make a profit</li>\n        </ul>\n    </Panel>\n    <Panel title=\"What are Promotion Products?\">\n        <ul>\n            <li>Promotion Products is a service that helps you to promote products you list on Marketplace during a\n                certain time range\n            </li>\n            <li>You can choose which products should be available for the promotion</li>\n            <li>Not all Products of you will be available, because Promotions will only attract certain Product areas\n            </li>\n        </ul>\n    </Panel>\n    <Panel title=\"Why can i not submit a higher price?\">\n        <ul>\n            <li>The Promotion requires a certain price to make sure that our customers are attracted</li>\n        </ul>\n    </Panel>\n    <Panel title=\"What is Promo Stock?\">\n        Promo Stock is the criteria needed to be followed to be able to join Promotion. With setting particular Promo\n        Stock value you commit to have this amount of stock available while Promotion is active.\n    </Panel>\n</Collapse>, mountNode);\n","css":"","body":"\n<p>手风琴单例模式，每次只打开一个Panel。</p>\n"},{"title":"基本","order":"0","jsx":"import { Collapse } from '@alifd/next';\n\nconst Panel = Collapse.Panel;\n\nReactDOM.render(\n    <Collapse>\n        <Panel title=\"simple tile\">\n            <ul>\n                <li>Promotions are marketing campaigns ran by Marketplace</li>\n                <li>Participate to sale your products during that promotion and make a profit</li>\n            </ul>\n        </Panel>\n        <Panel title=\"What are Promotion Products?\">\n            <ul>\n                <li>Promotion Products is a service that helps you to promote products you list on Marketplace during a certain time range</li>\n                <li>You can choose which products should be available for the promotion</li>\n                <li>Not all Products of you will be available, because Promotions will only attract certain Product areas</li>\n            </ul>\n        </Panel>\n        <Panel title=\"Why can i not submit a higher price?\">\n            <ul>\n                <li>The Promotion requires a certain price to make sure that our customers are attracted</li>\n            </ul>\n        </Panel>\n        <Panel title=\"What is Promo Stock?\">\n            Promo Stock is the criteria needed to be followed to be able to join Promotion. With setting particular Promo Stock value you commit to have this amount of stock available while Promotion is active.\n        </Panel>\n    </Collapse>,\n    mountNode);\n","css":"","body":"\n"},{"title":"数据","order":"1","jsx":"import { Collapse } from '@alifd/next';\n\nconst list = [\n    {\n        title: 'Well, hello there',\n        content: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.',\n        disabled: true,\n    },\n    {\n        title: 'Gigantomaniac Monster Text, very long, much width, wow',\n        content: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.',\n    },\n    {\n        title: 'Generic Title',\n        content: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.'\n    },\n    {\n        title: 'Login Infomation',\n        content: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.'\n    }\n];\n\nReactDOM.render(<Collapse dataSource={list}/>, mountNode);\n","css":"","body":"\n"},{"title":"禁用","order":"3","jsx":"import { Collapse } from '@alifd/next';\n\nconst Panel = Collapse.Panel;\n\nReactDOM.render(\n    <div>\n        <Collapse disabled>\n            <Panel title=\"disable collapse\">\n                <ul>\n                    <li>Promotions are marketing campaigns ran by Marketplace</li>\n                    <li>Participate to sale your products during that promotion and make a profit</li>\n                </ul>\n            </Panel>\n            <Panel title=\"disable collapse\">\n                <ul>\n                    <li>Promotion Products is a service that helps you to promote products you list on Marketplace during a certain time range</li>\n                    <li>You can choose which products should be available for the promotion</li>\n                    <li>Not all Products of you will be available, because Promotions will only attract certain Product areas</li>\n                </ul>\n            </Panel>\n            <Panel title=\"disable collapse\">\n                <ul>\n                    <li>The Promotion requires a certain price to make sure that our customers are attracted</li>\n                </ul>\n            </Panel>\n            <Panel title=\"disable collapse\">\n                Promo Stock is the criteria needed to be followed to be able to join Promotion. With setting particular Promo Stock value you commit to have this amount of stock available while Promotion is active.\n            </Panel>\n        </Collapse>\n        <br />\n        <Collapse>\n            <Panel title=\"simple title(disabled)\" disabled>\n                <ul>\n                    <li>Promotions are marketing campaigns ran by Marketplace</li>\n                    <li>Participate to sale your products during that promotion and make a profit</li>\n                </ul>\n            </Panel>\n            <Panel title=\"What are Promotion Products?(disabled)\" disabled>\n                <ul>\n                    <li>Promotion Products is a service that helps you to promote products you list on Marketplace during a certain time range</li>\n                    <li>You can choose which products should be available for the promotion</li>\n                    <li>Not all Products of you will be available, because Promotions will only attract certain Product areas</li>\n                </ul>\n            </Panel>\n            <Panel title=\"Why can i not submit a higher price?\">\n                <ul>\n                    <li>The Promotion requires a certain price to make sure that our customers are attracted</li>\n                </ul>\n            </Panel>\n            <Panel title=\"What is Promo Stock?\">\n                Promo Stock is the criteria needed to be followed to be able to join Promotion. With setting particular Promo Stock value you commit to have this amount of stock available while Promotion is active.\n            </Panel>\n        </Collapse>\n    </div>,\n    mountNode);\n","css":"","body":"\n"},{"title":"事件","jsx":"import { Collapse } from '@alifd/next';\n\nconst Panel = Collapse.Panel;\n\nclass Demo extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            expandedKeys: []\n        };\n    }\n\n    onExpand(expandedKeys) {\n        this.setState({\n            expandedKeys\n        });\n    }\n\n    onClick(key) {\n        console.log('clicked', key);\n    }\n    render() {\n        return (\n            <Collapse onExpand={this.onExpand.bind(this)} expandedKeys={this.state.expandedKeys} >\n                <Panel title=\"simple tile\" onClick={this.onClick}>\n                    <ul>\n                        <li>Promotions are marketing campaigns ran by Marketplace</li>\n                        <li>Participate to sale your products during that promotion and make a profit</li>\n                    </ul>\n                </Panel>\n                <Panel title=\"What are Promotion Products?\">\n                    <ul>\n                        <li>Promotion Products is a service that helps you to promote products you list on Marketplace during a certain time range</li>\n                        <li>You can choose which products should be available for the promotion</li>\n                        <li>Not all Products of you will be available, because Promotions will only attract certain Product areas</li>\n                    </ul>\n                </Panel>\n                <Panel title=\"Why can i not submit a higher price?\">\n                    <ul>\n                        <li>The Promotion requires a certain price to make sure that our customers are attracted</li>\n                    </ul>\n                </Panel>\n                <Panel title=\"What is Promo Stock?\">\n                    Promo Stock is the criteria needed to be followed to be able to join Promotion. With setting particular Promo Stock value you commit to have this amount of stock available while Promotion is active.\n                </Panel>\n            </Collapse>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n"}]},{"name":"ConfigProvider","category":"Components","title":"全局配置 Next 组件","type":"基本","importStatement":"import { ConfigProvider } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n-   修改组件类名前缀，Next 组件类名的默认前缀都是 'next-'，如 'next-btn'，你可能在以下两种情况下想改变这个默认前缀：\n    -   自定义组件品牌，如 'my-btn'，'my-select'\n    -   一个页面中同时引入两个主题，防止相同类名样式互相覆盖\n-   实现多语言文案切换\n-   开启 Pure Render 模式，提高性能，注意同时可能会带来副作用\n\n### 基本使用\n\n#### 指定多语言文案\n\n通过 `<ConfigProvider locale={localeObj}>` 传入语言包，以支持多语言。目前 Fusion 内置的 locale 库支持中英繁日四种语言，覆盖各组件的简单词汇，例如：确定、取消、展开、收起、下一页等， 简单词汇映射表可参考 <https://unpkg.com/@alifd/next/lib/locale/>\n<br />\n(ConfigProvider 提供简单组件简单词汇国际化能力，由于日期时间的国际化较为特殊，例如中国的日历是从周一到周日，美国的日历是从周日到周六等，时间相关的组件如DatePicker等需要国际化，请查看相应组件文档。)\n<br />\n\n可通过两种方式设置多语言文案，两种方式接收的对象格式略有不同:\n\n-   1.设置组件自身 locale 属性\n\n```jsx\n{\n    key1: value1,\n    key2: value2\n}\n```\n\n-   2.ConfigProvider 的 locale 属性 (推荐)\n\n```jsx\n{\n    component1: {\n        key1: value1,\n        key2: value2\n    },\n    component2: {\n        key1: value1,\n        key2: value2\n    }\n}\n```\n\n优先级顺序为: 组件自身 locale > 最近 ConfigProvider 的 locale > 更远父级 ConfigProvider 的 locale\n\n```js\nimport { ConfigProvider, DatePicker } from '@alifd/next';\n\nconst localeDatePicker = {\n  placeholder: 'localeDatePicker placeholder'\n};\n\nconst localeGlobal = {\n  DatePicker: {\n    placeholder: 'localeGlobal placeholder'\n  }\n};\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <ConfigProvider locale={localeGlobal}>\n                    <DatePicker /> should be 'localeGlobal placeholder'\n                </ConfigProvider>\n                <br />\n                <br />\n                <ConfigProvider locale={localeGlobal}>\n                    <DatePicker locale={localeDatePicker} /> should be 'localeDatePicker placeholder'\n                </ConfigProvider>\n            </div>\n        );\n    }\n}\n```\n\n根据引入组件库方式的不同(CDN直接引用、作为依赖引用)，使用语言包的方式略有差异，具体见如下代码：\n<br />\n\n```js\nimport { ConfigProvider, DatePicker } from '@alifd/next';\nimport enUS from '@alifd/next/lib/locale/en-us';\n// import zhCN from '@alifd/next/lib/locale/zh-cn';\n// import zhTW from '@alifd/next/lib/locale/zh-tw';\n// import jaJP from '@alifd/next/lib/locale/ja-jp';\n\n// 如果应用中直接引入的是 cdn 上的 next-with-locales.js 文件\n// 需要按照下面的方式引入国际化文案文件\n// const { ConfigProvider, DatePicker, locales } = window.Next;\n// const enUS = locales['en-us'];\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider locale={enUS}>\n                <DatePicker />\n            </ConfigProvider>\n        );\n    }\n}\n```\n\n如果内置的 locale 库不满足你的需求(比如想支持法语、德语、西班牙语)，你也可以参考 <https://unpkg.com/@alifd/next/lib/locale/> 来自定义语言包，按照如下格式传入给 locale 即可：\n\n```js\n{\n    DatePicker: {\n        datePlaceholder: 'Select date',\n        monthPlaceholder: 'Select month',\n        yearPlaceholder: 'Select year',\n        rangeStartPlaceholder: 'Start date',\n        rangeEndPlaceholder: 'End date',\n        ok: 'OK',\n        clear: 'Clear'\n    },\n    Dialog: {\n        // ...\n    },\n    // ...\n}\n```\n\n#### 修改组件类名前缀\n\n1.  为你的应用包裹 ConfigProvider，并设置相应的 prefix\n\n    entry.jsx\n\n    ```js\n    class App extends React.Component {\n        render() {\n            return (\n                <ConfigProvider prefix=\"my-\">\n                    <div>\n                        <Input />\n                        <Button>Submit</Button>\n                    </div>\n                </ConfigProvider>\n            );\n        }\n    }\n    ```\n\n2.  scss 入口文件中在引入主题 scss 文件前，设置相应的 `$css-prefix`\n\n    entry.scss\n\n    ```scss\n    $css-prefix: \"my-\";\n    @import \"~@alifd/theme-xxx/index.scss\";\n    ```\n\n#### 开启 Pure Render\n\n```js\nimport { ConfigProvider, DatePicker } from '@alifd/next';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider pure>\n                <DatePicker />\n            </ConfigProvider>\n        );\n    }\n}\n```\n\n#### 如何让组件支持 ConfigProvider ？\n\n```js\nimport { ConfigProvider } from '@alifd/next';\nimport locale from './locale';\n\nconst { config } = ConfigProvider;\n\nclass Component extends React.Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        locale: PropTypes.object,\n        pure: PropTypes.bool\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        locale: locale,\n        pure: false\n    };\n\n    render() {\n        const { prefix, locale, pure } = this.props;\n        // ...\n    }\n}\n\nexport default config(Component);\n```\n\n API\n\n### ConfigProvider\n\n| 参数       | 说明                                  | 类型           | 默认值  |\n| -------- | ----------------------------------- | ------------ | ---- |\n| pure     | 是否开启 Pure Render 模式，会提高性能，但是也会带来副作用 | Boolean      | -    |\n| warning  | 是否在开发模式下显示组件属性被废弃的 warning 提示       | Boolean      | true |\n| rtl      | 是否开启 rtl 模式                         | Boolean      | -    |\n| children | 组件树                                 | ReactElement | -    |\n\n<!-- api-extra-start -->\n\n### ConfigProvider.config(Component)\n\n传入组件，生成受 ConfigProvider 控制的 HOC 组件，如果组件没有声明 shouldComponentUpdate 方法，会添加如下 shouldComponentUpdate 方法以支持 ConfigProvider 的 pure 属性\n\n```js\nComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.pure) {\n        return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n    }\n\n    return true;\n};\n```\n\n### ConfigProvider.getContextProps(props, displayName)\n\n传入组件的 props 和 displayName，得到和 childContext 计算过的包含有 preifx/locale/pure 的对象，一般用于通过静态方法生成脱离组件树的组件。\n\n### ConfigProvider.getContext()\n\n通过该方法可以获取到 ConfigProvider 的上下文，格式如下。若有多层级 ConfigProvider 嵌套，会返回merge后的结果，关系近的优先。\n\n```js\n{\n    prefix: nextPrefix,\n    locale: nextLocale,\n    pure: nextPure,\n    warning: nextWarning\n}\n```\n\n### ConfigProvider.initLocales(locales)\n\n配置所有语言包, 可配合 `ConfigProvider.setLanguage` 方法，确定组件使用的语言包。\n\n```js\nConfigProvider.initLocales({\n    'zh-cn': {},\n    'en-us': {}\n});\n```\n\n### ConfigProvider.setLanguage(language)\n\n设置语言，参数 `language` 需要能在 `ConfigProvider.initLocales` 方法传入的参数的 key 中找到， 默认为 `zh-cn`\n\n```js\nConfigProvider.setLanguage('zh-cn');\n```\n\n### ConfigProvider.setLocale(locale)\n\n直接设置语言包\n\n```js\n// 相当于 同时用ConfigProvider.initLocales 和 ConfigProvider.setLanguage\nConfigProvider.setLocale({\n    DatePicker: {},\n    Dialog: {}\n});\n```\n\n### ConfigProvider.setDirection(dir)\n\n设置组件展示方向，当传入 `rtl`时，会在组件的根DOM节点加上 `dir=\"rtl\"`，同时组件展示rtl视觉。可用于阿拉伯等阅读顺序从右到左的国家。\n\n```js\nConfigProvider.setDirection('rtl');\n```\n\n### ConfigProvider.getLocale()\n\n获取当前的语言包\n\n### ConfigProvider.getLanguage()\n\n获取当前设定的语言\n\n### ConfigProvider.getDirection()\n\n获取当前设定的方向\n\n<!-- api-extra-end -->\n\n## 使用注意\n\n### 减小应用中 webpack 打包 moment 体积\n\nNext 1.x 中将 moment 作为自己的 peerDependencies 而非 dependencies，所以用户需要自己在应用中引入 moment 的 cdn 文件 moment-with-locales.js 或者本地安装 moment 打包进自己的应用。对于后者，由于 moment 在引入 locale 文件时存在这样的代码：`require('./locale/' + name)`，如果用 webpack 构建，会打包进所有的 [locale 文件](https://github.com/moment/moment/tree/develop/locale)，增加构建后文件的体积，目前社区比较主流的解决方案有以下两种：\n\n```js\nconst webpack = require('webpack');\n\nmodule.exports = {\n    // ...\n    plugins: [\n    // 打包指定需要的语言文件\n        new webpack.ContextReplacementPlugin(/moment[\\/\\\\]locale$/, /zh-cn|ja/)\n    // 只打包有过引用的语言文件，应用中需要添加如：`import 'moment/locale/zh-cn';`\n    // new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)\n    ]\n};\n```\n\n### 为自定义组件添加 displayName\n\nConfigProvider 获取组件对应的多语言文案，是通过组件的 displayName 或者 name 获取的，但是压缩混淆的过程中有可能会修改函数的 name，因此如果想支持在 ConfigProvider 下实现切换多语言切换，请为组件如下手动添加 displayName:\n\n```js\nclass CustomComponent extends React.Component {\n\tstatic displayName = 'CustomComponent';\n\t// ...\n}\n```\n\n或者使用 `babel-plugin-transform-react-es6-displayname` 自动在编译期间添加 displayname。\n\n### 获取 HOC 组件内部组件的引用\n\n由于 HOC 本身的限制，我们不能直接像下面代码那样获取内部组件的引用，从而调用它的一些内部方法：\n\n```js\nclass App extends React.Component {\n    componentDidMount() {\n        // 报错\n        this.refs.hoc.someMethod();\n    }\n\n    render() {\n        return <HOC ref=\"hoc\" />;\n    }\n}\n```\n\n为了解决这个问题，我们为调用 config 方法生成的 HOC 组件添加了 getInstance 方法，你可以如下调用：\n\n```js\nclass App extends React.Component {\n    componentDidMount() {\n        this.refs.hoc.getInstance().someMethod();\n    }\n\n    render() {\n        return <HOC ref=\"hoc\" />;\n    }\n}\n```\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { ConfigProvider } from '@alifd/next';\nimport PropTypes from 'prop-types';\n\nconst { config } = ConfigProvider;\n\nclass Output extends React.Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        locale: PropTypes.object,\n        pure: PropTypes.bool\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        locale: {\n            hello: '你好'\n        },\n        pure: false\n    };\n\n    render() {\n        const { prefix, locale, pure } = this.props;\n\n        return (\n            <ul>\n                <li>prefix: {prefix}</li>\n                <li>locale: {JSON.stringify(locale)}</li>\n                <li>pure: {pure.toString()}</li>\n            </ul>\n        );\n    }\n}\n\nconst NewOutput = config(Output);\n\nclass Demo extends React.Component {\n    render() {\n        return (\n            <ConfigProvider prefix=\"custom-\" locale={{ Output: { hello: 'hello' } }} pure>\n                <NewOutput />\n            </ConfigProvider>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>最简单的用法，展示 ConfigProvider 是如何工作的。</p>\n"},{"title":"支持国际化的组件","order":"1","jsx":"import { ConfigProvider, Button, Radio, Calendar, Card, DatePicker, Dialog, Pagination, TimePicker, Timeline, Transfer, Select, Upload, Table } from '@alifd/next';\n\nimport enUS from '@alifd/next/lib/locale/en-us';\nimport zhCN from '@alifd/next/lib/locale/zh-cn';\n\n// If the application directly imports the next-with-locales.js file from cdn\n// it need to import locale file in the following way\n// import { locales } from '@alifd/next';\n// const enUS = locales['en-us'];\n// const zhCN = locales['zh-cn'];\n\nconst RangePicker = DatePicker.RangePicker;\n\nconst transferDataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content ${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lang: 'en-us'\n        };\n\n        this.changeLang = this.changeLang.bind(this);\n        this.showDialog = this.showDialog.bind(this);\n    }\n\n    changeLang(lang) {\n        this.setState({\n            lang\n        });\n    }\n\n    showDialog() {\n        Dialog.confirm({\n            title: 'Confirm',\n            content: 'Are you sure you want to delete all alert e-mails waiting in queue?'\n        });\n    }\n\n    render() {\n        const locale = this.state.lang === 'en-us' ? enUS : zhCN;\n\n        return (\n            <div>\n                <div className=\"change-locale\">\n                    <span style={{ marginRight: 16 }}>Change locale of components: </span>\n                    <Radio.Group shape=\"button\" size=\"large\" defaultValue=\"en-us\" onChange={this.changeLang}>\n                        <Radio key=\"en\" value=\"en-us\">English</Radio>\n                        <Radio key=\"cn\" value=\"zh-cn\">中文</Radio>\n                    </Radio.Group>\n                </div>\n                <ConfigProvider locale={locale}>\n                    <div className=\"locale-components\">\n                        <Button type=\"primary\" onClick={this.showDialog}>Show Dialog</Button>\n                        <Select style={{ width: '150px' }} dataSource={['hello', 'bye']} />\n                        <DatePicker />\n                        <TimePicker />\n                        <RangePicker />\n                        <Calendar style={{ width: '350px', padding: '12px', border: '1px solid #C4C6CF', borderRadius: '3px' }} shape=\"card\" />\n                        <Pagination defaultCurrent={2} />\n                        <Transfer dataSource={transferDataSource} defaultValue={['3']} defaultLeftChecked={['1']} titles={['Source', 'Target']} />\n                        <Table style={{ width: '500px' }} dataSource={[]}>\n                            <Table.Column title=\"Name\" dataIndex=\"name\" filters={[{ label: 'Filter 1', value: '1' }, { label: 'Filter 2', value: '2' }]} />\n                            <Table.Column title=\"Age\" dataIndex=\"age\" />\n                        </Table>\n                        <Card style={{ width: '300px' }} title=\"Title\">\n                            <div style={{ height: '250px', background: '#F7F8FA' }}></div>\n                        </Card>\n                        <Timeline fold={[{foldArea: [1, 2], foldShow: true}]}>\n                            <Timeline.Item title=\"Signed\" content=\"Signed, sign Alibaba is a small post office, thanks to the use of STO, look forward to once again at your service\" time={'2016-06-10 10:30:00'} state=\"process\"/>\n                            <Timeline.Item title=\"Ship\" content=\"Express has arrived in Hangzhou, Zhejiang Binjiang company\" time={'2016-06-10 09:30:00'} />\n                            <Timeline.Item title=\"Ship\" content=\"Zhejiang Hangzhou Riverside company sent a member for you to send pieces\" time={'2016-06-10 09:03:00'} />\n                            <Timeline.Item title=\"Ship\" content=\"Zhejiang Hangzhou Transshipment Center has been issued\" time={'2016-06-10 06:10:00'} />\n                        </Timeline>\n                        <Upload.Dragger style={{ width: '500px' }}\n                            listType=\"image\"\n                            action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n                            accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\" />\n                    </div>\n                </ConfigProvider>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".change-locale {\n    border-bottom: 1px solid #d9d9d9;\n    padding-bottom: 16px;\n}\n\n.locale-components > * {\n    margin: 16px 0;\n    display: block;\n}\n","body":"\n<p>展示目前 Next 组件中支持国际化的组件。</p>\n"},{"title":"使用 Consumer 组件读取上下文中的数据","order":"4","jsx":"import { ConfigProvider } from '@alifd/next';\nimport PropTypes from 'prop-types';\n\nconst localeSettings = {\n    momentLocale: 'fr-FR',\n    CustomizedComponent: {\n        helloWorld: 'hello, world',\n    },\n};\n\nconst App = ({ children }) => (\n    <ConfigProvider\n        prefix=\"customized-\"\n        locale={localeSettings}\n        pure\n        warning={false}\n    >\n        {children}\n    </ConfigProvider>\n);\n\nApp.propTypes = {\n    children: PropTypes.node,\n};\n\nconst Child = () => (\n    <ConfigProvider.Consumer>\n        {\n            context => (\n                <div className=\"context-data\">\n                    <h3>Context's state</h3>\n                    <pre>{JSON.stringify(context, false, 2)}</pre>\n                </div>\n            )\n        }\n    </ConfigProvider.Consumer>\n);\n\nconst Demo = () => (\n    <App>\n        <Child />\n    </App>\n);\n\nReactDOM.render(<Demo />, mountNode);\n","css":".context-data {\n    padding: 0 32px 32px;\n    border: 3px dashed #aaa;\n    border-radius: 9px;\n}\n","body":"\n<p>使用 <code>&lt;Consumer&gt;</code> 可以方便地读取 <code>&lt;ConfigProvider&gt;</code> 中上下文的数据</p>\n"},{"title":"国际化","order":"3","jsx":"import { ConfigProvider, Button, Select } from '@alifd/next';\nimport PropTypes from 'prop-types';\n\nconst { config, getContextProps } = ConfigProvider;\nconst { Option } = Select;\n\nconst locales = {\n    'zh-cn': {\n        ClickMe: {\n            clickMe: '点我！'\n        },\n        Toast: {\n            close: '关闭'\n        }\n    },\n    'en-us': {\n        ClickMe: {\n            clickMe: 'click me!'\n        },\n        Toast: {\n            close: 'close'\n        }\n    }\n};\n\nclass ClickMe extends React.Component {\n    static propTypes = {\n        locale: PropTypes.object,\n        onClick: PropTypes.func\n    };\n\n    static defaultProps = {\n        locale: locales['zh-cn'].ClickMe,\n        onClick: () => {}\n    };\n\n    render() {\n        const { locale, onClick } = this.props;\n        return (\n            <Button onClick={onClick}>{locale.clickMe}</Button>\n        );\n    }\n}\n\nclass Toast extends React.Component {\n    static propTypes = {\n        locale: PropTypes.object,\n        afterClose: PropTypes.func\n    };\n\n    static defaultProps = {\n        locale: locales['zh-cn'].Toast,\n        afterClose: () => {}\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false\n        };\n\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    handleClose() {\n        this.setState({\n            visible: false\n        });\n        this.props.afterClose();\n    }\n\n    render() {\n        return (\n            <div className=\"toast\">\n                <Button type=\"primary\" onClick={this.handleClose}>\n                    {this.props.locale.close}\n                </Button>\n            </div>\n        );\n    }\n}\nToast.create = (props = {}) => {\n    const mountNode = document.createElement('div');\n    document.body.appendChild(mountNode);\n\n    const closeChain = () => {\n        ReactDOM.unmountComponentAtNode(mountNode);\n        document.body.removeChild(mountNode);\n    };\n\n    const newLocale = getContextProps(props, 'Toast').locale;\n\n    ReactDOM.render(<Toast afterClose={closeChain} locale={newLocale} />, mountNode);\n};\n\nconst NewClickMe = config(ClickMe);\nconst NewToast = config(Toast);\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            language: 'zh-cn'\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleChangeLanguage = this.handleChangeLanguage.bind(this);\n    }\n\n    handleClick() {\n        NewToast.create();\n    }\n\n    handleChangeLanguage(language) {\n        this.setState({\n            language\n        });\n    }\n\n    render() {\n        const { language } = this.state;\n\n        return (\n            <ConfigProvider locale={locales[language]}>\n                <div>\n                    <div className=\"select-language\">\n                        <Select value={language} onChange={this.handleChangeLanguage}>\n                            <Option value=\"zh-cn\">zh-cn</Option>\n                            <Option value=\"en-us\">en-us</Option>\n                        </Select>\n                    </div>\n                    <NewClickMe onClick={this.handleClick} />\n                </div>\n            </ConfigProvider>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".toast {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: auto;\n    width: 200px;\n    height: 100px;\n    line-height: 100px;\n    text-align: center;\n    background: white;\n    box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, .32);\n}\n\n.toast .next-btn {\n    margin: auto;\n}\n\n.select-language {\n    margin-bottom: 20px;\n}\n","body":"\n<p>展示如何配合 ConfigProvider 实现具有国际化能力的组件。</p>\n"},{"title":"组件的RTL","order":"2","jsx":"import { ConfigProvider, Button, Radio, Menu, Calendar, DatePicker, Dialog, TimePicker, Timeline, Select } from '@alifd/next';\n\nconst { SubMenu, Item, Group, Divider } = Menu;\nconst RangePicker = DatePicker.RangePicker;\n\nConfigProvider.setDirection('rtl');\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dir: 'rtl'\n        };\n\n        this.changeDir = this.changeDir.bind(this);\n        this.showDialog = this.showDialog.bind(this);\n    }\n\n    changeDir(value) {\n        this.setState({\n            dir: value\n        });\n    }\n\n    showDialog() {\n        Dialog.confirm({\n            title: 'Confirm',\n            content: 'Are you sure you want to delete all alert e-mails waiting in queue?'\n        });\n    }\n\n    render() {\n\n        return (\n            <div dir={this.state.dir}>\n                <div className=\"change-rtl\">\n                    <span style={{ marginRight: 16 }}>Change direction of components: </span>\n                    <Radio.Group shape=\"button\" size=\"large\" value={this.state.dir} onChange={this.changeDir}>\n                        <Radio key=\"en\" value=\"rtl\">RTL</Radio>\n                        <Radio key=\"cn\" value=\"ltr\">LTR</Radio>\n                    </Radio.Group>\n                </div>\n                <br />\n                <hr />\n                <ConfigProvider rtl={this.state.dir === 'rtl'}>\n                    <div className=\"locale-components\">\n                        <Button type=\"primary\" onClick={this.showDialog}>Show Dialog</Button>\n                        <Select style={{ width: '150px' }} dataSource={['hello', 'bye']} />\n                        <RangePicker showTime/>\n                        <Calendar style={{ width: '350px', padding: '12px', border: '1px solid #C4C6CF', borderRadius: '3px' }} shape=\"card\" />\n\n                        <Timeline fold={[{foldArea: [1, 2], foldShow: true}]}>\n                            <Timeline.Item title=\"Signed\" content=\"Signed, sign Alibaba is a small post office, thanks to the use of STO, look forward to once again at your service\" time={'2016-06-10 10:30:00'} state=\"process\"/>\n                            <Timeline.Item title=\"Ship\" content=\"Express has arrived in Hangzhou, Zhejiang Binjiang company\" time={'2016-06-10 09:30:00'} />\n                            <Timeline.Item title=\"Ship\" content=\"Zhejiang Hangzhou Riverside company sent a member for you to send pieces\" time={'2016-06-10 09:03:00'} />\n                            <Timeline.Item title=\"Ship\" content=\"Zhejiang Hangzhou Transshipment Center has been issued\" time={'2016-06-10 06:10:00'} />\n                        </Timeline>\n\n                        <Menu className=\"my-menu\" defaultOpenKeys=\"sub-menu\">\n                            <Item key=\"1\">Option 1</Item>\n                            <Item disabled key=\"2\">Disabled option 2</Item>\n                            <Divider key=\"divider\" />\n                            <Group label=\"Group\">\n                                <Item key=\"group-1\">Group option 1</Item>\n                                <Item key=\"group-2\">Group option 2</Item>\n                            </Group>\n                            <Divider />\n                            <SubMenu key=\"sub-menu\" label=\"Sub menu\">\n                                <Item key=\"sub-1\">Sub option 1</Item>\n                                <Item key=\"sub-2\">Sub option 2</Item>\n                                <Item disabled key=\"sub-3\">\n                                    <a href=\"https://www.taobao.com/\" target=\"__blank\">Disabled Option Link 3</a>\n                                </Item>\n                                <Item key=\"sub-4\">\n                                    <a href=\"https://www.taobao.com/\" target=\"__blank\">Option Link 4</a>\n                                </Item>\n                            </SubMenu>\n                            <Item key=\"3\" helper=\"CTRL+P\">Option 3</Item>\n                            <Item disabled key=\"4\">\n                                <a href=\"https://www.taobao.com/\" target=\"__blank\">Disabled Option Link</a>\n                            </Item>\n                            <Item key=\"5\">\n                                <a href=\"https://www.taobao.com/\" target=\"__blank\">Option Link</a>\n                            </Item>\n                        </Menu>\n                    </div>\n                </ConfigProvider>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".my-menu {\n    width: 200px;\n}\n\n.change-locale {\n    border-bottom: 1px solid #d9d9d9;\n    padding-bottom: 16px;\n}\n\n.locale-components > * {\n    margin: 16px 0;\n    display: block;\n}\n","body":"\n<p>组件RTL样式展示(目前部分支持)</p>\n"}]},{"name":"DatePicker","category":"Components","title":"日期选择框","type":"表单","importStatement":"import { DatePicker } from '@alifd/next';","body":"\n## Guide\n\n输入或选择日期的控件。当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。\n\n### 日期选择模式\n\nDatePicker/RangePicker 在交互上增加了**操作焦点**的设置，意味着，如果某个输入框处于 focus 态，那么当前选择的日期将会作用于该输入框对应的日期。\n\n如上图所示，带时间的 RangePicker 有 4 个输入焦点，分别为开始日期、开始时间、结束日期、结束时间。当用户激活某个输入框时，此时下拉选择的日期将会作用域该输入框。同时设置了如下两个规则：\n\n1.  已选定日期范围后，当焦点在开始日期时，如果即将选择的日期大于结束日期，将会重设开始日期。\n2.  已选定日期范围后，当焦点在结束日期时，如果即将选择的日期小于开始日期，将会重设开始日期。\n\n### 日期值的多语言\n\n由于 Calendar 组件内部使用 moment 对象来设置日期（请使用最新版 moment），部分 Locale 读取自 moment，因此用户需要在外部使用时[正确的设置 moment 的 locale](http://momentjs.cn/docs/#/i18n/changing-locale/) 。\n\n-   Q: 文档站点上看是中式日历，为什么我本地却是美式日历呢？如何进行多语言适配？<br/>\n    A: 日期的多语言情况比较复杂，涉及到年、月、日、星期、阅读习惯等多方面(美式从周日到周六，中式从周一到周日)，因此我们借助了成熟的时间库 moment.js 来进行日期的多语言处理。\n     moment.js 默认支持美式表达，如需中文等其他语言，请引入moment-with-locales.js语言包。\n\n```js\nimport moment from 'moment';\n\nmoment.locale('zh-cn');\n```\n\n此外，当改变 moment 的全局 locale 时并不会修改之前的已有实例，例如：\n\n```js\nmoment.locale('fr');\nconst m = moment(1316116057189);\nm.fromNow(); // il y a une heure\n\nmoment.locale('en');\nm.fromNow(); // il y a une heure\nmoment(1316116057189).fromNow(); // an hour ago\n```\n\n除了全局设置 moment 的多语言，还可以只对某个 moment 实例设置多语言。比如：\n\n```js\nconst value = moment();\nvalue.locale('fr'); // set this instance to use French\n```\n\n### Moment 对象和字符串\n\nDatePicker 默认情况下接收和返回的数据类型都是 Moment 对象。为了便于用户的使用，DatePikcer 还支持直接传入字符串（组件内部仍然会格式化为 Moment 对象）。使用方法如下：\n\n标准非受控\n\n```jsx\n<DatePicker onChange={val => console.log(val)} />\n// select 2019-01-23\n// >> MomentObject\n\n<DatePicker defaultValue={moment()} onChange={val => console.log(val)} />\n// select 2019-01-23\n// >> MomentObject\n\n<DatePicker defaultValue=\"2018-01-23\" onChange={val => console.log(val)} />\n// select 2019-01-23\n// >> \"2019-01-23\"\n```\n\n标准受控\n\n```jsx\n<DatePicker value={moment()} onChange={val => console.log(val)} />\n// setProps({ value: moment().add(1, 'months') })\n// >> MomentObject\n\n<DatePicker value=\"2018-01-23\" onChange={val => console.log(val)} />\n// setProps({ value: '2019-01-23' })\n// >> \"2019-01-23\"\n```\n\n API\n\n### DatePicker\n\n| 参数                  | 说明                                                                                                                                                             | 类型             | 默认值          |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | ------------ |\n| label               | 输入框内置标签                                                                                                                                                        | ReactNode      | -            |\n| size                | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                            | Enum           | 'medium'     |\n| state               | 输入框状态<br><br>**可选值**:<br>'success', 'error'                                                                                                                    | Enum           | -            |\n| placeholder         | 输入提示                                                                                                                                                           | String         | -            |\n| defaultVisibleMonth | 默认展现的月<br><br>**签名**:<br>Function() => MomentObject<br>**返回值**:<br>{MomentObject} 返回包含指定月份的 moment 对象实例<br>                                                    | Function       | -            |\n| value               | 日期值（受控）moment 对象                                                                                                                                               | custom         | -            |\n| defaultValue        | 初始日期值，moment 对象                                                                                                                                                | custom         | -            |\n| format              | 日期值的格式（用于限定用户输入和展示）                                                                                                                                            | String         | 'YYYY-MM-DD' |\n| showTime            | 是否使用时间控件，传入 TimePicker 的属性 { defaultValue, format, ... }                                                                                                       | Object/Boolean | false        |\n| resetTime           | 每次选择日期时是否重置时间（仅在 showTime 开启时有效）                                                                                                                               | Boolean        | false        |\n| disabledDate        | 禁用日期函数<br><br>**签名**:<br>Function(日期值: MomentObject) => Boolean<br>**参数**:<br>_日期值_: {MomentObject} null<br>**返回值**:<br>{Boolean} 是否禁用<br>                     | Function       | () => false  |\n| footerRender        | 自定义面板页脚<br><br>**签名**:<br>Function() => Node<br>**返回值**:<br>{Node} 自定义的面板页脚组件<br>                                                                              | Function       | () => null   |\n| onChange            | 日期值改变时的回调<br><br>**签名**:<br>Function(value: MomentObject/String) => void<br>**参数**:<br>_value_: {MomentObject/String} 日期值                                      | Function       | func.noop    |\n| onOk                | 点击确认按钮时的回调<br><br>**签名**:<br>Function() => MomentObject/String<br>**返回值**:<br>{MomentObject/String} 日期值<br>                                                    | Function       | func.noop    |\n| disabled            | 是否禁用                                                                                                                                                           | Boolean        | -            |\n| hasClear            | 是否显示清空按钮                                                                                                                                                       | Boolean        | true         |\n| visible             | 弹层显示状态                                                                                                                                                         | Boolean        | -            |\n| defaultVisible      | 弹层默认是否显示                                                                                                                                                       | Boolean        | -            |\n| onVisibleChange     | 弹层展示状态变化时的回调<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function       | func.noop    |\n| popupTriggerType    | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                     | Enum           | 'click'      |\n| popupAlign          | 弹层对齐方式,具体含义见 OverLay文档                                                                                                                                         | String         | 'tl tl'      |\n| popupContainer      | 弹层容器<br><br>**签名**:<br>Function(target: Element) => Element<br>**参数**:<br>_target_: {Element} 目标元素<br>**返回值**:<br>{Element} 弹层的容器元素<br>                        | Function       | -            |\n| popupStyle          | 弹层自定义样式                                                                                                                                                        | Object         | -            |\n| popupClassName      | 弹层自定义样式类                                                                                                                                                       | String         | -            |\n| popupProps          | 弹层其他属性                                                                                                                                                         | Object         | -            |\n\n### DatePicker.MonthPicker\n\n| 参数                 | 说明                                                                                                                                                             | 类型        | 默认值         |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ----------- |\n| label              | 输入框内置标签                                                                                                                                                        | ReactNode | -           |\n| size               | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                            | Enum      | 'medium'    |\n| state              | 输入框状态<br><br>**可选值**:<br>'success', 'error'                                                                                                                    | Enum      | -           |\n| placeholder        | 输入提示                                                                                                                                                           | String    | -           |\n| defaultVisibleYear | 默认展现的年<br><br>**签名**:<br>Function() => MomentObject<br>**返回值**:<br>{MomentObject} 返回包含指定年份的 moment 对象实例<br>                                                    | Function  | -           |\n| value              | 日期值（受控）moment 对象                                                                                                                                               | custom    | -           |\n| defaultValue       | 初始日期值，moment 对象                                                                                                                                                | custom    | -           |\n| format             | 日期值的格式（用于限定用户输入和展示）                                                                                                                                            | String    | 'YYYY-MM'   |\n| disabledDate       | 禁用日期函数<br><br>**签名**:<br>Function(日期值: MomentObject) => Boolean<br>**参数**:<br>_日期值_: {MomentObject} null<br>**返回值**:<br>{Boolean} 是否禁用<br>                     | Function  | () => false |\n| footerRender       | 自定义面板页脚<br><br>**签名**:<br>Function() => Node<br>**返回值**:<br>{Node} 自定义的面板页脚组件<br>                                                                              | Function  | () => null  |\n| onChange           | 日期值改变时的回调<br><br>**签名**:<br>Function(value: MomentObject/String) => void<br>**参数**:<br>_value_: {MomentObject/String} 日期值                                      | Function  | func.noop   |\n| disabled           | 是否禁用                                                                                                                                                           | Boolean   | -           |\n| hasClear           | 是否显示清空按钮                                                                                                                                                       | Boolean   | true        |\n| visible            | 弹层显示状态                                                                                                                                                         | Boolean   | -           |\n| defaultVisible     | 弹层默认是否显示                                                                                                                                                       | Boolean   | -           |\n| onVisibleChange    | 弹层展示状态变化时的回调<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function  | func.noop   |\n| popupTriggerType   | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                     | Enum      | 'click'     |\n| popupAlign         | 弹层对齐方式, 具体含义见 OverLay文档                                                                                                                                        | String    | 'tl tl'     |\n| popupContainer     | 弹层容器<br><br>**签名**:<br>Function(target: Element) => Element<br>**参数**:<br>_target_: {Element} 目标元素<br>**返回值**:<br>{Element} 弹层的容器元素<br>                        | Function  | -           |\n| popupStyle         | 弹层自定义样式                                                                                                                                                        | Object    | -           |\n| popupClassName     | 弹层自定义样式类                                                                                                                                                       | String    | -           |\n| popupProps         | 弹层其他属性                                                                                                                                                         | Object    | -           |\n\n### DatePicker.RangePicker\n\n| 参数                  | 说明                                                                                                                                                             | 类型                   | 默认值                                                                                          |          |           |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------- | -------------------------------------------------------------------------------------------- | -------- | --------- |\n| size                | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                            | Enum                 | 'medium'                                                                                     |          |           |\n| defaultVisibleMonth | 默认展示的起始月份<br><br>**签名**:<br>Function() => MomentObject<br>**返回值**:<br>{MomentObject} 返回包含指定月份的 moment 对象实例<br>                                                 | Function             | -                                                                                            |          |           |\n| value               | 日期范围值数组 [moment, moment]                                                                                                                                       | Array                | -                                                                                            |          |           |\n| defaultValue        | 初始的日期范围值数组 [moment, moment]                                                                                                                                    | Array                | -                                                                                            |          |           |\n| format              | 日期格式                                                                                                                                                           | String               | 'YYYY-MM-DD'                                                                                 |          |           |\n| showTime            | 是否使用时间控件，支持传入 TimePicker 的属性                                                                                                                                   | Object/Boolean       | false                                                                                        |          |           |\n| resetTime           | 每次选择是否重置时间（仅在 showTime 开启时有效）                                                                                                                                  | Boolean              | false                                                                                        |          |           |\n| disabledDate        | 禁用日期函数<br><br>**签名**:<br>Function(日期值: MomentObject) => Boolean<br>**参数**:<br>_日期值_: {MomentObject} null<br>**返回值**:<br>{Boolean} 是否禁用<br>                     | Function             | () => false                                                                                  |          |           |\n| footerRender        | 自定义面板页脚<br><br>**签名**:<br>Function() => Node<br>**返回值**:<br>{Node} 自定义的面板页脚组件<br>                                                                              | Function             | () => null                                                                                   |          |           |\n| onChange            | 日期范围值改变时的回调 \\[ MomentObject                                                                                                                                    | String, MomentObject | String ]<br><br>**签名**:<br>Function(value: Array) => void<br>**参数**:<br>_value_: {Array} 日期值 | Function | func.noop |\n| onOk                | 点击确认按钮时的回调 返回开始时间和结束时间`[ MomentObject|String, MomentObject|String ]`<br><br>**签名**:<br>Function() => Array<br>**返回值**:<br>{Array} 日期范围<br>                     | Function             | func.noop                                                                                    |          |           |\n| label               | 输入框内置标签                                                                                                                                                        | ReactNode            | -                                                                                            |          |           |\n| state               | 输入框状态<br><br>**可选值**:<br>'error', 'success'                                                                                                                    | Enum                 | -                                                                                            |          |           |\n| disabled            | 是否禁用                                                                                                                                                           | Boolean              | -                                                                                            |          |           |\n| hasClear            | 是否显示清空按钮                                                                                                                                                       | Boolean              | true                                                                                         |          |           |\n| visible             | 弹层显示状态                                                                                                                                                         | Boolean              | -                                                                                            |          |           |\n| defaultVisible      | 弹层默认是否显示                                                                                                                                                       | Boolean              | -                                                                                            |          |           |\n| onVisibleChange     | 弹层展示状态变化时的回调<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function             | func.noop                                                                                    |          |           |\n| popupTriggerType    | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                     | Enum                 | 'click'                                                                                      |          |           |\n| popupAlign          | 弹层对齐方式, 具体含义见 OverLay文档                                                                                                                                        | String               | 'tl tl'                                                                                      |          |           |\n| popupContainer      | 弹层容器<br><br>**签名**:<br>Function(target: Element) => Element<br>**参数**:<br>_target_: {Element} 目标元素<br>**返回值**:<br>{Element} 弹层的容器元素<br>                        | Function             | -                                                                                            |          |           |\n| popupStyle          | 弹层自定义样式                                                                                                                                                        | Object               | -                                                                                            |          |           |\n| popupClassName      | 弹层自定义样式类                                                                                                                                                       | String               | -                                                                                            |          |           |\n| popupProps          | 弹层其他属性                                                                                                                                                         | Object               | -                                                                                            |          |           |\n\n### DatePicker.YearPicker\n\n| 参数               | 说明                                                                                                                                                             | 类型        | 默认值         |\n| ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ----------- |\n| label            | 输入框内置标签                                                                                                                                                        | ReactNode | -           |\n| size             | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                            | Enum      | 'medium'    |\n| state            | 输入框状态<br><br>**可选值**:<br>'success', 'error'                                                                                                                    | Enum      | -           |\n| placeholder      | 输入提示                                                                                                                                                           | String    | -           |\n| value            | 日期值（受控）moment 对象                                                                                                                                               | custom    | -           |\n| defaultValue     | 初始日期值，moment 对象                                                                                                                                                | custom    | -           |\n| format           | 日期值的格式（用于限定用户输入和展示）                                                                                                                                            | String    | 'YYYY'      |\n| disabledDate     | 禁用日期函数<br><br>**签名**:<br>Function(日期值: MomentObject) => Boolean<br>**参数**:<br>_日期值_: {MomentObject} null<br>**返回值**:<br>{Boolean} 是否禁用<br>                     | Function  | () => false |\n| footerRender     | 自定义面板页脚<br><br>**签名**:<br>Function() => Node<br>**返回值**:<br>{Node} 自定义的面板页脚组件<br>                                                                              | Function  | () => null  |\n| onChange         | 日期值改变时的回调<br><br>**签名**:<br>Function(value: MomentObject/String) => void<br>**参数**:<br>_value_: {MomentObject/String} 日期值                                      | Function  | func.noop   |\n| disabled         | 是否禁用                                                                                                                                                           | Boolean   | -           |\n| hasClear         | 是否显示清空按钮                                                                                                                                                       | Boolean   | true        |\n| visible          | 弹层显示状态                                                                                                                                                         | Boolean   | -           |\n| defaultVisible   | 弹层默认是否显示                                                                                                                                                       | Boolean   | -           |\n| onVisibleChange  | 弹层展示状态变化时的回调<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function  | func.noop   |\n| popupTriggerType | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                     | Enum      | 'click'     |\n| popupAlign       | 弹层对齐方式, 具体含义见 OverLay文档                                                                                                                                        | String    | 'tl tl'     |\n| popupContainer   | 弹层容器<br><br>**签名**:<br>Function(target: Element) => Element<br>**参数**:<br>_target_: {Element} 目标元素<br>**返回值**:<br>{Element} 弹层的容器元素<br>                        | Function  | -           |\n| popupStyle       | 弹层自定义样式                                                                                                                                                        | Object    | -           |\n| popupClassName   | 弹层自定义样式类                                                                                                                                                       | String    | -           |\n| popupProps       | 弹层其他属性                                                                                                                                                         | Object    | -           |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本用法","order":"0","jsx":"import { DatePicker } from '@alifd/next';\n\nconst { RangePicker, MonthPicker, YearPicker } = DatePicker;\nconst onChange = val => console.log(val);\n\nReactDOM.render(<div>\n    <DatePicker onChange={onChange} /> <br /><br />\n    <MonthPicker onChange={onChange} /> <br /><br />\n    <YearPicker onChange={onChange} /> <br /><br />\n    <RangePicker onChange={onChange} />\n</div>, mountNode);\n","css":"","body":"\n<p>最基本的用法。可以通过 <code>onChange</code> 监听选中值的变化。</p>\n"},{"title":"自定义日期范围选择","order":"8","jsx":"import { DatePicker } from '@alifd/next';\n\nclass CustomRangePicker extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            startValue: null,\n            endValue: null,\n            endOpen: false,\n        };\n    }\n\n    disabledStartDate = (startValue) => {\n        const { endValue } = this.state;\n        if (!startValue || !endValue) {\n            return false;\n        }\n        return startValue.valueOf() > endValue.valueOf();\n    }\n\n    disabledEndDate = (endValue) => {\n        const { startValue } = this.state;\n        if (!endValue || !startValue) {\n            return false;\n        }\n        return endValue.valueOf() <= startValue.valueOf();\n    }\n\n    onChange = (stateName, value) => {\n        this.setState({\n            [stateName]: value,\n        });\n    }\n\n    onStartChange = (value) => {\n        this.onChange('startValue', value);\n    }\n\n    onEndChange = value => {\n        this.onChange('endValue', value);\n    }\n\n    handleStartOpenChange = (open) => {\n        if (!open) {\n            this.setState({ endOpen: true });\n        }\n    }\n\n    handleEndOpenChange = (open) => {\n        this.setState({ endOpen: open });\n    }\n\n    render() {\n        const { endOpen } = this.state;\n        return (\n            <div>\n                <DatePicker\n                    disabledDate={this.disabledStartDate}\n                    placeholder=\"Departure Date\"\n                    onChange={this.onStartChange}\n                    onVisibleChange={this.handleStartOpenChange}\n                />\n                <span className=\"custom-sep\">-</span>\n                <DatePicker\n                    disabledDate={this.disabledEndDate}\n                    placeholder=\"Return Date\"\n                    onChange={this.onEndChange}\n                    visible={endOpen}\n                    onVisibleChange={this.handleEndOpenChange}\n                />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<div>\n    <CustomRangePicker />\n</div>, mountNode);\n","css":".custom-sep {\n    margin: 0 6px;\n    color: #999;\n}\n","body":"\n<p>如果默认的 RangePicker 在交互上无法满足您的使用需求，还可以基于 DatePicker 封装实现类似的功能。\n例如，示例中的日期选择可以自由的更改开始或结束日期，而不必每次选择时重置日期。</p>\n"},{"title":"面板的默认展现日期","order":"2","jsx":"import { DatePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst { RangePicker, MonthPicker } = DatePicker;\n\nfunction onVisibleMonthChange(val, reason) {\n    console.log(val.format('L'), reason);\n}\n\nReactDOM.render(<div>\n    <p>Setting last month as default visible month</p>\n    <DatePicker defaultVisibleMonth={() => moment().add(-1, 'months')} onVisibleMonthChange={onVisibleMonthChange} />\n    <br /><br />\n    <RangePicker defaultVisibleMonth={() => moment().add(-1, 'months')} onVisibleMonthChange={onVisibleMonthChange} />\n    <br /><br />\n    <p>Setting 2017 as default visible year</p>\n    <MonthPicker defaultVisibleYear={() => moment('2017', 'YYYY')} />\n</div>, mountNode);\n","css":"","body":"\n<p>可以通过 <code>defaultVisibleMonth</code> 或 <code>defaultVisibleYear</code> 属性可以修改面板的默认展现日期。</p>\n"},{"title":"提供默认值","order":"1","jsx":"import { DatePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst { RangePicker, MonthPicker, YearPicker } = DatePicker;\nconst startValue = moment('2017-11-20', 'YYYY-MM-DD', true);\nconst endValue = moment('2017-12-15', 'YYYY-MM-DD', true);\nconst onChange = val => console.log(val);\n\nReactDOM.render(<div>\n    <DatePicker defaultValue={startValue} onChange={onChange} /><br /><br />\n    <MonthPicker defaultValue={startValue} onChange={onChange} /><br /><br />\n    <YearPicker defaultValue={startValue} onChange={onChange} /><br /><br />\n    <RangePicker defaultValue={[startValue, endValue]} onChange={onChange} />\n</div>, mountNode);\n","css":"","body":"\n<p>可以通过 <code>defaultValue</code> 属性为日期选择器提供初值，所提供的初值必须为 moment 对象。</p>\n"},{"title":"禁止选择某些日期","order":"4","jsx":"import { DatePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst { RangePicker, MonthPicker, YearPicker } = DatePicker;\nconst currentDate = moment();\n\n// Disable all dates before today\nconst disabledDate = function (date) {\n    return date.valueOf() <= currentDate.valueOf();\n};\n\nReactDOM.render(<div>\n    <DatePicker disabledDate={disabledDate} onChange={val => console.log(val)} /><br /><br />\n    <MonthPicker disabledDate={disabledDate} onChange={val => console.log(val)} /><br /><br />\n    <YearPicker disabledDate={disabledDate} onChange={val => console.log(val)} /><br /><br />\n    <RangePicker disabledDate={disabledDate} onChange={val => console.log(val)} />\n</div>, mountNode);\n","css":"","body":"\n<p>可以通过 <code>disabledDate</code> 属性来禁止用户选择或输入某些特定日期。</p>\n"},{"title":"禁用日期选择","order":"6","jsx":"import { DatePicker } from '@alifd/next';\n\nconst { RangePicker } = DatePicker;\n\nReactDOM.render(<div>\n    <DatePicker disabled />&nbsp;&nbsp;<RangePicker disabled />\n</div>, mountNode);\n","css":"","body":"\n<p>当开启 <code>disabled</code> 属性时，选择框处于完全禁用状态。</p>\n"},{"title":"与 Field 结合","order":"12","jsx":"import { DatePicker, Field, Button } from '@alifd/next';\n\nconst { RangePicker, YearPicker, MonthPicker } = DatePicker;\n\nclass App extends React.Component {\n\n    field = new Field(this);\n\n    printData = () => {\n        this.field.validate((err, values) => {\n\n            if (err) {\n                console.error('Error: ', err);\n                return;\n            }\n\n            console.log('datepicker: %s', values.date.format('YYYY-MM-DD'));\n            console.log('monthpicker: %s', values.month.format('YYYY-MM'));\n            console.log('yearpicker: %s', values.year.format('YYYY'));\n            const range = values.range;\n            console.log('rangepicker: [%s, %s]', range[0] && range[0].format('YYYY-MM-DD'), range[1] && range[1].format('YYYY-MM-DD'));\n        });\n    }\n\n    printError = (name) => {\n        if (this.field.getError(name)) {\n            return <span className=\"error-msg\">{this.field.getError(name).join(',')}</span>;\n        }\n    }\n\n    render() {\n        const init = this.field.init;\n\n        return (\n            <div>\n                <DatePicker {...init('date', { rules: [ {\n                    required: true,\n                    message: '请选择日期',\n                } ] })} />{this.printError('date')}<br /><br />\n                <MonthPicker {...init('month', { rules: [ {\n                    required: true,\n                    message: '请选择月份',\n                } ]  })} />{this.printError('month')}<br /><br />\n                <YearPicker {...init('year', { rules: [ {\n                    required: true,\n                    message: '请选择年份',\n                } ]  })} />{this.printError('year')}<br /><br />\n                <RangePicker {...init('range', { rules: [ {\n                    required: true,\n                    message: '请选择日期范围',\n                } ]  })} />{this.printError('range')}<br /><br />\n                <Button onClick={this.printData}>Print to Console</Button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":".error-msg {\n    color: #E72B00;\n    font-size: 12px;\n}\n","body":"\n<p>与 Field 结合使用，简单示范自定义返回值</p>\n"},{"title":"自定义面板页脚","order":"11","jsx":"import { DatePicker } from '@alifd/next';\n\nconst { RangePicker } = DatePicker;\n\nfunction footerRender() {\n    return <div className=\"custom-footer\">👍 Some useful info here</div>;\n}\n\nReactDOM.render(<div>\n    <DatePicker footerRender={footerRender}  />&nbsp;&nbsp;\n    <RangePicker footerRender={footerRender} />\n</div>, mountNode);\n","css":".custom-footer {\n    padding: 12px;\n    font-size: 12px;\n    border-top: 1px solid #DCDEE3;\n}\n","body":"\n<p>可以通过 <code>footerRender</code> 自定义对面板页脚的定制。</p>\n"},{"title":"日期格式","order":"7","jsx":"import { DatePicker } from '@alifd/next';\n\nconst { RangePicker } = DatePicker;\nconst onChange = val => console.log(val);\n\nReactDOM.render(<div>\n    <DatePicker format=\"YYYY-M-D\" onChange={onChange} />\n    <br /><br />\n    <DatePicker format=\"YYYY-M-D\" onChange={onChange} showTime={{ format: 'HH:mm' }} />\n    <br /><br />\n    <RangePicker format=\"YYYY-M-D\" onChange={onChange} />\n    <br /><br />\n    <RangePicker format=\"YYYY-M-D\" onChange={onChange} showTime={{ format: 'HH:mm' }} />\n</div>, mountNode);\n","css":"","body":"\n<p>通过 <code>format</code> 属性可以约束日期选择器的日期格式，该格式同时会限定用户的输入格式。</p>\n"},{"title":"自定义日期选择器弹层","order":"10","jsx":"import { DatePicker } from '@alifd/next';\n\nconst { RangePicker } = DatePicker;\n\nReactDOM.render(<div>\n    <p>Change popup align</p>\n    <DatePicker popupAlign=\"bl tl\"  />\n    <p>Change popup container</p>\n    <RangePicker popupContainer={target => target.parentNode} />\n</div>, mountNode);\n","css":"","body":"\n<p>组件对外透出了 <code>visible</code>, <code>defaultVisible</code>, <code>onVisibleChange</code>, <code>popupTriggerType</code>, <code>popupAlign</code>, <code>popupContainer</code>, <code>popupStyle</code>, <code>popupClassName</code> 等属性用于直接定制弹层。此外，如果这些属性仍然无法满足需求，可以通过 <code>popupProps</code> 进行透传。</p>\n"},{"title":"日期时间选择","order":"5","jsx":"import { DatePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst { RangePicker } = DatePicker;\nconst onChange = (value) => console.log(value);\nconst onOk = (value) => console.log('onOK:', value.format('YYYY-MM-DD HH:mm:ss'));\nconst onRangeOk = (value) => console.log('onOk: [%s, %s]', value[0].format('YYYY-MM-DD HH:mm:ss'), value[1].format('YYYY-MM-DD HH:mm:ss'));\n\nconst defaultTimeValue = moment('09:00:00', 'HH:mm:ss', true);\n\nReactDOM.render(<div>\n    <p>DatePicker With Time</p>\n    <DatePicker showTime onChange={onChange} onOk={onOk} />\n    <p>DatePicker with Time, reset 00:00:00 for every select</p>\n    <DatePicker showTime onChange={onChange} onOk={onOk} resetTime />\n    <p>DatePicker with Time, with default time value</p>\n    <DatePicker showTime={{ defaultValue: defaultTimeValue, secondStep: 10 }} onChange={onChange} onOk={onOk} />\n    <p>RangePicker with Time</p>\n    <RangePicker showTime onChange={onChange} onOk={onRangeOk} />\n    <p>RangePicker with Time, reset 00:00:00 for every select</p>\n    <RangePicker showTime resetTime onChange={onChange} onOk={onRangeOk} />\n    <p>RangePicker with Time, with default time value, hide seconds</p>\n    <RangePicker showTime={{ defaultValue: defaultTimeValue, format: 'HH:mm', minuteStep: 15 }} onChange={onChange} onOk={onRangeOk} />\n</div>, mountNode);\n","css":"","body":"\n<p>如果需要同时选择时间，可以通过 <code>showTime</code> 属性开启，<code>showTime</code> 支持传入 TimePickerPanel 的属性，例如 <code>format</code>, <code>defaultValue</code> 等。</p>\n"},{"title":"不同尺寸","order":"3","jsx":"import { DatePicker } from '@alifd/next';\n\nReactDOM.render(<div>\n    <DatePicker size=\"large\" /> &nbsp;&nbsp;\n    <DatePicker /> &nbsp;&nbsp;\n    <DatePicker size=\"small\" />\n</div>, mountNode);\n","css":"","body":"\n<p>通过 <code>size</code> 属性可以改变 Input 组件的尺寸，默认为 <code>medium</code>。</p>\n"}]},{"name":"Dialog","category":"Components","title":"弹窗","type":"弹层","importStatement":"import { Dialog } from '@alifd/next';","body":"\n## 使用指南\n\n对话框\n\n### 何时使用\n\n对话框是用于在不离开主路径的情况下，提供用户快速执行简单的操作、确认用户信息或反馈提示的辅助窗口。\n\n API\n\n### Dialog\n\n| 参数                   | 说明                                                                                                                                                                                                               | 类型                | 默认值                                                                               |\n| -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------- | --------------------------------------------------------------------------------- |\n| visible              | 是否显示                                                                                                                                                                                                             | Boolean           | false                                                                             |\n| title                | 标题                                                                                                                                                                                                               | ReactNode         | -                                                                                 |\n| children             | 内容                                                                                                                                                                                                               | ReactNode         | -                                                                                 |\n| footer               | 底部内容，设置为 false，则不进行显示                                                                                                                                                                                            | Boolean/ReactNode | [&lt;Button type=\"primary\"&gt;确定&lt;/Button&gt;, &lt;Button&gt;取消&lt;/Button&gt;] |\n| footerAlign          | 底部按钮的对齐方式<br><br>**可选值**:<br>'left', 'center', 'right'                                                                                                                                                           | Enum              | 'right'                                                                           |\n| footerActions        | 指定确定按钮和取消按钮是否存在以及如何排列,<br><br>**可选值**：<br>['ok', 'cancel']（确认取消按钮同时存在，确认按钮在左）<br>['cancel', 'ok']（确认取消按钮同时存在，确认按钮在右）<br>['ok']（只存在确认按钮）<br>['cancel']（只存在取消按钮）                                                   | Array             | ['ok', 'cancel']                                                                  |\n| onOk                 | 在点击确定按钮时触发的回调函数<br><br>**签名**:<br>Function(event: Object) => void<br>**参数**:<br>_event_: {Object} 点击事件对象                                                                                                         | Function          | () => {}                                                                          |\n| onCancel             | 在点击取消按钮时触发的回调函数<br><br>**签名**:<br>Function(event: Object) => void<br>**参数**:<br>_event_: {Object} 点击事件对象                                                                                                         | Function          | () => {}                                                                          |\n| okProps              | 应用于确定按钮的属性对象                                                                                                                                                                                                     | Object            | {}                                                                                |\n| cancelProps          | 应用于取消按钮的属性对象                                                                                                                                                                                                     | Object            | {}                                                                                |\n| closeable            | 控制对话框关闭的方式，值可以为字符串或者布尔值，其中字符串是由以下值组成：<br>**close** 表示点击关闭按钮可以关闭对话框<br>**mask** 表示点击遮罩区域可以关闭对话框<br>**esc** 表示按下 esc 键可以关闭对话框<br>如 'close' 或 'close,esc,mask'<br>如果设置为 true，则以上关闭方式全部生效<br>如果设置为 false，则以上关闭方式全部失效 | String/Boolean    | 'esc,close'                                                                       |\n| onClose              | 对话框关闭时触发的回调函数<br><br>**签名**:<br>Function(trigger: String, event: Object) => void<br>**参数**:<br>_trigger_: {String} 关闭触发行为的描述字符串<br>_event_: {Object} 关闭时事件对象                                                     | Function          | () => {}                                                                          |\n| afterClose           | 对话框关闭后触发的回调函数, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void                                                                                                                                              | Function          | () => {}                                                                          |\n| hasMask              | 是否显示遮罩                                                                                                                                                                                                           | Boolean           | true                                                                              |\n| animation            | 显示隐藏时动画的播放方式                                                                                                                                                                                                     | Object/Boolean    | {     in: 'fadeInDown',     out: 'fadeOutUp' }                                    |\n| autoFocus            | 对话框弹出时是否自动获得焦点                                                                                                                                                                                                   | Boolean           | false                                                                             |\n| align                | 对话框对齐方式, 具体见Overlay文档                                                                                                                                                                                            | String/Boolean    | 'cc cc'                                                                           |\n| isFullScreen         | 当对话框高度超过浏览器视口高度时，是否显示所有内容而不是出现滚动条以保证对话框完整显示在浏览器视口内，该属性仅在对话框垂直水平居中时生效，即 align 被设置为 'cc cc' 时                                                                                                                      | Boolean           | false                                                                             |\n| shouldUpdatePosition | 是否在对话框重新渲染时及时更新对话框位置，一般用于对话框高度变化后依然能保证原来的对齐方式                                                                                                                                                                    | Boolean           | false                                                                             |\n| minMargin            | 对话框距离浏览器顶部和底部的最小间距，align 被设置为 'cc cc' 并且 isFullScreen 被设置为 true 时不生效                                                                                                                                             | Number            | 40                                                                                |\n| overlayProps         | 透传到弹层组件的属性对象                                                                                                                                                                                                     | Object            | {}                                                                                |\n\n<!-- api-extra-start -->\n\n### Dialog.alert(config)/Dialog.confirm(config)\n\n以下只列举 config 可以传入的常用属性，Dialog 组件的其他属性也可以传入\n\n| 属性           | 说明                | 类型        | 默认值      |\n| :----------- | :---------------- | :-------- | :------- |\n| title        | 标题                | ReactNode | ''       |\n| content      | 内容                | ReactNode | ''       |\n| onOk         | 在点击确定按钮时触发的回调函数   | Function  | () => {} |\n| onCancel     | 在点击取消按钮时触发的回调函数   | Function  | () => {} |\n| messageProps | 内嵌 Message 组件属性对象 | Object    | {}       |\n\n### Dialog.show\n\n以下只列举 config 可以传入的常用属性，Dialog 组件其他属性也可以传入\n\n| 属性       | 说明              | 类型        | 默认值      |\n| :------- | :-------------- | :-------- | :------- |\n| title    | 标题              | ReactNode | ''       |\n| content  | 内容              | ReactNode | ''       |\n| onOk     | 在点击确定按钮时触发的回调函数 | Function  | () => {} |\n| onCancel | 在点击取消按钮时触发的回调函数 | Function  | () => {} |\n\n<!-- api-extra-end -->\n\n## 常见问题\n\n### 对话框高度变化，保持居中\n\nDialog 组件默认使用 JS 进行定位，当内容过长时使用 JS 自动调整对话框高度，以使得操作按钮在可视区域内出现，但是这会造成在对话框高度发生变化时无法感知重新使用 JS 定位，有下面两种解决方案：\n\n1.  设置 `shouldUpdatePosition`，在内容更新后，会重新进行定位。\n\n2.  使用 `isFullScreen`，启动 CSS 进行定位，无论对话框高度如何变化都能自适应居中，但是当内容过长时无法让操作按钮在可视区域内出现。\n\n## ARIA and Keyboard\n\n| 键盘        | 说明                                       |\n| :-------- | :--------------------------------------- |\n| esc       | 按下ESC键将会关闭dialog而不触发任何的动作                |\n| tab       | 正向聚焦到任何可以被聚焦的元素， 在Dialog显示的时候，焦点始终保持在框体内 |\n| shift+tab | 反向聚焦到任何可以被聚焦的元素，在Dialog显示的时候，焦点始终保持在框体内  |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Button, Dialog } from '@alifd/next';\n\n\nclass Demo extends React.Component {\n    state = {\n        visible: false\n    };\n\n    onOpen = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    onClose = reason => {\n        console.log(reason);\n\n        this.setState({\n            visible: false\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.onOpen} type=\"primary\">\n                    Open dialog\n                </Button>\n                <Dialog\n                    title=\"Welcome to Alibaba.com\"\n                    visible={this.state.visible}\n                    onOk={this.onClose.bind(this, 'okClick')}\n                    onCancel={this.onClose.bind(this, 'cancelClick')}\n                    onClose={this.onClose}>\n                    Start your business here by searching a popular product\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>第一个对话框</p>\n"},{"title":"自定义底部","order":"2","jsx":"import { Button, Dialog } from '@alifd/next';\n\n\nclass Demo extends React.Component {\n    state = {\n        visible: false\n    };\n\n    onOpen = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.onOpen} type=\"primary\">\n                    Open dialog\n                </Button>\n                <Dialog\n                    title=\"Welcome to Alibaba.com\"\n                    footer={<Button warning type=\"primary\" onClick={this.onClose}>Customize footer</Button>}\n                    visible={this.state.visible}\n                    onOk={this.onClose}\n                    onCancel={this.onClose}\n                    onClose={this.onClose}>\n                    Start your business here by searching a popular product\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>默认的 footer 为确定取消两个按钮，你可以自定义 footer 的内容。</p>\n"},{"title":"定制底部按钮","order":"1","jsx":"import { Button, Radio, Dialog } from '@alifd/next';\n\n\nclass Demo extends React.Component {\n    state = {\n        visible: false,\n        footerActions: ['ok', 'cancel'],\n        footerAlign: 'right'\n    };\n\n    onOpen = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    };\n\n    toggleFooterActions = footerActionsStr => {\n        this.setState({\n            footerActions: footerActionsStr.split(',')\n        });\n    };\n\n    toggleFooterAlign = footerAlign => {\n        this.setState({\n            footerAlign\n        });\n    };\n\n    render() {\n        const { visible, footerActions, footerAlign } = this.state;\n\n        return (\n            <div>\n                <Button onClick={this.onOpen} type=\"primary\">\n                    Open dialog\n                </Button>\n                <Dialog title=\"Customize buttons of footer\"\n                    visible={visible}\n                    footerActions={footerActions}\n                    footerAlign={footerAlign}\n                    onOk={this.onClose}\n                    onCancel={this.onClose}\n                    onClose={this.onClose}>\n                    <div className=\"demo-content\">\n                        <Radio.Group className=\"demo-radio-group\" shape=\"button\" value={footerActions.join(',')} onChange={this.toggleFooterActions}>\n                            <Radio value=\"ok,cancel\">ok is left</Radio>\n                            <Radio value=\"cancel,ok\">ok is right</Radio>\n                            <Radio value=\"ok\">only ok</Radio>\n                            <Radio value=\"cancel\">only cancel</Radio>\n                        </Radio.Group>\n                        <Radio.Group className=\"demo-radio-group\" shape=\"button\" value={footerAlign} onChange={this.toggleFooterAlign}>\n                            <Radio value=\"left\">left</Radio>\n                            <Radio value=\"center\">center</Radio>\n                            <Radio value=\"right\">right</Radio>\n                        </Radio.Group>\n                    </div>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".demo-content {\n    padding: 10px;\n    border: 2px dashed #ddd;\n    background: #F8F8F8;\n}\n\n.demo-radio-group {\n    display: block;\n}\n\n.demo-radio-group + .demo-radio-group  {\n    margin-top: 10px;\n}\n","body":"\n<p>通过 footerActions 来调整确定按钮和取消按钮是否出现以及相互间的位置，通过 footerAlign 来调整底部按钮的对齐方式。</p>\n"},{"title":"内容较多的对话框","order":"4","jsx":"import { Switch, Button, Dialog } from '@alifd/next';\n\n\nconst largeContent = new Array(30).fill(\n    <p>Start your business here by searching a popular product</p>\n);\n\nclass Demo extends React.Component {\n    state = {\n        visible: false,\n        isFullScreen: false\n    };\n\n    onOpen = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    };\n\n    toggleIsFullScreen = () => {\n        this.setState({\n            isFullScreen: !this.state.isFullScreen\n        });\n    }\n\n    render() {\n        const { visible, isFullScreen } = this.state;\n\n        return (\n            <div>\n                <div style={{ display: 'block', marginBottom: '10px' }}>\n                    When the height of the dialog exceeds the viewport height of the browser, whether to show the scroll bar:\n                </div>\n                <Switch style={{ display: 'block', marginBottom: '10px' }} checked={isFullScreen} onChange={this.toggleIsFullScreen} />\n                <Button onClick={this.onOpen} type=\"primary\">\n                    Open dialog\n                </Button>\n                <Dialog title=\"Welcome to Alibaba.com\"\n                    visible={visible}\n                    isFullScreen={isFullScreen}\n                    onOk={this.onClose}\n                    onCancel={this.onClose}\n                    onClose={this.onClose}>\n                    {largeContent}\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n"},{"title":"延迟关闭","order":"6","jsx":"import { Button, Message, Dialog } from '@alifd/next';\n\n\nconst popupConfirm = () => {\n    Dialog.confirm({\n        title: 'Confirm',\n        content: 'Do you confirm deleting this content?',\n        onOk: () => {\n            return new Promise(resolve => {\n                setTimeout(resolve, 2000);\n            }).then(() => {\n                Message.success('Deleted successfully!');\n            });\n        }\n    });\n};\n\nReactDOM.render(<Button type=\"primary\" warning onClick={popupConfirm}>Delete</Button>, mountNode);\n","css":"","body":"\n<p>在使用 Dialog.alert，Dialog.confirm 以及 Dialog.show 时，如果 onOk 返回 Promise，对话框会在 Promise resolve 时关闭，除非调用 <code>resolve(false)</code>。</p>\n"},{"title":"快捷调用","order":"5","jsx":"import { Button, Dialog, ConfigProvider } from '@alifd/next';\n\n\nconst popupAlert = () => {\n    Dialog.alert({\n        title: 'Alert',\n        content: 'alert content alert content...',\n        onOk: () => console.log('ok')\n    });\n};\n\nconst popupConfirm = () => {\n    Dialog.confirm({\n        title: 'Confirm',\n        content: 'confirm content confirm content...',\n        onOk: () => console.log('ok'),\n        onCancel: () => console.log('cancel')\n    });\n};\n\nconst popupCustom = () => {\n    const dialog = Dialog.show({\n        title: 'Custom',\n        content: 'custom content custom content...',\n        footer: (\n            <Button warning type=\"primary\" onClick={() => dialog.hide()}>\n                Custom button\n            </Button>\n        )\n    });\n};\n\nReactDOM.render(\n    <ConfigProvider locale={{ Dialog: { ok: 'OK', cancel: 'Cancel' } }}>\n        <span>\n            <Button onClick={popupAlert}>Alert</Button> &nbsp;\n            <Button onClick={popupConfirm}>Confirm</Button> &nbsp;\n            <Button onClick={popupCustom}>Custom</Button>\n        </span>\n    </ConfigProvider>,\n    mountNode\n);\n","css":"","body":"\n<p>Dialog 提供 alert 和 confirm 的快掉调用方式，以及更底层的 show 方式。</p>\n"},{"title":"更新位置","order":"3","jsx":"import { Switch, Button, Dialog } from '@alifd/next';\n\n\nconst shortContent = <p>Start your business here by searching a popular product</p>;\nconst longContent = [\n    <p key=\"0\">Start your business here by searching a popular product</p>,\n    <p key=\"1\">Start your business here by searching a popular product</p>,\n    <p key=\"2\">Start your business here by searching a popular product</p>,\n    <p key=\"3\">Start your business here by searching a popular product</p>\n];\n\nclass App extends React.Component {\n    state = {\n        visible: false,\n        short: true,\n        shouldUpdatePosition: true\n    }\n\n    onOpen = () => {\n        this.setState({\n            visible: true,\n            short: true\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    };\n\n    toggleShouldUpdatePosition = () => {\n        this.setState({\n            shouldUpdatePosition: !this.state.shouldUpdatePosition\n        });\n    };\n\n    modifyContent = () => {\n        this.setState({\n            short: !this.state.short\n        });\n    };\n\n    render() {\n        const { visible, short, shouldUpdatePosition } = this.state;\n\n        return (\n            <div>\n                <div style={{ display: 'block', marginBottom: '10px' }}>\n                    Whether to update the dialog position when the dialog height changes:\n                </div>\n                <Switch style={{ display: 'block', marginBottom: '10px' }} checked={shouldUpdatePosition} onChange={this.toggleShouldUpdatePosition} />\n                <Button onClick={this.onOpen} type=\"primary\">\n                    Open dialog\n                </Button>\n                <Dialog title=\"Welcome to Alibaba.com\"\n                    visible={visible}\n                    onOk={this.onClose.bind(this, 'okClick')}\n                    onCancel={this.onClose.bind(this, 'cancelClick')}\n                    onClose={this.onClose}\n                    shouldUpdatePosition={shouldUpdatePosition}>\n                    <Button type=\"primary\" onClick={this.modifyContent}>\n                        Change content\n                    </Button>\n                    {short ? shortContent : longContent}\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>通过设置 shouldUpdatePosition 为 true 来及时更新对话框的位置，一般用于对话框内容发生变化但是仍然要保证原来对齐方式的情况</p>\n"}]},{"name":"Dropdown","category":"Components","title":"下拉菜单","type":"弹层","importStatement":"import { Dropdown } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。\n\n API\n\n### Dropdown\n\n> 继承 Popup 的 API，除非特别说明\n\n| 参数              | 说明                                                                                                                                                                                              | 类型             | 默认值                                        |\n| --------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | ------------------------------------------ |\n| children        | 弹层内容                                                                                                                                                                                            | ReactNode      | -                                          |\n| visible         | 弹层当前是否显示                                                                                                                                                                                        | Boolean        | -                                          |\n| defaultVisible  | 弹层默认是否显示                                                                                                                                                                                        | Boolean        | false                                      |\n| onVisibleChange | 弹层显示或隐藏时触发的回调函数<br><br>**签名**:<br>Function(visible: Boolean, type: String, e: Object) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_type_: {String} 触发弹层显示或隐藏的来源<br>_e_: {Object} DOM事件 | Function       | func.noop                                  |\n| trigger         | 触发弹层显示或者隐藏的元素                                                                                                                                                                                   | ReactNode      | -                                          |\n| triggerType     | 触发弹层显示或隐藏的操作类型<br><br>**可选值**:<br>'hover', 'click', 'focus'                                                                                                                                     | Enum           | 'hover'                                    |\n| disabled        | 设置此属性，弹层无法显示或隐藏                                                                                                                                                                                 | Boolean        | false                                      |\n| align           | 弹层相对于触发元素的定位, 详见 Overlay 的定位部分                                                                                                                                                                  | String         | 'tl bl'                                    |\n| offset          | 弹层相对于触发元素定位的微调                                                                                                                                                                                  | Array          | [0, 0]                                     |\n| delay           | 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效                                                                                                                                               | Number         | 200                                        |\n| autoFocus       | 弹层打开时是否让其中的元素自动获取焦点                                                                                                                                                                             | Boolean        | true                                       |\n| hasMask         | 是否显示遮罩                                                                                                                                                                                          | Boolean        | false                                      |\n| cache           | 隐藏时是否保留子节点                                                                                                                                                                                      | Boolean        | false                                      |\n| animation       | 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画                                                                                                                 | Object/Boolean | { in: 'expandInDown', out: 'expandOutUp' } |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Dropdown, Menu } from '@alifd/next';\n\nconst menu = (\n    <Menu>\n        <Menu.Item>Option 1</Menu.Item>\n        <Menu.Item>Option 2</Menu.Item>\n        <Menu.Item>Option 3</Menu.Item>\n        <Menu.Item>Option 4</Menu.Item>\n    </Menu>\n);\n\nReactDOM.render(\n    <Dropdown trigger={<a>Hello dropdown</a>} afterOpen={() => console.log('after open')}>\n        {menu}\n    </Dropdown>, mountNode);\n","css":"","body":"\n<p>最简单的用法。</p>\n"},{"title":"从弹层外关闭","order":"2","jsx":"import { Dropdown, Menu, Button } from '@alifd/next';\n\nconst menu = (\n    <Menu>\n        <Menu.Item>Option 1</Menu.Item>\n        <Menu.Item>Option 2</Menu.Item>\n        <Menu.Item>Option 3</Menu.Item>\n        <Menu.Item>Option 4</Menu.Item>\n    </Menu>\n);\n\nclass App extends React.Component {\n    state = {\n        visible: false\n    };\n\n    toggleVisible = () => {\n        this.setState({\n            visible: !this.state.visible\n        });\n    };\n\n    onVisibleChange = visible => {\n        this.setState({\n            visible\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <div style={{ marginBottom: '20px' }}>\n                    <Button onClick={this.toggleVisible} ref=\"button\">Toggle Overlay</Button>\n                </div>\n                <Dropdown trigger={<span>Hello dropdown</span>}\n                    triggerType=\"click\"\n                    visible={this.state.visible}\n                    onVisibleChange={this.onVisibleChange}\n                    safeNode={() => this.refs.button}>\n                    {menu}\n                </Dropdown>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>使用 visible 属性控制弹层显示或者隐藏，需要使用 safeNode 将其控制的元素告诉 dropdown 组件。</p>\n"},{"title":"触发的事件类型","order":"1","jsx":"import { Dropdown, Menu } from '@alifd/next';\n\nconst menu = (\n    <Menu>\n        <Menu.Item>Option 1</Menu.Item>\n        <Menu.Item>Option 2</Menu.Item>\n        <Menu.Item>Option 3</Menu.Item>\n        <Menu.Item>Option 4</Menu.Item>\n    </Menu>\n);\n\nReactDOM.render(\n    <Dropdown trigger={<a>Click me</a>} triggerType=\"click\">\n        {menu}\n    </Dropdown>, mountNode);\n","css":"","body":"\n<p>使用 triggerType 设置触发的事件类型。</p>\n"}]},{"name":"Field","category":"Components","title":"表单辅助工具","type":"表单","importStatement":"import { Field } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n涉及到表单数据操作、校验的地方都可以用Field来管理数据。和组件关联后可以自动对表单数据进行回写、读取、校验。\n\n### 使用注意\n\n- 使用Field `init` 过的组件, `value` `onChange` 必须放在 init 的第三个参数, 否则有可能被 init 覆盖。\n- `Form`已经和`Field` 在`数据获取`和`自动校验提示`方面做了深度优化，建议在`Form`中使用`Field`, 请查看 Form demo。\n- initValue 类似组件的 defaultValue 只有在组件第一次render的时候才生效(ajax 异步调用设置 initValue 可能已经错过了第一次render)\n- autoUnmount 默认打开的，如果需要保留会 `自动卸载的组件` 数据请关闭此项\n\n### 基本使用\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);    // 实例创建\n\n    onClick = ()=>{\n        console.log(this.field.getValue('name'));\n    }\n    render() {\n        const init = this.field.init;\n\n        // 注意：initValue只会在组件第一次初始化的时候被赋值，如果你是异步赋值请用setValue\n        return <div>\n            <Input {...init('name',{initValue:'first value'})} />\n            <button onClick={this.onClick>获取数据</button>\n        </div>\n    }\n}\n```\n\n### 更新数据\n#### 事件更新\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    onClick = ()=>{\n        this.field.setValue('name', 'newvalue');    // 赋值会自动触发render\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n            <button onClick={this.onClick}>设置数据</button>\n        </div>\n    }\n}\n```\n\n#### props更新\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    // 在组件挂载之前把数据设置进去(可以用initValue替代这种用法)\n    componentWillMount() {\n        this.field.setValue('name', 'init Name')\n    }\n    // 接收来自props的数据\n    componentWillReceiveProps(nextProps) {\n        this.field.setValue('name', nextProps.name)\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n        </div>\n    }\n}\n```\n\n#### ajax更新\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    onClick = ()=>{\n        Ajax({\n            url:'/demo.json',\n            success:(json)=>{\n                // 回调事件中赋值更新\n                this.field.setValue('name',json.name);\n            }\n        });\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n            <button onClick={this.onClick}>设置数据</button>\n        </div>\n    }\n}\n```\n\n#### onChange更新监控\n两种用法：\n1. 统一管理\n\n```\nclass Demo extends React.Component {\n    field = new Field(this,{\n        onChange:(name, value) => {\n          switch(name) {\n            case 'name1':\n              this.field.setValue('name2','value set by name1');\n              break;\n            case 'name2':\n              this.field.setValue('name1','value set by name2');\n              break;\n          }\n        }\n    });\n    render() {\n        const init = this.field.init;\n\n        return <div>\n          <Input {...init('name1')} />\n          <Input {...init('name2')} />\n        </div>\n    }\n}\n```\n\n2. 各自管理\n\n```\nclass Demo extends React.Component {\n    render() {\n        const init = this.field.init;\n\n        return <div>\n          <Input {...init('name1',{\n              props:{\n                onChange:(v)=>{\n                  this.field.setValue('name2','value set by name1');\n                }\n              }\n            })} />\n          <Input {...init('name2',{\n              props:{\n                onChange:(v)=>{\n                  this.field.setValue('name1','value set by name2');\n                }\n              }\n            })} />\n        </div>\n    }\n}\n```\n\n详细请查看demo演示 `关联控制`\n\n API\n\n### 初始化\n```\nlet myfield = new Field(this [,options]);\n```\n\n| 参数      | 说明                                     | 类型       |  可选值 |默认值 |\n|-----------|------------------------------------------|------------|-------|--------|\n| this | 传入调用class的this | React.Component | 必须设置| |\n| options | 一些事件配置, 详细参数如下 | Object | 非必须| |\n\n`options` 配置项\n\n| 参数      | 说明                                     | 类型        |默认值 |\n|-----------|------------------------------------------|-----------|--------|\n| onChange | 所有组件的change都会到达这里[setValue不会触发该函数] | Function(name,value) | |\n| parseName | 是否翻译`init(name)`中的`name`(getValues会把带`.`的字符串转换成对象) | Boolean | false|\n| forceUpdate | 仅建议PureComponent的组件打开此强制刷新功能，会带来性能问题(500个组件为例：打开的时候render花费700ms, 关闭时候render花费400ms) | Boolean  |false|\n| scrollToFirstError | field.validate的时候滚动到第一个出错的组件, 如果是整数会进行偏移 | Boolean/Number  |true|\n| autoUnmount | 自动删除Unmout元素，如果想保留数据可以设置为false | Boolean  |true|\n| values | 初始化数据 | Object ||\n\n#### API接口\n`new`之后的对象提供的api接口 （例：`myfield.getValues()`）(`set` 开头的api函数不要在render里面操作, 可能会触发死循环)\n\n| 参数      | 说明                                     | 类型       |  可选值 |默认值 |\n|-----------|------------------------------------------|------------|-------|--------|\n| init  | 初始化每个组件，[详细参数如下](#init)）| Function(name:String, option:Object)| | |\n| getValues | 获取一组输入控件的值，如不传入参数，则获取全部组件的值 | Function([names: String[]]) | | |\n| getValue | 获取单个输入控件的值 | Function(name: String) | | |\n| setValues | 设置一组输入控件的值（会触发render，请遵循react时机使用) | Function(obj: Object) | | |\n| setValue | 设置单个输入控件的值 （会触发render，请遵循react时机使用)| Function(name: String, value) | | |\n| validate | 校验并获取一组输入域的值与 Error | Function([names: String[]], [options: Object], callback: Function(errors, values)) | | |\n| getError | 获取单个输入控件的 Error | Function(name: String) | | |\n| getErrors | 获取一组输入控件的 Error | Function([name: String]) | | |\n| setError | 设置单个输入控件的 Error | Function(name: String, errors:String/Array[String]) | | |\n| setErrors | 设置一组输入控件的 Error | Function(obj: Object) | | |\n| reset  | 重置一组输入控件的值、清空校验 | Function([names: String[]])| ||\n| resetToDefault  | 重置一组输入控件的值为默认值 | Function([names: String[]])| ||\n| getState  | 判断校验状态 | Function(name: String)| 'error' 'success' 'loading' '' | '' |\n| getNames  | 获取所有组件的key | Function()|  |  |\n| remove  | 删除某一个或者一组控件的数据，删除后与之相关的validate/value都会被清空 | Function(name: String/String[])|  |  |\n\n\n#### init\n```\ninit(name, options, props)\n```\n\n| 参数      | 说明                                     | 类型       |  可选值 |默认值 |\n|-----------|------------------------------------------|------------|-------|--------|\n| name | 必填输入控件唯一标志 | String | |  |\n| options.valueName | 组件值的属性名称，如 Checkbox 的是 `checked`，Input是 `value` | String | | 'value' |\n| options.initValue | 组件初始值(组件第一次render的时候才会读取，后面再修改此值无效),类似defaultValue | any | | |\n| options.trigger | 触发数据变化的事件名称 | String | | 'onChange' |\n| options.rules | 校验规则 | Array/Object | | | |\n| options.getValueFromEvent | 自定义从`onChange`事件中获取value的方式，一般不需要设置. 详细用法查看demo `自定义数据获取` | Function(value,...args) 参数顺序和组件是完全一致的 | | | |\n| props | 组件自定义的事件可以写在这里  | Object | | | |\n\n返回值\n```\n{id,value,onChange}\n```\n\n#### rules\n\n```\n{\n    rules:[{ required: true }]\n}\n```\n\n多个rule\n\n```\n{\n    rules:[{required:true,trigger:'onBlur'},{pattern:/abcd/,message:'abcd不能缺'},{validator:(rule, value, callback)=>{callback('出错了')}}]\n}\n```\n\n\n\n| 参数      | 说明                                     | 类型       |  可选值 | 使用类型 |\n|-----------|------------------------------------------|------------|-------|--------|\n| required | 不能为空| Boolean | true | `undefined/null/“”/[]` 会触发此规则) |\n| pattern | 校验正则表达式 | 正则 | | |\n| minLength | 字符串最小长度 / 数组最小个数 | Number | | String/Number/Array |\n| maxLength | 字符串最大长度 / 数组最大个数 | Number | | String/Number/Array |\n| length | 字符串精确长度 / 数组精确个数 | Number | | String/Number/Array |\n| min | 最小值 | Number | | String/Number |\n| max | 最大值 | Number | | String/Number |\n| format | 对常用 pattern 的总结\t | String | url、email、tel、number | String |\n| validator | 自定义校验,(校验成功的时候不要忘记执行 `callback()`,否则会校验不返回) | Function(rule,value,callback) | | |\n| trigger | 触发校验的事件名称 | String/Array | onChange/onBlur/... | onChange |\n| message | 出错时候信息 | String | | |\n\n## 自定义组件接入Field标准\n\n- 支持受控模式(value+onChange) `必须`\n    - value 控制组件数据展现\n    - onChange 组件发生变化时候的回调函数（第一个参数可以给到value)\n\n- 一次完整操作抛一次onChange事件 `建议`\n    比如有Process表示进展中的状态，建议增加API `onProcess`；如果有Start表示启动状态，建议增加API `onStart`\n\n- `value={undefined}`的时候清空数据, field 的 reset 函数会给所有组件下发 undefined 数据 `建议`\n\n```\ncomponentWillReceiveProps(nextProps) {\n    if ('value' in nextProps ) {\n        this.setState({\n           value: nextProps.value === undefined? []: nextProps.value   //  设置组件的被清空后的数值\n        })\n    }\n}\n```\n\n## 已知问题\n\n- 为何手动调用`this.field.validate`的时候进不了回调函数？ 答: 是不是自定义了validator方法,确保`callback`在任何分支下都能被执行到。\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"自动卸载","order":"6","jsx":"import { Input, Button, Field } from '@alifd/next';\n\n\nclass Demo extends React.Component {\n    state = {\n        show: true,\n        show2: true,\n    }\n    field = new Field(this);\n    field2 = new Field(this, { autoUnmount: false });\n\n    render() {\n        return (\n            <div>\n                {this.state.show ? < Input {...this.field.init('name', { initValue: 'autoUnmount = true' })} /> : null}\n                <Button\n                    onClick={() => {\n                        console.log('value auto delete', this.field.getValues());\n                    }}\n                    style={{marginLeft: 4}}\n                >\n                    print\n                </Button>\n                <Button\n                    onClick={() => this.setState({ show: false })}\n                    warning\n                    style={{marginLeft: 4}}\n                >\n                    delete\n                </Button>\n                <br />\n                <br />\n                {this.state.show2 ? < Input {...this.field2.init('name2', { initValue: 'autoUnmount = false' })} /> : null}\n                <Button\n                    onClick={() => {\n                        console.log('value always exist', this.field2.getValues());\n                    }}\n                    style={{marginLeft: 4}}\n                >\n                    print\n                </Button>\n                <Button\n                    onClick={() => this.setState({ show2: false })}\n                    warning\n                    style={{marginLeft: 4}}\n                >\n                    delete\n                </Button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>autoUnmount 默认为 true，当组件被 unmount 的时候会自动删除数据. autoUnmount 设置为 false 后，会一直保存数据.</p>\n"},{"title":"基本","order":"0","jsx":"import { Input, Button, Field } from '@alifd/next';\n\n\n\nclass App extends React.PureComponent {\n    field = new Field(this, {forceUpdate: true});\n\n    onGetValue() {\n        console.log(this.field.getValue('input'));\n    }\n\n    render() {\n        const { init, setValue, reset } = this.field;\n\n        return (<div className=\"demo\">\n            <Input  {...init('input', {initValue: 'test'})}  />\n            <br/><br/>\n            <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>getValue</Button>\n            <Button type=\"primary\" onClick={() => setValue('input', 'set me by click')}>setValue</Button>\n            <Button onClick={() => reset()}>reset</Button>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<App/>, mountNode);\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n<p><code>getValue</code> <code>setValue</code> <code>reset</code> 的使用</p>\n"},{"title":"自定义组件","order":"10","jsx":"import { Button, Field } from '@alifd/next';\n\n\nclass Custom extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: typeof props.value === 'undefined' ? [] : props.value\n        };\n    }\n\n    // update value\n    componentWillReceiveProps(nextProps) {\n        if ('value' in nextProps) {\n            this.setState({\n                value: typeof nextProps.value === 'undefined' ? [] : nextProps.value\n            });\n        }\n    }\n\n    onAdd = () => {\n        const value = this.state.value.concat([]);\n        value.push('new');\n\n        this.setState({\n            value\n        });\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (<div className=\"custom\">\n            {this.state.value.map((v, i) => {\n                return <Button key={i} >{v}</Button>;\n            })}\n            <Button type=\"primary\" onClick={this.onAdd.bind(this)}>Add ＋ </Button>\n        </div>);\n    }\n}\n\n/* eslint-disable react/no-multi-comp */\nclass App extends React.Component {\n    field = new Field(this, {\n        deepReset: true\n    });\n\n    onGetValue() {\n        console.log(this.field.getValue('custom'));\n    }\n\n    render() {\n        const { init, setValue, reset } = this.field;\n\n        return (<div className=\"demo\">\n            <Custom  {...init('custom', {initValue: ['test']})}  />\n\n            <br/><br/>\n\n            <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>getValue</Button>\n            <Button type=\"primary\" onClick={() => setValue('custom', ['test', 'setValue'])}>setValue</Button>\n            <Button onClick={() => reset()}>reset</Button>\n        </div>);\n    }\n}\nReactDOM.render(<App/>, mountNode);\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n.custom {\n    border: 1px dashed;\n    padding: 4px;\n    display: inline-block;\n}\n.custom span {\n    border: 1px solid green;\n    padding: 0px 5px;\n    height: 24px;\n    display: inline-block;\n    margin-right: 2px;\n}\n","body":"\n<p>自己的组件如何接入Field。</p>\n<p><code>最低标准</code>: 组件支持 <code>onChange</code> 读取组件数据。<code>达到效果</code>：Field 可以 getValue，但是 setValue 无效</p>\n<p><code>完全支持</code>: 组件支持<a href=\"https://facebook.github.io/react/docs/forms.html#controlled-components\">受控</a>， 也就是支持两个api：<code>value</code> <code>onChange</code>. value: 设置组件的数据; onChange: 在组件修改的时候在第一个数暴露数据</p>\n"},{"title":"动态表格","order":"6","jsx":"import { Button, Input, Table, Field } from '@alifd/next';\n\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tableSource: [1, 2, 3].map(i => {\n                return { id: i };\n            })\n        };\n        this.idx = 3;\n\n        this.field = new Field(this, {\n            parseName: true,\n            autoUnmount: true,\n        });\n    }\n\n    getValues = () => {\n        const values = this.field.getValues();\n        console.log(values);\n    }\n\n    add = () => {\n        const { tableSource } = this.state;\n        tableSource.push({\n            id: ++this.idx,\n        });\n\n        this.setState({ tableSource });\n    }\n\n    removeItem(index) {\n        const { tableSource } = this.state;\n        tableSource.splice(index, 1);\n        this.setState({ tableSource });\n    }\n\n    // name.${value} 全局唯一\n    input = (value) => <Input {...this.field.init(`name.${value}`, { initValue: value })} />;\n    delete = (value, index) => <Button warning onClick={this.removeItem.bind(this, index)}>delete</Button>;\n\n    render() {\n        return (\n            <div>\n                <Table dataSource={this.state.tableSource}>\n                    <Table.Column title=\"id\" dataIndex=\"id\" />\n                    <Table.Column title=\"input\" dataIndex=\"id\" cell={this.input} />\n                    <Table.Column title=\"operation\" cell={this.delete} width={100} />\n                </Table>\n                <div style={{ marginTop: 10 }}>\n                    <Button type=\"primary\" onClick={this.getValues}>print</Button>\n                    <Button type=\"normal\" onClick={this.add} style={{ marginLeft: 4 }}>Add</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n<p>Input 的 name 必须全局唯一, 否则可能会出现串行的错误</p>\n"},{"title":"组合使用","order":"8","jsx":"import { Button, Checkbox, Input, Radio, Select, Range, DatePicker, TimePicker, Field } from '@alifd/next';\n\n\nconst CheckboxGroup = Checkbox.Group;\nconst RadioGroup = Radio.Group;\n\nconst list = [\n    {\n        value: 'apple',\n        label: 'apple'\n    }, {\n        value: 'pear',\n        label: 'pear'\n    }, {\n        value: 'orange',\n        label: 'orange'\n    }\n];\nconst layout = {\n    marginBottom: 10,\n    width: 400\n};\n\nclass App extends React.Component {\n    field = new Field(this, {\n        deepReset: true\n    });\n\n    render() {\n        const {init, getValue} = this.field;\n\n        return (<div className=\"demo\">\n            <div style={{marginBottom: 10}}>\n                <RadioGroup {...init('radiogroup', {initValue: 'a'})} >\n                    <Radio value=\"a\">A</Radio>\n                    <Radio value=\"b\">B</Radio>\n                    <Radio value=\"c\">C</Radio>\n                    <Radio value=\"d\">D</Radio>\n                </RadioGroup>\n            </div>\n\n            {\n                getValue('radiogroup') !== 'd' ?\n                    <Select {...init('name', {initValue: 'lucy'})} style={layout}>\n                        <Select.Option value=\"jack\">jack</Select.Option>\n                        <Select.Option value=\"lucy\">lucy</Select.Option>\n                        <Select.Option value=\"disabled\" disabled>disabled</Select.Option>\n                        <Select.Option value=\"hugohua\">hugohua</Select.Option>\n                    </Select> :\n                    <Input {...init('name', {initValue: 'frankqian'})} />\n            }\n            <br/>\n\n            <Range style={{...layout, marginTop: 30}} slider={'double'} scales={10}\n                marks={10}  {...init('range', {initValue: [20, 40]})}/>\n\n            <div style={{marginBottom: 10}}>\n                <CheckboxGroup dataSource={list}  {...init('checkboxgroup', {initValue: ['apple']})} />\n            </div>\n            <div style={{marginBottom: 10}}>\n                <DatePicker {...init('datepicker')}/>\n            </div>\n            <div style={{marginBottom: 10}}>\n                <DatePicker.RangePicker {...init('rangepicker')}/>\n            </div>\n            <div style={{marginBottom: 10}}>\n                <TimePicker {...init('timepicker')}/>\n            </div>\n            <Button type=\"primary\" onClick={() => {\n                console.log(this.field.getValues());\n            }}>getValues</Button>\n            <Button onClick={() => {\n                this.field.setValues({\n                    name: 'hugohua',\n                    range: [30, 50],\n                    checkboxgroup: ['orange'],\n                    radiogroup: 'd'\n                });\n            }}>setValues</Button>\n            <Button onClick={() => {\n                this.field.reset();\n            }}>reset</Button>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<App/>, mountNode);\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n<p>多组件混合使用</p>\n"},{"title":"自定义返回值","order":"2","jsx":"import { Button, Input, Field } from '@alifd/next';\n\n\nclass App extends React.Component {\n\n    field = new Field(this);\n\n    normFile(list) {\n        if (Array.isArray(list)) {\n            return list;\n        }\n        return list && list.fileList;\n    }\n\n    normDate(date, strdate) {\n        console.log('normDate:', date, strdate);\n        return strdate;\n    }\n\n    render() {\n        const init = this.field.init;\n\n        return (<div>\n            <Input {...init('name', { getValueFromEvent: (value) => {\n                if (value.match(/##/)) {\n                    return value;\n                } else {\n                    return `## title-${value}`;\n                }\n            }})} />\n            <Button type=\"primary\" onClick={() => {\n                console.log(this.field.getValues());\n            }}>getValues</Button>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>通过 <code>getValueFromEvent</code> 自定义从组件的 <code>Event</code> 获取 <code>value</code> 的方式</p>\n"},{"title":"关联控制","order":"1","jsx":"import { Input, Select, Range, Field } from '@alifd/next';\n\n\n\nclass App extends React.Component {\n    field = new Field(this, {\n        onChange: (name, value) => {\n            console.log(this.field.getValues());\n\n            switch (name) {\n                case 'input':\n                    this.field.setValue('sync', `change to: ${value}`);\n                    break;\n                case 'select':\n                    this.field.setValue('sync', `${value} is coming`);\n                    break;\n                case 'range':\n                    this.field.setValue('sync', ` (${value.join(',')}) ready`);\n                    break;\n            }\n        }\n    });\n\n    render() {\n        const {init, getValue} = this.field;\n        const layout = {\n            marginBottom: 10,\n            width: 400\n        };\n\n        return (<div>\n            <Input placeholder=\"controlled by onChange\" {...init('input')} style={layout}/><br/>\n            <Input placeholder=\"under control\" {...init('input')} style={layout}/><br/>\n\n            <Select style={layout} {...init('select', {initValue: 'lucy'})}>\n                <Select.Option value=\"jack\">jack</Select.Option>\n                <Select.Option value=\"lucy\">lucy</Select.Option>\n                <Select.Option value=\"disabled\" disabled>disabled</Select.Option>\n                <Select.Option value=\"hugo\">hugo</Select.Option>\n            </Select><br/>\n\n            {\n                getValue('select') !== 'hugo' ?\n                    <Range\n                        style={{...layout, marginTop: 30}}\n                        slider={'double'} scales={10} marks={10}\n                        {...init('range', {initValue: [20, 40], trigger: 'onProcess'})}\n                    /> : null\n            }\n            <br/>\n\n            <hr style={{marginBottom: 10}}/>\n            <Input placeholder=\"everyone can control me\" {...init('sync')} style={layout}/><br/>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>组件之间的关联控制. <code>onChange</code> 统一管理。</p>\n"},{"title":"redux 中使用","order":"5","jsx":"import { Input, Button, Field } from '@alifd/next';\n\n\nimport { combineReducers, createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\n\nfunction formReducer(state = {email: 'frankqian@qq.com'}, action) {\n    switch (action.type) {\n        case 'save_fields':\n            return {\n                ...state,\n                ...action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nclass Demo extends React.Component {\n    componentWillReceiveProps(nextProps) {\n        this.field.setValues({\n            email: nextProps.email,\n            newlen: nextProps.email.length\n        });\n    }\n\n    field = new Field(this, {\n        onChange: (name, value) => {\n            console.log('onChange', name, value);\n            this.field.setValue('newlen', value.length);\n            this.props.dispatch({\n                type: 'save_fields',\n                payload: {\n                    [name]: value\n                }\n            });\n        }\n    });\n\n    setEmail() {\n        this.props.dispatch({\n            type: 'save_fields',\n            payload: {\n                email: 'qq@gmail.com'\n            },\n        });\n    }\n\n\n    render() {\n        const init = this.field.init;\n\n        const newLen = init('newlen', { initValue: this.props.email.length });\n\n        return (<div>\n            <Input {...init('email', { initValue: this.props.email }, {\n                rules: [\n                    {required: true, type: 'email', message: 'at least 5 chars'},\n                ]\n            })} />\n            now length is:{newLen.value}\n            <p>email: {this.props.email}</p>\n            <Button onClick={this.setEmail.bind(this)}>set</Button>\n        </div>);\n    }\n}\n\n\nconst ReduxDemo = connect((state) => {\n    return {\n        email: state.formReducer.email,\n    };\n})(Demo);\n\n\nconst store = createStore(combineReducers({\n    formReducer,\n}));\n\nReactDOM.render((<Provider store={store}>\n    <div>\n        <ReduxDemo />\n    </div>\n</Provider>), mountNode);\n","css":"","body":"\n<p>在 redux 中使用, 在 <code>componentWillReceiveProps</code> 更新</p>\n"},{"title":"自定义错误","order":"3","jsx":"import { Input, Button, Field } from '@alifd/next';\n\n\n\nclass App extends React.Component {\n    field = new Field(this);\n\n    render() {\n        const { init, getError, setError, setErrors } = this.field;\n        return (<div className=\"demo\">\n            <Input  {...init('input', {\n                rules: [{\n                    required: true,\n                    pattern: /hello/,\n                    message: 'must be hello'\n                }]\n            })}  /><br/>\n            <span style={{color: 'red'}}>{getError('input')}</span>\n\n            <br/>\n            <Button onClick={() => {\n                setError('input', 'set error 1');\n            }}>setError</Button>\n\n            <Button onClick={() => {\n                setErrors({input: 'set error 2'});\n            }}>setErrors</Button>\n\n            <Button onClick={() => {\n                setErrors({input: ''});\n            }}>clear</Button>\n\n            <br/><br/>\n            <Input  {...init('input2')}  /><br/>\n            <span style={{color: 'red'}}>{getError('input2')}</span><br/>\n\n            <Button onClick={() => {\n                setError('input2', 'errors will be removed by onChange');\n            }}>setError</Button>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<App/>, mountNode);\n\n\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n<p>自己控制组件的errors</p>\n"},{"title":"结构化解析","order":"11","jsx":"import { Input, Button, Field } from '@alifd/next';\n\n\n\nclass App extends React.Component {\n    field = new Field(this, {\n        parseName: true\n    });\n\n    onGetValue() {\n        console.log(this.field.getValues());\n    }\n\n    onSetValue() {\n        this.field.setValues({\n            obj: {\n                b: 'b',\n                c: 'c'\n            },\n            arr: ['first', 'second']\n        });\n    }\n\n    render() {\n        const { init, reset } = this.field;\n\n        return (<div className=\"demo\">\n            <h3>Object transfer</h3>\n            obj.b: <Input  {...init('obj.b', {initValue: 'test1'})}  /> &nbsp;\n            obj.c: <Input  {...init('obj.c', {initValue: 'test2'})}  />\n\n            <br/>\n\n            <h3>Array transfer</h3>\n            arr.0: <Input  {...init('arr.0', {initValue: '0'})}  /> &nbsp;\n            arr.1: <Input  {...init('arr.1', {initValue: '1'})}  />\n            <br/><br/>\n\n            result:\n            <pre>{JSON.stringify(this.field.getValues(), null, 2)}</pre>\n\n            <br/><br/>\n\n            <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>getValues</Button>\n            <Button onClick={this.onSetValue.bind(this)}>setValues</Button>\n            <Button onClick={() => reset()}>reset</Button>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<App/>, mountNode);\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n<p>把 <code>init(&#39;obj.b&#39;)</code> 的数据转换成 <code>obj={obj:{b:&#39;value&#39;}}</code>；</p>\n<p>把 <code>init(&#39;arr.0&#39;)</code> 的数据转换成 <code>obj={arr:[&#39;&#39;]}</code>；</p>\n"},{"title":"校验","order":"4","jsx":"import { Input, Button, Checkbox, Field } from '@alifd/next';\n\n\n\nconst CheckboxGroup = Checkbox.Group;\n\nconst list = [\n    {\n        value: 'apple',\n        label: 'apple'\n    }, {\n        value: 'pear',\n        label: 'pear'\n    }, {\n        value: 'orange',\n        label: 'orange'\n    }\n];\n\nclass App extends React.Component {\n    state = {\n        checkboxStatus: true\n    }\n    field = new Field(this, {scrollToFirstError: -10});\n\n    isChecked(rule, value, callback) {\n        if (!value) {\n            callback('consent agreement not checked ');\n        } else {\n            callback();\n        }\n    }\n\n    userName(rule, value, callback) {\n        if (value === 'frank') {\n            setTimeout(() => callback('name existed'), 200);\n        } else {\n            setTimeout(() => callback(), 200);\n        }\n    }\n\n    render() {\n        const init = this.field.init;\n\n        return (<div className=\"demo\">\n            <Input {...init('input', {initValue: 'delete all', rules: {required: true}})} />\n            {this.field.getError('input') ?\n                <span style={{color: 'red'}}>{this.field.getError('input').join(',')}</span> : ''}\n\n            <br/>\n            <br/>\n\n            <Input placeholder=\"try onBlur\" {...init('input1', {\n                rules: [{\n                    required: true,\n                    message: 'can not be empty',\n                    trigger: ['onBlur', 'onChange']\n                }]\n            })} />\n            {this.field.getError('input1') ?\n                <span style={{color: 'red'}}>{this.field.getError('input1').join(',')}</span> : ''}\n\n            <br/>\n            <br/>\n\n            <Input defaultValue=\"\" placeholder=\"try frank\" {...init('username', {\n                rules: [{\n                    validator: this.userName,\n                    trigger: ['onBlur', 'onChange']\n                }]\n            })} />\n            {this.field.getState('username') === 'loading' ? 'validating...' : ''}\n            {this.field.getError('username') ?\n                <span style={{color: 'red'}}>{this.field.getError('username').join(',')}</span> : ''}\n\n            <br/>\n            <br/>\n\n            agreement:\n            <Checkbox  {...init('checkbox', {\n                valueName: 'checked',\n                rules: [{validator: this.isChecked}]\n            })} />\n            {this.field.getError('checkbox') ?\n                <span style={{color: 'red'}}>{this.field.getError('checkbox').join(',')}</span> : ''}\n\n            <br/>\n            <br/>\n\n            <Input multiple maxLength={10} defaultValue=\">3 and <10\" {...init('textarea', {\n                rules: [{\n                    required: true,\n                    min: 3,\n                    max: 10\n                }]\n            })} />\n            {this.field.getError('textarea') ?\n                <span style={{color: 'red'}}>{this.field.getError('textarea').join(',')}</span> : ''}\n\n            <br/>\n            <br/>\n\n            {this.state.checkboxStatus ? <div>\n                Array validate：\n                <CheckboxGroup dataSource={list}  {...init('checkboxgroup', {\n                    rules: [{\n                        required: true,\n                        type: 'array',\n                        message: 'choose one please'\n                    }]\n                })} style={{marginBottom: 10}}/>\n                {this.field.getError('checkboxgroup') ?\n                    <span style={{color: 'red'}}>{this.field.getError('checkboxgroup').join(',')}</span> : ''}\n            </div> : null}\n\n            <br/>\n            <br/>\n\n            <Button type=\"primary\" onClick={() => {\n                this.field.validate((errors, values) => {\n                    console.log(errors, values);\n                });\n            }}>validate</Button>\n            <Button onClick={() => {\n                this.field.reset();\n            }}>reset</Button>\n\n            <Button onClick={() => {\n                if (this.state.checkboxStatus) {\n                    this.setState({checkboxStatus: false});\n                    this.field.remove('checkboxgroup');\n                } else {\n                    this.setState({checkboxStatus: true});\n                }\n\n            }}>{this.state.checkboxStatus ? 'delete' : 'restore'}</Button>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n<p>校验的错误信息需要用<code>getError</code>获取</p>\n<p><code>注意</code>：Form 和 Field 做了深度结合，在 Form 中使用Field，错误信息不需<code>getError</code>获取会自动展现。</p>\n"},{"title":"自定义受控字段","order":"9","jsx":"import { Button, Checkbox, Radio, Switch, Field } from '@alifd/next';\n\n\n\nclass App extends React.Component {\n\n    field = new Field(this);\n\n    render() {\n        const init = this.field.init;\n\n        return (<div className=\"demo\">\n            <Radio {...init('radio', {initValue: false, valueName: 'checked'})} > checked</Radio>\n            <br/>\n            <Checkbox {...init('checkbox', {valueName: 'checked', initValue: true})} >\n                defaultChecked\n            </Checkbox>\n            <br/>\n            <Switch {...init('switch', {valueName: 'checked', initValue: false})}\n                style={{marginTop: 10, marginBottom: 10}}/>\n            <br/>\n\n            <Button type=\"primary\" onClick={() => {\n                console.log(this.field.getValues());\n            }}>getValues</Button>\n            <Button onClick={() => {\n                this.field.setValues({\n                    radio: true,\n                    switch: true,\n                    checkbox: false\n                });\n            }}> setValues </Button>\n            <Button onClick={() => {\n                this.field.reset();\n            }}>reset</Button>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":".demo .next-btn {\n    margin-right: 5px;\n}\n","body":"\n<p>valueName 的默认值为 value，如果为其他需要用 valueName 指定</p>\n"}]},{"name":"Form","category":"Components","title":"表单","type":"表单","importStatement":"import { Form } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n表单布局、校验、数据提交操作时用到。\n\n### 注意事项\n\n-   组件不要使用关键字 `nodeName` 作为 name、id\n-   Form 默认使用 `size=medium`, 并且会控制 FormItem 内所有组件的size。 如果想修改组件的size `<FormItem size=\"small\" >`\n-   在垂直表单中如果文字（一般 `<p>` 标签）或者组件向上偏离，可以通过 `className=\"next-form-text-align\"` 辅助调整\n-   必须是被 `<FormItem>`直接包裹的组件才能展示校验错误提示。如果界面不展示错误信息，请检查是否有多个层级。 比如 `<FormItem><div><Input/></div></FormItem>` 是无法展示校验信息的。\n\n API\n\n### Form\n\n| 参数             | 说明                                                                                                                                   | 类型       | 默认值                                                    |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------ | -------- | ------------------------------------------------------ |\n| inline         | 内联表单                                                                                                                                 | Boolean  | -                                                      |\n| size           | 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。<br><br>**可选值**:<br>'large'(大)<br>'medium'(中)<br>'small'(小) | Enum     | 'medium'                                               |\n| labelAlign     | 标签的位置<br><br>**可选值**:<br>'top'(上)<br>'left'(左)<br>'inset'(内)                                                                         | Enum     | 'left'                                                 |\n| labelTextAlign | 标签的左右对齐方式<br><br>**可选值**:<br>'left'(左)<br>'right'(右)                                                                                 | Enum     | -                                                      |\n| field          | 经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项                                                                                  | any      | -                                                      |\n| saveField      | 保存 Form 自动生成的 field 对象<br><br>**签名**:<br>Function() => void                                                                          | Function | func.noop                                              |\n| labelCol       | 控制第一级 Item 的 labelCol                                                                                                                | Object   | -                                                      |\n| wrapperCol     | 控制第一级 Item 的 wrapperCol                                                                                                              | Object   | -                                                      |\n| onSubmit       | form内有 `htmlType=\"submit\"` 的元素的时候会触发<br><br>**签名**:<br>Function() => void                                                            | Function | function preventDefault(e) {     e.preventDefault(); } |\n| children       | 子元素                                                                                                                                  | any      | -                                                      |\n| value          | 表单数值                                                                                                                                 | Object   | -                                                      |\n| onChange       | 表单变化回调<br><br>**签名**:<br>Function() => void                                                                                          | Function | func.noop                                              |\n| component      | 设置标签类型                                                                                                                               | String   | 'form'                                                 |\n\n### Form.Item\n\n> 手动传递了 wrapCol labelCol 会使用 Grid 辅助布局; labelAlign='top' 会强制禁用 Grid\n\n| 参数                  | 说明                                                                                                                      | 类型                 | 默认值   |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------- | ------------------ | ----- |\n| label               | label 标签的文本                                                                                                             | ReactNode          | -     |\n| size                | 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。<br><br>**可选值**:<br>'large', 'small', 'medium' | Enum               | -     |\n| labelCol            | label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效                                             | Object             | -     |\n| wrapperCol          | 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol                                                                                       | Object             | -     |\n| help                | 自定义提示信息，如不设置，则会根据校验规则自动生成.                                                                                              | ReactNode          | -     |\n| validateState       | 校验状态，如不设置，则会根据校验规则自动生成<br><br>**可选值**:<br>'error'<br>'success'(成功)<br>'loading'(失败)                                     | Enum               | -     |\n| hasFeedback         | 配合 validateState 属性使用，是否展示 success/loading 的校验状态图标, 目前只有Input支持                                                         | Boolean            | false |\n| children            | node 或者 function(values)                                                                                                | ReactNode/Function | -     |\n| extra               | 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面                                                                    | ReactNode          | -     |\n| labelAlign          | 标签的位置<br><br>**可选值**:<br>'top'(上)<br>'left'(左)<br>'inset'(内)                                                            | Enum               | -     |\n| labelTextAlign      | 标签的左右对齐方式<br><br>**可选值**:<br>'left'(左)<br>'right'(右)                                                                    | Enum               | -     |\n| required            | [表单校验] 不能为空                                                                                                             | Boolean            | -     |\n| asterisk            | required 的星号是否显示                                                                                                        | Boolean            | -     |\n| requiredMessage     | required 自定义错误信息                                                                                                        | String             | -     |\n| requiredTrigger     | required 自定义触发方式                                                                                                        | String/Array       | -     |\n| min                 | [表单校验] 最小值                                                                                                              | Number             | -     |\n| max                 | [表单校验] 最大值                                                                                                              | Number             | -     |\n| minmaxMessage       | min/max 自定义错误信息                                                                                                         | String             | -     |\n| minmaxTrigger       | min/max 自定义触发方式                                                                                                         | String/Array       | -     |\n| minLength           | [表单校验] 字符串最小长度 / 数组最小个数                                                                                                 | Number             | -     |\n| maxLength           | [表单校验] 字符串最大长度 / 数组最大个数                                                                                                 | Number             | -     |\n| minmaxLengthMessage | minLength/maxLength 自定义错误信息                                                                                             | String             | -     |\n| minmaxLengthTrigger | minLength/maxLength 自定义触发方式                                                                                             | String/Array       | -     |\n| length              | [表单校验] 字符串精确长度 / 数组精确个数                                                                                                 | Number             | -     |\n| lengthMessage       | length 自定义错误信息                                                                                                          | String             | -     |\n| lengthTrigger       | length 自定义触发方式                                                                                                          | String/Array       | -     |\n| pattern             | 正则校验                                                                                                                    | any                | -     |\n| patternMessage      | pattern 自定义错误信息                                                                                                         | String             | -     |\n| patternTrigger      | pattern 自定义触发方式                                                                                                         | String/Array       | -     |\n| format              | [表单校验] 四种常用的 pattern<br><br>**可选值**:<br>'number', 'email', 'url', 'tel'                                                 | Enum               | -     |\n| formatMessage       | format 自定义错误信息                                                                                                          | String             | -     |\n| formatTrigger       | format 自定义触发方式                                                                                                          | String/Array       | -     |\n| validator           | [表单校验] 自定义校验函数<br><br>**签名**:<br>Function() => void                                                                     | Function           | -     |\n| validatorTrigger    | validator 自定义触发方式                                                                                                       | String/Array       | -     |\n\n### Form.Submit\n\n> 继承 Button API\n\n| 参数       | 说明                                                                                                                                                                           | 类型            | 默认值       |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | --------- |\n| onClick  | 点击提交后触发<br><br>**签名**:<br>Function(value: Object, errors: Object, field: class) => void<br>**参数**:<br>_value_: {Object} 数据<br>_errors_: {Object} 错误数据<br>_field_: {class} 实例 | Function      | func.noop |\n| validate | 是否校验/需要校验的 name 数组                                                                                                                                                           | Boolean/Array | -         |\n| field    | 自定义 field (在 Form 内不需要设置)                                                                                                                                                    | Object        | -         |\n\n### Form.Reset\n\n> 继承 Button API\n\n| 参数        | 说明                                           | 类型       | 默认值       |\n| --------- | -------------------------------------------- | -------- | --------- |\n| names     | 自定义重置的字段                                     | Array    | -         |\n| onClick   | 点击提交后触发<br><br>**签名**:<br>Function() => void | Function | func.noop |\n| toDefault | 返回默认值                                        | Boolean  | -         |\n| field     | 自定义 field (在 Form 内不需要设置)                    | Object   | -         |\n\n### Form.Error\n\n> 自定义错误展示\n\n| 参数       | 说明                                           | 类型                 | 默认值 |\n| -------- | -------------------------------------------- | ------------------ | --- |\n| name     | 表单名                                          | String/Array       | -   |\n| field    | 自定义 field (在 Form 内不需要设置)                    | Object             | -   |\n| children | 自定义错误渲染, 可以是 node 或者 function(errors, state) | ReactNode/Function | -   |\n\n## 关于校验\n\n-   建议一个FormItem放一个组件, 方便错误提示跟随组件展示\n-   组件必须是FormItem的第一层子元素\n-   详细校验请查看 `Field` 组件文档的 rules\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Form, Input, Checkbox } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n    labelCol: {\n        fixedSpan: 10\n    },\n    wrapperCol: {\n        span: 14\n    }\n};\n\nclass Demo extends React.Component {\n\n    handleSubmit = (values) => {\n        console.log('Get form value:', values);\n    };\n\n    render() {\n        return (\n            <Form style={{width: '60%'}} {...formItemLayout} >\n                <FormItem label=\"userName:\">\n                    <p>Fixed Name</p>\n                </FormItem>\n                <FormItem label=\"password:\">\n                    <Input htmlType=\"password\" name=\"pass\" placeholder=\"Please Enter Password\"/>\n                </FormItem>\n                <FormItem label=\"Note:\" help=\"something\">\n                    <Input.TextArea placeholder=\"something\" name=\"remark\" />\n                </FormItem>\n                <FormItem label=\"Agreement:\">\n                    <Checkbox name=\"agreement\" defaultChecked>Agree</Checkbox>\n                </FormItem>\n                <FormItem label=\" \">\n                    <Form.Submit onClick={this.handleSubmit}>Confirm</Form.Submit>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>拉伸浏览器的时候label宽度不变。</p>\n<p>如果组件比较靠上，可以用 <code>className=&quot;next-form-text-align&quot;</code> 做调整</p>\n"},{"title":"自定义布局","order":"6","jsx":"import { Form, Input, Switch, Grid, Button, Icon, Balloon } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst {Row, Col} = Grid;\n\nconst style = {\n    padding: '20px',\n    background: '#F7F8FA',\n    margin: '20px',\n};\nconst formItemLayout = {\n    labelCol: {fixedSpan: 4},\n};\nconst label = (<span>\nname：<Balloon type=\"primary\" trigger={<Icon type=\"prompt\" size=\"small\" />} closable={false}>blablablablablablablabla</Balloon>\n</span>);\n\nclass Demo extends React.Component {\n    state = {\n        labelAlign: 'top'\n    }\n    handleChange = (v) => {\n        this.setState({\n            labelAlign: v ? 'left' : 'top'\n        });\n    }\n    render() {\n        const labelAlign = this.state.labelAlign;\n\n        return (\n            <div>\n                <h3>Label Position</h3>\n                <Switch checkedChildren=\"left\" unCheckedChildren=\"top\" checked={this.state.labelAlign === 'left'} onChange={this.handleChange} />\n\n                <Form  style={style}>\n                    <Row gutter=\"4\">\n                        <Col>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label={label}\n                                required\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Long search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem  {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Long search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem  {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem  {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem  {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Long search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem  {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col style={{ textAlign: 'right' }}>\n                            <Button type=\"primary\" style={{ marginRight: '5px' }}>Search</Button>\n                            <Button >Clear All</Button>\n                        </Col>\n                    </Row>\n                </Form>\n\n\n                <Form style={style}>\n                    <Row gutter=\"4\">\n                        <Col>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label={label}\n                                required\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem {...formItemLayout}  labelAlign={labelAlign}\n                                label=\"Long search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem {...formItemLayout}  labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem {...formItemLayout}  labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col style={{ textAlign: 'right' }}>\n                            <Button type=\"primary\" style={{ marginRight: '5px' }}>Search</Button>\n                            <Button >Clear All</Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>标签位置：上、左</p>\n<p>配合 <code>Row</code> <code>Col</code> 控制表单内元素布局 (注意：FormItem非Form直接子元素需要不能直接直接在Form上设置布局)</p>\n"},{"title":"复杂功能(Field)","order":"10","jsx":"import { Form, Input, Radio, Field, Button } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nconst formItemLayout = {\n    labelCol: {\n        span: 6\n    },\n    wrapperCol: {\n        span: 14\n    }\n};\n\nclass BasicDemo extends React.Component {\n    field = new Field(this);\n\n    userExists(rule, value) {\n        return new Promise((resolve, reject) => {\n            if (!value) {\n                resolve();\n            } else {\n                setTimeout(() => {\n                    if (value === 'frank') {\n                        reject([new Error('Sorry, this username is already occupied.')]);\n                    } else {\n                        resolve();\n                    }\n                }, 500);\n            }\n        });\n    }\n\n    checkPass(rule, value, callback) {\n        const { validate } = this.field;\n        if (value) {\n            validate(['rePasswd']);\n        }\n        callback();\n    }\n\n    checkPass2(rule, value, callback) {\n        const { getValue } = this.field;\n        if (value && value !== getValue('passwd')) {\n            callback('Inconsistent password input twice!');\n        } else {\n            callback();\n        }\n    }\n\n    validate = () => {\n        this.field.validate(['sex']);\n    }\n\n    render() {\n        const {getState, getValue, getError} = this.field;\n\n        return (\n            <Form {...formItemLayout} field={this.field}>\n                <FormItem\n                    label=\"Username:\"\n                    hasFeedback\n                    required\n                    validator={this.userExists.bind(this)}\n                    help={getState('username') === 'loading' ? 'Checking ...' : getError('username')}\n                >\n                    <Input placeholder=\"Input frank\" name=\"username\" />\n                    <p>Hello {getValue('username')}</p>\n                </FormItem>\n\n                <FormItem\n                    label=\"Password:\"\n                    hasFeedback\n                    required\n                    requiredMessage=\"Please enter password\"\n                    validator={this.checkPass.bind(this)}\n                >\n                    <Input htmlType=\"password\" name=\"passwd\" />\n                </FormItem>\n\n                <FormItem\n                    label=\"Check your password:\"\n                    hasFeedback\n                    required\n                    requiredMessage=\"Enter your password again\"\n                    validator={this.checkPass2.bind(this)}\n                >\n                    <Input htmlType=\"password\" placeholder=\"Enter the same password twice\" name=\"rePasswd\" />\n                </FormItem>\n\n                <FormItem\n                    label=\"Gender:\"\n                    hasFeedback\n                    required\n                    requiredMessage=\"Please select your gender\"\n                >\n                    <RadioGroup name=\"sex\" >\n                        <Radio value=\"male\">Male</Radio>\n                        <Radio value=\"female\">Female</Radio>\n                    </RadioGroup>\n                </FormItem>\n\n                <FormItem wrapperCol={{ offset: 6 }} >\n                    <Button onClick={this.validate}>Validate by Field</Button>\n                    <Form.Submit validate type=\"primary\" onClick={(v, e) => console.log(v, e)} style={{margin: '0 10px'}}>Submit</Form.Submit>\n                    <Form.Reset >Reset</Form.Reset>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\n\nReactDOM.render(<BasicDemo />, mountNode);\n","css":"","body":"\n<p>配合 <code>Field</code> 可以实现较复杂功能</p>\n"},{"title":"水平","order":"1","jsx":"import { Form, Input } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nfunction handleSubmit(v) {\n    console.log(v);\n}\n\nReactDOM.render(<div>\n    <Form inline>\n        <FormItem label=\"Username:\">\n            <FormItem  >\n                <Input name=\"first\" style={{width: 80}} placeholder=\"first\"/>\n            </FormItem>\n            <FormItem  >\n                <Input name=\"second\" style={{width: 80}} placeholder=\"second\"/>\n            </FormItem>\n        </FormItem>\n        <FormItem label=\"Password:\" required hasFeedback={false}>\n            <Input htmlType=\"password\" name=\"pass\" placeholder=\"Please enter your password!\"/>\n        </FormItem>\n\n        <FormItem label=\" \">\n            <Form.Submit onClick={handleSubmit}>Submit</Form.Submit>\n        </FormItem>\n    </Form>\n\n</div>, mountNode);\n","css":"","body":"\n"},{"title":"标签内嵌","order":"4","jsx":"import { Form, Input, Select } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nconst formItemLayout = {\n    labelCol: {fixedSpan: 4},\n    wrapperCol: {span: 20},\n};\n\nReactDOM.render(<div>\n\n    <Form {...formItemLayout} labelAlign=\"inset\" style={{maxWidth: '500px'}}>\n        <FormItem  label=\"User Name:\">\n            <Input placeholder=\"Please enter your name\" id=\"userName\" name=\"userName\"/>\n        </FormItem>\n        <FormItem  label=\"Password:\" validateState=\"error\">\n            <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"password\" name=\"password\"/>\n        </FormItem>\n\n        <FormItem  label=\"Size：\">\n            <Select style={{width: '100%'}}>\n                <Option value=\"small\">small</Option>\n                <Option value=\"medium\">medium</Option>\n                <Option value=\"large\">large</Option>\n            </Select>\n        </FormItem>\n    </Form>\n\n    <br/><br/>\n\n    <Form labelAlign=\"inset\" inline>\n        <FormItem label=\"User Name:\">\n            <Input placeholder=\"Enter your name\" id=\"userName2\" name=\"userName2\"/>\n        </FormItem>\n        <FormItem label=\"Password:\" validateState=\"error\" help=\"Password is required!\">\n            <Input htmlType=\"password\" placeholder=\"Enter your password\" id=\"password2\" name=\"password2\"/>\n        </FormItem>\n\n        <FormItem label=\"Size:\">\n            <Select style={{width: 150}}>\n                <Option value=\"small\">small</Option>\n                <Option value=\"medium\">medium</Option>\n                <Option value=\"large\">large</Option>\n            </Select>\n        </FormItem>\n    </Form>\n</div>, mountNode);\n","css":"","body":"\n<p>通过设置<code>labelAlign=&quot;inset&quot;</code> (只适用于Input、Select组件，其他组件不适用)</p>\n"},{"title":"表单组合","order":"11","jsx":"import { Form, Input, Button, Checkbox, Radio, Select, Range, Balloon, DatePicker, TimePicker, NumberPicker, Field, Switch, Upload, Grid } from '@alifd/next';\n\n\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst RangePicker = DatePicker.RangePicker;\nconst {Row, Col} = Grid;\n\nconst formItemLayout = {\n    labelCol: {span: 6},\n    wrapperCol: {span: 14},\n};\n\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    handleSubmit(value) {\n        console.log('Form values：', value);\n    }\n\n    render() {\n        const init = this.field.init;\n\n        return (\n            <Form {...formItemLayout} field={this.field}>\n                <FormItem label=\"I'm the title：\">\n                    <p className=\"next-form-text-align\">The quick brown fox jumps over the lazy dog.</p>\n                    <p ><a href=\"#\">Link</a></p>\n                </FormItem>\n\n                <FormItem label=\"Password:\">\n                    <Balloon trigger={<Input htmlType=\"password\" {...init('pass')} />} align=\"r\" closable={false} triggerType=\"hover\">\n                        input password\n                    </Balloon>\n                </FormItem>\n\n                <FormItem label=\"NumberPicker:\">\n                    <NumberPicker min={1} max={10} name=\"numberPicker\" defaultValue={3} />\n                    <span>Something in here</span>\n                </FormItem>\n\n                <FormItem\n                    label=\"Switch:\"\n                    required>\n                    <Switch name=\"switch\" defaultChecked />\n                </FormItem>\n\n                <FormItem label=\"Range:\" required>\n                    <Range defaultValue={30} scales={[0, 100]} marks={[0, 100]} name=\"range\" />\n                </FormItem>\n\n                <FormItem  label=\"Select:\" required>\n                    <Select style={{width: 200}} name=\"select\">\n                        <Option value=\"jack\">jack</Option>\n                        <Option value=\"lucy\">lucy</Option>\n                        <Option value=\"disabled\" disabled>disabled</Option>\n                        <Option value=\"hugohua\">hugohua</Option>\n                    </Select>\n                </FormItem>\n\n                <FormItem\n                    label=\"DatePicker:\"\n                    labelCol={{span: 6}}\n                    required>\n                    <Row>\n                        <FormItem style={{marginRight: 10, marginBottom: 0}}><DatePicker name=\"startDate\"/></FormItem>\n                        <FormItem style={{marginBottom: 0}}><DatePicker name=\"endDate\" /></FormItem>\n                    </Row>\n                </FormItem>\n\n                <FormItem\n                    label=\"RangePicker:\"\n                    labelCol={{span: 6}}\n                    required>\n                    <RangePicker name=\"rangeDate\"/>\n                </FormItem>\n\n                <FormItem\n                    label=\"TimePicker:\"\n                    required>\n                    <TimePicker name=\"time\" />\n                </FormItem>\n\n                <FormItem\n                    label=\"Checkbox:\">\n                    <Checkbox.Group name=\"checkbox\">\n                        <Checkbox value=\"a\">option 1 </Checkbox>\n                        <Checkbox value=\"b\">option 2 </Checkbox>\n                        <Checkbox disabled value=\"c\">option 3（disabled）</Checkbox>\n                    </Checkbox.Group>\n                </FormItem>\n\n                <FormItem\n                    label=\"Radio:\">\n                    <Radio.Group name=\"radio\">\n                        <Radio value=\"apple\">apple</Radio>\n                        <Radio value=\"banana\">banana</Radio>\n                        <Radio disabled value=\"cherry\">cherry（disabled）</Radio>\n                    </Radio.Group>\n                </FormItem>\n\n                <FormItem\n                    label=\"Logo：\"\n                >\n                    <Upload action=\"/upload.do\" listType=\"text\" name=\"upload\" >\n                        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload</Button>\n                    </Upload>\n                </FormItem>\n                <Row style={{marginTop: 24}}>\n                    <Col offset=\"6\">\n                        <Form.Submit type=\"primary\" onClick={this.handleSubmit.bind(this)}>Submit</Form.Submit>\n                    </Col>\n                </Row>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>展示和表单相关的其他组件。</p>\n"},{"title":"嵌套","order":"5","jsx":"import { Form, Input, Grid } from '@alifd/next';\n\n\n\nconst FormItem = Form.Item;\nconst {Row, Col} = Grid;\n\nconst formItemLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 14},\n};\n\nconst insetLayout = {\n    labelCol: {fixedSpan: 3},\n};\n\nReactDOM.render(<Form {...formItemLayout}>\n    <FormItem id=\"control-input\" label=\"Input Something：\">\n        <Row gutter=\"4\">\n            <Col>\n                <FormItem label=\"Nest\" labelAlign=\"inset\" {...insetLayout} required requiredTrigger=\"onBlur\" asterisk={false}>\n                    <Input placeholder=\"Please enter...\"  name=\"firstname\"/>\n                </FormItem>\n            </Col>\n            <Col>\n                <FormItem label=\"Nest\" labelAlign=\"inset\" {...insetLayout} required asterisk={false}>\n                    <Input placeholder=\"need onChange\"  name=\"secondname\" />\n                </FormItem>\n            </Col>\n        </Row>\n    </FormItem>\n    <FormItem label=\"Bank Account：\" >\n        <Row gutter=\"4\">\n            <Col>\n                <FormItem required requiredTrigger=\"onBlur\">\n                    <Input name=\"A\"/>\n                </FormItem>\n            </Col>\n            <Col>\n                <FormItem required requiredTrigger=\"onBlur\">\n                    <Input name=\"B\"/>\n                </FormItem>\n            </Col>\n            <Col>\n                <FormItem required requiredTrigger=\"onBlur\">\n                    <Input name=\"C\"/>\n                </FormItem>\n            </Col>\n            <Col>\n                <FormItem required requiredTrigger=\"onBlur\">\n                    <Input name=\"D\"/>\n                </FormItem>\n            </Col>\n        </Row>\n    </FormItem>\n    <FormItem label=\" \">\n        <Form.Submit onClick={(v) => console.log(v)}>Submit</Form.Submit>\n    </FormItem>\n</Form>, mountNode);\n","css":"","body":"\n<p>FormItem 嵌套</p>\n"},{"title":"回车提交","order":"7","jsx":"import { Form, Input } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nclass Demo extends React.Component {\n    onSubmit(e) {\n        e.preventDefault(); // form will auto submit if remove this line\n        console.log('onsubmit');\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.onSubmit.bind(this)}>\n                <FormItem >\n                    <Input placeholder=\"Enter Key can also trigger ‘onSubmit’\"/>\n                </FormItem>\n                <Form.Submit htmlType=\"submit\">submit</Form.Submit>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>需要Form里面有 htmlType=&quot;submit&quot; 的元素</p>\n"},{"title":"手动设置错误","order":"13","jsx":"import { Form, Input, Button, Field } from '@alifd/next';\nimport { combineReducers, createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\n\n\n\nconst initState = {\n    values: {email: '', username: 'xiachi'},\n    errors: {}\n};\n\nfunction formReducer(state = initState, action) {\n    switch (action.type) {\n        case 'save_fields':\n            return {\n                ...state,\n                values: {\n                    ...state.values,\n                    ...action.values\n                }\n            };\n        case 'set_errors':\n            return {\n                ...state,\n                errors: {\n                    ...state.errors,\n                    ...action.errors\n                }\n            };\n        default:\n            return state;\n    }\n}\n\nclass FormDemo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.field = new Field(this, {\n            onChange: (name, value) => {\n                console.log('onChange', name, value, this.field.getError(name));\n                this.props.dispatch({\n                    type: 'save_fields',\n                    values: {\n                        [name]: value\n                    }\n                });\n                this.props.dispatch({\n                    type: 'set_errors',\n                    errors: {\n                        [name]: this.field.getError(name)\n                    }\n                });\n            }\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.field.setValues(nextProps.formData.values);\n        this.field.setErrors(nextProps.formData.errors);\n    }\n\n    setEmail() {\n        this.props.dispatch({\n            type: 'save_fields',\n            values: {\n                email: 'qq@gmail.com'\n            },\n        });\n    }\n\n    setName() {\n        this.props.dispatch({\n            type: 'save_fields',\n            values: {\n                username: 'frank'\n            },\n        });\n    }\n\n    setError() {\n        this.props.dispatch({\n            type: 'set_errors',\n            errors: {\n                email: 'Error message from remote'\n            },\n        });\n    }\n\n    setErrors() {\n        this.props.dispatch({\n            type: 'set_errors',\n            errors: {\n                email: 'A-Error message from remote',\n                username: 'B-Error message from remote'\n            },\n        });\n    }\n\n    render() {\n        return (<Form field={this.field}>\n            <Form.Item required format=\"email\">\n                <Input name=\"email\"/>\n            </Form.Item>\n            <Form.Item help=\"\" required requiredMessage=\"required\">\n                <Input name=\"username\" defaultValue={this.props.formData.values.username} />\n                <p style={{color: 'blue'}}>{this.field.getError('username')}</p>\n            </Form.Item>\n\n            <p>email: {this.props.email && this.props.email.value}</p>\n            <Button onClick={this.setEmail.bind(this)}>setEmail</Button>\n            <Button onClick={this.setName.bind(this)}>setName</Button>\n            <Button onClick={this.setError.bind(this)}>setError</Button>\n            <Button onClick={this.setErrors.bind(this)}>setErrors</Button>\n            <Button onClick={() => this.field.reset()}>reset</Button>\n        </Form>);\n    }\n}\n\n\nconst ReduxFormDemo = connect((state) => {\n    return {\n        formData: state.formReducer,\n    };\n})(FormDemo);\n\nconst store = createStore(combineReducers({\n    formReducer,\n}));\n\nReactDOM.render(<Provider store={store}>\n    <div>\n        <ReduxFormDemo />\n    </div>\n</Provider>, mountNode);\n","css":"","body":"\n<p>在<code>redux</code>中结合 <code>componentWillReceiveProps</code> <code>setErrors</code> 使用, 配合 Field 使用更加方便</p>\n<p>如果需要自己控制错误位置，可以让<code>help=&quot;&quot;</code> 然后自己放置展示错误的地方</p>\n"},{"title":"配合redux使用","order":"12","jsx":"import { Form, Input, Button, Checkbox, Field } from '@alifd/next';\nimport { combineReducers, createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\n\n\n\n\nconst CheckboxGroup = Checkbox.Group;\nfunction formReducer(state = {email: '', username: 'xiachi', fruit: ['apple']}, action) {\n    switch (action.type) {\n        case 'save_fields':\n            return {\n                ...state,\n                ...action.payload,\n            };\n        default:\n            return state;\n    }\n}\n\nclass FormDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.field = new Field(this, {\n            onChange: (name, value) => {\n                console.log('onChange', name, value, this.field.getValues());\n                this.props.dispatch({\n                    type: 'save_fields',\n                    payload: {\n                        [name]: value\n                    }\n                });\n                /* Method 2, Updates all values.\n                 this.props.dispatch({\n                 type: 'save_fields',\n                 payload: this.field.getValues()\n                 });\n                 */\n            }\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.field.setValues(nextProps.formData);\n    }\n\n    setEmail() {\n        this.props.dispatch({\n            type: 'save_fields',\n            payload: {\n                email: 'qq@gmail.com'\n            },\n        });\n    }\n\n    setName() {\n        this.props.dispatch({\n            type: 'save_fields',\n            payload: {\n                username: 'frank'\n            },\n        });\n    }\n\n    setGroup() {\n        this.props.dispatch({\n            type: 'save_fields',\n            payload: {\n                fruit: ['pear']\n            },\n        });\n    }\n\n    render() {\n        return (<Form field={this.field}>\n            <Form.Item required requiredMessage=\"required!\">\n                <Input name=\"email\"/>\n            </Form.Item>\n            <Form.Item required requiredMessage=\"required!\">\n                <Input name=\"username\" defaultValue={this.props.formData.username} />\n            </Form.Item>\n            <Form.Item required requiredMessage=\"required!\">\n                <CheckboxGroup name=\"fruit\" dataSource={[{label: 'Apple', value: 'apple'}, {label: 'Pear', value: 'pear'}]} defaultValue={this.props.formData.fruit}/>\n            </Form.Item>\n\n            <p>email: {this.props.email && this.props.email.value}</p>\n            <Button onClick={this.setEmail.bind(this)}>setEmail</Button>\n            <Button onClick={this.setName.bind(this)}>setName</Button>\n            <Button onClick={this.setGroup.bind(this)}>setGroup</Button>\n        </Form>);\n    }\n}\n\nconst ReduxFormDemo = connect((state) => {\n    return {\n        formData: state.formReducer,\n    };\n})(FormDemo);\n\nconst store = createStore(combineReducers({\n    formReducer\n}));\n\nReactDOM.render(<Provider store={store}>\n    <div>\n        <ReduxFormDemo />\n    </div>\n</Provider>, mountNode);\n","css":"","body":"\n<p>在<code>redux</code>中结合 <code>componentWillReceiveProps</code> <code>setValues</code> 使用， 配合 Field 使用</p>\n"},{"title":"注册","order":"1","jsx":"import { Form, Input } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n    labelCol: { fixedSpan: 3 },\n    wrapperCol: { span: 20 },\n};\n\nclass Demo extends React.Component {\n    state = {\n        code: '',\n        second: 60,\n    }\n\n    handleSubmit = (values, errors) => {\n        if (errors) {\n            return;\n        }\n        console.log('Get form value:', values);\n    };\n\n    sendCode = (values, errors) => {\n        if (errors) {\n            return;\n        }\n        this.setState({\n            code: Math.floor(Math.random() * (999999 - 99999 + 1) + 99999)\n        });\n\n        setInterval(() => {\n            this.setState({\n                second: --this.state.second\n            });\n        }, 1000);\n    }\n\n    render() {\n        const { code } = this.state;\n\n        return (\n            <Form style={{ width: 400 }} {...formItemLayout} labelTextAlign=\"left\" size=\"large\" labelAlign=\"inset\" >\n                <FormItem label=\"name\" required asterisk={false}>\n                    <Input name=\"username\" trim defaultValue=\"frank\" />\n                </FormItem>\n                <FormItem label=\"phone\" format=\"tel\" required asterisk={false}>\n                    <Input name=\"phone\" trim innerAfter={\n                        <Form.Submit\n                            text\n                            type=\"primary\"\n                            disabled={!!code}\n                            validate={['phone']}\n                            onClick={this.sendCode}\n                            style={{ marginRight: 10 }}\n                        >\n                            {code ? `retry after ${this.state.second}s` : 'send code'}\n                        </Form.Submit>\n                    } />\n                </FormItem>\n                {\n                    this.state.code ? <FormItem label=\"code\" required asterisk={false}>\n                        <Input name=\"code\" trim defaultValue={this.state.code} />\n                    </FormItem> : null\n                }\n\n                <FormItem label=\" \">\n                    <Form.Submit style={{ width: '100%' }} type=\"primary\" validate onClick={this.handleSubmit}>Submit</Form.Submit>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>验证码获取</p>\n"},{"title":"响应式","order":"7","jsx":"import { Form, Input, Select } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n    labelCol: {xxs: 4, l: 4},\n    wrapperCol: {xxs: 20, l: 16}\n};\n\nReactDOM.render(<Form {...formItemLayout} >\n    <FormItem label=\"userName:\">\n        <Input />\n    </FormItem>\n    <FormItem label=\"password:\">\n        <Input htmlType=\"password\" name=\"pass\" placeholder=\"Please Enter Password\"/>\n    </FormItem>\n    <FormItem label=\"Country:\">\n        <Select placeholder=\"Please select a country\" style={{width: '100%'}}>\n            <option value=\"china\">China</option>\n            <option value=\"use\">United States</option>\n            <option value=\"japan\">Japan</option>\n            <option value=\"korean\">South Korea</option>\n            <option value=\"Thailand\">Thailand</option>\n        </Select>\n    </FormItem>\n    <FormItem label=\"Note:\" help=\"something\">\n        <Input.TextArea placeholder=\"something\" name=\"remark\" />\n    </FormItem>\n    <FormItem label=\" \">\n        <Form.Submit>Submit</Form.Submit>\n    </FormItem>\n</Form>, mountNode);\n","css":"","body":"\n<p>可以通过配置 <code>labelCol</code> <code>wrapperCol</code> 的 <code>Grid.Col</code> 响应式属性实现响应式</p>\n"},{"title":"尺寸","order":"2","jsx":"import { Form, Input, Select } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst formItemLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 20}\n};\n\nclass Demo extends React.Component {\n    state = {\n        size: 'medium'\n    }\n\n    handleChange = (v) => {\n        this.setState({\n            size: v\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Form {...formItemLayout} size={this.state.size} style={{maxWidth: '500px'}}>\n                    <FormItem label=\"Size:\">\n                        <Select value={this.state.size} onChange={this.handleChange} style={{width: '100%'}}>\n                            <Option value=\"small\">small</Option>\n                            <Option value=\"medium\">medium</Option>\n                            <Option value=\"large\">large</Option>\n                        </Select>\n                    </FormItem>\n                    <FormItem label=\"Account:\">\n                        <Input placeholder=\"Please enter your user name\" id=\"userName\" name=\"userName\"/>\n                    </FormItem>\n                    <FormItem required label=\"Password:\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"password\" name=\"password\"/>\n                    </FormItem>\n                    <FormItem label=\"Password:\" validateState=\"error\">\n                        <Input htmlType=\"password\" placeholder=\"Check your password\" id=\"rePass\" name=\"rePass\"/>\n                    </FormItem>\n                </Form>\n\n                <br/><br/>\n\n                <Form size={this.state.size} inline>\n                    <FormItem label=\"Size:\">\n                        <Select style={{width: '100%'}} value={this.state.size} onChange={this.handleChange}>\n                            <Option value=\"small\">small</Option>\n                            <Option value=\"medium\">medium</Option>\n                            <Option value=\"large\">large</Option>\n                        </Select>\n                    </FormItem>\n                    <FormItem label=\"Account:\">\n                        <Input placeholder=\"Please enter your user name\" id=\"userName2\" name=\"userName2\"/>\n                    </FormItem>\n                    <FormItem label=\"Password:\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"password2\" name=\"password2\"/>\n                    </FormItem>\n                    <FormItem label=\"Password:\" validateState=\"error\">\n                        <Input htmlType=\"password\" placeholder=\"Check your password\" id=\"rePass2\" name=\"rePass2\"/>\n                    </FormItem>\n                </Form>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".demo-ctl {\n  background-color: #f1f1f1;\n  padding: 10.0px;\n  color: #0a7ac3;\n  border-left: 4.0px solid #0d599a;\n}\n","body":"\n<p><code>size</code> 会强制设置 <code>FormItem</code> 下的所有组件的size</p>\n<p><code>labelAlign</code> label方位</p>\n<p><code>labelTextAlign</code> 文字左右对齐方式</p>\n"},{"title":"标签在上","order":"3","jsx":"import { Form, Input, Select } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass Demo extends React.Component {\n    render() {\n        return (\n            <div>\n                <Form labelAlign=\"top\" >\n                    <FormItem label=\"Account:\">\n                        <Input placeholder=\"Please enter your user name\" id=\"userName\" name=\"userName\"/>\n                    </FormItem>\n\n                    <FormItem required label=\"Password:\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"password\" name=\"password\"/>\n                    </FormItem>\n\n                    <FormItem label=\"Password:\" validateState=\"error\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"rePass\" name=\"rePass\"/>\n                    </FormItem>\n\n                    <FormItem label=\"Size:\">\n                        <Select style={{width: '100%'}} name=\"size\">\n                            <Option value=\"small\">small</Option>\n                            <Option value=\"medium\">medium</Option>\n                            <Option value=\"large\">large</Option>\n                        </Select>\n                    </FormItem>\n                </Form>\n\n                <Form inline labelAlign=\"top\">\n                    <FormItem label=\"Account:\">\n                        <Input placeholder=\"Please enter your user name\" id=\"userName2\" name=\"userName2\"/>\n                    </FormItem>\n                    <FormItem label=\"Password:\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"password2\" name=\"password2\"/>\n                    </FormItem>\n                    <FormItem label=\"Password:\" validateState=\"error\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"rePass2\" name=\"rePass2\"/>\n                    </FormItem>\n                    <FormItem label=\"Size:\">\n                        <Select style={{width: '100%'}} name=\"size2\">\n                            <Option value=\"small\">small</Option>\n                            <Option value=\"medium\">medium</Option>\n                            <Option value=\"large\">large</Option>\n                        </Select>\n                    </FormItem>\n                </Form>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".demo-ctl {\n  background-color: #f1f1f1;\n  padding: 10.0px;\n  color: #0a7ac3;\n  border-left: 4.0px solid #0d599a;\n}\n","body":"\n<p><code>size</code> 会强制设置 <code>FormItem</code> 下的所有组件的size</p>\n<p><code>labelAlign</code> label方位</p>\n<p><code>labelTextAlign</code> 文字左右对齐方式</p>\n"},{"title":"校验","order":"9","jsx":"import { Form, Input, Radio } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nconst formItemLayout = {\n    labelCol: {\n        span: 6\n    },\n    wrapperCol: {\n        span: 14\n    }\n};\n\nclass BasicDemo extends React.Component {\n    userExists(rule, value) {\n        return new Promise((resolve, reject) => {\n            if (!value) {\n                resolve();\n            } else {\n                setTimeout(() => {\n                    if (value === 'frank') {\n                        reject([new Error('Sorry, this username is already exist.')]);\n                    } else {\n                        resolve();\n                    }\n                }, 500);\n            }\n        });\n    }\n\n    render() {\n        return (\n            <Form {...formItemLayout} >\n                <FormItem\n                    label=\"Account:\"\n                    hasFeedback\n                    validator={this.userExists.bind(this)}\n                    help=\"\"\n                >\n                    <Input placeholder=\"Input frank\" name=\"username\" />\n                    <Form.Error name=\"username\" >{\n                        (errors, state) => {\n                            if (state === 'loading') {\n                                return 'loading...';\n                            } else {\n                                return errors;\n                            }\n                        }\n                    }</Form.Error>\n                </FormItem>\n                <FormItem\n                    label=\"Email:\"\n                    hasFeedback\n                    required\n                    requiredTrigger=\"onBlur\"\n                    format=\"email\"\n                >\n                    <Input placeholder=\"Both trigget onBlur and onChange\" name=\"email\" />\n                </FormItem>\n\n                <FormItem\n                    label=\"Password:\"\n                    hasFeedback\n                    required\n                    requiredMessage=\"Please enter password\"\n                >\n                    <Input htmlType=\"password\" name=\"passwd\" />\n                </FormItem>\n\n                <FormItem\n                    label=\"Gender:\"\n                    hasFeedback\n                    required\n                    requiredMessage=\"Please select your gender\"\n                >\n                    <RadioGroup name=\"sex\" >\n                        <Radio value=\"male\">Male</Radio>\n                        <Radio value=\"female\">Female</Radio>\n                    </RadioGroup>\n                </FormItem>\n\n                <FormItem\n                    label=\"Remarks:\"\n                    required\n                    requiredMessage=\"Really do not intend to write anything?\"\n                >\n                    <Input.TextArea maxLength={20} hasLimitHint placeholder=\"Everything is ok!\" name=\"textarea\" />\n                </FormItem>\n\n                <FormItem wrapperCol={{ offset: 6 }} >\n                    <Form.Submit validate type=\"primary\" onClick={(v, e) => console.log(v, e)} style={{marginRight: 10}}>Submit</Form.Submit>\n                    <Form.Reset >Reset</Form.Reset>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<BasicDemo />, mountNode);\n","css":"","body":"\n<p>基本的表单校验例子。</p>\n"},{"title":"校验提示","order":"8","jsx":"import { Form, Input, DatePicker, TimePicker, NumberPicker, Select } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n    labelCol: {\n        span: 6\n    },\n    wrapperCol: {\n        span: 14\n    }\n};\n\nReactDOM.render(\n    <Form {...formItemLayout}>\n        <FormItem label=\"Input Error：\" validateState=\"error\" help=\"Please enter a numeric and alphabetic string\">\n            <Input defaultValue=\"Invalid choice\"/>\n        </FormItem>\n\n        <FormItem label=\"Loading：\" hasFeedback validateState=\"loading\" help=\"Information Checking...\">\n            <Input defaultValue=\"Checking\"/>\n        </FormItem>\n\n        <FormItem label=\"Success：\" hasFeedback validateState=\"success\">\n            <Input defaultValue=\"Successful verification\"/>\n        </FormItem>\n\n        <FormItem label=\"Datepicker：\" validateState=\"error\" help=\"Please select the correct date\">\n            <DatePicker />\n        </FormItem>\n\n        <FormItem label=\"Timepicker：\" validateState=\"error\" help=\"Please select the correct time\">\n            <TimePicker />\n        </FormItem>\n\n        <FormItem label=\"Select：\" validateState=\"error\" help=\"Please select a country\">\n            <Select placeholder=\"Please select a country\">\n                <option value=\"china\">China</option>\n                <option value=\"use\">United States</option>\n                <option value=\"japan\">Japan</option>\n                <option value=\"korean\">South Korea</option>\n                <option value=\"Thailand\">Thailand</option>\n            </Select>\n        </FormItem>\n\n        <FormItem label=\"NumberPicker：\" validateState=\"error\">\n            <NumberPicker defaultValue={0} />\n        </FormItem>\n    </Form>\n    , mountNode);\n","css":"","body":"\n<p>为 <code>&lt;FormItem&gt;</code> 定义 <code>state</code> 属性控制三种校验状态。</p>\n<p>如果是  <code>&lt;Input&gt;</code> 组件, 可在<code>&lt;FormItem&gt;</code>上面添加 <code>hasFeedback</code> 控制图标的展示</p>\n<p><strong>注意</strong>: 反馈图标只对 <code>&lt;Input /&gt;</code> 有效。</p>\n"}]},{"name":"Grid","category":"Components","title":"栅格","type":"布局","importStatement":"import { Grid } from '@alifd/next';","body":"\n## 开发指南\n\n### 基本使用\n\n此栅格系统提供了320，480，720, 990，1200，1500等几乎所有主流分辨率场景的响应规则。<br>\n响应式栅格采用24列栅格体系和5分比实现，以满足2，3，4，5，6分比布局等多种情况。<br>\n固定栅格采用 20px 宽度作为单位栅格， 推荐使用9，10，12，14，16，18，24，但同时也提供了从1到30的所有栅格，也可根据需求定制固定栅格列。<br>\n响应式断点阈值为：xss(320px), xs(480px), s(720px), m(990px), l(1200px), xl(1500px)。<br />\n API 和 DEMO 的说明）。\n\n## API\n\n### Grid.Row\n\n| 参数         | 说明                                                                                                                                                                       | 类型                   | 默认值   |\n| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------- | ----- |\n| children   | 行内容                                                                                                                                                                      | ReactNode            | -     |\n| gutter     | 列间隔                                                                                                                                                                      | String/Number        | 0     |\n| wrap       | 列在行中宽度溢出后是否换行                                                                                                                                                            | Boolean              | false |\n| fixed      | 行在某一断点下宽度是否保持不变（默认行宽度随视口变化而变化）                                                                                                                                           | Boolean              | false |\n| fixedWidth | 固定行的宽度为某一断点的宽度，不受视口影响而变动<br><br>**可选值**:<br>'xxs'(320px)<br>'xs'(480px)<br>'s'(720px)<br>'m'(990px)<br>'l'(1200px)<br>'xl'(1500px)                                       | Enum                 | -     |\n| align      | （不支持IE9浏览器）多列垂直方向对齐方式<br><br>**可选值**:<br>'top'(顶部对齐)<br>'center'(居中对齐)<br>'bottom'(底部对齐)<br>'baseline'(按第一行文字基线对齐)<br>'stretch'(未设置高度或设为 auto，将占满整个容器的高度)                | Enum                 | -     |\n| justify    | （不支持IE9浏览器）行内具有多余空间时的布局方式<br><br>**可选值**:<br>'start'(左对齐)<br>'center'(居中对齐)<br>'end'(右对齐)<br>'space-between'(两端对齐，列之间间距相等)<br>'space-around'(每列具有相同的左右间距，行两端间距是列间距的二分之一) | Enum                 | -     |\n| hidden     | 行在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl']\\(在 xxs, xs, s, m, l, xl 断点下隐藏）              | Boolean/String/Array | -     |\n| component  | 指定以何种元素渲染该节点<br>- 默认为 'div'                                                                                                                                              | String               | 'div' |\n\n### Grid.Col\n\n| 参数          | 说明                                                                                                                                                          | 类型                   | 默认值   |\n| ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------- | ----- |\n| children    | 列内容                                                                                                                                                         | ReactNode            | -     |\n| span        | 列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24                                                                                                             | String/Number        | -     |\n| fixedSpan   | 固定列宽度，宽度值为20 \\* 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30                                                                                             | String/Number        | -     |\n| offset      | （不支持IE9浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24                                                                                                  | String/Number        | -     |\n| fixedOffset | （不支持IE9浏览器）固定列偏移，宽度值为20 \\* 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30                                                                                  | String/Number        | -     |\n| align       | （不支持IE9浏览器）多列垂直方向对齐方式，可覆盖Row的align属性<br><br>**可选值**:<br>'top', 'center', 'bottom', 'baseline', 'stretch'                                                    | Enum                 | -     |\n| hidden      | 列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl']\\(在 xxs, xs, s, m, l, xl 断点下隐藏） | Boolean/String/Array | -     |\n| xxs         | >=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                     | String/Number/Object | -     |\n| xs          | >=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                     | String/Number/Object | -     |\n| s           | >=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                     | String/Number/Object | -     |\n| m           | >=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                     | String/Number/Object | -     |\n| l           | >=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                    | String/Number/Object | -     |\n| xl          | >=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                    | String/Number/Object | -     |\n| component   | 指定以何种元素渲染该节点，默认为 'div'                                                                                                                                      | String               | 'div' |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"多列垂直方向对齐方式","order":"10","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"align-demo\">\n        <div className=\"demo-title\">top</div>\n        <Row align=\"top\">\n            <Col span=\"8\" style={{ height: '100px', lineHeight: '100px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '50px', lineHeight: '50px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '150px', lineHeight: '150px' }}>col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">center</div>\n        <Row align=\"center\">\n            <Col span=\"8\" style={{ height: '100px', lineHeight: '100px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '50px', lineHeight: '50px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '150px', lineHeight: '150px' }}>col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">bottom</div>\n        <Row align=\"bottom\">\n            <Col span=\"8\" style={{ height: '100px', lineHeight: '100px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '50px', lineHeight: '50px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '150px', lineHeight: '150px' }}>col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">baseline</div>\n        <Row align=\"baseline\">\n            <Col span=\"8\" style={{ height: '100px', paddingTop: '20px', fontSize: '30px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '50px', paddingTop: '20px', fontSize: '20px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '150px', paddingTop: '20px', fontSize: '40px' }}>col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">stretch</div>\n        <Row align=\"stretch\" style={{ height: '150px' }}>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"8\">col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">override</div>\n        <Row align=\"top\">\n            <Col align=\"bottom\" span=\"8\" style={{ height: '100px', lineHeight: '100px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '50px', lineHeight: '50px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '150px', lineHeight: '150px' }}>col-8</Col>\n        </Row>\n    </div>, mountNode);\n","css":".align-demo .demo-title {\n    margin-left: 20px;\n}\n\n.align-demo .next-row {\n    margin: 10px 0;\n}\n\n.align-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>（不支持 IE9 浏览器）基于 Flex 的 align-items 和 align-self 属性实现，在 <code>Row</code> 上设置 <code>align</code> 属性，即可控制 <code>Row</code> 下面所有 <code>Col</code> 的垂直方向对齐方式：top（顶部对齐，默认），center（居中对齐），bottom（底部对齐），baseline（第一行文字的基线对齐），stretch（如果未设置高度或设为 auto，将占满整个容器的高度）；在 <code>Col</code> 上设置 <code>align</code> 属性，可允许它与其它列不一样的对齐方式，覆盖 <code>Row</code> 的 <code>align</code> 属性。</p>\n"},{"title":"基础布局","order":"0","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"basic-demo\">\n        <div className=\"demo-title\">One</div>\n        <Row>\n            <Col span=\"24\">col-24</Col>\n        </Row>\n\n        <div className=\"demo-title\">Two</div>\n        <Row>\n            <Col span=\"12\">col-12</Col>\n            <Col span=\"12\">col-12</Col>\n        </Row>\n\n        <div className=\"demo-title\">Three</div>\n        <Row>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"8\">col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">Four</div>\n        <Row>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n        </Row>\n\n        <div className=\"demo-title\">Five</div>\n        <Row>\n            <Col span=\"1p5\">col-1p5</Col>\n            <Col span=\"1p5\">col-1p5</Col>\n            <Col span=\"1p5\">col-1p5</Col>\n            <Col span=\"1p5\">col-1p5</Col>\n            <Col span=\"1p5\">col-1p5</Col>\n        </Row>\n\n        <div className=\"demo-title\">Six</div>\n        <Row>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n    </div>, mountNode);\n","css":".basic-demo .demo-title {\n    margin-left: 20px;\n}\n\n.basic-demo .next-row {\n    margin: 10px 0;\n}\n\n.basic-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>通过 <code>Col</code> 的 <code>span</code> 属性指定该列宽度占整行宽度24分之几或5分之几。</p>\n"},{"title":"响应式布局","order":"5","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"breakpoint-demo\">\n        <div className=\"demo-title\">Resize browser to see how each column changes</div>\n        <Row >\n            <Col xs={12} s={8} m={6}>Col</Col>\n            <Col xs={6} s={8} m={6}>Col</Col>\n            <Col xs={6} s={8} m={12}>Col</Col>\n        </Row>\n    </div>, mountNode);\n","css":".breakpoint-demo .demo-title {\n    margin-left: 20px;\n}\n\n.breakpoint-demo .next-row {\n    margin: 10px 0;\n}\n\n.breakpoint-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n"},{"title":"自定义元素渲染类型","order":"12","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"basic-demo\">\n        <div className=\"demo-title\">Rendered as `ul` and `li`</div>\n        <Row component=\"ul\">\n            <Col span=\"12\" component=\"li\">col-12</Col>\n            <Col span=\"12\" component=\"li\">col-12</Col>\n        </Row>\n    </div>, mountNode);\n","css":".basic-demo ul {\n    list-style: none;\n    padding: 0;\n}\n\n.basic-demo .demo-title {\n    margin-left: 20px;\n}\n\n.basic-demo .next-row {\n    margin: 10px 0;\n}\n\n.basic-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>使用 <code>component</code> 来指定需要渲染的元素类型，默认为 <code>div</code></p>\n"},{"title":"固定宽度列","order":"1","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"mixin-demo\">\n        <div className=\"demo-title\">Two-column layout, left column fixed, right column adaptive</div>\n        <Row>\n            <Col fixedSpan=\"16\">col-fixed-16</Col>\n            <Col>col</Col>\n        </Row>\n\n        <div className=\"demo-title\">Two-column layout, right column fixed, left column adaptive</div>\n        <Row>\n            <Col>col</Col>\n            <Col fixedSpan=\"16\">col-fixed-16</Col>\n        </Row>\n\n        <div className=\"demo-title\">Three-column layout, left column and right column fixed, middle column adaptive</div>\n        <Row>\n            <Col fixedSpan=\"8\">col-fixed-8</Col>\n            <Col>col</Col>\n            <Col fixedSpan=\"8\">col-fixed-8</Col>\n        </Row>\n    </div>, mountNode);\n","css":".mixin-demo .demo-title {\n    margin-left: 20px;\n}\n\n.mixin-demo .next-row {\n    margin: 10px 0;\n}\n\n.mixin-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>通过 <code>Col</code> 的 <code>fixedSpan</code> 属性来指定某列为固定宽度列，其宽度的计算方式为 20 * fixedSpan。</p>\n"},{"title":"列间距","order":"2","jsx":"import { Range, Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gutter: 0\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(gutter) {\n        this.setState({\n            gutter\n        });\n    }\n\n    render() {\n        const { gutter } = this.state;\n\n        return (\n            <div className=\"gutter-demo\">\n                <Range value={gutter} onChange={this.handleChange} marks={4} step={4} max={16} hasTip={false} style={{ width: '400px', marginLeft: '20px', marginTop: '30px' }} />\n                <Row gutter={gutter}>\n                    <Col span=\"6\"><div className=\"demo-col-inset\">col-6</div></Col>\n                    <Col span=\"6\"><div className=\"demo-col-inset\">col-6</div></Col>\n                    <Col span=\"6\"><div className=\"demo-col-inset\">col-6</div></Col>\n                    <Col span=\"6\"><div className=\"demo-col-inset\">col-6</div></Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".gutter-demo .demo-title {\n    margin-left: 20px;\n}\n\n.gutter-demo .next-row {\n    margin: 10px 0;\n}\n\n.gutter-demo .demo-col-inset {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>列与列间距默认为0，可以通过设置 <code>Row</code> 的 <code>gutter</code> 属性来改变列间距。</p>\n"},{"title":"显示与隐藏","order":"6","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"hidden-demo\">\n        <div className=\"demo-title\">Hide columns under all breakpoints, resize browser to see if the second column is hidden or shown</div>\n        <Row>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"16\" hidden>col-16</Col>\n        </Row>\n\n        <div className=\"demo-title\">Hide columns under a breakpoint such as xs, resize browser to see if the second column is hidden or shown</div>\n        <Row>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"16\" hidden=\"xs\">col-16</Col>\n        </Row>\n\n        <div className=\"demo-title\">Hide columns under some breakpoints such as xs and s, resize browser to see if the second column is hidden or shown</div>\n        <Row>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"16\" hidden={['xs', 's']}>col-16</Col>\n        </Row>\n    </div>, mountNode);\n","css":".hidden-demo .demo-title {\n    margin-left: 20px;\n}\n\n.hidden-demo .next-row {\n    margin: 10px 0;\n}\n\n.hidden-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>提供了强大的响应式的显示与隐藏功能，支持在不同断点下的显示与隐藏。</p>\n"},{"title":"多列水平方向对齐方式","order":"11","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"justify-demo\">\n        <div className=\"demo-title\">start</div>\n        <Row justify=\"start\">\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n\n        <div className=\"demo-title\">center</div>\n        <Row justify=\"center\">\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n\n        <div className=\"demo-title\">end</div>\n        <Row justify=\"end\">\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n\n        <div className=\"demo-title\">space-between</div>\n        <Row justify=\"space-between\">\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n\n        <div className=\"demo-title\">space-around</div>\n        <Row justify=\"space-around\">\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n    </div>, mountNode);\n","css":".justify-demo  .demo-title {\n    margin-left: 20px;\n}\n\n.justify-demo  .next-row {\n    margin: 10px 0;\n}\n\n.justify-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>（不支持 IE9 浏览器）基于 Flex 的 justify-content 属性实现，在 <code>Row</code> 上设置 <code>justify</code> 属性，即可行内多列水平方向对齐方式：start（左对齐，默认），center（居中对齐），end（右对齐），space-between（两端对齐，项目之间的间隔都相），space-around（两侧的间隔相等，列之间的间隔比列与左右两端的间隔大一倍）。</p>\n"},{"title":"嵌套布局","order":"4","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"nest-demo\">\n        <Row className=\"demo-row\">\n            <Col span=\"10\">\n                <Row>\n                    <Col span=\"6\">\n                        <div className=\"demo-col-inset\">col-10-6</div>\n                    </Col>\n                    <Col span=\"18\">\n                        <div className=\"demo-col-inset\">col-10-18</div>\n                    </Col>\n                </Row>\n            </Col>\n            <Col span=\"14\">\n                <Row>\n                    <Col span=\"18\">\n                        <div className=\"demo-col-inset\">col-14-18</div>\n                    </Col>\n                    <Col span=\"6\">\n                        <div className=\"demo-col-inset\">col-14-6</div>\n                    </Col>\n                </Row>\n            </Col>\n        </Row>\n    </div>, mountNode);\n","css":".nest-demo .demo-title {\n    margin-left: 20px;\n}\n\n.nest-demo .demo-row {\n    margin: 10px 0;\n}\n\n.nest-demo .demo-col-inset {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p><code>Col</code> 下也可嵌套 <code>Row</code>，以完成更细致的布局。</p>\n"},{"title":"固定宽度偏移","order":"9","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"offset-fixed-demo\">\n        <div className=\"demo-title\">Normal offset, set offset from 1 to 30</div>\n        <Row>\n            <Col fixedOffset=\"0\">offset-fixed-0</Col>\n        </Row>\n        <Row>\n            <Col fixedOffset=\"4\">offset-fixed-4</Col>\n        </Row>\n        <Row>\n            <Col fixedOffset=\"8\">offset-fixed-8</Col>\n        </Row>\n        <Row>\n            <Col fixedOffset=\"12\">offset-fixed-12</Col>\n        </Row>\n\n        <div className=\"demo-title\">Adaptive offset</div>\n        <Row>\n            <Col>col</Col>\n            <Col fixedOffset=\"12\">offset-fixed-12</Col>\n        </Row>\n    </div>, mountNode\n);\n","css":".offset-fixed-demo .demo-title {\n    margin-left: 20px;\n}\n\n.offset-fixed-demo .next-row {\n    margin: 10px 0;\n}\n\n.offset-fixed-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>（不支持 IE9 浏览器）列可以向右偏移一定距离，该距离的计算方式和固定宽度列的宽度相同。</p>\n"},{"title":"偏移","order":"8","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"offset-demo\">\n        <div className=\"demo-title\">Normal offset, set offset from 1 to 24</div>\n        <Row>\n            <Col offset=\"0\">offset-0</Col>\n        </Row>\n        <Row>\n            <Col offset=\"4\">offset-4</Col>\n        </Row>\n        <Row>\n            <Col offset=\"8\">offset-8</Col>\n        </Row>\n        <Row>\n            <Col offset=\"12\">offset-12</Col>\n        </Row>\n\n        <div className=\"demo-title\">Adaptive offset</div>\n        <Row>\n            <Col>col</Col>\n            <Col offset=\"12\">offset-12</Col>\n        </Row>\n    </div>,\n    mountNode\n);\n","css":".offset-demo .demo-title {\n    margin-left: 20px;\n}\n\n.offset-demo .next-row {\n    margin: 10px 0;\n}\n\n.offset-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>（不支持 IE9 浏览器）列可以向右偏移一定距离，该距离的计算方式和列所占宽度计算方式相同。</p>\n"},{"title":"设置行的宽度","order":"7","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nconst breakpoints = {\n    xxs: 320,\n    xs: 480,\n    s: 720,\n    m: 990,\n    l: 1200,\n    xl: 1500\n};\n\nclass Demo extends React.Component {\n    componentDidMount() {\n        const row = ReactDOM.findDOMNode(this.refs.fixCol);\n\n        this.handleResize = () => {\n            let point = '';\n            const innerWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            const keys = Object.keys(breakpoints);\n            for (let i = 0; i < keys.length; i++) {\n                const width = breakpoints[keys[i]];\n                const nextWidth = breakpoints[keys[i + 1]];\n                if (innerWidth > width && (innerWidth < nextWidth || !nextWidth)) {\n                    point = keys[i];\n                    break;\n                }\n            }\n\n            if (point) {\n                row.innerHTML = `${breakpoints[point]}px`;\n            }\n        };\n        window.addEventListener('resize', this.handleResize);\n\n        this.handleResize();\n    }\n\n    componentWillUnmount() {\n        window.removeListener('resize', this.handleResize);\n    }\n\n    render() {\n        return (\n            <div className=\"type-demo\">\n                <div className=\"demo-title\">Default</div>\n                <Row>\n                    <Col>100%</Col>\n                </Row>\n                <div className=\"demo-title\">Set fixed to true</div>\n                <Row ref=\"fixedRow\" fixed>\n                    <Col ref=\"fixCol\" />\n                </Row>\n                <div className=\"demo-title\">Set fixedWidth to 's'</div>\n                <Row fixedWidth=\"s\">\n                    <Col>720px</Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".type-demo .demo-title {\n    margin-left: 20px;\n}\n\n.type-demo .next-row {\n    margin: 10px 0;\n}\n\n.type-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>默认 <code>Row</code> 的宽度被设置为100%，可以通过设置 <code>fixed</code> 属性为 true，来让 <code>Row</code> 的宽度不立刻随着是视口大小变动而变动，而是在某个断点下维持固定的宽度，也可以通过设置 <code>fixedWidth</code> 属性为某一断点值，从而固定 <code>Row</code> 的宽度，不再随着视口大小变动而变动。</p>\n"},{"title":"溢出后是否换行","order":"3","jsx":"import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"wrap-demo\">\n        <div className=\"demo-title\">No wrap</div>\n        <Row>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"8\">col-8</Col>\n        </Row>\n        <div className=\"demo-title\">Wrap</div>\n        <Row wrap>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"8\">col-8</Col>\n        </Row>\n    </div>, mountNode);\n","css":".wrap-demo .demo-title {\n    margin-left: 20px;\n}\n\n.wrap-demo .next-row {\n    margin: 10px 0;\n}\n\n.wrap-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n","body":"\n<p>（不支持 IE9 浏览器）默认列在行中宽度溢出后不会换行，如果想自动换行，请为 <code>Row</code> 设置 <code>wrap</code> 为 true。</p>\n"}]},{"name":"Icon","category":"Components","title":"图标","type":"展示","importStatement":"import { Icon } from '@alifd/next';","body":"\n## Q&A\n\n-   Q: 如何添加自定义Icon呢？<br/>\n    A: 默认提供部分基础 icon ，若要添加自定义 icon 可在 Fusion 设计中心新建主题，编辑主题中的Icon组件，完成后发布主题。每个主题是一个 npm 包，npm 包里面包含了主题变量、iconfont 地址等相关代码。在你的项目里引用该自定义主题包，更新主题包的版本即可（前提是你的项目/构建工具支持 Fusion 主题的使用）\n\n API\n\n### Icon\n\n| 参数   | 说明                                                                                     | 类型     | 默认值      |\n| ---- | -------------------------------------------------------------------------------------- | ------ | -------- |\n| size | 指定图标大小<br><br>**可选值**:<br>'xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl' | Enum   | 'medium' |\n| type | 指定显示哪种图标                                                                               | String | -        |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Icon } from '@alifd/next';\n\nReactDOM.render(<Icon type=\"atm\" />, mountNode);\n","css":"","body":"\n<p>展示图标基本使用方法。</p>\n"},{"title":"尺寸","order":"2","jsx":"import { Icon } from '@alifd/next';\n\nconst sizes = ['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl'];\n\nReactDOM.render((\n    <ul className=\"icon-sizes\">\n        {sizes.map((size, index) => (\n            <li key={index}>\n                <Icon type=\"smile\" size={size} />\n                <span>{size}</span>\n            </li>))}\n    </ul>\n), mountNode);\n\n","css":".icon-sizes {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.icon-sizes li {\n    display: inline-block;\n    width: 80px;\n    height: 80px;\n}\n\n.icon-sizes i {\n    display: block;\n    margin: 12px auto 0 auto;\n    text-align: center;\n}\n\n.icon-sizes span {\n    display: block;\n    margin-top: 10px;\n    text-align: center;\n}\n","body":"\n<p>ICON的尺寸包括：<code>xxs</code>，<code>xs</code>，<code>small</code>，<code>medium</code>，<code>large</code>，<code>xl</code>，<code>xxl</code>，<code>xxxl</code>。</p>\n"},{"title":"自定义样式","order":"3","jsx":"import { Icon } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <div className=\"icon-style-demo\">\n            <Icon type=\"success\" style={{ color: '#1DC11D', marginRight: '10px' }} />\n            This is a success message!\n        </div>\n        <div className=\"icon-style-demo\">\n            <Icon type=\"warning\" style={{ color: '#FFA003', marginRight: '10px' }} />\n            This is a warning message!\n        </div>\n        <div className=\"icon-style-demo\">\n            <Icon type=\"error\" style={{ color: '#FF3333', marginRight: '10px' }} />\n            This is a failure message!\n        </div>\n    </div>\n    , mountNode);\n","css":".icon-style-demo {\n    height: 24px;\n    line-height: 24px;\n    margin-bottom: 10px;\n    font-size: 16px;\n    color: #333;\n}\n","body":"\n<p>图标字体本质上还是文字，可以使用 style 和 className 设置图标的大小和颜色。</p>\n"},{"title":"图标列表","order":"1","jsx":"import { Message, Icon } from '@alifd/next';\n\n\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\nconst types = [\n    'smile', 'cry', 'success', 'warning', 'prompt',\n    'error', 'help', 'clock', 'success-filling', 'delete-filling',\n    'favorites-filling', 'add', 'minus', 'arrow-up', 'arrow-down',\n    'arrow-left', 'arrow-right', 'arrow-double-left', 'arrow-double-right', 'switch',\n    'sorting', 'descending', 'ascending', 'select', 'semi-select',\n    'loading', 'search', 'close', 'ellipsis', 'picture',\n    'calendar', 'ashbin', 'upload', 'download', 'set',\n    'edit', 'refresh', 'filter', 'attachment', 'account',\n    'email', 'atm'\n];\n\n\nlet customTypes = [];\n\n// The code here is for fusion dev display custom Icon components only\nif (window.customIcons) {\n    customTypes = window.customIcons;\n}\n\nconst handleCopy = () => Message.success('Copied!');\n\nReactDOM.render(\n    <div>\n        <div className=\"icon-list-title\">Click on the icon to copy the code.</div>\n        <ul className=\"icon-list\">\n            {types.map((type, index) => (\n                <CopyToClipboard key={index} text={`<Icon type=\"${type}\" />`} onCopy={handleCopy}>\n                    <li>\n                        <Icon type={type} size=\"xl\" />\n                        <span>{type}</span>\n                    </li>\n                </CopyToClipboard>))}\n        </ul>\n        {\n            customTypes.length ?\n                <div>\n                    <div className=\"icon-list-custom-title\">Custom Icon</div>\n                    <ul className=\"icon-list\">\n                        {\n                            customTypes.map((type, index) => (\n                                <CopyToClipboard key={index} text={`<Icon type=\"${type}\" />`} onCopy={handleCopy}>\n                                    <li>\n                                        <Icon type={type} size=\"xl\" />\n                                        <span>{type}</span>\n                                    </li>\n                                </CopyToClipboard>))\n                        }\n                    </ul>\n                </div> :\n                null\n        }\n\n    </div>\n    , mountNode);\n","css":".icon-list-title {\n    margin-bottom: 20px;\n    font-size: 24px;\n    color: #333;\n}\n\n.icon-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.icon-list li {\n    display: inline-block;\n    width: 140px;\n    padding: 30px 0;\n    color: #666;\n    cursor: pointer;\n}\n\n.icon-list li:hover {\n    color: #333;\n    background-color: #f7f7f7;\n}\n\n.icon-list i {\n    display: block;\n    width: 32px;\n    margin: 0 auto;\n}\n\n.icon-list span {\n    display: block;\n    margin-top: 10px;\n    text-align: center;\n    font-size: 14px;\n}\n\n.icon-list-custom-title {\n    margin: 20px 0 20px 10px;\n    font-size: 20px;\n    color: #333;\n}\n","body":"\n<p>点击图标复制代码。</p>\n"}]},{"name":"Input","category":"Components","title":"输入框","type":"表单","importStatement":"import { Input } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n表单输入，一般配合Form使用\n\n API\n\n### Input\n\n| 参数              | 说明                                                                                                                                                                                                                           | 类型            | 默认值       |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | --------- |\n| value           | 当前值                                                                                                                                                                                                                          | String/Number | -         |\n| size            | 尺寸<br><br>**可选值**:<br>'small'(小)<br>'medium'(中)<br>'large'(大)                                                                                                                                                                | Enum          | 'medium'  |\n| defaultValue    | 初始化值                                                                                                                                                                                                                         | String/Number | -         |\n| onChange        | 发生改变的时候触发的回调<br><br>**签名**:<br>Function(value: String, e: Event) => void<br>**参数**:<br>_value_: {String} 数据<br>_e_: {Event} DOM事件对象                                                                                          | Function      | func.noop |\n| onKeyDown       | 键盘按下的时候触发的回调<br><br>**签名**:<br>Function(e: Event, opts: Object) => void<br>**参数**:<br>_e_: {Event} DOM事件对象<br>_opts_: {Object} 可扩展的附加信息：<br> - opts.overMaxLength: {Boolean} 已超出最大长度<br> - opts.beTrimed: {Boolean} 输入的空格被清理 | Function      | func.noop |\n| disabled        | 禁用状态                                                                                                                                                                                                                         | Boolean       | false     |\n| maxLength       | 最大长度                                                                                                                                                                                                                         | Number        | null      |\n| hasLimitHint    | 是否展现最大长度样式                                                                                                                                                                                                                   | Boolean       | false     |\n| cutString       | 当设置了maxLength时，是否截断超出字符串                                                                                                                                                                                                     | Boolean       | true      |\n| readOnly        | 只读                                                                                                                                                                                                                           | Boolean       | false     |\n| trim            | onChange返回会自动去除头尾空字符                                                                                                                                                                                                         | Boolean       | false     |\n| placeholder     | 输入提示                                                                                                                                                                                                                         | String        | -         |\n| onFocus         | 获取焦点时候触发的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                             | Function      | func.noop |\n| onBlur          | 失去焦点时候触发的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                             | Function      | func.noop |\n| getValueLength  | 自定义字符串计算长度方式<br><br>**签名**:<br>Function(value: String) => Number<br>**参数**:<br>_value_: {String} 数据<br>**返回值**:<br>{Number} 自定义长度<br>                                                                                        | Function      | func.noop |\n| htmlType        | 原生type                                                                                                                                                                                                                       | String        | -         |\n| name            | name                                                                                                                                                                                                                         | String        | -         |\n| state           | 状态<br><br>**可选值**:<br>'error'(错误)<br>'loading'(校验中)<br>'success'(成功)                                                                                                                                                         | Enum          | -         |\n| label           | label                                                                                                                                                                                                                        | ReactNode     | -         |\n| hasClear        | 是否出现clear按钮                                                                                                                                                                                                                  | Boolean       | -         |\n| hasBorder       | 是否有边框                                                                                                                                                                                                                        | Boolean       | true      |\n| onPressEnter    | 按下回车的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                                 | Function      | func.noop |\n| hint            | 水印 (Icon的type类型，和hasClear占用一个地方)                                                                                                                                                                                             | String        | -         |\n| innerBefore     | 文字前附加内容                                                                                                                                                                                                                      | ReactNode     | -         |\n| innerAfter      | 文字后附加内容                                                                                                                                                                                                                      | ReactNode     | -         |\n| addonBefore     | 输入框前附加内容                                                                                                                                                                                                                     | ReactNode     | -         |\n| addonAfter      | 输入框后附加内容                                                                                                                                                                                                                     | ReactNode     | -         |\n| addonTextBefore | 输入框前附加文字                                                                                                                                                                                                                     | ReactNode     | -         |\n| addonTextAfter  | 输入框后附加文字                                                                                                                                                                                                                     | ReactNode     | -         |\n| autoComplete    | (原生input支持)                                                                                                                                                                                                                  | String        | 'off'     |\n| autoFocus       | 自动聚焦(原生input支持)                                                                                                                                                                                                              | Boolean       | -         |\n\n### Input.TextArea\n\n| 参数             | 说明                                                                                                                                                                                                                           | 类型             | 默认值       |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | --------- |\n| value          | 当前值                                                                                                                                                                                                                          | String/Number  | -         |\n| defaultValue   | 初始化值                                                                                                                                                                                                                         | String/Number  | -         |\n| onChange       | 发生改变的时候触发的回调<br><br>**签名**:<br>Function(value: String, e: Event) => void<br>**参数**:<br>_value_: {String} 数据<br>_e_: {Event} DOM事件对象                                                                                          | Function       | func.noop |\n| onKeyDown      | 键盘按下的时候触发的回调<br><br>**签名**:<br>Function(e: Event, opts: Object) => void<br>**参数**:<br>_e_: {Event} DOM事件对象<br>_opts_: {Object} 可扩展的附加信息：<br> - opts.overMaxLength: {Boolean} 已超出最大长度<br> - opts.beTrimed: {Boolean} 输入的空格被清理 | Function       | func.noop |\n| disabled       | 禁用状态                                                                                                                                                                                                                         | Boolean        | false     |\n| maxLength      | 最大长度                                                                                                                                                                                                                         | Number         | null      |\n| hasLimitHint   | 是否展现最大长度样式                                                                                                                                                                                                                   | Boolean        | false     |\n| cutString      | 当设置了maxLength时，是否截断超出字符串                                                                                                                                                                                                     | Boolean        | true      |\n| readOnly       | 只读                                                                                                                                                                                                                           | Boolean        | false     |\n| trim           | onChange返回会自动去除头尾空字符                                                                                                                                                                                                         | Boolean        | false     |\n| placeholder    | 输入提示                                                                                                                                                                                                                         | String         | -         |\n| onFocus        | 获取焦点时候触发的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                             | Function       | func.noop |\n| onBlur         | 失去焦点时候触发的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                             | Function       | func.noop |\n| getValueLength | 自定义字符串计算长度方式<br><br>**签名**:<br>Function(value: String) => Number<br>**参数**:<br>_value_: {String} 数据<br>**返回值**:<br>{Number} 自定义长度<br>                                                                                        | Function       | func.noop |\n| htmlType       | 原生type                                                                                                                                                                                                                       | String         | -         |\n| name           | name                                                                                                                                                                                                                         | String         | -         |\n| state          | 状态<br><br>**可选值**:<br>'error'(错误)                                                                                                                                                                                            | Enum           | -         |\n| autoHeight     | 自动高度 true / {minRows: 2, maxRows: 4}                                                                                                                                                                                         | Boolean/Object | false     |\n| rows           | 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)                                                                                                                                                                         | Number         | 4         |\n\n### Input.Group\n\n| 参数                   | 说明          | 类型        | 默认值 |\n| -------------------- | ----------- | --------- | --- |\n| addonBefore          | 输入框前附加内容    | ReactNode | -   |\n| addonBeforeClassName | 输入框前附加内容css | String    | -   |\n| addonAfter           | 输入框后附加内容    | ReactNode | -   |\n| addonAfterClassName  | 输入框后额外css   | String    | -   |\n| rtl                  | rtl         | Boolean   | -   |\n\n## Input/TextArea 内部函数(通过refs获取)\n\n| 参数           | 说明                                                                                                                           | 类型       | 默认值 |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------------- | -------- | --- |\n| getInputNode | 获取真正input节点                                                                                                                  | Function |     |\n| focus        | 获取焦点<br><br>**签名**:<br> Function(start:Number, end: Number)<br>**参数**:<br>_start_: {Number} 光标起始位置<br>_end_: {Number} 选择结束位置 | Function |     |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"前后扩展","order":"2","jsx":"import { Input } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Input hasLimitHint\n        addonTextBefore=\"http://\"\n        addonTextAfter=\".com\"\n        size=\"large\"\n        defaultValue=\"alibaba\"\n        maxLength={2}\n        aria-label=\"input with config of addonTextBefore and addonTextAfter\" /><br /><br />\n\n    <Input\n        addonTextBefore=\"http://\"\n        addonTextAfter=\".com\"\n        size=\"medium\"\n        value=\"alibaba\"\n        aria-label=\"input with config of addonTextBefore and addonTextAfter\" /><br /><br />\n\n    <Input\n        addonTextBefore=\"http://\"\n        addonTextAfter=\".com\"\n        size=\"small\"\n        value=\"alibaba\"\n        aria-label=\"input with config of addonTextBefore and addonTextAfter\" />\n</div>\n    , mountNode);\n","css":"","body":"\n"},{"title":"自动高度","order":"9","jsx":"import { Input } from '@alifd/next';\n\n\n\n\nReactDOM.render(\n    <div >\n        <Input.TextArea\n            autoHeight\n            trim\n            aria-label=\"auto height\"\n            placeholder=\"autoHeight\"\n            onKeyDown={(e, opts) => {\n                console.log('onKeyDown', opts);\n            }} /><br/><br/>\n\n        <Input.TextArea aria-label=\"auto height\" autoHeight={{ minRows: 2, maxRows: 6 }} />\n    </div>\n    , mountNode);\n","css":"","body":"\n<p>设置 <code>Input</code> 为 多行文本域；</p>\n"},{"title":"简单","order":"0","jsx":"import { Input } from '@alifd/next';\n\nfunction onChange(v) {\n    console.log(v);\n}\n\nReactDOM.render(<div>\n    <Input size=\"large\" placeholder=\"Large\" onChange={onChange} aria-label=\"Large\" /><br /><br />\n\n    <span id=\"J_InputMedium\" style={{display: 'none'}}>Aria Labelby Demo </span>\n    <Input placeholder=\"Medium\" aria-label=\"Medium\" aria-labelledby=\"J_InputMedium\" /><br /><br />\n\n    <Input placeholder=\"Small\" size=\"small\" label=\"SIZE :\" id=\"J_InputSmall\" /><br /><br />\n\n    <Input.TextArea placeholder=\"TextArea\" aria-label=\"TextArea\" />\n</div>, mountNode);\n","css":"","body":"\n"},{"title":"清除按钮","order":"3","jsx":"import { Input } from '@alifd/next';\n\nconst onChange = (value) => {\n    console.log(value);\n};\nconst onBlur = (e) => {\n    console.log(e);\n};\n\nReactDOM.render(\n    <div>\n        <Input\n            hasClear\n            defaultValue=\"clear by click\"\n            size=\"small\"\n            aria-label=\"input with config of hasClear\" onChange={onChange} /><br/><br/>\n\n        <Input\n            hasClear\n            defaultValue=\"2019-09-10 10:10:20\"\n            aria-label=\"input with config of hasClear\"\n            onChange={onChange}\n            onBlur={onBlur}\n            hint=\"calendar\"/><br/><br/>\n\n        <Input\n            hasClear\n            defaultValue=\"clear by click\"\n            size=\"large\"\n            aria-label=\"input with config of hasClear\"\n            onChange={onChange} /><br/><br/>\n    </div>\n    , mountNode);\n","css":"","body":"\n<p>通过设置 hasClear 添加清除按钮.</p>\n<p>hint为水印按钮，和hasClear占用同一个地方配合使用</p>\n"},{"title":"禁用状态","order":"7","jsx":"import { Input } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Input disabled aria-label=\"disabled\" placeholder=\"disabled\" size=\"small\"/><br /><br />\n\n        <Input\n            disabled\n            aria-label=\"disabled\"\n            addonTextBefore=\"http://\"\n            addonTextAfter=\".com\"\n            size=\"medium\"\n            value=\"alibaba\"/><br /><br />\n\n        <Input disabled aria-label=\"disabled\" placeholder=\"medium\" maxLength={10} hasLimitHint/><br /><br />\n\n        <Input.TextArea disabled aria-label=\"disabled\" placeholder=\"medium\" maxLength={10} hasLimitHint/>\n    </div>\n    , mountNode);\n","css":"","body":"\n<p>为 <code>Input</code> 设置 <code>disabled</code> 状态；</p>\n"},{"title":"输入框组合","order":"11","jsx":"import { Input, Select, Button } from '@alifd/next';\n\n\nconst select = (<Select aria-label=\"please select\" >\n    <option value=\"https\">https</option>\n    <option value=\"http\">http</option>\n</Select>);\nconst button = (<Button>search</Button>);\n\nReactDOM.render(<div>\n    <Input.Group addonBefore={select} addonAfter={button}>\n        <Input hasClear defaultValue=\"abc\" style={{width: '100%'}} aria-label=\"please input\" />\n    </Input.Group>\n    <br/><br/>\n    <Input addonTextAfter=\".com\" addonBefore={select} aria-label=\"please input\" />\n</div>, mountNode);\n","css":"","body":"\n<p>Group 具有两边长度固定中间组件任意伸缩的能力。在Input中可以用addonBefore/addonAfter快速使用</p>\n"},{"title":"水印和前后缀","order":"8","jsx":"import { Input, Icon } from '@alifd/next';\n\n\nclass App extends React.Component {\n    state = {\n        v: '',\n    };\n\n    onChange = (v) => {\n        this.setState({\n            v\n        });\n    };\n\n    onClick = () => {\n        console.log(this.state.v);\n    };\n\n    render() {\n\n        return (<div>\n            <Input\n                innerBefore={<Icon type=\"search\" style={{margin: 4}}  onClick={this.onClick} />}\n                placeholder=\"search\"\n                value={this.state.v}\n                aria-label=\"input with config of innerBefore\"\n                onChange={this.onChange}\n            /><br /><br />\n\n            <Input\n                innerAfter={<Icon type=\"search\" size=\"xs\" onClick={this.onClick} style={{margin: 4}}/>}\n                placeholder=\"search\"\n                value={this.state.v}\n                aria-label=\"input with config of innerAfter\"\n                onChange={this.onChange}\n            /><br /><br />\n\n            <Input\n                disabled\n                defaultValue=\"hi\"\n                innerAfter={<Icon type=\"calendar\" style={{margin: 4}}/>}\n                aria-label=\"input with config of innerAfter and disabled\" />\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>可以添加水印， 为input前后端增加额外内容</p>\n"},{"title":"最大长度","order":"5","jsx":"import { Input } from '@alifd/next';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            maxLength: 10,\n            control: 'maxLen control'\n        };\n    }\n\n    onChange(v) {\n        console.log(v);\n        this.setState({\n            control: v\n        });\n    }\n\n    onKeyDown(e, opts) {\n        console.log('onKeyDown', opts);\n    }\n\n    render() {\n        return (<div>\n            <Input\n                maxLength={10}\n                size=\"large\"\n                placeholder=\"Large\"\n                value={this.state.control}\n                hasLimitHint\n                aria-label=\"input max length 10\"\n                onChange={this.onChange.bind(this)}\n                onKeyDown={this.onKeyDown.bind(this)} /><br /><br />\n\n            <Input\n                maxLength={20}\n                placeholder=\"medium\"\n                hasLimitHint\n                cutString={false}\n                aria-label=\"input max length 20\"\n                onChange={(v) => {\n                    this.setState({control: v});\n                    console.log(v);\n                }}\n                onKeyDown={(e, opts) => {\n                    console.log('onKeyDown', opts);\n                }} /><br /><br />\n\n            <Input\n                hasLimitHint\n                size=\"small\"\n                placeholder=\"small\"\n                maxLength={100}\n                aria-label=\"input max length 100\" /><br /><br />\n\n            <Input.TextArea\n                placeholder=\"TextArea\"\n                maxLength={100}\n                rows={4}\n                hasLimitHint\n                aria-label=\"input max length 100\" /><br /><br />\n\n            <Input maxLength={5} placeholder=\"Original maxLength\" aria-label=\"input max length 5\" />\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>最大长度 hasLimitHint 会展现限制数字; cutString 可控制是否要切割字符串, 用于只展示最大长度</p>\n"},{"title":"密码输入框","order":"1","jsx":"import { Input } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Input htmlType=\"password\" defaultValue=\"whoami\" aria-label=\"Please input password\"/>\n    </div>\n    , mountNode);\n","css":"","body":"\n<p>设置 <code>Input</code> 为 密码类型；</p>\n"},{"title":"错误状态","order":"4","jsx":"import { Input } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Input state=\"error\"\n            placeholder=\"error\"\n            size=\"small\"\n            aria-live=\"assertive\"\n            aria-label=\"error\" /><br/><br/>\n        <Input state=\"error\"\n            hasLimitHint\n            maxLength={100}\n            placeholder=\"error\"\n            size=\"medium\"\n            aria-live=\"assertive\"\n            aria-label=\"error\" /><br/><br/>\n        <Input state=\"error\"\n            multiple\n            placeholder=\"error\"\n            size=\"small\"\n            aria-live=\"assertive\"\n            aria-label=\"error\" /><br/><br/>\n\n        <Input state=\"success\"\n            size=\"small\"\n            value=\"success\"\n            aria-live=\"assertive\"\n            aria-label=\"success\"/><br/><br/>\n        <Input state=\"success\"\n            maxLength={100}\n            hasLimitHint\n            placeholder=\"success\"\n            size=\"medium\"\n            aria-live=\"assertive\"\n            aria-label=\"success\"/><br/><br/>\n        <Input state=\"success\"\n            placeholder=\"success\"\n            size=\"large\"\n            aria-live=\"assertive\"\n            aria-label=\"success\"/><br/><br/>\n\n        <Input state=\"loading\"\n            placeholder=\"loading\"\n            size=\"small\"\n            aria-live=\"assertive\"\n            aria-label=\"loading\"/><br/><br/>\n        <Input state=\"loading\"\n            placeholder=\"loading\"\n            size=\"medium\"\n            aria-live=\"assertive\"\n            aria-label=\"loading\"/><br/><br/>\n        <Input state=\"loading\"\n            placeholder=\"loading\"\n            size=\"large\"\n            aria-live=\"assertive\"\n            aria-label=\"loading\"/><br/><br/>\n    </div>\n    , mountNode);\n","css":"","body":"\n<p>为 <code>Input</code> 设置 <code>error</code> 状态；</p>\n"},{"title":"自定义样式","order":"11","jsx":"import { Input } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Input placeholder=\"width:400\" style={{width: 400}} aria-label=\"style width 400\" /><br/><br/>\n\n        <Input\n            addonTextBefore=\"http://\"\n            addonTextAfter=\".com\"\n            size=\"medium\"\n            value=\"alibaba\"\n            style={{width: 400}} aria-label=\"style width 400\" /><br/><br/>\n\n        <Input\n            placeholder=\"medium\"\n            maxLength={10}\n            hasLimitHint\n            style={{width: 400}} aria-label=\"style width 400\" /><br/><br/>\n\n        <Input\n            placeholder=\"medium\"\n            hasClear maxLength={10}\n            hasLimitHint style={{width: 400}}\n            className=\"my-input-class\"\n            state=\"success\"\n            aria-label=\"style width 400\" /><br/><br/>\n\n        <Input placeholder=\"className\" className=\"my-input-class\" aria-label=\"custom my input class\" />\n        <Input htmlType=\"hidden\" aria-label=\"hidden input\" />\n    </div>\n    , mountNode);\n","css":"body .my-input-class {\n    width:500px;\n}\n","body":"\n<p>通过style设置宽度</p>\n"},{"title":"去除空格","order":"6","jsx":"import { Input } from '@alifd/next';\n\nclass App extends React.Component {\n    state = {\n        value: ''\n    }\n\n    onChange(value) {\n        console.log('onChange', value);\n        this.setState({\n            value\n        });\n    }\n\n    onKeyDown(e, opts) {\n        console.log('onKeyDown', opts);\n    }\n\n    render() {\n        return (<div>\n            <Input trim placeholder=\"cant not input space\" aria-label=\"cant not input space\"\n                onChange={this.onChange.bind(this)}\n                onKeyDown={this.onKeyDown.bind(this)} />\n        </div>);\n    }\n}\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>onChange返回会自动去除头尾空字符</p>\n"}]},{"name":"Loading","category":"Components","title":"加载","type":"基本","importStatement":"import { Loading } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。\n\n### 注意事项\n\nLoading 默认使用 `display='inline-block'` 布局的方式包裹内部元素。\n\n如果希望 `通栏包裹` 可以修改 `<Loading style={{display: 'block'}} />`\n\n API\n\n### Loading\n\n| 参数         | 说明                                                               | 类型      | 默认值      |\n| ---------- | ---------------------------------------------------------------- | ------- | -------- |\n| tip        | 自定义内容                                                            | any     | -        |\n| size       | 设置动画尺寸<br><br>**可选值**:<br>'large'(大号)<br>'medium'(中号)            | Enum    | 'large'  |\n| tipAlign   | 自定义内容位置<br><br>**可选值**:<br>'right'(出现在动画右边)<br>'bottom'(出现在动画下面) | Enum    | 'bottom' |\n| visible    | loading 状态, 默认 true                                              | Boolean | true     |\n| indicator  | 自定义动画                                                            | any     | -        |\n| color      | 动画颜色                                                             | String  | -        |\n| fullScreen | 全屏展示                                                             | Boolean | -        |\n| children   | 子元素                                                              | any     | -        |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本用法","order":"0","jsx":"import { Loading } from '@alifd/next';\n\nReactDOM.render(<Loading tip=\"loading...\">\n    <div className=\"demo\">test</div>\n</Loading>, mountNode);\n","css":".demo {\n    width: 500px;\n    background-color: #F2F3F7;\n    text-align: center;\n    padding:50px;\n}\n","body":"\n<p>最简单的用法。</p>\n"},{"title":"全屏","order":"3","jsx":"import { Loading, Button } from '@alifd/next';\n\n\n\nclass App extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            visible: false\n        };\n    }\n\n    onClick() {\n        this.setState({visible: !this.state.visible});\n    }\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    }\n\n    render() {\n        return (\n            <span>\n                <Loading visible={this.state.visible} fullScreen shape=\"fusion-reactor\"\n                    onVisibleChange={this.onClose.bind(this)}>\n                    <Button onClick={this.onClick.bind(this)} >Full Screen</Button>\n                </Loading>\n            </span>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>全屏展示</p>\n"},{"title":"自定义Loading动画","order":"1","jsx":"import { Loading } from '@alifd/next';\n\nconst indicator1 = (<div className=\"load-container load1\">\n    <div className=\"loader\">loading...</div>\n</div>);\nconst indicator7 = (<div className=\"load-container load7\">\n    <div className=\"loader\">loading...</div>\n</div>);\n\nReactDOM.render(<div>\n    <Loading tip=\"default animation\">\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading indicator={indicator1}>\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading indicator={indicator7}>\n        <div className=\"demo\">test</div>\n    </Loading>\n</div>, mountNode);\n","css":".demo {\n    width: 500px;\n    background-color: #F2F3F7;\n    text-align: center;\n    padding:50px;\n}\n.next-loading {\n    margin-bottom: 5px;\n}\n\n/* start copy from here */\n\n\n.load-container {\n  margin: 0 auto;\n  position: relative;\n}\n\n/* animation 1 */\n.load1 .loader,\n.load1 .loader:before,\n.load1 .loader:after {\n  background: #5584FF;\n  color: #5584FF;\n  -webkit-animation: load1 1s infinite ease-in-out;\n  animation: load1 1s infinite ease-in-out;\n  width: 1em;\n  height: 4em;\n}\n.load1 .loader:before,\n.load1 .loader:after {\n  position: absolute;\n  top: 0;\n  content: '';\n}\n.load1 .loader:before {\n  left: -1.5em;\n  -webkit-animation-delay: -0.32s;\n  animation-delay: -0.32s;\n}\n.load1 .loader {\n  text-indent: -9999em;\n  margin: 0 auto !important;\n  position: relative;\n  font-size: 11px;\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n}\n.load1 .loader:after {\n  left: 1.5em;\n}\n@-webkit-keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 ;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em ;\n    height: 5em;\n  }\n}\n@keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 ;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em ;\n    height: 5em;\n  }\n}\n\n\n/* animation 2 */\n.load7 .loader:before,\n.load7 .loader:after,\n.load7 .loader {\n  border-radius: 50%;\n  width: 2.5em;\n  height: 2.5em;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation: load7 1.8s infinite ease-in-out;\n  animation: load7 1.8s infinite ease-in-out;\n  top: -36px;\n}\n.load7 .loader {\n  margin: 0 auto !important;\n  font-size: 10px;\n  position: relative;\n  text-indent: -9999em;\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n}\n.load7 .loader:before {\n  left: -3.5em;\n  -webkit-animation-delay: -0.32s;\n  animation-delay: -0.32s;\n}\n.load7 .loader:after {\n  left: 3.5em;\n}\n.load7 .loader:before,\n.load7 .loader:after {\n  content: '';\n  position: absolute;\n  top: 0;\n}\n@-webkit-keyframes load7 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 2.5em 0 -1.3em #5584FF;\n  }\n  40% {\n    box-shadow: 0 2.5em 0 0 #5584FF;\n  }\n}\n@keyframes load7 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 2.5em 0 -1.3em #5584FF;\n  }\n  40% {\n    box-shadow: 0 2.5em 0 0 #5584FF;\n  }\n}\n","body":"\n<p>你可以自定义动画，把自己的动画元素传进去, 需要自己写动画样式</p>\n"},{"title":"Loading动画尺寸","order":"6","jsx":"import { Loading } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Loading tip=\"normal(size default large)\" >\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading tip=\"large\" size=\"large\">\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading tip=\"medium\" size=\"medium\">\n        <div className=\"demo\">test</div>\n    </Loading>\n</div>, mountNode);\n","css":".demo {\n    width: 500px;\n    background-color: #F2F3F7;\n    text-align: center;\n    padding:50px;\n}\n.next-loading {\n    margin-bottom: 5px;\n}\n","body":"\n<p>设置Loading动画的尺寸,只对原生的indicator管用</p>\n"},{"title":"关闭加载","order":"2","jsx":"import { Loading, Form, Input, Button } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nconst layout = {\n    labelCol: {\n        fixedSpan: 4\n    },\n    wrapperCol: {\n        span: 18\n    }\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false\n        };\n    }\n\n    setVisible(visible) {\n        this.setState({\n            visible\n        });\n    }\n    render() {\n        return (<div>\n            <Loading visible={this.state.visible} shape=\"fusion-reactor\">\n                <Form style={{width: 500}}>\n                    <FormItem label=\"Username\" {...layout} >\n                        <Input />\n                    </FormItem>\n                    <FormItem label=\"Password\"  {...layout} >\n                        <Input htmlType=\"password\" placeholder=\"please input\"/>\n                    </FormItem>\n                    <FormItem label=\"Detail\" {...layout} >\n                        <Input multiple  />\n                    </FormItem>\n                </Form>\n            </Loading>\n            <div style={{paddingLeft: 80}}>\n                <Button onClick={this.setVisible.bind(this, true)} type=\"primary\">Submit</Button>\n                <Button onClick={this.setVisible.bind(this, false)} style={{marginLeft: 5}}>Cancel</Button>\n            </div>\n        </div>);\n    }\n}\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>可切换加载状态。</p>\n"},{"title":"自定义提示语位置","order":"5","jsx":"import { Loading } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Loading tip=\"default\">\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading tip=\"right\" tipAlign=\"right\">\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading tip=\"bottom\" tipAlign=\"bottom\">\n        <div className=\"demo\">test</div>\n    </Loading>\n</div>, mountNode);\n","css":".demo {\n    width: 500px;\n    background-color: #F2F3F7;\n    text-align: center;\n    padding:50px;\n}\n.next-loading {\n    margin-bottom: 5px;\n}\n","body":"\n<p>你可以选择提示语的位置,目前支持两个值 right/bottom(默认值)</p>\n"}]},{"name":"MenuButton","category":"Components","title":"菜单按钮","type":"基本","importStatement":"import { MenuButton } from '@alifd/next';","body":"\n## 使用指南\n\n1.  通过触发按钮打开弹层菜单。支持透传所有的 Button 属性。\n2.  子组件 `Item`, `Group`, `Divider` 即 `Menu` 中对应的子组件，请参考 Menu 文档。\n\n API\n\n### MenuButton\n\n| 参数                  | 说明                                                    | 类型        | 默认值       |\n| ------------------- | ----------------------------------------------------- | --------- | --------- |\n| label               | 按钮上的文本内容                                              | ReactNode | -         |\n| autoWidth           | 弹层是否与按钮宽度相同                                           | Boolean   | true      |\n| popupTriggerType    | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'            | Enum      | 'click'   |\n| popupContainer      | 弹层容器<br><br>**签名**:<br>Function() => void             | Function  | -         |\n| visible             | 弹层展开状态                                                | Boolean   | -         |\n| defaultVisible      | 弹层默认是否展开                                              | Boolean   | -         |\n| onVisibleChange     | 弹层在显示和隐藏触发的事件<br><br>**签名**:<br>Function() => void    | Function  | func.noop |\n| popupStyle          | 弹层自定义样式                                               | Object    | -         |\n| popupClassName      | 弹层自定义样式类                                              | String    | -         |\n| popupProps          | 弹层属性透传                                                | Object    | -         |\n| defaultSelectedKeys | 默认激活的菜单项（用法同 Menu 非受控）                                | Array     | \\[]       |\n| selectedKeys        | 激活的菜单项（用法同 Menu 受控）                                   | Array     | -         |\n| selectMode          | 菜单的选择模式，同 Menu                                        | String    | -         |\n| onItemClick         | 点击菜单项后的回调，同 Menu<br><br>**签名**:<br>Function() => void | Function  | func.noop |\n| onSelect            | 选择菜单后的回调，同 Menu<br><br>**签名**:<br>Function() => void  | Function  | func.noop |\n| menuProps           | 菜单属性透传                                                | Object    | {}        |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { MenuButton } from '@alifd/next';\n\nconst { Item } = MenuButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nReactDOM.render(<div>\n    <MenuButton label=\"Document Edit\">{menu}</MenuButton>&nbsp;&nbsp;\n    <MenuButton type=\"primary\" label=\"Document Edit\">{menu}</MenuButton>&nbsp;&nbsp;\n    <MenuButton type=\"secondary\" label=\"Document Edit\">{menu}</MenuButton><br /><br />\n    <MenuButton text label=\"Document Edit\">{menu}</MenuButton>&nbsp;&nbsp;\n    <MenuButton text type=\"primary\" label=\"Document Edit\">{menu}</MenuButton>&nbsp;&nbsp;\n    <MenuButton text type=\"secondary\" label=\"Document Edit\">{menu}</MenuButton>\n</div>, mountNode);\n","css":"","body":"\n<p>最简单的用法。支持 Button 的 shape, type, size, component, ghost 等属性透传。</p>\n"},{"title":"菜单组","order":"2","jsx":"import { MenuButton } from '@alifd/next';\n\nconst { Item, Group, Divider } = MenuButton;\n\nfunction selectItem(id) {\n    console.log(id);\n}\n\nReactDOM.render(<MenuButton type=\"primary\" label=\"Document Edit\" onItemClick={selectItem}>\n    <Item key=\"undo\">Undo</Item>\n    <Item key=\"redo\">Redo</Item>\n    <Divider />\n    <Group>\n        <Item key=\"cut\">Cut</Item>\n        <Item key=\"copy\">Copy</Item>\n        <Item key=\"paste\">Paste</Item>\n    </Group>\n</MenuButton>, mountNode);\n","css":"","body":"\n<p>支持菜单组和菜单分割线，使用方法同 <code>Menu.Group</code>, <code>Menu.Item</code>, <code>Menu.Divider</code>。</p>\n"},{"title":"菜单选择模式","order":"3","jsx":"import { MenuButton } from '@alifd/next';\n\nconst { Item } = MenuButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nReactDOM.render(<div>\n    <MenuButton label=\"Document Edit\" selectMode=\"single\" onSelect={keys => console.log(keys)}>{menu}</MenuButton>\n</div>, mountNode);\n","css":"","body":"\n<p>通过 selectMode 控制菜单的选择模式。</p>\n"},{"title":"尺寸","order":"1","jsx":"import { MenuButton } from '@alifd/next';\n\nconst { Item } = MenuButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nReactDOM.render(<div>\n    <MenuButton label=\"Edit Document\" size=\"small\">{menu}</MenuButton> &nbsp; &nbsp;\n    <MenuButton label=\"Edit Document\" size=\"medium\">{menu}</MenuButton> &nbsp; &nbsp;\n    <MenuButton label=\"Edit Document\" size=\"large\">{menu}</MenuButton>\n</div>, mountNode);\n","css":"","body":"\n<p>可以通过 size 属性改变按钮大小。</p>\n"}]},{"name":"Menu","category":"Components","title":"菜单","type":"展示","importStatement":"import { Menu } from '@alifd/next';","body":"\n API\n\n### Menu\n\n| 参数                  | 说明                                                                                                                                                                                                                                                                                                                                                              | 类型              | 默认值        |\n| ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- | ---------- |\n| children            | 菜单项和子菜单                                                                                                                                                                                                                                                                                                                                                         | ReactNode       | -          |\n| onItemClick         | 点击菜单项触发的回调函数<br><br>**签名**:<br>Function(key: String, item: Object, event: Object) => void<br>**参数**:<br>_key_: {String} 点击的菜单项的 key 值<br>_item_: {Object} 点击的菜单项对象<br>_event_: {Object} 点击的事件对象                                                                                                                                                                 | Function        | () => {}   |\n| openKeys            | 当前打开的子菜单的 key 值                                                                                                                                                                                                                                                                                                                                                 | String/Array    | -          |\n| defaultOpenKeys     | 初始打开的子菜单的 key 值                                                                                                                                                                                                                                                                                                                                                 | String/Array    | \\[]        |\n| defaultOpenAll      | 初始展开所有的子菜单，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效，优先级高于 defaultOpenKeys                                                                                                                                                                                                                                                                            | Boolean         | false      |\n| onOpen              | 打开或关闭子菜单触发的回调函数<br><br>**签名**:<br>Function(key: String, extra: Object) => void<br>**参数**:<br>_key_: {String} 打开的所有子菜单的 key 值<br>_extra_: {Object} 额外参数<br>_extra.key_: {String} 当前操作子菜单的 key 值<br>_extra.open_: {Boolean} 是否是打开                                                                                                                                 | Function        | () => {}   |\n| mode                | 子菜单打开的模式<br><br>**可选值**:<br>'inline', 'popup'                                                                                                                                                                                                                                                                                                                   | Enum            | 'inline'   |\n| triggerType         | 子菜单打开的触发行为<br><br>**可选值**:<br>'click', 'hover'                                                                                                                                                                                                                                                                                                                  | Enum            | 'click'    |\n| openMode            | 展开内连子菜单的模式，同时可以展开一个子菜单还是多个子菜单，该属性仅在 mode 为 inline 时生效<br><br>**可选值**:<br>'single', 'multiple'                                                                                                                                                                                                                                                                   | Enum            | 'multiple' |\n| inlineIndent        | 内连子菜单缩进距离                                                                                                                                                                                                                                                                                                                                                       | Number          | 20         |\n| popupAutoWidth      | 是否自动让弹层的宽度和菜单项保持一致，如果弹层的宽度比菜单项小则和菜单项保持一致，如果宽度大于菜单项则不做处理                                                                                                                                                                                                                                                                                                         | Boolean         | false      |\n| popupAlign          | 弹层的对齐方式<br><br>**可选值**:<br>'follow', 'outside'                                                                                                                                                                                                                                                                                                                  | Enum            | 'follow'   |\n| popupProps          | 弹层自定义 props                                                                                                                                                                                                                                                                                                                                                     | Object/Function | {}         |\n| popupClassName      | 弹出子菜单自定义 className                                                                                                                                                                                                                                                                                                                                              | String          | -          |\n| popupStyle          | 弹出子菜单自定义 style                                                                                                                                                                                                                                                                                                                                                  | Object          | -          |\n| selectedKeys        | 当前选中菜单项的 key 值                                                                                                                                                                                                                                                                                                                                                  | String/Array    | -          |\n| defaultSelectedKeys | 初始选中菜单项的 key 值                                                                                                                                                                                                                                                                                                                                                  | String/Array    | \\[]        |\n| onSelect            | 选中或取消选中菜单项触发的回调函数<br><br>**签名**:<br>Function(selectedKeys: Array, item: Object, extra: Object) => void<br>**参数**:<br>_selectedKeys_: {Array} 选中的所有菜单项的值<br>_item_: {Object} 选中或取消选中的菜单项<br>_extra_: {Object} 额外参数<br>_extra.select_: {Boolean} 是否是选中<br>_extra.key_: {Array} 菜单项的 key<br>_extra.label_: {Object} 菜单项的文本<br>_extra.keyPath_: {Array} 菜单项 key 的路径 | Function        | () => {}   |\n| selectMode          | 选中模式，单选还是多选，默认无值，不可选<br><br>**可选值**:<br>'single', 'multiple'                                                                                                                                                                                                                                                                                                    | Enum            | -          |\n| shallowSelect       | 是否只能选择第一层菜单项（不能选择子菜单中的菜单项）                                                                                                                                                                                                                                                                                                                                      | Boolean         | false      |\n| hasSelectedIcon     | 是否显示选中图标，如果设置为 false 需配合配置平台设置选中时的背景色以示区分                                                                                                                                                                                                                                                                                                                       | Boolean         | true       |\n| direction           | 菜单第一层展示方向<br><br>**可选值**:<br>'ver', 'hoz'                                                                                                                                                                                                                                                                                                                       | Enum            | 'ver'      |\n| hozAlign            | 横向菜单条 item 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效<br><br>**可选值**:<br>'left', 'right'                                                                                                                                                                                                                                                              | Enum            | 'left'     |\n| header              | 自定义菜单头部                                                                                                                                                                                                                                                                                                                                                         | ReactNode       | -          |\n| footer              | 自定义菜单尾部                                                                                                                                                                                                                                                                                                                                                         | ReactNode       | -          |\n| autoFocus           | 是否自动获得焦点                                                                                                                                                                                                                                                                                                                                                        | Boolean         | false      |\n| focusedKey          | 当前获得焦点的子菜单或菜单项 key 值                                                                                                                                                                                                                                                                                                                                            | String          | -          |\n\n### Menu.Item\n\n| 参数       | 说明      | 类型        | 默认值   |\n| -------- | ------- | --------- | ----- |\n| disabled | 是否禁用    | Boolean   | false |\n| helper   | 帮助文本    | ReactNode | -     |\n| children | 菜单项标签内容 | ReactNode | -     |\n\n### Menu.SubMenu\n\n| 参数         | 说明                                                               | 类型        | 默认值             |\n| ---------- | ---------------------------------------------------------------- | --------- | --------------- |\n| label      | 标签内容                                                             | ReactNode | -               |\n| selectable | 是否可选，该属性仅在设置 Menu 组件 selectMode 属性后生效                            | Boolean   | false           |\n| mode       | 子菜单打开方式，如果设置会覆盖 Menu 上的同名属性<br><br>**可选值**:<br>'inline', 'popup' | Enum      | Menu 的 mode 属性值 |\n| children   | 菜单项或下一级子菜单                                                       | ReactNode | -               |\n\n### Menu.PopupItem\n\n| 参数       | 说明      | 类型        | 默认值 |\n| -------- | ------- | --------- | --- |\n| label    | 标签内容    | ReactNode | -   |\n| children | 自定义弹层内容 | ReactNode | -   |\n\n### Menu.CheckboxItem\n\n> 该子组件选中情况不受 defaultSelectedKeys/selectedKeys 控制，请自行控制选中逻辑\n\n| 参数            | 说明                                                                                                                                                     | 类型        | 默认值      |\n| ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ | --------- | -------- |\n| checked       | 是否选中                                                                                                                                                   | Boolean   | false    |\n| indeterminate | 是否半选中                                                                                                                                                  | Boolean   | false    |\n| disabled      | 是否禁用                                                                                                                                                   | Boolean   | false    |\n| onChange      | 选中或取消选中触发的回调函数<br><br>**签名**:<br>Function(checked: Boolean, event: Object) => void<br>**参数**:<br>_checked_: {Boolean} 是否选中<br>_event_: {Object} 选中事件对象 | Function  | () => {} |\n| helper        | 帮助文本                                                                                                                                                   | ReactNode | -        |\n| children      | 标签内容                                                                                                                                                   | ReactNode | -        |\n\n### Menu.RadioItem\n\n> 该子组件选中情况不受 defaultSelectedKeys/selectedKeys 控制，请自行控制选中逻辑\n\n| 参数       | 说明                                                                                                                                                     | 类型        | 默认值      |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ | --------- | -------- |\n| checked  | 是否选中                                                                                                                                                   | Boolean   | false    |\n| disabled | 是否禁用                                                                                                                                                   | Boolean   | false    |\n| onChange | 选中或取消选中触发的回调函数<br><br>**签名**:<br>Function(checked: Boolean, event: Object) => void<br>**参数**:<br>_checked_: {Boolean} 是否选中<br>_event_: {Object} 选中事件对象 | Function  | () => {} |\n| helper   | 帮助文本                                                                                                                                                   | ReactNode | -        |\n| children | 标签内容                                                                                                                                                   | ReactNode | -        |\n\n### Menu.Group\n\n| 参数       | 说明   | 类型        | 默认值 |\n| -------- | ---- | --------- | --- |\n| label    | 标签内容 | ReactNode | -   |\n| children | 菜单项  | ReactNode | -   |\n\n### Menu.Divider\n\n<!-- api-extra-start -->\n\n### Menu.create(props)\n\n创建上下文菜单。\n\n-   props 参数可传入 Menu 所有支持的 props\n-   props 额外支持 overlayProps，用来自定义 Menu 所在的弹层\n\n<!-- api-extra-end -->\n\n## ARIA and KeyBoard\n\n| 按键          | 说明                              |\n| :---------- | :------------------------------ |\n| Up Arrow    | 导航到上一项                          |\n| Down Arrow  | 导航到下一项                          |\n| Right Arrow | 打开子菜单，导航到子菜单第一项；横向菜单条第一层，导航到右一项 |\n| Left Arrow  | 关闭子菜单，导航到父级菜单；横向菜单条第一层，导航都左一项   |\n| Enter       | 打开子菜单，导航到子菜单第一项                 |\n| Esc         | 关闭子菜单，导航到父级菜单                   |\n| SPACE       | 切换选中状态                          |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"内连菜单展开模式","order":"1","jsx":"import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item } = Menu;\n\nReactDOM.render(\n    <Menu defaultOpenKeys=\"1\" className=\"my-menu\" openMode=\"single\">\n        <SubMenu key=\"0\" label=\"Sub menu 1\">\n            <Item key=\"0-0\">Sub option 1</Item>\n            <Item key=\"0-1\">Sub option 2</Item>\n            <Item key=\"0-2\">Sub option 3</Item>\n        </SubMenu>\n        <SubMenu key=\"1\" label=\"Sub menu 2\">\n            <Item key=\"1-0\">Sub option 1</Item>\n            <Item key=\"1-1\">Sub option 2</Item>\n            <Item key=\"1-2\">Sub option 3</Item>\n        </SubMenu>\n        <SubMenu key=\"2\" label=\"Sub menu 3\">\n            <Item key=\"2-0\">Sub option 1</Item>\n            <Item key=\"2-1\">Sub option 2</Item>\n            <Item key=\"2-2\">Sub option 3</Item>\n        </SubMenu>\n        <SubMenu key=\"3\" label=\"Sub menu 4\">\n            <Item key=\"3-0\">Sub option 1</Item>\n            <Item key=\"3-1\">Sub option 2</Item>\n            <Item key=\"3-2\">Sub option 3</Item>\n        </SubMenu>\n    </Menu>\n    , mountNode);\n","css":".my-menu {\n    width: 200px;\n}\n","body":"\n<p>通过设置 openMode 为 &#39;single&#39;，可以让菜单同时只能展开一个内连子菜单，默认为可以同时展开多个。</p>\n"},{"title":"基本","order":"0","jsx":"import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item, Group, Divider } = Menu;\n\nReactDOM.render(\n    <Menu className=\"my-menu\" defaultOpenKeys=\"sub-menu\">\n        <Item key=\"1\">Option 1</Item>\n        <Item disabled key=\"2\">Disabled option 2</Item>\n        <Divider key=\"divider\" />\n        <Group label=\"Group\">\n            <Item key=\"group-1\">Group option 1</Item>\n            <Item key=\"group-2\">Group option 2</Item>\n        </Group>\n        <Divider />\n        <SubMenu key=\"sub-menu\" label=\"Sub menu\">\n            <Item key=\"sub-1\">Sub option 1</Item>\n            <Item key=\"sub-2\">Sub option 2</Item>\n            <Item disabled key=\"sub-3\">\n                <a href=\"https://www.taobao.com/\" target=\"__blank\">Disabled Option Link 3</a>\n            </Item>\n            <Item key=\"sub-4\">\n                <a href=\"https://www.taobao.com/\" target=\"__blank\">Option Link 4</a>\n            </Item>\n        </SubMenu>\n        <Item key=\"3\" helper=\"CTRL+P\">Option 3</Item>\n        <Item disabled key=\"4\">\n            <a href=\"https://www.taobao.com/\" target=\"__blank\">Disabled Option Link</a>\n        </Item>\n        <Item key=\"5\">\n            <a href=\"https://www.taobao.com/\" target=\"__blank\">Option Link</a>\n        </Item>\n    </Menu>\n    , mountNode);\n","css":".my-menu {\n    width: 200px;\n}\n","body":"\n<p>展示最基本的用法。</p>\n"},{"title":"创建上下文菜单","order":"9","jsx":"import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item, Divider } = Menu;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedKeys: []\n        };\n\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(selectedKeys) {\n        selectedKeys = selectedKeys.filter(key => {\n            return ['sub-1', 'sub-2'].indexOf(key) > -1;\n        });\n        this.setState({\n            selectedKeys\n        });\n    }\n\n    createContextMenu = e => {\n        e.preventDefault();\n\n        const target = e.target;\n        const { top, left } = target.getBoundingClientRect();\n\n        Menu.create({\n            target: e.target,\n            offset: [e.clientX - left, e.clientY - top],\n            className: 'context-menu',\n            popupClassName: 'context-menu',\n            onItemClick: console.log,\n            selectedKeys: this.state.selectedKeys,\n            selectMode: 'multiple',\n            onSelect: this.handleSelect,\n            children: [\n                <Item key=\"1\">Option 1</Item>,\n                <Item key=\"2\">Option 2</Item>,\n                <Item key=\"3\">Option 3</Item>,\n                <Divider key=\"divider-1\" />,\n                <SubMenu key=\"sub-menu\" label=\"Sub menu\">\n                    <Item key=\"sub-1\">Sub option 1</Item>\n                    <Item key=\"sub-2\">Sub option 2</Item>\n                </SubMenu>,\n                <Item key=\"4\">Option 4</Item>,\n                <Divider key=\"divider-2\" />,\n                <Item key=\"5\">Option 5</Item>\n            ]\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"context-demo\" onContextMenu={this.createContextMenu}>\n                Right click here to see the context menu!\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".context-demo {\n    width: 500px;\n    height: 200px;\n    line-height: 200px;\n    text-align: center;\n    background: #DDD;\n    border: 1px solid black;\n}\n\n.context-menu {\n    width: 120px;\n}\n","body":"\n<p>展示如何创建自定义的上下文菜单。</p>\n"},{"title":"自定义菜单项选择","order":"7","jsx":"import { Menu } from '@alifd/next';\n\nconst { CheckboxItem, RadioItem, Divider } = Menu;\n\nconst sexs = ['male', 'female'];\nconst balls = ['football', 'basketball', 'volleyball'];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            sex: 'male',\n            balls: []\n        };\n\n        this.handleSexCheck = this.handleSexCheck.bind(this);\n        this.handleBallCheck = this.handleBallCheck.bind(this);\n    }\n\n    handleSexCheck(key) {\n        this.setState({\n            sex: key\n        });\n    }\n\n    handleBallCheck(key, check) {\n        let newKeys;\n        const index = this.state.balls.indexOf(key);\n        if (check && index === -1) {\n            newKeys = this.state.balls.concat(key);\n        } else if (!check && index > -1) {\n            newKeys = [\n                ...this.state.balls.slice(0, index),\n                ...this.state.balls.slice(index + 1)\n            ];\n        }\n\n        if (newKeys) {\n            this.setState({\n                balls: newKeys\n            });\n        }\n    }\n\n    render() {\n        return (\n            <Menu className=\"my-menu\">\n                {sexs.map(sex => (\n                    <RadioItem key={sex} checked={this.state.sex === sex} onChange={this.handleSexCheck.bind(this, sex)}>\n                        {sex}\n                    </RadioItem>\n                ))}\n                <Divider key=\"divider\" />\n                {balls.map(ball => (\n                    <CheckboxItem key={ball} checked={this.state.balls.indexOf(ball) > -1} onChange={this.handleBallCheck.bind(this, ball)}>\n                        {ball}\n                    </CheckboxItem>\n                ))}\n            </Menu>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".my-menu {\n    width: 200px;\n}\n","body":"\n<p>展示自定义组合菜单项可选的用法。</p>\n"},{"title":"自定义弹出内容","order":"5","jsx":"import { Menu } from '@alifd/next';\n\nconst { PopupItem } = Menu;\n\nclass Demo extends React.Component {\n    render() {\n        const popupProps = {\n            target: () => ReactDOM.findDOMNode(this),\n            offset: [-1, 0],\n            animation: false\n        };\n\n        return (\n            <Menu className=\"my-custom-menu\" popupProps={popupProps}>\n                <PopupItem key=\"0\" label=\"Popup item 1\">\n                    <div className=\"my-custom-content\">Custom content 1</div>\n                </PopupItem>\n                <PopupItem key=\"1\" label=\"Popup item 2\">\n                    <div className=\"my-custom-content\">Custom content 2</div>\n                </PopupItem>\n                <PopupItem key=\"2\" label=\"Popup item 3\">\n                    <div className=\"my-custom-content\">Custom content 3</div>\n                </PopupItem>\n                <PopupItem key=\"3\" label=\"Popup item 4\">\n                    <div className=\"my-custom-content\">Custom content 4</div>\n                </PopupItem>\n            </Menu>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".my-custom-menu {\n    width: 200px;\n    border: 1px solid #ccc;\n    padding: 0;\n    box-shadow: none;\n    z-index: 1000;\n}\n\n.my-custom-content {\n    width: 400px;\n    height: 200px;\n    background: #fff;\n    border: 1px solid #ccc;\n    line-height: 200px;\n    text-align: center;\n    font-size: 20px;\n}\n","body":"\n<p>自定义菜单弹出内容。</p>\n"},{"title":"hover 打开子菜单","order":"3","jsx":"import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item, Divider } = Menu;\n\nReactDOM.render(\n    <Menu className=\"my-menu\" mode=\"popup\" triggerType=\"hover\">\n        <Item key=\"1\">Option 1</Item>\n        <Item key=\"2\">Option 2</Item>\n        <Item key=\"3\">Option 3</Item>\n        <Divider key=\"divider\" />\n        <SubMenu key=\"sub-1\" label=\"Popup menu 1\">\n            <Item key=\"popup-1-1\">Popup option 1</Item>\n            <Item key=\"popup-1-2\">Popup option 2</Item>\n        </SubMenu>\n        <SubMenu key=\"sub-2\" label=\"Popup menu 2\">\n            <Item key=\"popup-2-1\">Popup option 1</Item>\n            <Item key=\"popup-2-2\">Popup option 2</Item>\n        </SubMenu>\n    </Menu>\n    , mountNode);\n","css":".my-menu {\n    width: 200px;\n}\n","body":"\n<p>可以设置 triggerType 为 &#39;hover&#39;，来 hover 打开子菜单，默认点击打开子菜单。</p>\n"},{"title":"横向菜单条","order":"8","jsx":"import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item } = Menu;\n\nReactDOM.render(\n    <Menu header=\"aaa\" direction=\"hoz\" mode=\"popup\" className=\"my-hoz-menu\" popupClassName=\"my-hoz-menu\" popupAutoWidth>\n        <Item key=\"1\">First</Item>\n        <Item key=\"2\">Second</Item>\n        <SubMenu label=\"Sub Nav\">\n            <Item key=\"sub-1\">Sub option 1</Item>\n            <Item key=\"sub-2\">Sub option 2</Item>\n            <SubMenu label=\"Sub Sub Nav\">\n                <Item key=\"sub-sub-1\">Sub sub option 1</Item>\n                <Item key=\"sub-sub-2\">Sub sub option 2</Item>\n            </SubMenu>\n        </SubMenu>\n        <Item key=\"3\">Third</Item>\n    </Menu>\n    , mountNode);\n","css":".my-hoz-menu .next-menu-item {\n    width: 160px;\n}\n","body":"\n<p>展示横向导航菜单条的用法。</p>\n"},{"title":"弹出菜单对齐方式","order":"4","jsx":"import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item, Divider } = Menu;\n\nReactDOM.render(\n    <Menu className=\"my-menu\" mode=\"popup\" popupAlign=\"outside\">\n        <Item key=\"1\">Option 1</Item>\n        <Item key=\"2\">Option 2</Item>\n        <Item key=\"3\">Option 3</Item>\n        <Divider key=\"divider\" />\n        <SubMenu key=\"sub-1\" label=\"Popup menu 1\">\n            <Item key=\"popup-1-1\">Popup option 1</Item>\n            <Item key=\"popup-1-2\">Popup option 2</Item>\n        </SubMenu>\n        <SubMenu key=\"sub-2\" label=\"Popup menu 2\">\n            <Item key=\"popup-2-1\">Popup option 1</Item>\n            <Item key=\"popup-2-2\">Popup option 2</Item>\n        </SubMenu>\n    </Menu>\n    , mountNode);\n","css":".my-menu {\n    width: 200px;\n}\n","body":"\n<p>可以通过设置 popupAlign 为 &#39;outside&#39;，使弹出菜单和父级菜单对齐。</p>\n"},{"title":"弹出菜单","order":"2","jsx":"import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item, Divider } = Menu;\n\nReactDOM.render(\n    <Menu className=\"my-menu\" mode=\"popup\">\n        <Item key=\"1\">Option 1</Item>\n        <Item key=\"2\">Option 2</Item>\n        <Item key=\"3\">Option 3</Item>\n        <Divider key=\"divider\" />\n        <SubMenu key=\"sub-1\" label=\"Popup menu 1\">\n            <Item key=\"popup-1-1\">Popup option 1</Item>\n            <Item key=\"popup-1-2\">Popup option 2</Item>\n        </SubMenu>\n        <SubMenu key=\"sub-2\" label=\"Popup menu 2\">\n            <Item key=\"popup-2-1\">Popup option 1</Item>\n            <Item key=\"popup-2-2\">Popup option 2</Item>\n        </SubMenu>\n    </Menu>\n    , mountNode);\n","css":".my-menu {\n    width: 200px;\n}\n","body":"\n<p>展示弹出菜单的用法。</p>\n"},{"title":"菜单项选择","order":"6","jsx":"import { Switch, Menu } from '@alifd/next';\n\nconst { SubMenu, Item } = Menu;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            multiple: false,\n            subMenuSelectable: false,\n            shallowSelect: false,\n            selectedKeys: ['1']\n        };\n\n        [\n            'handleMultipleChange', 'handleSubMenuSelectableChange',\n            'handleShallowSelectChange', 'handleSelect'\n        ].forEach(method => {\n            this[method] = this[method].bind(this);\n        });\n    }\n\n    handleMultipleChange() {\n        this.setState({\n            multiple: !this.state.multiple,\n            selectedKeys: []\n        });\n    }\n\n    handleSubMenuSelectableChange() {\n        this.setState({\n            subMenuSelectable: !this.state.subMenuSelectable,\n            selectedKeys: []\n        });\n    }\n\n    handleShallowSelectChange() {\n        this.setState({\n            shallowSelect: !this.state.shallowSelect,\n            selectedKeys: []\n        });\n    }\n\n    handleSelect(selectedKeys, ...others) {\n        this.setState({\n            selectedKeys\n        });\n\n        console.log(selectedKeys, ...others);\n    }\n\n    render() {\n        const { multiple, subMenuSelectable, shallowSelect, selectedKeys } = this.state;\n        const selectMode = multiple ? 'multiple' : 'single';\n\n        return (\n            <div>\n                <div>\n                    <span className=\"my-switch-label\">Multiple </span>\n                    <Switch value={multiple} onChange={this.handleMultipleChange} />\n                </div>\n                <div>\n                    <span className=\"my-switch-label\">Label of submenu selectable </span>\n                    <Switch value={multiple} onChange={this.handleSubMenuSelectableChange} />\n                </div>\n                <div>\n                    <span className=\"my-switch-label\">Only first level selectable </span>\n                    <Switch value={multiple} onChange={this.handleShallowSelectChange} />\n                </div>\n                <Menu className=\"my-select-menu\" defaultOpenKeys={['sub']} selectMode={selectMode} selectedKeys={selectedKeys} shallowSelect={shallowSelect} onSelect={this.handleSelect}>\n                    <Item key=\"1\">Option 1</Item>\n                    <Item disabled key=\"2\">Disabled option 2</Item>\n                    <SubMenu key=\"sub\" label=\"Sub menu\" selectable={subMenuSelectable}>\n                        <Item key=\"sub-1\">Sub option 1</Item>\n                        <Item key=\"sub-2\">Sub option 2</Item>\n                    </SubMenu>\n                    <Item key=\"3\">Option 3</Item>\n                </Menu>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".my-switch-label {\n    vertical-align: super;\n}\n\n.my-select-menu {\n    margin-top: 10px;\n    width: 200px;\n}\n","body":"\n<p>展示菜单项选择用法。</p>\n"}]},{"name":"Message","category":"Components","title":"信息提示","type":"展示","importStatement":"import { Message } from '@alifd/next';","body":"\n## 开发指南\n\n API\n\n### Message\n\n| 参数             | 说明                                                                                 | 类型        | 默认值       |\n| -------------- | ---------------------------------------------------------------------------------- | --------- | --------- |\n| size           | 反馈大小<br><br>**可选值**:<br>'medium', 'large'                                          | Enum      | 'medium'  |\n| type           | 反馈类型<br><br>**可选值**:<br>'success', 'warning', 'error', 'notice', 'help', 'loading' | Enum      | 'success' |\n| shape          | 反馈外观<br><br>**可选值**:<br>'inline', 'addon', 'toast'                                 | Enum      | 'inline'  |\n| title          | 标题                                                                                 | ReactNode | -         |\n| children       | 内容                                                                                 | ReactNode | -         |\n| defaultVisible | 默认是否显示                                                                             | Boolean   | true      |\n| visible        | 当前是否显示                                                                             | Boolean   | -         |\n| iconType       | 显示的图标类型，会覆盖内部设置的IconType                                                           | String    | -         |\n| closeable      | 显示关闭按钮                                                                             | Boolean   | false     |\n| onClose        | 关闭按钮的回调<br><br>**签名**:<br>Function() => void                                       | Function  | () => {}  |\n| afterClose     | 关闭之后调用的函数<br><br>**签名**:<br>Function() => void                                     | Function  | () => {}  |\n| animation      | 是否开启展开收起动画                                                                         | Boolean   | true      |\n\n<!-- api-extra-start -->\n\n### Message.show\n\n`Message.show(props)` 提供一个单例的调用方式，配置参数如下（继承 `Overlay` 的配置）：\n\n| 参数           | 说明                    | 类型        | 默认值       |\n| ------------ | --------------------- | --------- | --------- |\n| type         | 反馈类型                  | String    | 'success' |\n| title        | 反馈标题                  | ReactNode | -         |\n| content      | 反馈内容                  | ReactNode | -         |\n| duration     | 显示持续时间，0表示一直存在，以毫秒为单位 | Number    | 3000      |\n| align        | 对齐方式，参考Overlay        | String    | 'tc tc'   |\n| offset       | 对齐之后的偏移位置             | Array     | [0, 0]    |\n| hasMask      | 是否带有遮罩                | Boolean   | false     |\n| closeable    | 显示关闭按钮                | Boolean   | false     |\n| afterClose   | 关闭事件的回调函数             | Function  | -         |\n| overlayProps | 透传到弹层的属性对象            | Object    | -         |\n\n示例：\n\n```js\nMessage.show({\n    type: 'error',\n    title: '错误',\n    content: '请联系相关人员反馈！',\n    hasMask: true\n});\n```\n\n### Message.hide\n\n`Message.hide()` 提供关闭反馈弹层的快捷方法。\n\n### Message.[success|error|notice|help|loading]\n\n`Message.show({type: type, title: 'xxx'});` 的便捷调用方法。\n\n示例：\n\n```js\nMessage.success('反馈内容');\n\n// 或者\nMessage.success({\n    title: '反馈内容',\n    duration: 1000\n});\n```\n\n<!-- api-extra-end -->\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"受控显示隐藏","order":"4","jsx":"import { Message, Button } from '@alifd/next';\n\nclass App extends React.Component {\n    state = {\n        visible: true\n    }\n\n    handleChange = () => {\n        this.setState({\n            visible: !this.state.visible\n        });\n    }\n\n    handleClose = () => {\n        this.setState({\n            visible: false\n        });\n    }\n\n    render() {\n        const { visible } = this.state;\n\n        return (\n            <div className=\"control-demo\">\n                <Button onClick={this.handleChange}>Toggle Visible</Button>\n                <Message type=\"warning\" visible={visible} title=\"Warning\" closeable onClose={this.handleClose}>\n                    This item already has the label \"travel\". You can add a new label.\n                </Message>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n","css":".control-demo .next-btn.next-medium {\n    margin-bottom: 10px;\n}\n","body":"\n"},{"title":"可关闭组件","order":"3","jsx":"import { Message } from '@alifd/next';\n\nconst onClose = () => console.log('onClose triggered!');\nconst afterClose = () => console.log('afterClose triggered!');\n\nReactDOM.render(\n    <div>\n        <Message title=\"title\" closeable onClose={onClose} afterClose={afterClose}>\n            Content Content Content Content\n        </Message>\n    </div>, mountNode);\n","css":"","body":"\n<p>通过增加<code>closeable</code>属性可以控制提示框是否可关闭。</p>\n"},{"title":"信息外观","order":"1","jsx":"import { Message, Radio } from '@alifd/next';\n\nconst types = ['success', 'warning', 'error', 'notice', 'help', 'loading'];\nconst list = [\n    {\n        value: 'inline',\n        label: 'inline'\n    }, {\n        value: 'addon',\n        label: 'addon'\n    }, {\n        value: 'toast',\n        label: 'toast'\n    }\n];\n\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            shape: 'inline'\n        };\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(shape) {\n        this.setState({ shape });\n    }\n\n    render() {\n        const { shape } = this.state;\n\n        return (\n            <div className=\"message-shape-demo\">\n                <span className=\"demo-label\">Select Shape：</span>\n                <Radio.Group defaultValue=\"inline\"  dataSource={list} value={this.state.shape} onChange={this.handleSelect} />\n\n\n                {types.map(type => (\n                    <Message key={type} title={type} type={type} shape={shape}>\n                        Content Content Content Content\n                    </Message>\n                ))}\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".message-shape-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 22px;\n    line-height: 22px;\n}\n\n.message-shape-demo .next-message-title {\n    text-transform: capitalize;\n}\n\n.message-shape-demo .next-message {\n    margin-top: 10px;\n}\n\n.message-shape-demo .next-message.next-message-toast {\n    position: relative !important;\n}\n","body":"\n<p>通过设置<code>shape</code>调整信息外观</p>\n"},{"title":"信息尺寸","order":"2","jsx":"import { Message, Radio } from '@alifd/next';\n\nconst types = ['success', 'warning', 'error', 'notice', 'help', 'loading'];\nconst list = [\n    {\n        value: 'medium',\n        label: 'medium'\n    }, {\n        value: 'large',\n        label: 'large'\n    }\n];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            size: 'medium'\n        };\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(size) {\n        this.setState({ size });\n    }\n\n    render() {\n        const { size } = this.state;\n\n        return (\n            <div className=\"message-size-demo\">\n                <span className=\"demo-label\">Select Size：</span>\n                <Radio.Group defaultValue=\"medium\"  dataSource={list} value={this.state.size} onChange={this.handleSelect} />\n\n                {types.map(type => (\n                    <Message key={type} title={type} type={type} size={size}>\n                        Content Content Content Content\n                    </Message>\n                ))}\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".message-size-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 28px;\n    line-height: 28px;\n}\n\n.message-size-demo .next-message-title {\n    text-transform: capitalize;\n}\n\n.message-size-demo .next-message {\n    margin-top: 10px;\n}\n","body":"\n<p>通过<code>size</code>设置尺寸</p>\n"},{"title":"弹窗便捷方法","order":"6","jsx":"import { Message, Button } from '@alifd/next';\n\n\nconst showSuccess = () => Message.success('success');\nconst showWarning = () => Message.warning('warning');\nconst showError = () => Message.error('error');\nconst showNotice = () => Message.notice('notice');\nconst showHelp = () => Message.help('help');\nconst showLoading = () => Message.loading('loading');\n\nReactDOM.render(\n    <div className=\"message-toast-quick-demo\">\n        <Button onClick={showSuccess}>success</Button>\n        <Button onClick={showWarning}>warning</Button>\n        <Button onClick={showError}>error</Button>\n        <Button onClick={showNotice}>notice</Button>\n        <Button onClick={showHelp}>help</Button>\n        <Button onClick={showLoading}>loading</Button>\n    </div>, mountNode);\n","css":".message-toast-quick-demo .next-btn.next-medium {\n    margin-right: 10px;\n    margin-bottom: 10px;\n}\n","body":"\n<p>可以通过<code>Message.success</code>等静态方法来方便的显示指定类型的信息弹窗。</p>\n"},{"title":"弹窗用法","order":"5","jsx":"import { Message, Button } from '@alifd/next';\n\n\nconst show = () => {\n    Message.show({\n        type: 'loading',\n        content: 'Will be closed after 3 seconds or manually click on the close button',\n        afterClose: () => console.log('Closed the toast')\n    });\n};\nconst hide = () => Message.hide();\n\nReactDOM.render(\n    <div className=\"message-toast-demo\">\n        <Button onClick={show}>Show</Button>\n        <Button onClick={hide}>Hide</Button>\n    </div>, mountNode);\n","css":".message-toast-demo .next-btn.next-medium {\n    margin-right: 10px;\n}\n","body":"\n<p>可以通过<code>Message.show</code>和<code>Message.hide</code>方法来方便的显示或隐藏反馈弹窗。</p>\n"},{"title":"信息类型","order":"0","jsx":"import { Message } from '@alifd/next';\n\nReactDOM.render(\n    <div className=\"message-type-demo\">\n        <Message title=\"Success\" type=\"success\">\n            Content Content Content Content\n        </Message>\n        <Message title=\"Warning\" type=\"warning\">\n            Content Content Content Content\n        </Message>\n        <Message title=\"Error\" type=\"error\">\n            Content Content Content Content\n        </Message>\n        <Message title=\"Notice\" type=\"notice\">\n            Content Content Content Content\n        </Message>\n        <Message title=\"Help\" type=\"help\">\n            Content Content Content Content\n        </Message>\n        <Message title=\"Loading\" type=\"loading\">\n            Content Content Content Content\n        </Message>\n    </div>, mountNode);\n","css":".message-type-demo .next-message {\n    margin-bottom: 10px;\n}\n","body":"\n<p>通过设置<code>type</code>调整信息类型</p>\n"}]},{"name":"Nav","category":"Components","title":"导航","type":"导航","importStatement":"import { Nav } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。\n\n### 注意事项\n\n-   iconOnly 只适用垂直方向。\n\n API。\n\n## API\n\n### Nav\n\n> 继承自 `Menu` 的能力请查看 `Menu` 文档\n\n| 参数                  | 说明                                                                                                                                                                                                                                                                                                                                                                 | 类型           | 默认值                                                                   |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------ | --------------------------------------------------------------------- |\n| children            | 导航项和子导航                                                                                                                                                                                                                                                                                                                                                            | ReactNode    | -                                                                     |\n| type                | 导航类型<br><br>**可选值**:<br>'normal'(普通)<br>'primary'(主要)<br>'secondary'(次要)<br>'line'(线形)                                                                                                                                                                                                                                                                             | Enum         | 'normal'                                                              |\n| direction           | 导航布局<br><br>**可选值**:<br>'hoz'(水平)<br>'ver'(垂直)                                                                                                                                                                                                                                                                                                                     | Enum         | 'ver'                                                                 |\n| hozAlign            | 横向导航条 items 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效<br><br>**可选值**:<br>'left', 'right'                                                                                                                                                                                                                                                                | Enum         | 'left'                                                                |\n| activeDirection     | 设置组件选中状态的 active 边方向<br><br>**可选值**:<br>null(无)<br>'top'(上)<br>'bottom'(下)<br>'left'(左)<br>'right'(右)                                                                                                                                                                                                                                                              | Enum         | 当 direction 为 'hoz' 时，默认值为 'bottom'，当 direction 为 'ver' 时，默认值为 'left' |\n| mode                | 子导航打开的模式（水平导航只支持弹出）<br><br>**可选值**:<br>'inline', 'popup'                                                                                                                                                                                                                                                                                                           | Enum         | 'inline'                                                              |\n| triggerType         | 子导航打开的触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                                                                                                                                                                                                                     | Enum         | 'click'                                                               |\n| inlineIndent        | 内联子导航缩进距离                                                                                                                                                                                                                                                                                                                                                          | Number       | 20                                                                    |\n| defaultOpenAll      | 初始展开所有的子导航，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效                                                                                                                                                                                                                                                                                                     | Boolean      | false                                                                 |\n| openMode            | 内联子导航的展开模式，同时可以展开一个同级子导航还是多个同级子导航，该属性仅在 mode 为 inline 时生效<br><br>**可选值**:<br>'single', 'multiple'                                                                                                                                                                                                                                                                  | Enum         | 'multiple'                                                            |\n| selectedKeys        | 当前选中导航项的 key 值                                                                                                                                                                                                                                                                                                                                                     | String/Array | -                                                                     |\n| defaultSelectedKeys | 初始选中导航项的 key 值                                                                                                                                                                                                                                                                                                                                                     | String/Array | \\[]                                                                   |\n| onSelect            | 选中或取消选中导航项触发的回调函数<br><br>**签名**:<br>Function(selectedKeys: Array, item: Object, extra: Object) => void<br>**参数**:<br>_selectedKeys_: {Array} 选中的所有导航项的 key<br>_item_: {Object} 选中或取消选中的导航项<br>_extra_: {Object} 额外参数<br>_extra.select_: {Boolean} 是否是选中<br>_extra.key_: {Array} 导航项的 key<br>_extra.label_: {Object} 导航项的文本<br>_extra.keyPath_: {Array} 导航项 key 的路径 | Function     | -                                                                     |\n| popupAlign          | 弹出子导航的对齐方式（水平导航只支持 follow ）<br><br>**可选值**:<br>'follow', 'outside'                                                                                                                                                                                                                                                                                                 | Enum         | 'follow'                                                              |\n| popupClassName      | 弹出子导航的自定义类名                                                                                                                                                                                                                                                                                                                                                        | String       | -                                                                     |\n| iconOnly            | 是否只显示图标                                                                                                                                                                                                                                                                                                                                                            | Boolean      | -                                                                     |\n| hasArrow            | 是否显示右侧的箭头（仅在 iconOnly=true 时生效）                                                                                                                                                                                                                                                                                                                                    | Boolean      | true                                                                  |\n| hasTooltip          | 是否有 ToolTips （仅在 iconOnly=true 时生效）                                                                                                                                                                                                                                                                                                                                | Boolean      | false                                                                 |\n| header              | 自定义导航头部                                                                                                                                                                                                                                                                                                                                                            | ReactNode    | -                                                                     |\n| footer              | 自定义导航尾部                                                                                                                                                                                                                                                                                                                                                            | ReactNode    | -                                                                     |\n\n### Nav.Group\n\n> 继承自 `Menu.Group` 的能力请查看 `Menu.Group` 文档\n\n| 参数       | 说明      | 类型        | 默认值 |\n| -------- | ------- | --------- | --- |\n| label    | 标签内容    | ReactNode | -   |\n| children | 导航项和子导航 | ReactNode | -   |\n\n### Nav.Item\n\n> 继承自 `Menu.Item` 的能力请查看 `Menu.Item` 文档\n\n| 参数       | 说明                                                         | 类型               | 默认值 |\n| -------- | ---------------------------------------------------------- | ---------------- | --- |\n| icon     | 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type=\"icon type\" />` | String/ReactNode | -   |\n| children | 导航内容                                                       | ReactNode        | -   |\n\n### Nav.PopupItem\n\n> 继承自 `Menu.PopupItem` 的能力请查看 `Menu.PopupItem` 文档\n\n| 参数       | 说明                                                          | 类型               | 默认值 |\n| -------- | ----------------------------------------------------------- | ---------------- | --- |\n| icon     | 自定义图标，可以使用 Icon 的 type, 也可以使用组件 `<Icon type=\"icon type\" />` | String/ReactNode | -   |\n| label    | 标签内容                                                        | ReactNode        | -   |\n| children | 弹出内容                                                        | ReactNode        | -   |\n\n### Nav.SubNav\n\n> 继承自 `Menu.SubMenu` 的能力请查看 `Menu.SubMenu` 文档\n\n| 参数         | 说明                                                         | 类型               | 默认值   |\n| ---------- | ---------------------------------------------------------- | ---------------- | ----- |\n| icon       | 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type=\"your type\" />` | String/ReactNode | -     |\n| label      | 标签内容                                                       | ReactNode        | -     |\n| selectable | 是否可选                                                       | Boolean          | false |\n| children   | 导航项和子导航                                                    | ReactNode        | -     |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Nav } from '@alifd/next';\n\n\nconst { Item, SubNav } = Nav;\n\nconst header = <span className=\"fusion\">FUSION</span>;\nconst footer = <a className=\"login-in\" href=\"javascript:;\">Login in</a>;\n\nReactDOM.render(\n    <Nav className=\"basic-nav\" direction=\"hoz\" type=\"primary\" header={header} footer={footer} defaultSelectedKeys={['home']} triggerType=\"hover\">\n        <Item key=\"home\">Home</Item>\n        <SubNav label=\"Component\" selectable>\n            <Item key=\"next\">Next</Item>\n            <Item key=\"mext\">Mext</Item>\n        </SubNav>\n        <Item key=\"document\">Document</Item>\n    </Nav>\n    , mountNode);\n","css":".basic-nav .fusion {\n    margin: 8px 20px;\n    width: 100px;\n    color: #FFFFFF;\n    font-size: 20px;\n}\n.basic-nav .login-in {\n    margin: 0 20px;\n    color: #FFFFFF;\n}\n.basic-nav .next-nav-item {\n    width: 120px;\n}\n","body":"\n<p>最简单的使用方式。</p>\n"},{"title":"定制","order":"1","jsx":"import { Nav, Radio } from '@alifd/next';\n\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n    state = {\n        type: 'normal',\n        direction: 'hoz',\n        activeDirection: null,\n        triggerType: 'click'\n    }\n\n    setValue(name, value) {\n        this.setState({\n            [name]: value === '' ? null : value\n        });\n    }\n\n    setTriggerType(triggerType) {\n        this.setState({\n            triggerType\n        });\n    }\n\n    render() {\n        const { type, direction, activeDirection, triggerType } = this.state;\n\n        return (\n            <div>\n                <div className=\"demo-ctl\">\n                    <Radio.Group shape=\"button\" size=\"medium\" value={type} onChange={this.setValue.bind(this, 'type')}>\n                        <Radio value=\"normal\">type=\"normal\"</Radio>\n                        <Radio value=\"primary\">type=\"primary\"</Radio>\n                        <Radio value=\"secondary\">type=\"secondary\"</Radio>\n                        <Radio value=\"line\">type=\"line\"</Radio>\n                    </Radio.Group>\n                    <Radio.Group shape=\"button\" size=\"medium\" value={direction} onChange={this.setValue.bind(this, 'direction')}>\n                        <Radio value=\"hoz\">direction=\"hoz\"</Radio>\n                        <Radio value=\"ver\">direction=\"ver\"</Radio>\n                    </Radio.Group>\n                    <Radio.Group shape=\"button\" size=\"medium\" value={activeDirection === null ? '' : activeDirection} onChange={this.setValue.bind(this, 'activeDirection')}>\n                        <Radio value=\"\">activeDirection=null</Radio>\n                        {direction === 'hoz' ? <Radio value=\"top\">activeDirection=\"top\"</Radio> : null}\n                        {direction === 'hoz' ? <Radio value=\"bottom\">activeDirection=\"bottom\"</Radio> : null}\n                        {direction === 'ver' ? <Radio value=\"left\">activeDirection=\"left\"</Radio> : null}\n                        {direction === 'ver' ? <Radio value=\"right\">activeDirection=\"right\"</Radio> : null}\n                    </Radio.Group>\n                    <Radio.Group shape=\"button\" size=\"medium\" value={triggerType} onChange={this.setTriggerType.bind(this)}>\n                        <Radio value=\"click\">triggerType=\"click\"</Radio>\n                        <Radio value=\"hover\">triggerType=\"hover\"</Radio>\n                    </Radio.Group>\n                </div>\n                <Nav className=\"custom-nav\" type={type} direction={direction} activeDirection={activeDirection} triggerType={triggerType}>\n                    <Item>Item 1</Item>\n                    <Item>Item 2</Item>\n                    <SubNav label=\"Sub Nav\">\n                        <Item>Item 3</Item>\n                        <Item>Item 4</Item>\n                        <SubNav label=\"Sub Nav\">\n                            <Item>Item 5</Item>\n                            <Item>Item 6</Item>\n                        </SubNav>\n                    </SubNav>\n                    <Item icon=\"account\">\n                        <a href=\"http://www.taobao.com\" target=\"_blank\">Taobao</a>\n                    </Item>\n                </Nav>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n","css":".demo-ctl {\n    background-color: #F1F1F1;\n    border-left: 4px solid #0D599A;\n    color: #0A7AC3;\n    margin-bottom: 20px;\n    padding: 5px;\n}\n.demo-ctl .next-radio-group {\n    display: block;\n    margin: 5px;\n}\n.custom-nav.next-hoz .next-nav-item {\n    width: 100px;\n}\n.custom-nav.next-ver {\n    width: 200px;\n}\n","body":"\n<p>Nav 提供了丰富的配置，可以进行个性化定制。</p>\n"},{"title":"分组","order":"3","jsx":"import { Nav } from '@alifd/next';\n\nconst { Item, Group } = Nav;\n\nReactDOM.render(\n    <Nav style={{ width: 240 }}>\n        <Group label=\"Group Label 1\">\n            <Item icon=\"account\">Navigation One</Item>\n            <Item icon=\"account\">Navigation Two</Item>\n            <Item icon=\"account\">Navigation Three</Item>\n        </Group>\n        <Group label=\"Group Label 2\">\n            <Item icon=\"account\">Navigation Four</Item>\n            <Item icon=\"account\">Navigation Five</Item>\n            <Item icon=\"account\">Navigation Six</Item>\n        </Group>\n    </Nav>, mountNode);\n","css":"","body":"\n<p>建议只在垂直布局中使用。</p>\n"},{"title":"只显示图标","order":"2","jsx":"import { Nav, Radio } from '@alifd/next';\n\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n    state = {\n        iconOnly: false,\n        hasTooltip: true,\n        hasArrow: true\n    }\n\n    setValue(name, value) {\n        this.setState({\n            [name]: value === 'true'\n        });\n    }\n\n    render() {\n        const { iconOnly, hasTooltip, hasArrow } = this.state;\n\n        return (\n            <div>\n                <div className=\"demo-ctl\">\n                    <Radio.Group shape=\"button\" size=\"medium\" value={iconOnly ? 'true' : 'false'} onChange={this.setValue.bind(this, 'iconOnly')}>\n                        <Radio value=\"true\">iconOnly=true</Radio>\n                        <Radio value=\"false\">iconOnly=false</Radio>\n                    </Radio.Group>\n                    {iconOnly ?\n                        <Radio.Group shape=\"button\" size=\"medium\" value={hasArrow ? 'true' : 'false'} onChange={this.setValue.bind(this, 'hasArrow')}>\n                            <Radio value=\"true\">hasArrow=true</Radio>\n                            <Radio value=\"false\">hasArrow=false</Radio>\n                        </Radio.Group> : null}\n                    {iconOnly ?\n                        <Radio.Group shape=\"button\" size=\"medium\" value={hasTooltip ? 'true' : 'false'} onChange={this.setValue.bind(this, 'hasTooltip')}>\n                            <Radio value=\"true\">hasTooltip=true</Radio>\n                            <Radio value=\"false\">hasTooltip=false</Radio>\n                        </Radio.Group> : null}\n                </div>\n                <Nav style={{ width: '200px' }} iconOnly={iconOnly} hasArrow={hasArrow} hasTooltip={hasTooltip}>\n                    <Item icon=\"account\">Navigation One</Item>\n                    <Item icon=\"account\">Navigation Two</Item>\n                    <Item icon=\"account\">Navigation Three</Item>\n                    <Item icon=\"account\">Navigation Four</Item>\n                    <Item icon=\"account\">Navigation Five</Item>\n                    <SubNav icon=\"account\" label=\"Sub Nav\">\n                        <Item icon=\"account\">Item 1</Item>\n                        <Item icon=\"account\">Item 2</Item>\n                        <Item icon=\"account\">Item 3</Item>\n                        <Item icon=\"account\">Item 4</Item>\n                    </SubNav>\n                </Nav>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n","css":".demo-ctl {\n    background-color: #F1F1F1;\n    border-left: 4px solid #0D599A;\n    color: #0A7AC3;\n    margin-bottom: 20px;\n    padding: 5px;\n}\n.demo-ctl .next-radio-group {\n    margin: 5px;\n}\n","body":"\n<p>Nav 可设置 iconOnly 属性，只显示图标，以减少占用空间。</p>\n"},{"title":"展开模式","order":"4","jsx":"import { Nav, Radio } from '@alifd/next';\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n    state = {\n        openMode: 'single'\n    }\n\n    setValue(openMode) {\n        this.setState({\n            openMode\n        });\n    }\n\n    render() {\n        const { openMode } = this.state;\n\n        return (\n            <div>\n                <div className=\"demo-ctl\">\n                    <Radio.Group shape=\"button\" size=\"medium\" value={openMode} onChange={this.setValue.bind(this)}>\n                        <Radio value=\"single\">openMode=\"single\"</Radio>\n                        <Radio value=\"multiple\">openMode=\"multiple\"</Radio>\n                    </Radio.Group>\n                </div>\n                <Nav style={{ width: 240 }} openMode={openMode}>\n                    <SubNav label=\"Sub Nav 1\">\n                        <Item>Item 1</Item>\n                    </SubNav>\n                    <SubNav label=\"Sub Nav 2\">\n                        <Item>Item 1</Item>\n                        <Item>Item 2</Item>\n                        <SubNav label=\"Sub Nav 1\">\n                            <Item>Item 1</Item>\n                            <Item>Item 2</Item>\n                        </SubNav>\n                        <SubNav label=\"Sub Nav 2\">\n                            <Item>Item 1</Item>\n                            <Item>Item 2</Item>\n                        </SubNav>\n                    </SubNav>\n                    <SubNav label=\"Sub Nav 3\">\n                        <Item>Item 1</Item>\n                        <Item>Item 2</Item>\n                        <Item>Item 3</Item>\n                        <SubNav label=\"Sub Nav 1\">\n                            <Item>Item 1</Item>\n                            <Item>Item 2</Item>\n                            <Item>Item 3</Item>\n                        </SubNav>\n                        <SubNav label=\"Sub Nav 2\">\n                            <Item>Item 1</Item>\n                            <Item>Item 2</Item>\n                            <Item>Item 3</Item>\n                        </SubNav>\n                        <SubNav label=\"Sub Nav 3\">\n                            <Item>Item 1</Item>\n                            <Item>Item 2</Item>\n                            <Item>Item 3</Item>\n                        </SubNav>\n                    </SubNav>\n                    <Item>Item</Item>\n                </Nav>\n            </div>);\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n","css":".demo-ctl {\n    background-color: #F1F1F1;\n    border-left: 4px solid #0D599A;\n    color: #0A7AC3;\n    margin-bottom: 20px;\n    padding: 5px;\n}\n.demo-ctl .next-radio-group {\n    margin: 5px;\n}\n","body":"\n<p>当 Nav 的 mode=&quot;inline&quot; 时，openMode 可控制同级内联子导航的展开数量。</p>\n"},{"title":"对齐方式","order":"5","jsx":"import { Nav, Radio } from '@alifd/next';\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n    state = {\n        popupAlign: 'follow'\n    }\n\n    setValue(popupAlign) {\n        this.setState({\n            popupAlign\n        });\n    }\n\n    render() {\n        const { popupAlign } = this.state;\n\n        return (\n            <div>\n                <div className=\"demo-ctl\">\n                    <Radio.Group shape=\"button\" size=\"medium\" value={popupAlign} onChange={this.setValue.bind(this)}>\n                        <Radio value=\"follow\">popupAlign=\"follow\"</Radio>\n                        <Radio value=\"outside\">popupAlign=\"outside\"</Radio>\n                    </Radio.Group>\n                </div>\n                <Nav style={{ height: 400, width: 240 }} mode=\"popup\" popupAlign={popupAlign} defaultOpenKeys={['sub-nav-2']}>\n                    <SubNav key=\"sub-nav-1\"label=\"Sub Nav 1\">\n                        <Item key=\"1\">Item 1</Item>\n                    </SubNav>\n                    <SubNav key=\"sub-nav-2\" label=\"Sub Nav 2\">\n                        <Item key=\"1\">Item 1</Item>\n                        <Item key=\"2\">Item 2</Item>\n                    </SubNav>\n                    <SubNav key=\"sub-nav-3\" label=\"Sub Nav 3\">\n                        <Item key=\"1\">Item 1</Item>\n                        <Item key=\"2\">Item 2</Item>\n                        <Item key=\"3\">Item 3</Item>\n                    </SubNav>\n                    <SubNav key=\"sub-nav-4\" label=\"Sub Nav 4\">\n                        <Item key=\"1\">Item 1</Item>\n                        <Item key=\"2\">Item 2</Item>\n                        <Item key=\"3\">Item 3</Item>\n                        <Item key=\"4\">Item 4</Item>\n                    </SubNav>\n                </Nav>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n","css":".demo-ctl {\n    background-color: #F1F1F1;\n    border-left: 4px solid #0D599A;\n    color: #0A7AC3;\n    margin-bottom: 20px;\n    padding: 5px;\n}\n.demo-ctl .next-radio-group {\n    margin: 5px;\n}\n","body":"\n<p>当 Nav 的 mode=&quot;popup&quot; 时，popAlign 可控制弹出子导航的对齐方式。</p>\n"}]},{"name":"NumberPicker","category":"Components","title":"数字输入框","type":"表单","importStatement":"import { NumberPicker } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n数字选择器，并对输入的数据做正确性检查、自动订正。\n\n### 注意事项\n\n1.  自动订正可能会导致onChange返回值和你输入的数据不一样。\n\n2.  其中有些中间输入状态无法触发onChange，主要考虑到自动订正可能永远无法到达想要的值了。例如：\n\n    -   `0`=>`0.`=>`0.0`=>`0.01`  中间两步不会触发onChange，因为如果订正会一直停留在0导致永远无法到达想要的值\n    -   min=10 的情况下, 输入 `1`=>`12`  第一步 `1` 不会触发onChange也不会订正数据，因为数字是一个一个输入的\n\n3.  如果输入时没触发onChange，会在onBlur检测数据正确性并触发onChange\n\n API\n\n### NumberPicker\n\n| 参数           | 说明                                                                                                                                             | 类型            | 默认值       |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | --------- |\n| size         | 大小<br><br>**可选值**:<br>'large', 'medium'                                                                                                        | Enum          | 'medium'  |\n| type         | 设置类型<br><br>**可选值**:<br>'normal'(普通)<br>'inline'(内联)                                                                                           | Enum          | 'normal'  |\n| value        | 当前值                                                                                                                                            | Number        | -         |\n| defaultValue | 默认值                                                                                                                                            | Number        | -         |\n| disabled     | 是否禁用                                                                                                                                           | Boolean       | -         |\n| step         | 步长                                                                                                                                             | Number/String | 1         |\n| precision    | 保留小数点后位数                                                                                                                                       | Number        | 0         |\n| editable     | 用户是否可以输入                                                                                                                                       | Boolean       | true      |\n| autoFocus    | 自动焦点                                                                                                                                           | Boolean       | -         |\n| onChange     | 数值被改变的事件<br><br>**签名**:<br>Function(value: Number, e: Event) => void<br>**参数**:<br>_value_: {Number} 数据<br>_e_: {Event} DOM事件对象                | Function      | func.noop |\n| onKeyDown    | 键盘按下<br><br>**签名**:<br>Function() => void                                                                                                      | Function      | func.noop |\n| onFocus      | 焦点获得<br><br>**签名**:<br>Function() => void                                                                                                      | Function      | -         |\n| onBlur       | 焦点失去<br><br>**签名**:<br>Function() => void                                                                                                      | Function      | func.noop |\n| onCorrect    | 数值订正后的回调<br><br>**签名**:<br>Function(obj: Object) => void<br>**参数**:<br>_obj_: {Object} {currentValue,oldValue:String}                          | Function      | func.noop |\n| max          | 最大值                                                                                                                                            | Number        | Infinity  |\n| min          | 最小值                                                                                                                                            | Number        | -Infinity |\n| format       | 格式化当前值<br><br>**签名**:<br>Function(value: Number) => String/Number<br>**参数**:<br>_value_: {Number} null<br>**返回值**:<br>{String/Number} null<br> | Function      | -         |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本用法","order":"0","jsx":"import { NumberPicker } from '@alifd/next';\n\nfunction onChange(value, e) {\n    console.log(value, e.type, e.triggerType);\n}\n\nReactDOM.render(\n    <div>\n        <NumberPicker onChange={onChange}/>\n        <br/><br/>\n        <NumberPicker defaultValue={0} type=\"inline\" onChange={onChange}/>\n    </div>,\n    mountNode\n);\n","css":"","body":"\n<p>onChange 第二个参数 e.type 可以获取事件类型。</p>\n<p>如果是点击<code>+</code> <code>-</code> 触发，可以通过 <code>e.triggerType</code> 获取</p>\n"},{"title":"不可用","order":"6","jsx":"import { NumberPicker } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <NumberPicker defaultValue={0} disabled/>\n        <br/><br/>\n        <NumberPicker defaultValue={0} type=\"inline\" disabled />\n    </div>,\n    mountNode\n);\n","css":"","body":"\n<p>不可用的 number picker。</p>\n"},{"title":"不可直接输入","order":"1","jsx":"import { NumberPicker, Button } from '@alifd/next';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            value: 0\n        };\n    }\n\n    toogle() {\n        this.setState({\n            editable: !this.state.editable\n        });\n    }\n\n    onChange(value) {\n        console.log('changed', value);\n        this.setState({\n            value: value\n        });\n    }\n\n    render() {\n        return (<div>\n            <NumberPicker onChange={this.onChange.bind(this)} value={this.state.value}\n                editable={this.state.editable}/><br/><br/>\n            <Button onClick={this.toogle.bind(this)}>Toggle to {!this.state.editable ? 'editable' : 'uneditable'}</Button>\n        </div>);\n    }\n}\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>用户不可直接输入编辑数据</p>\n"},{"title":"格式化","order":"7","jsx":"import { NumberPicker } from '@alifd/next';\n\nconst intlize = val => Intl.NumberFormat('en-US').format(val);\n\nReactDOM.render(\n    <div>\n        <NumberPicker format={intlize} />\n    </div>,\n    mountNode\n);\n","css":"","body":"\n"},{"title":"最大最小值","order":"2","jsx":"import { NumberPicker } from '@alifd/next';\n\nfunction onChange(value, e) {\n    console.log('onChange', value, e);\n}\n\nfunction onCorrect(obj) {\n    console.log('onCorrect', obj);\n}\nReactDOM.render(\n    <div>\n        <NumberPicker type=\"inline\" step={3} min={6} max={30} defaultValue={6}\n            onChange={onChange} onCorrect={onCorrect}/>\n    </div>,\n    mountNode\n);\n","css":"","body":"\n<p>min max 来限制value的最大最小值。</p>\n<p>当数据自动订正会触发 onCorrect</p>\n"},{"title":"精度","order":"4","jsx":"import { NumberPicker } from '@alifd/next';\n\nfunction onChange(value) {\n    console.log('changed', value);\n}\nfunction onCorrect(obj) {\n    console.log(obj);\n}\nReactDOM.render(\n    <div>\n        <NumberPicker defaultValue={-3.99} onChange={onChange} onCorrect={onCorrect} step={2} precision={2}/>\n    </div>, mountNode);\n","css":"","body":"\n<p>通过 precision 控制小数点位数</p>\n"},{"title":"大小","order":"5","jsx":"import { NumberPicker } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <NumberPicker defaultValue={0} size=\"large\" />\n        <br/><br/>\n        <NumberPicker defaultValue={0} size=\"large\" type=\"inline\" />\n    </div>,\n    mountNode\n);\n","css":"","body":"\n"},{"title":"步长","order":"3","jsx":"import { NumberPicker } from '@alifd/next';\n\nfunction onChange(value) {\n    console.log('changed', value);\n}\nfunction onCorrect(obj) {\n    console.log(obj);\n}\nReactDOM.render(\n    <div>\n        <NumberPicker defaultValue={0} onChange={onChange} onCorrect={onCorrect} step={.01}/>\n    </div>, mountNode);\n","css":"","body":"\n<p>通过step控制每次加减步长</p>\n"}]},{"name":"Overlay","category":"Components","title":"弹层","importStatement":"import { Overlay } from '@alifd/next';","body":"\n用于生成弹层的工具类集合.\n\n## 开发指南\n\nOverlay 提供了一系列组件用于创建弹层。其中包含：\n\n### Overlay\n\nOverlay 可以在页面中弹出一个浮层，封装了定位，动画及其他一些可用性的功能。Overlay 被设计为无状态的组件，其本身并不控制自己显示和隐藏的状态。\n\n**注意:** 类似 canCloseby\\* 的配置也需要配合 onRequestClose 才能关闭弹层。\n\n#### 安全节点\n\nOverlay 提供了点击弹层外文档中节点隐藏该弹层的功能，如果想让某个节点点击后不隐藏弹层（如：触发弹层打开的节点），请将该节点传入 safeNode 属性。\n\n#### 定位\n\n1.  align 的值可以是由空格隔开的字符串，如 `tl bl`，其中 `tl` 代表目标元素的左上方，`bl` 代表基准元素的左下方，所以 `tl bl` 的意思是目标元素的左上方对齐基准元素左下方。其中定位的可选值有 `tl`, `tc`, `tr`, `cl`, `cc`, `cr`, `bl`, `bc`, `br`。`t` 为 `top` 的缩写，`b` 为 `bottom` 的缩写，`c` 为 `center` 的缩写，`l` 为 `left` 的缩写，`r` 为 `right` 的缩写.\n\n2.  align 支持的 Boolean 值仅为 false，在设置为 false 时，不使用 JS 定位，这样你可以根据你的需要传入 style 或者 className 进行 CSS 定位。\n\n3.  rtl情况下会自动翻转 r(right)与 l(left), 例如 rtl状态下`tl bl`与 非rtl状态下`tr br`等效\n    下面的例子演示了如何将弹层定位到页面的右上角：\n\n```html\n<Overlay visible align=\"tr tr\"><span>123</span></Overlay>\n```\n\n### Popup\n\nPopup 是对 Overlay 的封装，它接收某个节点作为触发节点，弹出一个浮层，这个浮层默认情况下使用这个节点作为定位的参照对象。\n\n API\n\n### Overlay\n\n| 参数                     | 说明                                                                                                                                                                                                                                                                                                          | 类型             | 默认值                                        |\n| ---------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | ------------------------------------------ |\n| children               | 弹层内容                                                                                                                                                                                                                                                                                                        | any            | -                                          |\n| visible                | 是否显示弹层                                                                                                                                                                                                                                                                                                      | Boolean        | false                                      |\n| onRequestClose         | 弹层请求关闭时触发事件的回调函数<br><br>**签名**:<br>Function(type: String, e: Object) => void<br>**参数**:<br>_type_: {String} 弹层关闭的来源<br>_e_: {Object} DOM 事件                                                                                                                                                                 | Function       | func.noop                                  |\n| target                 | 弹层定位的参照元素                                                                                                                                                                                                                                                                                                   | any            | Position.VIEWPORT                          |\n| align                  | 弹层相对于参照元素的定位, 详见开发指南的[定位部分](#定位)                                                                                                                                                                                                                                                                            | String/Boolean | 'tl bl'                                    |\n| offset                 | 弹层相对于参照元素定位的微调                                                                                                                                                                                                                                                                                              | Array          | [0, 0]                                     |\n| container              | 渲染组件的容器，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点                                                                                                                                                                                                                                                     | any            | -                                          |\n| hasMask                | 是否显示遮罩                                                                                                                                                                                                                                                                                                      | Boolean        | false                                      |\n| canCloseByEsc          | 是否支持 esc 按键关闭弹层                                                                                                                                                                                                                                                                                             | Boolean        | true                                       |\n| canCloseByOutSideClick | 点击弹层外的区域是否关闭弹层，不显示遮罩时生效                                                                                                                                                                                                                                                                                     | Boolean        | true                                       |\n| canCloseByMask         | 点击遮罩区域是否关闭弹层，显示遮罩时生效                                                                                                                                                                                                                                                                                        | Boolean        | true                                       |\n| beforeOpen             | 弹层打开前触发事件的回调函数<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                         | Function       | func.noop                                  |\n| onOpen                 | 弹层打开时触发事件的回调函数<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                         | Function       | func.noop                                  |\n| afterOpen              | 弹层打开后触发事件的回调函数, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                        | Function       | func.noop                                  |\n| beforeClose            | 弹层关闭前触发事件的回调函数<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                         | Function       | func.noop                                  |\n| onClose                | 弹层关闭时触发事件的回调函数<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                         | Function       | func.noop                                  |\n| afterClose             | 弹层关闭后触发事件的回调函数, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                        | Function       | func.noop                                  |\n| beforePosition         | 弹层定位完成前触发的事件<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                           | Function       | func.noop                                  |\n| onPosition             | 弹层定位完成时触发的事件<br><br>**签名**:<br>Function(config: Object, node: Object) => void<br>**参数**:<br>_config_: {Object} 定位的参数<br>_config.align_: {Array} 对齐方式，如 ['cc', 'cc']（如果开启 needAdjust，可能和预先设置的 align 不同）<br>_config.top_: {Number} 距离视口顶部距离<br>_config.left_: {Number} 距离视口左侧距离<br>_node_: {Object} 定位参照的容器节点 | Function       | func.noop                                  |\n| shouldUpdatePosition   | 是否在每次弹层重新渲染后强制更新定位信息，一般用于弹层内容区域大小发生变化时，仍需保持原来的定位方式                                                                                                                                                                                                                                                          | Boolean        | false                                      |\n| autoFocus              | 弹层打开时是否让其中的元素自动获取焦点                                                                                                                                                                                                                                                                                         | Boolean        | false                                      |\n| needAdjust             | 当弹层由于页面滚动等情况不在可视区域时，是否自动调整定位以出现在可视区域                                                                                                                                                                                                                                                                        | Boolean        | true                                       |\n| disableScroll          | 是否禁用页面滚动                                                                                                                                                                                                                                                                                                    | Boolean        | false                                      |\n| cache                  | 隐藏时是否保留子节点                                                                                                                                                                                                                                                                                                  | Boolean        | false                                      |\n| safeNode               | 安全节点，当点击 document 的时候，如果包含该节点则不会关闭弹层，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点，或者以上值组成的数组                                                                                                                                                                                                             | any            | -                                          |\n| wrapperClassName       | 弹层的根节点的样式类                                                                                                                                                                                                                                                                                                  | String         | -                                          |\n| wrapperStyle           | 弹层的根节点的内联样式                                                                                                                                                                                                                                                                                                 | Object         | -                                          |\n| animation              | 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画                                                                                                                                                                                                                             | Object/Boolean | { in: 'expandInDown', out: 'expandOutUp' } |\n\n### Overlay.Popup\n\n> 继承 Overlay 的 API，除非特别说明\n\n| 参数                | 说明                                                                                                                                                                                              | 类型           | 默认值             |\n| ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ | --------------- |\n| children          | 弹层内容                                                                                                                                                                                            | ReactNode    | -               |\n| trigger           | 触发弹层显示或隐藏的元素                                                                                                                                                                                    | ReactElement | -               |\n| triggerType       | 触发弹层显示或隐藏的操作类型，可以是 'click'，'hover'，'focus'，或者它们组成的数组，如 ['hover', 'focus']                                                                                                                       | String/Array | 'hover'         |\n| visible           | 弹层当前是否显示                                                                                                                                                                                        | Boolean      | -               |\n| defaultVisible    | 弹层默认是否显示                                                                                                                                                                                        | Boolean      | false           |\n| onVisibleChange   | 弹层显示或隐藏时触发的回调函数<br><br>**签名**:<br>Function(visible: Boolean, type: String, e: Object) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_type_: {String} 触发弹层显示或隐藏的来源<br>_e_: {Object} DOM事件 | Function     | func.noop       |\n| disabled          | 设置此属性，弹层无法显示或隐藏                                                                                                                                                                                 | Boolean      | false           |\n| delay             | 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效                                                                                                                                               | Number       | 200             |\n| canCloseByTrigger | 触发元素是否可以关闭弹层                                                                                                                                                                                    | Boolean      | true            |\n| target            | 弹层定位的参照元素                                                                                                                                                                                       | any          | target 属性，即触发元素 |\n| followTrigger     | 是否跟随trigger滚动                                                                                                                                                                                   | Boolean      | false           |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"对齐","order":"6","jsx":"import { Overlay } from '@alifd/next';\n\nconst { Popup } = Overlay;\n\nReactDOM.render(\n    <div >\n        <div id=\"container1\" className=\"overlay-container\">\n            normal example\n            <Overlay target=\"container1\" visible align=\"tr tr\"><span>123</span></Overlay>\n            <Overlay target=\"container1\" visible align=\"cc cr\"><span>123</span></Overlay>\n            <Overlay target=\"container1\" visible align=\"bc bc\"><span>123</span></Overlay>\n        </div>\n        <br /><br /><br /><br />\n        <div id=\"container2\" className=\"overlay-container\" dir=\"rtl\">\n            dir=rtl example\n            <Overlay target=\"container2\" rtl visible align=\"tr tr\"><span>123</span></Overlay>\n            <Overlay target=\"container2\" rtl visible align=\"cc cr\"><span>123</span></Overlay>\n            <Overlay target=\"container2\" rtl visible align=\"bc bc\"><span>123</span></Overlay>\n        </div>\n    </div>\n    , mountNode);\n","css":".overlay-container {\n    position: relative;\n    height: 150px;\n    margin: 50px;\n    border: 1px solid #999;\n    overflow: auto;\n    text-align: center;\n    color: red;\n}\n","body":"\n<p>可以自定义对齐方式</p>\n"},{"title":"遮罩","order":"1","jsx":"import { Overlay } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false\n        };\n    }\n\n    onClick = () => {\n        this.setState({\n            visible: true\n        });\n    }\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.onClick} ref={ref => {\n                    this.btn = ref;\n                }}>\n                    Open\n                </button>\n                <Overlay visible={this.state.visible}\n                    safeNode={() => this.btn}\n                    align=\"cc cc\"\n                    hasMask\n                    disableScroll\n                    onRequestClose={this.onClose}>\n                    <span className=\"overlay-demo\">\n                        Hello World From Overlay!\n                    </span>\n                </Overlay>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n","body":"\n<p>带有遮罩的弹层。</p>\n"},{"title":"触发的弹层受控显示隐藏","order":"3","jsx":"import { Overlay } from '@alifd/next';\n\nconst { Popup } = Overlay;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false\n        };\n    }\n\n    onVisibleChange = visible => {\n        this.setState({\n            visible\n        });\n    }\n\n    render() {\n        return (\n            <Popup trigger={<button>Open</button>}\n                triggerType=\"click\"\n                visible={this.state.visible}\n                onVisibleChange={this.onVisibleChange}>\n                <span className=\"overlay-demo\">\n                    Hello World From Popup!\n                </span>\n            </Popup>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n","body":"\n<p>展示了 Popup 受控显示隐藏的用法。</p>\n"},{"title":"弹层嵌套","order":"4","jsx":"import { Overlay } from '@alifd/next';\n\nconst { Popup } = Overlay;\n\nReactDOM.render(\n    <Popup trigger={<button>Open first overlay</button>}\n        triggerType=\"click\">\n        <div className=\"overlay-demo\">\n            <Popup trigger={<button>Open second overlay</button>}\n                triggerType=\"click\"\n                container={trigger => trigger.parentNode}>\n                <div className=\"overlay-demo\">\n                    <p>Hello World From Second Overlay!</p>\n                </div>\n            </Popup>\n            <p>Hello World From First Overlay!</p>\n        </div>\n    </Popup>\n    , mountNode);\n","css":".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n","body":"\n<p>有弹层嵌套需求时，请使用 container 属性将第二个弹层渲染到第一个弹层内部。</p>\n"},{"title":"基本","order":"0","jsx":"import { Overlay } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false\n        };\n    }\n\n    onClick = () => {\n        this.setState({\n            visible: !this.state.visible\n        });\n    }\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.onClick} ref={ref => {\n                    this.btn = ref;\n                }}>\n                    Toggle visible\n                </button>\n                <Overlay visible={this.state.visible}\n                    target={() => this.btn}\n                    safeNode={() => this.btn}\n                    onRequestClose={this.onClose}>\n                    <span className=\"overlay-demo\">\n                        Hello World From Overlay!\n                    </span>\n                </Overlay>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n","body":"\n<p>弹出一个弹层。</p>\n"},{"title":"触发的弹层","order":"2","jsx":"import { Overlay } from '@alifd/next';\n\nconst { Popup } = Overlay;\n\nReactDOM.render(\n    <Popup trigger={<button>Open</button>} triggerType=\"click\">\n        <span className=\"overlay-demo\">\n            Hello World From Popup!\n        </span>\n    </Popup>, mountNode);\n","css":".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n","body":"\n<p>使用 Popup 弹出一个弹层。</p>\n"},{"title":"弹层跟随滚动","order":"5","jsx":"import { Overlay } from '@alifd/next';\n\nconst { Popup } = Overlay;\n\nReactDOM.render(\n    <div className=\"scroll-container\">\n        <Popup trigger={<button>Open</button>}\n            triggerType=\"click\"\n            container={trigger => trigger.parentNode}>\n            <div className=\"overlay-demo\">\n                Hello World From Popup!\n            </div>\n        </Popup>\n        <div style={{ height: '300px' }} />\n    </div>\n    , mountNode);\n","css":".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n\n.scroll-container {\n    position: relative;\n    height: 150px;\n    padding: 10px;\n    border: 1px solid #999999;\n    overflow: auto;\n}\n","body":"\n<p>弹层默认参照 document.body 绝对定位，如果弹层显示隐藏的触发元素所在容器（一般为父节点）有滚动条，那么当容器滚动时，会发生触发元素与弹层相分离的情况，解决的办法是将弹层渲染到触发元素所在的容器中。（触发元素所在的容器，必须设置 position 样式，以完成弹层的绝对定位。）</p>\n"}]},{"name":"Pagination","category":"Components","title":"翻页器","type":"导航","importStatement":"import { Pagination } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n在有大量内容展现需要进行分页加载处理的时候。\n\n API\n\n### Pagination\n\n| 参数               | 说明                                                                                                                                                                            | 类型                                | 默认值            |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------- | -------------- |\n| size             | 分页组件大小<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                          | Enum                              | 'medium'       |\n| type             | 分页组件类型<br><br>**可选值**:<br>'normal', 'simple', 'mini'                                                                                                                          | Enum                              | 'normal'       |\n| shape            | 前进后退按钮样式<br><br>**可选值**:<br>'normal', 'arrow-only', 'arrow-prev-only', 'no-border'                                                                                            | Enum                              | 'normal'       |\n| current          | （受控）当前页码                                                                                                                                                                      | Number                            | -              |\n| defaultCurrent   | （非受控）初始页码                                                                                                                                                                     | Number                            | 1              |\n| onChange         | 页码发生改变时的回调函数<br><br>**签名**:<br>Function(current: Number, e: Object) => void<br>**参数**:<br>_current_: {Number} 改变后的页码数<br>_e_: {Object} 点击事件对象                                 | Function                          | () => {}       |\n| total            | 总记录数                                                                                                                                                                          | Number                            | 100            |\n| totalRender      | 总数的渲染函数<br><br>**签名**:<br>Function(total: Number, range: Array) => void<br>**参数**:<br>_total_: {Number} 总数<br>_range_: {Array} 当前数据在总数中的区间                                    | Function                          | -              |\n| pageShowCount    | 页码显示的数量，更多的使用...代替                                                                                                                                                            | Number                            | 5              |\n| pageSize         | 一页中的记录数                                                                                                                                                                       | Number                            | 10             |\n| pageSizeSelector | 每页显示选择器类型<br><br>**可选值**:<br>false, 'filter', 'dropdown'                                                                                                                      | Enum                              | false          |\n| pageSizeList     | 每页显示选择器可选值                                                                                                                                                                    | Array&lt;Number>/Array&lt;Object> | [5, 10, 20]    |\n| pageNumberRender | 自定义页码渲染函数，函数作用于页码button以及当前页/总页数的数字渲染<br><br>**签名**:<br>Function(index: Number) => ReactNode<br>**参数**:<br>_index_: {Number} 分页的页码，从1开始<br>**返回值**:<br>{ReactNode} 返回渲染结果<br> | Function                          | index => index |\n| pageSizePosition | 每页显示选择器在组件中的位置<br><br>**可选值**:<br>'start', 'end'                                                                                                                              | Enum                              | 'start'        |\n| useFloatLayout   | 存在每页显示选择器时是否使用浮动布局                                                                                                                                                            | Boolean                           | false          |\n| onPageSizeChange | 每页显示记录数量改变时的回调函数<br><br>**签名**:<br>Function(pageSize: Number) => void<br>**参数**:<br>_pageSize_: {Number} 改变后的每页显示记录数                                                          | Function                          | () => {}       |\n| hideOnlyOnePage  | 当分页数为1时，是否隐藏分页器                                                                                                                                                               | Boolean                           | false          |\n| showJump         | type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域                                                                                                      | Boolean                           | true           |\n| link             | 设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：<http://xxx.com/{page}>                                                                                                                  | String                            | -              |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"受控分页","order":"1","jsx":"import { Pagination } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            current: 2\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(current) {\n        this.setState({\n            current\n        });\n    }\n\n    render() {\n        return (\n            <Pagination current={this.state.current} onChange={this.handleChange} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>受控分页，是指分页组件的状态由父组件维护，组件自身只负责渲染其父组件传递的值，父组件通过 <code>current</code> 属性传递当前的值。</p>\n"},{"title":"分页按钮链接","order":"7","jsx":"import { Pagination } from '@alifd/next';\n\nconst format = `${window.location.href}#/{page}`;\n\nReactDOM.render(\n    <Pagination defaultCurrent={2} link={format} />,\n    mountNode\n);\n","css":"","body":"\n<p>可以通过指定 <code>link</code> 属性来设置页码按钮的跳转链接，方便 SEO，link 属性的值为一个包含 <code>{page}</code> 的模板字符串，Pagination 组件会将该占位符替换为具体的页码数字。</p>\n"},{"title":"每页显示","order":"5","jsx":"import { Pagination } from '@alifd/next';\n\nconst handlePageSizeChange = size => console.log(size);\n\nReactDOM.render(\n    <div>\n        <h3>To hidden per page size selector</h3>\n        <Pagination pageSizeSelector={false} />\n        <h3>Type per page size selector of is dropdown，and as for the tail of the entire component</h3>\n        <Pagination pageSizeSelector=\"dropdown\" pageSizePosition=\"end\" onPageSizeChange={handlePageSizeChange} />\n        <h3>Filter type per page size selector, and use floating layout</h3>\n        <Pagination pageSizeSelector=\"filter\" onPageSizeChange={handlePageSizeChange} useFloatLayout />\n    </div>,\n    mountNode\n);\n","css":"","body":"\n<p>可以通过设置 <code>pageSize</code> 属性来指定每页显示的数量。<br>\n可以通过设置 <code>pageSizeSelector</code> 属性来指定是否显示 每页数量选择 的部件以及部件形状。<br>\n可以通过设置 <code>pageSizeList</code> 属性来指定 每页显示数量 可选的值。<br>\n可以通过设置 <code>pageSizePosition</code> 属性来指定 每页显示数量选择 的部件显示在整个组件的开始位置还是结束位置。\n可以通过设置 <code>onPageSizeChange</code> 属性来指定每页显示的数量变化时的回调函数。</p>\n"},{"title":"配合 react-router 使用","order":"8","jsx":"import { Pagination } from '@alifd/next';\nimport { hashHistory } from 'react-router';\n\nfunction handleChange(page) {\n    hashHistory.push(page.toString());\n}\n\nReactDOM.render(\n    <Pagination defaultCurrent={2} onChange={handleChange} />,\n    mountNode\n);\n","css":"","body":"\n<p>单页应用场景下，Pagination 组件可以使用外部跳转的方法来实现单页内部跳转。</p>\n"},{"title":"前进后退按钮只显示箭头","order":"4","jsx":"import { Pagination } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <h3>normal</h3>\n        <Pagination defaultCurrent={2} />\n        <h3>arrow-only</h3>\n        <Pagination defaultCurrent={2} shape=\"arrow-only\" />\n        <h3>arrow-prev-only</h3>\n        <Pagination defaultCurrent={2} shape=\"arrow-prev-only\" />\n        <h3>no-border</h3>\n        <Pagination defaultCurrent={2} shape=\"no-border\" type=\"simple\" />\n    </div>,\n    mountNode\n);\n","css":".next-pagination + .next-pagination {\n    margin-top: 20px;\n}\n","body":"\n<p>可以通过指定 <code>shape</code> 属性来设置前进后退按钮箭头的显示方式。</p>\n"},{"title":"显示总数","order":"6","jsx":"import { Pagination } from '@alifd/next';\n\nconst total = 50;\n\nReactDOM.render(\n    <Pagination className=\"custom-pagination\" total={total} totalRender={total => `Total: ${total}`} />,\n    mountNode\n);\n","css":".custom-pagination {\n    display: inline-block;\n    margin-left: 10px;\n}\n","body":"\n<p>分页组件默认不显示总数，你可以通过 totalRender 自定义总数的显示结果。</p>\n"},{"title":"分页尺寸","order":"2","jsx":"import { Pagination } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <h3>small</h3>\n        <Pagination defaultCurrent={2} size=\"small\" />\n        <h3>medium</h3>\n        <Pagination defaultCurrent={2} size=\"medium\" />\n        <h3>large</h3>\n        <Pagination defaultCurrent={2} size=\"large\" />\n    </div>,\n    mountNode\n);\n","css":"","body":"\n<p>可以通过指定 <code>size</code> 属性来设置分页的尺寸。</p>\n"},{"title":"分页类型","order":"3","jsx":"import { Pagination } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <h3>normal</h3>\n        <Pagination defaultCurrent={2} />\n        <h3>simple</h3>\n        <Pagination defaultCurrent={2} type=\"simple\" />\n        <h3>mini</h3>\n        <Pagination defaultCurrent={2} type=\"mini\" />\n    </div>,\n    mountNode\n);\n","css":"","body":"\n<p>可以通过指定 <code>type</code> 属性来设置分页的类型。</p>\n"},{"title":"非受控分页","order":"0","jsx":"import { Pagination } from '@alifd/next';\n\nconst change = function(value) {\n    console.log(value);\n};\n\nReactDOM.render(\n    <Pagination defaultCurrent={2} onChange={change} />,\n    mountNode\n);\n","css":"","body":"\n<p>非受控分页，是指分页组件的状态由自己维护，组件值的改变可以通过 <code>onChange</code> 事件通知父组件，默认值由 <code>defaultCurrent</code> 初始化。</p>\n"}]},{"name":"Paragraph","category":"Components","title":"段落","type":"基本","importStatement":"import { Paragraph } from '@alifd/next';","body":"\n## Guide\n\n段落用于控制页面整体的文本视觉，主要由行间距及文本大小体现。 \n\n## 何时使用\n\n-   页面文本展示需要一致体验。\n-   一般短文本和长文本的行间距是有差别的，短文本的行间距会更小(一般为三行以内)\n\n API\n\n### Paragraph\n\n| 参数   | 说明                                                                 | 类型   | 默认值      |\n| ---- | ------------------------------------------------------------------ | ---- | -------- |\n| size | 组件大小。<br><br>**可选值**:<br>'medium'(中号)<br>'small'(小号)               | Enum | 'medium' |\n| type | 什么方式展示段落<br><br>**可选值**:<br>'long'(展示所有文本)<br>'short'(展示三行以内（非强制）) | Enum | 'long'   |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Paragraph } from '@alifd/next';\n\nconst content = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\n\nReactDOM.render(<div>\n    <Paragraph>{content}</Paragraph>\n    <br/>\n    <Paragraph size=\"small\">{content}</Paragraph>\n</div>, mountNode);\n","css":"","body":"\n<p>最简单的用法。</p>\n"},{"title":"长短文本","order":"1","jsx":"import { Paragraph } from '@alifd/next';\n\nconst content = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\n\nReactDOM.render(<div>\n    <Paragraph>{content}</Paragraph>\n    <br/>\n    <Paragraph type=\"short\">{content}</Paragraph>\n</div>, mountNode);\n","css":"","body":"\n<p>用于短文本和长文本的区分，短文本的行间距会更小(一般为三行以内)</p>\n"}]},{"name":"Progress","category":"Components","title":"进度指示器","type":"展示","importStatement":"import { Progress } from '@alifd/next';","body":"\n## Guide\n\n展示操作的当前进度。\n\n### 何时使用\n\n在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。\n\n-   操作在后台运行，需要耗费一定的客户端等待时间。\n-   操作需要展示一个完成进度的百分比。\n\n API\n\n### Progress\n\n| 参数              | 说明                                                                                                                                                                                          | 类型       | 默认值                                  |\n| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ------------------------------------ |\n| size            | 尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                                            | Enum     | 'medium'                             |\n| shape           | 形态<br><br>**可选值**:<br>'circle', 'line'                                                                                                                                                      | Enum     | 'line'                               |\n| percent         | 所占百分比                                                                                                                                                                                       | Number   | 0                                    |\n| state           | 进度状态, 显示优先级: color > progressive > state<br><br>**可选值**:<br>'normal', 'success', 'error'                                                                                                    | Enum     | 'normal'                             |\n| progressive     | 是否为色彩阶段变化模式, 显示优先级: color > progressive > state                                                                                                                                             | Boolean  | false                                |\n| hasBorder       | 是否添加 Border（只适用于 Line Progress)                                                                                                                                                             | Boolean  | false                                |\n| textRender      | 文本渲染函数<br><br>**签名**:<br>Function(percent: Number, option: Object) => ReactNode<br>**参数**:<br>_percent_: {Number} 当前的进度信息<br>_option_: {Object} 额外的参数<br>**返回值**:<br>{ReactNode} 返回文本节点<br> | Function | percent => `${Math.floor(percent)}%` |\n| color           | 进度条颜色, 显示优先级: color > progressive > state                                                                                                                                                   | String   | -                                    |\n| backgroundColor | 背景色                                                                                                                                                                                         | String   | -                                    |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本进度条","order":"0","jsx":"import { Progress } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Progress percent={30} textRender={() => ''} />\n    <Progress percent={50} />\n    <Progress percent={90} />\n    <Progress percent={40} />\n    <Progress percent={40} hasBorder size=\"large\" />\n</div>, mountNode);\n","css":"","body":"\n<p>普通模式的进度条，通过 <code>percent</code> 属性指定进度，通过 <code>textRender</code> 控制右侧文本信息的展示，\n通过 <code>hasBorder</code> 属性设置组件是否包含边框。</p>\n"},{"title":"圆形进度条","order":"1","jsx":"import { Progress, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Progress percent={30} shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={50} shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={80} shape=\"circle\" textRender={() => ''}/>&nbsp;&nbsp;\n    <Progress percent={100} shape=\"circle\" textRender={() => <Icon type=\"select\" size=\"xl\" />} />\n</div>, mountNode);\n","css":"","body":"\n<p>通过 <code>shape</code> 属性可以改变进度指示器的外观，当取值为 <code>circle</code> 时为圆形进度条。</p>\n"},{"title":"颜色","order":"5","jsx":"import { Progress, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Progress percent={30} shape=\"circle\" color=\"#AF5F3C\"/> &nbsp;&nbsp;&nbsp;&nbsp;\n    <Progress percent={50} shape=\"circle\"/>&nbsp;&nbsp;&nbsp;&nbsp;\n    <Progress percent={90} shape=\"circle\" color=\"rgba(119,66,141, 0.9)\" textRender={() => <Icon type=\"select\" size=\"xl\" />} />\n    <br /><br />\n    <Progress percent={30} shape=\"line\" color=\"rgb(208,16,76)\"/>\n    <Progress percent={50} shape=\"line\"/>\n    <Progress percent={90} shape=\"line\" color=\"blue\" textRender={() => <Icon type=\"select\" size=\"m\" />} />\n</div>, mountNode);\n","css":"","body":"\n<p>通过 <code>color</code> 属性可以改变进度条的颜色。Progress 有三个API可以改变进度条的颜色,其优先级为 color &gt; progressive &gt;  state。</p>\n"},{"title":"动态展示","order":"6","jsx":"import { Progress, Button, Icon } from '@alifd/next';\n\n\nclass CustomProgress extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 0,\n        };\n    }\n\n    addProgress = () => {\n        this.setState(prevState => {\n            return {\n                percent: prevState.percent + 10\n            };\n        });\n    }\n\n    minusProgress = () => {\n        this.setState(prevState => {\n            return {\n                percent: prevState.percent - 10\n            };\n        });\n    }\n\n    render() {\n        const state = this.state;\n        return (<div>\n            <div className=\"progress-panel\">\n                <Button.Group>\n                    <Button onClick={this.minusProgress} disabled={state.percent === 0}><Icon type=\"minus\" /></Button>\n                    <Button onClick={this.addProgress} disabled={state.percent === 100}><Icon type=\"add\" /></Button>\n                </Button.Group>\n            </div>\n\n            <Progress percent={state.percent} progressive size=\"large\" />\n            <br /><br />\n            <Progress percent={state.percent} progressive shape=\"circle\" size=\"large\" />\n        </div>);\n    }\n}\n\nReactDOM.render(<CustomProgress />, mountNode);\n","css":".progress-panel {\n    display: flex;\n    margin-bottom: 14px;\n}\n\n.custom-select {\n    margin-right: 20px;\n}\n","body":"\n<p>此时为增强模式的进度条，会根据当前进度展示不同的样式。注: css animation完成需要时间, 数据调整过于频繁会导致显示延迟。</p>\n"},{"title":"自定义百分比信息","order":"7","jsx":"import { Progress, Icon } from '@alifd/next';\n\nconst textRender = percent => {\n    if (percent === 100) {\n        return <Icon type=\"select\" size=\"medium\" />;\n    }\n    return `${percent.toFixed(2)}%`;\n};\n\nReactDOM.render(<div>\n    {[1, 2, 3, 4, 5, 6].map((value, index) => <Progress key={index} percent={value / 6 * 100} shape=\"circle\" color={`hsl(${index * 60 + 60}, 90%, 50%)`} textRender={textRender}/>)}\n    {[1, 2, 3, 4, 5, 6].map((value, index) => <Progress key={index} percent={value / 6 * 100} shape=\"line\" color={`hsl(${index * 60 + 60}, 90%, 50%)`} textRender={textRender}/>)}\n</div>, mountNode);\n","css":"","body":"\n<p><code>textRender</code> 控制百分比信息的展示,通过自定义<code>textRender</code>个性化百分比渲染. 下面给一个 百分比进度取2位,当达到100%是显示Icon的progressbar.</p>\n"},{"title":"Progressive","order":"4","jsx":"import { Progress } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Progress percent={20} progressive />\n    <Progress percent={60} progressive />\n    <Progress percent={90} progressive />\n</div>, mountNode);\n","css":"","body":"\n<p>当开启 <code>progressive</code> 模式时，Progress 组件会根据自身的进度自动设置展现的颜色值。\n注意，此时会忽略用户设置的 <code>state</code> 的属性值。</p>\n"},{"title":"尺寸","order":"2","jsx":"import { Progress } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Progress percent={30} size=\"small\" />\n    <Progress percent={50} size=\"medium\" />\n    <Progress percent={90} size=\"large\" />\n    <br />\n    <Progress percent={30} size=\"small\" shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={50} size=\"medium\" shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={90} size=\"large\" shape=\"circle\" />\n</div>, mountNode);\n","css":"","body":"\n<p>可以通过 <code>size</code> 属性制定进度条的大小。</p>\n"},{"title":"进度条不同状态","order":"3","jsx":"import { Progress } from '@alifd/next';\n\nReactDOM.render(<div className=\"\">\n    <Progress percent={20} shape=\"circle\" state=\"normal\" className=\"custom-progress\" />\n    <Progress percent={95} shape=\"circle\" state=\"success\" className=\"custom-progress\" />\n    <Progress percent={95} shape=\"circle\" state=\"error\" className=\"custom-progress\" />\n</div>, mountNode);\n","css":".custom-progress {\n    margin: 0 20px;\n}\n","body":"\n<p>用户可以通过 <code>state</code> 属性自定义当前进度的展现状态，可取值为 <code>normal</code>, <code>success</code>, <code>error</code> 分别表示普通、成功、失败这三种状态。</p>\n"}]},{"name":"Radio","category":"Components","title":"单选框","type":"表单","importStatement":"import { Radio } from '@alifd/next';","body":"\n## 开发指南\n\n单选框\n\n### 何时使用\n\n单选框允许用户从一个数据集中选择单个选项。如果你觉得用户需要并排看到所有的可选项，使用单选框进行排他操作。此外，考虑使用下拉列表，相对于显示所有的选项占用更少的空间。\n\n API\n\n### Radio\n\n| 参数             | 说明                                                                                                                                         | 类型                    | 默认值       |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------ | --------------------- | --------- |\n| id             | 组件input的id                                                                                                                                 | String                | -         |\n| checked        | 设置radio是否选中                                                                                                                                | Boolean               | -         |\n| defaultChecked | 设置radio是否默认选中                                                                                                                              | Boolean               | -         |\n| label          | 通过属性配置label                                                                                                                                | ReactNode             | -         |\n| onChange       | 状态变化时触发的事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>_checked_: {Boolean} 是否选中<br>_e_: {Event} Dom 事件对象 | Function              | func.noop |\n| onMouseEnter   | 鼠标进入enter事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} Dom 事件对象                                               | Function              | func.noop |\n| onMouseLeave   | 鼠标离开事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} Dom 事件对象                                                    | Function              | func.noop |\n| disabled       | radio是否被禁用                                                                                                                                 | Boolean               | -         |\n| value          | radio 的value                                                                                                                               | String/Number/Boolean | -         |\n| name           | name                                                                                                                                       | String                | -         |\n\n### Radio.Group\n\n| 参数            | 说明                                                                                                                                                 | 类型                                  | 默认值       |\n| ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------- | --------- |\n| name          | name                                                                                                                                               | String                              | -         |\n| size          | 与 `shape` 属性配套使用，shape设为button时有效<br><br>**可选值**:<br>'large'(大)<br>'medium'(中)<br>'small'(小)                                                       | Enum                                | 'medium'  |\n| shape         | 可以设置成 button 展示形状<br><br>**可选值**:<br>'button'(按钮状)                                                                                                 | Enum                                | -         |\n| value         | radio group的选中项的值                                                                                                                                  | String/Number/Boolean               | -         |\n| defaultValue  | radio group的默认值                                                                                                                                    | String/Number/Boolean               | -         |\n| onChange      | 选中值改变时的事件<br><br>**签名**:<br>Function(value: String/Number, e: Event) => void<br>**参数**:<br>_value_: {String/Number} 选中项的值<br>_e_: {Event} Dom 事件对象 | Function                            | () => { } |\n| disabled      | 表示radio被禁用                                                                                                                                         | Boolean                             | -         |\n| dataSource    | 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']`                                                                                     | Array&lt;any>                       | \\[]       |\n| children      | 通过子元素方式设置内部radio                                                                                                                                   | Array&lt;ReactElement>/ReactElement | -         |\n| itemDirection | 子项目的排列方式<br>- hoz: 水平排列 (default)<br>- ver: 垂直排列<br><br>**可选值**:<br>'hoz', 'ver'                                                                   | Enum                                | 'hoz'     |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Radio } from '@alifd/next';\n\nReactDOM.render((\n    <div>\n        <h4>Without Label</h4>\n        <Radio defaultChecked />&nbsp;\n        <Radio checked />&nbsp;\n        <Radio disabled />&nbsp;\n        <Radio checked disabled />&nbsp;\n        <Radio />\n        <br />\n        <h4>With Label</h4>\n        <Radio id=\"apple\">Apple</Radio>&nbsp;\n        <Radio id=\"banana\" /><label htmlFor=\"banana\" className=\"next-radio-label\">Banana</label>&nbsp;\n        <Radio id=\"apple2\" label=\"Apple\" className=\"testClassname\" />\n    </div>\n), mountNode);\n","css":"","body":"\n<p>使用 <code>Radio</code> 渲染的基本组件。</p>\n"},{"title":"按钮样式组件","order":"4","jsx":"import { Radio } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nconst list = [\n    {\n        value: 'apple',\n        label: 'Apple',\n        disabled: false\n    }, {\n        value: 'pear',\n        label: 'Pear'\n    }, {\n        value: 'orange',\n        label: 'Orange',\n        disabled: true\n    }\n];\n\nclass ControlApp extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value1: 'apple',\n            value2: 'apple',\n            value3: ''\n        };\n\n        this.onNestChange = this.onNestChange.bind(this);\n        this.onSmallChange = this.onSmallChange.bind(this);\n        this.onMediumChange = this.onMediumChange.bind(this);\n    }\n\n    onSmallChange(value) {\n        this.setState({\n            value1: value\n        });\n    }\n\n    onMediumChange(value) {\n        this.setState({\n            value2: value\n        });\n    }\n\n    onNestChange(value) {\n        this.setState({\n            value3: value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>Small size</h4>\n                <RadioGroup dataSource={list} shape=\"button\" size=\"small\" value={this.state.value1} onChange={this.onSmallChange} />\n                <br/>\n                <br/>\n                <h4>Medium size (default)</h4>\n                <RadioGroup dataSource={list} shape=\"button\" size=\"medium\" value={this.state.value2} onChange={this.onMediumChange} />\n                <br/>\n                <br/>\n                <h4>Large size</h4>\n                <RadioGroup shape=\"button\" size=\"large\" value={this.state.value3} onChange={this.onNestChange}>\n                    <Radio id=\"banana\" value=\"banana\">Banana</Radio>\n                    <Radio id=\"watermelon\" value=\"watermelon\">Watermelon</Radio>\n                    <Radio id=\"peach\" value=\"peach\">Peach</Radio>\n                </RadioGroup>\n                <br/>\n                <br/>\n                <h4>Disabled and Selected-Disabled status</h4>\n                <RadioGroup shape=\"button\" value=\"banana\" onChange={this.onNestChange}>\n                    <Radio id=\"peach\" disabled value=\"peach\">Peach</Radio>\n                    <Radio id=\"banana\" disabled value=\"banana\">Banana</Radio>\n                </RadioGroup>\n\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n","css":"","body":"\n<p>使用 <code>RadioGroup</code> 渲染的组，通过设置 <code>shape=&quot;button&quot;</code> 可以让组件以按钮形式展示，同时可以通过 <code>size</code> 来控制组件大小。</p>\n"},{"title":"受限组件","order":"1","jsx":"import { Radio } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nconst list = [\n    {\n        value: 'appale',\n        label: 'Appale'\n    }, {\n        value: 'pear',\n        label: 'Pear'\n    }, {\n        value: 'orange',\n        label: 'Orange'\n    }\n];\n\nclass ControlApp extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: 'orange',\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value) {\n        this.setState({\n            value: value\n        });\n        console.log('onChange', value);\n    }\n\n    onClick(e) {\n        console.log('onClick', e);\n    }\n\n    render() {\n        return (\n            <div>\n                normal:   <RadioGroup dataSource={list} value={this.state.value} onChange={this.onChange} />\n                <br />\n                <br />\n                <br />\n                disabled:  <RadioGroup disabled dataSource={list} value={this.state.value} onChange={this.onChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n","css":"","body":"\n<p>使用 <code>RadioGroup</code> 渲染的组，通过设置 <code>value</code> 属性可以让组件变成<a href=\"https://facebook.github.io/react/docs/forms.html#controlled-components\">受限组件</a>。</p>\n"},{"title":"分组","order":"1","jsx":"import { Radio } from '@alifd/next';\n\nconst Shape = {\n    NORMAL: 'normal',\n    BUTTON: 'button',\n};\n\nconst ItemDirection = {\n    HORIZON: 'hoz',\n    VERTICAL: 'ver',\n};\n\nclass RadioGroup extends React.Component {\n    state = {\n        shape: Shape.NORMAL,\n        itemDirection: ItemDirection.HORIZON,\n    }\n\n    onShapeChange = (shape) => {\n        this.setState({ shape });\n    }\n\n    onItemDirectionChange = (itemDirection) => {\n        this.setState({ itemDirection });\n    }\n\n    render() {\n        return (\n            <div>\n                <h5>Choose a shape</h5>\n                <p>\n                    <Radio.Group\n                        shape=\"button\"\n                        value={this.state.shape}\n                        onChange={this.onShapeChange}\n                    >\n                        <Radio value={Shape.NORMAL}>Normal</Radio>\n                        <Radio value={Shape.BUTTON}>Button</Radio>\n                    </Radio.Group>\n                </p>\n                <h5>Choose an align-type of the item</h5>\n                <p>\n                    <Radio.Group\n                        shape=\"button\"\n                        value={this.state.itemDirection}\n                        onChange={this.onItemDirectionChange}\n                    >\n                        <Radio value={ItemDirection.HORIZON}>Horizon</Radio>\n                        <Radio\n                            value={ItemDirection.VERTICAL}\n                            disabled={this.state.shape === Shape.BUTTON}\n                        >Vertical</Radio>\n                    </Radio.Group>\n                </p>\n                <div className=\"rendered-container\">\n                    <h3>Rendered Result</h3>\n                    <Radio.Group\n                        shape={this.state.shape}\n                        itemDirection={this.state.itemDirection}\n                    >\n                        <Radio value=\"react\">React</Radio>\n                        <Radio value=\"vue\">Vue</Radio>\n                        <Radio value=\"angular\">Angular</Radio>\n                    </Radio.Group>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<RadioGroup />, mountNode);\n","css":".rendered-container {\n    margin: 32px 0 0;\n    padding: 0 24px 24px;\n    border: 3px dashed #aaa;\n    border-radius: 11px;\n}\n","body":"\n<p>使用 <code>&lt;Radio.Group&gt;</code> 渲染 <code>&lt;Radio&gt;</code> 分组。</p>\n"},{"title":"嵌套组件","order":"3","jsx":"import { Radio } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nclass NestApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: 'orange'\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value) {\n        this.setState({\n            value: value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <label id=\"groupId\">Choose fruit</label><br/>\n                <RadioGroup value={this.state.value} onChange={this.onChange} aria-labelledby=\"groupId\">\n                    <Radio id=\"apple\" value=\"apple\">Apple</Radio>\n                    <Radio id=\"watermelon\" value=\"watermelon\">Watermelon</Radio>\n                    <Radio id=\"orange\" value=\"orange\">Orange</Radio>\n                </RadioGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<NestApp />, mountNode);\n","css":"","body":"\n<p>使用 <code>RadioGroup</code>，通过直接嵌套 <code>Radio</code> 组件来渲染的组。</p>\n"},{"title":"非受限组件","order":"2","jsx":"import { Radio } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nconst list = [\n    {\n        value: 'apple',\n        label: 'Apple',\n        disabled: false\n    }, {\n        value: 'pear',\n        label: 'Pear',\n        disabled: true\n    }, {\n        value: 'orange',\n        label: 'Orange',\n    },\n];\n\nconst UnControlApp = () => {\n    return (\n        <div>\n            <RadioGroup dataSource={list} defaultValue={'apple'} />\n        </div>\n    );\n};\n\nReactDOM.render(<UnControlApp />, mountNode);\n","css":"","body":"\n<p>使用 <code>RadioGroup</code> 渲染的组，通过设置 <code>defaultValue</code> 属性可以让组件变成<a href=\"https://facebook.github.io/react/docs/forms.html#uncontrolled-components\">非受限组件</a>。</p>\n"},{"title":"使用Grid 布局","order":"5","jsx":"import { Radio, Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\nconst RadioGroup = Radio.Group;\n\nclass ControlApp extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: 'orange',\n            other: 0,\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value) {\n        this.setState({\n            value: value\n        });\n        console.log('onChange', value);\n    }\n\n    onClick(e) {\n        console.log('onClick', e);\n    }\n\n    render() {\n        return (\n            <div >\n                <h4>Grid Layout</h4>\n                <RadioGroup onChange={this.onChange} style={{ width: '1000px'}} >\n                    <Row>\n                        <Col span=\"8\">\n                            <Radio value=\"apple1\" onClick={this.onClick} >Apple</Radio>\n                        </Col>\n                        <Col span=\"8\">\n                            <Radio value=\"pear1\" onClick={this.onClick} >Pear</Radio>\n                        </Col>\n                        <Col span=\"8\">\n                            <Radio value=\"banana1\" onClick={this.onClick} >Banana</Radio>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span=\"8\">\n                            <Radio value=\"peach\" onClick={this.onClick} >Peach</Radio>\n                        </Col>\n                        <Col span=\"8\">\n                            <Radio value=\"watermelon\" onClick={this.onClick} >Watermelon</Radio>\n                        </Col>\n                        <Col span=\"8\">\n                            <Radio value=\"strawberry\" onClick={this.onClick} >Strawberry</Radio>\n                        </Col>\n                    </Row>\n                </RadioGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n","css":"","body":"\n<p>使用 <code>Grid</code> 布局 <code>RadioGroup</code> 中的选项。</p>\n"}]},{"name":"Range","category":"Components","title":"区段选择器","type":"表单","importStatement":"import { Range } from '@alifd/next';","body":"\n## 开发指南\n\n区间选择\n\n### 何时使用\n\n滑块控件(Sliders，简称滑块)可以让我们通过在连续或间断的区间内滑动锚点来选择一个合适的数值。区间最小值放在左边，对应的，最大值放在右边。滑块(Sliders)可以在滑动条的左右两端设定图标来反映数值的强度。这种交互特性使得它在设置诸如音量、亮度、色彩饱和度等需要反映强度等级的选项时成为一种极好的选择。\n\n### 使用注意\n\n-   onChange是和value进行配置做受控处理的。onChange在滑动过程中不会触发，滑动停止后会触发。\n-   onProcess不建议内部做setState 进行受控，因为会频繁触发，整个滑动过程中会一直触发。\n\n API\n\n### Range\n\n| 参数             | 说明                                                                                                                                                                          | 类型                                     | 默认值            |\n| -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------- | -------------- |\n| slider         | 滑块个数<br><br>**可选值**:<br>'single'(单个)<br>'double'(两个)                                                                                                                        | Enum                                   | 'single'       |\n| min            | 最小值                                                                                                                                                                         | Number                                 | 0              |\n| max            | 最大值                                                                                                                                                                         | Number                                 | 100            |\n| step           | 步长，取值必须大于 0，并且可被 (max - min) 整除。                                                                                                                                            | Number                                 | 1              |\n| value          | 设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`                                                                                                           | Number/Array&lt;Number>                | -              |\n| defaultValue   | 设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`                                                                                                           | Number/Array&lt;Number>                | -              |\n| marks          | 刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示）                                                                                         | Boolean/Number/Array&lt;Number>/Object | false          |\n| marksPosition  | marks显示在上方('above')or下方('below')<br><br>**可选值**:<br>'above', 'below'                                                                                                        | Enum                                   | 'above'        |\n| disabled       | 值为 `true` 时，滑块为禁用状态                                                                                                                                                         | Boolean                                | false          |\n| onChange       | 当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用<br><br>**签名**:<br>Function(value: String/number) => void<br>**参数**:<br>_value_: {String/number} null | Function                               | func.noop      |\n| onProcess      | 滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用<br><br>**签名**:<br>Function(value: String/number) => void<br>**参数**:<br>_value_: {String/number} null                    | Function                               | func.noop      |\n| hasTip         | 是否显示 tip                                                                                                                                                                    | Boolean                                | true           |\n| tipRender      | 自定义 tip 显示内容<br><br>**签名**:<br>Function(value: Number/String) => ReactNode<br>**参数**:<br>_value_: {Number/String} 值<br>**返回值**:<br>{ReactNode} 显示内容<br>                     | Function                               | value => value |\n| reverse        | 选中态反转                                                                                                                                                                       | Boolean                                | false          |\n| pure           | 是否pure render                                                                                                                                                               | Boolean                                | false          |\n| fixedWidth     | 是否为拖动线段类型,默认slider为double, defaultValue必传且指定区间                                                                                                                              | Boolean                                | false          |\n| tooltipVisible | tooltip是否默认展示                                                                                                                                                               | Boolean                                | false          |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Range } from '@alifd/next';\n\n\nconst style = {\n    marginBottom: '15px'\n};\n\nReactDOM.render((\n    <div style={{width: '400px', margin: '50px'}}>\n\n        <h4>single slider - from left to right</h4>\n        <Range defaultValue={30} style={style} hasTip={false} />\n        <h4>single slider - from right to left</h4>\n        <Range defaultValue={30} style={style} reverse hasTip={false} />\n        <h4>double slider - from outside to inside</h4>\n        <Range slider={'double'} defaultValue={[20, 40]} style={style} />\n        <h4>double slider - from inside to outside</h4>\n        <Range slider={'double'} defaultValue={[20, 40]} style={style} reverse />\n        <h4>Disabled</h4>\n        <Range defaultValue={30} disabled style={style} />\n        <h4>Disabled</h4>\n        <Range slider={'double'} defaultValue={[20, 40]} disabled style={style} />\n        <h4>tooltipVisible disabled</h4>\n        <Range disabled tooltipVisible defaultValue={60} style={style} />\n        <h4>tooltipVisible</h4>\n        <Range tooltipVisible defaultValue={60} style={style} />\n        <h4>tooltipVisible disabled</h4>\n        <Range disabled tooltipVisible slider={'double'} defaultValue={[57, 77]} style={style} />\n        <h4>tooltipVisible</h4>\n        <Range tooltipVisible slider={'double'} defaultValue={[57, 77]} style={style} />\n    </div>\n), mountNode);\n","css":"","body":"\n<p>基本滑块，当 <code>slider</code> 为 <code>double</code> 时，渲染为双滑块。当 <code>disabled</code> 为 <code>true</code> 时，滑块处于不可用状态。</p>\n"},{"title":"事件","order":"3","jsx":"import { Range } from '@alifd/next';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 128,\n            value2: 300,\n            doubleValue: [200, 300]\n        };\n\n    }\n\n    //Controlled. onChange will be triggered when startValue isn't equal to endValue after sliding\n    onChange(value) {\n        console.log('onChange value:', value);\n        this.setState({value});\n    }\n\n    // This callback will be triggered when startValue and endValue aren't equal after mousedown/mousemove. You shouldn't call setState here.\n    onProcess(value) {\n        console.log('onProcess: ', value);\n    }\n\n    onChangeDouble(doubleValue) {\n        console.log('onChange doubleValue:', doubleValue);\n        this.setState({doubleValue});\n    }\n\n    onProcessDouble(doubleValue) {\n        console.log('onProcess: ', doubleValue);\n    }\n\n    render() {\n        return (\n            <div style={{width: '400px', margin: '50px'}}>\n                <p>range 0 ~ 1024</p>\n                <div style={{width: '400px', marginTop: '50px'}}>\n\n                    <Range value={this.state.value} onChange={this.onChange.bind(this)}\n                        onProcess={this.onProcess.bind(this)}\n                        min={0} max={1024} marks={[0, 1024]} />\n                </div>\n\n                <p>with value and without onChange</p>\n                <div style={{width: '400px', marginTop: '50px'}}>\n\n                    <Range value={this.state.value2}\n                        onProcess={this.onProcess.bind(this)}\n                        min={0} max={1024} marks={[0, 1024]} />\n                </div>\n\n\n                <p>double slider controlled</p>\n                <div style={{width: '400px', marginTop: '50px'}}>\n\n                    <Range slider=\"double\" value={this.state.doubleValue} onChange={this.onChangeDouble.bind(this)}\n                        onProcess={this.onProcessDouble.bind(this)}\n                        min={0} max={1024} marks={[0, 1024]} />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nReactDOM.render(<App />, mountNode);\n","css":"","body":"\n<p>onChange,onProcess事件</p>\n"},{"title":"范围与 step","order":"5","jsx":"import { Range, NumberPicker, Grid, Icon } from '@alifd/next';\n\n\n\nconst {Row, Col} = Grid;\n\nclass Demo extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            valueInt: 3,\n            valueDec: 0.05,\n            valueIcon: 1,\n            preIconClass: '',\n            afterIconClass: ''\n        };\n\n    }\n\n    onChangeInt(value) {\n        console.log(value);\n        this.setState(Object.assign({}, this.state, {\n            valueInt: value\n        }));\n    }\n\n    onChangeDec(value) {\n\n        this.setState(Object.assign({}, this.state, {\n            valueDec: value\n        }));\n    }\n\n    onIconRangeProcess(value) {\n        const mid = 50;\n        this.setState(Object.assign({}, this.state, {\n            valueIcon: value,\n            preIconClass: value < mid ? 'myicon-highlight' : '',\n            afterIconClass: value >= mid ? 'myicon-highlight' : ''\n        }));\n    }\n\n    render() {\n        return (\n            <div style={{width: '400px', margin: '50px'}}>\n                <h2>Used with numberPicker</h2>\n                <Row>\n                    <Col span=\"12\" style={{marginTop: '10px'}}>\n                        <Range value={this.state.valueInt} min={0} max={20} step={1}\n                            onChange={this.onChangeInt.bind(this)} />\n                    </Col>\n                    <Col span=\"12\">\n                        <NumberPicker value={this.state.valueInt} min={0} max={1024} step={1}\n                            onChange={this.onChangeInt.bind(this)} />\n                    </Col>\n                </Row>\n                <br />\n                <Row>\n                    <Col span=\"12\" style={{marginTop: '10px'}}>\n                        <Range value={this.state.valueDec} min={0} max={1} step={0.01}\n                            onChange={this.onChangeDec.bind(this)} />\n                    </Col>\n                    <Col span=\"12\">\n                        <NumberPicker value={this.state.valueDec} min={0} max={1} step={0.01}\n                            onChange={this.onChangeDec.bind(this)} />\n                    </Col>\n                </Row>\n                <h2>Used with Icon</h2>\n\n                <div className=\"iconWrapper\">\n                    <Icon className={`myicon ${this.state.preIconClass}`} type=\"cry\" />\n                    <Range min={1} max={100} onChange={this.onIconRangeProcess.bind(this)} value={this.state.valueIcon} />\n                    <Icon className={`myicon ${this.state.afterIconClass}`} type=\"smile\" />\n                </div>\n            </div>\n        );\n    }\n\n\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n\n","css":".iconWrapper {\n  position: relative;\n  padding: 0px 40px;\n}\n\n.iconWrapper .myicon {\n  position: absolute;\n  top: -3px;\n  width: 16px;\n  height: 16px;\n  line-height: 1;\n  font-size: 16px;\n  color: #ccc;\n}\n\n.iconWrapper .myicon:first-child {\n  left: 0;\n}\n\n.iconWrapper .myicon:last-child {\n  right: 0;\n}\n\n.myicon.myicon-highlight {\n  color: #666;\n}\n","body":"\n<p>与number-picker结合,外部控制,与Icon结合设置边界Icon</p>\n"},{"title":"固定宽度滑动","order":"0","jsx":"import { Range } from '@alifd/next';\n\nconst style = {\n    marginBottom: '15px'\n};\n\nconst styleX3 = {\n    marginBottom: '45px'\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: [10, 300]\n        };\n\n    }\n\n    //Controlled. onChange will be triggered when startValue isn't equal to endValue after sliding\n    onChange(value) {\n        console.log('onChange value:', value);\n        this.setState({value});\n    }\n\n    // This callback will be triggered when startValue and endValue aren't equal after mousedown/mousemove. You shouldn't call setState here.\n    onProcess(value) {\n        // this.setState({value});\n        console.log('onProcess: ', value);\n    }\n\n    render() {\n        return (\n            <div style={{width: '400px', margin: '50px'}}>\n                <h4>fixedWidth basic</h4>\n                <Range fixedWidth defaultValue={[20, 40]} style={style} />\n                <h4>fixedWidth basic with tooltipVisible</h4>\n                <Range tooltipVisible fixedWidth defaultValue={[70, 90]} style={styleX3} />\n                <Range disabled tooltipVisible fixedWidth defaultValue={[70, 90]} style={style} />\n                <h4>fixedWidth with marks</h4>\n                <Range fixedWidth step={10} defaultValue={[20, 40]} scales={10} marks={10} style={styleX3} />\n                <Range fixedWidth step={2} defaultValue={[60, 80]} scales={[0, 100]} marks={[0, 30, 100]} style={style} marksPosition=\"below\" />\n                <h4>fixedWidth with 0.01 step</h4>\n                <Range fixedWidth defaultValue={[0.6, 0.7]} min={0.5} max={1} step={0.01}/>\n                <div style={{width: '400px', marginTop: '50px'}}>\n                    <p>range 0 ~ 1024</p>\n                    <Range fixedWidth value={this.state.value}\n                        onChange={this.onChange.bind(this)}\n                        onProcess={this.onProcess.bind(this)}\n                        min={0} max={1024} marks={[0, 1024]} />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nReactDOM.render(<App />, mountNode);\n\n","css":"","body":"\n<p>默认双滑块(<code>slider</code> 为 <code>double</code>)，且指定 <code>defaultValue</code>为区间值下可用。范围不可被改变，拖动所选区域改变始末滑块位置。</p>\n"},{"title":"刻度及标识","order":"1","jsx":"import { Range } from '@alifd/next';\n\nconst style = {\n    marginBottom: '20px',\n    marginTop: '20px'\n};\n\nReactDOM.render((\n    <div style={{width: '400px', margin: '50px'}}>\n        <p>With minimal and maximal value</p>\n        <Range defaultValue={0} marks={[0, 100]} style={style} />\n        <Range slider={'double'} defaultValue={[20, 40]} scales={[0, 100]} marks={[0, 100]} style={style} />\n        <Range defaultValue={30} style={style} />\n        <p>Below</p>\n        <Range defaultValue={0} marks={[0, 100]} style={style} marksPosition=\"below\" />\n        <Range slider={'double'} defaultValue={[20, 40]} scales={[0, 100]} marks={[0, 100]} style={style} marksPosition=\"below\" />\n        <Range defaultValue={30} scales={[0, 100]} marks={[0, 100]} style={style} marksPosition=\"below\" />\n        <p>Equal division</p>\n        <Range defaultValue={30} marks={5} style={style} />\n        <Range slider={'double'} defaultValue={[20, 40]} scales={10} marks={10} style={style} />\n        <Range disabled slider={'double'} defaultValue={[20, 40]} scales={10} marks={10} style={style} />\n        <p>Free</p>\n        <Range defaultValue={30} marks={[0, 26, 37, 100]} style={style} />\n        <Range slider={'double'} defaultValue={[20, 40]} marks={[0, 26, 37, 100]} style={style} hasTip={false}/>\n        <Range defaultValue={30} marks={{0: '0°C', 26: '26°C', 37: '37°C', 100: '100°C'}} style={style} />\n    </div>\n), mountNode);\n","css":"","body":"\n<p>通过 <code>scales</code> 与 <code>marks</code> 属性设置刻度及标识。</p>\n"},{"title":"min,max,step","order":"2","jsx":"import { Range } from '@alifd/next';\n\nconst style = {\n    marginBottom: '40px',\n    marginTop: '40px'\n};\nReactDOM.render((\n    <div style={{width: '400px', margin: '50px'}}>\n        <p>Range 0 ~ 1024</p>\n        <Range defaultValue={128} min={0} max={1024} marks={[0, 1024]} style={style} />\n        <p>Range 0 ~ 1024，step 128</p>\n        <Range defaultValue={512} min={0} max={1024} step={128} marks={[0, 1024]}\n            style={style} />\n    </div>\n), mountNode);\n","css":"","body":"\n<p>可以通过 <code>min</code> 与 <code>max</code> 设置范围边界。通过 <code>step</code>(被 max - min 整除) 设置移动的最小步频。min默认为0,max默认为100.</p>\n"},{"title":"选择态反转","order":"7","jsx":"import { Range } from '@alifd/next';\n\n\nconst style = {\n    marginBottom: '15px'\n};\n\nReactDOM.render((\n    <div style={{width: '400px', margin: '50px'}}>\n        <Range defaultValue={30} style={style} hasTip={false} />\n        <Range defaultValue={30} style={style} reverse hasTip={false} />\n        <Range slider={'double'} defaultValue={[20, 40]} style={style} />\n        <Range slider={'double'} defaultValue={[20, 40]} style={style} reverse />\n        <Range defaultValue={30} disabled style={style} />\n        <Range defaultValue={30} disabled style={style} reverse />\n        <Range slider={'double'} defaultValue={[20, 40]} disabled style={style} />\n        <Range slider={'double'} defaultValue={[20, 40]} disabled style={style} reverse />\n    </div>\n), mountNode);\n","css":"","body":"\n<p>设置reverse为true, 选中态会反转。</p>\n"},{"title":"tipRender","order":"5","jsx":"import { Range } from '@alifd/next';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 128\n        };\n\n    }\n\n    // This callback will be triggered when startValue and endValue aren't equal after moving.\n    onChange(value) {\n        console.log('onChange value:', value);\n    }\n\n    // This callback will be triggered when startValue and endValue aren't equal after mousedown/mousemove. You can call setState here when using a controlled component.\n    onProcess(value) {\n        console.log('onProcess');\n        this.setState({value});\n    }\n\n    formatter(value) {\n        return `$${value}`;\n    }\n    render() {\n        return (\n            <div style={{width: '400px', margin: '50px'}}>\n                <p>Range 0 ~ 1024</p>\n                <div style={{width: '400px', marginTop: '50px'}}>\n\n                    <Range defaultValue={256} tipRender={this.formatter.bind(this)} value={this.state.value} onChange={this.onChange.bind(this)}\n                        onProcess={this.onProcess.bind(this)}\n                        min={0} max={1024} marks={[0, 1024]} />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nReactDOM.render(<App />, mountNode);\n","css":"","body":"\n<p>tipRender 示例</p>\n"}]},{"name":"Rating","category":"Components","title":"评分","type":"基本","importStatement":"import { Rating } from '@alifd/next';","body":"\n## Guide\n\n评分组件通常用于用户反馈场景。\n\n API\n\n### Rating\n\n| 参数            | 说明                                                                                                    | 类型       | 默认值       |\n| ------------- | ----------------------------------------------------------------------------------------------------- | -------- | --------- |\n| defaultValue  | 默认值                                                                                                   | Number   | 0         |\n| size          | 尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                      | Enum     | 'medium'  |\n| value         | 值                                                                                                     | Number   | -         |\n| count         | 评分的总数                                                                                                 | Number   | 5         |\n| showGrade     | 是否显示 grade                                                                                            | Boolean  | false     |\n| allowHalf     | 是否允许半星评分                                                                                              | Boolean  | false     |\n| onChange      | 用户点击评分时触发的回调<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>_value_: {String} 评分值    | Function | func.noop |\n| onHoverChange | 用户hover评分时触发的回调<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>_value_: {String} 评分值 | Function | func.noop |\n| disabled      | 是否禁用                                                                                                  | Boolean  | false     |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Rating } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Rating defaultValue={3.2} onChange={val => console.log('change:', val)} onHoverChange={val => console.log('hover:', val)} />\n</div>, mountNode);\n","css":"","body":"\n<p>最简单的用法。</p>\n"},{"title":"只读模式","order":"4","jsx":"import { Rating } from '@alifd/next';\n\nReactDOM.render(<Rating defaultValue={3.2} disabled />, mountNode);\n","css":"","body":"\n<p>设置 <code>disabled</code> 属性后，评分组件仅展示模式，不可选择。</p>\n"},{"title":"等级提示","order":"5","jsx":"import { Rating } from '@alifd/next';\n\nReactDOM.render(<Rating defaultValue={2} showGrade />, mountNode);\n","css":"","body":"\n<p>添加 <code>showGrade</code> 属性，使评分组件具有等级提示信息。</p>\n"},{"title":"半星评分","order":"2","jsx":"import { Rating } from '@alifd/next';\n\nReactDOM.render(<Rating defaultValue={3.2} allowHalf />, mountNode);\n","css":"","body":"\n<p>默认情况下评分组件只支持整数评分，通过开启 <code>allowHalf</code> 属性可以支持半星评分。</p>\n"},{"title":"尺寸","order":"1","jsx":"import { Rating } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Rating defaultValue={3.2} size=\"small\" />\n    <br/>\n    <br/>\n    <Rating defaultValue={3.2} />\n    <br/>\n    <br/>\n    <Rating defaultValue={3.2} size=\"large\" />\n</div>, mountNode);\n","css":"","body":"\n<p>通过 <code>size</code> 属性可以控制评分组件的大小，支持三种尺寸 <code>small</code>, <code>medium</code>, <code>large</code>。\n默认尺寸为 <code>medium</code> 。</p>\n"}]},{"name":"Search","category":"Components","title":"搜索","type":"表单","importStatement":"import { Search } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n页面、表单数据搜索时使用\n\n API\n\n### Search\n\n> 输入框部分继承 Select.AutoComplete 的能力，可以直接用AutoComplete 的 api\n\n| 参数                 | 说明                                                                                                                         | 类型            | 默认值       |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------- | ------------- | --------- |\n| size               | 大小<br><br>**可选值**:<br>'large'('大')<br>'medium'('小')                                                                        | Enum          | 'medium'  |\n| type               | 类型 shape=normal: primary/secondary; shape=simple: normal/dark;<br><br>**可选值**:<br>'primary', 'secondary', 'normal', 'dark' | Enum          | 'normal'  |\n| shape              | 形状<br><br>**可选值**:<br>'normal', 'simple'                                                                                   | Enum          | 'normal'  |\n| defaultValue       | 搜索框默认值                                                                                                                     | String        | -         |\n| value              | 搜索框数值                                                                                                                      | String/Number | -         |\n| onChange           | 输入关键字时的回掉<br><br>**签名**:<br>Function(value: Object) => void<br>**参数**:<br>_value_: {Object} 输入值                            | Function      | func.noop |\n| onSearch           | 点击搜索按钮触发的回调<br><br>**签名**:<br>Function(value: Object) => void<br>**参数**:<br>_value_: {Object} 输入值                          | Function      | func.noop |\n| defaultFilterValue | 选择器默认值                                                                                                                     | String        | -         |\n| filter             | 选择器                                                                                                                        | Array         | \\[]       |\n| filterValue        | 选择器值                                                                                                                       | String        | -         |\n| onFilterChange     | 选择器发生变化时回调<br><br>**签名**:<br>Function(filter: Object) => void<br>**参数**:<br>_filter_: {Object} value                       | Function      | func.noop |\n| dataSource         | 搜索框下拉联想列表                                                                                                                  | Array         | -         |\n| placeholder        | 默认提示                                                                                                                       | String        | -         |\n| searchText         | button 的内容                                                                                                                 | ReactNode     | -         |\n| filterProps        | 选择器的props                                                                                                                  | Object        | -         |\n| buttonProps        | 按钮的额外属性                                                                                                                    | Object        | {}        |\n| popupContent       | 自定义渲染的的下拉框                                                                                                                 | ReactNode     | -         |\n| visible            | 自定义渲染的的下拉框                                                                                                                 | Boolean       | -         |\n| hasClear           | 是否显示清除按钮                                                                                                                   | Boolean       | false     |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基础用法","order":"0","jsx":"import { Search } from '@alifd/next';\n\n\nfunction onSearch(v) {\n    console.log(v);\n}\nconst App = () => [\n    <p key=\"1\">simple</p>,\n    <Search key=\"2\" shape=\"simple\" onSearch={onSearch} style={{width: '400px'}}/>,\n    <p key=\"3\">default</p>,\n    <Search key=\"4\"  onSearch={onSearch} style={{width: '400px'}}/>,\n    <p key=\"5\">custom text </p>,\n    <Search key=\"6\" searchText=\"search\" onSearch={onSearch} style={{width: '400px'}}/>,\n    <p key=\"7\">custom text widthout icon</p>,\n    <Search key=\"8\" hasIcon={false} searchText={<span style={{color: 'blue'}}>search</span>} onSearch={onSearch} style={{width: '400px'}}/>,\n];\n\nReactDOM.render(<App />, mountNode);\n","css":"","body":"\n"},{"title":"联想","order":"4","jsx":"import { Search } from '@alifd/next';\n\nconst dataSource = [{\n    label: 'Recent',\n    value: 'Recent',\n}, {\n    label: 'dress',\n    value: 'dress',\n}, {\n    label: 'sunglasses',\n    value: 'sunglasses',\n}, {\n    label: 't-shirt',\n    value: 't-shirt',\n}];\n\nclass App extends React.Component {\n    onSearch(value, filterValue) {\n        console.log(value, filterValue);\n    }\n\n    onChange(value) {\n        this.setState({\n            value: value\n        });\n    }\n\n    render() {\n        return (\n            <Search dataSource={dataSource} onChange={this.onChange.bind(this)}\n                onSearch={this.onSearch.bind(this)}/>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n"},{"title":"自定义弹层","order":"5","jsx":"import { Search, Menu, Button } from '@alifd/next';\n\nconst menuData = [\n    {\n        label: 'Option 1',\n        value: 'Option 1 Value',\n        index: '1'\n    }, {\n        label: 'Option 2',\n        value: 'Option 2 Value',\n        index: '2'\n    }, {\n        label: 'Option 3',\n        value: 'Option 3 Value',\n        index: '3'\n    }, {\n        label: 'Option 4',\n        value: 'Option 4 Value',\n        index: '4'\n    }\n];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false,\n            value: '111222',\n            menuData: menuData\n        };\n    }\n\n    renderMenu() {\n        const menuData = this.state.menuData;\n\n        return (<Menu onSelect={this.onSelect.bind(this)} rtl className=\"diy-menu\" selectMode=\"single\">\n            <Menu.Group label=\"Recent\" key=\"xxx\">\n                {menuData.map((item) => {\n                    return (<Menu.Item key={item.value}>\n                        {item.label}\n                        <Button className=\"diy-menu-button\" onClick={this.onDelete.bind(this, item.index)} text>Delete</Button>\n                    </Menu.Item>);\n                })}\n            </Menu.Group>\n        </Menu>);\n    }\n\n    onSearch(value) {\n        console.log(value);\n    }\n\n    onChange(value) {\n        this.setState({\n            visible: value.length > 0,\n            value: value\n        });\n    }\n\n    onSelect(selectedKeys) {\n        this.setState({\n            visible: false,\n            value: selectedKeys[0]\n        });\n    }\n\n    onDelete(index, e) {\n        e.stopPropagation();\n\n        const menuData = this.state.menuData;\n\n        const menuDataNew = [];\n\n        menuData.forEach(function (item) {\n            if (item.index !== index) {\n                menuDataNew.push(item);\n            }\n        });\n\n        this.setState({\n            menuData: menuDataNew\n        });\n    }\n\n    onFocus() {\n        this.setState({\n            visible: true\n        });\n    }\n\n    render() {\n        const {visible, value} = this.state;\n\n        return (<div style={{width: 700}}>\n            <Search\n                popupContent={this.renderMenu()}\n                visible={visible}\n                value={value}\n                onSearch={this.onSearch.bind(this)}\n                onChange={this.onChange.bind(this)}\n                onFocus={this.onFocus.bind(this)}\n            />\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"\n.diy-menu{\n    /*width: 275px*/;\n}\n\n.diy-menu .next-menu-item a{\n    display:none;\n    float: right;\n    cursor: pointer;\n}\n.diy-menu .next-menu-item:hover a{\n    display:inline-block;\n}\n.diy-menu .diy-menu-button {\n    float: right;\n}\n.diy-menu[dir=rtl] .diy-menu-button {\n    float: left;\n}\n","body":"\n<p>自定义下拉框内容。</p>\n"},{"title":"下拉框","order":"3","jsx":"import { Search } from '@alifd/next';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filter: [\n                {\n                    label: 'Products',\n                    value: 'Products'\n                },\n                {\n                    label: 'Products1',\n                    value: 'Products1'\n                },\n                {\n                    label: 'Products2',\n                    value: 'Products2'\n                },\n                {\n                    label: 'Products3',\n                    value: 'Products3'\n                },\n                {\n                    label: 'Products4',\n                    value: 'Products4'\n                },\n                {\n                    label: 'Products5',\n                    value: 'Products5'\n                },\n                {\n                    label: 'Products6',\n                    value: 'Products6'\n                },\n                {\n                    label: 'Products7',\n                    value: 'Products7'\n                },\n                {\n                    label: 'Products8',\n                    value: 'Products8'\n                },\n                {\n                    label: 'Products9',\n                    value: 'Products9'\n                },\n                {\n                    label: 'Products10',\n                    value: 'Products10'\n                },\n                {\n                    label: 'Suppliers',\n                    value: 'Suppliers',\n                    default: true\n                }\n            ],\n            value: ''\n        };\n    }\n\n    onSearch(value, filterValue) {\n        console.log(value, filterValue);\n    }\n\n    onChange(value) {\n        this.setState({\n            value: value\n        });\n    }\n\n    // value is filter value，obj is the search value\n    onFilterChange(value) {\n        console.log(value);\n    }\n\n    render() {\n\n        return (<div>\n            <Search onChange={this.onChange.bind(this)} onSearch={this.onSearch.bind(this)}\n                filterProps={{autoWidth: false}}\n                filter={this.state.filter} onFilterChange={this.onFilterChange.bind(this)}/>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>带下拉框的用法。可以设置onFilterChange事件</p>\n"},{"title":"大小","order":"2","jsx":"import { Search } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Search\n        size=\"large\"\n        defaultValue=\"large\"\n        searchText=\"Search\"\n        placeholder=\"What are you looking for...\" />\n    <br/><br/>\n    <Search\n        size=\"medium\"\n        defaultValue=\"medium\"\n        searchText=\"Search\"\n        placeholder=\"What are you looking for...\" />\n</div>, mountNode);\n","css":"","body":"\n<p>通过size进行大小设置，支持large、medium</p>\n"},{"title":"类别","order":"1","jsx":"import { Search } from '@alifd/next';\n\nReactDOM.render(<div>\n    <h2>Normal</h2>\n    <Search type=\"primary\" placeholder=\"primary\"/>\n    <br/> <br/>\n    <Search type=\"secondary\" placeholder=\"Secondary\"/>\n    <br/> <br/>\n    <Search type=\"normal\" placeholder=\"normal\"/>\n    <br/> <br/>\n    <div style={{background: '#333', padding: 20}}>\n        <Search type=\"dark\" placeholder=\"dark\"/>\n    </div>\n    <h2>Simple</h2>\n    <Search type=\"normal\" shape=\"simple\" placeholder=\"normal\"/>\n    <br/> <br/>\n    <div style={{background: '#333', padding: 20}}>\n        <Search shape=\"simple\" type=\"dark\" placeholder=\"dark\"/>\n    </div>\n</div>, mountNode);\n","css":"","body":"\n<p>简单用法</p>\n"}]},{"name":"Select","category":"Components","title":"选择器","type":"表单","importStatement":"import { Select } from '@alifd/next';","body":"\n## Guide\n\n### 何时使用\n\n#### Select\n\n如果你不期望用户输入的值生效而仅仅是选择，那么使用 Select. 同时可以使用 Select 的 showSearch 属性进行过滤。\n\n### AutoComplete\n\nAutoComplete 会保留用户输入的值，本质上是 Input 组件，扩展了 autocomplete 的能力，所以 Input 组件的属性可以直接透传。\n\n### 常见问题\n\n#### 出现类似的`flatternChildren`的warning\n\nSelect 默认使用 `value` 作为菜单项的 key，如果没有设置 key 值，则使用默认的序列 index 作为 key 值，确保这些值不会发生重复。\n\n#### dataSource的使用\n\nSelect 同时支持 children 和在 props 中传入 dataSource 作为数据源, 如果同时设置, 则以 children 为准.\n\n注意：1. Select 默认使用 `value` 作为渲染的菜单项的 `key` 值，所以 `value` 不能重复, 否则无法渲染下拉菜单。2. value 不允许出现 null/undefined/object/array 类型数值\n\n1.  `children`的方式\n\n```js\n<Select>\n    <Select.Option value=\"option1\">option1</Select.Option>\n    <Select.Option value=\"option2\">option2</Select.Option>\n    <Select.Option disabled>disabled</Select.Option>\n</Select>;\n```\n\n2.  `props`的方式\n\n```js\nconst dataSource = [\n    {label:'option1', value:'option1'},\n    {label:'option2', value:'option2'},\n    {label:'disabled', disabled:true}\n];\n\n<Select dataSource={dataSource}/>\n```\n\n#### 定制弹出层\n\n参见示例中的 `弹层定制`。唯一需要注意的是 `overlay` 的元素记得透传 props.\n这是因为 Overlay 的弹层的动画是依靠 `className` 实现的，如果不透传 props 则会造成无法监听到动画播放结束的事件。\n\n API\n\n### Select\n\n| 参数                    | 说明                                                                                                                                                                                                                                                        | 类型                                     | 默认值                                |\n| --------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------- | ---------------------------------- |\n| size                  | 选择器尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                                                                                                       | Enum                                   | 'medium'                           |\n| value                 | 当前值，用于受控模式                                                                                                                                                                                                                                                | any                                    | -                                  |\n| defaultValue          | 初始的默认值                                                                                                                                                                                                                                                    | any                                    | -                                  |\n| placeholder           | 没有值的时候的占位符                                                                                                                                                                                                                                                | String                                 | -                                  |\n| autoWidth             | 下拉菜单是否与选择器对齐                                                                                                                                                                                                                                              | Boolean                                | true                               |\n| label                 | 自定义内联 label                                                                                                                                                                                                                                               | ReactNode                              | -                                  |\n| hasClear              | 是否有清除按钮                                                                                                                                                                                                                                                   | Boolean                                | -                                  |\n| state                 | 校验状态<br><br>**可选值**:<br>'error', 'loading'                                                                                                                                                                                                                | Enum                                   | -                                  |\n| readOnly              | 是否只读，只读模式下可以展开弹层但不能选                                                                                                                                                                                                                                      | Boolean                                | -                                  |\n| disabled              | 是否禁用选择器                                                                                                                                                                                                                                                   | Boolean                                | -                                  |\n| visible               | 当前弹层是否显示                                                                                                                                                                                                                                                  | Boolean                                | -                                  |\n| defaultVisible        | 弹层初始化是否显示                                                                                                                                                                                                                                                 | Boolean                                | -                                  |\n| onVisibleChange       | 弹层显示或隐藏时触发的回调<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示                                                                                                                                              | Function                               | func.noop                          |\n| popupContainer        | 弹层挂载的容器节点                                                                                                                                                                                                                                                 | String/Function                        | -                                  |\n| popupClassName        | 弹层的 className                                                                                                                                                                                                                                             | any                                    | -                                  |\n| popupStyle            | 弹层的内联样式                                                                                                                                                                                                                                                   | Object                                 | -                                  |\n| popupProps            | 添加到弹层上的属性                                                                                                                                                                                                                                                 | Object                                 | {}                                 |\n| popupContent          | 自定义弹层的内容                                                                                                                                                                                                                                                  | ReactNode                              | -                                  |\n| filterLocal           | 是否使用本地过滤，在数据源为远程的时候需要关闭此项                                                                                                                                                                                                                                 | Boolean                                | true                               |\n| filter                | 本地过滤方法，返回一个 Boolean 值确定是否保留<br><br>**签名**:<br>Function() => void                                                                                                                                                                                          | Function                               | filter                             |\n| onToggleHighlightItem | 键盘上下键切换菜单高亮选项的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                     | Function                               | func.noop                          |\n| useVirtual            | 是否开启虚拟滚动模式                                                                                                                                                                                                                                                | Boolean                                | -                                  |\n| dataSource            | 传入的数据源，可以动态渲染子项，详见 [dataSource的使用](#dataSource的使用)                                                                                                                                                                                                        | Array&lt;Object/Boolean/Number/String> | -                                  |\n| itemRender            | 渲染 MenuItem 内容的方法<br><br>**签名**:<br>Function(item: Object, searchValue: String) => ReactNode<br>**参数**:<br>_item_: {Object} 渲染节点的item<br>_searchValue_: {String} 搜索关键字（如果开启搜索）<br>**返回值**:<br>{ReactNode} item node<br>                                   | Function                               | -                                  |\n| mode                  | 选择器模式<br><br>**可选值**:<br>'single', 'multiple', 'tag'                                                                                                                                                                                                      | Enum                                   | 'single'                           |\n| notFoundContent       | 弹层内容为空的文案                                                                                                                                                                                                                                                 | ReactNode                              | -                                  |\n| onChange              | Select发生改变时触发的回调<br><br>**签名**:<br>Function(value: mixed, actionType: String, item: mixed) => void<br>**参数**:<br>_value_: {mixed} 选中的值<br>_actionType_: {String} 触发的方式, 'itemClick', 'enter', 'tag'<br>_item_: {mixed} 选中的值的对象数据 (useDetailValue=false有效) | Function                               | -                                  |\n| hasBorder             | 是否有边框                                                                                                                                                                                                                                                     | Boolean                                | -                                  |\n| hasArrow              | 是否有下拉箭头                                                                                                                                                                                                                                                   | Boolean                                | true                               |\n| showSearch            | 展开后是否能搜索（tag 模式下固定为true）                                                                                                                                                                                                                                  | Boolean                                | false                              |\n| onSearch              | 当搜索框值变化时回调<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>_value_: {String} 数据                                                                                                                                                           | Function                               | func.noop                          |\n| onSearchClear         | 当搜索框值被清空时候的回调<br><br>**签名**:<br>Function(actionType: String) => void<br>**参数**:<br>_actionType_: {String} 触发的方式, 'select'(选择清空), 'popupClose'(弹窗关闭清空)                                                                                                     | Function                               | func.noop                          |\n| hasSelectAll          | 多选模式下是否有全选功能                                                                                                                                                                                                                                              | Boolean/String                         | -                                  |\n| fillProps             | 填充到选择框里的值的 key\b\b                                                                                                                                                                                                                                          | String                                 | -                                  |\n| useDetailValue        | onChange 返回的 value 使用 dataSource 的对象                                                                                                                                                                                                                      | Boolean                                | -                                  |\n| cacheValue            | dataSource 变化的时是否保留已选的内容                                                                                                                                                                                                                                  | Boolean                                | true                               |\n| valueRender           | 渲染 Select 展现内容的方法<br><br>**签名**:<br>Function(item: Object) => ReactNode<br>**参数**:<br>_item_: {Object} 渲染节点的item<br>**返回值**:<br>{ReactNode} 展现内容<br>                                                                                                      | Function                               | item => item.label \\|\\| item.value |\n| searchValue           | 受控搜索值，一般不需要设置                                                                                                                                                                                                                                             | String                                 | -                                  |\n| hiddenSelected        | 选择后是否立即隐藏菜单 (mode=multiple/tag 模式生效)                                                                                                                                                                                                                      | Boolean                                | -                                  |\n| onRemove              | tag 删除回调<br><br>**签名**:<br>Function(item: object) => void<br>**参数**:<br>_item_: {object} 渲染节点的item                                                                                                                                                        | Function                               | func.noop                          |\n| onFocus               | 焦点事件<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                 | Function                               | func.noop                          |\n| onBlur                | 失去焦点事件<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                               | Function                               | func.noop                          |\n\n### Select.AutoComplete\n\n| 参数                    | 说明                                                                                                                                                                                                                                  | 类型                      | 默认值       |\n| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------- | --------- |\n| size                  | 选择器尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                                                                                 | Enum                    | 'medium'  |\n| value                 | 当前值，用于受控模式                                                                                                                                                                                                                          | String/Number           | -         |\n| defaultValue          | 初始化的默认值                                                                                                                                                                                                                             | String/Number           | -         |\n| placeholder           | 没有值的时候的占位符                                                                                                                                                                                                                          | String                  | -         |\n| autoWidth             | 下拉菜单是否与选择器对齐                                                                                                                                                                                                                        | Boolean                 | true      |\n| label                 | 自定义内联 label                                                                                                                                                                                                                         | ReactNode               | -         |\n| hasClear              | 是否有清除按钮                                                                                                                                                                                                                             | Boolean                 | -         |\n| state                 | 校验状态<br><br>**可选值**:<br>'error', 'loading'                                                                                                                                                                                          | Enum                    | -         |\n| readOnly              | 是否只读，只读模式下可以展开弹层但不能选                                                                                                                                                                                                                | Boolean                 | -         |\n| disabled              | 是否禁用选择器                                                                                                                                                                                                                             | Boolean                 | -         |\n| visible               | 当前弹层是否显示                                                                                                                                                                                                                            | Boolean                 | -         |\n| defaultVisible        | 弹层初始化是否显示                                                                                                                                                                                                                           | Boolean                 | -         |\n| onVisibleChange       | 弹层显示或隐藏时触发的回调<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示                                                                                                                        | Function                | func.noop |\n| popupContainer        | 弹层挂载的容器节点                                                                                                                                                                                                                           | String/Function         | -         |\n| popupClassName        | 弹层的 className                                                                                                                                                                                                                       | any                     | -         |\n| popupStyle            | 弹层的内联样式                                                                                                                                                                                                                             | Object                  | -         |\n| popupProps            | 添加到弹层上的属性                                                                                                                                                                                                                           | Object                  | {}        |\n| popupContent          | 自定义弹层的内容                                                                                                                                                                                                                            | ReactNode               | -         |\n| filterLocal           | 是否使用本地过滤，在数据源为远程的时候需要关闭此项                                                                                                                                                                                                           | Boolean                 | true      |\n| filter                | 本地过滤方法，返回一个 Boolean 值确定是否保留<br><br>**签名**:<br>Function() => void                                                                                                                                                                    | Function                | filter    |\n| onToggleHighlightItem | 键盘上下键切换菜单高亮选项的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                               | Function                | func.noop |\n| useVirtual            | 是否开启虚拟滚动模式                                                                                                                                                                                                                          | Boolean                 | -         |\n| dataSource            | 传入的数据源，可以动态渲染子项                                                                                                                                                                                                                     | Array&lt;Object/String> | -         |\n| itemRender            | 渲染 MenuItem 内容的方法<br><br>**签名**:<br>Function(item: Object) => ReactNode<br>**参数**:<br>_item_: {Object} 渲染节点的 item<br>**返回值**:<br>{ReactNode} item node<br>                                                                          | Function                | -         |\n| onChange              | Select发生改变时触发的回调<br><br>**签名**:<br>Function(value: mixed, actionType: String, item: mixed) => void<br>**参数**:<br>_value_: {mixed} 选中的值<br>_actionType_: {String} 触发的方式, 'itemClick', 'enter', 'change'<br>_item_: {mixed} 选中的值的对象数据 | Function                | -         |\n| fillProps             | 填充到选择框里的值的 key\b\b，默认是 value                                                                                                                                                                                                          | String                  | 'value'   |\n\n### Select.OptionGroup\n\n| 参数    | 说明      | 类型        | 默认值 |\n| ----- | ------- | --------- | --- |\n| label | 设置分组的文案 | ReactNode | -   |\n\n### Select.Option\n\n| 参数       | 说明   | 类型      | 默认值 |\n| -------- | ---- | ------- | --- |\n| value    | 选项值  | any     | -   |\n| disabled | 是否禁用 | Boolean | -   |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本使用","order":"0","jsx":"import { Select } from '@alifd/next';\n\nconst Option = Select.Option;\n\nconst onChange = function (value) {\n    console.log(value);\n};\n\nconst onToggleHighlightItem = function (item, type) {\n    console.log(item, type);\n};\n\nReactDOM.render(<Select id=\"basic-demo\" onChange={onChange} onToggleHighlightItem={onToggleHighlightItem} defaultValue=\"jack\" aria-label=\"name is\" showSearch hasClear>\n    <Option value=\"jack\">Jack</Option>\n    <Option value=\"frank\">Frank</Option>\n    <Option value=\"hugo\">Hugo</Option>\n</Select>, mountNode);\n","css":"","body":"\n<p>简单</p>\n"},{"title":"自动完成大小","order":"10","jsx":"import { Select } from '@alifd/next';\n\nconst {AutoComplete} = Select;\nconst dataSource = [\n    'Lucy King',\n    'Lily King',\n    'Jim Green',\n    {\n        label: 'Chinese',\n        children: [\n            {value: 'Hang Meimei', label: 'Hang Meimei'},\n            'Li Lei',\n            {value: 'Gao Hui', label: 'Gao Hui', disabled: true},\n            'Zhang San',\n            'Li Si',\n            'Wang Wu',\n            {value: 'Zhao Benshan', label: 'Zhao Benshan', disabled: true},\n            'Sun Yang',\n            'Song Shuying'\n        ]\n    },\n    {\n        label: 'Pets',\n        children: [\n            'Poly',\n            'Kitty'\n        ]\n    }\n];\n\nconst ctrlDataSources = {\n    size: ['small', 'medium', 'large'],\n    disabled: [true, false],\n    hasClear: [true, false]\n};\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null,\n            size: undefined,\n            disabled: undefined,\n            hasClear: undefined,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleCtrlChange = this.handleCtrlChange.bind(this);\n    }\n\n    handleCtrlChange(key, value) {\n        this.setState({[key]: value});\n\n        if (key === 'mode') {\n            this.setState({value: null});\n        }\n    }\n\n    handleChange(value) {\n        console.log('handleChange: value: ', value);\n        this.setState({value});\n    }\n\n    renderCtrlNodes(state) {\n        const ctrlNodes = [];\n        let k;\n        for (k in ctrlDataSources) {\n            if (ctrlDataSources.hasOwnProperty(k)) {\n                ctrlNodes.push(\n                    <Select key={k}\n                        label={`${k}: `}\n                        value={state[k]}\n                        dataSource={ctrlDataSources[k]}\n                        onChange={this.handleCtrlChange.bind(this, k)} />\n                );\n            }\n        }\n\n        return ctrlNodes;\n    }\n\n    render() {\n\n        return (\n            <div className=\"demo-container\">\n                <div className=\"demo-controller\">{this.renderCtrlNodes(this.state)}</div>\n                <AutoComplete\n                    {...this.state}\n                    style={{maxWidth: 300}}\n                    onChange={this.handleChange}\n                    dataSource={dataSource} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".demo-container {\n    padding: 16px;\n    background-color: #F8F8F8;\n}\n\n.demo-controller {\n    padding: 12px 12px 4px;\n    margin-bottom: 16px;\n    border: 2px dashed #ddd;\n}\n\n.next-select {\n    margin-right: 8px;\n    margin-bottom: 8px;\n}\n","body":"\n<p><code>AutoComplete</code> 大小、disabled、清除</p>\n"},{"title":"动态数据","order":"11","jsx":"import { Select } from '@alifd/next';\nimport jsonp from 'jsonp';\n\nconst {AutoComplete} = Select;\n\nclass Demo extends React.Component {\n    state = {\n        dataSource: []\n    };\n\n    handleChange = value => {\n        clearTimeout(this.searchTimeout);\n        this.searchTimeout = setTimeout(() => {\n            jsonp(`https://suggest.taobao.com/sug?code=utf-8&q=${value}`, (err, data) => {\n                const dataSource = data.result.map(item => item[0]);\n                this.setState({dataSource});\n            });\n        }, 100);\n    }\n\n    render() {\n        return (\n            <div className=\"demo-container\">\n                <AutoComplete\n                    filterLocal={false}\n                    placeholder=\"search from taobao\"\n                    onChange={this.handleChange}\n                    dataSource={this.state.dataSource}/>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo/>, mountNode);\n","css":".demo-container {\n    background-color: #F8F8F8;\n    padding: 16px;\n}\n","body":"\n<p>使用动态数据填充 AutoComplete, 设置 <code>filterLocal</code> 为 false</p>\n"},{"title":"图文展示","order":"12","jsx":"import { Select, Icon } from '@alifd/next';\nimport jsonp from 'jsonp';\n\nconst {AutoComplete} = Select;\n\nclass Demo extends React.Component {\n    state = {\n        dataSource: []\n    }\n\n    handleChange = (value) => {\n        if (this.searchTimeout) {\n            clearTimeout(this.searchTimeout);\n        }\n        this.searchTimeout = setTimeout(() => {\n            jsonp(`https://suggest.taobao.com/sug?code=utf-8&q=${value}`, (err, data) => {\n                const dataSource = data.result.map(item => {\n                    return {\n                        label: <div><Icon type=\"picture\" size=\"small\"/>&nbsp;{item[0]}</div>,\n                        value: item[1],\n                        originLabel: item[0]\n                    };\n                });\n                this.setState({dataSource});\n            });\n        }, 100);\n    }\n\n    render() {\n        return (\n            <div className=\"demo-container\">\n                <AutoComplete onChange={this.handleChange}\n                    filterLocal={false}\n                    fillProps=\"originLabel\"\n                    placeholder=\"search from taobao\"\n                    dataSource={this.state.dataSource}/></div>\n        );\n    }\n}\nReactDOM.render(<Demo/>, mountNode);\n","css":".next-select {\n    margin-right:10px;\n    vertical-align: middle;\n}\n\n.demo-container {\n  background-color: #F8F8F8;\n  padding: 16px;\n}\n\n.demo-container p {\n    margin-top:0;\n}\n","body":"\n<p>展示较为复杂的内容展示</p>\n"},{"title":"自动完成","order":"9","jsx":"import { Select } from '@alifd/next';\n\nconst dataSource = [\n    'Lucy King',\n    'Lily King',\n    'Jim Green',\n    {\n        label: 'Chinese',\n        children: [\n            {value: 'Hang Meimei', label: 'Hang Meimei'},\n            'Li Lei',\n            {value: 'Gao Hui', label: 'Gao Hui', disabled: true},\n            'Zhang San',\n            'Li Si',\n            'Wang Wu',\n            {value: 'Zhao Benshan', label: 'Zhao Benshan', disabled: true},\n            'Sun Yang',\n            'Song Shuying'\n        ]\n    },\n    {\n        label: 'Pets',\n        children: [\n            'Poly',\n            'Kitty'\n        ]\n    }\n];\n\nconst onChange = (v) => {\n    console.log(v);\n};\n\nReactDOM.render(<Select.AutoComplete style={{width: 300}} onChange={onChange}  dataSource={dataSource} />, mountNode);\n","css":"","body":"\n<p><code>AutoComplete</code> 继承了 <code>Input</code> 的能力，并在其基础上增加了 autoComplete 的功能。</p>\n"},{"title":"自定义渲染","order":"13","jsx":"import { Select, Icon } from '@alifd/next';\n\nconst dataSource = [\n    {value: '#FF0000', label: 'red', title: 'red'},\n    {value: '#00AA00', label: 'green', title: 'green'},\n    {value: '#B482DB', label: 'purple', title: 'purple'},\n    {value: '#F17334', label: 'orange', title: 'orange'},\n    {value: '#66CCFF', label: 'blue', title: 'blue'}\n];\n\nconst itemRender = item => {\n    return (\n        <span>\n            <Icon type=\"account\" size=\"xs\" style={{color: item.value}} />\n            <Icon type=\"account\" size=\"xs\" style={{color: item.value}} />\n            <Icon type=\"account\" size=\"xs\" style={{color: item.value}} />\n            <Icon type=\"account\" size=\"xs\" style={{color: item.value}} />\n            <Icon type=\"account\" size=\"xs\" style={{color: item.value}} />\n        </span>\n    );\n};\n\nconst valueRender = item => {\n    return <span><Icon type=\"account\" size=\"xs\" style={{color: item.value}} /> {item.label}</span>;\n};\n\nconst dataSource2 = [\n    'Lorem ipsum dolor sit amet',\n    'consectetur adipisicing elit',\n    'sed do eiusmod tempor incididunt',\n    'ut labore et dolore magna aliqua.',\n    'Ut enim ad minim veniam',\n    'quis nostrud exercitation',\n    'ullamco laboris nisi ut',\n    'aliquip ex ea commodo consequat',\n    'Duis aute irure dolor in',\n    'reprehenderit in voluptate',\n    'velit esse cillum dolore eu',\n    'Fugiat nulla pariatur excepteur sint',\n    'occaecat cupidatat non proident',\n    'sunt in culpa qui officia',\n    'deserunt mollit anim id est laborum',\n];\n\n// highlight keywords\nconst itemRender2 = (item, searchKey) => {\n    let label = item.label;\n    if (searchKey && searchKey.length) {\n        const key = searchKey.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n        const reg = new RegExp(`(${key})`, 'ig');\n        label = label.replace(reg, x => `<span class=\"next-select-highlight\">${x}</span>`);\n    }\n\n    return <span dangerouslySetInnerHTML={{__html: label}} />;\n};\n\nReactDOM.render(\n    <div className=\"demo-container\">\n        <Select dataSource={dataSource} itemRender={itemRender} valueRender={valueRender} placeholder=\"pick your color\" />\n        <Select showSearch dataSource={dataSource2} itemRender={itemRender2} placeholder=\"highlight keywords\" style={{minWidth: 200}} />\n    </div>,\n    mountNode\n);\n","css":".demo-container {\n    padding: 16px;\n    background-color: #F8F8F8;\n}\n\n.demo-container .next-select {\n    margin-right: 10px;\n}\n","body":"\n<p>通过 <code>itemRender</code> 和 <code>valueRender</code> (仅 Select) 自定义渲染的节点内容。</p>\n"},{"title":"弹层定制","order":"14","jsx":"import { Select } from '@alifd/next';\nimport classNames from 'classnames';\n/* eslint-disable react/prop-types, react/no-multi-comp */\n\n// prevent onBlur\nfunction preventDefault(e) {\n    e.preventDefault();\n}\n\nclass Menu extends React.Component {\n    data = [{\n        label: 'value1',\n        value: 1\n    }, {\n        label: 'value2',\n        value: 2\n    }];\n\n    onClick(item) {\n        this.props.onChange(item);\n    }\n\n    renderItems() {\n        return this.data.map(item => <li onClick={this.onClick.bind(this, item)} key={item.value}>{item.label}</li>);\n    }\n\n    render() {\n        const {className, ...others} = this.props;\n        const cls = classNames('overlay-content', className);\n\n        return (\n            <ul className={cls} {...others}>\n                {this.renderItems()}\n            </ul>\n        );\n    }\n}\n\nclass Demo extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null\n        };\n    }\n\n    handleSelect = (value) => {\n        this.setState({\n            value,\n            visible: false\n        });\n    }\n\n    onVisibleChange = (visible) => {\n        this.setState({\n            visible\n        });\n    }\n\n    render() {\n        const popupContent = <Menu onChange={this.handleSelect} onMouseDown={preventDefault}/>;\n\n        return (\n            <div className=\"demo-container\">\n                <Select\n                    placeholder=\"custom popupContent\"\n                    visible={this.state.visible}\n                    onVisibleChange={this.onVisibleChange}\n                    value={this.state.value}\n                    popupContent={popupContent} />\n            </div>\n        );\n    }\n}\nReactDOM.render(<Demo/>, mountNode);\n","css":".demo-container {\n  background-color: #F8F8F8;\n  padding: 16px;\n}\n\n.demo-container p {\n    margin-top:0;\n}\n\n.overlay-content {\n    border:1px solid #DDDDDD;\n    padding:10px;\n    background: #FFFFFF;\n    margin:0;\n    font-size: 12px;\n    font-family: Arial;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n\n.overlay-content li {\n    list-style: none;\n    line-height:30px;\n    padding: 0 5px;\n    cursor: pointer;\n}\n\n.overlay-content li:hover {\n    background: #F8F8F8;\n}\n\n.overlay-content li:last-child {\n    border-width:0;\n}\n","body":"\n<p>通过 popupContent 定制 select 弹层</p>\n"},{"title":"多选","order":"2","jsx":"import { Select } from '@alifd/next';\n\nconst dataSource = [\n    {value: '10001', label: 'Lucy King'},\n    {value: 10002, label: 'Lily King'},\n    {value: 10003, label: 'Tom Cat', disabled: true},\n    {label: 'Special Group', children: [\n        {value: new Date(), label: 'new Date()'},\n        {value: 'false', label: 'FALSE'},\n        {value: 0, label: 'ZERO'}\n    ]},\n];\n\nfunction handleChange(value) {\n    console.log(value);\n}\n\nReactDOM.render(<Select mode=\"multiple\" onChange={handleChange} dataSource={dataSource} style={{width: 300}} />, mountNode);\n","css":"","body":"\n<p>多选模式</p>\n"},{"title":"选择器","order":"3","jsx":"import { Select } from '@alifd/next';\n\nconst dataSource = [\n    {value: '10001', label: 'Lucy King'},\n    {value: 10002, label: 'Lily King'},\n    {value: 10003, label: 'Tom Cat', disabled: true},\n    {label: 'Special Group', children: [\n        {value: new Date(), label: 'new Date()'},\n        {value: false, label: 'FALSE'},\n        {value: 0, label: 'ZERO'}\n    ]},\n];\n\nconst ctrlDataSources = {\n    mode: ['single', 'multiple', 'tag'],\n    size: ['small', 'medium', 'large'],\n    showSearch: [true, false],\n    hasArrow: [true, false],\n    hasBorder: [true, false],\n    hasClear: [true, false],\n};\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null,\n            size: undefined,\n            mode: undefined,\n            hasArrow: undefined,\n            hasBorder: undefined,\n            showSearch: undefined,\n            hasClear: undefined,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleCtrlChange = this.handleCtrlChange.bind(this);\n    }\n\n    handleCtrlChange(key, value) {\n        this.setState({[key]: value});\n\n        if (key === 'mode') {\n            this.setState({value: null});\n        }\n    }\n\n    handleChange(value, item) {\n        console.log('handleChange: value: ', value, item);\n        this.setState({value});\n    }\n\n    renderCtrlNodes(state) {\n        const ctrlNodes = [];\n        let k;\n        for (k in ctrlDataSources) {\n            if (ctrlDataSources.hasOwnProperty(k)) {\n                ctrlNodes.push(\n                    <Select key={k}\n                        label={`${k}: `}\n                        value={state[k]}\n                        id={k}\n                        dataSource={ctrlDataSources[k]}\n                        onChange={this.handleCtrlChange.bind(this, k)} />\n                );\n            }\n        }\n\n        return ctrlNodes;\n    }\n\n    render() {\n\n        return (\n            <div className=\"demo-container\">\n                <div className=\"demo-controller\">{this.renderCtrlNodes(this.state)}</div>\n                <Select\n                    {...this.state}\n                    onChange={this.handleChange}\n                    dataSource={dataSource} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".demo-container {\n    padding: 16px;\n    background-color: #F8F8F8;\n}\n\n.demo-controller {\n    padding: 12px 12px 4px;\n    margin-bottom: 16px;\n    border: 2px dashed #ddd;\n}\n\n.next-select {\n    margin-right: 8px;\n    margin-bottom: 8px;\n}\n","body":"\n<p>演示了 Select 的多种形态.</p>\n"},{"title":"级联选择","order":"4","jsx":"import { Select } from '@alifd/next';\n\nconst provinceData = ['Zhejiang', 'Hubei', 'Jiangsu'];\nconst cityData = {\n    Zhejiang: ['Hangzhou', 'Ningbo', 'Wenzhou'],\n    Hubei: ['Wuhan', 'Yichang', 'Jingzhou'],\n    Jiangsu: ['Nanjing', 'Suzhou', 'Zhenjiang']\n};\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            disabled: true\n        };\n\n        this.handleProvinceChange = this.handleProvinceChange.bind(this);\n        this.handleCityChange = this.handleCityChange.bind(this);\n    }\n\n    handleProvinceChange(value) {\n        const data = cityData[value];\n        this.setState({data, province: value, city: '', disabled: !data});\n    }\n\n    handleCityChange(value) {\n        this.setState({city: value});\n        console.log(this.state.province, value);\n    }\n\n    render() {\n        const {data, disabled, province, city} = this.state;\n\n        return (\n            <div className=\"demo-container\">\n                <Select placeholder=\"Select Province\" dataSource={provinceData} value={province} onChange={this.handleProvinceChange} />\n                <Select placeholder=\"Select City\" dataSource={data} value={city} onChange={this.handleCityChange} disabled={disabled}/>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo/>, mountNode);\n","css":".next-select {\n    margin-right:10px;\n}\n\n.demo-container {\n    background-color: #F8F8F8;\n    padding: 16px;\n}\n","body":"\n<p>使用 Select 构建级联选择框</p>\n"},{"title":"自定义 value","order":"6","jsx":"import { Select } from '@alifd/next';\n\nconst dataSource = [\n    {value: 'Lilith', age: 22, gender: 'F'},\n    {value: 'Tom Cat', age: 28, gender: 'M'},\n    {value: 'Jim Green', age: 18, gender: 'M'},\n    {value: 'Monkey King', age: 999, gender: 'M'},\n];\n\nconst handleChange = value => {\n    console.log('handleChange: ', value);\n};\n\nconst valueRender = v => {\n    return `${v.value} / ${v.gender} / ${v.age}`;\n};\n\nReactDOM.render(\n    <div className=\"demo-container\">\n        <Select\n            mode=\"multiple\"\n            placeholder=\"custom value\"\n            valueRender={valueRender}\n            dataSource={dataSource}\n            onChange={handleChange} />\n    </div>,\n    mountNode\n);\n","css":".demo-container {\n    padding: 16px;\n    background-color: #F8F8F8;\n}\n","body":"\n<p>Select 的 value 可以是任意非空类型的值，但是要保证 toString() 后是唯一的。</p>\n"},{"title":"分组","order":"5","jsx":"import { Select } from '@alifd/next';\n\nconst {Option, OptionGroup} = Select;\n\nconst dataSource = [{\n    label: 'label1',\n    children: [{\n        label: 'label1-1',\n        value: 'text1-1'\n    }]\n}, {\n    label: 'label2',\n    children: [{\n        label: 'label2-1',\n        value: 'text2-1'\n    }]\n}];\n\nReactDOM.render(\n    <div className=\"demo-container\">\n        <Select placeholder=\"OptionGroup\">\n            <OptionGroup label=\"group1\">\n                <Option value=\"small\">Small</Option>\n                <Option value=\"medium\">Medium</Option>\n                <Option value=\"large\">Large</Option>\n            </OptionGroup>\n            <OptionGroup label=\"group2\">\n                <Option value=\"small2\">Small2</Option>\n                <Option value=\"medium2\">Medium2</Option>\n                <Option value=\"large2\">Large2</Option>\n            </OptionGroup>\n        </Select>\n        <Select placeholder=\"optgroup\">\n            <option value=\"apple\">Apple</option>\n            <option value=\"orange\">Orange</option>\n            <option value=\"banana\">Banana</option>\n            <optgroup label=\"Pets Group\">\n                <option value=\"cat\">Cat</option>\n                <option value=\"rabbit\">Rabbit</option>\n                <option value=\"dog\" disabled>Dog</option>\n            </optgroup>\n        </Select>\n        <Select placeholder=\"item.children\" dataSource={dataSource}/>\n    </div>,\n    mountNode\n);\n","css":".next-select {\n    margin-right:10px;\n}\n\n.demo-container {\n    background-color: #F8F8F8;\n    padding: 16px;\n}\n","body":"\n<p>使用 OptionGroup 针对选项进行分组，也可以使用原生的 html 标签 optgroup</p>\n"},{"title":"搜索框","order":"7","jsx":"import { Select } from '@alifd/next';\nimport jsonp from 'jsonp';\n\nlet timestamp = Date.now();\n\nclass Demo extends React.Component {\n    state = {\n        dataSource: []\n    }\n\n    handleSearch = (value) => {\n        if (this.searchTimeout) {\n            clearTimeout(this.searchTimeout);\n        }\n        this.searchTimeout = setTimeout(() => {\n            value ? jsonp(`https://suggest.taobao.com/sug?code=utf-8&q=${value}`, (err, data) => {\n                const dataSource = data.result.map(item => ({\n                    label: item[0], value: (timestamp++).toString(36)\n                }));\n                this.setState({dataSource});\n            }) : this.setState({dataSource: []});\n        }, 100);\n    }\n\n    render() {\n        return (\n            <div className=\"demo-container\">\n                <Select showSearch placeholder=\"select search\" filterLocal={false} dataSource={this.state.dataSource} onSearch={this.handleSearch} style={{width: 200}}/>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo/>, mountNode);\n","css":"","body":"\n<p>使用 <code>showSearch</code> 显示搜索框，如果需要动态更新 dataSource，需要关闭 filterLocal</p>\n"},{"title":"标签","order":"1","jsx":"import { Select } from '@alifd/next';\n\nconst dataSource = [\n    {value: '10001', label: 'Lucy King'},\n    {value: 10002, label: 'Lily King'},\n    {value: 10003, label: 'Tom Cat', disabled: true},\n    {label: 'Special Group', children: [\n        {value: -1, label: 'FALSE'},\n        {value: 0, label: 'ZERO'}\n    ]},\n];\n\nfunction handleChange(value) {\n    console.log(value);\n}\n\nReactDOM.render(<Select aria-label=\"tag mode\" mode=\"tag\" defaultValue={['10001']} onChange={handleChange} dataSource={dataSource} style={{width: 300}} />, mountNode);\n","css":"","body":"\n<p>标签模式，输入的内容可以作为选项</p>\n"},{"title":"对象数据","order":"8","jsx":"import { Select } from '@alifd/next';\n\nconst dataSource = [\n    {value: '10001', label: 'Lucy King'},\n    {value: 10002, label: 'Lily King'},\n    {value: 10003, label: 'Tom Cat', disabled: true},\n    {label: 'Special Group', children: [\n        {value: new Date(), label: 'new Date()'},\n        {value: false, label: 'FALSE'},\n        {value: 0, label: 'ZERO'}\n    ]},\n];\n\nfunction handleChange(value) {\n    console.log(value);\n}\n\nReactDOM.render(<Select useDetailValue defaultValue={{value: '10001', label: 'Lucy King'}} onChange={handleChange} dataSource={dataSource} style={{width: 150}} />, mountNode);\n","css":"","body":"\n<p><code>useDetailValue</code> 把 <code>value</code> 从字符串变成对象</p>\n"},{"title":"无限滚动","order":"15","jsx":"import { Select } from '@alifd/next';\n\nconst Option = Select.Option;\n\nconst onChange = function (value) {\n    console.log(value);\n};\n\nfunction generateItem(index) {\n    return {label: `option${index}`, value: `option${index}`};\n}\n\nfunction generateOption(index) {\n    return <Option key={`option${index}`} value={`option${index}`}>{`option${index}`}</Option>;\n}\n\nfunction generateData(len, isOption) {\n    const data = [];\n\n    for (let i = 0; i < len; i++) {\n        isOption ? data.push(generateOption(i)) :  data.push(generateItem(i));\n    }\n\n    return data;\n}\n\nReactDOM.render(\n    <div>\n        <Select dataSource={generateData(100)} useVirtual onChange={onChange} defaultValue=\"option0\" />\n        &nbsp;&nbsp;&nbsp;&nbsp;\n        <Select useVirtual onChange={onChange} defaultValue=\"option50\">\n            {generateData(100, true)}\n        </Select>\n    </div>\n    , mountNode);\n","css":"","body":"\n<p>select 配合无限滚动</p>\n"}]},{"name":"Slider","category":"Components","title":"图片轮播","type":"展示","importStatement":"import { Slider } from '@alifd/next';","body":"\n## Guide\n\n轮播组件，就是以幻灯片的方式，在页面中横向展示诸多内容的组件。\n轮播内容相互独立，前后在内容以及数据上都不存在逻辑关系。\n\n### 何时使用\n\n-   **单图轮播**：该样式通常用于承载运营banner，是一个位置相对固定的模块。\n-   **多图轮播**：单元信息浏览\n\n### 使用注意点\n\n1.  当轮播组件中只有一张图片的时候，轮播组件会隐藏导航锚点、禁止自动循环（即使上层设置了）、禁止拖拽播放（即使上层设置了）。\n2.  如果您要将 Slider 放到 Dialog 中，此时你需要关闭 Dialog 的动画，避免 Slider 在计算内部元素宽度时造成出错。\n3.  如果出现图片高度 1px 的问题，可以尝试在 `img` 标签的外部包裹一层 `div` 标签。\n\n API\n\n### Slider\n\n| 参数                 | 说明                                                                                                 | 类型             | 默认值      |\n| ------------------ | -------------------------------------------------------------------------------------------------- | -------------- | -------- |\n| adaptiveHeight     | 是否使用自适应高度                                                                                          | Boolean        | false    |\n| animation          | 动效类型，默认是'slide'                                                                                    | String/Boolean | 'slide'  |\n| arrows             | 是否显示箭头                                                                                             | Boolean        | true     |\n| arrowSize          | 导航箭头大小 可选值: 'medium', 'large'<br><br>**可选值**:<br>'medium', 'large'                                 | Enum           | 'medium' |\n| arrowPosition      | 导航箭头位置 可选值: 'inner', 'outer'<br><br>**可选值**:<br>'inner', 'outer'                                   | Enum           | 'inner'  |\n| arrowDirection     | 导航箭头的方向 可选值: 'hoz', 'ver'<br><br>**可选值**:<br>'hoz', 'ver'                                          | Enum           | 'hoz'    |\n| autoplay           | 是否自动播放                                                                                             | Boolean        | false    |\n| autoplaySpeed      | 自动播放的速度                                                                                            | Number         | 3000     |\n| nextArrow          | 向后箭头                                                                                               | ReactElement   | null     |\n| prevArrow          | 向前箭头                                                                                               | ReactElement   | null     |\n| centerMode         | 是否启用居中模式                                                                                           | Boolean        | false    |\n| dots               | 是否显示导航锚点                                                                                           | Boolean        | true     |\n| dotsDirection      | 导航锚点位置<br><br>**可选值**:<br>'hoz', 'ver'                                                             | Enum           | 'hoz'    |\n| dotRender          | 自定义导航锚点<br><br>**签名**:<br>Function() => void                                                       | Function       | -        |\n| draggable          | 是否可拖拽                                                                                              | Boolean        | true     |\n| infinite           | 是否使用无穷循环模式                                                                                         | Boolean        | true     |\n| defaultActiveIndex | 初始被激活的轮播图                                                                                          | Number         | 0        |\n| lazyLoad           | 是否启用懒加载                                                                                            | Boolean        | false    |\n| slideDirection     | 轮播方向<br><br>**可选值**:<br>'hoz', 'ver'                                                               | Enum           | 'hoz'    |\n| slidesToShow       | 同时展示的图片数量                                                                                          | Number         | 1        |\n| slidesToScroll     | 同时滑动的图片数量                                                                                          | Number         | 1        |\n| speed              | 轮播速度                                                                                               | Number         | 500      |\n| activeIndex        | 跳转到指定的轮播图（受控）                                                                                      | Number         | -        |\n| triggerType        | 锚点导航触发方式<br><br>**可选值**:<br>'click', 'hover'                                                       | Enum           | 'click'  |\n| onChange           | 轮播切换的回调函数<br><br>**签名**:<br>Function(index: Number) => void<br>**参数**:<br>_index_: {Number} 幻灯片的索引 | Function       | () => {} |\n| centerPadding      | Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览                              | String         | '50px'   |\n| cssEase            | CSS3 Animation Easing,默认‘ease’                                                                     | String         | 'ease'   |\n| focusOnSelect      | 多图轮播时，点击选中后自动居中                                                                                    | Boolean        | false    |\n\n## 说明\n\nnext-slider is forked from [react-slick](https://github.com/akiran/react-slick)\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"导航箭头位置","order":"8","jsx":"import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Slider slidesToShow={4} arrowPosition=\"outer\">\n            <div style={{width: '25%'}}><h4 className=\"h4\">1</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">2</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">3</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">4</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">5</h4></div>\n        </Slider>\n\n        <br />\n\n        <Slider>\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n    </div>\n    , mountNode);\n","css":".next-slick .h3, .h4 {\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.next-slick .h4 {\n    margin: 0 5px;\n    position: relative;\n}\n","body":"\n<p>轮播组件的导航按钮在默认情况下为内置模式。在多图同时导航的情况下，如果想要使用外置按钮，\n可以通过指定<code>arrowPosition</code>的属性值为<code>outer</code>，使用外置按钮，其默认值为<code>inner</code>。</p>\n"},{"title":"自动播放","order":"9","jsx":"import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div style={{width: '600px'}}>\n        <Slider slidesToShow={4} arrowPosition=\"outer\" lazyLoad dots={false} autoplay autoplaySpeed={1000}>\n            <div style={{width: '25%'}}><h4 className=\"h4\">1</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">2</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">3</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">4</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">5</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">6</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">7</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">8</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">9</h4></div>\n        </Slider>\n        <br/>\n        <Slider speed={1000} autoplay autoplaySpeed={2000}>\n            <div style={{width: '25%'}}><h4 className=\"h4\">1</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">2</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">3</h4></div>\n        </Slider>\n    </div>\n    , mountNode);\n","css":".next-slick .h3, .h4 {\n    margin: 0 5px;\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n","body":"\n<p>可以通过 <code>autoplay</code> 和 <code>autoplaySpeed</code> 属性来设置组件是否自动轮播 和 自动轮播的速度。</p>\n"},{"title":"基本","order":"0","jsx":"import { Slider } from '@alifd/next';\n\nconst slides = [\n    { url: 'https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png', text: 'Tape Player Skin Design Competition' },\n    { url: 'https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg', text: 'Mobile Phone Taobao Skin Call' },\n    { url: 'https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg', text: 'Design Enabling Public Welfare' },\n    { url: 'https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg', text: 'Amoy Doll Design Competition' },\n];\n\nconst itemNodes = slides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img src={item.url} alt={item.text} /></div>);\n\nReactDOM.render(<Slider>{itemNodes}</Slider>, mountNode);\n","css":".slider-img-wrapper img{\n    width: 100%;\n}\n","body":"\n<p>轮播组件共有两种类型：单图轮播和多图同时轮播。\n在默认模式下（不指定任何属性值），轮播组件为单图轮播模式。</p>\n<p><strong>注意：</strong> 如果出现图片 1px 高度的问题，建议将图片的外部包括一层 <code>div</code> 来避免这个问题。</p>\n"},{"title":"导航按钮尺寸","order":"3","jsx":"import { Slider } from '@alifd/next';\n\nconst bigSlides = [\n    { url: 'https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png', text: 'Tape Player Skin Design Competition' },\n    { url: 'https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg', text: 'Mobile Phone Taobao Skin Call' },\n    { url: 'https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg', text: 'Design Enabling Public Welfare' },\n    { url: 'https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg', text: 'Amoy Doll Design Competition' },\n];\n\nReactDOM.render(<div>\n    <Slider>\n        {\n            bigSlides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img src={item.url} alt={item.text} /></div>)\n        }\n    </Slider>\n\n    <br />\n\n    <Slider arrowSize=\"large\">\n        {\n            bigSlides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img src={item.url} alt={item.text} /></div>)\n        }\n    </Slider>\n</div>, mountNode);\n","css":".slider-img-wrapper img {\n    width: 100%;\n}\n","body":"\n<p>可以通过<code>arrowSize</code>属性来更改导航组件的按钮尺寸，默认值为<code>normal</code>，\n对特定场景，比如展示的图片较大的情况下，可以选择<code>large</code>，将导航按钮设置为大按钮。</p>\n"},{"title":"居中模式","order":"13","jsx":"import { Slider } from '@alifd/next';\n\nconst settings = {\n    className: 'custom-slide center',\n    centerMode: true,\n    infinite: true,\n    dots: false,\n    arrowPosition: 'outer',\n    centerPadding: '60px',\n    slidesToShow: 3,\n    speed: 500\n};\n\nReactDOM.render(\n    <Slider {...settings}>\n        <div><h3>1</h3></div>\n        <div><h3>2</h3></div>\n        <div><h3>3</h3></div>\n        <div><h3>4</h3></div>\n        <div><h3>5</h3></div>\n        <div><h3>6</h3></div>\n        <div><h3>7</h3></div>\n        <div><h3>8</h3></div>\n        <div><h3>9</h3></div>\n    </Slider>\n    , mountNode);\n","css":".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n\n.center h3 {\n    opacity: 0.8;\n    transition: all 300ms ease;\n}\n\n.center .next-slick-center h3 {\n  color: #e67e22;\n  opacity: 1;\n  transform: scale(1.08);\n}\n","body":"\n<p>居中模式可以突出显示最核心区域的内容，您可以通过设置 <code>centerMode</code> 属性址为 <code>true</code> 开启该功能。</p>\n"},{"title":"自定义导航箭头","order":"7","jsx":"import { Slider, Icon } from '@alifd/next';\n\nconst slides = [\n    { url: 'https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png', text: 'Tape Player Skin Design Competition' },\n    { url: 'https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg', text: 'Mobile Phone Taobao Skin Call' },\n    { url: 'https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg', text: 'Design Enabling Public Welfare' },\n    { url: 'https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg', text: 'Amoy Doll Design Competition' },\n];\n\nconst arrowStyle = {\n    display: 'block',\n    background: 'red',\n    opacity: 1,\n    margin: '0 20px',\n};\n\nconst CustomNextArrow = (props) => {\n    return <div {...props} style={arrowStyle}><Icon type=\"arrow-double-right\" /></div>;\n};\n\nconst CustomPrevArrow = (props) => {\n    return <div {...props} style={arrowStyle}><Icon type=\"arrow-double-left\" /></div>;\n};\n\nReactDOM.render(\n    <Slider nextArrow={<CustomNextArrow />} prevArrow={<CustomPrevArrow />} lazyLoad>\n        {\n            slides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img src={item.url} alt={item.text} /></div>)\n        }\n    </Slider>\n    , mountNode);\n","css":".slider-img-wrapper img {\n    width: 100%;\n}\n","body":"\n<p>开发者可以通过 <code>prevArrow</code> 和 <code>nextArrow</code> 两个属性传入自定义的导航箭头组件。</p>\n"},{"title":"使用自定义组件","order":"16","jsx":"import { Slider } from '@alifd/next';\nimport PropTypes from 'prop-types';\n\nconst pages = [1, 2, 3, 4];\n\nfunction Inner({ children, ...others }) {\n    // Note that to transparently pass other attributes to the lower node, the Slider needs to perform the element's clone operation.\n    return (\n        <div {...others}>\n            {children}\n        </div>\n    );\n}\n\nInner.propTypes = {\n    children: PropTypes.any,\n};\n\nconst slider = (<Slider>\n    {\n        pages.map((page, index) => {\n            return <Inner className=\"custom-inner\" key={index}>custom {page}</Inner>;\n        })\n    }\n</Slider>);\n\nReactDOM.render(<div>\n    {slider}\n</div>\n    , mountNode);\n","css":".custom-inner {\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n","body":"\n<p>你可以为传递自定义组件到 Slider 组件中。前提是该组件一定要开放透传 props 到下层组件或元素，Slider 底层需要执行元素的 clone 操作。</p>\n"},{"title":"导航锚点方向","order":"4","jsx":"import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Slider dotsDirection=\"hoz\" arrows={false}>\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n\n        <br />\n\n        <Slider dotsDirection=\"ver\" arrows={false}>\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n    </div>\n    , mountNode);\n","css":".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin-right: 5px;\n        position: relative;\n}\n","body":"\n<p>通过 <code>dotsDirection</code> 可以改变导航锚点的位置，默认为 <code>hoz</code> 即水平方向。\n当其值设为 <code>ver</code> 时为垂直方向展示。</p>\n"},{"title":"自定义导航锚点","order":"6","jsx":"import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Slider dotsClass=\"dots-cust\" dotsDirection=\"hoz\" arrows={false} dotsRender={(index, current) => {\n            console.log('current', current);\n            return <a>{index}</a>;\n        }}>\n            <div><h3 className=\"h3\">0</h3></div>\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n    </div>\n    , mountNode);\n","css":".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin-right: 5px;\n        position: relative;\n}\n\n.dots-cust {\n  color: #fff;\n}\n.dots-cust a{\n  dispaly: block;\n  background: rgba(200,200,200,.4);\n  padding: 0 4px;\n}\n.dots-cust .active a{\n  color: rgb(70, 188, 2);\n}\n","body":"\n<p>通过 <code>dotsRender</code> 可以自定义修改dost，通过 <code>dotsClass</code> 可覆盖dots的样式。</p>\n"},{"title":"导航锚点触发方式","order":"5","jsx":"import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Slider triggerType=\"click\" arrows={false} >\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n        <br/>\n        <Slider triggerType=\"hover\" arrows={false} >\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n    </div>\n    , mountNode);\n","css":".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin-right: 5px;\n        position: relative;\n}\n\n","body":"\n<p>通过 <code>triggerType</code> 可以定义dots触发方式，共有两种触发方式：[&#39;click&#39;, &#39;hover&#39;];\n当其值设为 <code>hover</code> 时为鼠标经过触发滚动。</p>\n"},{"title":"Fade","order":"18","jsx":"import { Slider } from '@alifd/next';\n\nconst settings = {\n    arrowPosition: 'outer',\n    dots: false,\n    animation: 'fade',\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    className: 'custom-slide',\n    onChange: function (index) {\n        console.log('change Slide index', index);\n    }\n};\n\nReactDOM.render(\n    <div>\n        <Slider {...settings}>\n            {[1, 2, 3, 4, 5, 6].map(function(d) {\n                return <div key={d}><h3 onClick={() => console.log(d)} >{d}</h3></div>;\n            })}\n        </Slider>\n        <Slider {...settings}>\n            {[1, 2, 3, 4, 5, 6].map(function(d) {\n                return <div key={d}><a href={`https://www.taobao.com/?some=${d}`} target=\"_blank\">{d}</a></div>;\n            })}\n        </Slider>\n    </div>\n    , mountNode\n);\n","css":".custom-slide h3, .custom-slide a {\n    display: block;\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n","body":"\n<p>切换跑马灯时使用渐变效果。</p>\n"},{"title":"禁止循环","order":"10","jsx":"import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Slider slidesToShow={4} arrowPosition=\"outer\" infinite={false} dots={false}>\n            <div style={{width: '25%'}}><h4 className=\"h4\">1</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">2</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">3</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">4</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">5</h4></div>\n        </Slider>\n\n        <br />\n\n        <Slider infinite={false} lazyLoad>\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n    </div>\n    , mountNode);\n","css":".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin: 0 5px;\n        position: relative;\n}\n","body":"\n<p>默认情况下，轮播组件的表现为无穷循环模式。如果你不想无穷循环，\n可以通过设置 <code>infinite</code> 为 <code>false</code>，用来禁止循环模式。</p>\n<p>值得注意的是，由于组件的默认行为是无穷模式，所以默认情况下，自动将单张图片复制了两份，\n如果你不想启用这样的复制效果，只要关闭 <code>infinite</code> 属性即可。</p>\n"},{"title":"多图轮播","order":"1","jsx":"import { Slider } from '@alifd/next';\n\nconst slides = [1, 2, 3, 4, 5, 6, 7, 8, 9].map(item => <div style={{width: '25%'}} key={item}><h4 className=\"h4\">{item}</h4></div>);\n\nReactDOM.render(\n    <div style={{width: '600px'}}>\n        <div className=\"demo-item-title\">slide one picture one at a time</div>\n        <Slider slidesToShow={4} arrowPosition=\"outer\" dots={false} lazyLoad >\n            {slides}\n        </Slider>\n\n        <div className=\"demo-item-title\">slide multiple picture one at a time</div>\n        <Slider slidesToShow={4} slidesToScroll={4} arrowPosition=\"outer\" lazyLoad dots={false}>\n            {slides}\n        </Slider>\n    </div>\n    , mountNode);\n","css":".next-slick .h3, .h4 {\n    margin: 0 5px;\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n","body":"\n<p>在单图轮播的基础上，通过指定<code>slidesToShow</code>属性值，可以同时进行多图轮播。\n可以通过 <code>slidesToScroll</code> 属性制定单次轮播图片的个数。</p>\n"},{"title":"悬浮时暂停","order":"11","jsx":"import { Slider } from '@alifd/next';\n\nconst settings = {\n    className: 'custom-slide',\n    arrowPosition: 'outer',\n    dots: false,\n    infinite: true,\n    slidesToShow: 3,\n    slidesToScroll: 1,\n    autoplay: true,\n    autoplaySpeed: 2000,\n    pauseOnHover: true\n};\n\nReactDOM.render(\n    <Slider {...settings}>\n        <div><h3>1</h3></div>\n        <div><h3>2</h3></div>\n        <div><h3>3</h3></div>\n        <div><h3>4</h3></div>\n        <div><h3>5</h3></div>\n        <div><h3>6</h3></div>\n        <div><h3>7</h3></div>\n        <div><h3>8</h3></div>\n        <div><h3>9</h3></div>\n    </Slider>\n    , mountNode);\n","css":".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n","body":"\n<p>可以通过设置 <code>pauseOnHover</code> 属性为 <code>true</code> 使得 Slide 在鼠标悬浮时自动停止轮播。</p>\n"},{"title":"ActiveIndex","order":"14","jsx":"import { Slider } from '@alifd/next';\n\nconst slides = [\n    { url: 'https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png', text: 'Tape Player Skin Design Competition' },\n    { url: 'https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg', text: 'Mobile Phone Taobao Skin Call' },\n    { url: 'https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg', text: 'Design Enabling Public Welfare' },\n    { url: 'https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg', text: 'Amoy Doll Design Competition' },\n];\n\nclass SlickGoTo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: 0, // The initial value here need to be set to 0 for `activeIndex`. If you want the initial as 0 , you can use the `defaultIndex` property to set.\n        };\n        this.changeHandler = this.changeHandler.bind(this);\n    }\n    changeHandler(e) {\n        this.setState({\n            index: parseInt(e.target.value)\n        });\n    }\n    render() {\n        const settings = {\n            dots: false,\n            infinite: true,\n            activeIndex: this.state.index,\n        };\n        return (\n            <div>\n                <div className=\"demo-item-title\">Pull the scroll bar to switch:</div>\n                <input onChange={this.changeHandler} defaultValue={0} type=\"range\" min={0} max={3} />\n                <Slider {...settings}>\n                    {\n                        slides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img src={item.url} alt={item.text} /></div>)\n                    }\n                </Slider>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<SlickGoTo />, mountNode);\n","css":".slider-img-wrapper img {\n    width: 100%;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n","body":"\n<p>通过 <code>index</code> 属性可以快速的定位到指定次序的 slider 。</p>\n"},{"title":"onChange 钩子","order":"19","jsx":"import { Slider } from '@alifd/next';\n\nconst settings = {\n    className: 'custom-slide',\n    arrowPosition: 'outer',\n    dots: false,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    onChange: function (index) {\n        console.log('change Slide index', index);\n    }\n};\n\nReactDOM.render(\n    <Slider {...settings}>\n        <div><h3>1</h3></div>\n        <div><h3>2</h3></div>\n        <div><h3>3</h3></div>\n        <div><h3>4</h3></div>\n        <div><h3>5</h3></div>\n        <div><h3>6</h3></div>\n        <div><h3>7</h3></div>\n        <div><h3>8</h3></div>\n        <div><h3>9</h3></div>\n    </Slider>\n    , mountNode);\n","css":".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n","body":"\n<p>你可以利用 <code>onChange</code> 钩子函数处理一些额外的逻辑。</p>\n"},{"title":"垂直滑动","order":"2","jsx":"import { Slider } from '@alifd/next';\n\nReactDOM.render(<div style={{ width: '200px' }}>\n    <div className=\"demo-item-title\">Vertical multi-picture mode</div>\n    <Slider slideDirection=\"ver\" slidesToShow={3} slidesToScroll={1} dots={false} arrowPosition=\"inner\" arrowDirection=\"ver\" className=\"ver-slick\">\n        {\n            [1, 2, 3, 4, 5].map((item, index) => <div key={index} className=\"custom-slider\" style={{ border: '1px solid transparent'}}><h3 className=\"h3\">{item}</h3></div>)\n        }\n    </Slider>\n\n    <div className=\"demo-item-title\">Vertical single-picture mode</div>\n    <Slider slideDirection=\"ver\" dots={false} arrowPosition=\"inner\" arrowDirection=\"ver\" className=\"ver-slick\">\n        {\n            [1, 2, 3, 4, 5].map((item, index) => <div key={index} className=\"custom-slider\"><h3 className=\"h3\">{item}</h3></div>)\n        }\n    </Slider>\n</div>, mountNode);\n","css":".ver-slick .h3 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        font-size: 36px;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n","body":"\n<p>轮播组件可以通过 <code>slideDirection</code> 属性设置两种轮播方向。当值为 <code>ver</code> 时轮播方向为垂直方向，\n默认为值为 <code>hoz</code> 。垂直模式也可以设置单图和多图轮播。</p>\n"},{"title":"弹出来的跑马灯","order":"17","jsx":"import { Slider, Dialog, Button } from '@alifd/next';\nimport PropTypes from 'prop-types';\n\nconst slides = [\n    { url: 'https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png', text: 'Tape Player Skin Design Competition' },\n    { url: 'https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg', text: 'Mobile Phone Taobao Skin Call' },\n    { url: 'https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg', text: 'Design Enabling Public Welfare' },\n    { url: 'https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg', text: 'Amoy Doll Design Competition' },\n];\n\nconst dialogStyle = {\n    width: '800px',\n};\n\nclass FlappySlider extends React.Component {\n    static propTypes = {\n        slides: PropTypes.array,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false,\n        };\n\n        this.setVisible = this.setVisible.bind(this);\n    }\n\n    setVisible() {\n        this.setState(prevState => {\n            return {\n                visible: !prevState.visible,\n            };\n        });\n    }\n\n    render() {\n        return (<div className=\"demo-wrapper\">\n            <Button type=\"primary\" onClick={this.setVisible}>Marquee Banner</Button>\n            <Dialog visible={this.state.visible} title=\"Alibaba.com\" footer={false} style={dialogStyle} animation={false} onClose={this.setVisible}>\n                <Slider>\n                    {\n                        this.props.slides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img key={index} src={item.url} alt={item.text} /></div>)\n                    }\n                </Slider>\n            </Dialog>\n        </div>);\n    }\n}\n\nReactDOM.render(<FlappySlider slides={slides}/>, mountNode);\n","css":".slider-img-wrapper img {\n    width: 100%;\n}\n","body":"\n<p>如果你要将 Slider 放到 Dialog 中，此时你需要关闭 Dialog 的动画，避免 Slider 在计算内部元素宽度时造成出错。</p>\n"},{"title":"外部控制","order":"12","jsx":"import { Slider, Select } from '@alifd/next';\n\nconst { Option } = Select;\n\nclass SliderWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            autoplay: false,\n            autoplaySpeed: 1000,\n        };\n    }\n\n    onSelectAutoplay(value) {\n        this.setState({ autoplay: value });\n    }\n\n    onSelectAutoplaySpeed(value) {\n        this.setState({ autoplaySpeed: value });\n    }\n\n    render() {\n        return (<div>\n            <Select placeholder=\"Autoplay\" onChange={this.onSelectAutoplay.bind(this)}>\n                <Option value>True</Option>\n                <Option value={false}>False</Option>\n            </Select>\n            &nbsp;&nbsp;\n            <Select placeholder=\"Autoplay Speed\" onChange={this.onSelectAutoplaySpeed.bind(this)}>\n                <Option value={1000}>1 second</Option>\n                <Option value={2000}>2 seconds</Option>\n                <Option value={3000}>3 seconds</Option>\n            </Select>\n            <br />\n            <br />\n            <Slider autoplay={this.state.autoplay} autoplaySpeed={this.state.autoplaySpeed}>\n                <div><h3 className=\"h3\">1</h3></div>\n                <div><h3 className=\"h3\">2</h3></div>\n                <div><h3 className=\"h3\">3</h3></div>\n                <div><h3 className=\"h3\">4</h3></div>\n            </Slider>\n        </div>);\n    }\n}\n\nReactDOM.render(<SliderWrapper />, mountNode);\n","css":".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n","body":"\n<p>用户可以包装 Slider 组件，以便进行外部控制。例如通过包装组件实现外部对 Slider 组件 <code>autoplay</code> 和 <code>autoplaySpeed</code> 值的控制。</p>\n"},{"title":"不同的图片宽度","order":"15","jsx":"import { Slider } from '@alifd/next';\n\nconst settings = {\n    className: 'custom-slide variable-width',\n    arrowPosition: 'outer',\n    dots: true,\n    infinite: true,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    variableWidth: true\n};\n\nReactDOM.render(\n    <Slider {...settings}>\n        <div style={{width: 100}}><p>100</p></div>\n        <div style={{width: 200}}><p>200</p></div>\n        <div style={{width: 75}}><p>75</p></div>\n        <div style={{width: 300}}><p>300</p></div>\n        <div style={{width: 225}}><p>225</p></div>\n        <div style={{width: 175}}><p>175</p></div>\n    </Slider>\n    , mountNode);\n","css":".variable-width .next-slick-slide p {\n  background: #4F74B3;;\n  height: 100px;\n  color: #fff;\n  margin: 5px;\n  line-height: 100px;\n  text-align: center;\n}\n","body":"\n<p>Slider 在默认情况下会认为所有的子元素是等宽的。\n通过设置 <code>variableWidth</code> 为 <code>true</code>，您可以在 Slider 中放置不同宽度的图片。</p>\n"}]},{"name":"SplitButton","category":"Components","title":"分隔按钮","type":"基本","importStatement":"import { SplitButton } from '@alifd/next';","body":"\n## 使用指南\n\nSplitButton 同样由 Button 和 Menu 组成，其在触发区域上可以分为两部分，其中 Icon 部分作为弹层菜单的触发区域。\n菜单只有在鼠标悬浮或点击右侧图标区域的时候才会展示。\n\n API\n\n### SplitButton\n\n| 参数                  | 说明                                                                                                                                                               | 类型        | 默认值       |\n| ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | --------- |\n| size                | 按钮组的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                             | Enum      | 'medium'  |\n| type                | 按钮的类型<br><br>**可选值**:<br>'normal', 'primary', 'secondary'                                                                                                        | Enum      | 'normal'  |\n| label               | 主按钮的文案                                                                                                                                                           | ReactNode | -         |\n| component           | 设置标签类型<br><br>**可选值**:<br>'button', 'a'                                                                                                                          | Enum      | -         |\n| ghost               | 是否为幽灵按钮<br><br>**可选值**:<br>'light', 'dark', false, true                                                                                                          | Enum      | -         |\n| defaultSelectedKeys | 默认激活的菜单项（用法同 Menu 非受控）                                                                                                                                           | Array     | \\[]       |\n| selectedKeys        | 激活的菜单项（用法同 Menu 受控）                                                                                                                                              | Array     | -         |\n| selectMode          | 菜单的选择模式<br><br>**可选值**:<br>'single', 'multiple'                                                                                                                  | Enum      | -         |\n| onSelect            | 选择菜单项时的回调，参考 Menu<br><br>**签名**:<br>Function() => void                                                                                                           | Function  | func.noop |\n| onItemClick         | 点击菜单项时的回调，参考 Menu<br><br>**签名**:<br>Function() => void                                                                                                           | Function  | func.noop |\n| triggerProps        | 触发按钮的属性（支持 Button 的所有属性透传）                                                                                                                                       | Object    | -         |\n| autoWidth           | 弹层菜单的宽度是否与按钮组一致                                                                                                                                                  | Boolean   | true      |\n| visible             | 弹层是否显示                                                                                                                                                           | Boolean   | -         |\n| defaultVisible      | 弹层默认是否显示                                                                                                                                                         | Boolean   | -         |\n| onVisibleChange     | 弹层显示状态变化时的回调函数<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层显示状态<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function  | func.noop |\n| popupTriggerType    | 弹层的触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                      | Enum      | 'click'   |\n| popupAlign          | 弹层对齐方式, 详情见Overlay align                                                                                                                                         | String    | -         |\n| popupStyle          | 弹层自定义样式                                                                                                                                                          | Object    | -         |\n| popupClassName      | 弹层自定义样式类                                                                                                                                                         | String    | -         |\n| popupProps          | 透传给弹层的属性                                                                                                                                                         | Object    | -         |\n| menuProps           | 透传给 Menu 的属性                                                                                                                                                     | Object    | {}        |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { SplitButton } from '@alifd/next';\n\nconst { Item } = SplitButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nReactDOM.render(<div>\n    <SplitButton label=\"Edit Document\">{menu}</SplitButton> &nbsp; &nbsp;\n    <SplitButton label=\"Edit Document\" type=\"primary\">{menu}</SplitButton>&nbsp;&nbsp;\n    <SplitButton label=\"Edit Document\" type=\"secondary\">{menu}</SplitButton><br /><br />\n</div>, mountNode);\n","css":"","body":"\n<p>最简单的用法。支持 Button 的 type, size, component, ghost 等属性透传。</p>\n"},{"title":"复合使用","order":"3","jsx":"import { SplitButton } from '@alifd/next';\n\nconst { Item } = SplitButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nclass CompositeSplitButton extends React.Component {\n    state = {\n        visible: false,\n        label: 'Choose Action',\n    }\n\n    onSelect = val => {\n        this.setState({\n            visible: false,\n            label: val,\n        });\n    }\n\n    changeVisible = visible => {\n        this.setState({\n            visible,\n        });\n    }\n\n    render() {\n        const { visible, label } = this.state;\n        return (<SplitButton label={label} visible={visible} onVisibleChange={this.changeVisible} onItemClick={this.onSelect}>{menu}</SplitButton>);\n    }\n}\n\nReactDOM.render(<CompositeSplitButton />, mountNode);\n","css":"","body":"\n<p>复合使用菜单，监听菜单行为。</p>\n"},{"title":"复杂菜单","order":"3","jsx":"import { SplitButton } from '@alifd/next';\n\nconst { Item, Group, Divider } = SplitButton;\n\nReactDOM.render(<SplitButton label=\"Edit Document\" onItemClick={key => console.log(key)}>\n    <Item>Undo</Item>\n    <Item>Redo</Item>\n    <Divider />\n    <Group>\n        <Item helper=\"CTRL + X\">Cut</Item>\n        <Item helper=\"CTRL + C\">Copy</Item>\n        <Item helper=\"CTRL + V\">Paste</Item>\n    </Group>\n</SplitButton>, mountNode);\n","css":"","body":"\n<p>支持菜单组和菜单分割线，使用方法同 <code>Menu.Group</code>, <code>Menu.Item</code>, <code>Menu.Divider</code>。</p>\n"},{"title":"尺寸","order":"1","jsx":"import { SplitButton } from '@alifd/next';\n\nconst { Item } = SplitButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nReactDOM.render(<div>\n    <SplitButton label=\"Edit Document\" size=\"small\">{menu}</SplitButton> &nbsp; &nbsp;\n    <SplitButton label=\"Edit Document\" size=\"medium\">{menu}</SplitButton> &nbsp; &nbsp;\n    <SplitButton label=\"Edit Document\" size=\"large\">{menu}</SplitButton>\n</div>, mountNode);\n","css":"","body":"\n<p>SplitButton 实际是上一个按钮组，通过 <code>size</code> 属性可以改变按钮组的大小。</p>\n"}]},{"name":"Step","category":"Components","title":"步骤","type":"展示","importStatement":"import { Step } from '@alifd/next';","body":"\n API\n\n### Step\n\n| 参数             | 说明                                                                                                                                                                                  | 类型       | 默认值          |\n| -------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ------------ |\n| current        | 当前步骤                                                                                                                                                                                | Number   | 0            |\n| shape          | 类型<br><br>**可选值**:<br>'circle', 'arrow', 'dot'                                                                                                                                      | Enum     | 'circle'     |\n| direction      | 展示方向<br><br>**可选值**:<br>'horizontal', 'vertical'                                                                                                                                    | Enum     | 'horizontal' |\n| labelPlacement | 横向布局时的内容排列<br><br>**可选值**:<br>'horizontal', 'vertical'                                                                                                                              | Enum     | 'vertical'   |\n| readOnly       | 是否只读模式                                                                                                                                                                              | Boolean  | -            |\n| animation      | 是否开启动效                                                                                                                                                                              | Boolean  | true         |\n| itemRender     | StepItem 的自定义渲染<br><br>**签名**:<br>Function(index: Number, status: String) => Node<br>**参数**:<br>_index_: {Number} 节点索引<br>_status_: {String} 节点状态<br>**返回值**:<br>{Node} 节点的渲染结果<br> | Function | null         |\n\n### Step.Item\n\n| 参数         | 说明                                                                                                                                                                                                       | 类型        | 默认值       |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | --------- |\n| status     | 步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`<br><br>**可选值**:<br>'wait', 'process', 'finish'                                                                                     | Enum      | -         |\n| title      | 标题                                                                                                                                                                                                       | ReactNode | -         |\n| icon       | 图标                                                                                                                                                                                                       | String    | -         |\n| content    | 内容，用于垂直状态下的内容填充                                                                                                                                                                                          | ReactNode | -         |\n| itemRender | StepItem 的自定义渲染, 会覆盖父节点设置的itemRender<br><br>**签名**:<br>Function(index: Number, status: String) => Node<br>**参数**:<br>_index_: {Number} 节点索引<br>_status_: {String} 节点状态<br>**返回值**:<br>{Node} 节点的渲染结果<br> | Function  | -         |\n| percent    | 百分比                                                                                                                                                                                                      | Number    | -         |\n| disabled   | 是否禁用                                                                                                                                                                                                     | Boolean   | -         |\n| onClick    | 点击步骤时的回调<br><br>**签名**:<br>Function(index: Number) => void<br>**参数**:<br>_index_: {Number} 节点索引                                                                                                          | Function  | () => { } |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Step } from '@alifd/next';\n\nconst steps = [['Step 1', 'Open the refrigerator door'], ['Step 2', 'Put the elephant in the refrigerator'], ['Step 3', 'Close the refrigerator door']].map((item, index) => <Step.Item key={index} title={item[0]} content={item[1]}/>);\n\nReactDOM.render(<div>\n    <h3>Arrow</h3>\n    <Step current={1} shape=\"arrow\">\n        {steps}\n    </Step>\n\n    <h3>Circle</h3>\n    <Step current={1} shape=\"circle\">\n        {steps}\n    </Step>\n\n    <h3>Circle(Horizontal content)</h3>\n    <Step current={1} shape=\"circle\" labelPlacement=\"horizontal\">\n        {steps}\n    </Step>\n\n    <h3>Dot</h3>\n    <Step current={1} shape=\"dot\">\n        {steps}\n    </Step>\n\n</div>, mountNode);\n","css":"","body":"\n<p>在最简单的情况下，Step 有三种类型，可以通过 <code>shape</code> 属性进行切换。</p>\n<p><code>circle</code>类型可通过<code>labelPlacement</code>设置文本排列方向。</p>\n"},{"title":"受控模式","order":"6","jsx":"import { Step, Button, Select } from '@alifd/next';\n\nconst StepItem = Step.Item, ButtonGroup = Button.Group;\n\nclass Component extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentStep: 3,\n            stepType: 'circle',\n            stepAnimation: true,\n            labelPlacement: 'vertical'\n        };\n\n        this.onClick = this.onClick.bind(this);\n    }\n    next() {\n        const s = this.state.currentStep + 1;\n\n        this.setState({\n            currentStep: s > 6 ? 6 : s\n        });\n    }\n    prev() {\n        const s = this.state.currentStep - 1;\n\n        this.setState({\n            currentStep: s < 0 ? 0 : s\n        });\n    }\n    onClick(currentStep) {\n        console.log(currentStep);\n\n        this.setState({\n            currentStep: currentStep\n        });\n    }\n    onStepTypeChange(value) {\n        this.setState({ stepType: value });\n    }\n    onStepAnimation(value) {\n        this.setState({ stepAnimation: value });\n    }\n    onLabelPlacementChange(value) {\n        this.setState({ labelPlacement: value });\n    }\n    render() {\n        const {currentStep} = this.state;\n\n        return (\n            <div>\n                <div className=\"custom-step-option\">\n                    <Select placeholder=\"Choose the dispaly type\" onChange={this.onStepTypeChange.bind(this)} className=\"custom-select\" defaultValue=\"circle\">\n                        {\n                            ['circle', 'arrow', 'dot'].map(item => <Select.Option value={item} key={item}>{item}</Select.Option>)\n                        }\n                    </Select>\n\n                    <Select placeholder=\"Label placement\" onChange={this.onLabelPlacementChange.bind(this)} className=\"custom-select\" defaultValue=\"vertical\">\n                        {\n                            ['horizontal', 'vertical'].map(item => <Select.Option value={item} key={item}>{item}</Select.Option>)\n                        }\n                    </Select>\n\n\n                    <Select placeholder=\"Enable animation\" onChange={this.onStepAnimation.bind(this)} className=\"custom-select\" defaultValue>\n                        {\n                            [true, false].map((item, index) => <Select.Option value={item} key={index}>{item ? 'animation on' : 'animation off'}</Select.Option>)\n                        }\n                    </Select>\n                </div>\n\n                <Step current={currentStep} shape={this.state.stepType} animation={this.state.stepAnimation} labelPlacement={this.state.labelPlacement}>\n                    <StepItem title=\"Step 1\" onClick={this.onClick} content=\"Description\" />\n                    <StepItem title=\"Step 2\" onClick={this.onClick} content=\"Description\" />\n                    <StepItem title=\"Step 3\" onClick={this.onClick} content=\"Description\" />\n                    <StepItem title=\"Step 4\" onClick={this.onClick} content=\"Description\" />\n                    <StepItem title=\"Step 5\" onClick={this.onClick} content=\"Description\" />\n                    <StepItem title=\"Step 6\" onClick={this.onClick} content=\"Description\" />\n                </Step>\n                <br />\n                <br />\n                <ButtonGroup>\n                    <Button onClick={this.prev.bind(this)} type=\"primary\" disabled={currentStep === 0}>Backward</Button>\n                    <Button onClick={this.next.bind(this)} type=\"primary\" disabled={currentStep === 6}>Forward</Button>\n                </ButtonGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Component />, mountNode);\n","css":".custom-step-option {\n    margin-bottom: 20px;\n}\n\n.custom-select {\n    margin-right: 20px;\n}\n","body":"\n<p>默认情况下，Step 定义为展示型组件，上层组件可以通过修改传入的 current 属性值来修改当前的步骤，同时可以设置每个节点的 click 事件，来自定义回调。</p>\n"},{"title":"Step.Item 自定义渲染","order":"4","jsx":"import { Step, Icon } from '@alifd/next';\n\nconst steps = ['one', 'two', 'three', 'four'];\n\nfunction itemRender(index) {\n    return <div className=\"custom-node1\"><span>{index + 1}</span></div>;\n}\n\nfunction itemRender2(index, status) {\n    return <div className=\"custom-node2\">{status === 'finish' ? <Icon type=\"success\" /> : <span>{index + 1}</span>} </div>;\n}\n\nReactDOM.render(<div className=\"fusion-demo\">\n    <div className=\"fusion-demo-item\">\n        <Step current={2} animation={false} itemRender={itemRender}>\n            {\n                steps.map(item => <Step.Item key={item} title={item}  />)\n            }\n        </Step>\n    </div>\n\n    <div className=\"fusion-demo-item\">\n        <Step current={2} animation={false} itemRender={itemRender2}>\n            {\n                steps.map(item => <Step.Item key={item} title={item}  />)\n            }\n        </Step>\n    </div>\n</div>, mountNode);\n","css":".fusion-demo-item {\n    margin: 15px 0;\n}\n.custom-node1 {\n    height: 100%;\n    width: 100%;\n    border-radius: 20%;\n    border: 1px dashed #3E71F1;\n    text-align: center;\n}\n.custom-node1 span {\n    font-size: 12px;\n\n    position: absolute;\n    top: 50%;\n    text-align: center;\n    width: 100%;\n    left: 0;\n    transform: translateY(-50%);\n}\n.custom-node2 {\n    height: 100%;\n    width: 100%;\n    border-radius: 20%;\n    border: 1px dashed #3E71F1;\n    text-align: center;\n    background: #3E71F1;\n    color: #fff;\n    position: relative;\n}\n\n.custom-node2 span, .custom-node2 i {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    left: 0;\n    width: 100%;\n    text-align: center;\n}\n","body":"\n<p><code>Step.Item</code> 默认有三种状态，分别是 <code>wait</code>, <code>process</code>, <code>finish</code>。\n用户可以通过传递 <code>itemRender</code> 属性进行自定义的渲染。</p>\n"},{"title":"垂直模式","order":"1","jsx":"import { Step } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Step current={1} direction=\"vertical\" animation={false}>\n        <Step.Item title=\"Step 1\" content=\"Open the refrigerator door\" />\n        <Step.Item title=\"Step 2\" content=\"Put the elephant in the refrigerator\" />\n        <Step.Item title=\"Step 3\" content=\"Close the refrigerator door\" />\n    </Step>\n\n    <br /><br />\n    <Step current={1} direction=\"vertical\" shape=\"dot\" animation={false}>\n        <Step.Item title=\"Step 1\" content=\"Open the refrigerator door\" />\n        <Step.Item title=\"Step 2\" content=\"Put the elephant in the refrigerator\" />\n        <Step.Item title=\"Step 3\" content=\"Close the refrigerator door\" />\n    </Step>\n</div>, mountNode);\n","css":"","body":"\n<p>对于点型和圆圈型的 Step 组件而言，可以通过设置 <code>direction</code> 属性设置其展示方向为垂直。\n箭头形不支持垂直模式。</p>\n"},{"title":"禁用步骤项","order":"3","jsx":"import { Step } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Step current={1} shape=\"arrow\">\n        <Step.Item title=\"Step 1\" />\n        <Step.Item title=\"Step 2\" />\n        <Step.Item title=\"Step 3\" disabled />\n        <Step.Item title=\"Step 4\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} shape=\"dot\">\n        <Step.Item title=\"Step 1\" />\n        <Step.Item title=\"Step 2\" />\n        <Step.Item title=\"Step 3\" disabled />\n        <Step.Item title=\"Step 4\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} shape=\"circle\">\n        <Step.Item title=\"Step 1\" />\n        <Step.Item title=\"Step 2\" />\n        <Step.Item title=\"Step 3\" disabled />\n        <Step.Item title=\"Step 4\" />\n    </Step>\n</div>, mountNode);\n","css":"","body":"\n<p>可以通过在 <code>Step.Item</code> 上设置 <code>disabled</code> 属性来禁用某个步骤。</p>\n"},{"title":"图标和百分比","order":"2","jsx":"import { Step } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Step current={1} animation={false} shape=\"dot\">\n        <Step.Item title=\"Step 1\" content=\"Open the refrigerator door\" icon=\"calendar\" />\n        <Step.Item title=\"Step 2\" content=\"Put the elephant in the refrigerator\" percent={40}/>\n        <Step.Item title=\"Step 3\" content=\"Close the refrigerator door\" icon=\"smile\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} animation={false}>\n        <Step.Item title=\"Step 1\" content=\"Open the refrigerator door\" icon=\"calendar\" />\n        <Step.Item title=\"Step 2\" content=\"Put the elephant in the refrigerator\" percent={40}/>\n        <Step.Item title=\"Step 3\" content=\"Close the refrigerator door\" icon=\"smile\" />\n    </Step>\n</div>, mountNode);\n","css":"","body":"\n<p>可以在点型和圆形步骤条中使用图标，圆形步骤条还支持使用百分比。</p>\n"},{"title":"只读模式","order":"5","jsx":"import { Step, Button } from '@alifd/next';\n\nconst StepItem = Step.Item, ButtonGroup = Button.Group;\nclass Component extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentStep: 3\n        };\n    }\n    next() {\n        const s = this.state.currentStep + 1;\n\n        this.setState({\n            currentStep: s > 6 ? 6 : s\n        });\n    }\n    prev() {\n        const s = this.state.currentStep - 1;\n\n        this.setState({\n            currentStep: s < 0 ? 0 : s\n        });\n    }\n    onClick(currentStep) {\n        console.log(currentStep);\n\n        this.setState({\n            currentStep: currentStep\n        });\n    }\n    render() {\n        const {currentStep} = this.state;\n\n        return (\n            <div>\n                <Step current={currentStep} readOnly>\n                    <StepItem title=\"Step 1\" onClick={this.onClick.bind(this)} />\n                    <StepItem title=\"Step 2\" onClick={this.onClick.bind(this)} />\n                    <StepItem title=\"Step 3\" onClick={this.onClick.bind(this)} />\n                    <StepItem title=\"Step 4\" onClick={this.onClick.bind(this)} />\n                    <StepItem title=\"Step 5\" onClick={this.onClick.bind(this)} />\n                    <StepItem title=\"Step 6\" onClick={this.onClick.bind(this)} />\n                </Step>\n                <br />\n                <br />\n                <ButtonGroup>\n                    <Button onClick={this.prev.bind(this)} type=\"primary\" disabled={currentStep === 0}>Backward</Button>\n                    <Button onClick={this.next.bind(this)} type=\"primary\" disabled={currentStep === 6}>Forward</Button>\n                </ButtonGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Component />, mountNode);\n","css":"","body":"\n<p>只读模式，不可触发回调。</p>\n"}]},{"name":"Switch","category":"Components","title":"开关组件","type":"表单","importStatement":"import { Switch } from '@alifd/next';","body":"\n## 开发指南\n\n开关组件\n\n### 何时使用\n\n开/关切换器切换单个设置选项的状态。开关控制器中的选项，以及它所在的状态，应该用伴随的内联标签显示清楚。开关选择器具有和单选按钮一样的视觉属性。使用文本“开”和“关”滑动切换已经过时了。使用这里显示的开关选择器代替。\n\n### 使用注意\n\n-   对于checkChildren和unCheckedChildren的自定义要考虑文字大小，因为switch的宽度有限，默认一个汉字大小。如果设置成多个字或者英文要注意宽度控制。\n\n API\n\n### Switch\n\n| 参数                | 说明                                                                                                                                             | 类型       | 默认值       |\n| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- | -------- | --------- |\n| checkedChildren   | 打开时的内容                                                                                                                                         | any      | -         |\n| size              | switch的尺寸<br><br>**可选值**:<br>'medium'(正常大小)<br>'small'(缩小版大小)                                                                                  | Enum     | 'medium'  |\n| unCheckedChildren | 关闭时的内容                                                                                                                                         | any      | -         |\n| onChange          | 开关状态改变是触发此事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>_checked_: {Boolean} 是否为打开状态<br>_e_: {Event} DOM事件对象 | Function | () => { } |\n| checked           | 开关当前的值(针对受控组件)                                                                                                                                 | Boolean  | -         |\n| defaultChecked    | 开关默认值 (针对非受控组件)                                                                                                                                | Boolean  | -         |\n| disabled          | 表示开关被禁用                                                                                                                                        | Boolean  | false     |\n| onClick           | 鼠标点击事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} DOM事件对象                                                         | Function | -         |\n| onKeyDown         | 键盘按键事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} DOM事件对象                                                         | Function | -         |\n\n## 键盘支持\n\n-   支持键盘控制，tab选中后按回车进行状态切换。\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"简单","order":"0","jsx":"import { Switch } from '@alifd/next';\n\n\nfunction onChange(checked) {\n    console.log(`switch to ${checked}`);\n}\n\nReactDOM.render(<div>\n    <Switch checkedChildren=\"on\" onChange={onChange} unCheckedChildren=\"off\" />\n    <br />\n    <Switch defaultChecked={false} onChange={onChange} size=\"small\" />\n    <br />\n    <Switch className=\"large-width\" checkedChildren=\"on\" onChange={onChange} unCheckedChildren=\"off please\" />\n</div>,\nmountNode);\n","css":".large-width {\n    width: 100px;\n}\n","body":"\n<p>最简单的用法,size可设置大小。</p>\n"},{"title":"受控开关","order":"1","jsx":"import { Switch } from '@alifd/next';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: false\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(checked) {\n        this.setState({checked});\n    }\n\n    render() {\n        return (<div>\n            <div className=\"line\">value of switch: {this.state.checked ? 'true' : 'false'}</div>\n            <div className=\"line\">\n                <Switch checked={this.state.checked} onChange={this.onChange} />\n                <Switch checked={this.state.checked} onChange={this.onChange} disabled />\n            </div>\n        </div>);\n    }\n}\n\nReactDOM.render(\n    <App />,\n    mountNode\n);\n","css":".line {\n  margin-bottom: 10px;\n}\n.next-switch {\n  margin-right: 20px;\n}\n","body":"\n<p>受控开关, 是指组件的值由上层组件决定, 如果开关定义了 <code>value</code> 属性, 就表示此开关是受控开关.</p>\n<p>对于受控开关, 每一次 React 数据渲染时, 都会使用传入的值来更新开关, 开关本身是不能更新自己的状态的.</p>\n"},{"title":"不可用","order":"2","jsx":"import { Button, Icon, Switch } from '@alifd/next';\n\n\n\nclass Test extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            disabled: true\n        };\n    }\n\n    toggle() {\n        this.setState(Object.assign({}, this.state, {\n            disabled: !this.state.disabled\n        }));\n    }\n\n    render() {\n        return (<div>\n            <Switch checkedChildren={<Icon type=\"select\" size=\"small\" />}\n                unCheckedChildren={<Icon type=\"close\" size=\"small\" />} disabled={this.state.disabled} />\n            <Switch checkedChildren=\"on\" unCheckedChildren=\"off\" disabled={this.state.disabled} />\n            <br />\n            <br />\n            <Button type=\"primary\" onClick={this.toggle.bind(this)}>Toggle disabled</Button>\n        </div>);\n    }\n}\n\nReactDOM.render(<Test />, mountNode);\n","css":"","body":"\n<p>Switch 失效状态。</p>\n"}]},{"name":"Tab","category":"Components","title":"选项卡","type":"导航","importStatement":"import { Tab } from '@alifd/next';","body":"\n## Guide\n\nTAB 让用户可以在不同子任务、视图、模式之间切换，它具有全局导航的作用，\n是全局功能的主要展示和切换区域，一个TAB标记一个核心功能，TAB之间可以快速点击切换。\n该窗口包含2个以上的选项卡，所有选项卡可以排列在一行中，即使该用户界面被本地化后也是如此。\n提供平级的区域将大块内容进行收纳和展现，保持界面整洁。\n\n### 何时使用\n\nFusion 提供了三级选项卡，分别用于不同的场景。\n\n-   普通选项卡，引领整页面的内容，起导航的作用。\n-   文本型选项卡。\n-   包裹型选项卡，在页面结构中，只是局部展示，需要和其他内容结合出现。\n-   胶囊型选项卡。\n\n### 关于动效\n\n如果您不想开启动效，可以通过设置 `animation` 属性值为 `false` 来关闭。\n\n API\n\n### Tab\n\n| 参数                  | 说明                                                                                                                                                                                                                  | 类型            | 默认值      |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | -------- |\n| activeKey           | 被激活的选项卡的 key                                                                                                                                                                                                        | Number/String | -        |\n| size                | 尺寸<br><br>**可选值**:<br>'small', 'medium'                                                                                                                                                                             | Enum          | 'medium' |\n| shape               | 外观形态<br><br>**可选值**:<br>'pure', 'wrapped', 'text', 'capsule'                                                                                                                                                        | Enum          | 'pure'   |\n| defaultActiveKey    | 初始化时被激活的选项卡的 key                                                                                                                                                                                                    | Number/String | -        |\n| animation           | 是否开启动效                                                                                                                                                                                                              | Boolean       | true     |\n| excessMode          | 选项卡过多时的滑动模式<br><br>**可选值**:<br>'slide', 'dropdown'                                                                                                                                                                  | Enum          | 'slide'  |\n| tabPosition         | 导航选项卡的位置，只适用于包裹型（wrapped）选项卡<br><br>**可选值**:<br>'top', 'bottom', 'left', 'right'                                                                                                                                    | Enum          | 'top'    |\n| triggerType         | 激活选项卡的触发方式<br><br>**可选值**:<br>'hover', 'click'                                                                                                                                                                      | Enum          | 'click'  |\n| lazyLoad            | 是否提前渲染好所有 TabPane 的内容                                                                                                                                                                                               | Boolean       | true     |\n| unmountInactiveTabs | 是否自动卸载未处于激活状态的选项卡                                                                                                                                                                                                   | Boolean       | false    |\n| navStyle            | 导航条的自定义样式                                                                                                                                                                                                           | Object        | -        |\n| navClassName        | 导航条的自定义样式类                                                                                                                                                                                                          | String        | -        |\n| contentStyle        | 内容区容器的自定义样式                                                                                                                                                                                                         | Object        | -        |\n| contentClassName    | 内容区容器的自定义样式类                                                                                                                                                                                                        | String        | -        |\n| extra               | 导航栏附加内容                                                                                                                                                                                                             | ReactNode     | -        |\n| onClick             | 点击单个选项卡时触发的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                  | Function      | () => {} |\n| onChange            | 选项卡发生切换时的事件回调<br><br>**签名**:<br>Function(key: String/Number) => void<br>**参数**:<br>_key_: {String/Number} 改变后的 key                                                                                                  | Function      | () => {} |\n| onClose             | 选项卡被关闭时的事件回调<br><br>**签名**:<br>Function(key: String/Number) => void<br>**参数**:<br>_key_: {String/Number} 关闭的选项卡的 key                                                                                                | Function      | () => {} |\n| tabRender           | 自定义选项卡模板渲染函数<br><br>**签名**:<br>Function(key: String, props: Object) => ReactNode<br>**参数**:<br>_key_: {String} 当前 Tab.Item 的 key 值<br>_props_: {Object} 传给 Tab.Item 的所有属性键值对<br>**返回值**:<br>{ReactNode} 返回自定义组件<br> | Function      | -        |\n\n### Tab.Item\n\n| 参数        | 说明         | 类型        | 默认值   |\n| --------- | ---------- | --------- | ----- |\n| title     | 选项卡标题      | ReactNode | -     |\n| closeable | 单个选项卡是否可关闭 | Boolean   | false |\n| disabled  | 选项卡是否被禁用   | Boolean   | -     |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"简单用法","order":"0","jsx":"import { Tab } from '@alifd/next';\n\nReactDOM.render(\n    <Tab>\n        <Tab.Item title=\"Home\">Home content</Tab.Item>\n        <Tab.Item title=\"Documentation\">Doc content</Tab.Item>\n        <Tab.Item title=\"Help\">Help Content</Tab.Item>\n    </Tab>\n    , mountNode);\n","css":".next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>使用 Tab 最简单的例子。</p>\n"},{"title":"可关闭选项卡","order":"6","jsx":"import { Tab, Button, Icon } from '@alifd/next';\n\nconst panes = [\n    { tab: 'Mail', key: 1, closeable: false },\n    { tab: 'Message', key: 2, closeable: true },\n    { tab: 'Setting', key: 3, closeable: true },\n    { tab: 'Unread', key: 4, closeable: true },\n];\n\nclass CloseableTab extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            panes: panes,\n            activeKey: panes[0].key,\n        };\n    }\n\n    /*eslint-disable eqeqeq */\n    remove(targetKey) {\n        let activeKey = this.state.activeKey;\n        const panes = [];\n        this.state.panes.forEach(pane => {\n            if (pane.key != targetKey) {\n                panes.push(pane);\n            }\n        });\n\n        if (targetKey == activeKey) {\n            activeKey = panes[0].key;\n        }\n        this.setState({ panes, activeKey });\n    }\n\n    onClose = (targetKey) => {\n        this.remove(targetKey);\n    }\n\n    onChange = (activeKey) => {\n        this.setState({ activeKey });\n    }\n\n    addTabpane = () => {\n        this.setState(prevState => {\n            const { panes } = prevState;\n            panes.push({ tab: 'new tab', key: Math.random(), closeable: true });\n            return { panes };\n        });\n    }\n\n    render() {\n        const state = this.state;\n        return (\n            <div>\n                <Button onClick={this.addTabpane} size=\"large\" type=\"primary\"><Icon type=\"add\"/> New Tab</Button>\n\n                <Tab\n                    shape=\"wrapped\"\n                    activeKey={state.activeKey}\n                    onChange={this.onChange}\n                    onClose={this.onClose}\n                    className=\"custom-tab\">\n                    {state.panes.map(item => <Tab.Item title={item.tab} key={item.key}  closeable={item.closeable}>{item.tab} content</Tab.Item>)}\n                </Tab>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<CloseableTab />, mountNode);\n","css":".custom-tab {\n    margin-top: 14px;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>可关闭选项卡，可以通过在 <code>Tab.Item</code> 上设置 <code>closeable</code> 属性设置该选项卡是否可关闭。</p>\n"},{"title":"自定义样式","order":"9","jsx":"import { Tab } from '@alifd/next';\n\nconst panes = [\n    {\n        tab: 'Todo Tasks',\n        key: 0\n    },\n    {\n        tab: 'Finished Tasks',\n        key: 1\n    },\n    {\n        tab: 'Unread Messages',\n        key: 2\n    },\n    {\n        tab: 'Past Messages',\n        key: 3\n    },\n    {\n        tab: 'All Messages',\n        key: 4\n    }\n];\n\nconst detachedContentStyle = {\n    border: '1px solid #DCDEE3',\n    padding: '20px',\n};\n\nReactDOM.render(<div className=\"fusion-demo\">\n    <div className=\"demo-item-title\">Customize with contentStyle or contentClassName</div>\n    <Tab shape=\"wrapped\" contentStyle={detachedContentStyle}>\n        {\n            panes.map(pane => <Tab.Item title={pane.tab} key={pane.key}>{pane.tab}</Tab.Item>)\n        }\n    </Tab>\n\n    <div className=\"demo-item-title\">Setting className and style in Tab.Item</div>\n    <Tab shape=\"wrapped\" navStyle={{ background: '#DEE8FF' }}>\n        {\n            panes.map(pane => {\n                return (<Tab.Item\n                    title={pane.tab}\n                    key={pane.key}\n                    className=\"custom-tab-item\"\n                    style={{background: '#FFF'}}>{pane.tab}</Tab.Item>\n                );\n            })\n        }\n    </Tab>\n\n    <div className=\"demo-item-title\">Tabs with equal width</div>\n    <Tab shape=\"capsule\">\n        {\n            panes.map(pane => <Tab.Item title={pane.tab} key={pane.key} className=\"justify-tabs-tab\">{pane.tab}</Tab.Item>)\n        }\n    </Tab>\n</div>\n    , mountNode);\n","css":".fusion-demo .demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n}\n\n.custom-content {\n    padding: 15px;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n\n.custom-tab-item {\n    margin-right: -1px !important;\n}\n\n.justify-tabs-tab {\n    width: 140px;\n    text-align: center;\n}\n","body":"\n<p>在 Tab 已有样式的基础上，可以通过 <code>contentStyle</code>, <code>contentClassName</code> 等属性自由的进行样式自定义。</p>\n"},{"title":"自定义选项卡","order":"10","jsx":"import { Tab } from '@alifd/next';\n\nfunction CustomTabItem({ title, desc }) {\n    return (<div className=\"custom-tab-item\">\n        <div className=\"tab-title\">{title}</div>\n        <div className=\"tab-desc\">{desc}</div>\n    </div>);\n}\n\nconst panes = [\n    { key: 'e-checking', title: 'Alipay', desc: 'The fee to be paid is $15' },\n    { key: 'brand-card', title: 'Bank Card', desc: 'The fee to be paid is $17' },\n];\n\nReactDOM.render(\n    <Tab shape=\"wrapped\" tabRender={(key, props) => <CustomTabItem key={key} {...props} />}>\n        {\n            panes.map(pane => <Tab.Item key={pane.key} {...pane} tabStyle={{ height: '60px' }}>{pane.desc}</Tab.Item>)\n        }\n    </Tab>\n    , mountNode);\n","css":".custom-tab-item {\n    padding: 10px;\n}\n\n.tab-title {\n    font-size: 20px;\n}\n.tab-desc {\n    margin: 10px 0 0 0;\n    font-size: 12px;\n}\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>Tab 支持使用 <code>tabRender</code> 属性返回自定义组件作为选项卡内容，注意该属性接收函数作为属性值。</p>\n"},{"title":"禁用","order":"8","jsx":"import { Tab } from '@alifd/next';\n\nReactDOM.render(\n    <Tab>\n        <Tab.Item title=\"Tab 1\" disabled>Tab 1 content</Tab.Item>\n        <Tab.Item title=\"Tab 2\">Tab 2 content</Tab.Item>\n        <Tab.Item title=\"Tab 3\">Tab 3 content</Tab.Item>\n    </Tab>\n    , mountNode);\n","css":".next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>可以通过 <code>disabled</code> 属性禁用某一个选型卡。</p>\n"},{"title":"可编辑的 Tab","order":"12","jsx":"import { Tab, Input } from '@alifd/next';\n\nclass EditableTabPane extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabTitle: props.defaultTitle,\n            editable: false,\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.defaultTitle !== this.state.tabTitle) {\n            this.setState({\n                tabTitle: nextProps.defaultTitle\n            });\n        }\n    }\n\n    onKeyDown = (e) => {\n        const { keyCode } = e;\n        // Stop bubble up the events of keyUp, keyDown, keyLeft, and keyRight\n        if (keyCode > 36 && keyCode < 41) {\n            e.stopPropagation();\n        }\n    }\n\n    onBlur = (e) => {\n        this.setState({\n            editable: false,\n            tabTitle: e.target.value\n        });\n    }\n\n    onDblClick = () => {\n        this.setState({\n            editable: true\n        });\n    }\n\n    render() {\n        const { tabTitle, editable } = this.state;\n        if (editable) {\n            return <Input defaultValue={tabTitle} onKeyDown={this.onKeyDown} onBlur={this.onBlur} />;\n        }\n        return <span onDoubleClick={this.onDblClick}>{tabTitle}</span>;\n    }\n}\n\nconst tabRender = (key, { title }) => (<div key={key} className=\"editable-tab-wrapper\">\n    <EditableTabPane defaultTitle={title} />\n</div>);\n\nReactDOM.render(<Tab defaultActiveKey=\"1\" tabRender={tabRender}>\n    <Tab.Item title=\"Double Click To Edit Me\" key=\"1\">Editable tab</Tab.Item>\n    <Tab.Item title=\"Double Click To Edit Me\" key=\"2\">Editable tab</Tab.Item>\n</Tab>, mountNode);\n","css":".editable-tab-wrapper {\n    padding: 10px;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n\n","body":"\n<p>Tab 允许开发者在上层进行自由的行为控制，例如用户可以基于 Tab 开发一个标题部分双击可编辑的 Tab ，\n此时用户只要传入自定义组件给 TabPane 即可，Tab 可以将底层事件对象传递给用户的自定义组件。</p>\n"},{"title":"超出时滑动","order":"5","jsx":"import { Tab } from '@alifd/next';\n\nconst tabs = [\n    { tab: 'Home', key: 1 },\n    { tab: 'Documnet', key: 2 },\n    { tab: 'Setting', key: 3 },\n    { tab: 'Help', key: 4 },\n    { tab: 'Admin', key: 5 },\n    { tab: 'More 1', key: 6 },\n    { tab: 'More 2', key: 7 },\n    { tab: 'More 3', key: 8 },\n    { tab: 'More 4', key: 9 },\n    { tab: 'More 5', key: 10 },\n    { tab: 'More 6', key: 11 },\n    { tab: 'More 7', key: 12 },\n    { tab: 'More 8', key: 13 },\n    { tab: 'More 9', key: 14 },\n    { tab: 'More 10', key: 15 },\n    { tab: 'More 11', key: 16 },\n];\n\nfunction onClick(key) {\n    console.log(key);\n}\n\nReactDOM.render(<div className=\"fusion-demo\" style={{ maxWidth: '520px' }}>\n    <div className=\"demo-item-title\">Dropdown mode</div>\n    <Tab excessMode=\"dropdown\">\n        {\n            tabs.map(item => <Tab.Item key={item.key} title={item.tab} onClick={onClick}>{item.tab} content, content, content</Tab.Item>)\n        }\n    </Tab>\n\n    <div className=\"demo-item-title\">Slide mode</div>\n    <Tab excessMode=\"slide\">\n        {\n            tabs.map(item => <Tab.Item key={item.key} title={item.tab} onClick={onClick}>{item.tab} content, content, content</Tab.Item>)\n        }\n    </Tab>\n</div>\n    , mountNode);\n","css":".fusion-demo .demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>当 Tab 标签非常多时，组件会自动增加滑动支持。可以用过 <code>excessMode</code> 属性切换滑动模式，该属性仅在<code>tabPosition</code>为<code>top</code>或者<code>bottom</code>时生效。</p>\n"},{"title":"附加额外内容","order":"11","jsx":"import { Tab, Button } from '@alifd/next';\n\nfunction handleChange(key) {\n    console.log(key);\n}\n\nfunction handleClick() {\n    console.log('hello world');\n}\n\nconst extraContent = <Button type=\"primary\" onClick={handleClick}>Hello world</Button>;\n\nReactDOM.render(\n    <div className=\"fusion-demo\">\n        <div className=\"demo-item-title\">Extra in Horizontal</div>\n        <Tab shape=\"wrapped\" onChange={handleChange} extra={extraContent}>\n            <Tab.Item title=\"Tab 1\" key=\"1\">Tab 1 Content</Tab.Item>\n            <Tab.Item title=\"Tab 2\" key=\"2\">Tab 2 Content</Tab.Item>\n            <Tab.Item title=\"Tab 3\" key=\"3\">Tab 3 Content</Tab.Item>\n        </Tab>\n\n        <div className=\"demo-item-title\">Extra in Vertical</div>\n        <Tab shape=\"wrapped\" tabPosition=\"left\" onChange={handleChange} extra={extraContent} contentClassName=\"custom-tab-content\">\n            <Tab.Item title=\"Tab 1\" key=\"1\">Tab 1 Content</Tab.Item>\n            <Tab.Item title=\"Tab 2\" key=\"2\">Tab 2 Content</Tab.Item>\n            <Tab.Item title=\"Tab 3\" key=\"3\">Tab 3 Content</Tab.Item>\n        </Tab>\n    </div>\n    , mountNode);\n","css":".fusion-demo .demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n}\n\n.custom-tab-content {\n    min-height: 150px;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n\n\n","body":"\n<p>通过 <code>extra</code> 属性添加附加内容，请确保只在有限选项卡的情况下才使用附加内容。</p>\n"},{"title":"按需加载和自动卸载","order":"3","jsx":"import { Tab } from '@alifd/next';\n\nconst tabs = [\n    { tab: 'Home', key: 0, content: 'This is home page' },\n    { tab: 'Document', key: 1, content: 'This is document page' },\n    { tab: 'API', key: 2, content: 'This is api page' },\n];\n\nReactDOM.render(\n    <div>\n        <div>Render all tab contents</div>\n        <Tab lazyLoad={false}>\n            {\n                tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)\n            }\n        </Tab>\n\n        <div>Unmount inactive tabs</div>\n        <Tab unmountInactiveTabs>\n            {\n                tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)\n            }\n        </Tab>\n    </div>\n    , mountNode);\n","css":".next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>默认情况 Tab 不会提前渲染好所有的内容，而是根据 Tab 的激活情况依次进行渲染。某些时候，如果你想一次渲染好所有内容，可以设置 <code>lazyLoad={false}</code> 进行关闭。此外，某些时候，如果你想每次切换选项卡时自动卸载未激活的 Tab，可以设置 <code>unmountInactiveTabs</code> 开启。</p>\n"},{"title":"选项卡嵌套","order":"14","jsx":"import { Tab } from '@alifd/next';\n\nfunction callback(key) {\n    console.log(key);\n}\n\nReactDOM.render(\n    <Tab onChange={callback} shape=\"wrapped\">\n        <Tab.Item title=\"Tab 1\" key=\"1\">\n            <Tab shape=\"wrapped\">\n                <Tab.Item title=\"1-1\" key=\"11\">1-1</Tab.Item>\n                <Tab.Item title=\"1-2\" key=\"12\">1-2</Tab.Item>\n                <Tab.Item title=\"1-3\" key=\"13\">1-3</Tab.Item>\n            </Tab>\n        </Tab.Item>\n        <Tab.Item title=\"Tab 2\" key=\"2\">\n            <Tab shape=\"pure\">\n                <Tab.Item title=\"2-1\" key=\"21\">2-1</Tab.Item>\n                <Tab.Item title=\"2-2\" key=\"22\">2-2</Tab.Item>\n                <Tab.Item title=\"3-3\" key=\"23\">2-3</Tab.Item>\n            </Tab>\n        </Tab.Item>\n        <Tab.Item title=\"Tab 3\" key=\"3\">\n            <Tab shape=\"capsule\">\n                <Tab.Item title=\"3-1\" key=\"31\">3-1</Tab.Item>\n                <Tab.Item title=\"3-2\" key=\"32\">3-2</Tab.Item>\n                <Tab.Item title=\"3-3\" key=\"33\">3-3</Tab.Item>\n            </Tab>\n        </Tab.Item>\n        <Tab.Item title=\"Tab 4\" key=\"4\">\n            <Tab shape=\"text\">\n                <Tab.Item title=\"4-1\" key=\"41\">4-1</Tab.Item>\n                <Tab.Item title=\"4-2\" key=\"42\">4-2</Tab.Item>\n                <Tab.Item title=\"4-3\" key=\"43\">4-3</Tab.Item>\n            </Tab>\n        </Tab.Item>\n    </Tab>\n    , mountNode);\n","css":".next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>可以将不同类型的选项卡进行嵌套</p>\n"},{"title":"位置","order":"4","jsx":"import { Tab, Select } from '@alifd/next';\n\nclass Demo extends React.Component {\n\n    state = {\n        position: 'top',\n    }\n\n    changePosition = (val) => {\n        this.setState({\n            position: val,\n        });\n    }\n\n    render() {\n        return (<div>\n            <Select onChange={this.changePosition} placeholder=\"Choose Positon of Tab\">\n                {\n                    ['top', 'bottom', 'left', 'right'].map(item => <Select.Option value={item} key={item}>{item}</Select.Option>)\n                }\n            </Select><br /><br />\n            <Tab tabPosition={this.state.position} shape=\"wrapped\" contentClassName=\"custom-tab-content\">\n                <Tab.Item title=\"Tab 1\" key=\"1\">Tab 1 Content</Tab.Item>\n                <Tab.Item title=\"Tab 2\" key=\"2\">Tab 2 Content</Tab.Item>\n                <Tab.Item title=\"Tab 3\" key=\"3\">Tab 3 Content</Tab.Item>\n            </Tab>\n        </div>);\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".custom-tab-content {\n    min-height: 50px;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>包裹型选项卡支持通过 <code>tabPosition</code> 属性设置选项卡的位置，支持 <code>top | right | bottom | left</code> 四个方向。</p>\n"},{"title":"形态","order":"1","jsx":"import { Tab } from '@alifd/next';\n\nfunction onChange(key) {\n    console.log(key);\n}\n\nconst tabs = [\n    { tab: 'Home', key: 'home', content: 'This is home page' },\n    { tab: 'Document', key: 'doc', content: 'This is document page' },\n    { tab: 'API', key: 'api', content: 'This is api page' },\n    { tab: 'Repo', key: 'repo', content: 'This ia repo link' },\n];\n\nconst shapes = ['pure', 'wrapped', 'text', 'capsule'];\n\nReactDOM.render(\n    <div className=\"fusion-demo\">\n        {\n            shapes.map(shape => (<div key={shape} className=\"fusion-demo-item\">\n                <Tab shape={shape} onChange={onChange}>\n                    {\n                        tabs.map(tab => <Tab.Item title={tab.tab} key={tab.key}>{tab.content}</Tab.Item>)\n                    }\n                </Tab>\n            </div>))\n        }\n    </div>\n    , mountNode);\n","css":".fusion-demo-item {\n    margin: 14px 0;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>根据使用场景及触发控件的类型，可以通过 <code>shape</code> 属性配置选项卡的类型，主要包括：</p>\n<ul>\n<li><code>pure</code> 普通选项卡（默认）</li>\n<li><code>wrapped</code>  包裹型选项卡</li>\n<li><code>text</code> 文本型选项卡</li>\n<li><code>capsule</code> 胶囊型选项卡</li>\n</ul>\n"},{"title":"尺寸","order":"2","jsx":"import { Tab } from '@alifd/next';\n\nconst tabs = [\n    { tab: 'Home', key: 'home', content: 'This is home page' },\n    { tab: 'Document', key: 'doc', content: 'This is document page' },\n    { tab: 'API', key: 'api', content: 'This is api page' },\n];\n\nReactDOM.render(\n    <div>\n        <Tab size=\"small\">\n            {tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)}\n        </Tab>\n        <br />\n        <Tab size=\"small\" shape=\"wrapped\">\n            {tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)}\n        </Tab>\n        <br />\n        <Tab size=\"small\" shape=\"text\">\n            {tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)}\n        </Tab>\n        <br />\n        <Tab size=\"small\" shape=\"capsule\">\n            {tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)}\n        </Tab>\n\n    </div>, mountNode);\n","css":".next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>组件尺寸，可以通过<code>size</code>属性设置，提供<code>medium</code>(默认)和<code>small</code>两种尺寸，\n<code>small</code>尺寸的选项卡组件可以用在弹出框等较狭窄的容器内。</p>\n"},{"title":"在 Grid 中使用 Tab","order":"13","jsx":"import { Tab, Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nconst tabs = function(length) {\n    const arr = [];\n    for (let i = 1; i < length; i++) {\n        arr.push({ tab: `tab ${i}`, key: i, content: `tab ${i} content` });\n    }\n    return arr;\n}(15);\n\nReactDOM.render(\n    <div className=\"custom-wrapper\">\n        <Row className=\"custom-row\">\n            <Col fixedSpan=\"12\" className=\"custom-col-sidebar\">Sidebar</Col>\n            <Col className=\"custom-col-content\">\n                <Tab>\n                    {\n                        tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)\n                    }\n                </Tab>\n            </Col>\n        </Row>\n    </div>\n    , mountNode);\n","css":".custom-row {\n    border: 1px solid #ccc;\n}\n\n.custom-col-sidebar {\n    border-right: 1px solid #ccc;\n    height: 130px;\n    line-height: 130px;\n    text-align: center;\n}\n\n.custom-col-content {\n    overflow: hidden;\n}\n","body":"\n<p>当 Tab 位于 Grid 组件的布局中时，由于 Grid 默认使用 <code>flex</code> 布局方式，当选项卡数量过多时，会导致内层元素撑起整个 <code>flex</code> 容器，此时需要给容器添加自定义样式 <code>overflow: hidden</code>。</p>\n"},{"title":"触发类型","order":"7","jsx":"import { Tab } from '@alifd/next';\n\nconst tabs = [\n    { tab: 'Home', key: 0, content: 'This is home page' },\n    { tab: 'Document', key: 1, content: 'This is document page' },\n    { tab: 'API', key: 2, content: 'This is api page' },\n];\n\nfunction onChange(key) {\n    console.log('change', key);\n}\n\nfunction handleClick(key) {\n    console.log('click', key);\n}\n\nfunction onMouseEnter(key, e) {\n    console.log('enter', e.target, key);\n}\n\nfunction onMouseLeave(key, e) {\n    console.log('leave', e.target, key);\n}\n\nReactDOM.render(\n    <div className=\"fusion-demo\">\n        <div className=\"demo-item-title\">Click to trigger change</div>\n        <Tab triggerType=\"click\" onChange={onChange}>\n            {\n                tabs.map(item => <Tab.Item key={item.key} title={item.tab} onClick={handleClick}>{item.content}</Tab.Item>)\n            }\n        </Tab>\n        <div className=\"demo-item-title\">Hover to trigger change</div>\n        <Tab triggerType=\"hover\" onChange={onChange}>\n            {\n                tabs.map(item => (<Tab.Item\n                    key={item.key}\n                    title={item.tab}\n                    onClick={handleClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}>\n                    {item.content}\n                </Tab.Item>))\n            }\n        </Tab>\n    </div>\n    , mountNode);\n","css":".fusion-demo .demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n","body":"\n<p>Tab 支持 <code>click</code> 切换和 <code>hover</code> 切换两种触发类型，默认为 <code>click</code> 触发，您可以使用 <code>triggerType</code> 属性修改默认的触发类型。</p>\n"}]},{"name":"Table","category":"Components","title":"表格","type":"展示","importStatement":"import { Table } from '@alifd/next';","body":"\n## 开发指南\n\nTable 负责将数据呈现为高度可定制和具备可访问性的 HTML 表格，其核心功能为将结构化的数据使用表格的方式展现，然后可以使用各种参数来向表格中加入一些特性，比如排序，过滤，滚动，锁列等。\n\n### 基本使用\n\n基本的 Table 包含行和列，使用 Table.Column 来定义列的信息，使用传入的 dataSource 属性数据来创建行。\n\n下面的代码将会创建一行两列的数据表：\n\n```js\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    </Table>, mountNode);\n```\n\n### 常见问题\n\n-   Q: 通过 `rowSelection` 开启了选择模式，为什么选择任意一个都是全选？<br/>\n      A: 给定的数据源中的属性需要有一个唯一标示该条数据的主键，默认值为id，可通过 `primaryKey` 更改 e.g.`<Table primaryKey='myId'></Table>`\n-   Q: 还是 `rowSelection` 选择模式，如何设置默认选中/禁用呢？<br/>\n      A: 通过受控模式，设置 `rowSelection` 属性的 `selectedRowKeys` 具体可搜索demo`选择可控`\n-   Q: 能用什么样的方式支持行的双击事件/设置每一行的样式？处理整行点击呢？<br/>\n      A: 通过 `getRowProps` 属性，重写行支持的原生属性，比如`className style onDoubleClick`等；通过 `onRowClick` 处理整行点击\n\n#### 列配置\n\n API。\n\n下面的代码会让`cell`根据值渲染不同的视图：\n\n```js\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nconst renderTime = value => {\n    if (value === '2016') {\n        return '今年';\n    }\n    return value;\n};\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Time\" dataIndex=\"time\" cell={renderTime}/>\n    </Table>, mountNode);\n```\n\n#### 多表头\n\n使用 Table.ColumnGroup 包裹 Table.Column 来创建有多个表头的表格。\n\n```js\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.ColumnGroup>\n            <Table.Column title=\"Id\" dataIndex=\"id\"/>\n            <Table.Column title=\"Time\" dataIndex=\"time\"/>\n        </Table.ColumnGroup>\n        <Table.ColumnGroup>\n            <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        </Table.ColumnGroup>\n    </Table>, mountNode);\n```\n\n### 已知问题\n\n#### 分组 Table 不支持在 Hover 状态和选中状态下显示背景色，无法合并单元格\n\n#### Table 锁列特性下面无法使用合并单元格功能\n\n## API\n\n### Table\n\n| 参数                  | 说明| 类型              | 默认值      |\n| ------------------- || --------------- | -------- |\n| dataSource          | 表格展示的数据源| Array           | \\[]      |\n| onRowClick          | 点击表格每一行触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>_e_: {Event} DOM事件对象                                                                                                                                                                                                                                                                                                                                                                                                                               | Function        | () => {} |\n| onRowMouseEnter     | 悬浮在表格每一行的时候触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>_e_: {Event} DOM事件对象                                                                                                                                                                                                                                                                                                                                                                                                                           | Function        | () => {} |\n| onRowMouseLeave     | 离开表格每一行的时候触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>_e_: {Event} DOM事件对象                                                                                                                                                                                                                                                                                                                                                                                                                            | Function        | () => {} |\n| onSort              | 点击列排序触发的事件<br><br>**签名**:<br>Function(dataIndex: String, order: String) => void<br>**参数**:<br>_dataIndex_: {String} 指定的排序的字段<br>_order_: {String} 排序对应的顺序, 有`desc`和`asc`两种                                                                                                                                                                                                                                                                                                                                                                                                                                             | Function        | () => {} |\n| onFilter            | 点击过滤确认按钮触发的事件<br><br>**签名**:<br>Function(filterParams: Object) => void<br>**参数**:<br>_filterParams_: {Object} 过滤的字段信息                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Function        | () => {} |\n| onResizeChange      | 重设列尺寸的时候触发的事件<br><br>**签名**:<br>Function(dataIndex: String, value: Number) => void<br>**参数**:<br>_dataIndex_: {String} 指定重设的字段<br>_value_: {Number} 列宽变动的数值                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Function        | () => {} |\n| getRowProps         | 设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。<br><br>**签名**:<br>Function(record: Object, index: Number) => Object<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>**返回值**:<br>{Object} 需要设置的行属性<br>                                                                                                                                                                                                                                                                                                                                                                                                       | Function        | () => {} |\n| getCellProps        | 设置单元格的属性，通过该属性可以进行合并单元格<br><br>**签名**:<br>Function(rowIndex: Number, colIndex: Number, dataIndex: String, record: Object) => Object<br>**参数**:<br>_rowIndex_: {Number} 该行所对应的序列<br>_colIndex_: {Number} 该列所对应的序列<br>_dataIndex_: {String} 该列所对应的字段名称<br>_record_: {Object} 该行对应的记录<br>**返回值**:<br>{Object} 返回td元素的所支持的属性对象<br>                                                                                                                                                                                                                                                                                         | Function        | () => {} |\n| hasBorder           | 表格是否具有边框| Boolean         | true     |\n| hasHeader           | 表格是否具有头部                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | Boolean         | true     |\n| isZebra             | 表格是否是斑马线| Boolean         | false    |\n| loading             | 表格是否在加载中| Boolean         | false    |\n| loadingComponent    | 自定义 Loading 组件<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | Function        | -        |\n| filterParams        | 当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:\\[]}}<br>示例:<br>假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中<br>`<Table filterParams={{id: {selectedKeys: ['one']}}}/>`                                                                                                                                                                                                                                                                                                                                                                                                                                 | Object          | -        |\n| sort                | 当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'}| Object          | -        |\n| emptyContent        | 设置数据为空的时候的表格内容展现| ReactNode       | -        |\n| primaryKey          | dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | String          | 'id'     |\n| expandedRowRender   | 额外渲染行的渲染函数<br><br>**签名**:<br>Function(record: Object, index: Number) => Element<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>**返回值**:<br>{Element} 渲染内容<br>                                                                                                                                                                                                                                                                                                                                                                                                                              | Function        | -        |\n| expandedRowIndent   | 额外渲染行的缩进| Array           | -        |\n| openRowKeys         | 默认情况下展开的渲染行或者Tree, 传入此属性为受控状态| Array           | -        |\n| hasExpandedRowCtrl  | 是否显示点击展开额外渲染行的+号按钮| Boolean         | -        |\n| getExpandedColProps | 设置额外渲染行的属性<br><br>**签名**:<br>Function() => void| Function        | -        |\n| onRowOpen           | 在额外渲染行或者Tree展开或者收起的时候触发的事件<br><br>**签名**:<br>Function(openRowKeys: Array, currentRowKey: String, expanded: Boolean, currentRecord: Object) => void<br>**参数**:<br>_openRowKeys_: {Array} 展开的渲染行的key<br>_currentRowKey_: {String} 当前点击的渲染行的key<br>_expanded_: {Boolean} 当前点击是展开还是收起<br>_currentRecord_: {Object} 当前点击额外渲染行的记录                                                                                                                                                                                                                                                                                            | Function        | -        |\n| onExpandedRowClick  | 点击额外渲染行触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>_e_: {Event} DOM事件对象                                                                                                                                                                                                                                                                                                                                                                                                                               | Function        | -        |\n| fixedHeader         | 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条| Boolean         | -        |\n| maxBodyHeight       | 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条| Number/String   | -        |\n| rowSelection        | 是否启用选择模式<br><br>**属性**:<br>_getProps_: {Function} `Function(record, index)=>Object` 获取selection的默认属性<br>_onChange_: {Function} `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。<br>_onSelect_: {Function} `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调<br>_onSelectAll_: {Function} `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调<br>_selectedRowKeys_: {Array} 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值<br>_mode_: {String} 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple` | Object          | -        |\n| stickyHeader        | 表头是否是sticky| Boolean         | -        |\n| offsetTop           | 距离窗口顶部达到指定偏移量后触发| Number          | -        |\n| affixProps          | affix组件的的属性| Object          | -        |\n| indent              | 在tree模式下的缩进尺寸， 仅在isTree为true时候有效                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | Number          | -        |\n| isTree              | 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table| Boolean         | -        |\n| useVirtual          | 是否开启虚拟滚动| Boolean         | -        |\n| rowHeight           | 设置行高| Number/Function | -        |\n| onBodyScroll        | 在内容区域滚动的时候触发的函数<br><br>**签名**:<br>Function() => void| Function        | -        |\n\n### Table.Column\n\n| 参数         | 说明                                                                                                  | 类型                              | 默认值              |\n| ---------- | --------------------------------------------------------------------------------------------------- | ------------------------------- | ---------------- |\n| dataIndex  | 指定列对应的字段，支持`a.b`形式的快速取值                                                                             | String                          | -                |\n| cell       | 行渲染的逻辑<br>value, rowIndex, record, context四个属性只可读不可被更改<br>Function(value, index, record) => Element | ReactElement/ReactNode/Function | (value) => value |\n| title      | 表头显示的内容<br>value, rowIndex, record, context四个属性只可读不可被更改                                             | ReactElement/ReactNode/Function | -                |\n| sortable   | 是否支持排序                                                                                              | Boolean                         | -                |\n| width      | 列宽，注意在锁列的情况下一定需要配置宽度                                                                                | Number/String                   | -                |\n| align      | 单元格的对齐方式<br><br>**可选值**:<br>'left', 'center', 'right'                                               | Enum                            | -                |\n| filters    | 生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`                                                        | Array&lt;Object>                | -                |\n| filterMode | 过滤的模式是单选还是多选<br><br>**可选值**:<br>'single', 'multiple'                                                | Enum                            | 'multiple'       |\n| lock       | 是否支持锁列,可选值为`left`,`right`, `true`                                                                   | Boolean/String                  | -                |\n| resizable  | 是否支持列宽调整, 当该值设为true，table的布局方式会修改为fixed.                                                            | Boolean                         | false            |\n\n### Table.ColumnGroup\n\n| 参数    | 说明      | 类型                              | 默认值            |\n| ----- | ------- | ------------------------------- | -------------- |\n| title | 表头显示的内容 | ReactElement/ReactNode/Function | 'column-group' |\n\n### Table.GroupHeader\n\n| 参数                   | 说明                          | 类型                              | 默认值      |\n| -------------------- | --------------------------- | ------------------------------- | -------- |\n| cell                 | 行渲染的逻辑                      | ReactElement/ReactNode/Function | () => '' |\n| hasChildrenSelection | 是否在Children上面渲染selection    | Boolean                         | false    |\n| hasSelection         | 是否在GroupHeader上面渲染selection | Boolean                         | true     |\n\n### Table.GroupFooter\n\n| 参数   | 说明     | 类型                              | 默认值      |\n| ---- | ------ | ------------------------------- | -------- |\n| cell | 行渲染的逻辑 | ReactElement/ReactNode/Function | () => '' |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"扩展","order":"17","jsx":"import { Table } from '@alifd/next';\nimport PropTypes from 'prop-types';\n/* eslint-disable react/no-multi-comp,react/prop-types */\nconst {Header, Cell} = Table;\nconst dataSource = () => {\n    const result = [];\n    for (let i = 0; i < 5; i++) {\n        result.push({\n            title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\n\nconst AppHeader = (props, context) => {\n    const {columns} = props;\n    const {onChange} = context;\n    const length = columns[columns.length - 1].length;\n    return (<Header {...props}>\n        <tr>\n            <Cell colSpan={length}>\n                <a onClick={() => onChange(true)} href=\"javascript:;\">Select all</a>&nbsp;\n                <a onClick={() => onChange(false)} href=\"javascript:;\">Unselect all</a>\n            </Cell>\n        </tr>\n    </Header>);\n};\n\nAppHeader.contextTypes = {\n    onChange: PropTypes.func\n};\n\nclass App extends React.Component {\n    static childContextTypes = {\n        onChange: PropTypes.func\n    }\n    state = {\n        selectedKeys: []\n    }\n    getChildContext() {\n        return {\n            onChange: this.onChange\n        };\n    }\n    dataSource = dataSource()\n    onChange = (checked) => {\n        let selectedKeys = [];\n        if (checked) {\n            selectedKeys = this.dataSource.map(item => item.id);\n        }\n        this.onRowChange(selectedKeys);\n    }\n    onRowChange = (selectedKeys) => {\n        this.setState({\n            selectedKeys\n        });\n    }\n    render() {\n        return (<span>\n            <Table dataSource={this.dataSource}\n                components={{\n                    Header: AppHeader\n                }}\n                rowSelection={{\n                    selectedRowKeys: this.state.selectedKeys,\n                    onChange: this.onRowChange\n                }}>\n                <Table.Column title=\"Id\" dataIndex=\"id\" />\n                <Table.Column title=\"Title\" dataIndex=\"title\"/>\n                <Table.Column title=\"Time\" dataIndex=\"time\"/>\n            </Table>\n        </span>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>通过Table暴露的子组件进行扩展</p>\n"},{"title":"简单","order":"0","jsx":"import { Table } from '@alifd/next';\n\nconst dataSource = () => {\n    const result = [];\n    for (let i = 0; i < 5; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\nconst render = (value, index, record) => {\n    return <a href=\"javascript:;\">Remove({record.id})</a>;\n};\nReactDOM.render(<Table dataSource={dataSource()}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    <Table.Column cell={render}/>\n</Table>, mountNode);\n","css":"","body":"\n<p>简单的表格渲染</p>\n"},{"title":"选择可控","order":"2","jsx":"import { Table, Button } from '@alifd/next';\n\nconst dataSource = (i, j) => {\n        const result = [];\n        for (let a = i; a < j; a++) {\n            result.push({\n                title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n                id: 100306660940 + a,\n                time: 2000 + a\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a href=\"javascript:;\">Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rowSelection: {\n                onChange: this.onChange.bind(this),\n                onSelect: function(selected, record, records) {\n                    console.log('onSelect', selected, record, records);\n                },\n                onSelectAll: function(selected, records) {\n                    console.log('onSelectAll', selected, records);\n                },\n                selectedRowKeys: [100306660940, 100306660941],\n                getProps: (record) => {\n                    return {\n                        disabled: record.id === 100306660941\n                    };\n                }\n            },\n            dataSource: dataSource(0, 5)\n        };\n    }\n    onChange(ids, records) {\n        const {rowSelection} = this.state;\n        rowSelection.selectedRowKeys = ids;\n        console.log('onChange', ids, records);\n        this.setState({ rowSelection });\n    }\n    clear() {\n        const {rowSelection} = this.state;\n        rowSelection.selectedRowKeys = [];\n        this.setState({ rowSelection });\n    }\n    toggleLoading() {\n        this.setState({loading: !this.state.loading});\n    }\n    changeMode() {\n        const {rowSelection} = this.state;\n        const mode = rowSelection.mode;\n        const selectedRowKeys = rowSelection.selectedRowKeys;\n        rowSelection.mode = mode === 'single' ? 'multiple' : 'single';\n        rowSelection.selectedRowKeys = selectedRowKeys.length === 1 ? selectedRowKeys : [];\n        this.setState({ rowSelection });\n    }\n    modifyDataSource() {\n        this.setState({\n            dataSource: dataSource(9, 14)\n        });\n    }\n    render () {\n        return (\n            <div>\n                <p>\n                    <Button onClick={this.clear.bind(this)}>Clear Selection</Button>&nbsp;\n                    <Button onClick={this.changeMode.bind(this)}>Change mode</Button>&nbsp;\n                    <Button onClick={this.toggleLoading.bind(this)}>Toggle loading</Button>&nbsp;\n                    <Button onClick={this.modifyDataSource.bind(this)}>Modify dataSource</Button>\n                </p>\n                <Table dataSource={this.state.dataSource}\n                    loading={this.state.loading}\n                    rowSelection={this.state.rowSelection}>\n                    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n                    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n                    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n                    <Table.Column cell={render} width={200}/>\n                </Table>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>演示全选和单选受控的功能</p>\n"},{"title":"行列合并","order":"7","jsx":"import { Table } from '@alifd/next';\n\nconst onRowClick = function (record, index, e) {\n        console.log(record, index, e);\n    },\n    dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    },\n    getCellProps = (rowIndex, colIndex) => {\n        if (rowIndex === 2 && colIndex === 1) {\n            return {\n                colSpan: 2,\n                rowSpan: 3\n            };\n        }\n        if (rowIndex === 1 && colIndex === 2) {\n            return {\n                colSpan: 2,\n                rowSpan: 1\n            };\n        }\n    };\n\nReactDOM.render(<Table dataSource={dataSource()} onRowClick={onRowClick} getCellProps={getCellProps}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    <Table.Column cell={render} width={200}/>\n</Table>, mountNode);\n","css":"","body":"\n<p>通过getCellProps进行列合并。</p>\n"},{"title":"定制列","order":"15","jsx":"import { Table, Button, Dialog, Checkbox } from '@alifd/next';\n\nconst {Group} = Checkbox;\nconst dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    cols = [{\n        title: 'id',\n        dataIndex: 'id'\n    }, {\n        title: 'Title',\n        dataIndex: 'title'\n    }, {\n        title: 'Time',\n        dataIndex: 'time'\n    }];\n\nclass App extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource(),\n            cols: cols\n        };\n    }\n    openDialog = () => {\n        Dialog.alert({\n            content: this.renderControlContent(),\n            title: 'Select columns',\n            onOk: () => {\n                this.setState({\n                    cols: this.changedCols || this.state.cols\n                });\n                return true;\n            }\n        });\n    }\n\n    renderControlContent() {\n        const groupSource = cols.map(col => {\n                return {\n                    label: col.title,\n                    value: col.dataIndex\n                };\n            }), defaultValue = this.state.cols.map(col => col.dataIndex);\n        return <Group dataSource={groupSource} onChange={this.onChange} defaultValue={defaultValue}/>;\n    }\n\n    onChange = (value) => {\n        this.changedCols = cols.filter(col => value.indexOf(col.dataIndex) > -1);\n    }\n\n    renderCols() {\n        const {cols} = this.state;\n        return cols.map(col => {\n            return <Table.Column title={col.title} dataIndex={col.dataIndex} key={col.dataIndex} />;\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <p><Button onClick={this.openDialog}> Select columns </Button></p>\n                <Table dataSource={this.state.dataSource}>\n                    {this.renderCols()}\n                </Table>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>定制显示的表格列数</p>\n"},{"title":"增删改查","order":"8","jsx":"import { Table, Button } from '@alifd/next';\n\nconst onRowClick = function(record, index, e) {\n        console.log(record, index, e);\n    },\n    dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    };\n\nclass App extends React.Component {\n    state = {\n        dataSource: dataSource()\n    }\n    onAdd = () => {\n        const {dataSource} = this.state;\n        dataSource.push({\n            title: {\n                name: 'Quotation for 1PCS Nano controller compatible',\n            },\n            id: Date.now(),\n            time: 2000\n        });\n        this.setState({\n            dataSource\n        });\n    }\n\n    onRemove = (id) => {\n        const {dataSource} = this.state;\n        let index = -1;\n        dataSource.forEach((item, i) => {\n            if (item.id === id) {\n                index = i;\n            }\n        });\n        if (index !== -1) {\n            dataSource.splice(index, 1);\n            this.setState({\n                dataSource\n            });\n        }\n    }\n\n    render() {\n        const renderOper = (value, index, record) => {\n            return <a onClick={this.onRemove.bind(this, record.id)}>Remove({record.id})</a>;\n        };\n        return (<div>\n            <p><Button onClick={this.onAdd}>Add Item</Button></p>\n            <Table dataSource={this.state.dataSource} onRowClick={onRowClick}>\n                <Table.Column title=\"Id\" dataIndex=\"id\"/>\n                <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n                <Table.Column title=\"Time\" dataIndex=\"time\"/>\n                <Table.Column cell={renderOper} width=\"20%\"/>\n            </Table>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>演示对表格的增删改查</p>\n"},{"title":"自定义 Loading 组件","order":"20","jsx":"import { Table, Loading, Icon } from '@alifd/next';\n\nconst dataSource = () => {\n    const result = [];\n    for (let i = 0; i < 5; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\n\nconst render = (value, index, record) => {\n    return <a href=\"javascript:;\">Remove({record.id})</a>;\n};\n\nconst indicator = (\n    <div>\n        <Icon type=\"loading\" />\n    </div>\n);\n\nconst CustomLoading = (props) => (\n    <Loading\n        indicator={indicator}\n        {...props}\n    />\n);\n\nReactDOM.render(\n    <Table\n        dataSource={dataSource()}\n        loading\n        loadingComponent={CustomLoading}\n    >\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n        <Table.Column title=\"Time\" dataIndex=\"time\"/>\n        <Table.Column cell={render}/>\n    </Table>,\n    mountNode\n);\n","css":"","body":"\n"},{"title":"可展开-复杂","order":"6","jsx":"import { Table, Button } from '@alifd/next';\n/*eslint-disable react/prop-types, react/no-multi-comp*/\nclass ExpandedApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: this.props.dataSource\n        };\n    }\n    load() {\n        let {dataSource} = this.state;\n        dataSource = dataSource.concat(dataSource);\n        this.setState({dataSource});\n    }\n    render() {\n        const style = {\n            borderTop: '1px solid #eee',\n            textAlign: 'center',\n            background: '#f8f8f8',\n            lineHeight: '28px'\n        };\n        return (\n            <div style={{marginTop: 10}}>\n                <Table dataSource={this.state.dataSource} hasHeader={false} hasBorder={false}>\n                    <Table.Column title=\"Title\" dataIndex=\"title\"/>\n                    <Table.Column title=\"Time\" dataIndex=\"time\" width={200}/>\n                </Table>\n                <p style={style}\n                    onClick={this.load.bind(this)}>Load more data.</p>\n            </div>\n        );\n    }\n}\n\nconst dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                id: 100306660940 + i,\n                time: 2000 + i,\n                children: [{\n                    title: `Sub title for Quotation ${3 + i}`,\n                    time: 2000 + i,\n                }, {\n                    title: `Sub2 title for Quotation ${3 + i}`,\n                    time: 2000 + i,\n                }]\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    },\n    expandedRowRender = (record) => {\n        const children = record.children;\n        return <ExpandedApp dataSource={children}/>;\n    };\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource(),\n            hasBorder: false,\n            openRowKeys: []\n        };\n    }\n    onSort(dataIndex, order) {\n        const dataSource = this.state.dataSource.sort(function(a, b) {\n            const result = a[dataIndex] - b[dataIndex];\n            return  (order === 'asc') ? (result > 0 ? 1 : -1) : (result > 0 ? -1 : 1);\n        });\n        this.setState({\n            dataSource\n        });\n    }\n    disabledExpandedCol() {\n        this.setState({\n            getExpandedColProps: (record, index) => {\n                if (index === 3) {\n                    return {\n                        disabled: true\n                    };\n                }\n            }\n        });\n    }\n    toggleCol() {\n        this.setState({\n            hasExpandedRowCtrl: false\n        });\n    }\n    onRowOpen(openRowKeys) {\n        this.setState({ openRowKeys});\n    }\n    toggleExpand(record) {\n        const key = record.id,\n            { openRowKeys } = this.state,\n            index = openRowKeys.indexOf(key);\n        if (index > -1) {\n            openRowKeys.splice(index, 1);\n        } else {\n            openRowKeys.push(key);\n        }\n        this.setState({\n            openRowKeys: openRowKeys\n        });\n    }\n    render() {\n        const renderTitle = (value, index, record) => {\n            return <div>{value}<span onClick={this.toggleExpand.bind(this, record)}>+++++</span></div>;\n        };\n        return (\n            <span>\n                <p> <Button onClick={this.disabledExpandedCol.bind(this)}> disable fourth row </Button> &nbsp;\n                    <Button onClick={this.toggleCol.bind(this)}> hide + </Button></p>\n                <Table dataSource={this.state.dataSource}\n                    isZebra={this.state.isZebra}\n                    hasBorder={this.state.hasBorder}\n                    onSort={this.onSort.bind(this)}\n                    expandedRowRender={expandedRowRender}\n                    expandedRowIndent={[1, 1]}\n                    openRowKeys={this.state.openRowKeys}\n                    getExpandedColProps={this.state.getExpandedColProps}\n                    hasExpandedRowCtrl={this.state.hasExpandedRowCtrl}\n                    onRowOpen={this.onRowOpen.bind(this)}\n                >\n                    <Table.Column title=\"Id\" dataIndex=\"id\" sortable/>\n                    <Table.Column title=\"Title\" dataIndex=\"title\" cell={renderTitle}/>\n                    <Table.Column title=\"Time\" dataIndex=\"time\" width={200}/>\n                    <Table.Column cell={render} width={200}/>\n                </Table>\n            </span>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>可以通过 <code>expandedRowRender</code> 额外渲染行，但是会包含复杂的组件</p>\n"},{"title":"可展开","order":"5","jsx":"import { Table, Button } from '@alifd/next';\n\nconst dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource()\n        };\n    }\n    onSort(dataIndex, order) {\n        const dataSource = this.state.dataSource.sort(function(a, b) {\n            const result = a[dataIndex] - b[dataIndex];\n            return  (order === 'asc') ? (result > 0 ? 1 : -1) : (result > 0 ? -1 : 1);\n        });\n        this.setState({\n            dataSource\n        });\n    }\n    toggleIndent() {\n        this.setState({\n            expandedRowIndent: [2, 1]\n        });\n    }\n    toggleCol() {\n        this.setState({\n            hasExpandedRowCtrl: false\n        });\n    }\n    render() {\n        return (<div>\n            <p>\n                <Button onClick={this.toggleIndent.bind(this)}> Update indent </Button>\n            </p>\n            <Table dataSource={this.state.dataSource}\n                isZebra={this.state.isZebra}\n                hasBorder={false}\n                onSort={this.onSort.bind(this)}\n                expandedRowRender={(record) => record.title}\n                onRowClick={() => console.log('rowClick')}\n                onExpandedRowClick={() => console.log('expandedRowClick')}\n                expandedRowIndent={this.state.expandedRowIndent}\n            >\n                <Table.Column title=\"Id\" dataIndex=\"id\" sortable/>\n                <Table.Column title=\"Title\" dataIndex=\"title\"/>\n                <Table.Column title=\"Time\" dataIndex=\"time\"/>\n                <Table.Column cell={render} width={200}/>\n            </Table>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>可以通过 <code>expandedRowRender</code> 额外渲染行</p>\n"},{"title":"排序与过滤","order":"3","jsx":"import { Table, Button } from '@alifd/next';\n\nconst dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a href=\"javascript:;\">Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource(),\n            filterMode: 'multiple'\n        };\n    }\n    onSort(dataIndex, order) {\n        const dataSource = this.state.dataSource.sort(function(a, b) {\n            const result = a[dataIndex] - b[dataIndex];\n            return  (order === 'asc') ? (result > 0 ? 1 : -1) : (result > 0 ? -1 : 1);\n        });\n        this.setState({\n            dataSource,\n            sort: {id: order}\n        });\n    }\n    onFilter(filterParams) {\n        let ds = dataSource();\n        Object.keys(filterParams).forEach(key => {\n            const selectedKeys = filterParams[key].selectedKeys;\n            if (selectedKeys.length) {\n                ds = ds.filter(record => {\n                    return selectedKeys.some(value => {\n                        return record[key].indexOf(value) > -1;\n                    });\n                });\n            }\n        });\n        this.setState({dataSource: ds});\n    }\n    changeMode() {\n        this.setState({\n            filterMode: 'single'\n        });\n    }\n    clearSort() {\n        // your code to reset dataSource\n        const newDataSource = this.state.dataSource;\n\n        this.setState({\n            dataSource: newDataSource,\n            sort: {id: ''}\n        });\n    }\n    render() {\n        const filters = [{\n            label: 'Nano 3',\n            value: 3\n        }, {\n            label: 'Nano 678',\n            value: 678,\n            children: [{\n                label: 'Nano 67',\n                value: 67,\n                children: [{\n                    label: 'Nano 6',\n                    value: 6\n                }, {\n                    label: 'Nano 7',\n                    value: 7\n                }]\n            }, {\n                label: 'Nano 8',\n                value: 8\n            }]\n        }, {\n            label: 'Other',\n            value: 'other',\n            children: [{\n                label: 'Nano 4',\n                value: 4\n            }, {\n                label: 'Nano 5',\n                value: 5\n            }]\n        }];\n        return (\n            <div>\n                <p><Button onClick={this.changeMode.bind(this)}>Change filter menu to single select</Button></p>\n                <p><Button onClick={this.clearSort.bind(this)}>clearSort</Button></p>\n                <Table dataSource={this.state.dataSource}\n                    onSort={this.onSort.bind(this)}\n                    onFilter={this.onFilter.bind(this)}>\n                    <Table.Column title=\"Id\" dataIndex=\"id\" sortable/>\n                    <Table.Column title=\"Title\" dataIndex=\"title\" filters={filters} filterMode={this.state.filterMode}/>\n                    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n                    <Table.Column cell={render} width={200}/>\n                </Table>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>示例演示了排序和过滤的特性</p>\n"},{"title":"固定表头","order":"9","jsx":"import { Table, Button } from '@alifd/next';\n\nconst dataSource = (length) => {\n    const result = [];\n    for (let i = 0; i < length; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\n\nclass App extends React.Component {\n    state = {\n        sticky: false\n    }\n    onSwitch() {\n        this.setState({\n            sticky: true\n        });\n    }\n    render() {\n        return (<div>\n            <p><Button onClick={this.onSwitch.bind(this)}>enable sticky</Button></p>\n            <Table dataSource={dataSource(50)} fixedHeader stickyHeader={this.state.sticky}>\n                <Table.Column title=\"Id\" dataIndex=\"id\"/>\n                <Table.Column title=\"Title\" dataIndex=\"title.name\"/>\n                <Table.Column title=\"Time\" dataIndex=\"time\"/>\n            </Table>\n        </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>表格可以固定表头,支持sticky方式</p>\n"},{"title":"自定义Row/Cell","order":"21","jsx":"import { Table } from '@alifd/next';\n\nconst dataSource = () => {\n    const result = [];\n    for (let i = 0; i < 5; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\n\nconst propsConf = {\n    className: 'next-myclass',\n    style: {background: 'black', color: 'white'},\n    onDoubleClick: () => {\n        console.log('doubleClicked');\n    }\n};\n\nconst setRowProps = (record, index) => {\n    if (index === 2) {\n        return propsConf;\n    }\n};\n\nconst setCellProps = (rowIndex, colIndex, dataIndex, record) => {\n    if (rowIndex === 0 && colIndex === 0) {\n        console.log(record);\n        return propsConf;\n    }\n};\n\nReactDOM.render(<Table dataSource={dataSource()} getRowProps={setRowProps} getCellProps={setCellProps}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n</Table>, mountNode);\n","css":"","body":"\n<p>可以重写部分原生属性，比如className style onDoubleClick等。</p>\n"},{"title":"分组列表","order":"10","jsx":"import { Table, Button } from '@alifd/next';\n\nconst dataSource = [{\n        price: 'US $2.45',\n        status: 0,\n        id: 1,\n        product: [{\n            title: '2014 New Fashion Novelty Tank Slim Women\\'s Fashion Dresses With Lace',\n            avatar: 'https://sc01.alicdn.com/kf/HTB1ravHKXXXXXccXVXXq6xXFXXXJ/Chinese-Style-Fashion-Custom-Digital-Print-Silk.jpg_220x220.jpg'\n        }],\n        children: [{\n            price: 'US $2.5',\n            status: 1,\n            id: 2,\n            product: [{\n                title: 'Free shipping women Casual dresses lady dress plus size 2014',\n                avatar: 'https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg'\n            }]\n        }, {\n            price: 'US $2.5',\n            status: 1,\n            id: 3,\n            product: [{\n                title: 'Free shipping women Casual dresses lady dress plus size 2014',\n                avatar: 'https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg'\n            }]\n        }]\n    }, {\n        price: 'US $2.5',\n        status: 1,\n        id: 4,\n        product: [{\n            title: 'Free shipping women Casual dresses lady dress plus size 2014',\n            avatar: 'https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg'\n        }],\n        children: [{\n            price: 'US $2.5',\n            status: 1,\n            id: 5,\n            product: [{\n                title: 'Free shipping women Casual dresses lady dress plus size 2014',\n                avatar: 'https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg'\n            }]\n        }]\n    }],\n    productRender = function(product) {\n        return (<div className=\"media\">\n            <img src={product[0].avatar} className=\"media-side\"/>\n            <div className=\"media-content\">{product[0].title}</div>\n        </div>);\n    },\n    priceRender = function(price) {\n        return <b>{price}</b>;\n    },\n    statusRender = function(status) {\n        if (status) {\n            return 'Already Priced';\n        } else {\n            return 'No Priced';\n        }\n    },\n    operRender = function() {\n        return <a href=\"javascript:;\">View</a>;\n    },\n    groupHeaderRender = function(record) {\n        return <div>{record.product[0].title}</div>;\n    },\n    rowSelection = {\n        onChange: function(selectedKeys) {\n            console.log(selectedKeys);\n        }\n    };\n\nclass App extends React.Component {\n    state = {\n        hasSelection: false\n    }\n\n    toggleGroupSelection = () => {\n        this.setState({\n            hasSelection: !this.state.hasSelection\n        });\n    }\n    render() {\n        return (\n            <div>\n                <p><Button onClick={this.toggleGroupSelection}>Toggle GroupHeader Selection</Button></p>\n                <Table dataSource={dataSource} rowSelection={rowSelection}>\n                    <Table.GroupHeader cell={groupHeaderRender} hasChildrenSelection={this.state.hasSelection}/>\n                    <Table.GroupFooter cell={groupHeaderRender}/>\n                    <Table.Column cell={productRender} title=\"Product Details\" dataIndex=\"product\"/>\n                    <Table.Column cell={priceRender} title=\"Price\" dataIndex=\"price\"  width={120}/>\n                    <Table.Column cell={statusRender} title=\"Status\" dataIndex=\"status\" width={100}/>\n                    <Table.Column cell={operRender} title=\"\" width={100}/>\n                </Table>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":".media-side{\n    width:48px;\n    height:48px;\n    float:left;\n    margin-right:10px;\n}\n.media-content{\n    overflow: hidden;\n    vertical-align: top;\n}\n.media{\n    overflow: hidden;\n}\n","body":"\n<p>分组列表展现</p>\n"},{"title":"锁列","order":"14","jsx":"import { Table, Button } from '@alifd/next';\n\nconst onRowClick = function(record, index, e) {\n        console.log(record, index, e);\n    },\n    dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 100; i++) {\n            result.push({\n                title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n    state = {\n        dataSource: [],\n        cols: [\n            <Table.Column title=\"Title\" dataIndex=\"title.name\" width={400} key=\"name1\" lock/>,\n            <Table.ColumnGroup title=\"abc\" key=\"name-group\">\n                <Table.Column title=\"Title\" dataIndex=\"title.name\" width={100} key=\"name2\"/>\n                <Table.Column title=\"Title\" dataIndex=\"title.name\" width={400} key=\"name3\"/>\n            </Table.ColumnGroup>,\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={500} key=\"time\"/>\n        ],\n        loading: true\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({\n                dataSource: dataSource(),\n                loading: false\n            });\n        }, 200);\n    }\n    reduceCol = () => {\n        this.setState({\n            cols: [ <Table.Column title=\"Title\" dataIndex=\"title.name\" width={400} key=\"name1\" lock/>,\n                <Table.Column title=\"Time\" dataIndex=\"time\" width={100} key=\"time\"/> ]\n        });\n    }\n    render() {\n        return (\n            <div>\n                <p><Button onClick={this.reduceCol}>Reduce Cols</Button></p>\n                <Table dataSource={this.state.dataSource} onRowClick={onRowClick} fixedHeader loading={this.state.loading}>\n                    <Table.Column title=\"Id-Id-Id-Id-Id-Id-Id-Id-Id-Id-Id-Id\" dataIndex=\"id\" lock width={140}/>\n                    {this.state.cols}\n                    <Table.Column cell={render} width={200}/>\n                </Table>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>演示表格锁列的功能</p>\n"},{"title":"混合模式","order":"19","jsx":"import { Table } from '@alifd/next';\n\nconst data = [{\n    key: 1,\n    name: 'a',\n    age: 32,\n    address: 'aa',\n    children: [{\n        key: 11,\n        name: 'b',\n        age: 33,\n        address: 'bb',\n    }, {\n        key: 12,\n        name: 'c',\n        age: 33,\n        address: 'cc',\n        children: [{\n            key: 121,\n            name: 'd',\n            age: 33,\n            address: 'dd',\n        }],\n    }, {\n        key: 13,\n        name: 'e',\n        age: 33,\n        address: 'ee',\n        children: [{\n            key: 131,\n            name: 'f',\n            age: 33,\n            address: 'ff',\n            children: [{\n                key: 1311,\n                name: 'g',\n                age: 33,\n                address: 'gg',\n            }, {\n                key: 1312,\n                name: 'h',\n                age: 33,\n                address: 'hh',\n            }],\n        }],\n    }],\n}, {\n    key: 2,\n    name: 'i',\n    age: 32,\n    address: 'ii',\n    children: []\n}];\n\nconst tableMixTree = (<Table dataSource={data} primaryKey=\"key\" isTree rowSelection={{onChange: () => {}}}>\n    <Table.Column title=\"Key\" dataIndex=\"key\"/>\n    <Table.Column title=\"Name\" dataIndex=\"name\"/>\n    <Table.Column title=\"Age\" dataIndex=\"age\" />\n    <Table.Column title=\"Address\" dataIndex=\"address\"/>\n</Table>);\n\nconst tableMixExpanded = (<Table dataSource={data}\n    primaryKey=\"key\"\n    expandedRowRender={(record) => record.address}\n    rowSelection={{onChange: () => {}}}>\n    <Table.Column title=\"Key\" dataIndex=\"key\"/>\n    <Table.Column title=\"Name\" dataIndex=\"name\"/>\n    <Table.Column title=\"Age\" dataIndex=\"age\" />\n    <Table.Column title=\"Address\" dataIndex=\"address\"/>\n</Table>);\n\nconst tableMixSelectionTreeLock = (<div style={{width: '500px'}}>\n    <Table dataSource={data} primaryKey=\"key\" rowSelection={{onChange: () => {}}} isTree>\n        <Table.Column title=\"Key\" dataIndex=\"key\" width={100}/>\n        <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100}/>\n        <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\"/>\n        <Table.Column title=\"Address\" dataIndex=\"address\" width={200}/>\n    </Table>\n</div>);\n\nconst tableMixLock = (<div style={{width: '500px'}}>\n    <Table dataSource={data} primaryKey=\"key\" rowSelection={{onChange: () => {}}}>\n        <Table.Column title=\"Key\" dataIndex=\"key\" width={100}/>\n        <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100}/>\n        <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\"/>\n        <Table.Column title=\"Address\" dataIndex=\"address\" width={200}/>\n    </Table>\n</div>);\n\nconst tableMixExpandedLock = (<div style={{width: '500px'}}>\n    <Table dataSource={data} primaryKey=\"key\" rowSelection={{onChange: () => {}}} expandedRowRender={(record) => record.address} expandedRowIndent={[3, 1]}>\n        <Table.Column title=\"Key\" dataIndex=\"key\" width={100}/>\n        <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100}/>\n        <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\"/>\n        <Table.Column title=\"Address\" dataIndex=\"address\" width={200}/>\n    </Table>\n</div>);\n\nconst tableMixTreeLock = (<div style={{width: '500px'}}>\n    <Table dataSource={data} primaryKey=\"key\" isTree>\n        <Table.Column title=\"Key\" dataIndex=\"key\" width={100}/>\n        <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100}/>\n        <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\"/>\n        <Table.Column title=\"Address\" dataIndex=\"address\" width={200}/>\n    </Table>\n</div>);\n\nReactDOM.render(<div className=\"mix-demo\">\n    <div className=\"row\">\n        <h4>tree & select</h4>\n        {tableMixTree}\n    </div>\n    <div className=\"row\">\n        <h4>extra & select</h4>\n        {tableMixExpanded}\n    </div>\n    <div className=\"row\">\n        <h4>tree & lock column & select</h4>\n        {tableMixSelectionTreeLock}\n    </div>\n    <div className=\"row\">\n        <h4>extra & lock column & select</h4>\n        {tableMixExpandedLock}\n    </div>\n    <div className=\"row\">\n        <h4>lock column & select</h4>\n        {tableMixLock}\n    </div>\n    <div className=\"row\">\n        <h4>tree & lock column</h4>\n        {tableMixTreeLock}\n    </div>\n</div>, mountNode);\n","css":".mix-demo .row {\n  margin-top:10px;\n}\n","body":"\n<p>演示了tree模式和rowSelection模式混合</p>\n"},{"title":"多表头","order":"12","jsx":"import { Table, Button } from '@alifd/next';\n\nconst onRowClick = function(record, index, e) {\n        console.log(record, index, e);\n    },\n    dataSource = (j) => {\n        const result = [];\n        for (let i = 0; i < j; i++) {\n            result.push({\n                title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n\n    state = {\n        dataSource: dataSource(200)\n    }\n    onClick = () => {\n        this.setState({\n            dataSource: dataSource(4)\n        });\n    }\n    render() {\n        return (\n            <div>\n                <p><Button onClick={this.onClick}>Reduce count</Button></p>\n                <Table dataSource={this.state.dataSource} onRowClick={onRowClick} fixedHeader maxBodyHeight={400}>\n                    <Table.Column title=\"Title1\" dataIndex=\"id\" width={140}/>\n                    <Table.ColumnGroup title=\"Group2-7\">\n                        <Table.Column title=\"Title2\" dataIndex=\"id\" lock width={140}/>\n                        <Table.Column title=\"Title3\" dataIndex=\"title.name\" width={200}/>\n                        <Table.ColumnGroup title=\"Group4-7\">\n                            <Table.Column title=\"Title4\" dataIndex=\"title.name\" width={400}/>\n                            <Table.Column title=\"Title5\" dataIndex=\"title.name\" width={200}/>\n                            <Table.ColumnGroup title=\"Group6-7\">\n                                <Table.Column title=\"Title6\" dataIndex=\"title.name\" width={400}/>\n                                <Table.Column title=\"Title7\" dataIndex=\"title.name\" width={200}/>\n                            </Table.ColumnGroup>\n                        </Table.ColumnGroup>\n                    </Table.ColumnGroup>\n                    <Table.ColumnGroup>\n                        <Table.Column title=\"Time\" dataIndex=\"time\" width={500}/>\n                        <Table.Column cell={render} width={200} lock=\"right\"/>\n                    </Table.ColumnGroup>\n                </Table>\n            </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>多个表头</p>\n"},{"title":"分页","order":"11","jsx":"import { Table, Pagination } from '@alifd/next';\n\nconst dataSource = (j) => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: { name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible` },\n                id: 100306660940 + i + j,\n                time: 2000 + j\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a href=\"javascript:;\">Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource(5)\n        };\n    }\n\n    onChange = (currentPage) => {\n        this.setState({\n            loading: true\n        });\n        setTimeout(() => {\n            this.setState({\n                dataSource: dataSource(currentPage * 5),\n                loading: false\n            });\n        }, 200);\n    }\n    render() {\n        return (\n            <div>\n                <Table dataSource={this.state.dataSource}\n                    loading={this.state.loading}>\n                    <Table.Column title=\"Id1\" dataIndex=\"id\" width={140} />\n                    <Table.Column title=\"Time\" dataIndex=\"time\" width={500} />\n                    <Table.Column cell={render} width={200} />\n                </Table>\n                <Pagination onChange={this.onChange} className=\"page-demo\" />\n            </div>);\n    }\n}\nReactDOM.render(<App />, mountNode);\n","css":".page-demo {\n    margin-top:10px;\n}\n","body":"\n<p>与分页结合</p>\n"},{"title":"重设列的尺寸","order":"18","jsx":"import { Table } from '@alifd/next';\n\nconst onChange = function(...args) {\n        console.log(...args);\n    },\n    dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: {\n                    name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                },\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    },\n    rowSelection = {\n        onChange: onChange,\n        getProps: (record) => {\n            return {\n                disabled: record.id === 100306660942\n            };\n        }\n    };\n\nclass App extends React.Component {\n    state = {\n        widths: {\n            id: 100,\n        }\n    }\n    onResizeChange = (dataIndex, value) => {\n        const {widths} = this.state;\n        widths[dataIndex] = widths[dataIndex] + value;\n        this.setState({\n            widths\n        });\n    }\n    render() {\n        return (<Table dataSource={dataSource()}\n            rowSelection={rowSelection} onResizeChange={this.onResizeChange}>\n            <Table.Column title=\"Id\" dataIndex=\"id\" resizable width={this.state.widths.id}/>\n            <Table.Column title=\"Title\" dataIndex=\"title.name\" width={400}/>\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={600}/>\n            <Table.Column cell={render} width={200}/>\n        </Table>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>通过onResizeChange来让列宽可以调整</p>\n"},{"title":"选择框属性","order":"4","jsx":"import { Table } from '@alifd/next';\n\nconst onChange = function(...args) {\n        console.log(...args);\n    },\n    dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: {\n                    name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                },\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    },\n    rowSelection = {\n        onChange: onChange,\n        getProps: (record) => {\n            return {\n                disabled: record.id === 100306660942\n            };\n        }\n    };\n\nReactDOM.render(<Table dataSource={dataSource()}\n    rowSelection={rowSelection}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Title\" dataIndex=\"title.name\"/>\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    <Table.Column cell={render} width={200}/>\n</Table>, mountNode);\n","css":"","body":"\n<p>通过 rowSelection.getProps 来控制选择框属性</p>\n"},{"title":"可选择","order":"1","jsx":"import { Table } from '@alifd/next';\n\nconst dataSource = () => {\n    const result = [];\n    for (let i = 0; i < 5; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\nconst render = (value, index, record) => {\n    return <a href=\"javascript:;\">Remove({record.id})</a>;\n};\nconst onChange = function(...args) {\n    console.log(args);\n};\n\nReactDOM.render(<Table dataSource={dataSource()} rowSelection={{onChange: onChange}}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    <Table.Column cell={render}/>\n</Table>, mountNode);\n","css":"","body":"\n<p>表格可选择功能</p>\n"},{"title":"样式","order":"16","jsx":"import { Table, Button } from '@alifd/next';\n\nconst dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource(),\n            className: '',\n            align: 'left'\n        };\n    }\n    toggleZebra() {\n        this.setState({\n            isZebra: !this.state.isZebra\n        });\n    }\n    toggleBorder() {\n        this.setState({\n            hasBorder: !this.state.hasBorder\n        });\n    }\n    makeBeauty() {\n        this.setState({\n            className: 'beauty'\n        });\n    }\n    makeAlign() {\n        this.setState({\n            align: 'right'\n        });\n    }\n    render() {\n        return (<span>\n            <p>\n                <Button onClick={this.toggleZebra.bind(this)}> Toggle zebra </Button> &nbsp;\n                <Button onClick={this.toggleBorder.bind(this)}> Toggle border</Button> &nbsp;\n                <Button onClick={this.makeBeauty.bind(this)}> Make second column beauty </Button> &nbsp;\n                <Button onClick={this.makeAlign.bind(this)}> Make first column align right </Button> &nbsp;\n            </p>\n            <Table dataSource={this.state.dataSource}\n                isZebra={this.state.isZebra}\n                hasBorder={this.state.hasBorder}>\n                <Table.Column title=\"Id\" dataIndex=\"id\"  align={this.state.align}/>\n                <Table.Column title=\"Title\" dataIndex=\"title\" className={this.state.className}/>\n                <Table.Column title=\"Time\" dataIndex=\"time\"/>\n                <Table.Column cell={render} width={200}/>\n            </Table>\n        </span>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":".beauty{\n  background: #f7f7f7;\n}\n","body":"\n<p>自定义表格边框</p>\n"},{"title":"虚拟滚动","order":"13","jsx":"import { Table } from '@alifd/next';\n\nconst dataSource = (j) => {\n    const result = [];\n    for (let i = 0; i < j; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: `100306660940${i}`,\n            time: 2000 + i,\n            index: i\n        });\n    }\n    return result;\n};\nconst render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n};\n\nclass App extends React.Component {\n    state = {\n        scrollToRow: 20\n    }\n    onBodyScroll = (start) => {\n        this.setState({\n            scrollToRow: start\n        });\n    }\n    render() {\n        return (<Table dataSource={dataSource(1000)} maxBodyHeight={400} useVirtual scrollToRow={this.state.scrollToRow} onBodyScroll={this.onBodyScroll}>\n            <Table.Column title=\"Id1\" dataIndex=\"id\" width={100}/>\n            <Table.Column title=\"Index\" dataIndex=\"index\" width={200}/>\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={200}/>\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={200}/>\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={200} lock=\"right\"/>\n            <Table.Column cell={render} width={200} lock/>\n        </Table>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>使用 <code>useVirtual</code> 开启虚拟滚动，<code>scrollToRow</code> 滚动到指定列</p>\n"}]},{"name":"Tag","category":"Components","title":"标签","type":"展示","importStatement":"import { Tag } from '@alifd/next';","body":"\n## Guide\n\n标签用于标记事物的属性和维度，或者可以使用标签来对一组事物分类。\n\n### 何时使用\n\n-   用于标记事物的属性和维度。\n-   进行分类。\n\n### 使用注意点\n\n1.  虽然可以设置 `size` 属性取值 `large`，但该值只是为了兼容表单场景，实际取值时 `large` 等同于 `medium`。\n2.  不建议在 Tag 中使用大段文本。\n\n API\n\n### Tag\n\n| 参数          | 说明                                                                                  | 类型       | 默认值       |\n| ----------- | ----------------------------------------------------------------------------------- | -------- | --------- |\n| size        | 标签的尺寸（large 尺寸为兼容表单场景 large = medium）<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum     | 'medium'  |\n| type        | 标签的类型<br><br>**可选值**:<br>'normal', 'primary'                                        | Enum     | 'normal'  |\n| animation   | 是否开启动效                                                                              | Boolean  | false     |\n| afterAppear | 标签出现动画结束后执行的回调<br><br>**签名**:<br>Function() => void                                 | Function | func.noop |\n| onClick     | 点击回调<br><br>**签名**:<br>Function() => void                                           | Function | func.noop |\n\n### Tag.Closeable\n\n| 参数         | 说明                                                                                                                                                                           | 类型       | 默认值 |\n| ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | --- |\n| closeArea  | closeable 标签的 onClose 响应区域, tag: 标签体, tail(默认): 关闭按钮<br><br>**可选值**:<br>'tag', 'tail'                                                                                        | Enum     | -   |\n| size       | 标签的尺寸（large 尺寸为兼容表单场景 large = medium）<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                          | Enum     | -   |\n| onClose    | 点击关闭按钮时的回调<br><br>**签名**:<br>Function(from: String) => Boolean<br>**参数**:<br>_from_: {String} 事件来源, tag: 标签体点击, tail: 关闭按钮点击<br>**返回值**:<br>{Boolean} true则关闭, false阻止关闭<br> | Function | -   |\n| afterClose | 标签关闭后执行的回调<br><br>**签名**:<br>Function() => void                                                                                                                              | Function | -   |\n| onClick    | 点击回调<br><br>**签名**:<br>Function() => void                                                                                                                                    | Function | -   |\n\n### Tag.Selectable\n\n| 参数             | 说明                                                                                                                                           | 类型       | 默认值       |\n| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------- | -------- | --------- |\n| checked        | 标签是否被选中，受控用法<br>tag checked or not, a controlled way                                                                                         | Boolean  | -         |\n| defaultChecked | 标签是否默认被选中，非受控用法<br>tag checked or not by default, a uncontrolled way                                                                         | Boolean  | -         |\n| onChange       | 选中状态变化时触发的事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>_checked_: {Boolean} 是否选中<br>_e_: {Event} Dom 事件对象 | Function | func.noop |\n| disabled       | 标签是否被禁用                                                                                                                                      | Boolean  | -         |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本用法","order":"0","jsx":"import { Tag, Icon } from '@alifd/next';\n\nconst {Group: TagGroup} = Tag;\n\nReactDOM.render(<div className=\"tag-list\">\n    <h4>large size</h4>\n    <TagGroup>\n        <Tag type=\"normal\" size=\"large\">Normal large Tag</Tag>\n        <Tag type=\"primary\" size=\"large\">Primary large Tag</Tag>\n        <Tag size=\"large\"><Icon type=\"smile\" /> Tag With Icon</Tag>\n    </TagGroup>\n\n    <h4>medium(default) size</h4>\n    <TagGroup>\n        <Tag type=\"normal\" size=\"medium\">Normal Tag</Tag>\n        <Tag type=\"primary\">Primary Tag</Tag>\n        <Tag><Icon type=\"smile\" /> Tag With Icon</Tag>\n    </TagGroup>\n\n    <h4>small size</h4>\n    <TagGroup>\n        <Tag type=\"normal\" size=\"small\">Normal Small Tag</Tag>\n        <Tag type=\"primary\" size=\"small\">Primary Small Tag</Tag>\n        <Tag size=\"small\"><Icon type=\"smile\" /> Tag With Icon</Tag>\n    </TagGroup>\n\n    <h4>link tag</h4>\n    <TagGroup>\n        <Tag type=\"normal\"><a href=\"//www.alibaba.com\" target=\"_blank\">normal Link Tag</a></Tag>\n        <Tag type=\"primary\"><a href=\"//www.alibaba.com\" target=\"_blank\">primary Link Tag</a></Tag>\n        <Tag size=\"small\"><a href=\"//www.alibaba.com\" target=\"_blank\"><Icon type=\"smile\" /> Link Tag With Icon</a></Tag>\n    </TagGroup>\n</div>,\nmountNode);\n","css":"","body":"\n<p>通过设置 <code>type</code> 属性来控制标签的展示类型，可选值包括：<code>normal</code>, <code>primary</code></p>\n<p>建议不要在标签中使用过长的文本，超出宽度的文本会使用 <code>...</code> 表示。</p>\n"},{"title":"可关闭标签","order":"2","jsx":"import { Tag } from '@alifd/next';\n\nconst {Group: TagGroup, Closeable: CloseableTag} = Tag;\n\nconst handler = from => {\n    console.log(`close from ${from}`);\n    return false;\n};\n\nclass Demo extends React.Component {\n    renderTagList (option) {\n        return [\n            <CloseableTag key={'tag-1'} type={option.type}>{option.type}</CloseableTag>,\n            <CloseableTag key={'tag-2'} type={option.type} disabled>{option.type} {' disabled '}</CloseableTag>\n        ];\n    }\n\n    renderCloseAreaTags () {\n        return ['tag', 'tail'].reduce((prev, curr) => prev.concat([\n            <CloseableTag key={`tag-${curr}-1`} closeArea={curr}>closeArea {curr}</CloseableTag>,\n            <CloseableTag key={`tag-${curr}-2`} type=\"primary\" closeArea={curr}>closeArea {curr}</CloseableTag>,\n        ]), []);\n    }\n    render() {\n        return (\n            <div className=\"tag-list\">\n                <h4>type: 'normal'</h4>\n                <TagGroup>{this.renderTagList({type: 'normal'})}</TagGroup>\n                <h4>type: 'primary'</h4>\n                <TagGroup>{this.renderTagList({type: 'primary'})}</TagGroup>\n                <h4>closeArea: ['tag', 'tail']</h4>\n                <TagGroup>\n                    {this.renderCloseAreaTags()}\n                </TagGroup>\n                <h4>close handler</h4>\n                <TagGroup>\n                    <CloseableTag onClose={() => true}> onClose allow close</CloseableTag>\n                    <CloseableTag onClose={() => false}> onClose prevent close</CloseableTag>\n                    <CloseableTag onClose={handler}> onClose from </CloseableTag>\n                    <CloseableTag afterClose={() => console.log('after close')}>after Close</CloseableTag>\n                </TagGroup>\n                <h4>closeable link tag</h4>\n                <TagGroup>\n                    <CloseableTag type=\"primary\"><a href=\"//www.alibaba.com\" target=\"_blank\">Primary Link Tag</a></CloseableTag>\n                    <CloseableTag type=\"normal\"><a href=\"//www.alibaba.com\" target=\"_blank\">normal Link Tag</a></CloseableTag>\n                </TagGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p><code>Tag.Closeable</code> 可以用于一些轻量的需要选中状态的场景。\n特别注意: closeArea=tail 以及在<code>Tag.Closeable</code>中放入a标签 都与无障碍要求不符,请谨慎使用</p>\n"},{"title":"可选中标签","order":"1","jsx":"import { Tag } from '@alifd/next';\n\nconst {Group: TagGroup, Selectable: SelectableTag} = Tag;\nconst dataSource = ['selectable tag', 'I like orange', 'small tag', 'disabled', 'disabled & checked'];\n\nclass Demo extends React.Component {\n    state = {\n        value: ['I like orange', 'disabled & checked']\n    };\n\n    handleChange(name, checked) {\n        const {value} = this.state;\n        const next = checked ? [...value, name] : value.filter(n => n !== name);\n\n        this.setState({value: next});\n    }\n\n    renderTagList(props) {\n        const {value} = this.state;\n\n        return dataSource.map((name, i) => (\n            <SelectableTag key={name}\n                checked={value.indexOf(name) > -1}\n                disabled={i > 2}\n                size={i === 2 ? 'small' : undefined}\n                onChange={this.handleChange.bind(this, name)}\n                {...props}>{name}</SelectableTag>\n        ));\n    }\n\n    render() {\n        return (\n            <div className=\"tag-list\">\n                <h4>type: 'default'</h4>\n                <TagGroup>{this.renderTagList({type: 'normal'})}</TagGroup>\n                <h4>type: 'primary'</h4>\n                <TagGroup>{this.renderTagList({type: 'primary'})}</TagGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p><code>Tag.Selectable</code> 可以用于一些轻量的需要选中状态的场景，可作为 checkbox 使用。</p>\n<p>该组件提供了受控和非受控两种用法，但强烈建议以受控方式使用。</p>\n<p>SelectableTag 继承自 Tag，所以类型(type)、大小(size)、动效(animation)等参数的用法与 Tag 保持一致。</p>\n"}]},{"name":"TimePicker","category":"Components","title":"时间选择框","type":"表单","importStatement":"import { TimePicker } from '@alifd/next';","body":"\n## Guide\n\n### 何时使用\n\n当用户需要输入一个时间，可以点击输入框，在弹出的时间选择面板上操作。时间选择面板仅支持 24 小时制。`format` 支持的时间格式如下：\n\n| 格式     | 例子      | 说明       |\n| ------ | ------- | -------- |\n| `H HH` | `0..23` | 时，24 小时制 |\n| `m mm` | `0..59` | 分        |\n| `s ss` | `0..59` | 秒        |\n\n组件默认使用 moment 实例作为输入输出值，推荐使用结合 moment 的方式使用组件。此外，组件也支持传入时间字符串的方式，例如直接传入 \"12:00:00\"。用户传入什么类型的 value/defaultValue 值，就会在 onChange 中返回相应的类型。\n\n API\n\n### TimePicker\n\n| 参数               | 说明                                                                                                                                                                | 类型        | 默认值        |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ---------- |\n| label            | 按钮的文案                                                                                                                                                             | ReactNode | -          |\n| size             | 时间选择框的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                            | Enum      | 'medium'   |\n| state            | 输入框状态<br><br>**可选值**:<br>'error', 'success'                                                                                                                       | Enum      | -          |\n| placeholder      | 输入框提示                                                                                                                                                             | String    | -          |\n| value            | 时间值（moment 对象或时间字符串，受控状态使用）                                                                                                                                       | custom    | -          |\n| defaultValue     | 时间初值（moment 对象或时间字符串，非受控状态使用）                                                                                                                                     | custom    | -          |\n| hasClear         | 是否允许清空时间                                                                                                                                                          | Boolean   | true       |\n| format           | 时间的格式<br><https://momentjs.com/docs/#/parsing/string-format/>                                                                                                     | String    | 'HH:mm:ss' |\n| hourStep         | 小时选项步长                                                                                                                                                            | Number    | -          |\n| minuteStep       | 分钟选项步长                                                                                                                                                            | Number    | -          |\n| secondStep       | 秒钟选项步长                                                                                                                                                            | Number    | -          |\n| disabledHours    | 禁用小时函数<br><br>**签名**:<br>Function(index: Number) => Boolean<br>**参数**:<br>_index_: {Number} 时 0 - 23<br>**返回值**:<br>{Boolean} 是否禁用<br>                            | Function  | -          |\n| disabledMinutes  | 禁用分钟函数<br><br>**签名**:<br>Function(index: Number) => Boolean<br>**参数**:<br>_index_: {Number} 分 0 - 59<br>**返回值**:<br>{Boolean} 是否禁用<br>                            | Function  | -          |\n| disabledSeconds  | 禁用秒钟函数<br><br>**签名**:<br>Function(index: Number) => Boolean<br>**参数**:<br>_index_: {Number} 秒 0 - 59<br>**返回值**:<br>{Boolean} 是否禁用<br>                            | Function  | -          |\n| visible          | 弹层是否显示（受控）                                                                                                                                                        | Boolean   | -          |\n| defaultVisible   | 弹层默认是否显示（非受控）                                                                                                                                                     | Boolean   | -          |\n| popupContainer   | 弹层容器<br><br>**签名**:<br>Function(target: Object) => ReactNode<br>**参数**:<br>_target_: {Object} 目标节点<br>**返回值**:<br>{ReactNode} 容器节点<br>                            | Function  | -          |\n| popupAlign       | 弹层对齐方式, 详情见Overlay 文档                                                                                                                                             | String    | 'tl tl'    |\n| popupTriggerType | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                        | Enum      | 'click'    |\n| onVisibleChange  | 弹层展示状态变化时的回调<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否隐藏和显示<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function  | func.noop  |\n| popupStyle       | 弹层自定义样式                                                                                                                                                           | Object    | -          |\n| popupClassName   | 弹层自定义样式类                                                                                                                                                          | String    | -          |\n| popupProps       | 弹层属性                                                                                                                                                              | Object    | -          |\n| disabled         | 是否禁用                                                                                                                                                              | Boolean   | false      |\n| onChange         | 时间值改变时的回调<br><br>**签名**:<br>Function(value: Object/String) => void<br>**参数**:<br>_value_: {Object/String} 时间对象或时间字符串                                              | Function  | func.noop  |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { TimePicker } from '@alifd/next';\n\nReactDOM.render(<TimePicker onChange={(val) => console.log(val)} />, mountNode);\n","css":"","body":"\n<p>最简单的用法。</p>\n"},{"title":"默认值","order":"1","jsx":"import { TimePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst defaultVal = moment('12:00:00', 'HH:mm:ss', true);\n\nReactDOM.render(<div>\n    <TimePicker defaultValue={defaultVal} onChange={(val) => console.log(val)} /><br /><br />\n    <TimePicker defaultValue=\"12:00:00\" onChange={(val) => console.log(val)} />\n</div>, mountNode);\n","css":"","body":"\n<p>可以通过 <code>defaultValue</code> 传入默认时间值，并且可以通过选择改变该值。<code>onChange</code> 回调参数的值的类型取决于 <code>defaultValue</code> 的类型。</p>\n"},{"title":"禁用时分秒","order":"3","jsx":"import { TimePicker } from '@alifd/next';\n\nconst disabledHours = [1, 2, 3, 4, 5];\nconst disabledMinutes = [10, 20, 30, 40, 50];\nconst disabledSeconds = [10, 20, 30, 40, 50];\n\nconst disabledItems = (list) => (index) => {\n    return list.indexOf(index) >= 0;\n};\n\nReactDOM.render(<div>\n    <p>Disable TimePicker</p>\n    <TimePicker disabled />\n    <p>Disable Hours/Minutes/Seconds</p>\n    <TimePicker disabledHours={disabledItems(disabledHours)} disabledMinutes={disabledItems(disabledMinutes)} disabledSeconds={disabledItems(disabledSeconds)} />\n</div>, mountNode);\n","css":"","body":"\n<p>禁用全部和禁用部分选择项</p>\n"},{"title":"结合 Field 使用","order":"6","jsx":"import { TimePicker, Field, Button } from '@alifd/next';\nimport moment from 'moment';\n\nclass Demo  extends React.Component {\n    field = new Field(this);\n\n    onClick = () => {\n        const value = this.field.getValue('time-picker');\n        console.log(value.format('HH:mm:ss'));\n    }\n\n    render() {\n        const { init } = this.field;\n\n        const props = init('time-picker', {\n            rules: [\n                { required: true, message: 'Time Required' }\n            ],\n            initValue: moment('00:00:00', 'HH:mm:ss', true),\n        });\n\n        return (<div>\n            <TimePicker {...props} /> <br /><br />\n            <Button onClick={this.onClick}>Print Value in Console</Button>\n        </div>);\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>配合 Field 使用</p>\n"},{"title":"时间格式","order":"4","jsx":"import { TimePicker } from '@alifd/next';\n\nReactDOM.render(<div>\n    <p>Hide seconds</p>\n    <TimePicker format=\"HH:mm\" />\n    <p>Hide hours</p>\n    <TimePicker format=\"mm:ss\" />\n</div>, mountNode);\n","css":"","body":"\n<p>可以通过 <code>format</code> 属性格式化时间值，此外该属性还会影响到时间列的展示。</p>\n"},{"title":"尺寸","order":"1","jsx":"import { TimePicker } from '@alifd/next';\n\n\nReactDOM.render(<div>\n    <TimePicker size=\"large\" />&nbsp;&nbsp;\n    <TimePicker />&nbsp;&nbsp;\n    <TimePicker size=\"small\" />\n</div>, mountNode);\n","css":"","body":"\n<p>TimePicker 使用和 Input 组件相同的输入框尺寸，可以通过 <code>size</code> 属性进行设置。</p>\n"},{"title":"步长","order":"5","jsx":"import { TimePicker } from '@alifd/next';\n\nReactDOM.render(<TimePicker onChange={(val) => console.log(val.format('HH:mm:ss'))} hourStep={2} minuteStep={5} secondStep={5} />, mountNode);\n","css":"","body":"\n<p>可以通过 <code>hourStep</code>, <code>minuteStep</code>, <code>secondStep</code> 分别设置时分秒的选项间隔。</p>\n"},{"title":"受控","order":"2","jsx":"import { TimePicker } from '@alifd/next';\nimport moment from 'moment';\n\nclass ControlledTimePicker extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            value: moment('12:00:00', 'HH:mm:ss', true),\n        };\n    }\n\n    onSelect = (value) => {\n        this.setState({ value });\n        this.props.onChange(value);\n    }\n\n    render() {\n        return <TimePicker value={this.state.value} onChange={this.onSelect} />;\n    }\n}\n\nReactDOM.render(<ControlledTimePicker onChange={(val) => console.log(val.format('HH:mm:ss'))} />, mountNode);\n","css":"","body":"\n<p>通过 <code>value</code> 和 <code>onChange</code> 实现受控，仅支持通过选择实现受控。</p>\n"}]},{"name":"Timeline","category":"Components","title":"时间轴","type":"展示","importStatement":"import { Timeline } from '@alifd/next';","body":"\n## Guide\n\n垂直展示的时间流信息。\n\n### 何时使用\n\n-   当有一系列信息需要从上至下按时间排列时。\n-   需要有一条时间轴进行视觉上的串联时。\n\n API\n\n### Timeline\n\n| 参数   | 说明                                                                  | 类型    | 默认值 |\n| ---- | ------------------------------------------------------------------- | ----- | --- |\n| fold | 自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]` | Array | \\[] |\n\n### Timeline.Item\n\n| 参数        | 说明                                                            | 类型        | 默认值    |\n| --------- | ------------------------------------------------------------- | --------- | ------ |\n| state     | 节点状态<br><br>**可选值**:<br>'done', 'process', 'error', 'success' | Enum      | 'done' |\n| icon      | 图标                                                            | String    | -      |\n| dot       | 自定义时间轴节点                                                      | ReactNode | -      |\n| time      | 格式化后的时间                                                       | ReactNode | -      |\n| title     | 标题                                                            | ReactNode | -      |\n| timeLeft  | 左侧时间                                                          | ReactNode | -      |\n| content   | 右侧内容                                                          | ReactNode | -      |\n| animation | 动画                                                            | Boolean   | true   |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Timeline } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\nReactDOM.render(<Timeline>\n    <TimelineItem title=\"Receipt\" state=\"process\"/>\n    <TimelineItem title=\"Ship\" />\n    <TimelineItem title=\"Order\" />\n</Timeline>, mountNode);\n","css":"","body":"\n<p>最简单的用法。</p>\n"},{"title":"内容","order":"2","jsx":"import { Timeline } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\nReactDOM.render(<Timeline>\n    <TimelineItem title=\"Sign\" content=\"[Hangzhou] has received the sign, the signer is Alibaba Post Office, thank you for using STO, looking forward to serving you again\" time={'2016-06-10 10:30:00'} state=\"process\" />\n    <TimelineItem title=\"Delivery\" content=\"[Hangzhou]Express has reached Hangzhou Hangzhou Binjiang Company\" time={'2016-06-10 09:30:00'} />\n    <TimelineItem title=\"Delivery\" content=\"[Hangzhou] Zhejiang Hangzhou Binjiang Company dispatches members for you\" time={'2016-06-10 09:03:00'} />\n    <TimelineItem title=\"Transport\" content=\"[Hangzhou] Zhejiang Hangzhou Transshipment Center has been issued\" time={'2016-06-10 06:10:00'} />\n    <TimelineItem title=\"Transport\" content=\"[Dongguan City] Guangdong Dongguan Transshipment Center has been issued\" time={'2016-06-09 18:00:00'} />\n    <TimelineItem title=\"Processing\" content=\"[Dongguan City] Shentong Express Guangdong Fenggang Branch of Guangdong Province\" time={'2016-06-09 16:12:00'} />\n    <TimelineItem title=\"Processing\" content=\"[Dongguan City] The merchant is informing the express company to insert\" time={'2016-06-09 14:00:00'} />\n    <TimelineItem title=\"Processing\" content=\"[Dongguan City] Your order to be picked\" time={'2016-06-09 10:12:19'} />\n    <TimelineItem title=\"Processing\" content=\"[Dongguan] Your order starts processing\" time={'2016-06-09 10:01:09'} icon=\"atm\"/>\n</Timeline>, mountNode);\n","css":"","body":"\n<p>带内容的用法，分别添加title，content，icon的效果。</p>\n"},{"title":"自定义时间轴节点","order":"4","jsx":"import { Timeline, Icon } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\nReactDOM.render(<Timeline>\n    <TimelineItem title=\"Receipt\" state=\"process\" icon=\"smile\"  time=\"2017-10-21\"/>\n    <TimelineItem title=\"Ship\" dot={<span  className=\"custom-node\"> 😂 </span>} state=\"success\" time=\"2017-10-22\"/>\n    <TimelineItem title=\"Order\" dot={<Icon type=\"success\" size=\"xl\" style={{ color: '#1DC11D' }}/>} content=\"Congratulations, successful orders!\" time=\"2017-10-23\"/>\n</Timeline>, mountNode);\n","css":".custom-node {\n    color: #1DC11D;\n    position: relative;\n    left: 3px;\n    font-size: 14px;\n}\n","body":"\n<p>自定义时间轴节点。</p>\n"},{"title":"折叠","order":"5","jsx":"import { Timeline, Select } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            timelineAnimation: true\n        };\n    }\n\n    onTimelineAnimation = (value) => {\n        this.setState({ timelineAnimation: value });\n    }\n\n    render() {\n        return (<div>\n            <div className=\"custom-step-option\">\n                <Select placeholder=\"Whether to start animation\" onChange={this.onTimelineAnimation} className=\"custom-select\" defaultValue>\n                    {\n                        [true, false].map((item, index) => <Select.Option value={item} key={index}>{item ? 'Animation on' : 'Animation off'}</Select.Option>)\n                    }\n                </Select>\n            </div>\n            <Timeline animation={this.state.timelineAnimation} fold={[{ foldArea: [1, 2], foldShow: false }, { foldArea: [5], foldShow: false }]}>\n                <TimelineItem title=\"Sign\" content=\"[Hangzhou] has received the sign, the signer is Alibaba Post Office, thank you for using STO, looking forward to serving you again\" time={'2016-06-10 10:30:00'} state=\"process\" />\n                <TimelineItem title=\"Delivery\" content=\"[Hangzhou]Express has reached Hangzhou Hangzhou Binjiang Company\" time={'2016-06-10 09:30:00'} />\n                <TimelineItem title=\"Delivery\" content=\"[Hangzhou] Zhejiang Hangzhou Binjiang Company dispatches members for you\" time={'2016-06-10 09:03:00'} />\n                <TimelineItem title=\"Transport\" content=\"[Hangzhou] Zhejiang Hangzhou Transshipment Center has been issued\" time={'2016-06-10 06:10:00'} />\n                <TimelineItem title=\"Transport\" content=\"[Dongguan City] Guangdong Dongguan Transshipment Center has been issued\" time={'2016-06-09 18:00:00'} />\n                <TimelineItem title=\"Processing\" content=\"[Dongguan City] Shentong Express Guangdong Fenggang Branch of Guangdong Province\" time={'2016-06-09 16:12:00'} />\n                <TimelineItem title=\"Processing\" content=\"[Dongguan City] The merchant is informing the express company to insert\" time={'2016-06-09 14:00:00'} />\n                <TimelineItem title=\"Processing\" content=\"[Dongguan City] Your order to be picked\" time={'2016-06-09 10:12:19'} />\n                <TimelineItem title=\"Processing\" content=\"[Dongguan] Your order starts processing\" time={'2016-06-09 10:01:09'} />\n            </Timeline>\n        </div>);\n    }\n}\nReactDOM.render(<Demo />, mountNode);\n","css":".custom-step-option {\n    margin-bottom: 20px;\n}\n\n","body":"\n<p>自定义折叠区域。</p>\n"},{"title":"状态","order":"1","jsx":"import { Timeline } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\nReactDOM.render(<Timeline>\n    <TimelineItem title=\"Cloudy\" time={'2016-06-10 10:30:00'} state=\"process\"/>\n    <TimelineItem title=\"Sunny\" time={'2016-06-11'} state=\"success\"/>\n    <TimelineItem title=\"Rainy\" time={'2016-06-09'} state=\"error\"/>\n</Timeline>, mountNode);\n","css":"","body":"\n<p>设置每个节点不同的状态。</p>\n"},{"title":"时间在左","order":"3","jsx":"import { Timeline } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\nReactDOM.render(<Timeline>\n    <TimelineItem title=\"Sign\" state=\"process\" timeLeft=\"2016-10-03\" />\n    <TimelineItem title=\"Ship\" timeLeft=\"2016-10-02\" />\n    <TimelineItem title=\"Order\" timeLeft=\"2016-10-01\" />\n</Timeline>, mountNode);\n","css":"","body":"\n<p>设置时间轴左边的内容。</p>\n"}]},{"name":"Transfer","category":"Components","title":"穿梭框","type":"基本","importStatement":"import { Transfer } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n用直观的方式在两栏中移动元素，完成选择行为。\n\n API\n\n### Transfer\n\n| 参数                  | 说明                                                                                                                                                                                                                                                                                                                                                                                           | 类型                  | 默认值                                                                   |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- | --------------------------------------------------------------------- |\n| mode                | 移动选项模式<br><br>**可选值**:<br>'normal', 'simple'                                                                                                                                                                                                                                                                                                                                                 | Enum                | 'normal'                                                              |\n| dataSource          | 数据源                                                                                                                                                                                                                                                                                                                                                                                          | Array&lt;Object>    | \\[]                                                                   |\n| value               | （用于受控）当前值                                                                                                                                                                                                                                                                                                                                                                                    | Array&lt;String>    | -                                                                     |\n| defaultValue        | （用于非受控）初始值                                                                                                                                                                                                                                                                                                                                                                                   | Array&lt;String>    | \\[]                                                                   |\n| onChange            | 值发生改变的时候触发的回调函数<br><br>**签名**:<br>Function(value: Array, data: Array, extra: Object) => void<br>**参数**:<br>_value_: {Array} 右面板值<br>_data_: {Array} 右面板数据<br>_extra_: {Object} 额外参数<br>_extra.leftValue_: {Array} 左面板值<br>_extra.leftData_: {Array} 左面板数据<br>_extra.movedValue_: {Array} 发生移动的值<br>_extra.movedData_: {Object} 发生移动的数据<br>_extra.direction_: {String} 移动的方向，值为'left'或'right' | Function            | -                                                                     |\n| disabled            | 是否禁用                                                                                                                                                                                                                                                                                                                                                                                         | Boolean             | false                                                                 |\n| leftDisabled        | 是否禁用左侧面板                                                                                                                                                                                                                                                                                                                                                                                     | Boolean             | false                                                                 |\n| rightDisabled       | 是否禁用右侧面板                                                                                                                                                                                                                                                                                                                                                                                     | Boolean             | false                                                                 |\n| itemRender          | 列表项渲染函数<br><br>**签名**:<br>Function(data: Object) => ReactNode<br>**参数**:<br>_data_: {Object} 数据<br>**返回值**:<br>{ReactNode} 列表项内容<br>                                                                                                                                                                                                                                                         | Function            | data => data.label                                                    |\n| showSearch          | 是否显示搜索框                                                                                                                                                                                                                                                                                                                                                                                      | Boolean             | false                                                                 |\n| filter              | 自定义搜索函数<br><br>**签名**:<br>Function(searchedValue: String, data: Object) => Boolean<br>**参数**:<br>_searchedValue_: {String} 搜索的内容<br>_data_: {Object} 数据<br>**返回值**:<br>{Boolean} 是否匹配到<br>                                                                                                                                                                                                   | Function            | 根据 label 属性匹配                                                         |\n| onSearch            | 搜索框输入时触发的回调函数<br><br>**签名**:<br>Function(searchedValue: String, position: String) => void<br>**参数**:<br>_searchedValue_: {String} 搜索的内容<br>_position_: {String} 搜索面板的位置                                                                                                                                                                                                                      | Function            | () => {}                                                              |\n| searchPlaceholder   | 搜索框占位符                                                                                                                                                                                                                                                                                                                                                                                       | String              | -                                                                     |\n| notFoundContent     | 列表为空显示内容                                                                                                                                                                                                                                                                                                                                                                                     | ReactNode           | 'Not Found'                                                           |\n| titles              | 左右面板标题                                                                                                                                                                                                                                                                                                                                                                                       | Array&lt;ReactNode> | \\[]                                                                   |\n| operations          | 向右向左移动按钮显示内容                                                                                                                                                                                                                                                                                                                                                                                 | Array&lt;ReactNode> | [&lt;Icon type=\"arrow-right\" /&gt;, &lt;Icon type=\"arrow-left\" /&gt;] |\n| defaultLeftChecked  | 左面板默认选中值                                                                                                                                                                                                                                                                                                                                                                                     | Array&lt;String>    | \\[]                                                                   |\n| defaultRightChecked | 右面板默认选中值                                                                                                                                                                                                                                                                                                                                                                                     | Array&lt;String>    | \\[]                                                                   |\n| listClassName       | 左右面板列表自定义样式类名                                                                                                                                                                                                                                                                                                                                                                                | String              | -                                                                     |\n| listStyle           | 左右面板列表自定义样式对象                                                                                                                                                                                                                                                                                                                                                                                | Object              | -                                                                     |\n| sortable            | 是否允许拖拽排序                                                                                                                                                                                                                                                                                                                                                                                     | Boolean             | false                                                                 |\n| onSort              | 拖拽排序时触发的回调函数<br><br>**签名**:<br>Function(value: Array, position: String) => void<br>**参数**:<br>_value_: {Array} 排序后的值<br>_position_: {String} 拖拽的面板位置，值为：left 或 right                                                                                                                                                                                                                         | Function            | () => {}                                                              |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return (\n            <Transfer defaultValue={['3']} dataSource={dataSource} defaultLeftChecked={['1']} onChange={this.handleChange} titles={['Title', 'Title']} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>最简单的用法。</p>\n"},{"title":"受控","order":"1","jsx":"import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ['3']\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return <Transfer value={this.state.value} dataSource={dataSource} defaultLeftChecked={['1']} onChange={this.handleChange} titles={['Title', 'Title']} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>展示受控的用法。</p>\n"},{"title":"自定义","order":"5","jsx":"import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: i % 3 === 0 ? `content${i}contentcontentcontentcontentcontent` : `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return <Transfer defaultValue={['3']} dataSource={dataSource} listStyle={{ width: '200px', height: '192px' }} defaultLeftChecked={['1']} onChange={this.handleChange} titles={['Source', 'Target']} operations={['>>', '<<']} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>展示自定义样式的用法。</p>\n"},{"title":"搜索","order":"3","jsx":"import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return <Transfer showSearch defaultValue={['3']} dataSource={dataSource} defaultLeftChecked={['1']} onChange={this.handleChange} titles={['Searchable', 'Searchable']} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>展示搜索的用法。</p>\n"},{"title":"简单模式","order":"2","jsx":"import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return <Transfer mode=\"simple\" defaultValue={['3']} dataSource={dataSource} defaultLeftChecked={['1']} onChange={this.handleChange} titles={['Simple Mode', 'Simple Mode']} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>通过设置 mode 为 &#39;simple&#39;，可以开启简单模式，点击选项即移动。</p>\n"},{"title":"拖拽排序","order":"4","jsx":"import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSort = this.handleSort.bind(this);\n    }\n\n    handleSort(value, position) {\n        console.log(value, position);\n    }\n\n    render() {\n        return <Transfer sortable defaultValue={['3']} dataSource={dataSource} onSort={this.handleSort} titles={['Sortable', 'Sortable']} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>设置 \bsortable 属性为 true 后，可拖拽排序左右面板。</p>\n"}]},{"name":"TreeSelect","category":"Components","title":"树型选择控件","type":"基本","importStatement":"import { TreeSelect } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n类似 Select 的选择控件，可选择的数据结构是一个树形结构时，可以使用 TreeSelect，例如公司层级、学科系统、分类目录等等。\n\n API\n\n### TreeSelect\n\n| 参数                      | 说明                                                                                                                                                                                                                                                       | 类型                      | 默认值         |\n| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------- | ----------- |\n| children                | 树节点                                                                                                                                                                                                                                                      | ReactNode               | -           |\n| size                    | 选择框大小<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                                                                                                      | Enum                    | 'medium'    |\n| placeholder             | 选择框占位符                                                                                                                                                                                                                                                   | String                  | -           |\n| disabled                | 是否禁用                                                                                                                                                                                                                                                     | Boolean                 | false       |\n| hasArrow                | 是否有下拉箭头                                                                                                                                                                                                                                                  | Boolean                 | true        |\n| hasBorder               | 是否有边框                                                                                                                                                                                                                                                    | Boolean                 | true        |\n| hasClear                | 是否有清空按钮                                                                                                                                                                                                                                                  | Boolean                 | false       |\n| label                   | 自定义内联 label                                                                                                                                                                                                                                              | ReactNode               | -           |\n| readOnly                | 是否只读，只读模式下可以展开弹层但不能选择                                                                                                                                                                                                                                    | Boolean                 | -           |\n| autoWidth               | 下拉框是否与选择器对齐                                                                                                                                                                                                                                              | Boolean                 | true        |\n| dataSource              | 数据源，该属性优先级高于 children                                                                                                                                                                                                                                    | Array&lt;Object>        | -           |\n| value                   | （受控）当前值                                                                                                                                                                                                                                                  | String/Array&lt;String> | -           |\n| defaultValue            | （非受控）默认值                                                                                                                                                                                                                                                 | String/Array&lt;String> | null        |\n| onChange                | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array) => void<br>**参数**:<br>_value_: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>_data_: {Object/Array} 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点 | Function                | () => {}    |\n| showSearch              | 是否显示搜索框                                                                                                                                                                                                                                                  | Boolean                 | false       |\n| onSearch                | 在搜索框中输入时触发的回调函数<br><br>**签名**:<br>Function(keyword: String) => void<br>**参数**:<br>_keyword_: {String} 输入的关键字                                                                                                                                             | Function                | () => {}    |\n| notFoundContent         | 无数据时显示内容                                                                                                                                                                                                                                                 | ReactNode               | 'Not Found' |\n| multiple                | 是否支持多选                                                                                                                                                                                                                                                   | Boolean                 | false       |\n| treeCheckable           | 下拉框中的树是否支持勾选节点的复选框                                                                                                                                                                                                                                       | Boolean                 | false       |\n| treeCheckStrictly       | 下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）                                                                                                                                                                                                                        | Boolean                 | false       |\n| treeCheckedStrategy     | 定义选中时回填的方式<br><br>**可选值**:<br>'all'(返回所有选中的节点)<br>'parent'(父子节点都选中时只返回父节点)<br>'child'(父子节点都选中时只返回子节点)                                                                                                                                                    | Enum                    | 'parent'    |\n| treeDefaultExpandAll    | 下拉框中的树是否默认展开所有节点                                                                                                                                                                                                                                         | Boolean                 | false       |\n| treeDefaultExpandedKeys | 下拉框中的树默认展开节点key的数组                                                                                                                                                                                                                                       | Array&lt;String>        | \\[]         |\n| treeLoadData            | 下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](https://fusion.design/component/tree)<br><br>**签名**:<br>Function(node: ReactElement) => void<br>**参数**:<br>_node_: {ReactElement} 被点击展开的节点                                                                        | Function                | -           |\n| treeProps               | 透传到 Tree 的属性对象                                                                                                                                                                                                                                           | Object                  | {}          |\n| defaultVisible          | 初始下拉框是否显示                                                                                                                                                                                                                                                | Boolean                 | false       |\n| visible                 | 当前下拉框是否显示                                                                                                                                                                                                                                                | Boolean                 | -           |\n| onVisibleChange         | 下拉框显示或关闭时触发事件的回调函数<br><br>**签名**:<br>Function(visible: Boolean, type: String) => void<br>**参数**:<br>_visible_: {Boolean} 是否显示<br>_type_: {String} 触发显示关闭的操作类型                                                                                            | Function                | () => {}    |\n| popupStyle              | 下拉框自定义样式对象                                                                                                                                                                                                                                               | Object                  | -           |\n| popupClassName          | 下拉框样式自定义类名                                                                                                                                                                                                                                               | String                  | -           |\n| popupContainer          | 下拉框挂载的容器节点                                                                                                                                                                                                                                               | String/Function         | -           |\n| popupProps              | 透传到 Popup 的属性对象                                                                                                                                                                                                                                          | Object                  | -           |\n\n<!-- api-extra-start -->\n\n### TreeSelect.Node\n\n| 参数               | 说明                              | 类型        | 默认值   |\n| ---------------- | ------------------------------- | --------- | ----- |\n| children         | 树节点                             | ReactNode | -     |\n| label            | 节点文本内容                          | ReactNode | '---' |\n| selectable       | 单独设置是否支持选中，覆盖 Tree 的 selectable | Boolean   | -     |\n| checkable        | 单独设置是否出现复选框，覆盖 Tree 的 checkable | Boolean   | -     |\n| editable         | 单独设置是否支持编辑，覆盖 Tree 的 editable   | Boolean   | -     |\n| draggable        | 单独设置是否支持拖拽，覆盖 Tree 的 draggable  | Boolean   | -     |\n| disabled         | 是否禁止节点响应                        | Boolean   | false |\n| checkboxDisabled | 是否禁止勾选节点复选框                     | Boolean   | false |\n| isLeaf           | 是否是叶子节点，设置loadData时生效           | Boolean   | false |\n\n### dataSource 数据结构\n\n```js\nconst dataSource = [{\n    label: '服装',\n    value: '1',\n    key: '1',\n    selectable: false,\n    children: [{\n        label: '男装',\n        value: '2',\n        key: '2',\n        children: [{\n            label: '外套',\n            value: '4',\n            key: '4',\n            disableCheckbox: true\n        }, {\n            label: '夹克',\n            value: '5',\n            key: '5',\n            disabled: true\n        }]\n    }, {\n        label: '女装',\n        value: '3',\n        key: '3',\n        children: [{\n            label: '裙子',\n            value: '6',\n            key: '6'\n        }]\n    }]\n}];\n```\n\n如果不传入 key，TreeSelect 会使用内部计算出来的位置字符串作为 key 值，如果你想指定诸如 treeDefaultExpandedKeys 这样的属性，请传入自定义的 key 值，让它和 value 是一个值，是一个很好的办法。\n\n<!-- api-extra-end -->\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { TreeSelect } from '@alifd/next';\n\nconst TreeNode = TreeSelect.Node;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data) {\n        console.log(value, data);\n    }\n\n    render() {\n        return (\n            <TreeSelect treeDefaultExpandAll onChange={this.handleChange} style={{ width: 200 }}>\n                <TreeNode key=\"1\" value=\"1\" label=\"Component\">\n                    <TreeNode key=\"2\" value=\"2\" label=\"Form\">\n                        <TreeNode key=\"4\" value=\"4\" label=\"Input\" />\n                        <TreeNode key=\"5\" value=\"5\" label=\"Select\" disabled />\n                    </TreeNode>\n                    <TreeNode key=\"3\" value=\"3\" label=\"Display\">\n                        <TreeNode key=\"6\" value=\"6\" label=\"Table\" />\n                    </TreeNode>\n                </TreeNode>\n            </TreeSelect>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>最简单的单选用法。</p>\n"},{"title":"复选框多选","order":"2","jsx":"import { TreeSelect } from '@alifd/next';\n\nconst treeData = [{\n    label: 'Component',\n    value: '1',\n    children: [{\n        label: 'Form',\n        value: '2',\n        children: [{\n            label: 'Input',\n            value: '4'\n        }, {\n            label: 'Select',\n            value: '5'\n        }]\n    }, {\n        label: 'Display',\n        value: '3',\n        children: [{\n            label: 'Table',\n            value: '6'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data) {\n        console.log(value, data);\n    }\n\n    render() {\n        return (\n            <TreeSelect treeDefaultExpandAll treeCheckable dataSource={treeData} onChange={this.handleChange} style={{ width: 200 }} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>展示复选框多选的功能。</p>\n"},{"title":"受控","order":"3","jsx":"import { TreeSelect } from '@alifd/next';\n\nconst treeData = [{\n    label: 'Component',\n    value: '1',\n    children: [{\n        label: 'Form',\n        value: '2',\n        children: [{\n            label: 'Input',\n            value: '4'\n        }, {\n            label: 'Select',\n            value: '5'\n        }]\n    }, {\n        label: 'Display',\n        value: '3',\n        children: [{\n            label: 'Table',\n            value: '6'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ['4', '6']\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data) {\n        console.log(value, data);\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <TreeSelect treeDefaultExpandAll treeCheckable dataSource={treeData} value={this.state.value} onChange={this.handleChange} style={{ width: 200 }} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>展示树选择受控的用法。</p>\n"},{"title":"使用数据直接生成","order":"1","jsx":"import { TreeSelect } from '@alifd/next';\n\nconst treeData = [{\n    label: 'Component',\n    value: '1',\n    children: [{\n        label: 'Form',\n        value: '2',\n        children: [{\n            label: 'Input',\n            value: '4'\n        }, {\n            label: 'Select',\n            value: '5',\n            disabled: true\n        }]\n    }, {\n        label: 'Display',\n        value: '3',\n        children: [{\n            label: 'Table',\n            value: '6'\n        }]\n    }]\n}];\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data) {\n        console.log(value, data);\n    }\n\n    render() {\n        return (\n            <TreeSelect treeDefaultExpandAll dataSource={treeData} onChange={this.handleChange} style={{ width: 200 }} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>使用 <code>dataSource</code> 生成树结构，除设置 label, value, key, children 属性外，还可传入 TreeNode 的其他属性，包括 selectable, disabled, checkboxDisabled, isLeaf，推荐使用 <code>dataSource</code> 而不是手动生成 <code>TreeNode</code> 的方式生成树，这样使用更简单，性能更好。</p>\n"},{"title":"搜索用法","order":"4","jsx":"import { TreeSelect } from '@alifd/next';\n\nconst treeData = [{\n    label: 'Component',\n    value: '1',\n    selectable: false,\n    children: [{\n        label: 'Form',\n        value: '2',\n        children: [{\n            label: 'Input',\n            value: '4'\n        }, {\n            label: 'Select',\n            value: '5',\n            disabled: true\n        }]\n    }, {\n        label: 'Display',\n        value: '3',\n        children: [{\n            label: 'Table',\n            value: '6'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ['4', '6']\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data) {\n        console.log(value, data);\n    }\n\n    render() {\n        return (\n            <TreeSelect treeDefaultExpandAll showSearch dataSource={treeData} onChange={this.handleChange} style={{ width: 200 }} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>展示树选择的搜索用法。</p>\n"}]},{"name":"Tree","category":"Components","title":"树形控件","type":"基本","importStatement":"import { Tree } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用`树控件`可以完整展现其中的层级关系，并具有展开收起选择等交互功能。\n\n API\n\n### Tree\n\n| 参数                  | 说明                                                                                                                                                                                                                                                                                                                                                                                                               | 类型                      | 默认值        |\n| ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------- | ---------- |\n| children            | 树节点                                                                                                                                                                                                                                                                                                                                                                                                              | ReactNode               | -          |\n| dataSource          | 数据源，该属性优先级高于 children                                                                                                                                                                                                                                                                                                                                                                                            | Array                   | -          |\n| showLine            | 是否显示树的线                                                                                                                                                                                                                                                                                                                                                                                                          | Boolean                 | false      |\n| selectable          | 是否支持选中节点                                                                                                                                                                                                                                                                                                                                                                                                         | Boolean                 | true       |\n| selectedKeys        | （用于受控）当前选中节点 key 的数组                                                                                                                                                                                                                                                                                                                                                                                             | Array&lt;String>        | -          |\n| defaultSelectedKeys | （用于非受控）默认选中节点 key 的数组                                                                                                                                                                                                                                                                                                                                                                                            | Array&lt;String>        | \\[]        |\n| onSelect            | 选中或取消选中节点时触发的回调函数<br><br>**签名**:<br>Function(selectedKeys: Array, extra: Object) => void<br>**参数**:<br>_selectedKeys_: {Array} 选中节点key的数组<br>_extra_: {Object} 额外参数<br>_extra.selectedNodes_: {Array} 选中节点的数组<br>_extra.node_: {Object} 当前操作的节点<br>_extra.selected_: {Boolean} 当前操作是否是选中                                                                                                                         | Function                | () => {}   |\n| multiple            | 是否支持多选                                                                                                                                                                                                                                                                                                                                                                                                           | Boolean                 | false      |\n| checkable           | 是否支持勾选节点的复选框                                                                                                                                                                                                                                                                                                                                                                                                     | Boolean                 | false      |\n| checkedKeys         | （用于受控）当前勾选复选框节点 key 的数组或 `{checked: Array, indeterminate: Array}` 的对象                                                                                                                                                                                                                                                                                                                                            | Array&lt;String>/Object | -          |\n| defaultCheckedKeys  | （用于非受控）默认勾选复选框节点 key 的数组                                                                                                                                                                                                                                                                                                                                                                                         | Array&lt;String>        | \\[]        |\n| checkStrictly       | 勾选节点复选框是否完全受控（父子节点选中状态不再关联）                                                                                                                                                                                                                                                                                                                                                                                      | Boolean                 | false      |\n| checkedStrategy     | 定义选中时回填的方式<br><br>**可选值**:<br>'all'(返回所有选中的节点)<br>'parent'(父子节点都选中时只返回父节点)<br>'child'(父子节点都选中时只返回子节点)                                                                                                                                                                                                                                                                                                            | Enum                    | 'all'      |\n| onCheck             | 勾选或取消勾选复选框时触发的回调函数<br><br>**签名**:<br>Function(checkedKeys: Array, extra: Object) => void<br>**参数**:<br>_checkedKeys_: {Array} 勾选复选框节点key的数组<br>_extra_: {Object} 额外参数<br>_extra.checkedNodes_: {Array} 勾选复选框节点的数组<br>_extra.checkedNodesPositions_: {Array} 包含有勾选复选框节点和其位置的对象的数组<br>_extra.indeterminateKeys_: {Array} 半选复选框节点 key 的数组<br>_extra.node_: {Object} 当前操作的节点<br>_extra.checked_: {Boolean} 当前操作是否是勾选 | Function                | () => {}   |\n| expandedKeys        | （用于受控）当前展开的节点 key 的数组                                                                                                                                                                                                                                                                                                                                                                                            | Array&lt;String>        | -          |\n| defaultExpandedKeys | （用于非受控）默认展开的节点 key 的数组                                                                                                                                                                                                                                                                                                                                                                                           | Array&lt;String>        | \\[]        |\n| defaultExpandAll    | 是否默认展开所有节点                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean                 | false      |\n| autoExpandParent    | 是否自动展开父节点                                                                                                                                                                                                                                                                                                                                                                                                        | Boolean                 | true       |\n| onExpand            | 展开或收起节点时触发的回调函数<br><br>**签名**:<br>Function(expandedKeys: Array, extra: Object) => void<br>**参数**:<br>_expandedKeys_: {Array} 展开的节点key的数组<br>_extra_: {Object} 额外参数<br>_extra.node_: {Object} 当前操作的节点<br>_extra.expanded_: {Boolean} 当前操作是否是展开                                                                                                                                                                    | Function                | () => {}   |\n| editable            | 是否支持编辑节点内容                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean                 | false      |\n| onEditFinish        | 编辑节点内容完成时触发的回调函数<br><br>**签名**:<br>Function(key: String, label: String, node: Object) => void<br>**参数**:<br>_key_: {String} 编辑节点的 key<br>_label_: {String} 编辑节点完成时节点的文本<br>_node_: {Object} 当前编辑的节点                                                                                                                                                                                                              | Function                | () => {}   |\n| draggable           | 是否支持拖拽节点                                                                                                                                                                                                                                                                                                                                                                                                         | Boolean                 | false      |\n| onDragStart         | 开始拖拽节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 拖拽的节点                                                                                                                                                                                                                                                | Function                | () => {}   |\n| onDragEnter         | 拖拽节点进入目标节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 目标节点<br>_info.expandedKeys_: {Array} 当前展开的节点key的数组                                                                                                                                                                                               | Function                | () => {}   |\n| onDragOver          | 拖拽节点在目标节点上移动的时候触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 目标节点                                                                                                                                                                                                                                         | Function                | () => {}   |\n| onDragLeave         | 拖拽节点离开目标节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 目标节点                                                                                                                                                                                                                                             | Function                | () => {}   |\n| onDragEnd           | 拖拽节点拖拽结束时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 目标节点                                                                                                                                                                                                                                               | Function                | () => {}   |\n| onDrop              | 拖拽节点放入目标节点内或前后触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 目标节点<br>_info.dragNode_: {Object} 拖拽的节点<br>_info.dragNodesKeys_: {Array} 拖拽的节点和其子节点 key 的数组<br>_info.dropPosition_: {Number} 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后                                                                                 | Function                | () => {}   |\n| canDrop             | 节点是否可被作为拖拽的目标节点<br><br>**签名**:<br>Function(info: Object) => Boolean<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.node_: {Object} 目标节点<br>_info.dragNode_: {Object} 拖拽的节点<br>_info.dragNodesKeys_: {Array} 拖拽的节点和其子节点 key 的数组<br>_info.dropPosition_: {Number} 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后<br>**返回值**:<br>{Boolean} 是否可以被当作目标节点<br>                                                                          | Function                | () => true |\n| loadData            | 异步加载数据的函数<br><br>**签名**:<br>Function(node: Object) => void<br>**参数**:<br>_node_: {Object} 被点击展开的节点                                                                                                                                                                                                                                                                                                               | Function                | -          |\n| filterTreeNode      | 按需筛选高亮节点<br><br>**签名**:<br>Function(node: Object) => Boolean<br>**参数**:<br>_node_: {Object} 待筛选的节点<br>**返回值**:<br>{Boolean} 是否被筛选中<br>                                                                                                                                                                                                                                                                           | Function                | -          |\n| onRightClick        | 右键点击节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 信息对象<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 点击的节点                                                                                                                                                                                                                                                | Function                | () => {}   |\n| isLabelBlock        | 设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助 flex 实现，暂时只支持 ie10+)                                                                                                                                                                                                                                                                                                                                                            | Boolean                 | false      |\n| isNodeBlock         | 设置节点是否占满一行                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean/Object          | false      |\n| animation           | 是否开启展开收起动画                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean                 | true       |\n\n### Tree.Node\n\n| 参数               | 说明                              | 类型        | 默认值   |\n| ---------------- | ------------------------------- | --------- | ----- |\n| children         | 树节点                             | ReactNode | -     |\n| label            | 节点文本内容                          | ReactNode | '---' |\n| selectable       | 单独设置是否支持选中，覆盖 Tree 的 selectable | Boolean   | -     |\n| checkable        | 单独设置是否出现复选框，覆盖 Tree 的 checkable | Boolean   | -     |\n| editable         | 单独设置是否支持编辑，覆盖 Tree 的 editable   | Boolean   | -     |\n| draggable        | 单独设置是否支持拖拽，覆盖 Tree 的 draggable  | Boolean   | -     |\n| disabled         | 是否禁止节点响应                        | Boolean   | false |\n| checkboxDisabled | 是否禁止勾选节点复选框                     | Boolean   | false |\n| isLeaf           | 是否是叶子节点，设置loadData时生效           | Boolean   | false |\n\n<!-- api-extra-start -->\n\n可以为 Tree.Node 设置 `key` 值：`<TreeNode key=\"102894\" label=\"女装\" />`，一般为数据的 id 值，但必需保证其全局唯一性，`key` 的默认值为 Tree 内部计算出的位置字符串。\n\n<!-- api-extra-end -->\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"基本","order":"0","jsx":"import { Tree } from '@alifd/next';\n\nconst TreeNode = Tree.Node;\n\nclass Demo extends React.Component {\n    onSelect(keys, info) {\n        console.log('onSelect', keys, info);\n    }\n\n    onCheck(keys, info) {\n        console.log('onCheck', keys, info);\n    }\n\n    onEditFinish(key, label, node) {\n        console.log('onEditFinish', key, label, node);\n    }\n\n    onRightClick(info) {\n        console.log('onRightClick', info);\n    }\n\n    render() {\n        return (\n            <Tree checkable editable\n                defaultExpandedKeys={['2']}\n                defaultCheckedKeys={['2', '4', '5']}\n                onSelect={this.onSelect}\n                onCheck={this.onCheck}\n                onEditFinish={this.onEditFinish}\n                onRightClick={this.onRightClick}>\n                <TreeNode key=\"1\" label=\"Component\">\n                    <TreeNode key=\"2\" label=\"Form\" selectable={false}>\n                        <TreeNode key=\"4\" label=\"Input\" />\n                        <TreeNode key=\"5\" label=\"Select\" disabled />\n                    </TreeNode>\n                    <TreeNode key=\"3\" label=\"Display\">\n                        <TreeNode key=\"6\" label=\"Table\" />\n                    </TreeNode>\n                </TreeNode>\n            </Tree>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>最简单的用法，展示可展开，可选中，可勾选，可编辑，可右键，禁用，禁用勾选，默认展开，默认选中，默认勾选等功能。</p>\n"},{"title":"父子节点选中是否关联","order":"5","jsx":"import { Checkbox, Tree } from '@alifd/next';\n\nconst data = [{\n    key: '0-0',\n    label: '0-0',\n    children: [{\n        key: '0-0-0',\n        label: '0-0-0',\n        children: [{\n            key: '0-0-0-0',\n            label: '0-0-0-0',\n            children: [{\n                key: '0-0-0-0-0',\n                label: '0-0-0-0-0'\n            }]\n        }, {\n            key: '0-0-0-1',\n            label: '0-0-0-1'\n        }]\n    }, {\n        key: '0-0-1',\n        label: '0-0-1',\n        children: [{\n            key: '0-0-1-0',\n            label: '0-0-1-0'\n        }, {\n            key: '0-0-1-1',\n            label: '0-0-1-1'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checkedKeys: [],\n            checkStrictly: false\n        };\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleCheckStrictly = this.handleCheckStrictly.bind(this);\n    }\n\n    handleCheck(keys, info) {\n        console.log(keys, info);\n\n        this.setState({\n            checkedKeys: keys\n        });\n    }\n\n    handleCheckStrictly() {\n        this.setState({\n            checkStrictly: !this.state.checkStrictly,\n            checkedKeys: []\n        });\n    }\n\n    render() {\n        const { checkedKeys, checkStrictly } = this.state;\n\n        return (\n            <div className=\"control-check-demo\">\n                <label className=\"strictly-check\">\n                    <Checkbox value={checkStrictly} onChange={this.handleCheckStrictly} />\n                    <span className=\"strictly-text\">Enable checkStrictly</span>\n                </label>\n                <Tree defaultExpandAll checkable checkStrictly={checkStrictly} checkedKeys={checkedKeys} onCheck={this.handleCheck} dataSource={data} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".control-check-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-check-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n<p>展示父子节点选中是否关联的用法。</p>\n"},{"title":"单选与多选","order":"4","jsx":"import { Checkbox, Tree } from '@alifd/next';\n\nconst data = [{\n    key: '0-0',\n    label: '0-0',\n    children: [{\n        key: '0-0-0',\n        label: '0-0-0',\n        children: [{\n            key: '0-0-0-0',\n            label: '0-0-0-0',\n            children: [{\n                key: '0-0-0-0-0',\n                label: '0-0-0-0-0'\n            }]\n        }, {\n            key: '0-0-0-1',\n            label: '0-0-0-1'\n        }]\n    }, {\n        key: '0-0-1',\n        label: '0-0-1',\n        children: [{\n            key: '0-0-1-0',\n            label: '0-0-1-0'\n        }, {\n            key: '0-0-1-1',\n            label: '0-0-1-1'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedKeys: [],\n            multiple: false\n        };\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleCheck = this.handleCheck.bind(this);\n    }\n\n    handleSelect(keys, info) {\n        console.log(keys, info);\n\n        this.setState({\n            selectedKeys: keys\n        });\n    }\n\n    handleCheck() {\n        this.setState({\n            multiple: !this.state.multiple,\n            selectedKeys: []\n        });\n    }\n\n    render() {\n        const { multiple, selectedKeys } = this.state;\n\n        return (\n            <div className=\"control-select-demo\">\n                <label className=\"multiple-check\">\n                    <Checkbox value={multiple} onChange={this.handleCheck} />\n                    <span className=\"multiple-text\">Enable multiple</span>\n                </label>\n                <Tree defaultExpandAll multiple={multiple} selectedKeys={selectedKeys} onSelect={this.handleSelect} dataSource={data} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":".control-select-demo .multiple-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-select-demo .multiple-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n","body":"\n<p>展示单选与多选的用法。</p>\n"},{"title":"使用数据直接生成","order":"1","jsx":"import { Tree } from '@alifd/next';\n\nconst data = [{\n    label: 'Component',\n    key: '1',\n    children: [{\n        label: 'Form',\n        key: '2',\n        selectable: false,\n        children: [{\n            label: 'Input',\n            key: '4'\n        }, {\n            label: 'Select',\n            key: '5',\n            disabled: true\n        }]\n    }, {\n        label: 'Display',\n        key: '3',\n        children: [{\n            label: 'Table',\n            key: '6'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    onSelect(keys, info) {\n        console.log('onSelect', keys, info);\n    }\n\n    onCheck(keys, info) {\n        console.log('onCheck', keys, info);\n    }\n\n    onEditFinish(key, label, node) {\n        console.log('onEditFinish', key, label, node);\n    }\n\n    onRightClick(info) {\n        console.log('onRightClick', info);\n    }\n\n    render() {\n        return (\n            <Tree checkable editable\n                defaultExpandedKeys={['2']}\n                defaultCheckedKeys={['2', '4', '5']}\n                onSelect={this.onSelect}\n                onCheck={this.onCheck}\n                onEditFinish={this.onEditFinish}\n                onRightClick={this.onRightClick}\n                dataSource={data} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>使用 dataSource 生成树结构，除设置 key, label, children 属性外，还可传入 TreeNode 的其他属性，包括 selectable，disabled，checkable, checkboxDisabled, isLeaf 等。</p>\n"},{"title":"拖动","order":"8","jsx":"import { Tree } from '@alifd/next';\n\nconst TreeNode = Tree.Node;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n    const preKey = _preKey || '0';\n    const tns = _tns || gData;\n\n    const children = [];\n    for (let i = 0; i < x; i++) {\n        const key = `${preKey}-${i}`;\n        tns.push({ label: key, key });\n        if (i < y) {\n            children.push(key);\n        }\n    }\n    if (_level < 0) {\n        return tns;\n    }\n    const level = _level - 1;\n    children.forEach((key, index) => {\n        tns[index].children = [];\n        return generateData(level, key, tns[index].children);\n    });\n};\ngenerateData(z);\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gData\n        };\n    }\n\n    onDrop(info) {\n        const dragKey = info.dragNode.props.eventKey;\n        const dropKey = info.node.props.eventKey;\n        const dropPosition = info.dropPosition;\n        const loop = (data, key, callback) => {\n            data.forEach((item, index, arr) => {\n                if (item.key === key) {\n                    return callback(item, index, arr);\n                }\n                if (item.children) {\n                    return loop(item.children, key, callback);\n                }\n            });\n        };\n        const data = [...this.state.gData];\n        let dragObj;\n        loop(data, dragKey, (item, index, arr) => {\n            arr.splice(index, 1);\n            dragObj = item;\n        });\n        if (info.dropPosition === 0) {\n            loop(data, dropKey, (item) => {\n                item.children = item.children || [];\n                item.children.push(dragObj);\n            });\n        } else {\n            let ar;\n            let i;\n            loop(data, dropKey, (item, index, arr) => {\n                ar = arr;\n                i = index;\n            });\n            if (dropPosition === -1) {\n                ar.splice(i, 0, dragObj);\n            } else {\n                ar.splice(i + 1, 0, dragObj);\n            }\n        }\n        this.setState({\n            gData: data,\n        });\n    }\n    render() {\n        const loop = data => data.map(item => {\n            if (item.children) {\n                return <TreeNode key={item.key} label={item.key}>{loop(item.children)}</TreeNode>;\n            }\n            return <TreeNode key={item.key} label={item.key} />;\n        });\n\n        return (\n            <Tree draggable selectable={false} isLabelBlock defaultExpandedKeys={['0-0', '0-0-0', '0-0-0-0']} onDrop={this.onDrop.bind(this)}>\n                {loop(this.state.gData)}\n            </Tree>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>将节点拖拽到其他节点内部或前后。</p>\n"},{"title":"异步加载数据","order":"7","jsx":"import { Tree } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [\n                { label: 'Expand to load', key: '0', },\n                { label: 'Expand to load', key: '1' },\n                { label: 'Leaf', key: '2', isLeaf: true }\n            ]\n        };\n\n        this.onLoadData = this.onLoadData.bind(this);\n    }\n\n    onLoadData(node) {\n        return new Promise(resolve => {\n            if (node.props.children) {\n                return resolve();\n            }\n\n            const { eventKey, pos } = node.props;\n            const item = this.getItemByPos(pos);\n            setTimeout(() => {\n                item.children = [\n                    { label: 'Child Tree', key: `${eventKey}-0` },\n                    { label: 'Child Tree', key: `${eventKey}-1` }\n                ];\n                this.setState({\n                    data: [...this.state.data]\n                });\n                resolve();\n            }, 1000);\n        });\n    }\n\n    getItemByPos(pos) {\n        return pos.split('-').slice(1).reduce((ret, num) => ret.children[num], { children: this.state.data });\n    }\n\n    render() {\n        return (\n            <Tree dataSource={this.state.data} loadData={this.onLoadData} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>点击展开节点，动态加载数据。</p>\n"},{"title":"带线样式","order":"2","jsx":"import { Tree } from '@alifd/next';\n\nconst TreeNode = Tree.Node;\n\nReactDOM.render(\n    <Tree defaultExpandAll showLine>\n        <TreeNode label=\"Trunk\">\n            <TreeNode label=\"Branch\">\n                <TreeNode label=\"Branch\">\n                    <TreeNode label=\"Leaf\" />\n                </TreeNode>\n                <TreeNode label=\"Leaf\" />\n            </TreeNode>\n            <TreeNode label=\"Branch\">\n                <TreeNode label=\"Leaf\" />\n                <TreeNode label=\"Leaf\" />\n            </TreeNode>\n        </TreeNode>\n    </Tree>, mountNode);\n","css":"","body":"\n<p>展示Tree组件带线的样式外观。</p>\n"},{"title":"树节点占满一行","order":"3","jsx":"import { Tree } from '@alifd/next';\n\nconst TreeNode = Tree.Node;\n\nReactDOM.render(\n    <Tree defaultExpandAll isNodeBlock={{ defaultPaddingLeft: 50 }} defaultSelectedKeys={['1']} style={{ width: '300px' }}>\n        <TreeNode label=\"Component\" key=\"0\">\n            <TreeNode label=\"Form\" key=\"1\" disabled>\n                <TreeNode label=\"Select\" key=\"2\">\n                    <TreeNode label=\"TreeSelect\" key=\"3\" />\n                </TreeNode>\n                <TreeNode label=\"Input\" key=\"4\" />\n            </TreeNode>\n            <TreeNode label=\"Display\" key=\"5\">\n                <TreeNode label=\"Card\" key=\"6\" />\n                <TreeNode label=\"Table\" key=\"7\" />\n            </TreeNode>\n        </TreeNode>\n    </Tree>, mountNode);\n","css":"","body":"\n<p>可以通过设置 isNodeBlock 为 true，来让树节点占满一行，isNodeBlock 也可传入一个对象，支持设置 defaultPaddingLeft（默认的左内边距）和 indent （缩进距离），另外注意 showLine \b在开启 isNodeBlock 时失效。</p>\n"},{"title":"可搜索的树","order":"6","jsx":"import { Search, Tree } from '@alifd/next';\n\nconst data = [{\n    label: 'Component',\n    key: '1',\n    children: [{\n        label: 'Form',\n        key: '2',\n        children: [{\n            label: 'Input',\n            key: '4'\n        }, {\n            label: 'Select',\n            key: '5'\n        }]\n    }, {\n        label: 'Display',\n        key: '3',\n        children: [{\n            label: 'Table',\n            key: '6'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            expandedKeys: ['2'],\n            autoExpandParent: true\n        };\n        this.matchedKeys = [];\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleExpand = this.handleExpand.bind(this);\n    }\n\n    handleSearch(value) {\n        value = value.trim();\n        if (!value) {\n            this.matchedKeys = null;\n            return;\n        }\n\n        const matchedKeys = [];\n        const loop = data => data.forEach(item => {\n            if (item.label.indexOf(value) > -1) {\n                matchedKeys.push(item.key);\n            }\n            if (item.children && item.children.length) {\n                loop(item.children);\n            }\n        });\n        loop(data);\n\n        this.setState({\n            expandedKeys: [...matchedKeys],\n            autoExpandParent: true\n        });\n        this.matchedKeys = matchedKeys;\n    }\n\n    handleExpand(keys) {\n        this.setState({\n            expandedKeys: keys,\n            autoExpandParent: false\n        });\n    }\n\n    render() {\n        const { expandedKeys, autoExpandParent } = this.state;\n        const filterTreeNode = node => {\n            return this.matchedKeys && this.matchedKeys.indexOf(node.props.eventKey) > -1;\n        };\n\n        return (\n            <div>\n                <Search shape=\"simple\" size=\"medium\" style={{ width: '200px', marginBottom: '10px' }} onChange={this.handleSearch} />\n                <Tree expandedKeys={expandedKeys} autoExpandParent={autoExpandParent} filterTreeNode={filterTreeNode} onExpand={this.handleExpand} dataSource={data} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n","css":"","body":"\n<p>展示可搜索的树。</p>\n"}]},{"name":"Upload","category":"Components","title":"上传组件","type":"表单","importStatement":"import { Upload } from '@alifd/next';","body":"\n## 开发指南\n\n### 何时使用\n\n用户根据提示将自己本地的相应信息(包含本地和云储存)上传到网站，上传组件可以帮助用户对上传过程和上传结果有预期，并可以更改或撤销上传行为。\n\n API\n\n### Upload\n\n| 参数              | 说明                                                                                                                                                                                                                                            | 类型              | 默认值       |\n| --------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- | --------- |\n| listType        | 上传列表的样式<br><br>**可选值**:<br>'text'(文字)<br>'image'(图文)<br>'card'(卡片)                                                                                                                                                                            | Enum            | -         |\n| shape           | 上传按钮形状<br><br>**可选值**:<br>'card'                                                                                                                                                                                                              | Enum            | -         |\n| value           | 文件列表                                                                                                                                                                                                                                          | Array           | -         |\n| onRemove        | 移除文件回调函数，详见 [onRemove](#onRemove)<br><br>**签名**:<br>Function() => void                                                                                                                                                                        | Function        | func.noop |\n| onCancel        | 取消上传回调(支持Promise)<br><br>**签名**:<br>Function() => void                                                                                                                                                                                        | Function        | func.noop |\n| onImageError    | 头像加载出错回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                 | Function        | func.noop |\n| onPreview       | listType=card时点击图片回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                                     | Function        | func.noop |\n| extraRender     | 自定义额外渲染<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                  | Function        | func.noop |\n| children        | 子元素                                                                                                                                                                                                                                           | ReactNode       | -         |\n| action          | 上传的地址                                                                                                                                                                                                                                         | String          | -         |\n| accept          | 接受上传的文件类型 (image/png, image/jpg, .doc, .ppt) 详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)                                                                                         | String          | -         |\n| data            | 上传额外传参                                                                                                                                                                                                                                        | Object/Function | -         |\n| headers         | 设置上传的请求头部                                                                                                                                                                                                                                     | Object          | -         |\n| withCredentials | 是否允许请求携带 cookie                                                                                                                                                                                                                               | Boolean         | true      |\n| beforeUpload    | 可选参数, 详见 [beforeUpload](#beforeUpload)<br><br>**签名**:<br>Function(files: Object, options: Object) => Boolean/Object/Promise<br>**参数**:<br>_files_: {Object} null<br>_options_: {Object} null<br>**返回值**:<br>{Boolean/Object/Promise} null<br> | Function        | func.noop |\n| onProgress      | 上传中<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                      | Function        | func.noop |\n| onSuccess       | 可选参数，上传成功回调函数，参数为请求下响应信息以及文件<br><br>**签名**:<br>Function() => void                                                                                                                                                                             | Function        | func.noop |\n| onError         | 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件<br><br>**签名**:<br>Function() => void                                                                                                                                                                        | Function        | func.noop |\n| timeout         | 设置上传超时,单位ms                                                                                                                                                                                                                                   | Number          | -         |\n| method          | 上传方法<br><br>**可选值**:<br>'post', 'put'                                                                                                                                                                                                         | Enum            | 'post'    |\n| onSelect        | 选择文件回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                   | Function        | func.noop |\n| onDrop          | 放文件<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                      | Function        | func.noop |\n| defaultValue    | 默认文件列表                                                                                                                                                                                                                                        | Array           | -         |\n| formatter       | 数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)<br><br>**签名**:<br>Function(response: Object, file: File) => void<br>**参数**:<br>_response_: {Object} 返回<br>_file_: {File} 文件对象                                                   | Function        | -         |\n| limit           | 最大文件上传个数                                                                                                                                                                                                                                      | Number          | Infinity  |\n| dragable        | 可选参数，是否支持拖拽上传，`ie10+` 支持。                                                                                                                                                                                                                     | Boolean         | -         |\n| disabled        | 可选参数，是否禁用上传功能                                                                                                                                                                                                                                 | Boolean         | -         |\n| onChange        | 上传文件改变时的状态<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 文件事件对象                                                                                                                                             | Function        | func.noop |\n| autoUpload      | 自动上传                                                                                                                                                                                                                                          | Boolean         | true      |\n| afterSelect     | 可选参数, 用于校验文件,afterSelect仅在 autoUpload=false 的时候生效,autoUpload=true时,可以使用beforeUpload完全可以替代该功能.<br><br>**签名**:<br>Function(file: Object) => Boolean<br>**参数**:<br>_file_: {Object} null<br>**返回值**:<br>{Boolean} 返回false会阻止上传,其他则表示正常<br>       | Function        | func.noop |\n\n### Upload.Card\n\n> 继承 Upload 的 API，除非特别说明\n\n| 参数        | 说明                                           | 类型       | 默认值       |\n| --------- | -------------------------------------------- | -------- | --------- |\n| onPreview | 点击图片回调<br><br>**签名**:<br>Function() => void  | Function | func.noop |\n| onChange  | 改变时候的回调<br><br>**签名**:<br>Function() => void | Function | func.noop |\n| onRemove  | 点击移除的回调<br><br>**签名**:<br>Function() => void | Function | -         |\n| onCancel  | 取消上传的回调<br><br>**签名**:<br>Function() => void | Function | -         |\n\n### Upload.Drager\n\n> IE10+ 支持。继承 Upload 的 API，除非特别说明\n\n### Upload.Selecter\n\n> [底层能力] 可自定义样式的文件选择器\n\n| 参数          | 说明                                                                                                                                                    | 类型       | 默认值       |\n| ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | --------- |\n| disabled    | 是否禁用上传功能                                                                                                                                              | Boolean  | -         |\n| multiple    | 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件                                                                                                                | Boolean  | false     |\n| dragable    | 是否支持拖拽上传，`ie10+` 支持。                                                                                                                                  | Boolean  | -         |\n| accept      | 接受上传的文件类型 (image/png, image/jpg, .doc, .ppt) 详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept) | String   | -         |\n| onSelect    | 文件选择回调<br><br>**签名**:<br>Function() => void                                                                                                           | Function | func.noop |\n| onDragOver  | 拖拽经过回调<br><br>**签名**:<br>Function() => void                                                                                                           | Function | func.noop |\n| onDragLeave | 拖拽离开回调<br><br>**签名**:<br>Function() => void                                                                                                           | Function | func.noop |\n| onDrop      | 拖拽完成回调<br><br>**签名**:<br>Function() => void                                                                                                           | Function | func.noop |\n\n## Method\n\n### Upload.Uploader\n\n> [底层能力] 文件上传核心功能\n> let uploader = new Upload.Uploader([options]);\n\n#### options\n\n| 参数              | 说明                                                                     | 类型              | 默认值   |\n| --------------- | ---------------------------------------------------------------------- | --------------- | ----- |\n| action          | 上传的地址                                                                  | String          | -     |\n| data            | 上传额外传参                                                                 | Object/Function | -     |\n| headers         | 设置上传的请求头部                                                              | Object          | -     |\n| withCredentials | 是否允许请求携带 cookie                                                        | Boolean         | false |\n| onProgress      | 上传中<br><br>**签名**:<br>Function() => void                               | Function        | noop  |\n| onSuccess       | 上传成功回调函数，参数为请求下响应信息以及文件<br><br>**签名**:<br>Function() => void           | Function        | noop  |\n| onError         | 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件<br><br>**签名**:<br>Function() => void | Function        | noop  |\n\n### onChange 返回结构\n\n        {\n          uid: 'uid',       // 文件唯一标识\n          name: 'xx.png'    // 文件名\n          state: 'done',    // 状态有：selected uploading done error\n          response: {\"success\":true}  // 服务端响应内容\n          url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n          imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg', // 头像(可选)\n          downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'   // 下载(可选)\n        }\n\n### 接口 response 返回数据格式要求\n\n        {\n          \"success\": true,\n          \"message\": \"上传成功\",                                  // success=false 时候可以展示错误\n          \"url\": \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"             // 返回结果\n          \"imgURL\": \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",         // 图片预览地址 (非必须)\n          \"downloadURL\": \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",    // 文件下载地址 (非必须)\n        }\n\n### 后端数据格式化\n\n通过 `formatter` 将来自后端的不规则数据转换为符合组件要求的数据格式\n\n-   `假设` 服务器的响应数据如下\n\n\n        {\n          \"status\": \"success\",                              // 上传成功返回码\n          \"img_src\": \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",   // 图片链接\n        }\n\n-   转换方法\n\n\n        <Upload\n          action=\"http://127.0.0.1:3001/upload\"\n          formatter={(res, file) => {\n            // 函数里面根据当前服务器返回的响应数据\n            // 重新拼装符合组件要求的数据格式\n            return {\n              success: res.status === 'success',\n              url: res.img_src,\n            }\n          }}\n        />\n\n## Upload 服务端代码样例\n\nNext Upload组件上传文件使用的`multipart/form-data`方式上传文件,具体实现是在支持`FormData`对象的浏览器中使用xhr对象发送formdata。在不支持`FormData`对象的浏览器如IE9, 使用iframe原生表单实现。\n\n各个语言的服务端框架,必然是可以处理`multipart/form-data`类型的请求,并解析出文件。一下给出两种语言的样例代码\n\n-   [Java Springboot 样例](https://github.com/alibaba-fusion/next-upload-java-server)\n-   [Node Eggjs 样例](https://github.com/alibaba-fusion/next-upload-node-server)\n\n## IE9兼容性\n\n-   ie9 下用因为使用 iframe 作为无刷新上传方案，必须保证表单页面的域名和上传的服务器端的域名相同。\n-   ie9 下服务器端返回数据需要设置头部 `context-type` 为 `text/html`，不要设置为 `application/json`\n-   如果只是一级域名相同（`taobao.com` 为一级域名  `shop.taobao.com` 为二级域名），可以通过降域的方式实现跨域上传。\n\n假设你表单页面的域是：shop.taobao.com，而上传的服务器端路径却是 upload.taobao.com。服务端返回必须带额外script标签\n\n        <script>document.domain=\"taobao.com\";</script>\n        {\"status\":1,\"type\":\"ajax\",\"name\":\"54.png\",\"url\":\".\\/files\\/54.png\"}\n\niframe上传会额外传递参数 `_documentDomain` 方便你设置域名\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"文件上传","order":"0","jsx":"import { Upload, Button, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Upload\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        onSuccess={onSuccess}\n        multiple\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 1024,\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            fileURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n    <br/>\n    <Upload shape=\"card\" style={{display: 'inline-block'}}>\n        Upload File\n    </Upload>\n    <Upload style={{display: 'inline-block', marginLeft: '5px'}}>\n        <div className=\"next-upload-card\">\n            <Icon type=\"attachment\" size=\"large\"/>\n            <div className=\"next-upload-text\">\n                Attachment\n            </div>\n        </div>\n    </Upload>\n</div>, mountNode);\n\nfunction beforeUpload(info) {\n    console.log('beforeUpload : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange : ', info);\n}\n\nfunction onSuccess(info) {\n    console.log('onSuccess : ', info);\n}\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"上传前预处理","order":"8","jsx":"import { Upload, Button } from '@alifd/next';\n\nReactDOM.render([\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        key=\"1\"\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>,\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={asyncBeforeUpload}\n        onChange={onChange}\n        key=\"2\"\n    >\n        <Button type=\"secondary\" style={{margin: '0 0 10px'}}>Async Call before Upload File</Button>\n    </Upload>,\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={() => false}\n        onChange={onChange}\n        key=\"3\"\n    >\n        <Button type=\"normal\" style={{margin: '0 0 10px'}}>Prevent Upload</Button>\n    </Upload>,\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={() => new Promise(resl => setTimeout(() => resl(false)))}\n        onChange={onChange}\n        key=\"4\"\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Async Prevent Upload</Button>\n    </Upload>,\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={() => {}}\n        onChange={onChange}\n        key=\"5\"\n    >\n        <Button type=\"secondary\" style={{margin: '0 0 10px'}}>Do nothing</Button>\n    </Upload>\n], mountNode);\n\nconst requestOpts = {\n    action: 'https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload',\n    data: {osstoken: 1234},\n    headers: {'X-Requested-With': 12345},\n};\n\nasync function ajax() {\n    return await new Promise(resolve => {\n        setTimeout(() => {\n            resolve(requestOpts);\n        }, 1e3);\n    });\n}\n\nfunction beforeUpload(info, options) {\n    console.log('beforeUpload callback : ', info, options);\n    return requestOpts;\n}\n\nasync function asyncBeforeUpload(info, options) {\n    console.log('beforeUpload callback : ', info, options);\n    return await ajax();\n}\n\nfunction onChange(info) {\n    console.log('onChange callback : ', info);\n}\n\n\n","css":"","body":"\n<p>使用beforeUpload去控制上传行为</p>\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"卡片","order":"3","jsx":"import { Upload } from '@alifd/next';\n\nReactDOM.render((\n    <Upload.Card\n        listType=\"card\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        onPreview={onPreview}\n        onChange={onChange}\n        onSuccess={onSuccess}\n        onError={onError}\n        defaultValue={[{\n            uid: '0',\n            name: 'IMG.png',\n            state: 'done',\n            url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }, {\n            uid: '1',\n            name: 'IMG.png',\n            percent: 50,\n            state: 'uploading',\n            url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }, {\n            uid: '2',\n            name: 'IMG.png',\n            state: 'error',\n            url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }]}\n    />\n), mountNode);\n\nfunction onPreview(info) {\n    console.log('onPreview callback : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange callback : ', info);\n}\n\nfunction onSuccess(res, file) {\n    console.log('onSuccess callback : ', res, file);\n}\n\nfunction onError(file) {\n    console.log('onError callback : ', file);\n}\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"裁剪上传","order":"10","jsx":"import { Upload, Button, Dialog } from '@alifd/next';\nimport Cropper from 'react-cropper';\n\n\nfunction convertBase64UrlToFile(urlData) {\n\n    const bytes = window.atob(urlData.split(',')[1]);\n\n    const ab = new ArrayBuffer(bytes.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < bytes.length; i++) {\n        ia[i] = bytes.charCodeAt(i);\n    }\n\n    const blob = new Blob([ab], {type: 'image/png'});\n\n    return new File([blob], 'test.png', {type: 'image/png'});\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.uploader = new Upload.Uploader({\n            action: 'https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload',\n            onSuccess: this.onSuccess,\n            name: 'file'\n        });\n    }\n\n    state = {\n        src: null,\n        visible: false,\n        img: null,\n    };\n\n    onSuccess = (value) => {\n        console.log(value);\n        this.setState({\n            img: value.url\n        });\n    };\n\n    onSelect = (files) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            this.setState({\n                src: reader.result,\n                visible: true,\n            });\n        };\n        reader.readAsDataURL(files[0]);\n    };\n\n    onCancel = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n    onOk = () => {\n\n        const data = this.cropperRef.getCroppedCanvas().toDataURL();\n\n        const blob = convertBase64UrlToFile(data);\n        const file = new File([blob], 'test.png', {type: 'image/png'});\n\n        // start upload\n        this.uploader.startUpload(file);\n\n        this.setState({\n            visible: false,\n        });\n    };\n\n    saveCropperrRef = (ref) => {\n        this.cropperRef = ref;\n    };\n\n    render() {\n        return (\n            <div>\n                <Upload.Selecter onSelect={this.onSelect}\n                >\n                    <Button>Select file</Button>\n                </Upload.Selecter>\n                <Dialog visible={this.state.visible} onCancel={this.onCancel} onOk={this.onOk} isFullScreen>\n                    <Cropper\n                        ref={this.saveCropperrRef}\n                        src={this.state.src}\n                        style={{height: 300, width: 400}}\n                    />\n                </Dialog>\n                <div><img src={this.state.img} style={{width: 100}}/></div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"自定义上传参数","order":"4","jsx":"import { Upload, Button } from '@alifd/next';\n\nReactDOM.render((\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        data={{token: 'abcd'}}\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 1024,\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n), mountNode);\n\nfunction beforeUpload(info) {\n    console.log('beforeUpload callback : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange callback : ', info);\n}\n","css":"","body":"\n<p>通过 data 控制自定义参数</p>\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"拖拽上传","order":"4","jsx":"import { Upload } from '@alifd/next';\n\nReactDOM.render((\n    <Upload.Dragger\n        listType=\"image\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        onDragOver={onDragOver}\n        onDrop={onDrop}\n    />\n), mountNode);\n\nfunction onDragOver() {\n    console.log('dragover callback');\n}\n\nfunction onDrop(fileList) {\n    console.log('drop callback : ', fileList);\n}\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n<p>提醒: 拖拽上传不适合视障人士使用,有无障碍需求的项目慎用</p>\n"},{"title":"上传失败","order":"12","jsx":"import { Upload, Button } from '@alifd/next';\n\n\nconst value = [\n    {\n        uid: '2',\n        name: 'IMG.png',\n        state: 'error',\n        url:\n            'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n        downloadURL:\n            'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n        imgURL:\n            'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n    }\n];\n\nReactDOM.render(\n    <div>\n        <Upload value={value} listType=\"text\"> <Button>Upload</Button></Upload>\n\n        <br />\n        <Upload value={value} listType=\"card\"> <Button>Upload</Button></Upload>\n\n        <br />\n        <Upload value={value} listType=\"image\"> <Button>Upload</Button></Upload>\n    </div>,\n    mountNode\n);\n","css":"","body":"\n"},{"title":"额外内容","order":"8","jsx":"import { Upload, Button } from '@alifd/next';\n\nconst extraRender = (file) => {\n    console.log(file);\n    return (<Button style={{marginLeft: 4}}>extra</Button>);\n};\n\nReactDOM.render((\n    <Upload\n        listType=\"image\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        extraRender={extraRender}\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 100,\n            url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n), mountNode);\n\nfunction beforeUpload(info) {\n    console.log('beforeUpload callback : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange callback : ', info);\n}\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"图片列表","order":"2","jsx":"import { Upload, Button } from '@alifd/next';\n\nReactDOM.render((\n    <Upload\n        listType=\"image\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 100,\n            url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n), mountNode);\n\nfunction beforeUpload(info) {\n    console.log('beforeUpload callback : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange callback : ', info);\n}\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"个数限制","order":"6","jsx":"import { Upload, Button } from '@alifd/next';\n\nReactDOM.render((\n    <Upload\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        limit={3}\n        multiple\n        listType=\"text\"\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 1024,\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            fileURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n), mountNode);\n\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"大小限制","order":"6","jsx":"import { Upload, Dialog, Button } from '@alifd/next';\n\nconst beforeUpload = (file) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            const img = new Image();\n            img.onload = () => {\n                if (img.width <= 1200) {\n                    resolve();\n                } else {\n                    Dialog.alert({\n                        content: `Image width ${img.width}px, Exceed limits！`,\n                        closable: false,\n                        title: 'Warning'\n                    });\n                    reject();\n                }\n            };\n            img.src = reader.result;\n        };\n        reader.readAsDataURL(file);\n    });\n};\n\nReactDOM.render((\n    <Upload\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        limit={3}\n        multiple\n        beforeUpload={beforeUpload}\n        listType=\"text\"\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 1024,\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            fileURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload file</Button>\n    </Upload>\n), mountNode);\n\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"粘贴上传","order":"5","jsx":"import { Upload, Input } from '@alifd/next';\n\nclass App extends React.Component {\n    onPaste = (e) => {\n        e.preventDefault();\n        const files = e.clipboardData.files;\n        files.length && this.uploaderRef.selectFiles(files);\n    };\n\n    saveUploaderRef = (ref) => {\n        this.uploaderRef = ref.getInstance();\n    };\n\n    onChange = (value) => {\n        console.log(value);\n    };\n\n    render() {\n        return (<div>\n            <Input.TextArea style={{width: '100%', marginBottom: 10}} autoHeight={{minRows: 4}} onPaste={this.onPaste} />\n            <Upload\n                action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n                listType=\"image\"\n                onChange={this.onChange}\n                ref={this.saveUploaderRef}\n            />\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"提交上传","order":"5","jsx":"import { Upload, Button } from '@alifd/next';\n\n\nclass App extends React.Component {\n\n    saveUploaderRef = (ref) => {\n        this.uploaderRef = ref.getInstance();\n    };\n\n    onSubmit = () => {\n        this.uploaderRef.startUpload();\n    }\n    beforeUpload(info, options) {\n        console.log('beforeUpload callback : ', info, options);\n        return options;\n    }\n    render() {\n        return (\n            <div>\n                <Upload\n                    action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n                    autoUpload={false}\n                    ref={this.saveUploaderRef}\n                    listType=\"text\"\n                    beforeUpload={this.beforeUpload}\n                >\n                    <Button>Upload</Button>\n                </Upload>\n                <br />\n                <Button type=\"primary\" onClick={this.onSubmit}>Submit</Button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n","css":"","body":"\n<p>通过按钮点击提交上传</p>\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"文字列表","order":"1","jsx":"import { Upload, Button } from '@alifd/next';\n\nconst defaultValue = [{\n    name: 'IMG.png',\n    state: 'done',\n    size: 1024,\n    downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n    fileURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n    url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n}];\n\nReactDOM.render((\n    <Upload\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        onSuccess={onSuccess}\n        listType=\"text\"\n        defaultValue={defaultValue}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n), mountNode);\n\nfunction beforeUpload(info) {\n    console.log('beforeUpload : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange : ', info);\n}\n\nfunction onSuccess(info) {\n    console.log('onSuccess : ', info);\n}\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"文件校验","order":"12","jsx":"import { Upload, Button } from '@alifd/next';\n\n\nclass App extends React.Component {\n\n    saveUploaderRef = (ref) => {\n        this.uploaderRef = ref.getInstance();\n    };\n\n    onSubmit = () => {\n        this.uploaderRef.startUpload();\n    }\n    afterSelect(file) {\n        console.log(file);\n        return true; // return false will trigger onError warning & prevent upload\n    }\n    render() {\n        return (\n            <div>\n                <Upload\n                    action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n                    autoUpload={false}\n                    ref={this.saveUploaderRef}\n                    listType=\"text\"\n                    afterSelect={this.afterSelect}\n                >\n                    <Button>Upload</Button>\n                </Upload>\n                <br />\n                <Button type=\"primary\" onClick={this.onSubmit}>Submit</Button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n","css":"","body":"\n<p>afterSelect仅在 autoUpload=false 的时候生效\nautoUpload=true时,可以使用beforeUpload完全可以替代该功能.</p>\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"},{"title":"内容回填","order":"6","jsx":"import { Upload, Button, Field, Form } from '@alifd/next';\n\nconst FormItem = Form.Item;\n\nconst value = [{\n    name: 'pic.png',\n    fileName: 'pic.png',\n    state: 'done',\n    size: 1000,\n    downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n    fileURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n    imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n}];\n\nclass App extends React.Component {\n\n    field = new Field(this);\n\n    setValues = () => {\n        this.field.setValues({\n            upload: [...value]\n        });\n    };\n\n    getValues = () => {\n        const values = this.field.getValues();\n        console.log(values);\n    };\n\n    render() {\n\n        return (\n            <Form field={this.field}>\n                <FormItem required>\n                    <Upload\n                        listType=\"text\"\n                        name=\"upload\"\n                        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n                        defaultValue={value}\n                    >\n                        <Button>Upload</Button>\n                    </Upload>\n                </FormItem>\n                <div>\n                    <Button onClick={this.setValues} type=\"primary\" style={{margin: '0 0 10px'}}>Set Data</Button>&nbsp;&nbsp;\n                    <Button onClick={this.getValues} type=\"primary\" style={{margin: '0 0 10px'}}>Get Data</Button>&nbsp;&nbsp;\n                    <Button onClick={() => this.field.reset()} type=\"primary\" style={{margin: '0 0 10px'}}>Reset</Button>&nbsp;&nbsp;\n                    <Button onClick={() => this.field.validate()} type=\"primary\" style={{margin: '0 0 10px'}}>Validate</Button>\n                </div>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n","css":"","body":"\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"}]},{"name":"VirtualList","category":"Components","title":"虚拟滚动列表","importStatement":"import { VirtualList } from '@alifd/next';","body":"\n API\n\n### VirtualList\n\n| 参数             | 说明                                                                                        | 类型       | 默认值                                              |\n| -------------- | ----------------------------------------------------------------------------------------- | -------- | ------------------------------------------------ |\n| children       | 渲染的子节点                                                                                    | any      | -                                                |\n| minSize        | 最小加载数量                                                                                    | Number   | 1                                                |\n| pageSize       | 一屏数量                                                                                      | Number   | 10                                               |\n| itemsRenderer  | 父渲染函数，默认为 (items, ref) => <ul ref={ref}>{items}</ul><br><br>**签名**:<br>Function() => void | Function | (items, ref) => &lt;ul ref={ref}>{items}&lt;/ul> |\n| threshold      | 缓冲区高度                                                                                     | Number   | 100                                              |\n| itemSizeGetter | 获取item高度的函数<br><br>**签名**:<br>Function() => void                                          | Function | -                                                |\n| jumpIndex      | 设置跳转位置，需要设置 itemSizeGetter 才能生效, 不设置认为元素等高并取第一个元素高度作为默认高                                  | Number   | 0                                                |\n","propsSchema":{},"propsREADME":"","methodREADME":[],"subComponentsREADME":[],"demos":[{"title":"简单用法","order":"0","jsx":"import { VirtualList } from '@alifd/next';\n\nconst dataSource = [];\n\nconst generateLi = (index = 'index') => {\n    const data = [];\n    if (index % 3 === 0) {\n        return <li key={`key-${index}`} style={{lineHeight: '30px', background: '#5f83ff', color: '#fff'}}>key-{index}</li>;\n    } else {\n        return <li key={`key-${index}`}  style={{lineHeight: '20px'}}>key-{index}</li>;\n    }\n};\n\nfor (let i = 0; i < 1000; i++) {\n    dataSource.push(generateLi(i));\n}\n\nconst demo = (\n    <div className={'virtual-box'}>\n        <VirtualList>\n            {dataSource}\n        </VirtualList>\n    </div>\n);\n\n\nReactDOM.render(demo, mountNode);\n","css":".virtual-box {\n    height: 200px;\n    width: 200px;\n    border: 1px solid #ddd;\n    overflow: auto;\n}\n.virtual-box ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n}\n.virtual-box li {\n    padding-left: 10px;\n    border-bottom: 1px solid #333;\n}\n","body":"\n<p>使用 VirtualList 最简单的例子。</p>\n"},{"title":"设置初始位置","order":"1","jsx":"import { VirtualList } from '@alifd/next';\n\nconst dataSource = [];\n\nfunction generateLi(index) {\n    return (<li key={`key-${index}`}  style={{lineHeight: '20px'}}>key-{index}</li>);\n}\nfunction generateData(len) {\n    for (let i = 0; i < len; i++) {\n        dataSource.push(generateLi(i));\n    }\n}\n\nclass App extends React.Component  {\n    state = {\n        initial: 50,\n        dataSource: generateData(1000)\n    }\n    onClick() {\n        this.setState({\n            initial: this.state.initial + 20\n        });\n    }\n    render() {\n        return (\n            <div>\n                <button onClick={this.onClick.bind(this)}>jump to {this.state.initial + 20}</button>\n                <br/>\n                <br/>\n                <div className={'virtual-box'}>\n                    <VirtualList ref=\"virtual\" jumpIndex={this.state.initial}>\n                        {dataSource}\n                    </VirtualList>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n","css":".virtual-box {\n    height: 200px;\n    width: 200px;\n    border: 1px solid #ddd;\n    overflow: auto;\n}\n.virtual-box ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n}\n.virtual-box li {\n    padding-left: 10px;\n    border-bottom: 1px solid #333;\n}\n","body":"\n<p>使用 jumpIndex 设置初始位置</p>\n"},{"title":"不等高的item","order":"2","jsx":"import { VirtualList } from '@alifd/next';\n\nconst dataSource = [];\n\nfunction generateLi(index) {\n    if (index % 3 === 0) {\n        return (<li key={`key-${index}`} style={{lineHeight: '30px', background: '#5f83ff', color: '#fff'}}>key-{index}</li>);\n    } else {\n        return (<li key={`key-${index}`}  style={{lineHeight: '20px'}}>key-{index}</li>);\n    }\n}\nfunction generateData(len) {\n    for (let i = 0; i < len; i++) {\n        dataSource.push(generateLi(i));\n    }\n}\n\nclass App extends React.Component  {\n    state = {\n        initial: 20,\n        dataSource: generateData(1000)\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            const instance = this.refs.virtual.getInstance();\n            instance.scrollTo(50);\n        }, 200);\n\n    }\n\n    getHeight(index) {\n        return index % 3 === 0 ? 30 : 20;\n    }\n\n    onClick() {\n        this.setState({\n            initial: this.state.initial + 20\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.onClick.bind(this)}>jump to {this.state.initial + 20}</button>\n                <br/>\n                <br/>\n                <div className={'virtual-box'}>\n                    <VirtualList ref=\"virtual\" jumpIndex={this.state.initial} itemSizeGetter={this.getHeight.bind(this)}>\n                        {dataSource}\n                    </VirtualList>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n","css":".virtual-box {\n    height: 200px;\n    width: 200px;\n    border: 1px solid #ddd;\n    overflow: auto;\n}\n.virtual-box ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n}\n.virtual-box li {\n    padding-left: 10px;\n    border-bottom: 1px solid #333;\n}\n","body":"\n<p>使用 jumpIndex 设置初始位置, 并设置 itemSizeGetter</p>\n"}]}];

/***/ }),
/* 252 */
/***/ (function(module) {

module.exports = {"name":"rax-materials","type":"rax","blocks":[{"name":"account-shop","title":"账户店铺信息","source":{"type":"npm","npm":"@rax-materials/account-shop-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB14UeuXAzoK1RjSZFlXXai4VXa-750-161.png","categories":["信息展示"],"description":"账户店铺信息","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/account-shop","publishTime":"2018-09-12T14:50:01.507Z","updateTime":"2018-10-17T02:59:32.095Z"},{"name":"app-list","title":"程序应用列表","source":{"type":"npm","npm":"@rax-materials/app-list-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB14IyatiMnBKNjSZFzXXc_qVXa-750-884.png","categories":["列表"],"description":"程序应用列表","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/app-list","publishTime":"2018-08-27T01:59:18.507Z","updateTime":"2018-10-17T02:59:37.272Z"},{"name":"banner","title":"静态头图","source":{"type":"npm","npm":"@rax-materials/banner-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1mKSjXkvoK1RjSZFNXXcxMVXa-750-319.png","categories":["信息展示"],"description":"静态头图","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/banner","publishTime":"2018-09-11T15:37:53.376Z","updateTime":"2018-10-17T02:59:42.817Z"},{"name":"categories","title":"分类入口","source":{"type":"npm","npm":"@rax-materials/categories-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1p8N5tk7mBKNjSZFyXXbydFXa-750-324.png","categories":["列表"],"description":"展示分类入口列表","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/categories","publishTime":"2018-08-27T01:59:23.783Z","updateTime":"2018-10-17T02:59:50.303Z"},{"name":"category-window","title":"分类橱窗","source":{"type":"npm","npm":"@rax-materials/category-window-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB17MFftiMnBKNjSZFoXXbOSFXa-750-292.png","categories":["信息展示"],"description":"分类应用橱窗","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/category-window","publishTime":"2018-08-27T01:59:28.299Z","updateTime":"2018-10-17T02:59:57.625Z"},{"name":"data-overview","title":"数据概览","source":{"type":"npm","npm":"@rax-materials/data-overview-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1omqiXbvpK1RjSZFqXXcXUVXa-750-421.png","categories":["数据展示"],"description":"数据概览","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/data-overview","publishTime":"2018-09-11T15:38:18.521Z","updateTime":"2018-10-17T03:00:03.663Z"},{"name":"fund-center","title":"资金中心","source":{"type":"npm","npm":"@rax-materials/fund-center-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1p5ShXa6qK1RjSZFmXXX0PFXa-750-279.png","categories":["数据展示"],"description":"资金中心","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/fund-center","publishTime":"2018-09-11T15:38:27.345Z","updateTime":"2018-10-17T03:00:09.491Z"},{"name":"item-list","title":"商品列表","source":{"type":"npm","npm":"@rax-materials/item-list-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1q4OXtbZnBKNjSZFhXXc.oXXa-750-1050.png","categories":["列表"],"description":"循环展示商品列表","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/item-list","publishTime":"2018-08-27T01:59:33.138Z","updateTime":"2018-10-17T03:00:14.733Z"},{"name":"logout","title":"退出登录按钮","source":{"type":"npm","npm":"@rax-materials/logout-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1nHihXgHqK1RjSZFPXXcwapXa-750-107.png","categories":["登录页"],"description":"退出登录按钮","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/logout","publishTime":"2018-09-11T15:38:41.141Z","updateTime":"2018-10-17T03:00:20.476Z"},{"name":"menus","title":"菜单项","source":{"type":"npm","npm":"@rax-materials/menus-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1U7KhXXYqK1RjSZLeXXbXppXa-750-338.png","categories":["列表"],"description":"菜单项","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/menus","publishTime":"2018-09-11T15:38:48.112Z","updateTime":"2018-10-17T03:00:26.769Z"},{"name":"post-cover","title":"文章封面","source":{"type":"npm","npm":"@rax-materials/post-cover-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1a9RstborBKNjSZFjXXc_SpXa-750-584.png","categories":["列表"],"description":"文章展示入口","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/post-cover","publishTime":"2018-08-27T01:59:37.848Z","updateTime":"2018-10-17T03:00:32.237Z"},{"name":"product-detail","title":"程序应用列表","source":{"type":"npm","npm":"@rax-materials/product-detail-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1aESrXwHqK1RjSZFEXXcGMXXa-750-276.png","categories":["信息展示"],"description":"程序应用列表","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/product-detail","publishTime":"2018-09-12T14:50:36.619Z","updateTime":"2018-10-17T03:00:38.978Z"},{"name":"product-list","title":"宝贝商品列表","source":{"type":"npm","npm":"@rax-materials/product-list-block","version":"0.2.7","registry":"http://registry.npmjs.org","version-0.x":"0.2.7","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1teyuXAvoK1RjSZFNXXcxMVXa-750-680.png","categories":["列表"],"description":"宝贝商品列表，带 tab 切换","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/product-list","publishTime":"2018-09-12T14:50:42.349Z","updateTime":"2018-10-17T03:00:46.060Z"},{"name":"search-input","title":"搜索框","source":{"type":"npm","npm":"@rax-materials/search-input-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1LfiiXhTpK1RjSZFMXXbG_VXa-750-77.png","categories":["列表"],"description":"搜索框","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/search-input","publishTime":"2018-09-11T15:39:01.856Z","updateTime":"2018-10-17T03:00:51.239Z"},{"name":"shop-tools","title":"店铺管理工具","source":{"type":"npm","npm":"@rax-materials/shop-tools-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1SKusXwHqK1RjSZFgXXa7JXXa-750-438.png","categories":["信息展示"],"description":"店铺管理工具","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/shop-tools","publishTime":"2018-09-12T14:50:55.872Z","updateTime":"2018-10-17T03:00:58.141Z"},{"name":"swiper-banner","title":"滑块顶图","source":{"type":"npm","npm":"@rax-materials/swiper-banner-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1jthRtljTBKNjSZFwXXcG4XXa-750-242.png","categories":["信息展示"],"description":"可左右滑动的模块","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/swiper-banner","publishTime":"2018-08-27T01:59:42.507Z","updateTime":"2018-10-17T03:01:04.950Z"},{"name":"todo-task","title":"待办事项","source":{"type":"npm","npm":"@rax-materials/todo-task-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1VbahXgTqK1RjSZPhXXXfOFXa-750-222.png","categories":["列表"],"description":"待办事项提醒","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/todo-task","publishTime":"2018-09-11T15:39:14.647Z","updateTime":"2018-10-17T03:01:12.554Z"},{"name":"user-panel","title":"用户信息","source":{"type":"npm","npm":"@rax-materials/user-panel-block","version":"0.2.6","registry":"http://registry.npmjs.org","version-0.x":"0.2.6","sourceCodeDirectory":"src/"},"dependencies":{},"screenshot":"https://img.alicdn.com/tfs/TB1lDWAXhjaK1RjSZKzXXXVwXXa-750-161.png","categories":["信息展示"],"description":"用户信息","repository":"https://github.com/alibaba/ice/tree/master/rax-materials/blocks/user-panel","publishTime":"2018-09-11T15:39:20.519Z","updateTime":"2018-10-17T03:01:18.258Z"}],"layouts":[],"components":[],"scaffolds":[{"name":"miniapp-lite","title":"Miniapp lite","source":{"type":"npm","npm":"@rax-materials/miniapp-lite","version":"0.2.9","registry":"http://registry.npmjs.org"},"builder":"","dependencies":{},"devDependencies":{"rax-scripts":"^0.6.6-beta.2"},"screenshot":"https://img.alicdn.com/tfs/TB1tzj.bSrqK1RjSZK9XXXyypXa-750-1334.png","screenshots":["https://img.alicdn.com/tfs/TB1tzj.bSrqK1RjSZK9XXXyypXa-750-1334.png"],"categories":[],"features":{},"homepage":"https://alibaba.github.io/ice/preview/index.html?page=https://alibaba.github.io/ice/rax-materials/miniapp-lite/index.html","description":"该模板适用于从 0 到 1 开始搭建小程序应用，含基础页面及 TabBar 设置","publishTime":"2018-09-11T15:37:24.144Z","updateTime":"2018-10-17T02:59:38.595Z"},{"name":"operating-dashboard","title":"Operating Dashboard","source":{"type":"npm","npm":"@rax-materials/operating-dashboard","version":"0.1.10","registry":"http://registry.npmjs.org"},"builder":"","dependencies":{},"devDependencies":{"rax-scripts":"^0.6.6-beta.2"},"screenshot":"https://img.alicdn.com/tfs/TB1G_yfXbrpK1RjSZTEXXcWAVXa-1242-2208.png","screenshots":["https://img.alicdn.com/tfs/TB1G_yfXbrpK1RjSZTEXXcWAVXa-1242-2208.png"],"categories":[],"features":{},"homepage":"https://alibaba.github.io/ice/preview/index.html?page=https://alibaba.github.io/ice/rax-materials/operating-dashboard/index.html","description":"该模板适用于展示运营类数据后台、统计数据分类展示、商家运营类后台","publishTime":"2018-09-11T15:09:36.636Z","updateTime":"2018-10-17T02:59:45.512Z"},{"name":"posts-admin","title":"Posts Admin","source":{"type":"npm","npm":"@rax-materials/posts-admin","version":"0.2.9","registry":"http://registry.npmjs.org"},"builder":"","dependencies":{},"devDependencies":{"rax-scripts":"^0.6.6-beta.2"},"screenshot":"https://img.alicdn.com/tfs/TB1Uk4rxXooBKNjSZPhXXc2CXXa-1242-2208.png","screenshots":["https://img.alicdn.com/tfs/TB1Uk4rxXooBKNjSZPhXXc2CXXa-1242-2208.png"],"categories":[],"features":{},"homepage":"https://alibaba.github.io/ice/preview/index.html?page=https://alibaba.github.io/ice/rax-materials/posts-admin/index.html","description":"该模板适用于论坛站点类管理后台，含常用 Tabbar 以及用户信息设置","publishTime":"2018-09-20T10:19:04.688Z","updateTime":"2018-10-17T02:59:52.913Z"},{"name":"products-admin","title":"Products Admin","source":{"type":"npm","npm":"@rax-materials/products-admin","version":"0.1.10","registry":"http://registry.npmjs.org"},"builder":"","dependencies":{},"devDependencies":{"rax-scripts":"^0.6.6-beta.2"},"screenshot":"https://img.alicdn.com/tfs/TB1_cesXq6qK1RjSZFmXXX0PFXa-750-1334.png","screenshots":["https://img.alicdn.com/tfs/TB1_cesXq6qK1RjSZFmXXX0PFXa-750-1334.png"],"categories":[],"features":{},"homepage":"https://alibaba.github.io/ice/preview/index.html?page=https://alibaba.github.io/ice/rax-materials/products-admin/index.html","description":"商品管理后台适用于宝贝商品的上下架管理、单品操作等","publishTime":"2018-09-12T15:08:51.916Z","updateTime":"2018-10-17T03:00:00.410Z"}]};

/***/ }),
/* 253 */
/***/ (function(module) {

module.exports = {"type":"vue","name":"vue-materials","blocks":[{"name":"bar-chart","title":"条形图","description":"v-charts 条形图","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/BarChart","source":{"type":"npm","npm":"@vue-materials/bar-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB1gSTgpKuSBuNjy1XcXXcYjFXa-2016-876.png","screenshots":["https://img.alicdn.com/tfs/TB1gSTgpKuSBuNjy1XcXXcYjFXa-2016-876.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-04-24T13:13:58.628Z","updateTime":"2018-04-24T13:14:03.052Z"},{"name":"basic-exception","title":"基础异常报错","description":"基于element-ui组件的基础异常报错","categories":["异常"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/BasicException","source":{"type":"npm","npm":"@vue-materials/basic-exception-block","version":"1.0.1","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40156388-bf1a1b92-59cb-11e8-913c-b31886149263.png","screenshots":["https://user-images.githubusercontent.com/18508817/40156388-bf1a1b92-59cb-11e8-913c-b31886149263.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-17T01:34:10.398Z","updateTime":"2018-05-17T06:30:57.053Z"},{"name":"basic-form","title":"基础表单","description":"基础表单","categories":["表单"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/BasicForm","source":{"type":"npm","npm":"@vue-materials/basic-form-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB13E09pMmTBuNjy1XbXXaMrVXa-2014-1148.png","screenshots":["https://img.alicdn.com/tfs/TB13E09pMmTBuNjy1XbXXaMrVXa-2014-1148.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-04-24T13:14:00.760Z","updateTime":"2018-04-24T13:14:06.400Z"},{"name":"basic-not-found","title":"404 报错提示","description":"基于element-ui组件的404 报错提示","categories":["异常"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/BasicNotFound","source":{"type":"npm","npm":"@vue-materials/basic-not-found-block","version":"1.0.1","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40071509-8a83af2a-58a3-11e8-926a-42a70c06bc71.png","screenshots":["https://user-images.githubusercontent.com/18508817/40071509-8a83af2a-58a3-11e8-926a-42a70c06bc71.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-17T01:34:27.807Z","updateTime":"2018-05-17T10:10:02.758Z"},{"name":"basic-table","title":"基础表格","description":"基础表格","categories":["表格"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/BasicTable","source":{"type":"npm","npm":"@vue-materials/basic-table-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB1BvzBpGmWBuNjy1XaXXXCbXXa-2004-1018.png","screenshots":["https://img.alicdn.com/tfs/TB1BvzBpGmWBuNjy1XaXXXCbXXa-2004-1018.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-04-24T13:14:05.964Z","updateTime":"2018-04-24T13:14:09.065Z"},{"name":"d2-crud","title":"D2Crud复杂示例","description":"基于Element的表格封装复杂示例","categories":["表格"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/D2Crud","source":{"type":"npm","npm":"@d2-projects/d2-crud-ice-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@d2-projects/d2-crud":"^1.1.0","vue":"^2.5.16"},"screenshot":"http://qiniucdn.fairyever.com/20180907163652.png","screenshots":["http://qiniucdn.fairyever.com/20180907163652.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-12-13T08:15:08.150Z","updateTime":"2018-12-13T08:15:14.432Z"},{"name":"d2-crud","title":"D2Crud简单示例","description":"基于Element的表格封装简单示例","categories":["表格"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/D2CrudSimple","source":{"type":"npm","npm":"@d2-projects/d2-crud-ice-block-simple","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@d2-projects/d2-crud":"^1.1.0","vue":"^2.5.16"},"screenshot":"http://qiniucdn.fairyever.com/20180907163636.png","screenshots":["http://qiniucdn.fairyever.com/20180907163636.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-12-13T08:16:22.797Z","updateTime":"2018-12-13T08:16:26.267Z"},{"name":"data-display","title":"数据展示","description":"用于简单数据的模板展示","categories":["数据展示"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/DataDisplay","source":{"type":"npm","npm":"@vue-materials/data-display-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","normalize.css":"^8.0.0","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB1IKT9jfDH8KJjy1XcXXcpdXXa-1892-324.png","screenshots":["https://img.alicdn.com/tfs/TB1IKT9jfDH8KJjy1XcXXcpdXXa-1892-324.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-17T01:47:35.553Z","updateTime":"2018-05-17T01:47:40.506Z"},{"name":"diy-toggle-chart","title":"diy-toggle-chart","description":"v-chart 自定义图表类型切换，支持七种图表类型切换","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/DiyToggleChart","source":{"type":"npm","npm":"@vue-materials/diy-toggle-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40873801-bf4a596c-6699-11e8-8839-a625e52212fd.png","screenshots":["https://user-images.githubusercontent.com/18508817/40873801-bf4a596c-6699-11e8-8839-a625e52212fd.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:05:00.267Z","updateTime":"2018-07-29T16:05:16.937Z"},{"name":"empty-content","title":"空内容提示","description":"基于element-ui组件的空内容提示","categories":["异常"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/EmptyContent","source":{"type":"npm","npm":"@vue-materials/empty-content-block","version":"1.0.1","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB161Wer1uSBuNjy1XcXXcYjFXa-2528-1266.png","screenshots":["https://img.alicdn.com/tfs/TB161Wer1uSBuNjy1XcXXcYjFXa-2528-1266.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-17T01:35:10.646Z","updateTime":"2018-05-17T10:10:06.316Z"},{"name":"fixed-table","title":"固定表格","description":"固定列和表头的表格","categories":["表格"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/FixedTable","source":{"type":"npm","npm":"@vue-materials/fixed-table-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB15b7.pTtYBeNjy1XdXXXXyVXa-1964-660.png","screenshots":["https://img.alicdn.com/tfs/TB15b7.pTtYBeNjy1XdXXXXyVXa-1964-660.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-04-24T13:14:10.973Z","updateTime":"2018-04-24T13:14:13.805Z"},{"name":"funnel-chart","title":"funnel-chart","description":"v-chart 漏斗图","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/FunnelChart","source":{"type":"npm","npm":"@vue-materials/funnel-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40873590-ae08fab8-6695-11e8-90dd-c600d8f413c6.png","screenshots":["https://user-images.githubusercontent.com/18508817/40873590-ae08fab8-6695-11e8-90dd-c600d8f413c6.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:05:00.284Z","updateTime":"2018-07-29T16:05:10.438Z"},{"name":"gauge-chart","title":"gauge-chart","description":"v-chart 仪表盘","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/GaugeChart","source":{"type":"npm","npm":"@vue-materials/gauge-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40871938-b23c73da-6677-11e8-8944-d85dfbc9de92.png","screenshots":["https://user-images.githubusercontent.com/18508817/40871938-b23c73da-6677-11e8-8944-d85dfbc9de92.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:05:00.271Z","updateTime":"2018-07-29T16:05:16.636Z"},{"name":"heatmap-chart","title":"heatmap-chart","description":"v-chart 高德地图热力图","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/HeatmapChart","source":{"type":"npm","npm":"@vue-materials/heatmap-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40877885-8890d22c-66ba-11e8-86bd-f1ea0806f2fd.png","screenshots":["https://user-images.githubusercontent.com/18508817/40877885-8890d22c-66ba-11e8-86bd-f1ea0806f2fd.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:05:00.344Z","updateTime":"2018-07-29T16:05:09.684Z"},{"name":"histogram-chart","title":"柱状图","description":"v-charts 柱状图","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/HistogramChart","source":{"type":"npm","npm":"@vue-materials/histogram-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB1Gfs.pTtYBeNjy1XdXXXXyVXa-1944-848.png","screenshots":["https://img.alicdn.com/tfs/TB1Gfs.pTtYBeNjy1XdXXXXyVXa-1944-848.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-04-24T13:15:29.540Z","updateTime":"2018-04-24T13:15:32.419Z"},{"name":"line-chart","title":"折线图","description":"v-charts 折线图","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/LineChart","source":{"type":"npm","npm":"@vue-materials/line-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB1V0S2pQyWBuNjy0FpXXassXXa-1964-842.png","screenshots":["https://img.alicdn.com/tfs/TB1V0S2pQyWBuNjy0FpXXassXXa-1964-842.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-04-24T13:15:32.248Z","updateTime":"2018-04-24T13:15:36.577Z"},{"name":"map-toggle-chart","title":"map-toggle-chart","description":"基于v-chart 地图类型切换，amap支持主题类型切换，bmap支持底图切换","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/MapToggleChart","source":{"type":"npm","npm":"@vue-materials/map-toggle-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40878048-b260eecc-66bd-11e8-80ff-2dc0bfc5d800.png","screenshots":["https://user-images.githubusercontent.com/18508817/40878048-b260eecc-66bd-11e8-80ff-2dc0bfc5d800.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:05:40.583Z","updateTime":"2018-07-29T16:05:46.643Z"},{"name":"normal-toggle-chart","title":"normal-toggle-chart","description":"v-chart 自带的图表切换","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/NormalToggleChart","source":{"type":"npm","npm":"@vue-materials/normal-toggle-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40877809-61862066-66b9-11e8-964f-ef44f96f499b.png","screenshots":["https://user-images.githubusercontent.com/18508817/40877809-61862066-66b9-11e8-964f-ef44f96f499b.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:06:00.557Z","updateTime":"2018-07-29T16:06:03.259Z"},{"name":"not-permission","title":"无权限提示","description":"基于element-ui组件的无权限提示","categories":["异常"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/NotPermission","source":{"type":"npm","npm":"@vue-materials/not-permission-block","version":"1.0.1","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40156536-aa55aa7c-59cc-11e8-971a-ecc339655041.png","screenshots":["https://user-images.githubusercontent.com/18508817/40156536-aa55aa7c-59cc-11e8-971a-ecc339655041.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-17T01:34:46.419Z","updateTime":"2018-05-17T10:10:08.695Z"},{"name":"pie-chart","title":"pie-chart","description":"v-chart 饼图","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/PieChart","source":{"type":"npm","npm":"@vue-materials/pie-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40873980-252d4850-669c-11e8-9e46-b44212c6f073.png","screenshots":["https://user-images.githubusercontent.com/18508817/40873980-252d4850-669c-11e8-9e46-b44212c6f073.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:05:02.148Z","updateTime":"2018-07-29T16:05:11.510Z"},{"name":"radar-chart","title":"radar-chart","description":"v-chart 雷达图","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/RadarChart","source":{"type":"npm","npm":"@vue-materials/radar-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40873504-a9e4cf68-6693-11e8-8ee4-93ba91958204.png","screenshots":["https://user-images.githubusercontent.com/18508817/40873504-a9e4cf68-6693-11e8-8ee4-93ba91958204.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:05:40.551Z","updateTime":"2018-07-29T16:05:46.754Z"},{"name":"ring-chart","title":"ring-chart","description":"v-chart 环图","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/RingChart","source":{"type":"npm","npm":"@vue-materials/ring-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40873835-5823c2fe-669a-11e8-9c25-d8e749884b21.png","screenshots":["https://user-images.githubusercontent.com/18508817/40873835-5823c2fe-669a-11e8-9c25-d8e749884b21.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:05:00.390Z","updateTime":"2018-07-29T16:05:16.896Z"},{"name":"scatter-chart","title":"scatter-chart","description":"v-chart 散点图","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/ScatterChart","source":{"type":"npm","npm":"@vue-materials/scatter-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/18508817/40872375-eca28c00-667f-11e8-9af9-d925384e3553.png","screenshots":["https://user-images.githubusercontent.com/18508817/40872375-eca28c00-667f-11e8-9af9-d925384e3553.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:05:00.370Z","updateTime":"2018-07-29T16:05:09.610Z"},{"name":"select-table","title":"多选表格","description":"多选表格","categories":["表格"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/SelectTable","source":{"type":"npm","npm":"@vue-materials/select-table-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/6414178/44146037-6cf5df18-a0c0-11e8-824b-b8d12eddeeaa.png","screenshots":["https://user-images.githubusercontent.com/6414178/44146037-6cf5df18-a0c0-11e8-824b-b8d12eddeeaa.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-08-29T03:43:23.403Z","updateTime":"2018-08-29T03:43:26.184Z"},{"name":"simple-footer","title":"简单页脚","description":"LOGO和导航组合的页脚","categories":["其他"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/SimpleFooter","source":{"type":"npm","npm":"@vue-materials/simple-footer-block","version":"0.1.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","normalize.css":"^8.0.0","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB1rnmNouuSBuNjy1XcXXcYjFXa-2390-170.png","screenshots":["https://img.alicdn.com/tfs/TB1rnmNouuSBuNjy1XcXXcYjFXa-2390-170.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-31T10:25:54.755Z","updateTime":"2018-05-31T10:25:59.736Z"},{"name":"tab-table","title":"基于element的标签页表格组合","description":"基于element的标签页表格组合","categories":["表格"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/TabTable","source":{"type":"npm","npm":"@vue-materials/tab-table-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB1IYWRXeuSBuNjy1XcXXcYjFXa-1902-906.png","screenshots":["https://img.alicdn.com/tfs/TB1IYWRXeuSBuNjy1XcXXcYjFXa-1902-906.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-07-29T16:01:38.156Z","updateTime":"2018-07-29T16:01:41.618Z"},{"name":"tag-message-list","title":"标签消息列表","description":"标签消息列表","categories":["列表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/TagMessageList","source":{"type":"npm","npm":"@vue-materials/tag-message-list-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","normalize.css":"^8.0.0","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/1523060/39664002-246a6496-50af-11e8-996f-ed203d7ad564.png","screenshots":["https://user-images.githubusercontent.com/1523060/39664002-246a6496-50af-11e8-996f-ed203d7ad564.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-17T02:02:31.824Z","updateTime":"2018-05-17T02:02:37.306Z"},{"name":"user-login","title":"登录页","description":"基于element-ui组件的用户登录界面","categories":["登录页"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/UserLogin","source":{"type":"npm","npm":"@vue-materials/user-login-block","version":"1.0.1","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"@vue-materials/basic-container":"^1.0.0","normalize.css":"^8.0.0","vue":"^2.5.16"},"screenshot":"https://img.alicdn.com/tfs/TB1WlGbXMmTBuNjy1XbXXaMrVXa-2868-1602.png","screenshots":["https://img.alicdn.com/tfs/TB1WlGbXMmTBuNjy1XbXXaMrVXa-2868-1602.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-05-10T07:05:45.342Z","updateTime":"2018-05-10T07:29:01.895Z"},{"name":"waterfall-chart","title":"waterfall-chart","description":"v-chart 瀑布图","categories":["图表"],"repository":"https://github.com/ice-lab/vue-materials/tree/master/blocks/WaterfallChart","source":{"type":"npm","npm":"@vue-materials/waterfall-chart-block","version":"1.0.0","registry":"http://registry.npmjs.com","sourceCodeDirectory":"src/"},"dependencies":{"echarts":"^4.0.4","@vue-materials/basic-container":"^1.0.0","v-charts":"^1.16.10","vue":"^2.5.16"},"screenshot":"https://user-images.githubusercontent.com/6414178/44137279-61c8508a-a0a2-11e8-9a66-28f15c6038a6.png","screenshots":["https://user-images.githubusercontent.com/6414178/44137279-61c8508a-a0a2-11e8-9a66-28f15c6038a6.png"],"customConfig":null,"features":{"useComponents":[]},"publishTime":"2018-08-29T03:29:43.006Z","updateTime":"2018-08-29T03:29:46.947Z"}],"components":[{"name":"basic-container","title":"基础容器","description":"","categories":[],"repository":"https://github.com/ice-lab/vue-materials/tree/master/components/BasicContainer","source":{"type":"npm","npm":"@vue-materials/basic-container","version":"1.0.0","registry":"http://registry.npmjs.com"},"dependencies":{"vue":"^2.5.16"},"screenshots":[null],"customConfig":null,"publishTime":"2018-04-24T12:58:02.226Z","updateTime":"2018-04-24T12:58:11.327Z"}],"scaffolds":[{"name":"admin-lite","title":"Admin Lite","description":"该模板适用于从 0 到 1 开始搭建项目，内置基础的页面，路由和菜单展示。","homepage":"https://unpkg.com/@vue-materials/admin-lite@latest/dist/index.html","categories":[],"repository":"https://github.com/ice-lab/vue-materials/tree/master/scaffolds/admin-lite","source":{"type":"npm","npm":"@vue-materials/admin-lite","version":"1.0.10","registry":"http://registry.npmjs.com"},"dependencies":{"element-ui":"^2.3.6","normalize.css":"^8.0.0","vue":"^2.5.13","vue-router":"^3.0.1"},"screenshot":"https://img.alicdn.com/tfs/TB1SqrjontYBeNjy1XdXXXXyVXa-2842-1596.png","screenshots":["https://img.alicdn.com/tfs/TB1SqrjontYBeNjy1XdXXXXyVXa-2842-1596.png"],"customConfig":null,"publishTime":"2018-04-24T13:18:47.655Z","updateTime":"2019-04-04T02:21:04.855Z"},{"name":"D2Admin ICE","title":"D2Admin ICE","description":"支持多页模式，提供网络请求封装和假数据模拟，Cookie封装，数据持久化系统，主题系统，多国语，超过600个图标以及支持svg图标扩充。","homepage":"https://ice.d2admin.fairyever.com","categories":[],"repository":"https://github.com/ice-lab/vue-materials/tree/master/scaffolds/d2-admin-ice","source":{"type":"npm","npm":"@d2-admin/ice-scaffold","version":"1.3.7","registry":"http://registry.npmjs.com"},"dependencies":{"axios":"^0.17.1","babel-polyfill":"^6.26.0","better-scroll":"^1.12.1","dayjs":"^1.6.7","element-ui":"^2.4.4","flex.css":"^1.1.7","fuse.js":"^3.2.1","hotkeys-js":"^3.3.6","js-cookie":"^2.2.0","lodash":"^4.17.11","lowdb":"^1.0.0","mockjs":"^1.0.1-beta3","nprogress":"^0.2.0","particles.js":"^2.0.0","screenfull":"^3.3.2","ua-parser-js":"^0.7.18","vue":"^2.5.17","vue-i18n":"^7.4.2","vue-router":"^3.0.1","vuex":"^3.0.1"},"screenshot":"https://qiniucdn.fairyever.com/20181031190420.png","screenshots":["https://qiniucdn.fairyever.com/20181031190420.png"],"customConfig":null,"publishTime":"2018-07-09T11:29:28.870Z","updateTime":"2018-11-08T04:53:42.975Z"}]};

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;(function (main) {
  'use strict';

  /**
   * Parse or format dates
   * @class fecha
   */
  var fecha = {};
  var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
  var twoDigits = /\d\d?/;
  var threeDigits = /\d{3}/;
  var fourDigits = /\d{4}/;
  var word = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
  var literal = /\[([^]*?)\]/gm;
  var noop = function () {
  };

  function shorten(arr, sLen) {
    var newArr = [];
    for (var i = 0, len = arr.length; i < len; i++) {
      newArr.push(arr[i].substr(0, sLen));
    }
    return newArr;
  }

  function monthUpdate(arrName) {
    return function (d, v, i18n) {
      var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
      if (~index) {
        d.month = index;
      }
    };
  }

  function pad(val, len) {
    val = String(val);
    len = len || 2;
    while (val.length < len) {
      val = '0' + val;
    }
    return val;
  }

  var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  var monthNamesShort = shorten(monthNames, 3);
  var dayNamesShort = shorten(dayNames, 3);
  fecha.i18n = {
    dayNamesShort: dayNamesShort,
    dayNames: dayNames,
    monthNamesShort: monthNamesShort,
    monthNames: monthNames,
    amPm: ['am', 'pm'],
    DoFn: function DoFn(D) {
      return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
    }
  };

  var formatFlags = {
    D: function(dateObj) {
      return dateObj.getDate();
    },
    DD: function(dateObj) {
      return pad(dateObj.getDate());
    },
    Do: function(dateObj, i18n) {
      return i18n.DoFn(dateObj.getDate());
    },
    d: function(dateObj) {
      return dateObj.getDay();
    },
    dd: function(dateObj) {
      return pad(dateObj.getDay());
    },
    ddd: function(dateObj, i18n) {
      return i18n.dayNamesShort[dateObj.getDay()];
    },
    dddd: function(dateObj, i18n) {
      return i18n.dayNames[dateObj.getDay()];
    },
    M: function(dateObj) {
      return dateObj.getMonth() + 1;
    },
    MM: function(dateObj) {
      return pad(dateObj.getMonth() + 1);
    },
    MMM: function(dateObj, i18n) {
      return i18n.monthNamesShort[dateObj.getMonth()];
    },
    MMMM: function(dateObj, i18n) {
      return i18n.monthNames[dateObj.getMonth()];
    },
    YY: function(dateObj) {
      return String(dateObj.getFullYear()).substr(2);
    },
    YYYY: function(dateObj) {
      return pad(dateObj.getFullYear(), 4);
    },
    h: function(dateObj) {
      return dateObj.getHours() % 12 || 12;
    },
    hh: function(dateObj) {
      return pad(dateObj.getHours() % 12 || 12);
    },
    H: function(dateObj) {
      return dateObj.getHours();
    },
    HH: function(dateObj) {
      return pad(dateObj.getHours());
    },
    m: function(dateObj) {
      return dateObj.getMinutes();
    },
    mm: function(dateObj) {
      return pad(dateObj.getMinutes());
    },
    s: function(dateObj) {
      return dateObj.getSeconds();
    },
    ss: function(dateObj) {
      return pad(dateObj.getSeconds());
    },
    S: function(dateObj) {
      return Math.round(dateObj.getMilliseconds() / 100);
    },
    SS: function(dateObj) {
      return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
    },
    SSS: function(dateObj) {
      return pad(dateObj.getMilliseconds(), 3);
    },
    a: function(dateObj, i18n) {
      return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
    },
    A: function(dateObj, i18n) {
      return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
    },
    ZZ: function(dateObj) {
      var o = dateObj.getTimezoneOffset();
      return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
    }
  };

  var parseFlags = {
    D: [twoDigits, function (d, v) {
      d.day = v;
    }],
    Do: [new RegExp(twoDigits.source + word.source), function (d, v) {
      d.day = parseInt(v, 10);
    }],
    M: [twoDigits, function (d, v) {
      d.month = v - 1;
    }],
    YY: [twoDigits, function (d, v) {
      var da = new Date(), cent = +('' + da.getFullYear()).substr(0, 2);
      d.year = '' + (v > 68 ? cent - 1 : cent) + v;
    }],
    h: [twoDigits, function (d, v) {
      d.hour = v;
    }],
    m: [twoDigits, function (d, v) {
      d.minute = v;
    }],
    s: [twoDigits, function (d, v) {
      d.second = v;
    }],
    YYYY: [fourDigits, function (d, v) {
      d.year = v;
    }],
    S: [/\d/, function (d, v) {
      d.millisecond = v * 100;
    }],
    SS: [/\d{2}/, function (d, v) {
      d.millisecond = v * 10;
    }],
    SSS: [threeDigits, function (d, v) {
      d.millisecond = v;
    }],
    d: [twoDigits, noop],
    ddd: [word, noop],
    MMM: [word, monthUpdate('monthNamesShort')],
    MMMM: [word, monthUpdate('monthNames')],
    a: [word, function (d, v, i18n) {
      var val = v.toLowerCase();
      if (val === i18n.amPm[0]) {
        d.isPm = false;
      } else if (val === i18n.amPm[1]) {
        d.isPm = true;
      }
    }],
    ZZ: [/([\+\-]\d\d:?\d\d|Z)/, function (d, v) {
      if (v === 'Z') v = '+00:00';
      var parts = (v + '').match(/([\+\-]|\d\d)/gi), minutes;

      if (parts) {
        minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
        d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;
      }
    }]
  };
  parseFlags.dd = parseFlags.d;
  parseFlags.dddd = parseFlags.ddd;
  parseFlags.DD = parseFlags.D;
  parseFlags.mm = parseFlags.m;
  parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
  parseFlags.MM = parseFlags.M;
  parseFlags.ss = parseFlags.s;
  parseFlags.A = parseFlags.a;


  // Some common format strings
  fecha.masks = {
    default: 'ddd MMM DD YYYY HH:mm:ss',
    shortDate: 'M/D/YY',
    mediumDate: 'MMM D, YYYY',
    longDate: 'MMMM D, YYYY',
    fullDate: 'dddd, MMMM D, YYYY',
    shortTime: 'HH:mm',
    mediumTime: 'HH:mm:ss',
    longTime: 'HH:mm:ss.SSS'
  };

  /***
   * Format a date
   * @method format
   * @param {Date|number} dateObj
   * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'
   */
  fecha.format = function (dateObj, mask, i18nSettings) {
    var i18n = i18nSettings || fecha.i18n;

    if (typeof dateObj === 'number') {
      dateObj = new Date(dateObj);
    }

    if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {
      throw new Error('Invalid Date in fecha.format');
    }

    mask = fecha.masks[mask] || mask || fecha.masks['default'];

    var literals = [];

    // Make literals inactive by replacing them with ??
    mask = mask.replace(literal, function($0, $1) {
      literals.push($1);
      return '??';
    });
    // Apply formatting rules
    mask = mask.replace(token, function ($0) {
      return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);
    });
    // Inline literal values back into the formatted value
    return mask.replace(/\?\?/g, function() {
      return literals.shift();
    });
  };

  /**
   * Parse a date string into an object, changes - into /
   * @method parse
   * @param {string} dateStr Date string
   * @param {string} format Date parse format
   * @returns {Date|boolean}
   */
  fecha.parse = function (dateStr, format, i18nSettings) {
    var i18n = i18nSettings || fecha.i18n;

    if (typeof format !== 'string') {
      throw new Error('Invalid format in fecha.parse');
    }

    format = fecha.masks[format] || format;

    // Avoid regular expression denial of service, fail early for really long strings
    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
    if (dateStr.length > 1000) {
      return false;
    }

    var isValid = true;
    var dateInfo = {};
    format.replace(token, function ($0) {
      if (parseFlags[$0]) {
        var info = parseFlags[$0];
        var index = dateStr.search(info[0]);
        if (!~index) {
          isValid = false;
        } else {
          dateStr.replace(info[0], function (result) {
            info[1](dateInfo, result, i18n);
            dateStr = dateStr.substr(index + result.length);
            return result;
          });
        }
      }

      return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);
    });

    if (!isValid) {
      return false;
    }

    var today = new Date();
    if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
      dateInfo.hour = +dateInfo.hour + 12;
    } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
      dateInfo.hour = 0;
    }

    var date;
    if (dateInfo.timezoneOffset != null) {
      dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
      date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1,
        dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
    } else {
      date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1,
        dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
    }
    return date;
  };

  /* istanbul ignore next */
  if ( true && module.exports) {
    module.exports = fecha;
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return fecha;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this);


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {


var fs = __webpack_require__(11);

function exists (path, isFile, isDirectory) {
   try {
      var matches = false;
      var stat = fs.statSync(path);

      matches = matches || isFile && stat.isFile();
      matches = matches || isDirectory && stat.isDirectory();

      return matches;
   }
   catch (e) {
      if (e.code === 'ENOENT') {
         return false;
      }

      throw e;
   }
}

module.exports = function (path, type) {
   if (!type) {
      return exists(path, true, true);
   }

   return exists(path, type & 1, type & 2);
};

module.exports.FILE = 1;

module.exports.FOLDER = 2;


/***/ }),
/* 256 */
/***/ (function(module, exports) {


module.exports = BranchDeletion;

function BranchDeletion (branch, hash) {
   this.branch = branch;
   this.hash = hash;
   this.success = hash !== null;
}

BranchDeletion.deleteSuccessRegex = /(\S+)\s+\(\S+\s([^\)]+)\)/;
BranchDeletion.deleteErrorRegex = /^error[^']+'([^']+)'/;

BranchDeletion.parse = function (data, asArray) {
   var result;
   var branchDeletions = data.trim().split('\n').map(function (line) {
         if (result = BranchDeletion.deleteSuccessRegex.exec(line)) {
            return new BranchDeletion(result[1], result[2]);
         }
         else if (result = BranchDeletion.deleteErrorRegex.exec(line)) {
            return new BranchDeletion(result[1], null);
         }
      })
      .filter(Boolean);

   return asArray ? branchDeletions : branchDeletions.pop();
};


/***/ }),
/* 257 */
/***/ (function(module, exports) {


module.exports = BranchSummary;

function BranchSummary () {
   this.detached = false;
   this.current = '';
   this.all = [];
   this.branches = {};
}

BranchSummary.prototype.push = function (current, detached, name, commit, label) {
   if (current) {
      this.detached = detached;
      this.current = name;
   }
   this.all.push(name);
   this.branches[name] = {
      current: current,
      name: name,
      commit: commit,
      label: label
   };
};

BranchSummary.detachedRegex = /^(\*?\s+)\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/;
BranchSummary.branchRegex = /^(\*?\s+)(\S+)\s+([a-z0-9]+)\s(.*)$/;

BranchSummary.parse = function (commit) {
   var branchSummary = new BranchSummary();

   commit.split('\n')
      .forEach(function (line) {
         var detached = true;
         var branch = BranchSummary.detachedRegex.exec(line);
         if (!branch) {
            detached = false;
            branch = BranchSummary.branchRegex.exec(line);
         }

         if (branch) {
            branchSummary.push(
               branch[1].charAt(0) === '*',
               detached,
               branch[2],
               branch[3],
               branch[4]
            );
         }
      });

   return branchSummary;
};


/***/ }),
/* 258 */
/***/ (function(module, exports) {


module.exports = CommitSummary;

function CommitSummary () {
   this.branch = '';
   this.commit = '';
   this.summary = {
      changes: 0,
      insertions: 0,
      deletions: 0
   };
   this.author = null;
}

var COMMIT_BRANCH_MESSAGE_REGEX = /\[([^\s]+) ([^\]]+)/;
var COMMIT_AUTHOR_MESSAGE_REGEX = /\s*Author:\s(.+)/i;

function setBranchFromCommit (commitSummary, commitData) {
   if (commitData) {
      commitSummary.branch = commitData[1];
      commitSummary.commit = commitData[2];
   }
}

function setSummaryFromCommit (commitSummary, commitData) {
   if (commitSummary.branch && commitData) {
      commitSummary.summary.changes = commitData[1] || 0;
      commitSummary.summary.insertions = commitData[2] || 0;
      commitSummary.summary.deletions = commitData[3] || 0;
   }
}

function setAuthorFromCommit (commitSummary, commitData) {
   var parts = commitData[1].split('<');
   var email = parts.pop();

   if (email.indexOf('@') <= 0) {
      return;
   }

   commitSummary.author = {
      email: email.substr(0, email.length - 1),
      name: parts.join('<').trim()
   };
}

CommitSummary.parse = function (commit) {
   var lines = commit.trim().split('\n');
   var commitSummary = new CommitSummary();

   setBranchFromCommit(commitSummary, COMMIT_BRANCH_MESSAGE_REGEX.exec(lines.shift()));

   if (COMMIT_AUTHOR_MESSAGE_REGEX.test(lines[0])) {
      setAuthorFromCommit(commitSummary, COMMIT_AUTHOR_MESSAGE_REGEX.exec(lines.shift()));
   }

   setSummaryFromCommit(commitSummary, /(\d+)[^,]*(?:,\s*(\d+)[^,]*)?(?:,\s*(\d+))?/g.exec(lines.shift()));

   return commitSummary;
};


/***/ }),
/* 259 */
/***/ (function(module, exports) {


module.exports = DiffSummary;

/**
 * The DiffSummary is returned as a response to getting `git().status()`
 *
 * @constructor
 */
function DiffSummary () {
   this.files = [];
   this.insertions = 0;
   this.deletions = 0;
}

/**
 * Number of lines added
 * @type {number}
 */
DiffSummary.prototype.insertions = 0;

/**
 * Number of lines deleted
 * @type {number}
 */
DiffSummary.prototype.deletions = 0;

DiffSummary.parse = function (text) {
   var line, handler;

   var lines = text.trim().split('\n');
   var status = new DiffSummary();

   var summary = lines.pop();
   if (summary) {
      summary.trim().split(', ').slice(1).forEach(function (text) {
         var summary = /(\d+)\s([a-z]+)/.exec(text);
         if (summary) {
            status[summary[2].replace(/s$/, '') + 's'] = parseInt(summary[1], 10);
         }
      });
   }

   while (line = lines.shift()) {
      textFileChange(line, status.files) || binaryFileChange(line, status.files);
   }

   return status;
};

function textFileChange (line, files) {
   line = line.trim().match(/^(.+)\s+\|\s+(\d+)\s+([+\-]+)$/);
   if (line) {
      files.push({
         file: line[1].trim(),
         changes: parseInt(line[2], 10),
         insertions: line[3].replace(/\-/g, '').length,
         deletions: line[3].replace(/\+/g, '').length,
         binary: false
      });

      return true;
   }
}

function binaryFileChange (line, files) {
   line = line.match(/^(.+) \| Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)$/);
   if (line) {
      files.push({
         file: line[1].trim(),
         before: +line[2],
         after: +line[3],
         binary: true
      });
      return true;
   }
}


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function FetchSummary (raw) {
   this.raw = raw;

   this.remote = null;
   this.branches = [];
   this.tags = [];
}

FetchSummary.parsers = [
   [
      /From (.+)$/, function (fetchSummary, matches) {
         fetchSummary.remote = matches[0];
      }
   ],
   [
      /\* \[new branch\]\s+(\S+)\s*\-> (.+)$/, function (fetchSummary, matches) {
         fetchSummary.branches.push({
            name: matches[0],
            tracking: matches[1]
         });
      }
   ],
   [
      /\* \[new tag\]\s+(\S+)\s*\-> (.+)$/, function (fetchSummary, matches) {
         fetchSummary.tags.push({
            name: matches[0],
            tracking: matches[1]
         });
      }
   ]
];

FetchSummary.parse = function (data) {
   var fetchSummary = new FetchSummary(data);

   String(data)
      .trim()
      .split('\n')
      .forEach(function (line) {
         var original = line.trim();
         FetchSummary.parsers.some(function (parser) {
            var parsed = parser[0].exec(original);
            if (parsed) {
               parser[1](fetchSummary, parsed.slice(1));
               return true;
            }
         });
      });

   return fetchSummary;
};

module.exports = FetchSummary;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = MergeSummary;

var PullSummary = __webpack_require__(162);

function MergeConflict (reason, file) {
   this.reason = reason;
   this.file = file;
}

MergeConflict.prototype.toString = function () {
   return this.file + ':' + this.reason;
};

function MergeSummary () {
   PullSummary.call(this);

   this.conflicts = [];
   this.merges = [];
}

MergeSummary.prototype = Object.create(PullSummary.prototype);

MergeSummary.prototype.result = 'success';

MergeSummary.prototype.toString = function () {
   if (this.conflicts.length) {
      return 'CONFLICTS: ' + this.conflicts.join(', ');
   }
   return 'OK';
};

Object.defineProperty(MergeSummary.prototype, 'failed', {
   get: function () {
      return this.conflicts.length > 0;
   }
});

MergeSummary.parsers = [
   {
      test: /^Auto-merging\s+(.+)$/,
      handle: function (result, mergeSummary) {
         mergeSummary.merges.push(result[1]);
      }
   },
   {
      test: /^CONFLICT\s+\((.+)\).+ in (.+)$/,
      handle: function (result, mergeSummary) {
         mergeSummary.conflicts.push(new MergeConflict(result[1], result[2]));
      }
   },
   {
      test: /^Automatic merge failed;\s+(.+)$/,
      handle: function (result, mergeSummary) {
         mergeSummary.reason = result[1];
      }
   }
];

MergeSummary.parse = function (output) {
   let mergeSummary = new MergeSummary();

   output.trim().split('\n').forEach(function (line) {
      for (var i = 0, iMax = MergeSummary.parsers.length; i < iMax; i++) {
         let parser = MergeSummary.parsers[i];

         var result = parser.test.exec(line);
         if (result) {
            parser.handle(result, mergeSummary);
            break;
         }
      }
   });

   let pullSummary = PullSummary.parse(output);
   if (pullSummary.summary.changes) {
      Object.assign(mergeSummary, pullSummary);
   }

   return mergeSummary;
};


/***/ }),
/* 262 */
/***/ (function(module, exports) {


module.exports = MoveSummary;

/**
 * The MoveSummary is returned as a response to getting `git().status()`
 *
 * @constructor
 */
function MoveSummary () {
   this.moves = [];
   this.sources = {};
}

MoveSummary.SUMMARY_REGEX = /^Renaming (.+) to (.+)$/;

MoveSummary.parse = function (text) {
   var lines = text.split('\n');
   var summary = new MoveSummary();

   for (var i = 0, iMax = lines.length, line; i < iMax; i++) {
      line = MoveSummary.SUMMARY_REGEX.exec(lines[i].trim());

      if (line) {
         summary.moves.push({
            from: line[1],
            to: line[2]
         });
      }
   }

   return summary;
};


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {




var FileStatusSummary = __webpack_require__(161);

module.exports = StatusSummary;

/**
 * The StatusSummary is returned as a response to getting `git().status()`
 *
 * @constructor
 */
function StatusSummary () {
   this.not_added = [];
   this.conflicted = [];
   this.created = [];
   this.deleted = [];
   this.modified = [];
   this.renamed = [];
   this.files = [];
   this.staged = [];
}


/**
 * Number of commits ahead of the tracked branch
 * @type {number}
 */
StatusSummary.prototype.ahead = 0;

/**
 * Number of commits behind the tracked branch
 * @type {number}
 */
StatusSummary.prototype.behind = 0;

/**
 * Name of the current branch
 * @type {null}
 */
StatusSummary.prototype.current = null;

/**
 * Name of the branch being tracked
 * @type {string}
 */
StatusSummary.prototype.tracking = null;

/**
 * All files represented as an array of objects containing the `path` and status in `index` and
 * in the `working_dir`.
 *
 * @type {Array}
 */
StatusSummary.prototype.files = null;

/**
 * Gets whether this StatusSummary represents a clean working branch.
 *
 * @return {boolean}
 */
StatusSummary.prototype.isClean = function () {
   return 0 === Object.keys(this).filter(function (name) {
      return Array.isArray(this[name]) && this[name].length;
   }, this).length;
};

StatusSummary.parsers = {
   '##': function (line, status) {
      var aheadReg = /ahead (\d+)/;
      var behindReg = /behind (\d+)/;
      var currentReg = /^(.+?(?=(?:\.{3}|\s|$)))/;
      var trackingReg = /\.{3}(\S*)/;
      var regexResult;

      regexResult = aheadReg.exec(line);
      status.ahead = regexResult && +regexResult[1] || 0;

      regexResult = behindReg.exec(line);
      status.behind = regexResult && +regexResult[1] || 0;

      regexResult = currentReg.exec(line);
      status.current = regexResult && regexResult[1];

      regexResult = trackingReg.exec(line);
      status.tracking = regexResult && regexResult[1];
   },

   '??': function (line, status) {
      status.not_added.push(line);
   },

   A: function (line, status) {
      status.created.push(line);
   },

   AM: function (line, status) {
      status.created.push(line);
   },

   D: function (line, status) {
      status.deleted.push(line);
   },

   M: function (line, status, indexState) {
      status.modified.push(line);

      if (indexState === 'M') {
         status.staged.push(line);
      }
   },

   R: function (line, status) {
      var detail = /^(.+) -> (.+)$/.exec(line) || [null, line, line];

      status.renamed.push({
         from: detail[1],
         to: detail[2]
      });
   },

   UU: function (line, status) {
      status.conflicted.push(line);
   }
};

StatusSummary.parsers.MM = StatusSummary.parsers.M;

StatusSummary.parse = function (text) {
   var file, linestr;

   var lines = text.trim().split('\n');
   var status = new StatusSummary();

   while (linestr = lines.shift()) {
      file = splitLine(linestr);

      if (!file) {
         continue;
      }

      if (file.handler) {
         file.handler(file.path, status, file.index, file.workingDir);
      }

      if (file.code !== '##') {
         status.files.push(new FileStatusSummary(file.path, file.index, file.workingDir));
      }
   }

   return status;
};


function splitLine (lineStr) {
   var line = lineStr.trim().match(/(..?)(\s+)(.*)/);
   if (!line || !line[1].trim()) {
      line = lineStr.trim().match(/(..?)\s+(.*)/);
   }

   if (!line) {
      return;
   }

   var code = line[1];
   if (line[2].length > 1) {
      code += ' ';
   }
   if (code.length === 1 && line[2].length === 1) {
      code = ' ' + code;
   }

   return {
      raw: code,
      code: code.trim(),
      index: code.charAt(0),
      workingDir: code.charAt(1),
      handler: StatusSummary.parsers[code.trim()],
      path: line[3]
   };
}


/***/ }),
/* 264 */
/***/ (function(module, exports) {


module.exports = TagList;

function TagList (tagList, latest) {
   this.latest = latest;
   this.all = tagList
}

TagList.parse = function (data, customSort) {
   var number = function (input) {
      if (typeof input === 'string') {
         return parseInt(input.replace(/^\D+/g, ''), 10) || 0;
      }

      return 0;
   };

   var tags = data
      .trim()
      .split('\n')
      .map(function (item) { return item.trim(); })
      .filter(Boolean);

   if (!customSort) {
      tags.sort(function (tagA, tagB) {
         var partsA = tagA.split('.');
         var partsB = tagB.split('.');

         if (partsA.length === 1 || partsB.length === 1) {
            return tagA - tagB > 0 ? 1 : -1;
         }

         for (var i = 0, l = Math.max(partsA.length, partsB.length); i < l; i++) {
            var a = number(partsA[i]);
            var b = number(partsB[i]);

            var diff = a - b;
            if (diff) {
               return diff > 0 ? 1 : -1;
            }
         }

         return 0;
      });
   }

   var latest = customSort ? tags[0] : tags.filter(function (tag) { return tag.indexOf('.') >= 0; }).pop();

   return new TagList(tags, latest);
};


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(265);
// 组件依赖样式
__webpack_require__(69);

// 组件自身样式
__webpack_require__(550);


/***/ }),
/* 266 */,
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
 *  base64.js
 *
 *  Licensed under the BSD 3-Clause License.
 *    http://opensource.org/licenses/BSD-3-Clause
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 */
;(function (global, factory) {
     true
        ? module.exports = factory(global)
        : undefined
}((
    typeof self !== 'undefined' ? self
        : typeof window !== 'undefined' ? window
        : typeof global !== 'undefined' ? global
: this
), function(global) {
    'use strict';
    // existing version for noConflict()
    global = global || {};
    var _Base64 = global.Base64;
    var version = "2.5.1";
    // if node.js and NOT React Native, we use Buffer
    var buffer;
    if ( true && module.exports) {
        try {
            buffer = eval("require('buffer').Buffer");
        } catch (err) {
            buffer = undefined;
        }
    }
    // constants
    var b64chars
        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var b64tab = function(bin) {
        var t = {};
        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
        return t;
    }(b64chars);
    var fromCharCode = String.fromCharCode;
    // encoder stuff
    var cb_utob = function(c) {
        if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 0x80 ? c
                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))
                                + fromCharCode(0x80 | (cc & 0x3f)))
                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))
                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                   + fromCharCode(0x80 | ( cc         & 0x3f)));
        } else {
            var cc = 0x10000
                + (c.charCodeAt(0) - 0xD800) * 0x400
                + (c.charCodeAt(1) - 0xDC00);
            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                    + fromCharCode(0x80 | ( cc         & 0x3f)));
        }
    };
    var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    var utob = function(u) {
        return u.replace(re_utob, cb_utob);
    };
    var cb_encode = function(ccc) {
        var padlen = [0, 2, 1][ccc.length % 3],
        ord = ccc.charCodeAt(0) << 16
            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
        chars = [
            b64chars.charAt( ord >>> 18),
            b64chars.charAt((ord >>> 12) & 63),
            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
        ];
        return chars.join('');
    };
    var btoa = global.btoa ? function(b) {
        return global.btoa(b);
    } : function(b) {
        return b.replace(/[\s\S]{1,3}/g, cb_encode);
    };
    var _encode = buffer ?
        buffer.from && Uint8Array && buffer.from !== Uint8Array.from
        ? function (u) {
            return (u.constructor === buffer.constructor ? u : buffer.from(u))
                .toString('base64')
        }
        :  function (u) {
            return (u.constructor === buffer.constructor ? u : new  buffer(u))
                .toString('base64')
        }
        : function (u) { return btoa(utob(u)) }
    ;
    var encode = function(u, urisafe) {
        return !urisafe
            ? _encode(String(u))
            : _encode(String(u)).replace(/[+\/]/g, function(m0) {
                return m0 == '+' ? '-' : '_';
            }).replace(/=/g, '');
    };
    var encodeURI = function(u) { return encode(u, true) };
    // decoder stuff
    var re_btou = new RegExp([
        '[\xC0-\xDF][\x80-\xBF]',
        '[\xE0-\xEF][\x80-\xBF]{2}',
        '[\xF0-\xF7][\x80-\xBF]{3}'
    ].join('|'), 'g');
    var cb_btou = function(cccc) {
        switch(cccc.length) {
        case 4:
            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                |    ((0x3f & cccc.charCodeAt(1)) << 12)
                |    ((0x3f & cccc.charCodeAt(2)) <<  6)
                |     (0x3f & cccc.charCodeAt(3)),
            offset = cp - 0x10000;
            return (fromCharCode((offset  >>> 10) + 0xD800)
                    + fromCharCode((offset & 0x3FF) + 0xDC00));
        case 3:
            return fromCharCode(
                ((0x0f & cccc.charCodeAt(0)) << 12)
                    | ((0x3f & cccc.charCodeAt(1)) << 6)
                    |  (0x3f & cccc.charCodeAt(2))
            );
        default:
            return  fromCharCode(
                ((0x1f & cccc.charCodeAt(0)) << 6)
                    |  (0x3f & cccc.charCodeAt(1))
            );
        }
    };
    var btou = function(b) {
        return b.replace(re_btou, cb_btou);
    };
    var cb_decode = function(cccc) {
        var len = cccc.length,
        padlen = len % 4,
        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)
            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)
            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)
            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),
        chars = [
            fromCharCode( n >>> 16),
            fromCharCode((n >>>  8) & 0xff),
            fromCharCode( n         & 0xff)
        ];
        chars.length -= [0, 0, 2, 1][padlen];
        return chars.join('');
    };
    var _atob = global.atob ? function(a) {
        return global.atob(a);
    } : function(a){
        return a.replace(/\S{1,4}/g, cb_decode);
    };
    var atob = function(a) {
        return _atob(String(a).replace(/[^A-Za-z0-9\+\/]/g, ''));
    };
    var _decode = buffer ?
        buffer.from && Uint8Array && buffer.from !== Uint8Array.from
        ? function(a) {
            return (a.constructor === buffer.constructor
                    ? a : buffer.from(a, 'base64')).toString();
        }
        : function(a) {
            return (a.constructor === buffer.constructor
                    ? a : new buffer(a, 'base64')).toString();
        }
        : function(a) { return btou(_atob(a)) };
    var decode = function(a){
        return _decode(
            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })
                .replace(/[^A-Za-z0-9\+\/]/g, '')
        );
    };
    var noConflict = function() {
        var Base64 = global.Base64;
        global.Base64 = _Base64;
        return Base64;
    };
    // export Base64
    global.Base64 = {
        VERSION: version,
        atob: atob,
        btoa: btoa,
        fromBase64: decode,
        toBase64: encode,
        utob: utob,
        encode: encode,
        encodeURI: encodeURI,
        btou: btou,
        decode: decode,
        noConflict: noConflict,
        __buffer__: buffer
    };
    // if ES5 is available, make Base64.extendString() available
    if (typeof Object.defineProperty === 'function') {
        var noEnum = function(v){
            return {value:v,enumerable:false,writable:true,configurable:true};
        };
        global.Base64.extendString = function () {
            Object.defineProperty(
                String.prototype, 'fromBase64', noEnum(function () {
                    return decode(this)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64', noEnum(function (urisafe) {
                    return encode(this, urisafe)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64URI', noEnum(function () {
                    return encode(this, true)
                }));
        };
    }
    //
    // export Base64 to the namespace
    //
    if (global['Meteor']) { // Meteor.js
        Base64 = global.Base64;
    }
    // module.exports and AMD are mutually exclusive.
    // module.exports has precedence.
    if ( true && module.exports) {
        module.exports.Base64 = global.Base64;
    }
    else if (true) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){ return global.Base64 }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
    // that's it!
    return {Base64: global.Base64}
}));


/***/ }),
/* 268 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.6.3
var array;

module.exports = array = {
  /*
  	Tries to turn anything into an array.
  */

  from: function(r) {
    return Array.prototype.slice.call(r);
  },
  /*
  	Clone of an array. Properties will be shallow copies.
  */

  simpleClone: function(a) {
    return a.slice(0);
  },
  shallowEqual: function(a1, a2) {
    var i, val, _i, _len;
    if (!(Array.isArray(a1) && Array.isArray(a2) && a1.length === a2.length)) {
      return false;
    }
    for (i = _i = 0, _len = a1.length; _i < _len; i = ++_i) {
      val = a1[i];
      if (a2[i] !== val) {
        return false;
      }
    }
    return true;
  },
  pluck: function(a, i) {
    var index, value, _i, _len;
    if (a.length < 1) {
      return a;
    }
    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
      value = a[index];
      if (index > i) {
        a[index - 1] = a[index];
      }
    }
    a.length = a.length - 1;
    return a;
  },
  pluckItem: function(a, item) {
    var index, removed, value, _i, _len;
    if (a.length < 1) {
      return a;
    }
    removed = 0;
    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
      value = a[index];
      if (value === item) {
        removed++;
        continue;
      }
      if (removed !== 0) {
        a[index - removed] = a[index];
      }
    }
    if (removed > 0) {
      a.length = a.length - removed;
    }
    return a;
  },
  pluckOneItem: function(a, item) {
    var index, reached, value, _i, _len;
    if (a.length < 1) {
      return a;
    }
    reached = false;
    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
      value = a[index];
      if (!reached) {
        if (value === item) {
          reached = true;
          continue;
        }
      } else {
        a[index - 1] = a[index];
      }
    }
    if (reached) {
      a.length = a.length - 1;
    }
    return a;
  },
  pluckByCallback: function(a, cb) {
    var index, removed, value, _i, _len;
    if (a.length < 1) {
      return a;
    }
    removed = 0;
    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
      value = a[index];
      if (cb(value, index)) {
        removed++;
        continue;
      }
      if (removed !== 0) {
        a[index - removed] = a[index];
      }
    }
    if (removed > 0) {
      a.length = a.length - removed;
    }
    return a;
  },
  pluckMultiple: function(array, indexesToRemove) {
    var i, removedSoFar, _i, _len;
    if (array.length < 1) {
      return array;
    }
    removedSoFar = 0;
    indexesToRemove.sort();
    for (_i = 0, _len = indexesToRemove.length; _i < _len; _i++) {
      i = indexesToRemove[_i];
      this.pluck(array, i - removedSoFar);
      removedSoFar++;
    }
    return array;
  },
  injectByCallback: function(a, toInject, shouldInject) {
    var i, len, val, valA, valB, _i, _len;
    valA = null;
    valB = null;
    len = a.length;
    if (len < 1) {
      a.push(toInject);
      return a;
    }
    for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
      val = a[i];
      valA = valB;
      valB = val;
      if (shouldInject(valA, valB, toInject)) {
        return a.splice(i, 0, toInject);
      }
    }
    a.push(toInject);
    return a;
  },
  injectInIndex: function(a, index, toInject) {
    var i, len, toPut, toPutNext;
    len = a.length;
    i = index;
    if (len < 1) {
      a.push(toInject);
      return a;
    }
    toPut = toInject;
    toPutNext = null;
    for(; i <= len; i++){

			toPutNext = a[i];

			a[i] = toPut;

			toPut = toPutNext;

		};
    return null;
  }
};


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

var Tokenizer = __webpack_require__(270);

/*
	Options:

	xmlMode: Special behavior for script/style tags (true by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

var formTags = {
	input: true,
	option: true,
	optgroup: true,
	select: true,
	button: true,
	datalist: true,
	textarea: true
};

var openImpliesClose = {
	tr      : { tr:true, th:true, td:true },
	th      : { th:true },
	td      : { thead:true, td:true },
	body    : { head:true, link:true, script:true },
	li      : { li:true },
	p       : { p:true },
	select  : formTags,
	input   : formTags,
	output  : formTags,
	button  : formTags,
	datalist: formTags,
	textarea: formTags,
	option  : { option:true },
	optgroup: { optgroup:true }
};

var voidElements = {
	__proto__: null,
	area: true,
	base: true,
	basefont: true,
	br: true,
	col: true,
	command: true,
	embed: true,
	frame: true,
	hr: true,
	img: true,
	input: true,
	isindex: true,
	keygen: true,
	link: true,
	meta: true,
	param: true,
	source: true,
	track: true,
	wbr: true
};

var re_nameEnd = /\s|\//;

function Parser(cbs, options){
	this._options = options || {};
	this._cbs = cbs || {};

	this._tagname = "";
	this._attribname = "";
	this._attribvalue = "";
	this._attribs = null;
	this._stack = [];
	this._done = false;

	this.startIndex = 0;
	this.endIndex = null;

	this._tokenizer = new Tokenizer(options, this);
}

__webpack_require__(10).inherits(Parser, __webpack_require__(32).EventEmitter);

Parser.prototype._updatePosition = function(initialOffset){
	if(this.endIndex === null){
		this.startIndex = this._tokenizer._sectionStart <= initialOffset ? 0 : this._tokenizer._sectionStart - initialOffset;
	}
	this.startIndex = this.endIndex + 1;
	this.endIndex = this._tokenizer._index;
};

//Tokenizer event handlers
Parser.prototype.ontext = function(data){
	this._updatePosition(1);
	this.endIndex--;

	if(this._cbs.ontext) this._cbs.ontext(data);
};

Parser.prototype.onopentagname = function(name){
	if(!(this._options.xmlMode || "lowerCaseTags" in this._options) || this._options.lowerCaseTags){
		name = name.toLowerCase();
	}

	this._tagname = name;

	if (!this._options.xmlMode && name in openImpliesClose) {
		for(
			var el;
			(el = this._stack[this._stack.length-1]) in openImpliesClose[name];
			this.onclosetag(el)
		);
	}

	if(this._options.xmlMode || !(name in voidElements)){
		this._stack.push(name);
	}

	if(this._cbs.onopentagname) this._cbs.onopentagname(name);
	if(this._cbs.onopentag) this._attribs = {};
};

Parser.prototype.onopentagend = function(){
	this._updatePosition(1);
    
	if(this._attribs){
		if(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
		this._attribs = null;
	}
    
	if(!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements){
		this._cbs.onclosetag(this._tagname);
	}
    
	this._tagname = "";
};

Parser.prototype.onclosetag = function(name){
	this._updatePosition(1);

	if(!(this._options.xmlMode || "lowerCaseTags" in this._options) || this._options.lowerCaseTags){
		name = name.toLowerCase();
	}

	if(this._stack.length && (!(name in voidElements) || this._options.xmlMode)){
		var pos = this._stack.lastIndexOf(name);
		if(pos !== -1){
			if(this._cbs.onclosetag){
				pos = this._stack.length - pos;
				while(pos--) this._cbs.onclosetag(this._stack.pop());
			}
			else this._stack.length = pos;
		} else if(name === "p" && !this._options.xmlMode){
			this.onopentagname(name);
			this._closeCurrentTag();
		}
	} else if(!this._options.xmlMode && (name === "br" || name === "p")){
		this.onopentagname(name);
		this._closeCurrentTag();
	}
};

Parser.prototype.onselfclosingtag = function(){
	if(this._options.xmlMode){
		this._closeCurrentTag();
	} else {
		this.onopentagend();
	}
};

Parser.prototype._closeCurrentTag = function(){
	var name = this._tagname;

	this.onopentagend();

	//self-closing tags will be on the top of the stack
	//(cheaper check than in onclosetag)
	if(this._stack[this._stack.length-1] === name){
		if(this._cbs.onclosetag){
			this._cbs.onclosetag(name);
		}
		this._stack.pop();
	}
};

Parser.prototype.onattribname = function(name){
	if(!(this._options.xmlMode || "lowerCaseAttributeNames" in this._options) || this._options.lowerCaseAttributeNames){
		name = name.toLowerCase();
	}
	this._attribname = name;
};

Parser.prototype.onattribdata = function(value){
	this._attribvalue += value;
};

Parser.prototype.onattribend = function(){
	if(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
	if(
		this._attribs &&
		!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
	){
		this._attribs[this._attribname] = this._attribvalue;
	}
	this._attribname = "";
	this._attribvalue = "";
};

Parser.prototype.ondeclaration = function(value){
	if(this._cbs.onprocessinginstruction){
		var idx = value.search(re_nameEnd),
		    name = idx < 0 ? value : value.substr(0, idx);

		if(!(this._options.xmlMode || "lowerCaseTags" in this._options) || this._options.lowerCaseTags){
			name = name.toLowerCase();
		}
		this._cbs.onprocessinginstruction("!" + name, "!" + value);
	}
};

Parser.prototype.onprocessinginstruction = function(value){
	if(this._cbs.onprocessinginstruction){
		var idx = value.search(re_nameEnd),
		    name = idx < 0 ? value : value.substr(0, idx);

		if(!(this._options.xmlMode || "lowerCaseTags" in this._options) || this._options.lowerCaseTags){
			name = name.toLowerCase();
		}
		this._cbs.onprocessinginstruction("?" + name, "?" + value);
	}
};

Parser.prototype.oncomment = function(value){
	this._updatePosition(4);

	if(this._cbs.oncomment) this._cbs.oncomment(value);
	if(this._cbs.oncommentend) this._cbs.oncommentend();
};

Parser.prototype.oncdata = function(value){
	this._updatePosition(1);

	if(this._options.xmlMode){
		if(this._cbs.oncdatastart) this._cbs.oncdatastart();
		if(this._cbs.ontext) this._cbs.ontext(value);
		if(this._cbs.oncdataend) this._cbs.oncdataend();
	} else {
		this.oncomment("[CDATA[" + value + "]]");
	}
};

Parser.prototype.onerror = function(err){
	if(this._cbs.onerror) this._cbs.onerror(err);
};

Parser.prototype.onend = function(){
	if(this._cbs.onclosetag){
		for(
			var i = this._stack.length;
			i > 0;
			this._cbs.onclosetag(this._stack[--i])
		);
	}
	if(this._cbs.onend) this._cbs.onend();
};


//Resets the parser to a blank state, ready to parse a new HTML document
Parser.prototype.reset = function(){
	if(this._cbs.onreset) this._cbs.onreset();
	this._tokenizer.reset();

	this._tagname = "";
	this._attribname = "";
	this._attribs = null;
	this._stack = [];
	this._done = false;
};

//Parses a complete HTML document and pushes it to the handler
Parser.prototype.parseComplete = function(data){
	this.reset();
	this.end(data);
};

Parser.prototype.write = function(chunk){
	if(this._done) this.onerror(Error(".write() after done!"));
	this._tokenizer.write(chunk);
};

Parser.prototype.end = function(chunk){
	if(this._done) this.onerror(Error(".end() after done!"));
	this._tokenizer.end(chunk);
	this._done = true;
};

//alias for backwards compat
Parser.prototype.parseChunk = Parser.prototype.write;
Parser.prototype.done = Parser.prototype.end;

module.exports = Parser;


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = Tokenizer;

var entityMap = __webpack_require__(575),
    legacyMap = __webpack_require__(576),
    xmlMap    = __webpack_require__(577),
    decodeMap = __webpack_require__(578),

    i = 0,

    TEXT                      = i++,
    BEFORE_TAG_NAME           = i++, //after <
    IN_TAG_NAME               = i++,
    IN_SELF_CLOSING_TAG       = i++,
    BEFORE_CLOSING_TAG_NAME   = i++,
    IN_CLOSING_TAG_NAME       = i++,
    AFTER_CLOSING_TAG_NAME    = i++,

    //attributes
    BEFORE_ATTRIBUTE_NAME     = i++,
    IN_ATTRIBUTE_NAME         = i++,
    AFTER_ATTRIBUTE_NAME      = i++,
    BEFORE_ATTRIBUTE_VALUE    = i++,
    IN_ATTRIBUTE_VALUE_DQ     = i++, // "
    IN_ATTRIBUTE_VALUE_SQ     = i++, // '
    IN_ATTRIBUTE_VALUE_NQ     = i++,

    //declarations
    BEFORE_DECLARATION        = i++, // !
    IN_DECLARATION            = i++,

    //processing instructions
    IN_PROCESSING_INSTRUCTION = i++, // ?

    //comments
    BEFORE_COMMENT            = i++,
    IN_COMMENT                = i++,
    AFTER_COMMENT_1           = i++,
    AFTER_COMMENT_2           = i++,

    //cdata
    BEFORE_CDATA_1            = i++, // [
    BEFORE_CDATA_2            = i++, // C
    BEFORE_CDATA_3            = i++, // D
    BEFORE_CDATA_4            = i++, // A
    BEFORE_CDATA_5            = i++, // T
    BEFORE_CDATA_6            = i++, // A
    IN_CDATA                  = i++,// [
    AFTER_CDATA_1             = i++, // ]
    AFTER_CDATA_2             = i++, // ]

    //special tags
    BEFORE_SPECIAL            = i++, //S
    BEFORE_SPECIAL_END        = i++,   //S

    BEFORE_SCRIPT_1           = i++, //C
    BEFORE_SCRIPT_2           = i++, //R
    BEFORE_SCRIPT_3           = i++, //I
    BEFORE_SCRIPT_4           = i++, //P
    BEFORE_SCRIPT_5           = i++, //T
    AFTER_SCRIPT_1            = i++, //C
    AFTER_SCRIPT_2            = i++, //R
    AFTER_SCRIPT_3            = i++, //I
    AFTER_SCRIPT_4            = i++, //P
    AFTER_SCRIPT_5            = i++, //T

    BEFORE_STYLE_1            = i++, //T
    BEFORE_STYLE_2            = i++, //Y
    BEFORE_STYLE_3            = i++, //L
    BEFORE_STYLE_4            = i++, //E
    AFTER_STYLE_1             = i++, //T
    AFTER_STYLE_2             = i++, //Y
    AFTER_STYLE_3             = i++, //L
    AFTER_STYLE_4             = i++, //E

    BEFORE_ENTITY             = i++, //&
    BEFORE_NUMERIC_ENTITY     = i++, //#
    IN_NAMED_ENTITY           = i++,
    IN_NUMERIC_ENTITY         = i++,
    IN_HEX_ENTITY             = i++, //X

    j = 0,

    SPECIAL_NONE              = j++,
    SPECIAL_SCRIPT            = j++,
    SPECIAL_STYLE             = j++;

function whitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function ifElseState(upper, SUCCESS, FAILURE){
	var lower = upper.toLowerCase();

	if(upper === lower){
		return function(c){
			this._state = c === lower ? SUCCESS : FAILURE;
		};
	} else {
		return function(c){
			this._state = (c === lower || c === upper) ? SUCCESS : FAILURE;
		};
	}
}

function consumeSpecialNameChar(upper, NEXT_STATE){
	var lower = upper.toLowerCase();

	return function(c){
		if(c === lower || c === upper){
			this._state = NEXT_STATE;
		} else {
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		}
	};
}

function Tokenizer(options, cbs){
	this._state = TEXT;
	this._buffer = "";
	this._sectionStart = 0;
	this._index = 0;
	this._baseState = TEXT;
	this._special = SPECIAL_NONE;
	this._cbs = cbs;
	this._running = true;
	this._xmlMode = !!(options && options.xmlMode);
	this._decodeEntities = !!(options && options.decodeEntities);
}

Tokenizer.prototype._stateText = function(c){
	if(c === "<"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._state = BEFORE_TAG_NAME;
		this._sectionStart = this._index;
	} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === "&"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._baseState = TEXT;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeTagName = function(c){
	if(c === "/"){
		this._state = BEFORE_CLOSING_TAG_NAME;
	} else if(c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
		this._state = TEXT;
	} else if(c === "!"){
		this._state = BEFORE_DECLARATION;
		this._sectionStart = this._index + 1;
	} else if(c === "?"){
		this._state = IN_PROCESSING_INSTRUCTION;
		this._sectionStart = this._index + 1;
	} else if(c === "<"){
		this._cbs.ontext(this._getSection());
		this._sectionStart = this._index;
	} else {
		this._state = (!this._xmlMode && (c === "s" || c === "S")) ?
						BEFORE_SPECIAL : IN_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInTagName = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._emitToken("onopentagname");
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateBeforeCloseingTagName = function(c){
	if(whitespace(c));
	else if(c === ">"){
		this._state = TEXT;
	} else if(this._special !== SPECIAL_NONE){
		if(c === "s" || c === "S"){
			this._state = BEFORE_SPECIAL_END;
		} else {
			this._state = TEXT;
			this._index--;
		}
	} else {
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInCloseingTagName = function(c){
	if(c === ">" || whitespace(c)){
		this._emitToken("onclosetag");
		this._state = AFTER_CLOSING_TAG_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterCloseingTagName = function(c){
	//skip everything until ">"
	if(c === ">"){
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeAttributeName = function(c){
	if(c === ">"){
		this._cbs.onopentagend();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c === "/"){
		this._state = IN_SELF_CLOSING_TAG;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInSelfClosingTag = function(c){
	if(c === ">"){
		this._cbs.onselfclosingtag();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateInAttributeName = function(c){
	if(c === "=" || c === "/" || c === ">" || whitespace(c)){
		if(this._index > this._sectionStart){
			this._cbs.onattribname(this._getSection());
		}
		this._sectionStart = -1;
		this._state = AFTER_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterAttributeName = function(c){
	if(c === "="){
		this._state = BEFORE_ATTRIBUTE_VALUE;
	} else if(c === "/" || c === ">"){
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(!whitespace(c)){
		this._cbs.onattribend();
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeAttributeValue = function(c){
	if(c === "\""){
		this._state = IN_ATTRIBUTE_VALUE_DQ;
		this._sectionStart = this._index + 1;
	} else if(c === "'"){
		this._state = IN_ATTRIBUTE_VALUE_SQ;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_VALUE_NQ;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){
	if(c === "\""){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){
	if(c === "'"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c){
	if(whitespace(c) || c === ">"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeDeclaration = function(c){
	this._state = c === "[" ? BEFORE_CDATA_1 :
					c === "-" ? BEFORE_COMMENT :
						IN_DECLARATION;
};

Tokenizer.prototype._stateInDeclaration = function(c){
	if(c === ">"){
		this._cbs.ondeclaration(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateInProcessingInstruction = function(c){
	if(c === ">"){
		this._cbs.onprocessinginstruction(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeComment = function(c){
	if(c === "-"){
		this._state = IN_COMMENT;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
	}
};

Tokenizer.prototype._stateInComment = function(c){
	if(c === "-") this._state = AFTER_COMMENT_1;
};

Tokenizer.prototype._stateAfterComment1 = ifElseState("-", AFTER_COMMENT_2, IN_COMMENT);

Tokenizer.prototype._stateAfterComment2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "-"){
		this._state = IN_COMMENT;
	}
	// else: stay in AFTER_COMMENT_2 (`--->`)
};

Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

Tokenizer.prototype._stateBeforeCdata6 = function(c){
	if(c === "["){
		this._state = IN_CDATA;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
	}
};

Tokenizer.prototype._stateInCdata = function(c){
	if(c === "]") this._state = AFTER_CDATA_1;
};

Tokenizer.prototype._stateAfterCdata1 = ifElseState("]", AFTER_CDATA_2, IN_CDATA);

Tokenizer.prototype._stateAfterCdata2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if (c !== "]") {
		this._state = IN_CDATA;
	}
	//else: stay in AFTER_CDATA_2 (`]]]>`)
};

Tokenizer.prototype._stateBeforeSpecial = function(c){
	if(c === "c" || c === "C"){
		this._state = BEFORE_SCRIPT_1;
	} else if(c === "t" || c === "T"){
		this._state = BEFORE_STYLE_1;
	} else {
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	}
};

Tokenizer.prototype._stateBeforeSpecialEnd = function(c){
	if(this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")){
		this._state = AFTER_SCRIPT_1;
	} else if(this._special === SPECIAL_STYLE && (c === "t" || c === "T")){
		this._state = AFTER_STYLE_1;
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

Tokenizer.prototype._stateBeforeScript5 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_SCRIPT;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

Tokenizer.prototype._stateAfterScript5 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 6;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

Tokenizer.prototype._stateBeforeStyle4 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_STYLE;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

Tokenizer.prototype._stateAfterStyle4 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 5;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

//for entities within attributes
Tokenizer.prototype._parseNamedEntityStrict = function(){
	//offset = 1
	if(this._sectionStart + 1 < this._index){
		var entity = this._buffer.substring(this._sectionStart + 1, this._index),
		    map = this._xmlMode ? xmlMap : entityMap;

		if(map.hasOwnProperty(entity)){
			this._emitPartial(map[entity]);
			this._sectionStart = this._index + 1;
		}
	}
};


//parses legacy entities (without trailing semicolon)
Tokenizer.prototype._parseLegacyEntity = function(){
	var start = this._sectionStart + 1,
	    limit = this._index - start;

	if(limit > 6) limit = 6; //the max length of legacy entities is 6

	while(limit >= 2){ //the min length of legacy entities is 2
		var entity = this._buffer.substr(start, limit);

		if(legacyMap.hasOwnProperty(entity)){
			this._emitPartial(legacyMap[entity]);
			this._sectionStart += limit + 2;
			break;
		} else {
			limit--;
		}
	}
};

Tokenizer.prototype._stateInNamedEntity = function(c){
	if(c === ";"){
		this._parseNamedEntityStrict();
		if(this._sectionStart + 1 < this._index && !this._xmlMode){
			this._parseLegacyEntity();
		}
		this._state = this._baseState;
	} else if((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")){
		if(this._xmlMode);
		else if(this._baseState !== TEXT){
			if(c !== "="){
				this._parseNamedEntityStrict();
				this._sectionStart--; //include the current character in the section
			}
		} else {
			this._parseLegacyEntity();
			this._sectionStart--;
		}
		this._state = this._baseState;
		this._index--;
	}
};

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint){
	var output = "";

	if((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){
		return "\uFFFD";
	}

	if(codePoint in decodeMap){
		codePoint = decodeMap[codePoint];
	}

	if(codePoint > 0xFFFF){
		codePoint -= 0x10000;
		output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
		codePoint = 0xDC00 | codePoint & 0x3FF;
	}

	output += String.fromCharCode(codePoint);
	return output;
}

Tokenizer.prototype._decodeNumericEntity = function(offset, base){
	var sectionStart = this._sectionStart + offset;

	if(sectionStart !== this._index){
		//parse entity
		var entity = this._buffer.substring(sectionStart, this._index);
		var parsed = parseInt(entity, base);

		if(parsed === parsed){ //not NaN (TODO: when can this happen?)
			this._emitPartial(decodeCodePoint(parsed));
			this._sectionStart = this._index;
		}
	}

	this._state = this._baseState;
};

Tokenizer.prototype._stateInNumericEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(2, 10);
		this._sectionStart++;
	} else if(c < "0" || c > "9"){
		if(!this._xmlMode){
			this._decodeNumericEntity(2, 10);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._stateInHexEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(3, 16);
		this._sectionStart++;
	} else if((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")){
		if(!this._xmlMode){
			this._decodeNumericEntity(3, 16);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._cleanup = function () {
	if(this._sectionStart < 0){
		this._buffer = "";
		this._index = 0;
	} else {
		if(this._state === TEXT){
			if(this._sectionStart !== this._index){
				this._cbs.ontext(this._buffer.substr(this._sectionStart));
			}
			this._buffer = "";
			this._index = 0;
		} else if(this._sectionStart === this._index){
			//the section just started
			this._buffer = "";
			this._index = 0;
		} else {
			//remove everything unnecessary
			this._buffer = this._buffer.substr(this._sectionStart);
			this._index -= this._sectionStart;
		}

		this._sectionStart = 0;
	}
};

//TODO make events conditional
Tokenizer.prototype.write = function(chunk){
	this._buffer += chunk;

	while(this._index < this._buffer.length && this._running){
		var c = this._buffer.charAt(this._index);
		if(this._state === TEXT) {
			this._stateText(c);
		} else if(this._state === BEFORE_TAG_NAME){
			this._stateBeforeTagName(c);
		} else if(this._state === IN_TAG_NAME) {
			this._stateInTagName(c);
		} else if(this._state === BEFORE_CLOSING_TAG_NAME){
			this._stateBeforeCloseingTagName(c);
		} else if(this._state === IN_CLOSING_TAG_NAME){
			this._stateInCloseingTagName(c);
		} else if(this._state === AFTER_CLOSING_TAG_NAME){
			this._stateAfterCloseingTagName(c);
		} else if(this._state === IN_SELF_CLOSING_TAG){
			this._stateInSelfClosingTag(c);
		}

		/*
		*	attributes
		*/
		else if(this._state === BEFORE_ATTRIBUTE_NAME){
			this._stateBeforeAttributeName(c);
		} else if(this._state === IN_ATTRIBUTE_NAME){
			this._stateInAttributeName(c);
		} else if(this._state === AFTER_ATTRIBUTE_NAME){
			this._stateAfterAttributeName(c);
		} else if(this._state === BEFORE_ATTRIBUTE_VALUE){
			this._stateBeforeAttributeValue(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){
			this._stateInAttributeValueDoubleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){
			this._stateInAttributeValueSingleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){
			this._stateInAttributeValueNoQuotes(c);
		}

		/*
		*	declarations
		*/
		else if(this._state === BEFORE_DECLARATION){
			this._stateBeforeDeclaration(c);
		} else if(this._state === IN_DECLARATION){
			this._stateInDeclaration(c);
		}

		/*
		*	processing instructions
		*/
		else if(this._state === IN_PROCESSING_INSTRUCTION){
			this._stateInProcessingInstruction(c);
		}

		/*
		*	comments
		*/
		else if(this._state === BEFORE_COMMENT){
			this._stateBeforeComment(c);
		} else if(this._state === IN_COMMENT){
			this._stateInComment(c);
		} else if(this._state === AFTER_COMMENT_1){
			this._stateAfterComment1(c);
		} else if(this._state === AFTER_COMMENT_2){
			this._stateAfterComment2(c);
		}

		/*
		*	cdata
		*/
		else if(this._state === BEFORE_CDATA_1){
			this._stateBeforeCdata1(c);
		} else if(this._state === BEFORE_CDATA_2){
			this._stateBeforeCdata2(c);
		} else if(this._state === BEFORE_CDATA_3){
			this._stateBeforeCdata3(c);
		} else if(this._state === BEFORE_CDATA_4){
			this._stateBeforeCdata4(c);
		} else if(this._state === BEFORE_CDATA_5){
			this._stateBeforeCdata5(c);
		} else if(this._state === BEFORE_CDATA_6){
			this._stateBeforeCdata6(c);
		} else if(this._state === IN_CDATA){
			this._stateInCdata(c);
		} else if(this._state === AFTER_CDATA_1){
			this._stateAfterCdata1(c);
		} else if(this._state === AFTER_CDATA_2){
			this._stateAfterCdata2(c);
		}

		/*
		* special tags
		*/
		else if(this._state === BEFORE_SPECIAL){
			this._stateBeforeSpecial(c);
		} else if(this._state === BEFORE_SPECIAL_END){
			this._stateBeforeSpecialEnd(c);
		}

		/*
		* script
		*/
		else if(this._state === BEFORE_SCRIPT_1){
			this._stateBeforeScript1(c);
		} else if(this._state === BEFORE_SCRIPT_2){
			this._stateBeforeScript2(c);
		} else if(this._state === BEFORE_SCRIPT_3){
			this._stateBeforeScript3(c);
		} else if(this._state === BEFORE_SCRIPT_4){
			this._stateBeforeScript4(c);
		} else if(this._state === BEFORE_SCRIPT_5){
			this._stateBeforeScript5(c);
		}

		else if(this._state === AFTER_SCRIPT_1){
			this._stateAfterScript1(c);
		} else if(this._state === AFTER_SCRIPT_2){
			this._stateAfterScript2(c);
		} else if(this._state === AFTER_SCRIPT_3){
			this._stateAfterScript3(c);
		} else if(this._state === AFTER_SCRIPT_4){
			this._stateAfterScript4(c);
		} else if(this._state === AFTER_SCRIPT_5){
			this._stateAfterScript5(c);
		}

		/*
		* style
		*/
		else if(this._state === BEFORE_STYLE_1){
			this._stateBeforeStyle1(c);
		} else if(this._state === BEFORE_STYLE_2){
			this._stateBeforeStyle2(c);
		} else if(this._state === BEFORE_STYLE_3){
			this._stateBeforeStyle3(c);
		} else if(this._state === BEFORE_STYLE_4){
			this._stateBeforeStyle4(c);
		}

		else if(this._state === AFTER_STYLE_1){
			this._stateAfterStyle1(c);
		} else if(this._state === AFTER_STYLE_2){
			this._stateAfterStyle2(c);
		} else if(this._state === AFTER_STYLE_3){
			this._stateAfterStyle3(c);
		} else if(this._state === AFTER_STYLE_4){
			this._stateAfterStyle4(c);
		}

		/*
		* entities
		*/
		else if(this._state === BEFORE_ENTITY){
			this._stateBeforeEntity(c);
		} else if(this._state === BEFORE_NUMERIC_ENTITY){
			this._stateBeforeNumericEntity(c);
		} else if(this._state === IN_NAMED_ENTITY){
			this._stateInNamedEntity(c);
		} else if(this._state === IN_NUMERIC_ENTITY){
			this._stateInNumericEntity(c);
		} else if(this._state === IN_HEX_ENTITY){
			this._stateInHexEntity(c);
		}

		else {
			this._cbs.onerror(Error("unknown _state"), this._state);
		}

		this._index++;
	}

	this._cleanup();
};

Tokenizer.prototype.pause = function(){
	this._running = false;
};
Tokenizer.prototype.resume = function(){
	this._running = true;
};

Tokenizer.prototype.end = function(chunk){
	if(chunk) this.write(chunk);

	//if there is remaining data, emit it in a reasonable way
	if(this._sectionStart < this._index){
		this._handleTrailingData();
	}

	this._cbs.onend();
};

Tokenizer.prototype._handleTrailingData = function(){
	var data = this._buffer.substr(this._sectionStart);

	if(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){
		this._cbs.oncdata(data);
	} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){
		this._cbs.oncomment(data);
	} else if(this._state === IN_TAG_NAME){
		this._cbs.onopentagname(data);
	} else if(this._state === BEFORE_ATTRIBUTE_NAME || this._state === BEFORE_ATTRIBUTE_VALUE || this._state === AFTER_ATTRIBUTE_NAME){
		this._cbs.onopentagend();
	} else if(this._state === IN_ATTRIBUTE_NAME){
		this._cbs.onattribname(data);
	} else if(this._state === IN_ATTRIBUTE_VALUE_SQ || this._state === IN_ATTRIBUTE_VALUE_DQ || this._state === IN_ATTRIBUTE_VALUE_NQ){
		this._cbs.onattribdata(data);
		this._cbs.onattribend();
	} else if(this._state === IN_CLOSING_TAG_NAME){
		this._cbs.onclosetag(data);
	} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){
		this._parseLegacyEntity();
		if(--this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(2, 10);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(3, 16);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else {
		this._cbs.ontext(data);
	}
};

Tokenizer.prototype.reset = function(){
	Tokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);
};

Tokenizer.prototype._getSection = function(){
	return this._buffer.substring(this._sectionStart, this._index);
};

Tokenizer.prototype._emitToken = function(name){
	this._cbs[name](this._getSection());
	this._sectionStart = -1;
};

Tokenizer.prototype._emitPartial = function(value){
	if(this._baseState !== TEXT){
		this._cbs.onattribdata(value); //TODO implement the new event
	} else {
		this._cbs.ontext(value);
	}
};


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = Stream;

var Parser = __webpack_require__(269),
    WritableStream = __webpack_require__(41).Writable || __webpack_require__(582).Writable;

function Stream(cbs, options){
	var parser = this._parser = new Parser(cbs, options);

	WritableStream.call(this, {decodeStrings: false});

	this.once("finish", function(){
		parser.end();
	});
}

__webpack_require__(10).inherits(Stream, WritableStream);

WritableStream.prototype._write = function(chunk, encoding, cb){
	this._parser.write(chunk);
	cb();
};

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(116);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(583);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(32).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(273);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(50).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(67);
util.inherits = __webpack_require__(84);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(10);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(584);
var destroyImpl = __webpack_require__(274);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(75);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(276).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(75);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(276).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(32).EventEmitter;


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(116);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(116);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(67);
util.inherits = __webpack_require__(84);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(585)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(273);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(50).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(274);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(75);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(75);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = __webpack_require__(86).Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(75);

/*<replacement>*/
var util = __webpack_require__(67);
util.inherits = __webpack_require__(84);
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var AnsiPainter, _common;

AnsiPainter = __webpack_require__(279);

module.exports = _common = {
  getStyleTagsFor: function(style) {
    var i, len, ret, tag, tagName, tagsToAdd;
    tagsToAdd = [];
    if (style.color != null) {
      tagName = 'color-' + style.color;
      if (AnsiPainter.tags[tagName] == null) {
        throw Error("Unknown color `" + style.color + "`");
      }
      tagsToAdd.push(tagName);
    }
    if (style.background != null) {
      tagName = 'bg-' + style.background;
      if (AnsiPainter.tags[tagName] == null) {
        throw Error("Unknown background `" + style.background + "`");
      }
      tagsToAdd.push(tagName);
    }
    ret = {
      before: '',
      after: ''
    };
    for (i = 0, len = tagsToAdd.length; i < len; i++) {
      tag = tagsToAdd[i];
      ret.before = ("<" + tag + ">") + ret.before;
      ret.after = ret.after + ("</" + tag + ">");
    }
    return ret;
  }
};


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var AnsiPainter, object, styles, tags, tools,
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

tools = __webpack_require__(33);

tags = __webpack_require__(594);

styles = __webpack_require__(595);

object = __webpack_require__(45).object;

module.exports = AnsiPainter = (function() {
  var self;

  function AnsiPainter() {}

  AnsiPainter.tags = tags;

  AnsiPainter.prototype.paint = function(s) {
    return this._replaceSpecialStrings(this._renderDom(this._parse(s)));
  };

  AnsiPainter.prototype._replaceSpecialStrings = function(str) {
    return str.replace(/&sp;/g, ' ').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&amp;/g, '&');
  };

  AnsiPainter.prototype._parse = function(string, injectFakeRoot) {
    if (injectFakeRoot == null) {
      injectFakeRoot = true;
    }
    if (injectFakeRoot) {
      string = '<none>' + string + '</none>';
    }
    return tools.toDom(string);
  };

  AnsiPainter.prototype._renderDom = function(dom) {
    var parentStyles;
    parentStyles = {
      bg: 'none',
      color: 'none'
    };
    return this._renderChildren(dom, parentStyles);
  };

  AnsiPainter.prototype._renderChildren = function(children, parentStyles) {
    var child, n, ret;
    ret = '';
    for (n in children) {
      if (!hasProp.call(children, n)) continue;
      child = children[n];
      ret += this._renderNode(child, parentStyles);
    }
    return ret;
  };

  AnsiPainter.prototype._renderNode = function(node, parentStyles) {
    if (node.type === 'text') {
      return this._renderTextNode(node, parentStyles);
    } else {
      return this._renderTag(node, parentStyles);
    }
  };

  AnsiPainter.prototype._renderTextNode = function(node, parentStyles) {
    return this._wrapInStyle(node.data, parentStyles);
  };

  AnsiPainter.prototype._wrapInStyle = function(str, style) {
    return styles.color(style.color) + styles.bg(style.bg) + str + styles.none();
  };

  AnsiPainter.prototype._renderTag = function(node, parentStyles) {
    var currentStyles, tagStyles;
    tagStyles = this._getStylesForTagName(node.name);
    currentStyles = this._mixStyles(parentStyles, tagStyles);
    return this._renderChildren(node.children, currentStyles);
  };

  AnsiPainter.prototype._mixStyles = function() {
    var final, i, key, len, style, styles, val;
    styles = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    final = {};
    for (i = 0, len = styles.length; i < len; i++) {
      style = styles[i];
      for (key in style) {
        if (!hasProp.call(style, key)) continue;
        val = style[key];
        if ((final[key] == null) || val !== 'inherit') {
          final[key] = val;
        }
      }
    }
    return final;
  };

  AnsiPainter.prototype._getStylesForTagName = function(name) {
    if (tags[name] == null) {
      throw Error("Unknown tag name `" + name + "`");
    }
    return tags[name];
  };

  self = AnsiPainter;

  AnsiPainter.getInstance = function() {
    if (self._instance == null) {
      self._instance = new self;
    }
    return self._instance;
  };

  AnsiPainter.paint = function(str) {
    return self.getInstance().paint(str);
  };

  AnsiPainter.strip = function(s) {
    return s.replace(/\x1b\[[0-9]+m/g, '');
  };

  return AnsiPainter;

})();


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

var DomUtils  = __webpack_require__(76),
    hasAttrib = DomUtils.hasAttrib,
    getAttributeValue = DomUtils.getAttributeValue,
    falseFunc = __webpack_require__(97).falseFunc;

//https://github.com/slevithan/XRegExp/blob/master/src/xregexp.js#L469
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;

/*
	attribute selectors
*/

var attributeRules = {
	__proto__: null,
	equals: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function equalsIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.toLowerCase() === value && next(elem);
			};
		}

		return function equals(elem){
			return getAttributeValue(elem, name) === value && next(elem);
		};
	},
	hyphen: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len = value.length;

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function hyphenIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null &&
						(attr.length === len || attr.charAt(len) === "-") &&
						attr.substr(0, len).toLowerCase() === value &&
						next(elem);
			};
		}

		return function hyphen(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null &&
					attr.substr(0, len) === value &&
					(attr.length === len || attr.charAt(len) === "-") &&
					next(elem);
		};
	},
	element: function(next, data){
		var name = data.name,
		    value = data.value;

		if(/\s/.test(value)){
			return falseFunc;
		}

		value = value.replace(reChars, "\\$&");

		var pattern = "(?:^|\\s)" + value + "(?:$|\\s)",
		    flags = data.ignoreCase ? "i" : "",
		    regex = new RegExp(pattern, flags);

		return function element(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && regex.test(attr) && next(elem);
		};
	},
	exists: function(next, data){
		var name = data.name;
		return function exists(elem){
			return hasAttrib(elem, name) && next(elem);
		};
	},
	start: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len = value.length;

		if(len === 0){
			return falseFunc;
		}
		
		if(data.ignoreCase){
			value = value.toLowerCase();

			return function startIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.substr(0, len).toLowerCase() === value && next(elem);
			};
		}

		return function start(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.substr(0, len) === value && next(elem);
		};
	},
	end: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len   = -value.length;

		if(len === 0){
			return falseFunc;
		}

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function endIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.substr(len).toLowerCase() === value && next(elem);
			};
		}

		return function end(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.substr(len) === value && next(elem);
		};
	},
	any: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(value === ""){
			return falseFunc;
		}

		if(data.ignoreCase){
			var regex = new RegExp(value.replace(reChars, "\\$&"), "i");

			return function anyIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && regex.test(attr) && next(elem);
			};
		}

		return function any(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.indexOf(value) >= 0 && next(elem);
		};
	},
	not: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(value === ""){
			return function notEmpty(elem){
				return !!getAttributeValue(elem, name) && next(elem);
			};
		} else if(data.ignoreCase){
			value = value.toLowerCase();

			return function notIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.toLowerCase() !== value && next(elem);
			};
		}

		return function not(elem){
			return getAttributeValue(elem, name) !== value && next(elem);
		};
	}
};

module.exports = {
	compile: function(next, data, options){
		if(options && options.strict && (
			data.ignoreCase || data.action === "not"
		)) throw SyntaxError("Unsupported attribute selector");
		return attributeRules[data.action](next, data);
	},
	rules: attributeRules
};


/***/ }),
/* 281 */
/***/ (function(module) {

module.exports = {"universal":50,"tag":30,"attribute":1,"pseudo":0,"descendant":-1,"child":-1,"parent":-1,"sibling":-1,"adjacent":-1};

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var MarginTop, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Length = __webpack_require__(37);

module.exports = MarginTop = (function(superClass) {
  extend(MarginTop, superClass);

  function MarginTop() {
    return MarginTop.__super__.constructor.apply(this, arguments);
  }

  return MarginTop;

})(_Length);


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var MarginLeft, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Length = __webpack_require__(37);

module.exports = MarginLeft = (function(superClass) {
  extend(MarginLeft, superClass);

  function MarginLeft() {
    return MarginLeft.__super__.constructor.apply(this, arguments);
  }

  return MarginLeft;

})(_Length);


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var MarginRight, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Length = __webpack_require__(37);

module.exports = MarginRight = (function(superClass) {
  extend(MarginRight, superClass);

  function MarginRight() {
    return MarginRight.__super__.constructor.apply(this, arguments);
  }

  return MarginRight;

})(_Length);


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var MarginBottom, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Length = __webpack_require__(37);

module.exports = MarginBottom = (function(superClass) {
  extend(MarginBottom, superClass);

  function MarginBottom() {
    return MarginBottom.__super__.constructor.apply(this, arguments);
  }

  return MarginBottom;

})(_Length);


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var PaddingTop, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Length = __webpack_require__(37);

module.exports = PaddingTop = (function(superClass) {
  extend(PaddingTop, superClass);

  function PaddingTop() {
    return PaddingTop.__super__.constructor.apply(this, arguments);
  }

  return PaddingTop;

})(_Length);


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var PaddingLeft, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Length = __webpack_require__(37);

module.exports = PaddingLeft = (function(superClass) {
  extend(PaddingLeft, superClass);

  function PaddingLeft() {
    return PaddingLeft.__super__.constructor.apply(this, arguments);
  }

  return PaddingLeft;

})(_Length);


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var PaddingRight, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Length = __webpack_require__(37);

module.exports = PaddingRight = (function(superClass) {
  extend(PaddingRight, superClass);

  function PaddingRight() {
    return PaddingRight.__super__.constructor.apply(this, arguments);
  }

  return PaddingRight;

})(_Length);


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var PaddingBottom, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Length = __webpack_require__(37);

module.exports = PaddingBottom = (function(superClass) {
  extend(PaddingBottom, superClass);

  function PaddingBottom() {
    return PaddingBottom.__super__.constructor.apply(this, arguments);
  }

  return PaddingBottom;

})(_Length);


/***/ }),
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = __webpack_require__(175);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(301);

var _invariant2 = _interopRequireDefault(_invariant);

var _LocationUtils = __webpack_require__(534);

var _PathUtils = __webpack_require__(247);

var _createTransitionManager = __webpack_require__(537);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

var _DOMUtils = __webpack_require__(538);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HashChangeEvent = 'hashchange';

var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: _PathUtils.stripLeadingSlash,
    decodePath: _PathUtils.addLeadingSlash
  },
  slash: {
    encodePath: _PathUtils.addLeadingSlash,
    decodePath: _PathUtils.addLeadingSlash
  }
};

var getHashPath = function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
};

var pushHashPath = function pushHashPath(path) {
  return window.location.hash = path;
};

var replaceHashPath = function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');

  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
};

var createHashHistory = function createHashHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');

  var globalHistory = window.history;
  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

  var _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
      _props$hashType = props.hashType,
      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;

  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;


  var getDOMLocation = function getDOMLocation() {
    var path = decodePath(getHashPath());

    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

    return (0, _LocationUtils.createLocation)(path);
  };

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var forceNextPop = false;
  var ignorePath = null;

  var handleHashChange = function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;

      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;

      handlePop(location);
    }
  };

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';

      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({ action: action, location: location });
        } else {
          revertPop(location);
        }
      });
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  // Ensure the hash is encoded properly before doing anything else.
  var path = getHashPath();
  var encodedPath = encodePath(path);

  if (path !== encodedPath) replaceHashPath(encodedPath);

  var initialLocation = getDOMLocation();
  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];

  // Public interface

  var createHref = function createHref(location) {
    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
  };

  var push = function push(path, state) {
    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = (0, _PathUtils.createPath)(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);

        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

        nextPaths.push(path);
        allPaths = nextPaths;

        setState({ action: action, location: location });
      } else {
        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');

        setState();
      }
    });
  };

  var replace = function replace(path, state) {
    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = (0, _PathUtils.createPath)(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));

      if (prevIndex !== -1) allPaths[prevIndex] = path;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');

    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createHashHistory;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (typeof Promise === 'undefined') {
   throw new ReferenceError("Promise wrappers must be enabled to use the promise API");
}

function asyncWrapper (fn, git, chain) {
   return function () {
      var args = [].slice.call(arguments);

      if (typeof args[args.length] === 'function') {
         throw new TypeError(
            "Promise interface requires that handlers are not supplied inline, " +
            "trailing function not allowed in call to " + fn);
      }

      return chain.then(function () {
         return new Promise(function (resolve, reject) {
            args.push(function (err, result) {
               if (err) {
                  reject(new Error(err));
               }
               else {
                  resolve(result);
               }
            });

            git[fn].apply(git, args);
         });
      });
   };
}

function syncWrapper (fn, git, api) {
   return function () {
      git[fn].apply(git, arguments);

      return api;
   };
}

function isAsyncCall (fn) {
   return /^[^\)]+then\s*\)/.test(fn) || /\._run\(/.test(fn);
}

module.exports = function (baseDir) {

   var git;
   var chain = Promise.resolve();

   try {
      git = __webpack_require__(540)(baseDir);
   }
   catch (e) {
      chain = Promise.reject(e);
   }

   return Object.keys(git.constructor.prototype).reduce(function (api, fn) {
      if (/^_|then/.test(fn)) {
         return api;
      }

      if (isAsyncCall(git[fn])) {
         api[fn] = asyncWrapper(fn, git, chain);
      }

      else {
         api[fn] = syncWrapper(fn, git, api);
      }

      return api;

   }, {});

};


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function proposeGeometry(term) {
    if (!term.element.parentElement) {
        return null;
    }
    var parentElementStyle = window.getComputedStyle(term.element.parentElement);
    var parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));
    var parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));
    var elementStyle = window.getComputedStyle(term.element);
    var elementPadding = {
        top: parseInt(elementStyle.getPropertyValue('padding-top')),
        bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),
        right: parseInt(elementStyle.getPropertyValue('padding-right')),
        left: parseInt(elementStyle.getPropertyValue('padding-left'))
    };
    var elementPaddingVer = elementPadding.top + elementPadding.bottom;
    var elementPaddingHor = elementPadding.right + elementPadding.left;
    var availableHeight = parentElementHeight - elementPaddingVer;
    var availableWidth = parentElementWidth - elementPaddingHor - term.viewport.scrollBarWidth;
    var geometry = {
        cols: Math.floor(availableWidth / term.renderer.dimensions.actualCellWidth),
        rows: Math.floor(availableHeight / term.renderer.dimensions.actualCellHeight)
    };
    return geometry;
}
exports.proposeGeometry = proposeGeometry;
function fit(term) {
    var geometry = proposeGeometry(term);
    if (geometry) {
        if (term.rows !== geometry.rows || term.cols !== geometry.cols) {
            term.renderer.clear();
            term.resize(geometry.cols, geometry.rows);
        }
    }
}
exports.fit = fit;
function apply(terminalConstructor) {
    terminalConstructor.prototype.proposeGeometry = function () {
        return proposeGeometry(this);
    };
    terminalConstructor.prototype.fit = function () {
        fit(this);
    };
}
exports.apply = apply;

//# sourceMappingURL=fit.js.map


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = (() => {
	const env = process.env;

	if (process.platform === 'darwin') {
		return env.SHELL || '/bin/bash';
	}

	if (process.platform === 'win32') {
		return env.COMSPEC || 'cmd.exe';
	}

	return env.SHELL || '/bin/sh';
})();


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.8.0
var ParsedError, PrettyError, RenderKid, array, defaultStyle, instance, nodePaths, object, prop, _fn, _i, _len, _ref, _ref1,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ref = __webpack_require__(45), object = _ref.object, array = _ref.array;

defaultStyle = __webpack_require__(570);

ParsedError = __webpack_require__(571);

nodePaths = __webpack_require__(572);

RenderKid = __webpack_require__(573);

instance = null;

module.exports = PrettyError = (function() {
  var self;

  self = PrettyError;

  PrettyError._filters = {
    'module.exports': function(item) {
      if (item.what == null) {
        return;
      }
      item.what = item.what.replace(/\.module\.exports\./g, ' - ');
    }
  };

  PrettyError._getDefaultStyle = function() {
    return defaultStyle();
  };

  PrettyError.start = function() {
    if (instance == null) {
      instance = new self;
      instance.start();
    }
    return instance;
  };

  PrettyError.stop = function() {
    return instance != null ? instance.stop() : void 0;
  };

  function PrettyError() {
    this._useColors = true;
    this._maxItems = 50;
    this._packagesToSkip = [];
    this._pathsToSkip = [];
    this._skipCallbacks = [];
    this._filterCallbacks = [];
    this._parsedErrorFilters = [];
    this._aliases = [];
    this._renderer = new RenderKid;
    this._style = self._getDefaultStyle();
    this._renderer.style(this._style);
  }

  PrettyError.prototype.start = function() {
    var prepeare;
    this._oldPrepareStackTrace = Error.prepareStackTrace;
    prepeare = this._oldPrepareStackTrace || function(exc, frames) {
      var result;
      result = exc.toString();
      frames = frames.map(function(frame) {
        return "  at " + (frame.toString());
      });
      return result + "\n" + frames.join("\n");
    };
    Error.prepareStackTrace = (function(_this) {
      return function(exc, trace) {
        var stack;
        stack = prepeare.apply(null, arguments);
        return _this.render({
          stack: stack,
          message: exc.toString().replace(/^.*: /, '')
        }, false);
      };
    })(this);
    return this;
  };

  PrettyError.prototype.stop = function() {
    Error.prepareStackTrace = this._oldPrepareStackTrace;
    return this._oldPrepareStackTrace = null;
  };

  PrettyError.prototype.config = function(c) {
    var alias, path, _ref1;
    if (c.skipPackages != null) {
      if (c.skipPackages === false) {
        this.unskipAllPackages();
      } else {
        this.skipPackage.apply(this, c.skipPackages);
      }
    }
    if (c.skipPaths != null) {
      if (c.skipPaths === false) {
        this.unskipAllPaths();
      } else {
        this.skipPath.apply(this, c.skipPaths);
      }
    }
    if (c.skip != null) {
      if (c.skip === false) {
        this.unskipAll();
      } else {
        this.skip.apply(this, c.skip);
      }
    }
    if (c.maxItems != null) {
      this.setMaxItems(c.maxItems);
    }
    if (c.skipNodeFiles === true) {
      this.skipNodeFiles();
    } else if (c.skipNodeFiles === false) {
      this.unskipNodeFiles();
    }
    if (c.filters != null) {
      if (c.filters === false) {
        this.removeAllFilters();
      } else {
        this.filter.apply(this, c.filters);
      }
    }
    if (c.parsedErrorFilters != null) {
      if (c.parsedErrorFilters === false) {
        this.removeAllParsedErrorFilters();
      } else {
        this.filterParsedError.apply(this, c.parsedErrorFilters);
      }
    }
    if (c.aliases != null) {
      if (object.isBareObject(c.aliases)) {
        _ref1 = c.aliases;
        for (path in _ref1) {
          alias = _ref1[path];
          this.alias(path, alias);
        }
      } else if (c.aliases === false) {
        this.removeAllAliases();
      }
    }
    return this;
  };

  PrettyError.prototype.withoutColors = function() {
    this._useColors = false;
    return this;
  };

  PrettyError.prototype.withColors = function() {
    this._useColors = true;
    return this;
  };

  PrettyError.prototype.skipPackage = function() {
    var packages, pkg, _i, _len;
    packages = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = packages.length; _i < _len; _i++) {
      pkg = packages[_i];
      this._packagesToSkip.push(String(pkg));
    }
    return this;
  };

  PrettyError.prototype.unskipPackage = function() {
    var packages, pkg, _i, _len;
    packages = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = packages.length; _i < _len; _i++) {
      pkg = packages[_i];
      array.pluckOneItem(this._packagesToSkip, pkg);
    }
    return this;
  };

  PrettyError.prototype.unskipAllPackages = function() {
    this._packagesToSkip.length = 0;
    return this;
  };

  PrettyError.prototype.skipPath = function() {
    var path, paths, _i, _len;
    paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      path = paths[_i];
      this._pathsToSkip.push(path);
    }
    return this;
  };

  PrettyError.prototype.unskipPath = function() {
    var path, paths, _i, _len;
    paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      path = paths[_i];
      array.pluckOneItem(this._pathsToSkip, path);
    }
    return this;
  };

  PrettyError.prototype.unskipAllPaths = function() {
    this._pathsToSkip.length = 0;
    return this;
  };

  PrettyError.prototype.skip = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      this._skipCallbacks.push(cb);
    }
    return this;
  };

  PrettyError.prototype.unskip = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      array.pluckOneItem(this._skipCallbacks, cb);
    }
    return this;
  };

  PrettyError.prototype.unskipAll = function() {
    this._skipCallbacks.length = 0;
    return this;
  };

  PrettyError.prototype.skipNodeFiles = function() {
    return this.skipPath.apply(this, nodePaths);
  };

  PrettyError.prototype.unskipNodeFiles = function() {
    return this.unskipPath.apply(this, nodePaths);
  };

  PrettyError.prototype.filter = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      this._filterCallbacks.push(cb);
    }
    return this;
  };

  PrettyError.prototype.removeFilter = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      array.pluckOneItem(this._filterCallbacks, cb);
    }
    return this;
  };

  PrettyError.prototype.removeAllFilters = function() {
    this._filterCallbacks.length = 0;
    return this;
  };

  PrettyError.prototype.filterParsedError = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      this._parsedErrorFilters.push(cb);
    }
    return this;
  };

  PrettyError.prototype.removeParsedErrorFilter = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      array.pluckOneItem(this._parsedErrorFilters, cb);
    }
    return this;
  };

  PrettyError.prototype.removeAllParsedErrorFilters = function() {
    this._parsedErrorFilters.length = 0;
    return this;
  };

  PrettyError.prototype.setMaxItems = function(maxItems) {
    if (maxItems == null) {
      maxItems = 50;
    }
    if (maxItems === 0) {
      maxItems = 50;
    }
    this._maxItems = maxItems | 0;
    return this;
  };

  PrettyError.prototype.alias = function(stringOrRx, alias) {
    this._aliases.push({
      stringOrRx: stringOrRx,
      alias: alias
    });
    return this;
  };

  PrettyError.prototype.removeAlias = function(stringOrRx) {
    array.pluckByCallback(this._aliases, function(pair) {
      return pair.stringOrRx === stringOrRx;
    });
    return this;
  };

  PrettyError.prototype.removeAllAliases = function() {
    this._aliases.length = 0;
    return this;
  };

  PrettyError.prototype._getStyle = function() {
    return this._style;
  };

  PrettyError.prototype.appendStyle = function(toAppend) {
    object.appendOnto(this._style, toAppend);
    this._renderer.style(toAppend);
    return this;
  };

  PrettyError.prototype._getRenderer = function() {
    return this._renderer;
  };

  PrettyError.prototype.render = function(e, logIt, useColors) {
    var obj, rendered;
    if (logIt == null) {
      logIt = false;
    }
    if (useColors == null) {
      useColors = this._useColors;
    }
    obj = this.getObject(e);
    rendered = this._renderer.render(obj, useColors);
    if (logIt === true) {
      console.error(rendered);
    }
    return rendered;
  };

  PrettyError.prototype.getObject = function(e) {
    var count, header, i, item, obj, traceItems, _i, _len, _ref1;
    if (!(e instanceof ParsedError)) {
      e = new ParsedError(e);
    }
    this._applyParsedErrorFiltersOn(e);
    header = {
      title: (function() {
        var ret;
        ret = {};
        if (e.wrapper !== '') {
          ret.wrapper = "" + e.wrapper;
        }
        ret.kind = e.kind;
        return ret;
      })(),
      colon: ':',
      message: String(e.message).trim()
    };
    traceItems = [];
    count = -1;
    _ref1 = e.trace;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      item = _ref1[i];
      if (item == null) {
        continue;
      }
      if (this._skipOrFilter(item, i) === true) {
        continue;
      }
      count++;
      if (count > this._maxItems) {
        break;
      }
      if (typeof item === 'string') {
        traceItems.push({
          item: {
            custom: item
          }
        });
        continue;
      }
      traceItems.push((function() {
        var markupItem;
        markupItem = {
          item: {
            header: {
              pointer: (function() {
                if (item.file == null) {
                  return '';
                }
                return {
                  file: item.file,
                  colon: ':',
                  line: item.line
                };
              })()
            },
            footer: (function() {
              var foooter;
              foooter = {
                addr: item.shortenedAddr
              };
              if (item.extra != null) {
                foooter.extra = item.extra;
              }
              return foooter;
            })()
          }
        };
        if (typeof item.what === 'string' && item.what.trim().length > 0) {
          markupItem.item.header.what = item.what;
        }
        return markupItem;
      })());
    }
    obj = {
      'pretty-error': {
        header: header
      }
    };
    if (traceItems.length > 0) {
      obj['pretty-error'].trace = traceItems;
    }
    return obj;
  };

  PrettyError.prototype._skipOrFilter = function(item, itemNumber) {
    var cb, modName, pair, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    if (typeof item === 'object') {
      if (_ref1 = item.modName, __indexOf.call(this._packagesToSkip, _ref1) >= 0) {
        return true;
      }
      if (_ref2 = item.path, __indexOf.call(this._pathsToSkip, _ref2) >= 0) {
        return true;
      }
      _ref3 = item.packages;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        modName = _ref3[_i];
        if (__indexOf.call(this._packagesToSkip, modName) >= 0) {
          return true;
        }
      }
      if (typeof item.shortenedAddr === 'string') {
        _ref4 = this._aliases;
        for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
          pair = _ref4[_j];
          item.shortenedAddr = item.shortenedAddr.replace(pair.stringOrRx, pair.alias);
        }
      }
    }
    _ref5 = this._skipCallbacks;
    for (_k = 0, _len2 = _ref5.length; _k < _len2; _k++) {
      cb = _ref5[_k];
      if (cb(item, itemNumber) === true) {
        return true;
      }
    }
    _ref6 = this._filterCallbacks;
    for (_l = 0, _len3 = _ref6.length; _l < _len3; _l++) {
      cb = _ref6[_l];
      cb(item, itemNumber);
    }
    return false;
  };

  PrettyError.prototype._applyParsedErrorFiltersOn = function(error) {
    var cb, _i, _len, _ref1;
    _ref1 = this._parsedErrorFilters;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      cb = _ref1[_i];
      cb(error);
    }
  };

  return PrettyError;

})();

_ref1 = ['renderer', 'style'];
_fn = function() {
  var methodName;
  methodName = '_get' + prop[0].toUpperCase() + prop.substr(1, prop.length);
  return PrettyError.prototype.__defineGetter__(prop, function() {
    return this[methodName]();
  });
};
for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
  prop = _ref1[_i];
  _fn();
}


/***/ }),
/* 300 */,
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (false) {}

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;


/***/ }),
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.1
// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License

(function(Math) {

var trimLeft = /^\s+/,
    trimRight = /\s+$/,
    tinyCounter = 0,
    mathRound = Math.round,
    mathMin = Math.min,
    mathMax = Math.max,
    mathRandom = Math.random;

function tinycolor (color, opts) {

    color = (color) ? color : '';
    opts = opts || { };

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
       return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
        return new tinycolor(color, opts);
    }

    var rgb = inputToRGB(color);
    this._originalInput = color,
    this._r = rgb.r,
    this._g = rgb.g,
    this._b = rgb.b,
    this._a = rgb.a,
    this._roundA = mathRound(100*this._a) / 100,
    this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) { this._r = mathRound(this._r); }
    if (this._g < 1) { this._g = mathRound(this._g); }
    if (this._b < 1) { this._b = mathRound(this._b); }

    this._ok = rgb.ok;
    this._tc_id = tinyCounter++;
}

tinycolor.prototype = {
    isDark: function() {
        return this.getBrightness() < 128;
    },
    isLight: function() {
        return !this.isDark();
    },
    isValid: function() {
        return this._ok;
    },
    getOriginalInput: function() {
      return this._originalInput;
    },
    getFormat: function() {
        return this._format;
    },
    getAlpha: function() {
        return this._a;
    },
    getBrightness: function() {
        //http://www.w3.org/TR/AERT#color-contrast
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function() {
        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        var rgb = this.toRgb();
        var RsRGB, GsRGB, BsRGB, R, G, B;
        RsRGB = rgb.r/255;
        GsRGB = rgb.g/255;
        BsRGB = rgb.b/255;

        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
    },
    setAlpha: function(value) {
        this._a = boundAlpha(value);
        this._roundA = mathRound(100*this._a) / 100;
        return this;
    },
    toHsv: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
    },
    toHsvString: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
        return (this._a == 1) ?
          "hsv("  + h + ", " + s + "%, " + v + "%)" :
          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
    },
    toHsl: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
    },
    toHslString: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
        return (this._a == 1) ?
          "hsl("  + h + ", " + s + "%, " + l + "%)" :
          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
    },
    toHex: function(allow3Char) {
        return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function(allow3Char) {
        return '#' + this.toHex(allow3Char);
    },
    toHex8: function(allow4Char) {
        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function(allow4Char) {
        return '#' + this.toHex8(allow4Char);
    },
    toRgb: function() {
        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
    },
    toRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function() {
        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
    },
    toPercentageRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function() {
        if (this._a === 0) {
            return "transparent";
        }

        if (this._a < 1) {
            return false;
        }

        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function(secondColor) {
        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
        var secondHex8String = hex8String;
        var gradientType = this._gradientType ? "GradientType = 1, " : "";

        if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
        }

        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
    },
    toString: function(format) {
        var formatSet = !!format;
        format = format || this._format;

        var formattedString = false;
        var hasAlpha = this._a < 1 && this._a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

        if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
                return this.toName();
            }
            return this.toRgbString();
        }
        if (format === "rgb") {
            formattedString = this.toRgbString();
        }
        if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
        }
        if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
        }
        if (format === "hex3") {
            formattedString = this.toHexString(true);
        }
        if (format === "hex4") {
            formattedString = this.toHex8String(true);
        }
        if (format === "hex8") {
            formattedString = this.toHex8String();
        }
        if (format === "name") {
            formattedString = this.toName();
        }
        if (format === "hsl") {
            formattedString = this.toHslString();
        }
        if (format === "hsv") {
            formattedString = this.toHsvString();
        }

        return formattedString || this.toHexString();
    },
    clone: function() {
        return tinycolor(this.toString());
    },

    _applyModification: function(fn, args) {
        var color = fn.apply(null, [this].concat([].slice.call(args)));
        this._r = color._r;
        this._g = color._g;
        this._b = color._b;
        this.setAlpha(color._a);
        return this;
    },
    lighten: function() {
        return this._applyModification(lighten, arguments);
    },
    brighten: function() {
        return this._applyModification(brighten, arguments);
    },
    darken: function() {
        return this._applyModification(darken, arguments);
    },
    desaturate: function() {
        return this._applyModification(desaturate, arguments);
    },
    saturate: function() {
        return this._applyModification(saturate, arguments);
    },
    greyscale: function() {
        return this._applyModification(greyscale, arguments);
    },
    spin: function() {
        return this._applyModification(spin, arguments);
    },

    _applyCombination: function(fn, args) {
        return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function() {
        return this._applyCombination(analogous, arguments);
    },
    complement: function() {
        return this._applyCombination(complement, arguments);
    },
    monochromatic: function() {
        return this._applyCombination(monochromatic, arguments);
    },
    splitcomplement: function() {
        return this._applyCombination(splitcomplement, arguments);
    },
    triad: function() {
        return this._applyCombination(triad, arguments);
    },
    tetrad: function() {
        return this._applyCombination(tetrad, arguments);
    }
};

// If input is an object, force 1 into "1.0" to handle ratios properly
// String input requires "1.0" as input, so 1 will be treated as 1
tinycolor.fromRatio = function(color, opts) {
    if (typeof color == "object") {
        var newColor = {};
        for (var i in color) {
            if (color.hasOwnProperty(i)) {
                if (i === "a") {
                    newColor[i] = color[i];
                }
                else {
                    newColor[i] = convertToPercentage(color[i]);
                }
            }
        }
        color = newColor;
    }

    return tinycolor(color, opts);
};

// Given a string or object, convert that input to RGB
// Possible string inputs:
//
//     "red"
//     "#f00" or "f00"
//     "#ff0000" or "ff0000"
//     "#ff000000" or "ff000000"
//     "rgb 255 0 0" or "rgb (255, 0, 0)"
//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
//
function inputToRGB(color) {

    var rgb = { r: 0, g: 0, b: 0 };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;

    if (typeof color == "string") {
        color = stringInputToObject(color);
    }

    if (typeof color == "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
        }

        if (color.hasOwnProperty("a")) {
            a = color.a;
        }
    }

    a = boundAlpha(a);

    return {
        ok: ok,
        format: color.format || format,
        r: mathMin(255, mathMax(rgb.r, 0)),
        g: mathMin(255, mathMax(rgb.g, 0)),
        b: mathMin(255, mathMax(rgb.b, 0)),
        a: a
    };
}


// Conversion Functions
// --------------------

// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

// `rgbToRgb`
// Handle bounds / percentage checking to conform to CSS color spec
// <http://www.w3.org/TR/css3-color/>
// *Assumes:* r, g, b in [0, 255] or [0, 1]
// *Returns:* { r, g, b } in [0, 255]
function rgbToRgb(r, g, b){
    return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
    };
}

// `rgbToHsl`
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
function rgbToHsl(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }

        h /= 6;
    }

    return { h: h, s: s, l: l };
}

// `hslToRgb`
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hslToRgb(h, s, l) {
    var r, g, b;

    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);

    function hue2rgb(p, q, t) {
        if(t < 0) t += 1;
        if(t > 1) t -= 1;
        if(t < 1/6) return p + (q - p) * 6 * t;
        if(t < 1/2) return q;
        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
        return p;
    }

    if(s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHsv`
// Converts an RGB color value to HSV
// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
// *Returns:* { h, s, v } in [0,1]
function rgbToHsv(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, v = max;

    var d = max - min;
    s = max === 0 ? 0 : d / max;

    if(max == min) {
        h = 0; // achromatic
    }
    else {
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return { h: h, s: s, v: v };
}

// `hsvToRgb`
// Converts an HSV color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
 function hsvToRgb(h, s, v) {

    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);

    var i = Math.floor(h),
        f = h - i,
        p = v * (1 - s),
        q = v * (1 - f * s),
        t = v * (1 - (1 - f) * s),
        mod = i % 6,
        r = [v, q, p, p, t, v][mod],
        g = [t, v, v, q, p, p][mod],
        b = [p, p, t, v, v, q][mod];

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHex`
// Converts an RGB color to hex
// Assumes r, g, and b are contained in the set [0, 255]
// Returns a 3 or 6 character hex
function rgbToHex(r, g, b, allow3Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }

    return hex.join("");
}

// `rgbaToHex`
// Converts an RGBA color plus alpha transparency to hex
// Assumes r, g, b are contained in the set [0, 255] and
// a in [0, 1]. Returns a 4 or 8 character rgba hex
function rgbaToHex(r, g, b, a, allow4Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16)),
        pad2(convertDecimalToHex(a))
    ];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }

    return hex.join("");
}

// `rgbaToArgbHex`
// Converts an RGBA color to an ARGB Hex8 string
// Rarely used, but required for "toFilter()"
function rgbaToArgbHex(r, g, b, a) {

    var hex = [
        pad2(convertDecimalToHex(a)),
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    return hex.join("");
}

// `equals`
// Can be called with any tinycolor input
tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) { return false; }
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};

tinycolor.random = function() {
    return tinycolor.fromRatio({
        r: mathRandom(),
        g: mathRandom(),
        b: mathRandom()
    });
};


// Modification Functions
// ----------------------
// Thanks to less.js for some of the basics here
// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

function desaturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function saturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function greyscale(color) {
    return tinycolor(color).desaturate(100);
}

function lighten (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

function brighten(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var rgb = tinycolor(color).toRgb();
    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
    return tinycolor(rgb);
}

function darken (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
// Values outside of this range will be wrapped into this range.
function spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
}

// Combination Functions
// ---------------------
// Thanks to jQuery xColor for some of the ideas behind these
// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

function complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
}

function triad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
    ];
}

function tetrad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
    ];
}

function splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
    ];
}

function analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;

    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];

    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(tinycolor(hsl));
    }
    return ret;
}

function monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;

    while (results--) {
        ret.push(tinycolor({ h: h, s: s, v: v}));
        v = (v + modification) % 1;
    }

    return ret;
}

// Utility Functions
// ---------------------

tinycolor.mix = function(color1, color2, amount) {
    amount = (amount === 0) ? 0 : (amount || 50);

    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();

    var p = amount / 100;

    var rgba = {
        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
        a: ((rgb2.a - rgb1.a) * p) + rgb1.a
    };

    return tinycolor(rgba);
};


// Readability Functions
// ---------------------
// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

// `contrast`
// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
tinycolor.readability = function(color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
};

// `isReadable`
// Ensure that foreground and background color combinations meet WCAG2 guidelines.
// The third argument is an optional Object.
//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

// *Example*
//    tinycolor.isReadable("#000", "#111") => false
//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
tinycolor.isReadable = function(color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;

    out = false;

    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
        case "AAsmall":
        case "AAAlarge":
            out = readability >= 4.5;
            break;
        case "AAlarge":
            out = readability >= 3;
            break;
        case "AAAsmall":
            out = readability >= 7;
            break;
    }
    return out;

};

// `mostReadable`
// Given a base color and a list of possible foreground or background
// colors for that base, returns the most readable color.
// Optionally returns Black or White if the most readable color is unreadable.
// *Example*
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
tinycolor.mostReadable = function(baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size ;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors ;
    level = args.level;
    size = args.size;

    for (var i= 0; i < colorList.length ; i++) {
        readability = tinycolor.readability(baseColor, colorList[i]);
        if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
        }
    }

    if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
        return bestColor;
    }
    else {
        args.includeFallbackColors=false;
        return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
    }
};


// Big List of Colors
// ------------------
// <http://www.w3.org/TR/css3-color/#svg-color>
var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
};

// Make it easy to access colors via `hexNames[hex]`
var hexNames = tinycolor.hexNames = flip(names);


// Utilities
// ---------

// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
function flip(o) {
    var flipped = { };
    for (var i in o) {
        if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
        }
    }
    return flipped;
}

// Return a valid alpha value [0,1] with all invalid values being set to 1
function boundAlpha(a) {
    a = parseFloat(a);

    if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
    }

    return a;
}

// Take input from [0, n] and return it as [0, 1]
function bound01(n, max) {
    if (isOnePointZero(n)) { n = "100%"; }

    var processPercent = isPercentage(n);
    n = mathMin(max, mathMax(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
        n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if ((Math.abs(n - max) < 0.000001)) {
        return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return (n % max) / parseFloat(max);
}

// Force a number between 0 and 1
function clamp01(val) {
    return mathMin(1, mathMax(0, val));
}

// Parse a base-16 hex value into a base-10 integer
function parseIntFromHex(val) {
    return parseInt(val, 16);
}

// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
}

// Check to see if string passed in is a percentage
function isPercentage(n) {
    return typeof n === "string" && n.indexOf('%') != -1;
}

// Force a hex value to have 2 characters
function pad2(c) {
    return c.length == 1 ? '0' + c : '' + c;
}

// Replace a decimal with it's percentage value
function convertToPercentage(n) {
    if (n <= 1) {
        n = (n * 100) + "%";
    }

    return n;
}

// Converts a decimal to a hex value
function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
}
// Converts a hex value to a decimal
function convertHexToDecimal(h) {
    return (parseIntFromHex(h) / 255);
}

var matchers = (function() {

    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

    return {
        CSS_UNIT: new RegExp(CSS_UNIT),
        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
})();

// `isValidCSSUnit`
// Take in a single string / number and check to see if it looks like a CSS unit
// (see `matchers` above for definition).
function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
}

// `stringInputToObject`
// Permissive string parsing.  Take in a number of formats, and output an object
// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
function stringInputToObject(color) {

    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
    var named = false;
    if (names[color]) {
        color = names[color];
        named = true;
    }
    else if (color == 'transparent') {
        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if ((match = matchers.rgb.exec(color))) {
        return { r: match[1], g: match[2], b: match[3] };
    }
    if ((match = matchers.rgba.exec(color))) {
        return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    if ((match = matchers.hsl.exec(color))) {
        return { h: match[1], s: match[2], l: match[3] };
    }
    if ((match = matchers.hsla.exec(color))) {
        return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    if ((match = matchers.hsv.exec(color))) {
        return { h: match[1], s: match[2], v: match[3] };
    }
    if ((match = matchers.hsva.exec(color))) {
        return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    if ((match = matchers.hex8.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex6.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
        };
    }
    if ((match = matchers.hex4.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex3.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
        };
    }

    return false;
}

function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {"level":"AA", "size":"small"};
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
        level = "AA";
    }
    if (size !== "small" && size !== "large") {
        size = "small";
    }
    return {"level":level, "size":size};
}

// Node: Export function
if ( true && module.exports) {
    module.exports = tinycolor;
}
// AMD/requirejs: Define the module
else if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {return tinycolor;}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}
// Browser: Expose to window
else {}

})(Math);


/***/ }),
/* 313 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _terms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(102);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



 // eslint-disable-next-line

var clientInstance = null;
var CHANNEL_DATA = 'session:data';
var CHANNEL_NEWLINE = 'session:newline';
var CHANNEL_EXIT = 'session:exit';

var SpcClient =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(SpcClient, _EventEmitter);

  function SpcClient() {
    var _this;

    _classCallCheck(this, SpcClient);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SpcClient).call(this));

    if (clientInstance) {
      return _possibleConstructorReturn(_this, clientInstance);
    }

    electron__WEBPACK_IMPORTED_MODULE_0__["ipcRenderer"].on(CHANNEL_DATA, function (event, data) {
      _this.emit(CHANNEL_DATA, data);
    });
    electron__WEBPACK_IMPORTED_MODULE_0__["ipcRenderer"].on(CHANNEL_EXIT, function (event, data) {
      _this.emit(CHANNEL_EXIT, data);
    });

    _this.on(CHANNEL_DATA, function (data) {
      _terms__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].write(data.cwd, data.data);
    });

    _this.on(CHANNEL_EXIT, function (data) {
      _terms__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].newline(data.cwd);
    });

    _this.on(CHANNEL_NEWLINE, function (data) {
      _terms__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].newline(data.cwd);
    });

    return _this;
  }

  _createClass(SpcClient, [{
    key: "emit",
    value: function emit(ch, data) {
      _get(_getPrototypeOf(SpcClient.prototype), "emit", this).call(this, ch, data);
    }
  }]);

  return SpcClient;
}(events__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]);

clientInstance = new SpcClient();
/* harmony default export */ __webpack_exports__["default"] = (clientInstance);

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(648);


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function preserveCamelCase(str) {
	let isLastCharLower = false;
	let isLastCharUpper = false;
	let isLastLastCharUpper = false;

	for (let i = 0; i < str.length; i++) {
		const c = str[i];

		if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {
			str = str.substr(0, i) + '-' + str.substr(i);
			isLastCharLower = false;
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = true;
			i++;
		} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c) && c.toLowerCase() === c) {
			str = str.substr(0, i - 1) + '-' + str.substr(i - 1);
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = false;
			isLastCharLower = true;
		} else {
			isLastCharLower = c.toLowerCase() === c;
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = c.toUpperCase() === c;
		}
	}

	return str;
}

module.exports = function (str) {
	if (arguments.length > 1) {
		str = Array.from(arguments)
			.map(x => x.trim())
			.filter(x => x.length)
			.join('-');
	} else {
		str = str.trim();
	}

	if (str.length === 0) {
		return '';
	}

	if (str.length === 1) {
		return str.toLowerCase();
	}

	if (/^[a-z0-9]+$/.test(str)) {
		return str;
	}

	const hasUpperCase = str !== str.toLowerCase();

	if (hasUpperCase) {
		str = preserveCamelCase(str);
	}

	return str
		.replace(/^[_.\- ]+/, '')
		.toLowerCase()
		.replace(/[_.\- ]+(\w|$)/g, (m, p1) => p1.toUpperCase());
};


/***/ }),
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _icon = __webpack_require__(174);

var _icon2 = _interopRequireDefault(_icon);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _rcNotification = __webpack_require__(649);

var _rcNotification2 = _interopRequireDefault(_rcNotification);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * List容器组件
 */
var defaultDuration = 4.5;
var defaultTop = 24;
var defaultBottom = 24;
var defaultPlacement = 'topRight';
var notificationInstance = null;

function getPlacementStyle(placement) {
  var style = void 0;
  switch (placement) {
    case 'topLeft':
      style = {
        left: 0,
        top: defaultTop,
        bottom: 'auto'
      };
      break;
    case 'bottomLeft':
      style = {
        left: 0,
        top: 'auto',
        bottom: defaultBottom
      };
      break;
    case 'bottomRight':
      style = {
        right: 0,
        top: 'auto',
        bottom: defaultBottom
      };
      break;
    default:
      style = {
        right: 0,
        top: defaultTop,
        bottom: 'auto'
      };
  }
  return style;
}

function getNotificationInstance(prefixCls) {
  if (notificationInstance) {
    return notificationInstance;
  }
  notificationInstance = _rcNotification2.default.newInstance({
    prefixCls: prefixCls,
    className: prefixCls + '-' + defaultPlacement,
    style: getPlacementStyle(defaultPlacement)
  });
  return notificationInstance;
}

function notice() {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var outerPrefixCls = args.prefixCls || 'ice-notification';
  var prefixCls = outerPrefixCls + '-notice';

  if (args.placement !== undefined) {
    defaultPlacement = args.placement;
    notificationInstance = null; // delete notificationInstance for new defaultPlacement
  }

  var duration = void 0;
  if (args.duration === undefined) {
    duration = defaultDuration;
  } else {
    duration = args.duration;
  }

  var iconType = '';
  switch (args.type) {
    case 'success':
      iconType = 'success';
      break;
    case 'info':
      iconType = 'prompt';
      break;
    case 'error':
      iconType = 'delete-filling';
      break;
    case 'warning':
      iconType = 'warning';
      break;
    default:
      iconType = 'comments';
  }

  var iconNode = void 0;
  if (args.icon) {
    iconNode = _react2.default.createElement(
      'span',
      { className: prefixCls + '-icon' },
      args.icon
    );
  } else if (args.type) {
    iconNode = _react2.default.createElement(_icon2.default, {
      className: prefixCls + '-icon ' + prefixCls + '-icon-' + args.type,
      type: iconType
    });
  }

  var autoMarginTag = !args.description && iconNode ? _react2.default.createElement('span', { className: prefixCls + '-message-single-line-auto-margin' }) : null;
  getNotificationInstance(outerPrefixCls).notice({
    content: _react2.default.createElement(
      'div',
      { className: iconNode ? prefixCls + '-with-icon' : '' },
      iconNode,
      _react2.default.createElement(
        'div',
        { className: prefixCls + '-message' },
        autoMarginTag,
        args.message
      ),
      _react2.default.createElement(
        'div',
        { className: prefixCls + '-description' },
        args.description
      ),
      args.btn ? _react2.default.createElement(
        'span',
        { className: prefixCls + '-btn' },
        args.btn
      ) : null
    ),
    duration: duration,
    closable: true,
    onClose: args.onClose,
    key: args.key,
    style: {}
  });
}

var api = {
  open: function open(args) {
    notice(args);
  },
  close: function close(key) {
    if (notificationInstance) {
      notificationInstance.removeNotice(key);
    }
  },
  config: function config(options) {
    var duration = options.duration,
        placement = options.placement,
        bottom = options.bottom,
        top = options.top;

    if (placement !== undefined) {
      defaultPlacement = placement;
    }
    if (bottom !== undefined) {
      defaultBottom = bottom;
    }
    if (top !== undefined) {
      defaultTop = top;
    }
    // delete notificationInstance
    if (placement !== undefined || bottom !== undefined || top !== undefined) {
      notificationInstance = null;
    }
    if (duration !== undefined) {
      defaultDuration = duration;
    }
  },
  destroy: function destroy() {
    if (notificationInstance) {
      notificationInstance.destroy();
      notificationInstance = null;
    }
  }
};

['success', 'info', 'warning', 'error'].forEach(function (type) {
  api[type] = function (args) {
    return api.open(_extends({}, args, {
      type: type
    }));
  };
});

exports.default = api; // export 是引用

/***/ }),
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// simple mutable assign
function assign () {
  const args = [].slice.call(arguments).filter(i => i)
  const dest = args.shift()
  args.forEach(src => {
    Object.keys(src).forEach(key => {
      dest[key] = src[key]
    })
  })

  return dest
}

module.exports = assign


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(474)

var origCwd = process.cwd
var cwd = null

var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform

process.cwd = function() {
  if (!cwd)
    cwd = origCwd.call(process)
  return cwd
}
try {
  process.cwd()
} catch (er) {}

var chdir = process.chdir
process.chdir = function(d) {
  cwd = null
  chdir.call(process, d)
}

module.exports = patch

function patch (fs) {
  // (re-)implement some things that are known busted or missing.

  // lchmod, broken prior to 0.6.2
  // back-port the fix here.
  if (constants.hasOwnProperty('O_SYMLINK') &&
      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
    patchLchmod(fs)
  }

  // lutimes implementation, or no-op
  if (!fs.lutimes) {
    patchLutimes(fs)
  }

  // https://github.com/isaacs/node-graceful-fs/issues/4
  // Chown should not fail on einval or eperm if non-root.
  // It should not fail on enosys ever, as this just indicates
  // that a fs doesn't support the intended operation.

  fs.chown = chownFix(fs.chown)
  fs.fchown = chownFix(fs.fchown)
  fs.lchown = chownFix(fs.lchown)

  fs.chmod = chmodFix(fs.chmod)
  fs.fchmod = chmodFix(fs.fchmod)
  fs.lchmod = chmodFix(fs.lchmod)

  fs.chownSync = chownFixSync(fs.chownSync)
  fs.fchownSync = chownFixSync(fs.fchownSync)
  fs.lchownSync = chownFixSync(fs.lchownSync)

  fs.chmodSync = chmodFixSync(fs.chmodSync)
  fs.fchmodSync = chmodFixSync(fs.fchmodSync)
  fs.lchmodSync = chmodFixSync(fs.lchmodSync)

  fs.stat = statFix(fs.stat)
  fs.fstat = statFix(fs.fstat)
  fs.lstat = statFix(fs.lstat)

  fs.statSync = statFixSync(fs.statSync)
  fs.fstatSync = statFixSync(fs.fstatSync)
  fs.lstatSync = statFixSync(fs.lstatSync)

  // if lchmod/lchown do not exist, then make them no-ops
  if (!fs.lchmod) {
    fs.lchmod = function (path, mode, cb) {
      if (cb) process.nextTick(cb)
    }
    fs.lchmodSync = function () {}
  }
  if (!fs.lchown) {
    fs.lchown = function (path, uid, gid, cb) {
      if (cb) process.nextTick(cb)
    }
    fs.lchownSync = function () {}
  }

  // on Windows, A/V software can lock the directory, causing this
  // to fail with an EACCES or EPERM if the directory contains newly
  // created files.  Try again on failure, for up to 60 seconds.

  // Set the timeout this long because some Windows Anti-Virus, such as Parity
  // bit9, may lock files for up to a minute, causing npm package install
  // failures. Also, take care to yield the scheduler. Windows scheduling gives
  // CPU to a busy looping process, which can cause the program causing the lock
  // contention to be starved of CPU by node, so the contention doesn't resolve.
  if (platform === "win32") {
    fs.rename = (function (fs$rename) { return function (from, to, cb) {
      var start = Date.now()
      var backoff = 0;
      fs$rename(from, to, function CB (er) {
        if (er
            && (er.code === "EACCES" || er.code === "EPERM")
            && Date.now() - start < 60000) {
          setTimeout(function() {
            fs.stat(to, function (stater, st) {
              if (stater && stater.code === "ENOENT")
                fs$rename(from, to, CB);
              else
                cb(er)
            })
          }, backoff)
          if (backoff < 100)
            backoff += 10;
          return;
        }
        if (cb) cb(er)
      })
    }})(fs.rename)
  }

  // if read() returns EAGAIN, then just try it again.
  fs.read = (function (fs$read) { return function (fd, buffer, offset, length, position, callback_) {
    var callback
    if (callback_ && typeof callback_ === 'function') {
      var eagCounter = 0
      callback = function (er, _, __) {
        if (er && er.code === 'EAGAIN' && eagCounter < 10) {
          eagCounter ++
          return fs$read.call(fs, fd, buffer, offset, length, position, callback)
        }
        callback_.apply(this, arguments)
      }
    }
    return fs$read.call(fs, fd, buffer, offset, length, position, callback)
  }})(fs.read)

  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
    var eagCounter = 0
    while (true) {
      try {
        return fs$readSync.call(fs, fd, buffer, offset, length, position)
      } catch (er) {
        if (er.code === 'EAGAIN' && eagCounter < 10) {
          eagCounter ++
          continue
        }
        throw er
      }
    }
  }})(fs.readSync)

  function patchLchmod (fs) {
    fs.lchmod = function (path, mode, callback) {
      fs.open( path
             , constants.O_WRONLY | constants.O_SYMLINK
             , mode
             , function (err, fd) {
        if (err) {
          if (callback) callback(err)
          return
        }
        // prefer to return the chmod error, if one occurs,
        // but still try to close, and report closing errors if they occur.
        fs.fchmod(fd, mode, function (err) {
          fs.close(fd, function(err2) {
            if (callback) callback(err || err2)
          })
        })
      })
    }

    fs.lchmodSync = function (path, mode) {
      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)

      // prefer to return the chmod error, if one occurs,
      // but still try to close, and report closing errors if they occur.
      var threw = true
      var ret
      try {
        ret = fs.fchmodSync(fd, mode)
        threw = false
      } finally {
        if (threw) {
          try {
            fs.closeSync(fd)
          } catch (er) {}
        } else {
          fs.closeSync(fd)
        }
      }
      return ret
    }
  }

  function patchLutimes (fs) {
    if (constants.hasOwnProperty("O_SYMLINK")) {
      fs.lutimes = function (path, at, mt, cb) {
        fs.open(path, constants.O_SYMLINK, function (er, fd) {
          if (er) {
            if (cb) cb(er)
            return
          }
          fs.futimes(fd, at, mt, function (er) {
            fs.close(fd, function (er2) {
              if (cb) cb(er || er2)
            })
          })
        })
      }

      fs.lutimesSync = function (path, at, mt) {
        var fd = fs.openSync(path, constants.O_SYMLINK)
        var ret
        var threw = true
        try {
          ret = fs.futimesSync(fd, at, mt)
          threw = false
        } finally {
          if (threw) {
            try {
              fs.closeSync(fd)
            } catch (er) {}
          } else {
            fs.closeSync(fd)
          }
        }
        return ret
      }

    } else {
      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }
      fs.lutimesSync = function () {}
    }
  }

  function chmodFix (orig) {
    if (!orig) return orig
    return function (target, mode, cb) {
      return orig.call(fs, target, mode, function (er) {
        if (chownErOk(er)) er = null
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function chmodFixSync (orig) {
    if (!orig) return orig
    return function (target, mode) {
      try {
        return orig.call(fs, target, mode)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }


  function chownFix (orig) {
    if (!orig) return orig
    return function (target, uid, gid, cb) {
      return orig.call(fs, target, uid, gid, function (er) {
        if (chownErOk(er)) er = null
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function chownFixSync (orig) {
    if (!orig) return orig
    return function (target, uid, gid) {
      try {
        return orig.call(fs, target, uid, gid)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }


  function statFix (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, cb) {
      return orig.call(fs, target, function (er, stats) {
        if (!stats) return cb.apply(this, arguments)
        if (stats.uid < 0) stats.uid += 0x100000000
        if (stats.gid < 0) stats.gid += 0x100000000
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function statFixSync (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target) {
      var stats = orig.call(fs, target)
      if (stats.uid < 0) stats.uid += 0x100000000
      if (stats.gid < 0) stats.gid += 0x100000000
      return stats;
    }
  }

  // ENOSYS means that the fs doesn't support the op. Just ignore
  // that, because it doesn't matter.
  //
  // if there's no getuid, or if getuid() is something other
  // than 0, and the error is EINVAL or EPERM, then just ignore
  // it.
  //
  // This specific case is a silent failure in cp, install, tar,
  // and most other unix tools that manage permissions.
  //
  // When running as root, or if other types of errors are
  // encountered, then it's strict.
  function chownErOk (er) {
    if (!er)
      return true

    if (er.code === "ENOSYS")
      return true

    var nonroot = !process.getuid || process.getuid() !== 0
    if (nonroot) {
      if (er.code === "EINVAL" || er.code === "EPERM")
        return true
    }

    return false
  }
}


/***/ }),
/* 474 */
/***/ (function(module, exports) {

module.exports = require("constants");

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

var Stream = __webpack_require__(41).Stream

module.exports = legacy

function legacy (fs) {
  return {
    ReadStream: ReadStream,
    WriteStream: WriteStream
  }

  function ReadStream (path, options) {
    if (!(this instanceof ReadStream)) return new ReadStream(path, options);

    Stream.call(this);

    var self = this;

    this.path = path;
    this.fd = null;
    this.readable = true;
    this.paused = false;

    this.flags = 'r';
    this.mode = 438; /*=0666*/
    this.bufferSize = 64 * 1024;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.encoding) this.setEncoding(this.encoding);

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.end === undefined) {
        this.end = Infinity;
      } else if ('number' !== typeof this.end) {
        throw TypeError('end must be a Number');
      }

      if (this.start > this.end) {
        throw new Error('start must be <= end');
      }

      this.pos = this.start;
    }

    if (this.fd !== null) {
      process.nextTick(function() {
        self._read();
      });
      return;
    }

    fs.open(this.path, this.flags, this.mode, function (err, fd) {
      if (err) {
        self.emit('error', err);
        self.readable = false;
        return;
      }

      self.fd = fd;
      self.emit('open', fd);
      self._read();
    })
  }

  function WriteStream (path, options) {
    if (!(this instanceof WriteStream)) return new WriteStream(path, options);

    Stream.call(this);

    this.path = path;
    this.fd = null;
    this.writable = true;

    this.flags = 'w';
    this.encoding = 'binary';
    this.mode = 438; /*=0666*/
    this.bytesWritten = 0;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.start < 0) {
        throw new Error('start must be >= zero');
      }

      this.pos = this.start;
    }

    this.busy = false;
    this._queue = [];

    if (this.fd === null) {
      this._open = fs.open;
      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
      this.flush();
    }
  }
}


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = clone

function clone (obj) {
  if (obj === null || typeof obj !== 'object')
    return obj

  if (obj instanceof Object)
    var copy = { __proto__: obj.__proto__ }
  else
    var copy = Object.create(null)

  Object.getOwnPropertyNames(obj).forEach(function (key) {
    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))
  })

  return copy
}


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

const u = __webpack_require__(28).fromCallback
module.exports = {
  copy: u(__webpack_require__(478))
}


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(18)
const path = __webpack_require__(3)
const ncp = __webpack_require__(228)
const mkdir = __webpack_require__(29)
const pathExists = __webpack_require__(55).pathExists

function copy (src, dest, options, callback) {
  if (typeof options === 'function' && !callback) {
    callback = options
    options = {}
  } else if (typeof options === 'function' || options instanceof RegExp) {
    options = {filter: options}
  }
  callback = callback || function () {}
  options = options || {}

  // Warn about using preserveTimestamps on 32-bit node:
  if (options.preserveTimestamps && process.arch === 'ia32') {
    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`)
  }

  // don't allow src and dest to be the same
  const basePath = process.cwd()
  const currentPath = path.resolve(basePath, src)
  const targetPath = path.resolve(basePath, dest)
  if (currentPath === targetPath) return callback(new Error('Source and destination must not be the same.'))

  fs.lstat(src, (err, stats) => {
    if (err) return callback(err)

    let dir = null
    if (stats.isDirectory()) {
      const parts = dest.split(path.sep)
      parts.pop()
      dir = parts.join(path.sep)
    } else {
      dir = path.dirname(dest)
    }

    pathExists(dir, (err, dirExists) => {
      if (err) return callback(err)
      if (dirExists) return ncp(src, dest, options, callback)
      mkdir.mkdirs(dir, err => {
        if (err) return callback(err)
        ncp(src, dest, options, callback)
      })
    })
  })
}

module.exports = copy


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(18)
const os = __webpack_require__(34)
const path = __webpack_require__(3)

// HFS, ext{2,3}, FAT do not, Node.js v0.10 does not
function hasMillisResSync () {
  let tmpfile = path.join('millis-test-sync' + Date.now().toString() + Math.random().toString().slice(2))
  tmpfile = path.join(os.tmpdir(), tmpfile)

  // 550 millis past UNIX epoch
  const d = new Date(1435410243862)
  fs.writeFileSync(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141')
  const fd = fs.openSync(tmpfile, 'r+')
  fs.futimesSync(fd, d, d)
  fs.closeSync(fd)
  return fs.statSync(tmpfile).mtime > 1435410243000
}

function hasMillisRes (callback) {
  let tmpfile = path.join('millis-test' + Date.now().toString() + Math.random().toString().slice(2))
  tmpfile = path.join(os.tmpdir(), tmpfile)

  // 550 millis past UNIX epoch
  const d = new Date(1435410243862)
  fs.writeFile(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141', err => {
    if (err) return callback(err)
    fs.open(tmpfile, 'r+', (err, fd) => {
      if (err) return callback(err)
      fs.futimes(fd, d, d, err => {
        if (err) return callback(err)
        fs.close(fd, err => {
          if (err) return callback(err)
          fs.stat(tmpfile, (err, stats) => {
            if (err) return callback(err)
            callback(null, stats.mtime > 1435410243000)
          })
        })
      })
    })
  })
}

function timeRemoveMillis (timestamp) {
  if (typeof timestamp === 'number') {
    return Math.floor(timestamp / 1000) * 1000
  } else if (timestamp instanceof Date) {
    return new Date(Math.floor(timestamp.getTime() / 1000) * 1000)
  } else {
    throw new Error('fs-extra: timeRemoveMillis() unknown parameter type')
  }
}

function utimesMillis (path, atime, mtime, callback) {
  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)
  fs.open(path, 'r+', (err, fd) => {
    if (err) return callback(err)
    fs.futimes(fd, atime, mtime, futimesErr => {
      fs.close(fd, closeErr => {
        if (callback) callback(futimesErr || closeErr)
      })
    })
  })
}

module.exports = {
  hasMillisRes,
  hasMillisResSync,
  timeRemoveMillis,
  utimesMillis
}


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(18)
const path = __webpack_require__(3)
const invalidWin32Path = __webpack_require__(229).invalidWin32Path

const o777 = parseInt('0777', 8)

function mkdirs (p, opts, callback, made) {
  if (typeof opts === 'function') {
    callback = opts
    opts = {}
  } else if (!opts || typeof opts !== 'object') {
    opts = { mode: opts }
  }

  if (process.platform === 'win32' && invalidWin32Path(p)) {
    const errInval = new Error(p + ' contains invalid WIN32 path characters.')
    errInval.code = 'EINVAL'
    return callback(errInval)
  }

  let mode = opts.mode
  const xfs = opts.fs || fs

  if (mode === undefined) {
    mode = o777 & (~process.umask())
  }
  if (!made) made = null

  callback = callback || function () {}
  p = path.resolve(p)

  xfs.mkdir(p, mode, er => {
    if (!er) {
      made = made || p
      return callback(null, made)
    }
    switch (er.code) {
      case 'ENOENT':
        if (path.dirname(p) === p) return callback(er)
        mkdirs(path.dirname(p), opts, (er, made) => {
          if (er) callback(er, made)
          else mkdirs(p, opts, callback, made)
        })
        break

      // In the case of any other error, just see if there's a dir
      // there already.  If so, then hooray!  If not, then something
      // is borked.
      default:
        xfs.stat(p, (er2, stat) => {
          // if the stat fails, then that's super weird.
          // let the original error be the failure reason.
          if (er2 || !stat.isDirectory()) callback(er, made)
          else callback(null, made)
        })
        break
    }
  })
}

module.exports = mkdirs


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(18)
const path = __webpack_require__(3)
const invalidWin32Path = __webpack_require__(229).invalidWin32Path

const o777 = parseInt('0777', 8)

function mkdirsSync (p, opts, made) {
  if (!opts || typeof opts !== 'object') {
    opts = { mode: opts }
  }

  let mode = opts.mode
  const xfs = opts.fs || fs

  if (process.platform === 'win32' && invalidWin32Path(p)) {
    const errInval = new Error(p + ' contains invalid WIN32 path characters.')
    errInval.code = 'EINVAL'
    throw errInval
  }

  if (mode === undefined) {
    mode = o777 & (~process.umask())
  }
  if (!made) made = null

  p = path.resolve(p)

  try {
    xfs.mkdirSync(p, mode)
    made = made || p
  } catch (err0) {
    switch (err0.code) {
      case 'ENOENT':
        if (path.dirname(p) === p) throw err0
        made = mkdirsSync(path.dirname(p), opts, made)
        mkdirsSync(p, opts, made)
        break

      // In the case of any other error, just see if there's a dir
      // there already.  If so, then hooray!  If not, then something
      // is borked.
      default:
        let stat
        try {
          stat = xfs.statSync(p)
        } catch (err1) {
          throw err0
        }
        if (!stat.isDirectory()) throw err0
        break
    }
  }

  return made
}

module.exports = mkdirsSync


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(18)
const path = __webpack_require__(3)
const copyFileSync = __webpack_require__(483)
const mkdir = __webpack_require__(29)

function copySync (src, dest, options) {
  if (typeof options === 'function' || options instanceof RegExp) {
    options = {filter: options}
  }

  options = options || {}
  options.recursive = !!options.recursive

  // default to true for now
  options.clobber = 'clobber' in options ? !!options.clobber : true
  // overwrite falls back to clobber
  options.overwrite = 'overwrite' in options ? !!options.overwrite : options.clobber
  options.dereference = 'dereference' in options ? !!options.dereference : false
  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : false

  options.filter = options.filter || function () { return true }

  // Warn about using preserveTimestamps on 32-bit node:
  if (options.preserveTimestamps && process.arch === 'ia32') {
    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`)
  }

  const stats = (options.recursive && !options.dereference) ? fs.lstatSync(src) : fs.statSync(src)
  const destFolder = path.dirname(dest)
  const destFolderExists = fs.existsSync(destFolder)
  let performCopy = false

  if (options.filter instanceof RegExp) {
    console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function')
    performCopy = options.filter.test(src)
  } else if (typeof options.filter === 'function') performCopy = options.filter(src, dest)

  if (stats.isFile() && performCopy) {
    if (!destFolderExists) mkdir.mkdirsSync(destFolder)
    copyFileSync(src, dest, {
      overwrite: options.overwrite,
      errorOnExist: options.errorOnExist,
      preserveTimestamps: options.preserveTimestamps
    })
  } else if (stats.isDirectory() && performCopy) {
    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest)
    const contents = fs.readdirSync(src)
    contents.forEach(content => {
      const opts = options
      opts.recursive = true
      copySync(path.join(src, content), path.join(dest, content), opts)
    })
  } else if (options.recursive && stats.isSymbolicLink() && performCopy) {
    const srcPath = fs.readlinkSync(src)
    fs.symlinkSync(srcPath, dest)
  }
}

module.exports = copySync


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(18)

const BUF_LENGTH = 64 * 1024
const _buff = __webpack_require__(231)(BUF_LENGTH)

function copyFileSync (srcFile, destFile, options) {
  const overwrite = options.overwrite
  const errorOnExist = options.errorOnExist
  const preserveTimestamps = options.preserveTimestamps

  if (fs.existsSync(destFile)) {
    if (overwrite) {
      fs.unlinkSync(destFile)
    } else if (errorOnExist) {
      throw new Error(`${destFile} already exists`)
    } else return
  }

  const fdr = fs.openSync(srcFile, 'r')
  const stat = fs.fstatSync(fdr)
  const fdw = fs.openSync(destFile, 'w', stat.mode)
  let bytesRead = 1
  let pos = 0

  while (bytesRead > 0) {
    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)
    fs.writeSync(fdw, _buff, 0, bytesRead)
    pos += bytesRead
  }

  if (preserveTimestamps) {
    fs.futimesSync(fdw, stat.atime, stat.mtime)
  }

  fs.closeSync(fdr)
  fs.closeSync(fdw)
}

module.exports = copyFileSync


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(18)
const path = __webpack_require__(3)
const assert = __webpack_require__(49)

const isWindows = (process.platform === 'win32')

function defaults (options) {
  const methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(m => {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
}

function rimraf (p, options, cb) {
  let busyTries = 0

  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  rimraf_(p, options, function CB (er) {
    if (er) {
      if (isWindows && (er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') &&
          busyTries < options.maxBusyTries) {
        busyTries++
        let time = busyTries * 100
        // try again, with the same exact callback as this one.
        return setTimeout(() => rimraf_(p, options, CB), time)
      }

      // already gone
      if (er.code === 'ENOENT') er = null
    }

    cb(er)
  })
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, (er, st) => {
    if (er && er.code === 'ENOENT') {
      return cb(null)
    }

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === 'EPERM' && isWindows) {
      return fixWinEPERM(p, options, er, cb)
    }

    if (st && st.isDirectory()) {
      return rmdir(p, options, er, cb)
    }

    options.unlink(p, er => {
      if (er) {
        if (er.code === 'ENOENT') {
          return cb(null)
        }
        if (er.code === 'EPERM') {
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        }
        if (er.code === 'EISDIR') {
          return rmdir(p, options, er, cb)
        }
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er) {
    assert(er instanceof Error)
  }

  options.chmod(p, 666, er2 => {
    if (er2) {
      cb(er2.code === 'ENOENT' ? null : er)
    } else {
      options.stat(p, (er3, stats) => {
        if (er3) {
          cb(er3.code === 'ENOENT' ? null : er)
        } else if (stats.isDirectory()) {
          rmdir(p, options, er, cb)
        } else {
          options.unlink(p, cb)
        }
      })
    }
  })
}

function fixWinEPERMSync (p, options, er) {
  let stats

  assert(p)
  assert(options)
  if (er) {
    assert(er instanceof Error)
  }

  try {
    options.chmodSync(p, 666)
  } catch (er2) {
    if (er2.code === 'ENOENT') {
      return
    } else {
      throw er
    }
  }

  try {
    stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === 'ENOENT') {
      return
    } else {
      throw er
    }
  }

  if (stats.isDirectory()) {
    rmdirSync(p, options, er)
  } else {
    options.unlinkSync(p)
  }
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr) {
    assert(originalEr instanceof Error)
  }
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, er => {
    if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {
      rmkids(p, options, cb)
    } else if (er && er.code === 'ENOTDIR') {
      cb(originalEr)
    } else {
      cb(er)
    }
  })
}

function rmkids (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, (er, files) => {
    if (er) return cb(er)

    let n = files.length
    let errState

    if (n === 0) return options.rmdir(p, cb)

    files.forEach(f => {
      rimraf(path.join(p, f), options, er => {
        if (errState) {
          return
        }
        if (er) return cb(errState = er)
        if (--n === 0) {
          options.rmdir(p, cb)
        }
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  let st

  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  try {
    st = options.lstatSync(p)
  } catch (er) {
    if (er.code === 'ENOENT') {
      return
    }

    // Windows can EPERM on stat.  Life is suffering.
    if (er.code === 'EPERM' && isWindows) {
      fixWinEPERMSync(p, options, er)
    }
  }

  try {
    // sunos lets the root user unlink directories, which is... weird.
    if (st && st.isDirectory()) {
      rmdirSync(p, options, null)
    } else {
      options.unlinkSync(p)
    }
  } catch (er) {
    if (er.code === 'ENOENT') {
      return
    } else if (er.code === 'EPERM') {
      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
    } else if (er.code !== 'EISDIR') {
      throw er
    }
    rmdirSync(p, options, er)
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr) {
    assert(originalEr instanceof Error)
  }

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === 'ENOTDIR') {
      throw originalEr
    } else if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {
      rmkidsSync(p, options)
    } else if (er.code !== 'ENOENT') {
      throw er
    }
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(f => rimrafSync(path.join(p, f), options))
  options.rmdirSync(p, options)
}

module.exports = rimraf
rimraf.sync = rimrafSync


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(28).fromCallback
const jsonFile = __webpack_require__(155)

jsonFile.outputJsonSync = __webpack_require__(487)
jsonFile.outputJson = u(__webpack_require__(488))
// aliases
jsonFile.outputJSONSync = jsonFile.outputJSONSync
jsonFile.outputJSON = jsonFile.outputJson
jsonFile.writeJSON = jsonFile.writeJson
jsonFile.writeJSONSync = jsonFile.writeJsonSync
jsonFile.readJSON = jsonFile.readJson
jsonFile.readJSONSync = jsonFile.readJsonSync

module.exports = jsonFile


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

var _fs
try {
  _fs = __webpack_require__(18)
} catch (_) {
  _fs = __webpack_require__(11)
}

function readFile (file, options, callback) {
  if (callback == null) {
    callback = options
    options = {}
  }

  if (typeof options === 'string') {
    options = {encoding: options}
  }

  options = options || {}
  var fs = options.fs || _fs

  var shouldThrow = true
  // DO NOT USE 'passParsingErrors' THE NAME WILL CHANGE!!!, use 'throws' instead
  if ('passParsingErrors' in options) {
    shouldThrow = options.passParsingErrors
  } else if ('throws' in options) {
    shouldThrow = options.throws
  }

  fs.readFile(file, options, function (err, data) {
    if (err) return callback(err)

    data = stripBom(data)

    var obj
    try {
      obj = JSON.parse(data, options ? options.reviver : null)
    } catch (err2) {
      if (shouldThrow) {
        err2.message = file + ': ' + err2.message
        return callback(err2)
      } else {
        return callback(null, null)
      }
    }

    callback(null, obj)
  })
}

function readFileSync (file, options) {
  options = options || {}
  if (typeof options === 'string') {
    options = {encoding: options}
  }

  var fs = options.fs || _fs

  var shouldThrow = true
  // DO NOT USE 'passParsingErrors' THE NAME WILL CHANGE!!!, use 'throws' instead
  if ('passParsingErrors' in options) {
    shouldThrow = options.passParsingErrors
  } else if ('throws' in options) {
    shouldThrow = options.throws
  }

  var content = fs.readFileSync(file, options)
  content = stripBom(content)

  try {
    return JSON.parse(content, options.reviver)
  } catch (err) {
    if (shouldThrow) {
      err.message = file + ': ' + err.message
      throw err
    } else {
      return null
    }
  }
}

function writeFile (file, obj, options, callback) {
  if (callback == null) {
    callback = options
    options = {}
  }
  options = options || {}
  var fs = options.fs || _fs

  var spaces = typeof options === 'object' && options !== null
    ? 'spaces' in options
    ? options.spaces : this.spaces
    : this.spaces

  var str = ''
  try {
    str = JSON.stringify(obj, options ? options.replacer : null, spaces) + '\n'
  } catch (err) {
    if (callback) return callback(err, null)
  }

  fs.writeFile(file, str, options, callback)
}

function writeFileSync (file, obj, options) {
  options = options || {}
  var fs = options.fs || _fs

  var spaces = typeof options === 'object' && options !== null
    ? 'spaces' in options
    ? options.spaces : this.spaces
    : this.spaces

  var str = JSON.stringify(obj, options.replacer, spaces) + '\n'
  // not sure if fs.writeFileSync returns anything, but just in case
  return fs.writeFileSync(file, str, options)
}

function stripBom (content) {
  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
  if (Buffer.isBuffer(content)) content = content.toString('utf8')
  content = content.replace(/^\uFEFF/, '')
  return content
}

var jsonfile = {
  spaces: null,
  readFile: readFile,
  readFileSync: readFileSync,
  writeFile: writeFile,
  writeFileSync: writeFileSync
}

module.exports = jsonfile


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(18)
const path = __webpack_require__(3)
const mkdir = __webpack_require__(29)
const jsonFile = __webpack_require__(155)

function outputJsonSync (file, data, options) {
  const dir = path.dirname(file)

  if (!fs.existsSync(dir)) {
    mkdir.mkdirsSync(dir)
  }

  jsonFile.writeJsonSync(file, data, options)
}

module.exports = outputJsonSync


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const path = __webpack_require__(3)
const mkdir = __webpack_require__(29)
const pathExists = __webpack_require__(55).pathExists
const jsonFile = __webpack_require__(155)

function outputJson (file, data, options, callback) {
  if (typeof options === 'function') {
    callback = options
    options = {}
  }

  const dir = path.dirname(file)

  pathExists(dir, (err, itDoes) => {
    if (err) return callback(err)
    if (itDoes) return jsonFile.writeJson(file, data, options, callback)

    mkdir.mkdirs(dir, err => {
      if (err) return callback(err)
      jsonFile.writeJson(file, data, options, callback)
    })
  })
}

module.exports = outputJson


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// most of this code was written by Andrew Kelley
// licensed under the BSD license: see
// https://github.com/andrewrk/node-mv/blob/master/package.json

// this needs a cleanup

const u = __webpack_require__(28).fromCallback
const fs = __webpack_require__(18)
const ncp = __webpack_require__(228)
const path = __webpack_require__(3)
const remove = __webpack_require__(114).remove
const mkdirp = __webpack_require__(29).mkdirs

function move (source, dest, options, callback) {
  if (typeof options === 'function') {
    callback = options
    options = {}
  }

  const shouldMkdirp = ('mkdirp' in options) ? options.mkdirp : true
  const overwrite = options.overwrite || options.clobber || false

  if (shouldMkdirp) {
    mkdirs()
  } else {
    doRename()
  }

  function mkdirs () {
    mkdirp(path.dirname(dest), err => {
      if (err) return callback(err)
      doRename()
    })
  }

  function doRename () {
    if (path.resolve(source) === path.resolve(dest)) {
      fs.access(source, callback)
    } else if (overwrite) {
      fs.rename(source, dest, err => {
        if (!err) return callback()

        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {
          remove(dest, err => {
            if (err) return callback(err)
            options.overwrite = false // just overwriteed it, no need to do it again
            move(source, dest, options, callback)
          })
          return
        }

        // weird Windows shit
        if (err.code === 'EPERM') {
          setTimeout(() => {
            remove(dest, err => {
              if (err) return callback(err)
              options.overwrite = false
              move(source, dest, options, callback)
            })
          }, 200)
          return
        }

        if (err.code !== 'EXDEV') return callback(err)
        moveAcrossDevice(source, dest, overwrite, callback)
      })
    } else {
      fs.link(source, dest, err => {
        if (err) {
          if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {
            moveAcrossDevice(source, dest, overwrite, callback)
            return
          }
          callback(err)
          return
        }
        fs.unlink(source, callback)
      })
    }
  }
}

function moveAcrossDevice (source, dest, overwrite, callback) {
  fs.stat(source, (err, stat) => {
    if (err) {
      callback(err)
      return
    }

    if (stat.isDirectory()) {
      moveDirAcrossDevice(source, dest, overwrite, callback)
    } else {
      moveFileAcrossDevice(source, dest, overwrite, callback)
    }
  })
}

function moveFileAcrossDevice (source, dest, overwrite, callback) {
  const flags = overwrite ? 'w' : 'wx'
  const ins = fs.createReadStream(source)
  const outs = fs.createWriteStream(dest, { flags })

  ins.on('error', err => {
    ins.destroy()
    outs.destroy()
    outs.removeListener('close', onClose)

    // may want to create a directory but `out` line above
    // creates an empty file for us: See #108
    // don't care about error here
    fs.unlink(dest, () => {
      // note: `err` here is from the input stream errror
      if (err.code === 'EISDIR' || err.code === 'EPERM') {
        moveDirAcrossDevice(source, dest, overwrite, callback)
      } else {
        callback(err)
      }
    })
  })

  outs.on('error', err => {
    ins.destroy()
    outs.destroy()
    outs.removeListener('close', onClose)
    callback(err)
  })

  outs.once('close', onClose)
  ins.pipe(outs)

  function onClose () {
    fs.unlink(source, callback)
  }
}

function moveDirAcrossDevice (source, dest, overwrite, callback) {
  const options = {
    overwrite: false
  }

  if (overwrite) {
    remove(dest, err => {
      if (err) return callback(err)
      startNcp()
    })
  } else {
    startNcp()
  }

  function startNcp () {
    ncp(source, dest, options, err => {
      if (err) return callback(err)
      remove(source, callback)
    })
  }
}

module.exports = {
  move: u(move)
}


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(18)
const path = __webpack_require__(3)
const copySync = __webpack_require__(230).copySync
const removeSync = __webpack_require__(114).removeSync
const mkdirpSync = __webpack_require__(29).mkdirsSync
const buffer = __webpack_require__(231)

function moveSync (src, dest, options) {
  options = options || {}
  const overwrite = options.overwrite || options.clobber || false

  src = path.resolve(src)
  dest = path.resolve(dest)

  if (src === dest) return fs.accessSync(src)

  if (isSrcSubdir(src, dest)) throw new Error(`Cannot move '${src}' into itself '${dest}'.`)

  mkdirpSync(path.dirname(dest))
  tryRenameSync()

  function tryRenameSync () {
    if (overwrite) {
      try {
        return fs.renameSync(src, dest)
      } catch (err) {
        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST' || err.code === 'EPERM') {
          removeSync(dest)
          options.overwrite = false // just overwriteed it, no need to do it again
          return moveSync(src, dest, options)
        }

        if (err.code !== 'EXDEV') throw err
        return moveSyncAcrossDevice(src, dest, overwrite)
      }
    } else {
      try {
        fs.linkSync(src, dest)
        return fs.unlinkSync(src)
      } catch (err) {
        if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {
          return moveSyncAcrossDevice(src, dest, overwrite)
        }
        throw err
      }
    }
  }
}

function moveSyncAcrossDevice (src, dest, overwrite) {
  const stat = fs.statSync(src)

  if (stat.isDirectory()) {
    return moveDirSyncAcrossDevice(src, dest, overwrite)
  } else {
    return moveFileSyncAcrossDevice(src, dest, overwrite)
  }
}

function moveFileSyncAcrossDevice (src, dest, overwrite) {
  const BUF_LENGTH = 64 * 1024
  const _buff = buffer(BUF_LENGTH)

  const flags = overwrite ? 'w' : 'wx'

  const fdr = fs.openSync(src, 'r')
  const stat = fs.fstatSync(fdr)
  const fdw = fs.openSync(dest, flags, stat.mode)
  let bytesRead = 1
  let pos = 0

  while (bytesRead > 0) {
    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)
    fs.writeSync(fdw, _buff, 0, bytesRead)
    pos += bytesRead
  }

  fs.closeSync(fdr)
  fs.closeSync(fdw)
  return fs.unlinkSync(src)
}

function moveDirSyncAcrossDevice (src, dest, overwrite) {
  const options = {
    overwrite: false
  }

  if (overwrite) {
    removeSync(dest)
    tryCopySync()
  } else {
    tryCopySync()
  }

  function tryCopySync () {
    copySync(src, dest, options)
    return removeSync(src)
  }
}

// return true if dest is a subdir of src, otherwise false.
// extract dest base dir and check if that is the same as src basename
function isSrcSubdir (src, dest) {
  try {
    return fs.statSync(src).isDirectory() &&
           src !== dest &&
           dest.indexOf(src) > -1 &&
           dest.split(path.dirname(src) + path.sep)[1].split(path.sep)[0] === path.basename(src)
  } catch (e) {
    return false
  }
}

module.exports = {
  moveSync
}


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(28).fromCallback
const fs = __webpack_require__(11)
const path = __webpack_require__(3)
const mkdir = __webpack_require__(29)
const remove = __webpack_require__(114)

const emptyDir = u(function emptyDir (dir, callback) {
  callback = callback || function () {}
  fs.readdir(dir, (err, items) => {
    if (err) return mkdir.mkdirs(dir, callback)

    items = items.map(item => path.join(dir, item))

    deleteItem()

    function deleteItem () {
      const item = items.pop()
      if (!item) return callback()
      remove.remove(item, err => {
        if (err) return callback(err)
        deleteItem()
      })
    }
  })
})

function emptyDirSync (dir) {
  let items
  try {
    items = fs.readdirSync(dir)
  } catch (err) {
    return mkdir.mkdirsSync(dir)
  }

  items.forEach(item => {
    item = path.join(dir, item)
    remove.removeSync(item)
  })
}

module.exports = {
  emptyDirSync,
  emptydirSync: emptyDirSync,
  emptyDir,
  emptydir: emptyDir
}


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const file = __webpack_require__(493)
const link = __webpack_require__(494)
const symlink = __webpack_require__(495)

module.exports = {
  // file
  createFile: file.createFile,
  createFileSync: file.createFileSync,
  ensureFile: file.createFile,
  ensureFileSync: file.createFileSync,
  // link
  createLink: link.createLink,
  createLinkSync: link.createLinkSync,
  ensureLink: link.createLink,
  ensureLinkSync: link.createLinkSync,
  // symlink
  createSymlink: symlink.createSymlink,
  createSymlinkSync: symlink.createSymlinkSync,
  ensureSymlink: symlink.createSymlink,
  ensureSymlinkSync: symlink.createSymlinkSync
}


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(28).fromCallback
const path = __webpack_require__(3)
const fs = __webpack_require__(18)
const mkdir = __webpack_require__(29)
const pathExists = __webpack_require__(55).pathExists

function createFile (file, callback) {
  function makeFile () {
    fs.writeFile(file, '', err => {
      if (err) return callback(err)
      callback()
    })
  }

  pathExists(file, (err, fileExists) => {
    if (err) return callback(err)
    if (fileExists) return callback()
    const dir = path.dirname(file)
    pathExists(dir, (err, dirExists) => {
      if (err) return callback(err)
      if (dirExists) return makeFile()
      mkdir.mkdirs(dir, err => {
        if (err) return callback(err)
        makeFile()
      })
    })
  })
}

function createFileSync (file) {
  if (fs.existsSync(file)) return

  const dir = path.dirname(file)
  if (!fs.existsSync(dir)) {
    mkdir.mkdirsSync(dir)
  }

  fs.writeFileSync(file, '')
}

module.exports = {
  createFile: u(createFile),
  createFileSync
}


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(28).fromCallback
const path = __webpack_require__(3)
const fs = __webpack_require__(18)
const mkdir = __webpack_require__(29)
const pathExists = __webpack_require__(55).pathExists

function createLink (srcpath, dstpath, callback) {
  function makeLink (srcpath, dstpath) {
    fs.link(srcpath, dstpath, err => {
      if (err) return callback(err)
      callback(null)
    })
  }

  pathExists(dstpath, (err, destinationExists) => {
    if (err) return callback(err)
    if (destinationExists) return callback(null)
    fs.lstat(srcpath, (err, stat) => {
      if (err) {
        err.message = err.message.replace('lstat', 'ensureLink')
        return callback(err)
      }

      const dir = path.dirname(dstpath)
      pathExists(dir, (err, dirExists) => {
        if (err) return callback(err)
        if (dirExists) return makeLink(srcpath, dstpath)
        mkdir.mkdirs(dir, err => {
          if (err) return callback(err)
          makeLink(srcpath, dstpath)
        })
      })
    })
  })
}

function createLinkSync (srcpath, dstpath, callback) {
  const destinationExists = fs.existsSync(dstpath)
  if (destinationExists) return undefined

  try {
    fs.lstatSync(srcpath)
  } catch (err) {
    err.message = err.message.replace('lstat', 'ensureLink')
    throw err
  }

  const dir = path.dirname(dstpath)
  const dirExists = fs.existsSync(dir)
  if (dirExists) return fs.linkSync(srcpath, dstpath)
  mkdir.mkdirsSync(dir)

  return fs.linkSync(srcpath, dstpath)
}

module.exports = {
  createLink: u(createLink),
  createLinkSync
}


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(28).fromCallback
const path = __webpack_require__(3)
const fs = __webpack_require__(18)
const _mkdirs = __webpack_require__(29)
const mkdirs = _mkdirs.mkdirs
const mkdirsSync = _mkdirs.mkdirsSync

const _symlinkPaths = __webpack_require__(496)
const symlinkPaths = _symlinkPaths.symlinkPaths
const symlinkPathsSync = _symlinkPaths.symlinkPathsSync

const _symlinkType = __webpack_require__(497)
const symlinkType = _symlinkType.symlinkType
const symlinkTypeSync = _symlinkType.symlinkTypeSync

const pathExists = __webpack_require__(55).pathExists

function createSymlink (srcpath, dstpath, type, callback) {
  callback = (typeof type === 'function') ? type : callback
  type = (typeof type === 'function') ? false : type

  pathExists(dstpath, (err, destinationExists) => {
    if (err) return callback(err)
    if (destinationExists) return callback(null)
    symlinkPaths(srcpath, dstpath, (err, relative) => {
      if (err) return callback(err)
      srcpath = relative.toDst
      symlinkType(relative.toCwd, type, (err, type) => {
        if (err) return callback(err)
        const dir = path.dirname(dstpath)
        pathExists(dir, (err, dirExists) => {
          if (err) return callback(err)
          if (dirExists) return fs.symlink(srcpath, dstpath, type, callback)
          mkdirs(dir, err => {
            if (err) return callback(err)
            fs.symlink(srcpath, dstpath, type, callback)
          })
        })
      })
    })
  })
}

function createSymlinkSync (srcpath, dstpath, type, callback) {
  callback = (typeof type === 'function') ? type : callback
  type = (typeof type === 'function') ? false : type

  const destinationExists = fs.existsSync(dstpath)
  if (destinationExists) return undefined

  const relative = symlinkPathsSync(srcpath, dstpath)
  srcpath = relative.toDst
  type = symlinkTypeSync(relative.toCwd, type)
  const dir = path.dirname(dstpath)
  const exists = fs.existsSync(dir)
  if (exists) return fs.symlinkSync(srcpath, dstpath, type)
  mkdirsSync(dir)
  return fs.symlinkSync(srcpath, dstpath, type)
}

module.exports = {
  createSymlink: u(createSymlink),
  createSymlinkSync
}


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const path = __webpack_require__(3)
const fs = __webpack_require__(18)
const pathExists = __webpack_require__(55).pathExists

/**
 * Function that returns two types of paths, one relative to symlink, and one
 * relative to the current working directory. Checks if path is absolute or
 * relative. If the path is relative, this function checks if the path is
 * relative to symlink or relative to current working directory. This is an
 * initiative to find a smarter `srcpath` to supply when building symlinks.
 * This allows you to determine which path to use out of one of three possible
 * types of source paths. The first is an absolute path. This is detected by
 * `path.isAbsolute()`. When an absolute path is provided, it is checked to
 * see if it exists. If it does it's used, if not an error is returned
 * (callback)/ thrown (sync). The other two options for `srcpath` are a
 * relative url. By default Node's `fs.symlink` works by creating a symlink
 * using `dstpath` and expects the `srcpath` to be relative to the newly
 * created symlink. If you provide a `srcpath` that does not exist on the file
 * system it results in a broken symlink. To minimize this, the function
 * checks to see if the 'relative to symlink' source file exists, and if it
 * does it will use it. If it does not, it checks if there's a file that
 * exists that is relative to the current working directory, if does its used.
 * This preserves the expectations of the original fs.symlink spec and adds
 * the ability to pass in `relative to current working direcotry` paths.
 */

function symlinkPaths (srcpath, dstpath, callback) {
  if (path.isAbsolute(srcpath)) {
    return fs.lstat(srcpath, (err, stat) => {
      if (err) {
        err.message = err.message.replace('lstat', 'ensureSymlink')
        return callback(err)
      }
      return callback(null, {
        'toCwd': srcpath,
        'toDst': srcpath
      })
    })
  } else {
    const dstdir = path.dirname(dstpath)
    const relativeToDst = path.join(dstdir, srcpath)
    return pathExists(relativeToDst, (err, exists) => {
      if (err) return callback(err)
      if (exists) {
        return callback(null, {
          'toCwd': relativeToDst,
          'toDst': srcpath
        })
      } else {
        return fs.lstat(srcpath, (err, stat) => {
          if (err) {
            err.message = err.message.replace('lstat', 'ensureSymlink')
            return callback(err)
          }
          return callback(null, {
            'toCwd': srcpath,
            'toDst': path.relative(dstdir, srcpath)
          })
        })
      }
    })
  }
}

function symlinkPathsSync (srcpath, dstpath) {
  let exists
  if (path.isAbsolute(srcpath)) {
    exists = fs.existsSync(srcpath)
    if (!exists) throw new Error('absolute srcpath does not exist')
    return {
      'toCwd': srcpath,
      'toDst': srcpath
    }
  } else {
    const dstdir = path.dirname(dstpath)
    const relativeToDst = path.join(dstdir, srcpath)
    exists = fs.existsSync(relativeToDst)
    if (exists) {
      return {
        'toCwd': relativeToDst,
        'toDst': srcpath
      }
    } else {
      exists = fs.existsSync(srcpath)
      if (!exists) throw new Error('relative srcpath does not exist')
      return {
        'toCwd': srcpath,
        'toDst': path.relative(dstdir, srcpath)
      }
    }
  }
}

module.exports = {
  symlinkPaths,
  symlinkPathsSync
}


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(18)

function symlinkType (srcpath, type, callback) {
  callback = (typeof type === 'function') ? type : callback
  type = (typeof type === 'function') ? false : type
  if (type) return callback(null, type)
  fs.lstat(srcpath, (err, stats) => {
    if (err) return callback(null, 'file')
    type = (stats && stats.isDirectory()) ? 'dir' : 'file'
    callback(null, type)
  })
}

function symlinkTypeSync (srcpath, type) {
  let stats

  if (type) return type
  try {
    stats = fs.lstatSync(srcpath)
  } catch (e) {
    return 'file'
  }
  return (stats && stats.isDirectory()) ? 'dir' : 'file'
}

module.exports = {
  symlinkType,
  symlinkTypeSync
}


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(28).fromCallback
const fs = __webpack_require__(18)
const path = __webpack_require__(3)
const mkdir = __webpack_require__(29)
const pathExists = __webpack_require__(55).pathExists

function outputFile (file, data, encoding, callback) {
  if (typeof encoding === 'function') {
    callback = encoding
    encoding = 'utf8'
  }

  const dir = path.dirname(file)
  pathExists(dir, (err, itDoes) => {
    if (err) return callback(err)
    if (itDoes) return fs.writeFile(file, data, encoding, callback)

    mkdir.mkdirs(dir, err => {
      if (err) return callback(err)

      fs.writeFile(file, data, encoding, callback)
    })
  })
}

function outputFileSync (file, data, encoding) {
  const dir = path.dirname(file)
  if (fs.existsSync(dir)) {
    return fs.writeFileSync.apply(fs, arguments)
  }
  mkdir.mkdirsSync(dir)
  fs.writeFileSync.apply(fs, arguments)
}

module.exports = {
  outputFile: u(outputFile),
  outputFileSync
}


/***/ }),
/* 499 */
/***/ (function(module, exports) {

var primaryColorDeltas = [{
  h: -0.36246534825751553,
  s: -0.01918060638619346,
  l: 0.3411764705882353
}, {
  h: -0.05191458199037887,
  s: 0,
  l: 0.3915032679738562
}, {
  h: 0.16640986132510704,
  s: 0,
  l: 0.3006535947712418
}, {
  h: -0.5714285714286215,
  s: 0.03777375929274671,
  l: 0.2111111111111111
}, {
  h: 0.0357002916975091,
  s: -0.013050416531429182,
  l: 0.16732026143790849
}, {
  h: 0,
  s: 0,
  l: 0
}, {
  h: -3.6745234825255793,
  s: -0.007947717820399462,
  l: 0.06993464052287579
}, {
  h: 1.4481685978691796,
  s: 0.0734880450070322,
  l: 0.005882352941176505
}, {
  h: 0.560458272778682,
  s: -0.08595629619978884,
  l: -0.14509803921568626
}, {
  h: 7.103396603396608,
  s: 0.0021812200529213975,
  l: -0.122875816993464
}];
var secondaryLightDelta = {
  h: 7.352941176470587,
  s: 0,
  l: 0.0137254901960784
};
var secondaryLighterDelta = {
  h: 7.352941176470587,
  s: 0,
  l: 0.0257324567524675
};
module.exports = {
  primaryColorDeltas: primaryColorDeltas,
  secondaryLightDelta: secondaryLightDelta,
  secondaryLighterDelta: secondaryLighterDelta
};

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

var tinycolor = __webpack_require__(312);
/**
 * 根据差值计算颜色
 * @param {Color} color
 * @param {object including h,s,l} delta
 */


function transfromColor(color, delta) {
  var h = delta.h,
      s = delta.s,
      l = delta.l;
  var resultColor = tinycolor(color);

  if (h !== 0) {
    resultColor = resultColor.spin(h);
  }

  if (s > 0) {
    resultColor = resultColor.saturate(s * 100);
  } else if (s < 0) {
    resultColor = resultColor.desaturate(-s * 100);
  }

  if (l > 0) {
    resultColor = resultColor.lighten(l * 100);
  } else if (l < 0) {
    resultColor = resultColor.darken(-l * 100);
  }

  return resultColor.toHexString();
}

module.exports = transfromColor;

/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "0296dcd95ea72d1c28d5cc6e0cbcde58.png";

/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "c1aaa31201729b856fc300089625cb9a.png";

/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "53eeefad9752aaa02fa9feb865d47d7c.png";

/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "e8333006e50cd74d3ed4b1628f42328e.png";

/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "4484042454246dec2bb9923b51d8975a.png";

/***/ }),
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.locationsAreEqual = exports.createLocation = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _resolvePathname = __webpack_require__(535);

var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

var _valueEqual = __webpack_require__(536);

var _valueEqual2 = _interopRequireDefault(_valueEqual);

var _PathUtils = __webpack_require__(247);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
  var location = void 0;
  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = (0, _PathUtils.parsePath)(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = _extends({}, path);

    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
};

var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
};

/***/ }),
/* 535 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
}

// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

// This implementation is based heavily on node's url.parse
function resolvePathname(to) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash = void 0;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (resolvePathname);

/***/ }),
/* 536 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function valueEqual(a, b) {
  if (a === b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);

    if (aKeys.length !== bKeys.length) return false;

    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

/* harmony default export */ __webpack_exports__["default"] = (valueEqual);

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _warning = __webpack_require__(175);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createTransitionManager = function createTransitionManager() {
  var prompt = null;

  var setPrompt = function setPrompt(nextPrompt) {
    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');

    prompt = nextPrompt;

    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  };

  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');

          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  };

  var listeners = [];

  var appendListener = function appendListener(fn) {
    var isActive = true;

    var listener = function listener() {
      if (isActive) fn.apply(undefined, arguments);
    };

    listeners.push(listener);

    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  };

  var notifyListeners = function notifyListeners() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(undefined, args);
    });
  };

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
};

exports.default = createTransitionManager;

/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};

var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};

var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
  return callback(window.confirm(message));
}; // eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */
var supportsHistory = exports.supportsHistory = function supportsHistory() {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

  return window.history && 'pushState' in window.history;
};

/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */
var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
};

/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */
var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
};

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */
var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
};

/***/ }),
/* 539 */
/***/ (function(module, exports) {


/**
 * Module exports.
 */

module.exports = throttle;

/**
 * Returns a new function that, when invoked, invokes `func` at most one time per
 * `wait` milliseconds.
 *
 * @param {Function} func The `Function` instance to wrap.
 * @param {Number} wait The minimum number of milliseconds that must elapse in between `func` invokations.
 * @return {Function} A new function that wraps the `func` function passed in.
 * @api public
 */

function throttle (func, wait) {
  var rtn; // return value
  var last = 0; // last invokation timestamp
  return function throttled () {
    var now = new Date().getTime();
    var delta = now - last;
    if (delta >= wait) {
      rtn = func.apply(this, arguments);
      last = now;
    }
    return rtn;
  };
}


/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {


var Git = __webpack_require__(541);

var ChildProcess = __webpack_require__(547);
var Buffer = __webpack_require__(86).Buffer;
var exists = __webpack_require__(255);

module.exports = function (baseDir) {

    if (baseDir && !exists(baseDir, exists.FOLDER)) {
        throw new Error("Cannot use simple-git on a directory that does not exist.");
    }

    return new Git(baseDir || process.cwd(), ChildProcess, Buffer);
};



/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

(function () {

   'use strict';

   var debug = __webpack_require__(542)('simple-git');
   var deferred = __webpack_require__(545);
   var exists = __webpack_require__(255);
   var NOOP = function () {};

   /**
    * Git handling for node. All public functions can be chained and all `then` handlers are optional.
    *
    * @param {string} baseDir base directory for all processes to run
    *
    * @param {Object} ChildProcess The ChildProcess module
    * @param {Function} Buffer The Buffer implementation to use
    *
    * @constructor
    */
   function Git (baseDir, ChildProcess, Buffer) {
      this._baseDir = baseDir;
      this._runCache = [];

      this.ChildProcess = ChildProcess;
      this.Buffer = Buffer;
   }

   /**
    * @type {string} The command to use to reference the git binary
    */
   Git.prototype._command = 'git';

   /**
    * @type {[key: string]: string} An object of key=value pairs to be passed as environment variables to the
    *                               spawned child process.
    */
   Git.prototype._env = null;

   /**
    * @type {Function} An optional handler to use when a child process is created
    */
   Git.prototype._outputHandler = null;

   /**
    * @type {boolean} Property showing whether logging will be silenced - defaults to true in a production environment
    */
   Git.prototype._silentLogging = /prod/.test("production");

   /**
    * Sets the path to a custom git binary, should either be `git` when there is an installation of git available on
    * the system path, or a fully qualified path to the executable.
    *
    * @param {string} command
    * @returns {Git}
    */
   Git.prototype.customBinary = function (command) {
      this._command = command;
      return this;
   };

   /**
    * Sets an environment variable for the spawned child process, either supply both a name and value as strings or
    * a single object to entirely replace the current environment variables.
    *
    * @param {string|Object} name
    * @param {string} [value]
    * @returns {Git}
    */
   Git.prototype.env = function (name, value) {
      if (arguments.length === 1 && typeof name === 'object') {
         this._env = name;
      }
      else {
         (this._env = this._env || {})[name] = value;
      }

      return this;
   };

   /**
    * Sets the working directory of the subsequent commands.
    *
    * @param {string} workingDirectory
    * @param {Function} [then]
    * @returns {Git}
    */
   Git.prototype.cwd = function (workingDirectory, then) {
      var git = this;
      var next = Git.trailingFunctionArgument(arguments);

      return this.exec(function () {
         git._baseDir = workingDirectory;
         if (!exists(workingDirectory, exists.FOLDER)) {
            Git.exception(git, 'Git.cwd: cannot change to non-directory "' + workingDirectory + '"', next);
         }
         else {
            next && next(null, workingDirectory);
         }
      });
   };

   /**
    * Sets a handler function to be called whenever a new child process is created, the handler function will be called
    * with the name of the command being run and the stdout & stderr streams used by the ChildProcess.
    *
    * @example
    * require('simple-git')
    *    .outputHandler(function (command, stdout, stderr) {
    *       stdout.pipe(process.stdout);
    *    })
    *    .checkout('https://github.com/user/repo.git');
    *
    * @see http://nodejs.org/api/child_process.html#child_process_class_childprocess
    * @see http://nodejs.org/api/stream.html#stream_class_stream_readable
    * @param {Function} outputHandler
    * @returns {Git}
    */
   Git.prototype.outputHandler = function (outputHandler) {
      this._outputHandler = outputHandler;
      return this;
   };

   /**
    * Initialize a git repo
    *
    * @param {Boolean} [bare=false]
    * @param {Function} [then]
    */
   Git.prototype.init = function (bare, then) {
      var commands = ['init'];
      var next = Git.trailingFunctionArgument(arguments);

      if (bare === true) {
         commands.push('--bare');
      }

      return this._run(commands, function (err) {
         next && next(err);
      });
   };

   /**
    * Check the status of the local repo
    *
    * @param {Function} [then]
    */
   Git.prototype.status = function (then) {
      return this._run(
         ['status', '--porcelain', '-b', '-u'],
         Git._responseHandler(then, 'StatusSummary')
      );
   };

   /**
    * List the stash(s) of the local repo
    *
    * @param {Object|Array} [options]
    * @param {Function} [then]
    */
   Git.prototype.stashList = function (options, then) {
      var handler = Git.trailingFunctionArgument(arguments);
      var opt = (handler === then ? options : null) || {};

      var splitter = opt.splitter || ';;;;';
      var command = [
         "stash",
         "list",
         "--pretty=format:%H %ai %s%d %aN %ae".replace(/\s+/g, splitter) + __webpack_require__(115).COMMIT_BOUNDARY
      ];

      if (Array.isArray(opt)) {
         command = command.concat(opt);
      }

      return this._run(command,
         Git._responseHandler(handler, 'ListLogSummary', splitter)
      );
   };

   /**
    * Stash the local repo
    *
    * @param {Object|Array} [options]
    * @param {Function} [then]
    */
   Git.prototype.stash = function (options, then) {
      var handler = Git.trailingFunctionArgument(arguments);
      var command = ["stash"];

      if (Array.isArray(options)) {
         command = command.concat(options);
      }
      else {
         Git._appendOptions(command, Git.trailingOptionsArgument(arguments));
      }

      return this._run(command, function (err, data) {
         handler && handler(err, !err && data);
      });
   };

   /**
    * Clone a git repo
    *
    * @param {string} repoPath
    * @param {string} localPath
    * @param {String[]} [options] Optional array of options to pass through to the clone command
    * @param {Function} [then]
    */
   Git.prototype.clone = function (repoPath, localPath, options, then) {
      var next = Git.trailingFunctionArgument(arguments);
      var command = ['clone'].concat(Git.trailingArrayArgument(arguments));

      for (var i = 0, iMax = arguments.length; i < iMax; i++) {
         if (typeof arguments[i] === 'string') {
            command.push(arguments[i]);
         }
      }

      return this._run(command, function (err, data) {
         next && next(err, data);
      });
   };

   /**
    * Mirror a git repo
    *
    * @param {string} repoPath
    * @param {string} localPath
    * @param {Function} [then]
    */
   Git.prototype.mirror = function (repoPath, localPath, then) {
      return this.clone(repoPath, localPath, ['--mirror'], then);
   };

   /**
    * Moves one or more files to a new destination.
    *
    * @see https://git-scm.com/docs/git-mv
    *
    * @param {string|string[]} from
    * @param {string} to
    * @param {Function} [then]
    */
   Git.prototype.mv = function (from, to, then) {
      var handler = Git.trailingFunctionArgument(arguments);

      var command = [].concat(from);
      command.unshift('mv', '-v');
      command.push(to);

      this._run(command, Git._responseHandler(handler, 'MoveSummary'))
   };

   /**
    * Internally uses pull and tags to get the list of tags then checks out the latest tag.
    *
    * @param {Function} [then]
    */
   Git.prototype.checkoutLatestTag = function (then) {
      var git = this;
      return this.pull(function() {
         git.tags(function(err, tags) {
            git.checkout(tags.latest, then);
         });
      });
   };

   /**
    * Adds one or more files to source control
    *
    * @param {string|string[]} files
    * @param {Function} [then]
    */
   Git.prototype.add = function (files, then) {
      return this._run(['add'].concat(files), function (err, data) {
         then && then(err);
      });
   };

   /**
    * Commits changes in the current working directory - when specific file paths are supplied, only changes on those
    * files will be committed.
    *
    * @param {string|string[]} message
    * @param {string|string[]} [files]
    * @param {Object} [options]
    * @param {Function} [then]
    */
   Git.prototype.commit = function (message, files, options, then) {
      var handler = Git.trailingFunctionArgument(arguments);

      var command = ['commit'];

      [].concat(message).forEach(function (message) {
         command.push('-m', message);
      });

      [].push.apply(command, [].concat(typeof files === "string" || Array.isArray(files) ? files : []));

      Git._appendOptions(command, Git.trailingOptionsArgument(arguments));

      return this._run(
         command,
         Git._responseHandler(handler, 'CommitSummary')
      );
   };

   /**
    * Gets a function to be used for logging.
    *
    * @param {string} level
    * @param {string} [message]
    *
    * @returns {Function}
    * @private
    */
   Git.prototype._getLog = function (level, message) {
      var log = this._silentLogging ? NOOP : console[level].bind(console);
      if (arguments.length > 1) {
         log(message);
      }
      return log;
   };

   /**
    * Pull the updated contents of the current repo
    *
    * @param {string} [remote] When supplied must also include the branch
    * @param {string} [branch] When supplied must also include the remote
    * @param {Object} [options] Optionally include set of options to merge into the command
    * @param {Function} [then]
    */
   Git.prototype.pull = function (remote, branch, options, then) {
      var command = ["pull"];
      var handler = Git.trailingFunctionArgument(arguments);

      if (typeof remote === 'string' && typeof branch === 'string') {
         command.push(remote, branch);
      }

      Git._appendOptions(command, Git.trailingOptionsArgument(arguments));

      return this._run(command, Git._responseHandler(handler, 'PullSummary'));
   };

   /**
    * Fetch the updated contents of the current repo.
    *
    * @example
    *   .fetch('upstream', 'master') // fetches from master on remote named upstream
    *   .fetch(function () {}) // runs fetch against default remote and branch and calls function
    *
    * @param {string} [remote]
    * @param {string} [branch]
    * @param {Function} [then]
    */
   Git.prototype.fetch = function (remote, branch, then) {
      var command = ["fetch"];
      var next = Git.trailingFunctionArgument(arguments);
      Git._appendOptions(command, Git.trailingOptionsArgument(arguments));

      if (typeof remote === 'string' && typeof branch === 'string') {
         command.push(remote, branch);
      }

      if (Array.isArray(remote)) {
         command = command.concat(remote);
      }

      return this._run(
         command,
         Git._responseHandler(next, 'FetchSummary'),
         {
            concatStdErr: true
         }
      );
   };

   /**
    * Disables/enables the use of the console for printing warnings and errors, by default messages are not shown in
    * a production environment.
    *
    * @param {boolean} silence
    * @returns {Git}
    */
   Git.prototype.silent = function (silence) {
      this._silentLogging = !!silence;
      return this;
   };

   /**
    * List all tags. When using git 2.7.0 or above, include an options object with `"--sort": "property-name"` to
    * sort the tags by that property instead of using the default semantic versioning sort.
    *
    * Note, supplying this option when it is not supported by your Git version will cause the operation to fail.
    *
    * @param {Object} [options]
    * @param {Function} [then]
    */
   Git.prototype.tags = function (options, then) {
      var next = Git.trailingFunctionArgument(arguments);

      var command = ['-l'];
      Git._appendOptions(command, Git.trailingOptionsArgument(arguments));

      var hasCustomSort = command.some(function (option) {
         return /^--sort=/.test(option);
      });

      return this.tag(
         command,
         Git._responseHandler(next, 'TagList', [hasCustomSort])
      );
   };

   /**
    * Rebases the current working copy. Options can be supplied either as an array of string parameters
    * to be sent to the `git rebase` command, or a standard options object.
    *
    * @param {Object|String[]} [options]
    * @param {Function} [then]
    * @returns {Git}
    */
   Git.prototype.rebase = function (options, then) {
      var handler = Git.trailingFunctionArgument(arguments);
      var command = ['rebase'];
      Git._appendOptions(command, Git.trailingOptionsArgument(arguments));

      if (Array.isArray(options)) {
         command.push.apply(command, options);
      }

      return this._run(command, function (err, data) {
         handler && handler(err, !err && data);
      })
   };

   /**
    * Reset a repo
    *
    * @param {string|string[]} [mode=soft] Either an array of arguments supported by the 'git reset' command, or the
    *                                        string value 'soft' or 'hard' to set the reset mode.
    * @param {Function} [then]
    */
   Git.prototype.reset = function (mode, then) {
      var command = ['reset'];
      var next = Git.trailingFunctionArgument(arguments);
      if (next === mode || typeof mode === 'string' || !mode) {
         var modeStr = ['mixed', 'soft', 'hard'].includes(mode) ? mode : 'soft';
         command.push('--' + modeStr);
      }
      else if (Array.isArray(mode)) {
         command.push.apply(command, mode);
      }

      return this._run(command, function (err) {
         next && next(err || null);
      });
   };

   /**
    * Revert one or more commits in the local working copy
    *
    * @param {string} commit The commit to revert. Can be any hash, offset (eg: `HEAD~2`) or range (eg: `master~5..master~2`)
    * @param {Object} [options] Optional options object
    * @param {Function} [then]
    */
   Git.prototype.revert = function (commit, options, then) {
      var next = Git.trailingFunctionArgument(arguments);
      var command = ['revert'];

      Git._appendOptions(command, Git.trailingOptionsArgument(arguments));

      if (typeof commit !== 'string') {
         return this.exec(function () {
            next && next(new TypeError("Commit must be a string"));
         });
      }

      command.push(commit);
      return this._run(command, function (err) {
         next && next(err || null);
      });
   };

   /**
    * Add a lightweight tag to the head of the current branch
    *
    * @param {string} name
    * @param {Function} [then]
    */
   Git.prototype.addTag = function (name, then) {
      if (typeof name !== "string") {
         return this.exec(function () {
            then && then(new TypeError("Git.addTag requires a tag name"));
         });
      }

      return this.tag([name], then);
   };

   /**
    * Add an annotated tag to the head of the current branch
    *
    * @param {string} tagName
    * @param {string} tagMessage
    * @param {Function} [then]
    */
   Git.prototype.addAnnotatedTag = function (tagName, tagMessage, then) {
      return this.tag(['-a', '-m', tagMessage, tagName], function (err) {
         then && then(err);
      });
   };

   /**
    * Check out a tag or revision, any number of additional arguments can be passed to the `git checkout` command
    * by supplying either a string or array of strings as the `what` parameter.
    *
    * @param {string|string[]} what One or more commands to pass to `git checkout`
    * @param {Function} [then]
    */
   Git.prototype.checkout = function (what, then) {
      var command = ['checkout'];
      command = command.concat(what);

      return this._run(command, function (err, data) {
         then && then(err, !err && this._parseCheckout(data));
      });
   };

   /**
    * Check out a remote branch
    *
    * @param {string} branchName name of branch
    * @param {string} startPoint (e.g origin/development)
    * @param {Function} [then]
    */
   Git.prototype.checkoutBranch = function (branchName, startPoint, then) {
      return this.checkout(['-b', branchName, startPoint], then);
   };

   /**
    * Check out a local branch
    *
    * @param {string} branchName of branch
    * @param {Function} [then]
    */
   Git.prototype.checkoutLocalBranch = function (branchName, then) {
      return this.checkout(['-b', branchName], then);
   };

   /**
    * Delete a local branch
    *
    * @param {string} branchName name of branch
    * @param {Function} [then]
    */
   Git.prototype.deleteLocalBranch = function (branchName, then) {
      return this.branch(['-d', branchName], then);
   };

   /**
    * List all branches
    *
    * @param {Object | string[]} [options]
    * @param {Function} [then]
    */
   Git.prototype.branch = function (options, then) {
      var isDelete, responseHandler;
      var next = Git.trailingFunctionArgument(arguments);
      var command = ['branch'];
      if (Array.isArray(options)) {
         command.push.apply(command, options);
      }

      Git._appendOptions(command, Git.trailingOptionsArgument(arguments));
      if (!arguments.length || next === options) {
         command.push('-a');
      }

      isDelete = ['-d', '-D', '--delete'].reduce(function (isDelete, flag) {
         return isDelete || command.indexOf(flag) > 0;
      }, false);

      if (command.indexOf('-v') < 0) {
         command.splice(1, 0, '-v');
      }

      responseHandler = isDelete
         ? Git._responseHandler(next, 'BranchDeleteSummary', false)
         : Git._responseHandler(next, 'BranchSummary');

      return this._run(command, responseHandler);
   };

   /**
    * Return list of local branches
    *
    * @param {Function} [then]
    */
   Git.prototype.branchLocal = function (then) {
      return this.branch(['-v'], then);
   };

   /**
    * Add config to local git instance
    *
    * @param {string} key configuration key (e.g user.name)
    * @param {string} value for the given key (e.g your name)
    * @param {Function} [then]
    */
   Git.prototype.addConfig = function (key, value, then) {
      return this._run(['config', '--local', key, value], function (err, data) {
         then && then(err, !err && data);
      });
   };

   /**
    * Executes any command against the git binary.
    *
    * @param {string[]|Object} commands
    * @param {Function} [then]
    *
    * @returns {Git}
    */
   Git.prototype.raw = function (commands, then) {
      var command = [];
      if (Array.isArray(commands)) {
         command = commands.slice(0);
      }
      else {
         Git._appendOptions(command, Git.trailingOptionsArgument(arguments));
      }

      var next = Git.trailingFunctionArgument(arguments);

      if (!command.length) {
         return this.exec(function () {
            next && next(new Error('Raw: must supply one or more command to execute'), null);
         });
      }

      return this._run(command, function (err, data) {
         next && next(err, !err && data || null);
      });
   };

   /**
    * Add a submodule
    *
    * @param {string} repo
    * @param {string} path
    * @param {Function} [then]
    */
   Git.prototype.submoduleAdd = function (repo, path, then) {
      return this._run(['submodule', 'add', repo, path], function (err) {
         then && then(err);
      });
   };

   /**
    * Update submodules
    *
    * @param {string[]} [args]
    * @param {Function} [then]
    */
   Git.prototype.submoduleUpdate = function (args, then) {
      if (typeof args === 'string') {
         this._getLog('warn', 'Git#submoduleUpdate: args should be supplied as an array of individual arguments');
      }

      var next = Git.trailingFunctionArgument(arguments);
      var command = (args !== next) ? args : [];

      return this.subModule(['update'].concat(command), function (err, args) {
         next && next(err, args);
      });
   };

   /**
    * Initialize submodules
    *
    * @param {string[]} [args]
    * @param {Function} [then]
    */
   Git.prototype.submoduleInit = function (args, then) {
      if (typeof args === 'string') {
         this._getLog('warn', 'Git#submoduleInit: args should be supplied as an array of individual arguments');
      }

      var next = Git.trailingFunctionArgument(arguments);
      var command = (args !== next) ? args : [];

      return this.subModule(['init'].concat(command), function (err, args) {
         next && next(err, args);
      });
   };

   /**
    * Call any `git submodule` function with arguments passed as an array of strings.
    *
    * @param {string[]} options
    * @param {Function} [then]
    */
   Git.prototype.subModule = function (options, then) {
      if (!Array.isArray(options)) {
         return this.exec(function () {
            then && then(new TypeError("Git.subModule requires an array of arguments"));
         });
      }

      if (options[0] !== 'submodule') {
         options.unshift('submodule');
      }

      return this._run(options, function (err, data) {
         then && then(err || null, err ? null : data);
      });
   };

   /**
    * List remote
    *
    * @param {string[]} [args]
    * @param {Function} [then]
    */
   Git.prototype.listRemote = function (args, then) {
      var next = Git.trailingFunctionArgument(arguments);
      var data = next === args || args === undefined ? [] : args;

      if (typeof data === 'string') {
         this._getLog('warn', 'Git#listRemote: args should be supplied as an array of individual arguments');
      }

      return this._run(['ls-remote'].concat(data), function (err, data) {
         next && next(err, data);
      });
   };

   /**
    * Adds a remote to the list of remotes.
    *
    * @param {string} remoteName Name of the repository - eg "upstream"
    * @param {string} remoteRepo Fully qualified SSH or HTTP(S) path to the remote repo
    * @param {Function} [then]
    * @returns {*}
    */
   Git.prototype.addRemote = function (remoteName, remoteRepo, then) {
      return this._run(['remote', 'add', remoteName, remoteRepo], function (err) {
         then && then(err);
      });
   };

   /**
    * Removes an entry from the list of remotes.
    *
    * @param {string} remoteName Name of the repository - eg "upstream"
    * @param {Function} [then]
    * @returns {*}
    */
   Git.prototype.removeRemote = function (remoteName, then) {
      return this._run(['remote', 'remove', remoteName], function (err) {
         then && then(err);
      });
   };

   /**
    * Gets the currently available remotes, setting the optional verbose argument to true includes additional
    * detail on the remotes themselves.
    *
    * @param {boolean} [verbose=false]
    * @param {Function} [then]
    */
   Git.prototype.getRemotes = function (verbose, then) {
      var next = Git.trailingFunctionArgument(arguments);
      var args = verbose === true ? ['-v'] : [];

      return this.remote(args, function (err, data) {
         next && next(err, !err && function () {
            return data.trim().split('\n').filter(Boolean).reduce(function (remotes, remote) {
               var detail = remote.trim().split(/\s+/);
               var name = detail.shift();

               if (!remotes[name]) {
                  remotes[name] = remotes[remotes.length] = {
                     name: name,
                     refs: {}
                  };
               }

               if (detail.length) {
                  remotes[name].refs[detail.pop().replace(/[^a-z]/g, '')] = detail.pop();
               }

               return remotes;
            }, []).slice(0);
         }());
      });
   };

   /**
    * Call any `git remote` function with arguments passed as an array of strings.
    *
    * @param {string[]} options
    * @param {Function} [then]
    */
   Git.prototype.remote = function (options, then) {
      if (!Array.isArray(options)) {
         return this.exec(function () {
            then && then(new TypeError("Git.remote requires an array of arguments"));
         });
      }

      if (options[0] !== 'remote') {
         options.unshift('remote');
      }

      return this._run(options, function (err, data) {
         then && then(err || null, err ? null : data);
      });
   };

   /**
    * Merges from one branch to another, equivalent to running `git merge ${from} $[to}`, the `options` argument can
    * either be an array of additional parameters to pass to the command or null / omitted to be ignored.
    *
    * @param {string} from
    * @param {string} to
    * @param {string[]} [options]
    * @param {Function} [then]
    */
   Git.prototype.mergeFromTo = function (from, to, options, then) {
      var commands = [
         from,
         to
      ];
      var callback = Git.trailingFunctionArgument(arguments);

      if (Array.isArray(options)) {
         commands = commands.concat(options);
      }

      return this.merge(commands, callback);
   };

   /**
    * Runs a merge, `options` can be either an array of arguments
    * supported by the [`git merge`](https://git-scm.com/docs/git-merge)
    * or an options object.
    *
    * Conflicts during the merge result in an error response,
    * the response type whether it was an error or success will be a MergeSummary instance.
    * When successful, the MergeSummary has all detail from a the PullSummary
    *
    * @param {Object | string[]} [options]
    * @param {Function} [then]
    * @returns {*}
    *
    * @see ./responses/MergeSummary.js
    * @see ./responses/PullSummary.js
    */
   Git.prototype.merge = function (options, then) {
      var self = this;
      var userHandler = Git.trailingFunctionArgument(arguments) || NOOP;
      var mergeHandler = function (err, mergeSummary) {
         if (!err && mergeSummary.failed) {
            return Git.fail(self, mergeSummary, userHandler);
         }

         userHandler(err, mergeSummary);
      };

      var command = [];
      Git._appendOptions(command, Git.trailingOptionsArgument(arguments));
      command.push.apply(command, Git.trailingArrayArgument(arguments));

      if (command[0] !== 'merge') {
         command.unshift('merge');
      }

      if (command.length === 1) {
         return this.exec(function () {
            then && then(new TypeError("Git.merge requires at least one option"));
         });
      }

      return this._run(command, Git._responseHandler(mergeHandler, 'MergeSummary'), {
         concatStdErr: true
      });
   };

   /**
    * Call any `git tag` function with arguments passed as an array of strings.
    *
    * @param {string[]} options
    * @param {Function} [then]
    */
   Git.prototype.tag = function (options, then) {
      if (!Array.isArray(options)) {
         return this.exec(function () {
            then && then(new TypeError("Git.tag requires an array of arguments"));
         });
      }

      if (options[0] !== 'tag') {
         options.unshift('tag');
      }

      return this._run(options, function (err, data) {
         then && then(err || null, err ? null : data);
      });
   };

   /**
    * Updates repository server info
    *
    * @param {Function} [then]
    */
   Git.prototype.updateServerInfo = function (then) {
      return this._run(["update-server-info"], function (err, data) {
         then && then(err, !err && data);
      });
   };

   /**
    * Pushes the current committed changes to a remote, optionally specify the names of the remote and branch to use
    * when pushing. Supply multiple options as an array of strings in the first argument - see examples below.
    *
    * @param {string|string[]} [remote]
    * @param {string} [branch]
    * @param {Function} [then]
    */
   Git.prototype.push = function (remote, branch, then) {
      var command = [];
      var handler = Git.trailingFunctionArgument(arguments);

      if (typeof remote === 'string' && typeof branch === 'string') {
         command.push(remote, branch);
      }

      if (Array.isArray(remote)) {
         command = command.concat(remote);
      }

      Git._appendOptions(command, Git.trailingOptionsArgument(arguments));

      if (command[0] !== 'push') {
         command.unshift('push');
      }

      return this._run(command, function (err, data) {
         handler && handler(err, !err && data);
      });
   };

   /**
    * Pushes the current tag changes to a remote which can be either a URL or named remote. When not specified uses the
    * default configured remote spec.
    *
    * @param {string} [remote]
    * @param {Function} [then]
    */
   Git.prototype.pushTags = function (remote, then) {
      var command = ['push'];
      if (typeof remote === "string") {
         command.push(remote);
      }
      command.push('--tags');

      then = typeof arguments[arguments.length - 1] === "function" ? arguments[arguments.length - 1] : null;

      return this._run(command, function (err, data) {
         then && then(err, !err && data);
      });
   };

   /**
    * Removes the named files from source control.
    *
    * @param {string|string[]} files
    * @param {Function} [then]
    */
   Git.prototype.rm = function (files, then) {
      return this._rm(files, '-f', then);
   };

   /**
    * Removes the named files from source control but keeps them on disk rather than deleting them entirely. To
    * completely remove the files, use `rm`.
    *
    * @param {string|string[]} files
    * @param {Function} [then]
    */
   Git.prototype.rmKeepLocal = function (files, then) {
      return this._rm(files, '--cached', then);
   };

   /**
    * Returns a list of objects in a tree based on commit hash. Passing in an object hash returns the object's content,
    * size, and type.
    *
    * Passing "-p" will instruct cat-file to determine the object type, and display its formatted contents.
    *
    * @param {string[]} [options]
    * @param {Function} [then]
    */
   Git.prototype.catFile = function (options, then) {
      return this._catFile('utf-8', arguments);
   };

   /**
    * Equivalent to `catFile` but will return the native `Buffer` of content from the git command's stdout.
    *
    * @param {string[]} options
    * @param then
    */
   Git.prototype.binaryCatFile = function (options, then) {
      return this._catFile('buffer', arguments);
   };

   Git.prototype._catFile = function (format, args) {
      var handler = Git.trailingFunctionArgument(args);
      var command = ['cat-file'];
      var options = args[0];

      if (typeof options === 'string') {
         throw new TypeError('Git#catFile: options must be supplied as an array of strings');
      }
      else if (Array.isArray(options)) {
         command.push.apply(command, options);
      }

      return this._run(command, function (err, data) {
         handler && handler(err, data);
      }, {
         format: format
      });
   };

   /**
    * Return repository changes.
    *
    * @param {string[]} [options]
    * @param {Function} [then]
    */
   Git.prototype.diff = function (options, then) {
      var command = ['diff'];

      if (typeof options === 'string') {
         command[0] += ' ' + options;
         this._getLog('warn',
            'Git#diff: supplying options as a single string is now deprecated, switch to an array of strings');
      }
      else if (Array.isArray(options)) {
         command.push.apply(command, options);
      }

      if (typeof arguments[arguments.length - 1] === 'function') {
         then = arguments[arguments.length - 1];
      }

      return this._run(command, function (err, data) {
         then && then(err, data);
      });
   };

   Git.prototype.diffSummary = function (options, then) {
      var next = Git.trailingFunctionArgument(arguments);
      var command = ['--stat=4096'];

      if (options && options !== next) {
         command.push.apply(command, [].concat(options));
      }

      return this.diff(command, Git._responseHandler(next, 'DiffSummary'));
   };

   /**
    * Wraps `git rev-parse`. Primarily used to convert friendly commit references (ie branch names) to SHA1 hashes.
    *
    * Options should be an array of string options compatible with the `git rev-parse`
    *
    * @param {string|string[]} [options]
    * @param {Function} [then]
    *
    * @see http://git-scm.com/docs/git-rev-parse
    */
   Git.prototype.revparse = function (options, then) {
      var command = ['rev-parse'];

      if (typeof options === 'string') {
         command = command + ' ' + options;
         this._getLog('warn',
            'Git#revparse: supplying options as a single string is now deprecated, switch to an array of strings');
      }
      else if (Array.isArray(options)) {
         command.push.apply(command, options);
      }

      if (typeof arguments[arguments.length - 1] === 'function') {
         then = arguments[arguments.length - 1];
      }

      return this._run(command, function (err, data) {
         then && then(err, data);
      });
   };

   /**
    * Show various types of objects, for example the file at a certain commit
    *
    * @param {string[]} [options]
    * @param {Function} [then]
    */
   Git.prototype.show = function (options, then) {
      var args = [].slice.call(arguments, 0);
      var handler = typeof args[args.length - 1] === "function" ? args.pop() : null;
      var command = ['show'];
      if (typeof options === 'string') {
         command = command + ' ' + options;
         this._getLog('warn',
            'Git#show: supplying options as a single string is now deprecated, switch to an array of strings');
      }
      else if (Array.isArray(options)) {
         command.push.apply(command, options);
      }

      return this._run(command, function (err, data) {
         handler && handler(err, !err && data);
      });
   };

   /**
    * @param {string} mode Required parameter "n" or "f"
    * @param {string[]} options
    * @param {Function} [then]
    */
   Git.prototype.clean = function (mode, options, then) {
      var handler = Git.trailingFunctionArgument(arguments);

      if (typeof mode !== 'string' || !/[nf]/.test(mode)) {
         return this.exec(function () {
            handler && handler(new TypeError('Git clean mode parameter ("n" or "f") is required'));
         });
      }

      if (/[^dfinqxX]/.test(mode)) {
         return this.exec(function () {
            handler && handler(new TypeError('Git clean unknown option found in ' + JSON.stringify(mode)));
         });
      }

      var command = ['clean', '-' + mode];
      if (Array.isArray(options)) {
         command = command.concat(options);
      }

      if (command.some(interactiveMode)) {
         return this.exec(function () {
            handler && handler(new TypeError('Git clean interactive mode is not supported'));
         });
      }

      return this._run(command, function (err, data) {
         handler && handler(err, !err && data);
      });

      function interactiveMode (option) {
         if (/^-[^\-]/.test(option)) {
            return option.indexOf('i') > 0;
         }

         return option === '--interactive';
      }
   };

   /**
    * Call a simple function at the next step in the chain.
    * @param {Function} [then]
    */
   Git.prototype.exec = function (then) {
      this._run([], function () {
         typeof then === 'function' && then();
      });
      return this;
   };

   /**
    * Deprecated means of adding a regular function call at the next step in the chain. Use the replacement
    * Git#exec, the Git#then method will be removed in version 2.x
    *
    * @see exec
    * @deprecated
    */
   Git.prototype.then = function (then) {
      this._getLog(
         'warn',
         "\nGit#then is deprecated after version 1.72 and will be removed in version 2.x"
         + "\nPlease switch to using Git#exec to run arbitrary functions as part of the command chain.\n"
      );
      return this.exec(then);
   };

   /**
    * Show commit logs from `HEAD` to the first commit.
    * If provided between `options.from` and `options.to` tags or branch.
    *
    * Additionally you can provide options.file, which is the path to a file in your repository. Then only this file will be considered.
    *
    * To use a custom splitter in the log format, set `options.splitter` to be the string the log should be split on.
    *
    * Options can also be supplied as a standard options object for adding custom properties supported by the git log command.
    * For any other set of options, supply options as an array of strings to be appended to the git log command.
    *
    * @param {Object|string[]} [options]
    * @param {string} [options.from] The first commit to include
    * @param {string} [options.to] The most recent commit to include
    * @param {string} [options.file] A single file to include in the result
    *
    * @param {Function} [then]
    */
   Git.prototype.log = function (options, then) {
      var handler = Git.trailingFunctionArgument(arguments);
      var opt = (handler === then ? options : null) || {};

      var splitter = opt.splitter || ';';
      var format = opt.format || {
         hash: '%H',
         date: '%ai',
         message: '%s%d',
         author_name: '%aN',
         author_email: '%ae'
      };

      var fields = Object.keys(format);
      var formatstr = fields.map(function (k) {
         return format[k];
      }).join(splitter);
      var command = ["log", "--pretty=format:" + formatstr + __webpack_require__(115).COMMIT_BOUNDARY];

      if (Array.isArray(opt)) {
         command = command.concat(opt);
         opt = {};
      }
      else if (typeof arguments[0] === "string" || typeof arguments[1] === "string") {
         this._getLog('warn',
            'Git#log: supplying to or from as strings is now deprecated, switch to an options configuration object');
         opt = {
            from: arguments[0],
            to: arguments[1]
         };
      }

      if (opt.n || opt['max-count']) {
         command.push("--max-count=" + (opt.n || opt['max-count']));
      }

      if (opt.from && opt.to) {
         command.push(opt.from + "..." + opt.to);
      }

      if (opt.file) {
         command.push("--follow", options.file);
      }

      'splitter n max-count file from to --pretty format'.split(' ').forEach(function (key) {
         delete opt[key];
      });

      Git._appendOptions(command, opt);

      return this._run(command, Git._responseHandler(handler, 'ListLogSummary', [splitter, fields]));
   };

   /**
    * Clears the queue of pending commands and returns the wrapper instance for chaining.
    *
    * @returns {Git}
    */
   Git.prototype.clearQueue = function () {
      this._runCache.length = 0;
      return this;
   };

   /**
    * Check if a pathname or pathnames are excluded by .gitignore
    *
    * @param {string|string[]} pathnames
    * @param {Function} [then]
    */
   Git.prototype.checkIgnore = function (pathnames, then) {
      var handler = Git.trailingFunctionArgument(arguments);
      var command = ["check-ignore"];

      if (handler !== pathnames) {
         command = command.concat(pathnames);
      }

      return this._run(command, function (err, data) {
         handler && handler(err, !err && this._parseCheckIgnore(data));
      });
   };

   /**
    * Validates that the current repo is a Git repo.
    *
    * @param {Function} [then]
    */
   Git.prototype.checkIsRepo = function (then) {
      function onError (exitCode, stdErr, done, fail) {
         if (exitCode === 128 && /(Not a git repository|Kein Git-Repository)/i.test(stdErr)) {
            return done(false);
         }

         fail(stdErr);
      }

      function handler (err, isRepo) {
         then && then(err, String(isRepo).trim() === 'true');
      }

      return this._run(['rev-parse', '--is-inside-work-tree'], handler, {onError: onError});
   };

   Git.prototype._rm = function (_files, options, then) {
      var files = [].concat(_files);
      var args = ['rm', options];
      args.push.apply(args, files);

      return this._run(args, function (err) {
         then && then(err);
      });
   };

   Git.prototype._parseCheckout = function (checkout) {
      // TODO
   };

   /**
    * Parser for the `check-ignore` command - returns each
    * @param {string} [files]
    * @returns {string[]}
    */
   Git.prototype._parseCheckIgnore = function (files) {
      return files.split(/\n/g).filter(Boolean).map(function (file) {
         return file.trim()
      });
   };

   /**
    * Schedules the supplied command to be run, the command should not include the name of the git binary and should
    * be an array of strings passed as the arguments to the git binary.
    *
    * @param {string[]} command
    * @param {Function} then
    * @param {Object} [opt]
    * @param {boolean} [opt.concatStdErr=false] Optionally concatenate stderr output into the stdout
    * @param {boolean} [opt.format="utf-8"] The format to use when reading the content of stdout
    * @param {Function} [opt.onError] Optional error handler for this command - can be used to allow non-clean exits
    *                                  without killing the remaining stack of commands
    * @param {number} [opt.onError.exitCode]
    * @param {string} [opt.onError.stdErr]
    *
    * @returns {Git}
    */
   Git.prototype._run = function (command, then, opt) {
      if (typeof command === "string") {
         command = command.split(" ");
      }
      this._runCache.push([command, then, opt || {}]);
      this._schedule();

      return this;
   };

   Git.prototype._schedule = function () {
      if (!this._childProcess && this._runCache.length) {
         var git = this;
         var Buffer = git.Buffer;
         var task = git._runCache.shift();

         var command = task[0];
         var then = task[1];
         var options = task[2];

         debug(command);

         var result = deferred();

         var attempted = false;
         var attemptClose = function attemptClose (e) {

            // closing when there is content, terminate immediately
            if (attempted || stdErr.length || stdOut.length) {
               result.resolve(e);
               attempted = true;
            }

            // first attempt at closing but no content yet, wait briefly for the close/exit that may follow
            if (!attempted) {
               attempted = true;
               setTimeout(attemptClose.bind(this, e), 50);
            }

         };

         var stdOut = [];
         var stdErr = [];
         var spawned = git.ChildProcess.spawn(git._command, command.slice(0), {
            cwd: git._baseDir,
            env: git._env
         });

         spawned.stdout.on('data', function (buffer) {
            stdOut.push(buffer);
         });

         spawned.stderr.on('data', function (buffer) {
            stdErr.push(buffer);
         });

         spawned.on('error', function (err) {
            stdErr.push(new Buffer(err.stack, 'ascii'));
         });

         spawned.on('close', attemptClose);
         spawned.on('exit', attemptClose);

         result.promise.then(function (exitCode) {
            function done (output) {
               then.call(git, null, output);
            }

            function fail (error) {
               Git.fail(git, error, then);
            }

            delete git._childProcess;

            if (exitCode && stdErr.length && options.onError) {
               options.onError(exitCode, Buffer.concat(stdErr).toString('utf-8'), done, fail);
            }
            else if (exitCode && stdErr.length) {
               fail(Buffer.concat(stdErr).toString('utf-8'));
            }
            else {
               if (options.concatStdErr) {
                  [].push.apply(stdOut, stdErr);
               }

               var stdOutput = Buffer.concat(stdOut);
               if (options.format !== 'buffer') {
                  stdOutput = stdOutput.toString(options.format || 'utf-8');
               }

               done(stdOutput);
            }

            process.nextTick(git._schedule.bind(git));
         });

         git._childProcess = spawned;

         if (git._outputHandler) {
            git._outputHandler(command[0], git._childProcess.stdout, git._childProcess.stderr);
         }
      }
   };

   /**
    * Handles an exception in the processing of a command.
    */
   Git.fail = function (git, error, handler) {
      git._getLog('error', error);
      git._runCache.length = 0;
      if (typeof handler === 'function') {
         handler.call(git, error, null);
      }
   };

   /**
    * Given any number of arguments, returns the last argument if it is a function, otherwise returns null.
    * @returns {Function|null}
    */
   Git.trailingFunctionArgument = function (args) {
      var trailing = args[args.length - 1];
      return (typeof trailing === "function") ? trailing : null;
   };

   /**
    * Given any number of arguments, returns the trailing options argument, ignoring a trailing function argument
    * if there is one. When not found, the return value is null.
    * @returns {Object|null}
    */
   Git.trailingOptionsArgument = function (args) {
      var options = args[(args.length - (Git.trailingFunctionArgument(args) ? 2 : 1))];
      return Object.prototype.toString.call(options) === '[object Object]' ? options : null;
   };

   /**
    * Given any number of arguments, returns the trailing options array argument, ignoring a trailing function argument
    * if there is one. When not found, the return value is an empty array.
    * @returns {Array}
    */
   Git.trailingArrayArgument = function (args) {
      var options = args[(args.length - (Git.trailingFunctionArgument(args) ? 2 : 1))];
      return Object.prototype.toString.call(options) === '[object Array]' ? options : [];
   };

   /**
    * Mutates the supplied command array by merging in properties in the options object. When the
    * value of the item in the options object is a string it will be concatenated to the key as
    * a single `name=value` item, otherwise just the name will be used.
    *
    * @param {string[]} command
    * @param {Object} options
    * @private
    */
   Git._appendOptions = function (command, options) {
      if (options === null) {
         return;
      }

      Object.keys(options).forEach(function (key) {
         var value = options[key];
         if (typeof value === 'string') {
            command.push(key + '=' + value);
         }
         else {
            command.push(key);
         }
      });
   };

   /**
    * Given the type of response and the callback to receive the parsed response,
    * uses the correct parser and calls back the callback.
    *
    * @param {Function} callback
    * @param {string} type
    * @param {Object[]} [args]
    *
    * @private
    */
   Git._responseHandler = function (callback, type, args) {
      return function (error, data) {
         if (typeof callback !== 'function') {
            return;
         }

         if (error) {
            callback(error, null);
            return;
         }

         var handler = __webpack_require__(546)("./" + type);
         var result = handler.parse.apply(handler, [data].concat(args === undefined ? [] : args));

         callback(null, result);
      };

   };

   /**
    * Marks the git instance as having had a fatal exception by clearing the pending queue of tasks and
    * logging to the console.
    *
    * @param git
    * @param error
    * @param callback
    */
   Git.exception = function (git, error, callback) {
      git._runCache.length = 0;
      if (typeof callback === 'function') {
         callback(error instanceof Error ? error : new Error(error));
      }

      git._getLog('error', error);
   };

   module.exports = Git;

}());


/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(543);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(544);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 544 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),
/* 545 */
/***/ (function(module, exports) {


module.exports = function deferred () {
   var d = {};
   d.promise = new Promise(function (resolve, reject) {
      d.resolve = resolve;
      d.reject = reject
   });

   return d;
};


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./BranchDeleteSummary": 256,
	"./BranchDeleteSummary.js": 256,
	"./BranchSummary": 257,
	"./BranchSummary.js": 257,
	"./CommitSummary": 258,
	"./CommitSummary.js": 258,
	"./DiffSummary": 259,
	"./DiffSummary.js": 259,
	"./FetchSummary": 260,
	"./FetchSummary.js": 260,
	"./FileStatusSummary": 161,
	"./FileStatusSummary.js": 161,
	"./ListLogSummary": 115,
	"./ListLogSummary.js": 115,
	"./MergeSummary": 261,
	"./MergeSummary.js": 261,
	"./MoveSummary": 262,
	"./MoveSummary.js": 262,
	"./PullSummary": 162,
	"./PullSummary.js": 162,
	"./StatusSummary": 263,
	"./StatusSummary.js": 263,
	"./TagList": 264,
	"./TagList.js": 264
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 546;

/***/ }),
/* 547 */
/***/ (function(module, exports) {

module.exports = require("child_process");

/***/ }),
/* 548 */,
/* 549 */,
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(2);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = __webpack_require__(8);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IceLayoutLayout = (_temp = _class = function (_Component) {
  _inherits(IceLayoutLayout, _Component);

  function IceLayoutLayout() {
    _classCallCheck(this, IceLayoutLayout);

    return _possibleConstructorReturn(this, (IceLayoutLayout.__proto__ || Object.getPrototypeOf(IceLayoutLayout)).apply(this, arguments));
  }

  _createClass(IceLayoutLayout, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          style = _props.style,
          className = _props.className,
          children = _props.children,
          fixable = _props.fixable,
          others = _objectWithoutProperties(_props, ['style', 'className', 'children', 'fixable']);

      var hasSider = false;

      _react2.default.Children.forEach(children, function (child) {
        if (child && child.type && child.type.displayName && child.type.displayName === 'IceLayoutAside') {
          hasSider = true;
        }
      });

      var classes = (0, _classnames2.default)('ice-layout', {
        'ice-layout-fixable': fixable,
        'ice-layout-has-aside': hasSider
      }, className);

      return _react2.default.createElement(
        'div',
        _extends({}, others, { className: classes, style: style }),
        children
      );
    }
  }]);

  return IceLayoutLayout;
}(_react.Component), _class.displayName = 'IceLayoutLayout', _class.propTypes = {
  /**
   * 布局模块滚动跟随模式
   */
  fixable: _propTypes2.default.bool
}, _class.defaultProps = {
  fixable: false
}, _temp);
exports.default = IceLayoutLayout;

/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(2);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = __webpack_require__(8);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IceLayoutSection = (_temp = _class = function (_Component) {
  _inherits(IceLayoutSection, _Component);

  function IceLayoutSection() {
    _classCallCheck(this, IceLayoutSection);

    return _possibleConstructorReturn(this, (IceLayoutSection.__proto__ || Object.getPrototypeOf(IceLayoutSection)).apply(this, arguments));
  }

  _createClass(IceLayoutSection, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          style = _props.style,
          className = _props.className,
          children = _props.children,
          scrollable = _props.scrollable,
          others = _objectWithoutProperties(_props, ['style', 'className', 'children', 'scrollable']);

      var hasSider = false;

      _react.Children.forEach(children, function (child) {
        if (child && child.type && child.type.displayName && child.type.displayName === 'IceLayoutAside') {
          hasSider = true;
        }
      });

      var classes = (0, _classnames2.default)('ice-layout-section', {
        'ice-layout-section-has-aside': hasSider,
        'ice-layout-scrollable': scrollable
      }, className);

      var childrenElement = void 0;

      if (scrollable) {
        childrenElement = _react2.default.createElement(
          'div',
          { className: 'ice-layout-section-inner' },
          children
        );
      } else {
        childrenElement = children;
      }

      return _react2.default.createElement(
        'div',
        _extends({}, others, { className: classes, style: style }),
        childrenElement
      );
    }
  }]);

  return IceLayoutSection;
}(_react.Component), _class.displayName = 'IceLayoutSection', _class.propTypes = {
  /**
   * 可滚动
   * @description Layout 开启 fixable 后有效
   */
  scrollable: _propTypes2.default.bool
}, _class.defaultProps = {
  scrollable: false
}, _temp);
exports.default = IceLayoutSection;

/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(2);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = __webpack_require__(8);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IceLayoutHeader = (_temp = _class = function (_Component) {
  _inherits(IceLayoutHeader, _Component);

  function IceLayoutHeader() {
    _classCallCheck(this, IceLayoutHeader);

    return _possibleConstructorReturn(this, (IceLayoutHeader.__proto__ || Object.getPrototypeOf(IceLayoutHeader)).apply(this, arguments));
  }

  _createClass(IceLayoutHeader, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          alignItems = _props.alignItems,
          style = _props.style,
          className = _props.className,
          children = _props.children,
          theme = _props.theme,
          others = _objectWithoutProperties(_props, ['alignItems', 'style', 'className', 'children', 'theme']);

      var classes = (0, _classnames2.default)('ice-layout-header', _defineProperty({}, 'ice-layout-theme-' + theme, theme), className);

      var divStyle = _extends({}, style, {
        alignItems: alignItems
      });

      return _react2.default.createElement(
        'div',
        _extends({}, others, { className: classes, style: divStyle }),
        children
      );
    }
  }]);

  return IceLayoutHeader;
}(_react.Component), _class.displayName = 'IceLayoutHeader', _class.propTypes = {
  /**
   * 主题
   */
  theme: _propTypes2.default.oneOf(['dark', 'light']),
  /**
   * 子元素垂直对齐方式
   */
  alignItems: _propTypes2.default.oneOf(['flex-start', 'flex-end', 'center', 'baseline', 'stretch'])
}, _class.defaultProps = {
  theme: 'light',
  alignItems: 'center'
}, _temp);
exports.default = IceLayoutHeader;

/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(8);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IceLayoutFooter = (_temp = _class = function (_Component) {
  _inherits(IceLayoutFooter, _Component);

  function IceLayoutFooter() {
    _classCallCheck(this, IceLayoutFooter);

    return _possibleConstructorReturn(this, (IceLayoutFooter.__proto__ || Object.getPrototypeOf(IceLayoutFooter)).apply(this, arguments));
  }

  _createClass(IceLayoutFooter, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          style = _props.style,
          className = _props.className,
          children = _props.children,
          others = _objectWithoutProperties(_props, ['style', 'className', 'children']);

      var classes = (0, _classnames2.default)('ice-layout-footer', className);
      return _react2.default.createElement(
        'div',
        _extends({}, others, { className: classes, style: style }),
        children
      );
    }
  }]);

  return IceLayoutFooter;
}(_react.Component), _class.displayName = 'IceLayoutFooter', _temp);
exports.default = IceLayoutFooter;

/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(2);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = __webpack_require__(8);

var _classnames2 = _interopRequireDefault(_classnames);

var _AsideTrigger = __webpack_require__(556);

var _AsideTrigger2 = _interopRequireDefault(_AsideTrigger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IceLayoutAside = (_temp = _class = function (_Component) {
  _inherits(IceLayoutAside, _Component);

  function IceLayoutAside(props) {
    _classCallCheck(this, IceLayoutAside);

    var _this = _possibleConstructorReturn(this, (IceLayoutAside.__proto__ || Object.getPrototypeOf(IceLayoutAside)).call(this, props));

    _this.handleTriggerClick = function (collapsed) {
      _this.setState({
        collapsed: collapsed
      });

      if (typeof _this.props.onCollapseChange === 'function') {
        _this.props.onCollapseChange(collapsed);
      }
    };

    _this.state = {
      collapsed: props.collapsed
    };
    return _this;
  }

  _createClass(IceLayoutAside, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('collapsed' in nextProps) {
        if (nextProps.collapsed !== this.props.collapsed) {
          this.setState({
            collapsed: nextProps.collapsed
          });
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          className = _props.className,
          collapsedWidth = _props.collapsedWidth,
          scrollable = _props.scrollable,
          style = _props.style,
          theme = _props.theme,
          trigger = _props.trigger,
          width = _props.width,
          onCollapseChange = _props.onCollapseChange,
          collapsed = _props.collapsed,
          others = _objectWithoutProperties(_props, ['children', 'className', 'collapsedWidth', 'scrollable', 'style', 'theme', 'trigger', 'width', 'onCollapseChange', 'collapsed']);

      var classes = (0, _classnames2.default)('ice-layout-aside', _defineProperty({
        'ice-layout-scrollable': scrollable,
        'ice-layout-aside-has-trigger': trigger === true
      }, 'ice-layout-theme-' + theme, theme), className);

      var widthValue = typeof width === 'number' ? width + 'px' : width;

      var collapsedWidthValue = typeof collapsedWidth === 'number' ? collapsedWidth + 'px' : collapsedWidth;

      var asideStyle = _extends({}, style, {
        flex: '0 0 ' + (this.state.collapsed ? collapsedWidthValue : widthValue),
        width: '' + (this.state.collapsed ? collapsedWidthValue : widthValue)
      });

      return _react2.default.createElement(
        'div',
        _extends({}, others, { className: classes, style: asideStyle }),
        children,
        trigger === true && _react2.default.createElement(_AsideTrigger2.default, {
          onClick: this.handleTriggerClick,
          collapsed: this.state.collapsed
        })
      );
    }
  }]);

  return IceLayoutAside;
}(_react.Component), _class.displayName = 'IceLayoutAside', _class.propTypes = {
  /**
   * 是否收起
   */
  collapsed: _propTypes2.default.bool,
  /**
   * 可滚动
   * @description Layout 开启 fixable 后有效
   */
  scrollable: _propTypes2.default.bool,
  /**
   * 收起后的宽度
   */
  collapsedWidth: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /**
   * collapsed 收起状态切换
   * @params {Boolean} 切换后的状态
   */
  onCollapseChange: _propTypes2.default.func,
  /**
   * 展示默认 trigger
   */
  trigger: _propTypes2.default.bool,
  /**
   * 宽度
   */
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /**
   * 主题
   */
  theme: _propTypes2.default.oneOf(['dark', 'light'])
}, _class.defaultProps = {
  theme: 'light',
  collapsed: undefined,
  collapsedWidth: 80,
  onCollapseChange: function onCollapseChange() {},
  scrollable: false,
  trigger: false,
  width: 200
}, _temp);
exports.default = IceLayoutAside;


IceLayoutAside.Trigger = _AsideTrigger2.default;

/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _icon = __webpack_require__(174);

var _icon2 = _interopRequireDefault(_icon);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(2);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = __webpack_require__(8);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IceLayoutAsideTrigger = (_temp2 = _class = function (_Component) {
  _inherits(IceLayoutAsideTrigger, _Component);

  function IceLayoutAsideTrigger() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, IceLayoutAsideTrigger);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = IceLayoutAsideTrigger.__proto__ || Object.getPrototypeOf(IceLayoutAsideTrigger)).call.apply(_ref, [this].concat(args))), _this), _this.toggleCollapse = function () {
      var newCollapsed = !_this.props.collapsed;
      _this.props.onClick(newCollapsed);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(IceLayoutAsideTrigger, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          collapsed = _props.collapsed,
          style = _props.style;

      var classes = (0, _classnames2.default)('ice-layout-aside-trigger', {
        'ice-layout-aside-trigger-collapsed': collapsed
      }, className);

      return _react2.default.createElement(
        'div',
        { onClick: this.toggleCollapse, className: classes, style: style },
        _react2.default.createElement(_icon2.default, { type: 'arrow-left' })
      );
    }
  }]);

  return IceLayoutAsideTrigger;
}(_react.Component), _class.displayName = 'IceLayoutAsideTrigger', _class.propTypes = {
  collapsed: _propTypes2.default.bool
}, _class.defaultProps = {
  collapsed: false
}, _temp2);
exports.default = IceLayoutAsideTrigger;

/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(2);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = __webpack_require__(8);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IceLayoutMain = (_temp = _class = function (_Component) {
  _inherits(IceLayoutMain, _Component);

  function IceLayoutMain() {
    _classCallCheck(this, IceLayoutMain);

    return _possibleConstructorReturn(this, (IceLayoutMain.__proto__ || Object.getPrototypeOf(IceLayoutMain)).apply(this, arguments));
  }

  _createClass(IceLayoutMain, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          className = _props.className,
          style = _props.style,
          scrollable = _props.scrollable,
          others = _objectWithoutProperties(_props, ['children', 'className', 'style', 'scrollable']);

      var classes = (0, _classnames2.default)('ice-layout-main', {
        'ice-layout-scrollable': scrollable
      }, className);
      return _react2.default.createElement(
        'div',
        _extends({}, others, { className: classes, style: style }),
        children
      );
    }
  }]);

  return IceLayoutMain;
}(_react.Component), _class.displayName = 'IceLayoutMain', _class.propTypes = {
  /**
   * 可滚动
   * @description Layout 开启 fixable 后有效
   */
  scrollable: _propTypes2.default.bool
}, _class.defaultProps = {
  scrollable: false
}, _temp);
exports.default = IceLayoutMain;

/***/ }),
/* 558 */,
/* 559 */,
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "11deaf5faa5a3b7c6564659758c398ee.jpg";

/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 563 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageHome", function() { return PageHome; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageScaffolds", function() { return PageScaffolds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlocks", function() { return PageBlocks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageComponents", function() { return PageComponents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageExtensions", function() { return PageExtensions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageSettings", function() { return PageSettings; });
/* harmony import */ var react_loadable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64);
/* harmony import */ var react_loadable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_loadable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);



var Loading = function Loading() {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "iceworks-skeleton-main"
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "iceworks-skeleton-header"
  }));
};

var Loading2 = function Loading2() {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "iceworks-skeleton-main"
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "iceworks-skeleton-header",
    style: {
      height: 60
    }
  }));
};

var Loading3 = function Loading3() {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "iceworks-skeleton-main"
  });
};

var PageHome = react_loadable__WEBPACK_IMPORTED_MODULE_0___default()({
  loader: function loader() {
    return Promise.all(/* import() | home */[__webpack_require__.e(0), __webpack_require__.e(3), __webpack_require__.e(4), __webpack_require__.e(5), __webpack_require__.e(10)]).then(__webpack_require__.bind(null, 656));
  },
  loading: Loading
});
var PageScaffolds = react_loadable__WEBPACK_IMPORTED_MODULE_0___default()({
  loader: function loader() {
    return Promise.all(/* import() | scaffolds */[__webpack_require__.e(0), __webpack_require__.e(3), __webpack_require__.e(4), __webpack_require__.e(6), __webpack_require__.e(13)]).then(__webpack_require__.bind(null, 657));
  },
  loading: Loading2
});
var PageBlocks = react_loadable__WEBPACK_IMPORTED_MODULE_0___default()({
  loader: function loader() {
    return Promise.all(/* import() | blocks */[__webpack_require__.e(0), __webpack_require__.e(3), __webpack_require__.e(8)]).then(__webpack_require__.bind(null, 659));
  },
  loading: Loading2
});
var PageComponents = react_loadable__WEBPACK_IMPORTED_MODULE_0___default()({
  loader: function loader() {
    return Promise.all(/* import() | blocks */[__webpack_require__.e(0), __webpack_require__.e(3), __webpack_require__.e(8)]).then(__webpack_require__.bind(null, 660));
  },
  loading: Loading2
});
var PageExtensions = react_loadable__WEBPACK_IMPORTED_MODULE_0___default()({
  loader: function loader() {
    return __webpack_require__.e(/* import() | extenstions */ 9).then(__webpack_require__.bind(null, 655));
  },
  loading: Loading2
});
var PageSettings = react_loadable__WEBPACK_IMPORTED_MODULE_0___default()({
  loader: function loader() {
    return Promise.all(/* import() | settings */[__webpack_require__.e(0), __webpack_require__.e(4), __webpack_require__.e(5), __webpack_require__.e(14)]).then(__webpack_require__.bind(null, 658));
  },
  loading: Loading3
});

/***/ }),
/* 564 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _stores_projects__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);


electron__WEBPACK_IMPORTED_MODULE_0__["ipcRenderer"].on('menu:project:console:toggle', function () {
  if (_stores_projects__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].currentProject) {
    _stores_projects__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].currentProject.toggleTerminal();
  }
});

/***/ }),
/* 565 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.6.3
var classic,
  __slice = [].slice;

module.exports = classic = {};

classic.implement = function() {
  var classProto, classReference, desc, member, mixin, mixins, _i, _j, _len;
  mixins = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), classReference = arguments[_i++];
  for (_j = 0, _len = mixins.length; _j < _len; _j++) {
    mixin = mixins[_j];
    classProto = classReference.prototype;
    for (member in mixin.prototype) {
      if (!Object.getOwnPropertyDescriptor(classProto, member)) {
        desc = Object.getOwnPropertyDescriptor(mixin.prototype, member);
        Object.defineProperty(classProto, member, desc);
      }
    }
  }
  return classReference;
};

classic.mix = function() {
  var classProto, classReference, desc, member, mixin, mixins, _i, _j, _len;
  mixins = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), classReference = arguments[_i++];
  classProto = classReference.prototype;
  classReference.__mixinCloners = [];
  classReference.__applyClonersFor = function(instance, args) {
    var cloner, _j, _len, _ref;
    if (args == null) {
      args = null;
    }
    _ref = classReference.__mixinCloners;
    for (_j = 0, _len = _ref.length; _j < _len; _j++) {
      cloner = _ref[_j];
      cloner.apply(instance, args);
    }
  };
  classReference.__mixinInitializers = [];
  classReference.__initMixinsFor = function(instance, args) {
    var initializer, _j, _len, _ref;
    if (args == null) {
      args = null;
    }
    _ref = classReference.__mixinInitializers;
    for (_j = 0, _len = _ref.length; _j < _len; _j++) {
      initializer = _ref[_j];
      initializer.apply(instance, args);
    }
  };
  classReference.__mixinQuitters = [];
  classReference.__applyQuittersFor = function(instance, args) {
    var quitter, _j, _len, _ref;
    if (args == null) {
      args = null;
    }
    _ref = classReference.__mixinQuitters;
    for (_j = 0, _len = _ref.length; _j < _len; _j++) {
      quitter = _ref[_j];
      quitter.apply(instance, args);
    }
  };
  for (_j = 0, _len = mixins.length; _j < _len; _j++) {
    mixin = mixins[_j];
    if (!(mixin.constructor instanceof Function)) {
      throw Error("Mixin should be a function");
    }
    for (member in mixin.prototype) {
      if (member.substr(0, 11) === '__initMixin') {
        classReference.__mixinInitializers.push(mixin.prototype[member]);
        continue;
      } else if (member.substr(0, 11) === '__clonerFor') {
        classReference.__mixinCloners.push(mixin.prototype[member]);
        continue;
      } else if (member.substr(0, 12) === '__quitterFor') {
        classReference.__mixinQuitters.push(mixin.prototype[member]);
        continue;
      }
      if (!Object.getOwnPropertyDescriptor(classProto, member)) {
        desc = Object.getOwnPropertyDescriptor(mixin.prototype, member);
        Object.defineProperty(classProto, member, desc);
      }
    }
  }
  return classReference;
};


/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.6.3
var object, _common,
  __hasProp = {}.hasOwnProperty;

_common = __webpack_require__(567);

module.exports = object = {
  isBareObject: _common.isBareObject.bind(_common),
  /*
  	if object is an instance of a class
  */

  isInstance: function(what) {
    return !this.isBareObject(what);
  },
  /*
  	Alias to _common.typeOf
  */

  typeOf: _common.typeOf.bind(_common),
  /*
  	Alias to _common.clone
  */

  clone: _common.clone.bind(_common),
  /*
  	Empties an object of its properties.
  */

  empty: function(o) {
    var prop;
    for (prop in o) {
      if (o.hasOwnProperty(prop)) {
        delete o[prop];
      }
    }
    return o;
  },
  /*
  	Empties an object. Doesn't check for hasOwnProperty, so it's a tiny
  	bit faster. Use it for plain objects.
  */

  fastEmpty: function(o) {
    var property;
    for (property in o) {
      delete o[property];
    }
    return o;
  },
  /*
  	Overrides values fomr `newValues` on `base`, as long as they
  	already exist in base.
  */

  overrideOnto: function(base, newValues) {
    var key, newVal, oldVal;
    if (!this.isBareObject(newValues) || !this.isBareObject(base)) {
      return base;
    }
    for (key in base) {
      oldVal = base[key];
      newVal = newValues[key];
      if (newVal === void 0) {
        continue;
      }
      if (typeof newVal !== 'object' || this.isInstance(newVal)) {
        base[key] = this.clone(newVal);
      } else {
        if (typeof oldVal !== 'object' || this.isInstance(oldVal)) {
          base[key] = this.clone(newVal);
        } else {
          this.overrideOnto(oldVal, newVal);
        }
      }
    }
    return base;
  },
  /*
  	Takes a clone of 'base' and runs #overrideOnto on it
  */

  override: function(base, newValues) {
    return this.overrideOnto(this.clone(base), newValues);
  },
  append: function(base, toAppend) {
    return this.appendOnto(this.clone(base), toAppend);
  },
  appendOnto: function(base, toAppend) {
    var key, newVal, oldVal;
    if (!this.isBareObject(toAppend) || !this.isBareObject(base)) {
      return base;
    }
    for (key in toAppend) {
      if (!__hasProp.call(toAppend, key)) continue;
      newVal = toAppend[key];
      if (newVal === void 0) {
        continue;
      }
      if (typeof newVal !== 'object' || this.isInstance(newVal)) {
        base[key] = newVal;
      } else {
        oldVal = base[key];
        if (typeof oldVal !== 'object' || this.isInstance(oldVal)) {
          base[key] = this.clone(newVal);
        } else {
          this.appendOnto(oldVal, newVal);
        }
      }
    }
    return base;
  },
  groupProps: function(obj, groups) {
    var def, defs, grouped, key, name, shouldAdd, val, _i, _len;
    grouped = {};
    for (name in groups) {
      defs = groups[name];
      grouped[name] = {};
    }
    grouped['rest'] = {};
    top: //;
    for (key in obj) {
      val = obj[key];
      shouldAdd = false;
      for (name in groups) {
        defs = groups[name];
        if (!Array.isArray(defs)) {
          defs = [defs];
        }
        for (_i = 0, _len = defs.length; _i < _len; _i++) {
          def = defs[_i];
          if (typeof def === 'string') {
            if (key === def) {
              shouldAdd = true;
            }
          } else if (def instanceof RegExp) {
            if (def.test(key)) {
              shouldAdd = true;
            }
          } else if (def instanceof Function) {
            if (def(key)) {
              shouldAdd = true;
            }
          } else {
            throw Error('Group definitions must either\
						be strings, regexes, or functions.');
          }
          if (shouldAdd) {
            grouped[name][key] = val;
            continue top;
          }
        }
      }
      grouped['rest'][key] = val;
    }
    return grouped;
  }
};


/***/ }),
/* 567 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.6.3
var common;

module.exports = common = {
  /*
  	Checks to see if o is an object, and it isn't an instance
  	of some class.
  */

  isBareObject: function(o) {
    if ((o != null) && o.constructor === Object) {
      return true;
    }
    return false;
  },
  /*
  	Returns type of an object, including:
  	undefined, null, string, number, array,
  	arguments, element, textnode, whitespace, and object
  */

  typeOf: function(item) {
    var _ref;
    if (item === null) {
      return 'null';
    }
    if (typeof item !== 'object') {
      return typeof item;
    }
    if (Array.isArray(item)) {
      return 'array';
    }
    if (item.nodeName) {
      if (item.nodeType === 1) {
        return 'element';
      }
      if (item.nodeType === 3) {
        return (_ref = /\S/.test(item.nodeValue)) != null ? _ref : {
          'textnode': 'whitespace'
        };
      }
    } else if (typeof item.length === 'number') {
      if (item.callee) {
        return 'arguments';
      }
    }
    return typeof item;
  },
  clone: function(item, includePrototype) {
    if (includePrototype == null) {
      includePrototype = false;
    }
    switch (common.typeOf(item)) {
      case 'array':
        return common._cloneArray(item, includePrototype);
      case 'object':
        return common._cloneObject(item, includePrototype);
      default:
        return item;
    }
  },
  /*
  	Deep clone of an object.
  	From MooTools
  */

  _cloneObject: function(o, includePrototype) {
    var clone, key;
    if (includePrototype == null) {
      includePrototype = false;
    }
    if (common.isBareObject(o)) {
      clone = {};
      for (key in o) {
        clone[key] = common.clone(o[key], includePrototype);
      }
      return clone;
    } else {
      if (!includePrototype) {
        return o;
      }
      if (o instanceof Function) {
        return o;
      }
      clone = Object.create(o.constructor.prototype);
      for (key in o) {
        if (o.hasOwnProperty(key)) {
          clone[key] = common.clone(o[key], includePrototype);
        }
      }
      return clone;
    }
  },
  /*
  	Deep clone of an array.
  	From MooTools
  */

  _cloneArray: function(a, includePrototype) {
    var clone, i;
    if (includePrototype == null) {
      includePrototype = false;
    }
    i = a.length;
    clone = new Array(i);
    while (i--) {
      clone[i] = common.clone(a[i], includePrototype);
    }
    return clone;
  }
};


/***/ }),
/* 568 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.6.3
module.exports = {
  pad: function(n, width, z) {
    if (z == null) {
      z = '0';
    }
    n = n + '';
    if (n.length >= width) {
      return n;
    } else {
      return new Array(width - n.length + 1).join(z) + n;
    }
  }
};


/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.6.3
var Emitter, array;

array = __webpack_require__(268);

module.exports = Emitter = (function() {
  function Emitter() {
    this._listeners = {};
    this._listenersForAnyEvent = [];
    this._disabledEmitters = {};
  }

  Emitter.prototype.on = function(eventName, listener) {
    if (this._listeners[eventName] == null) {
      this._listeners[eventName] = [];
    }
    this._listeners[eventName].push(listener);
    return this;
  };

  Emitter.prototype.once = function(eventName, listener) {
    var cb, ran,
      _this = this;
    ran = false;
    cb = function() {
      if (ran) {
        return;
      }
      ran = true;
      listener();
      return setTimeout(function() {
        return _this.removeEvent(eventName, cb);
      }, 0);
    };
    this.on(eventName, cb);
    return this;
  };

  Emitter.prototype.onAnyEvent = function(listener) {
    this._listenersForAnyEvent.push(listener);
    return this;
  };

  Emitter.prototype.removeEvent = function(eventName, listener) {
    if (this._listeners[eventName] == null) {
      return this;
    }
    array.pluckOneItem(this._listeners[eventName], listener);
    return this;
  };

  Emitter.prototype.removeListeners = function(eventName) {
    if (this._listeners[eventName] == null) {
      return this;
    }
    this._listeners[eventName].length = 0;
    return this;
  };

  Emitter.prototype.removeAllListeners = function() {
    var listeners, name, _ref;
    _ref = this._listeners;
    for (name in _ref) {
      listeners = _ref[name];
      listeners.length = 0;
    }
    return this;
  };

  Emitter.prototype._emit = function(eventName, data) {
    var listener, _i, _j, _len, _len1, _ref, _ref1;
    _ref = this._listenersForAnyEvent;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listener = _ref[_i];
      listener.call(this, data, eventName);
    }
    if (this._listeners[eventName] == null) {
      return;
    }
    _ref1 = this._listeners[eventName];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      listener = _ref1[_j];
      listener.call(this, data);
    }
  };

  Emitter.prototype._throttleEmitterMethod = function(fnName, time) {
    var lastCallArgs, originalFn, pend, pending, runIt, timer,
      _this = this;
    if (time == null) {
      time = 1000;
    }
    originalFn = this[fnName];
    if (typeof originalFn !== 'function') {
      throw Error("this class does not have a method called '" + fnName + "'");
    }
    lastCallArgs = null;
    pending = false;
    timer = null;
    this[fnName] = function() {
      lastCallArgs = arguments;
      return pend();
    };
    pend = function() {
      if (pending) {
        clearTimeout(timer);
      }
      timer = setTimeout(runIt, time);
      return pending = true;
    };
    return runIt = function() {
      pending = false;
      return originalFn.apply(_this, lastCallArgs);
    };
  };

  Emitter.prototype._disableEmitter = function(fnName) {
    if (this._disabledEmitters[fnName] != null) {
      throw Error("" + fnName + " is already a disabled emitter");
    }
    this._disabledEmitters[fnName] = this[fnName];
    return this[fnName] = function() {};
  };

  Emitter.prototype._enableEmitter = function(fnName) {
    var fn;
    fn = this._disabledEmitters[fnName];
    if (fn == null) {
      throw Error("" + fnName + " is not a disabled emitter");
    }
    this[fnName] = fn;
    return delete this._disabledEmitters[fnName];
  };

  return Emitter;

})();


/***/ }),
/* 570 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.8.0
module.exports = function() {
  return {
    'pretty-error': {
      display: 'block',
      marginLeft: '2'
    },
    'pretty-error > header': {
      display: 'block'
    },
    'pretty-error > header > title > kind': {
      background: 'red',
      color: 'bright-white'
    },
    'pretty-error > header > title > wrapper': {
      marginRight: '1',
      color: 'grey'
    },
    'pretty-error > header > colon': {
      color: 'grey',
      marginRight: 1
    },
    'pretty-error > header > message': {
      color: 'bright-white'
    },
    'pretty-error > trace': {
      display: 'block',
      marginTop: 1
    },
    'pretty-error > trace > item': {
      display: 'block',
      marginBottom: 1,
      marginLeft: 2,
      bullet: '"<grey>-</grey>"'
    },
    'pretty-error > trace > item > header': {
      display: 'block'
    },
    'pretty-error > trace > item > header > pointer > file': {
      color: 'bright-yellow'
    },
    'pretty-error > trace > item > header > pointer > colon': {
      color: 'grey'
    },
    'pretty-error > trace > item > header > pointer > line': {
      color: 'bright-yellow',
      marginRight: 1
    },
    'pretty-error > trace > item > header > what': {
      color: 'white'
    },
    'pretty-error > trace > item > footer': {
      display: 'block'
    },
    'pretty-error > trace > item > footer > addr': {
      display: 'block',
      color: 'grey'
    },
    'pretty-error > trace > item > footer > extra': {
      display: 'block',
      color: 'grey'
    }
  };
};


/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.8.0
var ParsedError, prop, sysPath, _fn, _i, _len, _ref;

sysPath = __webpack_require__(3);

module.exports = ParsedError = (function() {
  function ParsedError(error) {
    this.error = error;
    this._parse();
  }

  ParsedError.prototype._parse = function() {
    var m;
    this._trace = [];
    this._kind = 'Error';
    this._wrapper = '';
    if (this.error.wrapper != null) {
      this._wrapper = String(this.error.wrapper);
    }
    if (typeof this.error !== 'object') {
      this._message = String(this.error);
    } else {
      this._stack = this.error.stack;
      if (this.error.kind != null) {
        this._kind = String(this.error.kind);
      } else if (typeof this._stack === 'string') {
        if (m = this._stack.match(/^([a-zA-Z0-9\_\$]+):\ /)) {
          this._kind = m[1];
        }
      }
      if (typeof this._stack === 'string') {
        this._parseStack();
      } else {
        this._message = (this.error.message != null) && String(this.error.message) || '';
      }
    }
  };

  ParsedError.prototype._parseStack = function() {
    var line, message, messageLines, reachedTrace, _i, _len, _ref;
    messageLines = [];
    reachedTrace = false;
    _ref = this._stack.split('\n');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      if (line.trim() === '') {
        continue;
      }
      if (reachedTrace) {
        this._trace.push(this._parseTraceItem(line));
      } else {
        if (line.match(/^\s*at\s.+/)) {
          reachedTrace = true;
          this._trace.push(this._parseTraceItem(line));
        } else {
          messageLines.push(line);
        }
      }
    }
    message = messageLines.join('\n');
    if (message.substr(0, this._kind.length) === this._kind) {
      message = message.substr(this._kind.length, message.length).replace(/^\:\s+/, '');
    }
    this._message = message;
  };

  ParsedError.prototype._parseTraceItem = function(text) {
    var addr, col, d, dir, file, jsCol, jsLine, line, m, original, packageName, packages, path, r, remaining, shortenedAddr, shortenedPath, what;
    text = text.trim();
    if (text === '') {
      return;
    }
    if (!text.match(/^at\ /)) {
      return text;
    }
    text = text.replace(/^at /, '');
    if (text === 'Error (<anonymous>)' || text === 'Error (<anonymous>:null:null)') {
      return;
    }
    original = text;
    what = null;
    addr = null;
    path = null;
    dir = null;
    file = null;
    line = null;
    col = null;
    jsLine = null;
    jsCol = null;
    shortenedPath = null;
    shortenedAddr = null;
    packageName = '[current]';
    if (m = text.match(/\(([^\)]+)\)$/)) {
      addr = m[1].trim();
    }
    if (addr != null) {
      what = text.substr(0, text.length - addr.length - 2);
      what = what.trim();
    }
    if (addr == null) {
      addr = text.trim();
    }
    addr = this._fixPath(addr);
    remaining = addr;
    if (m = remaining.match(/\,\ <js>:(\d+):(\d+)$/)) {
      jsLine = m[1];
      jsCol = m[2];
      remaining = remaining.substr(0, remaining.length - m[0].length);
    }
    if (m = remaining.match(/:(\d+):(\d+)$/)) {
      line = m[1];
      col = m[2];
      remaining = remaining.substr(0, remaining.length - m[0].length);
      path = remaining;
    }
    if (path != null) {
      file = sysPath.basename(path);
      dir = sysPath.dirname(path);
      if (dir === '.') {
        dir = '';
      }
      path = this._fixPath(path);
      file = this._fixPath(file);
      dir = this._fixPath(dir);
    }
    if (dir != null) {
      d = dir.replace(/[\\]{1,2}/g, '/');
      if (m = d.match(/node_modules\/([^\/]+)(?!.*node_modules.*)/)) {
        packageName = m[1];
      }
    }
    if (jsLine == null) {
      jsLine = line;
      jsCol = col;
    }
    if (path != null) {
      r = this._rectifyPath(path);
      shortenedPath = r.path;
      shortenedAddr = shortenedPath + addr.substr(path.length, addr.length);
      packages = r.packages;
    }
    return {
      original: original,
      what: what,
      addr: addr,
      path: path,
      dir: dir,
      file: file,
      line: parseInt(line),
      col: parseInt(col),
      jsLine: parseInt(jsLine),
      jsCol: parseInt(jsCol),
      packageName: packageName,
      shortenedPath: shortenedPath,
      shortenedAddr: shortenedAddr,
      packages: packages || []
    };
  };

  ParsedError.prototype._getMessage = function() {
    return this._message;
  };

  ParsedError.prototype._getKind = function() {
    return this._kind;
  };

  ParsedError.prototype._getWrapper = function() {
    return this._wrapper;
  };

  ParsedError.prototype._getStack = function() {
    return this._stack;
  };

  ParsedError.prototype._getArguments = function() {
    return this.error["arguments"];
  };

  ParsedError.prototype._getType = function() {
    return this.error.type;
  };

  ParsedError.prototype._getTrace = function() {
    return this._trace;
  };

  ParsedError.prototype._fixPath = function(path) {
    return path.replace(/[\\]{1,2}/g, '/');
  };

  ParsedError.prototype._rectifyPath = function(path, nameForCurrentPackage) {
    var m, packages, parts, remaining, rest;
    path = String(path);
    remaining = path;
    if (!(m = path.match(/^(.+?)\/node_modules\/(.+)$/))) {
      return {
        path: path,
        packages: []
      };
    }
    parts = [];
    packages = [];
    if (typeof nameForCurrentPackage === 'string') {
      parts.push("[" + nameForCurrentPackage + "]");
      packages.push("[" + nameForCurrentPackage + "]");
    } else {
      parts.push("[" + (m[1].match(/([^\/]+)$/)[1]) + "]");
      packages.push(m[1].match(/([^\/]+)$/)[1]);
    }
    rest = m[2];
    while (m = rest.match(/([^\/]+)\/node_modules\/(.+)$/)) {
      parts.push("[" + m[1] + "]");
      packages.push(m[1]);
      rest = m[2];
    }
    if (m = rest.match(/([^\/]+)\/(.+)$/)) {
      parts.push("[" + m[1] + "]");
      packages.push(m[1]);
      rest = m[2];
    }
    parts.push(rest);
    return {
      path: parts.join("/"),
      packages: packages
    };
  };

  return ParsedError;

})();

_ref = ['message', 'kind', 'arguments', 'type', 'stack', 'trace', 'wrapper'];
_fn = function() {
  var methodName;
  methodName = '_get' + prop[0].toUpperCase() + prop.substr(1, prop.length);
  return Object.defineProperty(ParsedError.prototype, prop, {
    get: function() {
      return this[methodName]();
    }
  });
};
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  prop = _ref[_i];
  _fn();
}


/***/ }),
/* 572 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.8.0
module.exports = ['_debugger.js', '_http_agent.js', '_http_client.js', '_http_common.js', '_http_incoming.js', '_http_outgoing.js', '_http_server.js', '_linklist.js', '_stream_duplex.js', '_stream_passthrough.js', '_stream_readable.js', '_stream_transform.js', '_stream_writable.js', '_tls_legacy.js', '_tls_wrap.js', 'assert.js', 'buffer.js', 'child_process.js', 'cluster.js', 'console.js', 'constants.js', 'crypto.js', 'dgram.js', 'dns.js', 'domain.js', 'events.js', 'freelist.js', 'fs.js', 'http.js', 'https.js', 'module.js', 'net.js', 'os.js', 'path.js', 'punycode.js', 'querystring.js', 'readline.js', 'repl.js', 'smalloc.js', 'stream.js', 'string_decoder.js', 'sys.js', 'timers.js', 'tls.js', 'tty.js', 'url.js', 'util.js', 'vm.js', 'zlib.js', 'node.js'];


/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var AnsiPainter, Layout, RenderKid, Styles, blockStyleApplier, inlineStyleApplier, object, stripAnsi, terminalWidth, tools;

inlineStyleApplier = __webpack_require__(574);

blockStyleApplier = __webpack_require__(596);

AnsiPainter = __webpack_require__(279);

Styles = __webpack_require__(597);

Layout = __webpack_require__(620);

tools = __webpack_require__(33);

object = __webpack_require__(45).object;

stripAnsi = __webpack_require__(168);

terminalWidth = __webpack_require__(33).getCols();

module.exports = RenderKid = (function() {
  var self;

  self = RenderKid;

  RenderKid.AnsiPainter = AnsiPainter;

  RenderKid.Layout = Layout;

  RenderKid.quote = tools.quote;

  RenderKid.tools = tools;

  RenderKid._defaultConfig = {
    layout: {
      terminalWidth: terminalWidth
    }
  };

  function RenderKid(config) {
    if (config == null) {
      config = {};
    }
    this.tools = self.tools;
    this._config = object.append(self._defaultConfig, config);
    this._initStyles();
  }

  RenderKid.prototype._initStyles = function() {
    return this._styles = new Styles;
  };

  RenderKid.prototype.style = function() {
    return this._styles.setRule.apply(this._styles, arguments);
  };

  RenderKid.prototype._getStyleFor = function(el) {
    return this._styles.getStyleFor(el);
  };

  RenderKid.prototype.render = function(input, withColors) {
    if (withColors == null) {
      withColors = true;
    }
    return this._paint(this._renderDom(this._toDom(input)), withColors);
  };

  RenderKid.prototype._toDom = function(input) {
    if (typeof input === 'string') {
      return this._parse(input);
    } else if (object.isBareObject(input) || Array.isArray(input)) {
      return this._objToDom(input);
    } else {
      throw Error("Invalid input type. Only strings, arrays and objects are accepted");
    }
  };

  RenderKid.prototype._objToDom = function(o, injectFakeRoot) {
    if (injectFakeRoot == null) {
      injectFakeRoot = true;
    }
    if (injectFakeRoot) {
      o = {
        body: o
      };
    }
    return tools.objectToDom(o);
  };

  RenderKid.prototype._paint = function(text, withColors) {
    var painted;
    painted = AnsiPainter.paint(text);
    if (withColors) {
      return painted;
    } else {
      return stripAnsi(painted);
    }
  };

  RenderKid.prototype._parse = function(string, injectFakeRoot) {
    if (injectFakeRoot == null) {
      injectFakeRoot = true;
    }
    if (injectFakeRoot) {
      string = '<body>' + string + '</body>';
    }
    return tools.stringToDom(string);
  };

  RenderKid.prototype._renderDom = function(dom) {
    var bodyTag, layout, rootBlock;
    bodyTag = dom[0];
    layout = new Layout(this._config.layout);
    rootBlock = layout.getRootBlock();
    this._renderBlockNode(bodyTag, null, rootBlock);
    return layout.get();
  };

  RenderKid.prototype._renderChildrenOf = function(parentNode, parentBlock) {
    var i, len, node, nodes;
    nodes = parentNode.children;
    for (i = 0, len = nodes.length; i < len; i++) {
      node = nodes[i];
      this._renderNode(node, parentNode, parentBlock);
    }
  };

  RenderKid.prototype._renderNode = function(node, parentNode, parentBlock) {
    if (node.type === 'text') {
      this._renderText(node, parentNode, parentBlock);
    } else if (node.name === 'br') {
      this._renderBr(node, parentNode, parentBlock);
    } else if (this._isBlock(node)) {
      this._renderBlockNode(node, parentNode, parentBlock);
    } else if (this._isNone(node)) {
      return;
    } else {
      this._renderInlineNode(node, parentNode, parentBlock);
    }
  };

  RenderKid.prototype._renderText = function(node, parentNode, parentBlock) {
    var ref, text;
    text = node.data;
    text = text.replace(/\s+/g, ' ');
    if ((parentNode != null ? (ref = parentNode.styles) != null ? ref.display : void 0 : void 0) !== 'inline') {
      text = text.trim();
    }
    if (text.length === 0) {
      return;
    }
    text = text.replace(/&nl;/g, "\n");
    return parentBlock.write(text);
  };

  RenderKid.prototype._renderBlockNode = function(node, parentNode, parentBlock) {
    var after, before, block, blockConfig, ref;
    ref = blockStyleApplier.applyTo(node, this._getStyleFor(node)), before = ref.before, after = ref.after, blockConfig = ref.blockConfig;
    block = parentBlock.openBlock(blockConfig);
    if (before !== '') {
      block.write(before);
    }
    this._renderChildrenOf(node, block);
    if (after !== '') {
      block.write(after);
    }
    return block.close();
  };

  RenderKid.prototype._renderInlineNode = function(node, parentNode, parentBlock) {
    var after, before, ref;
    ref = inlineStyleApplier.applyTo(node, this._getStyleFor(node)), before = ref.before, after = ref.after;
    if (before !== '') {
      parentBlock.write(before);
    }
    this._renderChildrenOf(node, parentBlock);
    if (after !== '') {
      return parentBlock.write(after);
    }
  };

  RenderKid.prototype._renderBr = function(node, parentNode, parentBlock) {
    return parentBlock.write("\n");
  };

  RenderKid.prototype._isBlock = function(node) {
    return !(node.type === 'text' || node.name === 'br' || this._getStyleFor(node).display !== 'block');
  };

  RenderKid.prototype._isNone = function(node) {
    return !(node.type === 'text' || node.name === 'br' || this._getStyleFor(node).display !== 'none');
  };

  return RenderKid;

})();


/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var _common, inlineStyleApplier, self, tools;

tools = __webpack_require__(33);

_common = __webpack_require__(278);

module.exports = inlineStyleApplier = self = {
  applyTo: function(el, style) {
    var ret;
    ret = _common.getStyleTagsFor(style);
    if (style.marginLeft != null) {
      ret.before = (tools.repeatString("&sp;", parseInt(style.marginLeft))) + ret.before;
    }
    if (style.marginRight != null) {
      ret.after += tools.repeatString("&sp;", parseInt(style.marginRight));
    }
    if (style.paddingLeft != null) {
      ret.before += tools.repeatString("&sp;", parseInt(style.paddingLeft));
    }
    if (style.paddingRight != null) {
      ret.after = (tools.repeatString("&sp;", parseInt(style.paddingRight))) + ret.after;
    }
    return ret;
  }
};


/***/ }),
/* 575 */
/***/ (function(module) {

module.exports = {"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\"","QUOT":"\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"};

/***/ }),
/* 576 */
/***/ (function(module) {

module.exports = {"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\"","QUOT":"\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"};

/***/ }),
/* 577 */
/***/ (function(module) {

module.exports = {"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""};

/***/ }),
/* 578 */
/***/ (function(module) {

module.exports = {"0":"�","128":"€","130":"‚","131":"ƒ","132":"„","133":"…","134":"†","135":"‡","136":"ˆ","137":"‰","138":"Š","139":"‹","140":"Œ","142":"Ž","145":"‘","146":"’","147":"“","148":"”","149":"•","150":"–","151":"—","152":"˜","153":"™","154":"š","155":"›","156":"œ","158":"ž","159":"Ÿ"};

/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

var ElementType = __webpack_require__(164);

var re_whitespace = /\s+/g;

function DomHandler(callback, options, elementCB){
	if(typeof callback === "object"){
		elementCB = options;
		options = callback;
		callback = null;
	} else if(typeof options === "function"){
		elementCB = options;
		options = defaultOpts;
	}
	this._callback = callback;
	this._options = options || defaultOpts;
	this._elementCB = elementCB;
	this.dom = [];
	this._done = false;
	this._tagStack = [];
}

//default options
var defaultOpts = {
	normalizeWhitespace: false //Replace all whitespace with single spaces
};

//Resets the handler back to starting state
DomHandler.prototype.onreset = function(){
	DomHandler.call(this, this._callback, this._options, this._elementCB);
};

//Signals the handler that parsing is done
DomHandler.prototype.onend = function(){
	if(this._done) return;
	this._done = true;
	this._handleCallback(null);
};

DomHandler.prototype._handleCallback =
DomHandler.prototype.onerror = function(error){
	if(typeof this._callback === "function"){
		this._callback(error, this.dom);
	} else {
		if(error) throw error;
	}
};

DomHandler.prototype.onclosetag = function(name){
	//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
	var elem = this._tagStack.pop();
	if(this._elementCB) this._elementCB(elem);
};

DomHandler.prototype._addDomElement = function(element){
	var lastTag = this._tagStack[this._tagStack.length - 1];

	if(lastTag){
		lastTag.children.push(element);
	} else { //There aren't parent elements
		this.dom.push(element);
	}
};

DomHandler.prototype.onopentag = function(name, attribs){
	var lastTag = this._tagStack[this._tagStack.length - 1];

	var element = {
		type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
		name: name,
		attribs: attribs,
		children: [],
		prev: null,
		next: null,
		parent: lastTag || null
	};

	if(lastTag){
		var idx = lastTag.children.length;
		while(idx > 0){
			if(ElementType.isTag(lastTag.children[--idx])){
				element.prev = lastTag.children[idx];
				lastTag.children[idx].next = element;
				break;
			}
		}
		lastTag.children.push(element);
	} else {
		this.dom.push(element);
	}

	this._tagStack.push(element);
};

DomHandler.prototype.ontext = function(data){
	//the ignoreWhitespace is officially dropped, but for now,
	//it's an alias for normalizeWhitespace
	var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;

	var lastTag;

	if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){
		if(normalize){
			lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
		} else {
			lastTag.data += data;
		}
	} else {
		if(
			this._tagStack.length &&
			(lastTag = this._tagStack[this._tagStack.length - 1]) &&
			(lastTag = lastTag.children[lastTag.children.length - 1]) &&
			lastTag.type === ElementType.Text
		){
			if(normalize){
				lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
			} else {
				lastTag.data += data;
			}
		} else {
			if(normalize){
				data = data.replace(re_whitespace, " ");
			}

			this._addDomElement({
				data: data,
				type: ElementType.Text
			});
		}
	}
};

DomHandler.prototype.oncomment = function(data){
	var lastTag = this._tagStack[this._tagStack.length - 1];

	if(lastTag && lastTag.type === ElementType.Comment){
		lastTag.data += data;
		return;
	}

	var element = {
		data: data,
		type: ElementType.Comment
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncdatastart = function(){
	var element = {
		children: [{
			data: "",
			type: ElementType.Text
		}],
		type: ElementType.CDATA
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
	this._tagStack.pop();
};

DomHandler.prototype.onprocessinginstruction = function(name, data){
	this._addDomElement({
		name: name,
		data: data,
		type: ElementType.Directive
	});
};

module.exports = DomHandler;

/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

var index = __webpack_require__(96),
    DomHandler = index.DomHandler,
	DomUtils = index.DomUtils;

//TODO: make this a streamable handler
function FeedHandler(callback, options){
	this.init(callback, options);
}

__webpack_require__(10).inherits(FeedHandler, DomHandler);

FeedHandler.prototype.init = DomHandler;

function getElements(what, where){
	return DomUtils.getElementsByTagName(what, where, true);
}
function getOneElement(what, where){
	return DomUtils.getElementsByTagName(what, where, true, 1)[0];
}
function fetch(what, where, recurse){
	return DomUtils.getText(
		DomUtils.getElementsByTagName(what, where, recurse, 1)
	).trim();
}

function addConditionally(obj, prop, what, where, recurse){
	var tmp = fetch(what, where, recurse);
	if(tmp) obj[prop] = tmp;
}

var isValidFeed = function(value) {
	return value === "rss" || value === "feed" || value === "rdf:RDF";
};

FeedHandler.prototype.onend = function() {
	var feed = {},
		feedRoot = getOneElement(isValidFeed, this.dom),
		tmp, childs;

	if (feedRoot) {
		if(feedRoot.name === "feed"){
			childs = feedRoot.children;

			feed.type = "atom";
			addConditionally(feed, "id", "id", childs);
			addConditionally(feed, "title", "title", childs);
			if((tmp = getOneElement("link", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;
			addConditionally(feed, "description", "subtitle", childs);
			if(tmp = fetch("updated", childs)) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "email", childs, true);

			feed.items = getElements("entry", childs).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "id", item);
				addConditionally(entry, "title", "title", item);
				if((tmp = getOneElement("link", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;
				addConditionally(entry, "description", "summary", item);
				if(tmp = fetch("updated", item)) entry.pubDate = new Date(tmp);
				return entry;
			});
		} else{
			childs = getOneElement("channel", feedRoot.children).children;

			feed.type = feedRoot.name.substr(0, 3);
			feed.id = "";
			addConditionally(feed, "title", "title", childs);
			addConditionally(feed, "link", "link", childs);
			addConditionally(feed, "description", "description", childs);
			if(tmp = fetch("lastBuildDate", childs)) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "managingEditor", childs, true);

			feed.items = getElements("item", feedRoot.children).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "guid", item);
				addConditionally(entry, "title", "title", item);
				addConditionally(entry, "link", "link", item);
				addConditionally(entry, "description", "description", item);
				if(tmp = fetch("pubDate", item)) entry.pubDate = new Date(tmp);
				return entry;
			});
		}
	}
	this.dom = feed;
	DomHandler.prototype._handleCallback.call(
		this, feedRoot ? null : Error("couldn't find root of feed")
	);
};

module.exports = FeedHandler;


/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = Stream;

var Parser = __webpack_require__(271);

function Stream(options){
	Parser.call(this, new Cbs(this), options);
}

__webpack_require__(10).inherits(Stream, Parser);

Stream.prototype.readable = true;

function Cbs(scope){
	this.scope = scope;
}

var EVENTS = __webpack_require__(96).EVENTS;

Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		Cbs.prototype["on" + name] = function(){
			this.scope.emit(name);
		};
	} else if(EVENTS[name] === 1){
		Cbs.prototype["on" + name] = function(a){
			this.scope.emit(name, a);
		};
	} else if(EVENTS[name] === 2){
		Cbs.prototype["on" + name] = function(a, b){
			this.scope.emit(name, a, b);
		};
	} else {
		throw Error("wrong number of arguments!");
	}
});

/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(272);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(275);
exports.Duplex = __webpack_require__(75);
exports.Transform = __webpack_require__(277);
exports.PassThrough = __webpack_require__(586);


/***/ }),
/* 583 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(50).Buffer;
var util = __webpack_require__(10);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),
/* 585 */
/***/ (function(module, exports) {


/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}


/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(277);

/*<replacement>*/
var util = __webpack_require__(67);
util.inherits = __webpack_require__(84);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = ProxyHandler;

var ProxyHandler = function(cbs){
	this._cbs = cbs || {};
};

var EVENTS = __webpack_require__(96).EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(){
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a){
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a, b){
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});

/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = CollectingHandler;

function CollectingHandler(cbs){
	this._cbs = cbs || {};
	this.events = [];
}

var EVENTS = __webpack_require__(96).EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(){
			this.events.push([name]);
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a){
			this.events.push([name, a]);
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a, b){
			this.events.push([name, a, b]);
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});

CollectingHandler.prototype.onreset = function(){
	this.events = [];
	if(this._cbs.onreset) this._cbs.onreset();
};

CollectingHandler.prototype.restart = function(){
	if(this._cbs.onreset) this._cbs.onreset();

	for(var i = 0, len = this.events.length; i < len; i++){
		if(this._cbs[this.events[i][0]]){

			var num = this.events[i].length;

			if(num === 1){
				this._cbs[this.events[i][0]]();
			} else if(num === 2){
				this._cbs[this.events[i][0]](this.events[i][1]);
			} else {
				this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
			}
		}
	}
};

/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.7
var domToMarkup, object, objectToSaneObject, saneObjectToDom, self;

objectToSaneObject = __webpack_require__(590);

saneObjectToDom = __webpack_require__(591);

domToMarkup = __webpack_require__(592);

object = __webpack_require__(45).object;

module.exports = self = {
  objectToDom: function(o) {
    o = self._object2SaneObject(o);
    return saneObjectToDom.convert(o);
  },
  object2markup: function(o) {
    var dom;
    dom = self.objectToDom(o);
    return domToMarkup.convert(dom);
  },
  domToMarkup: function(dom) {
    return domToMarkup.convert(dom);
  },
  _object2SaneObject: function(o) {
    if (!Array.isArray(o)) {
      if (!object.isBareObject(o)) {
        throw Error("toDom() only accepts arrays and bare objects as input");
      }
    }
    return objectToSaneObject.sanitize(o);
  }
};


/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.7
var object, self,
  hasProp = {}.hasOwnProperty;

object = __webpack_require__(45).object;

module.exports = self = {
  sanitize: function(val) {
    return self._toChildren(val);
  },
  _toChildren: function(val) {
    var ref;
    if (object.isBareObject(val)) {
      return self._objectToChildren(val);
    } else if (Array.isArray(val)) {
      return self._arrayToChildren(val);
    } else if (val === null || typeof val === 'undefined') {
      return [];
    } else if ((ref = typeof val) === 'string' || ref === 'number') {
      return [String(val)];
    } else {
      throw Error("not a valid child node: `" + val);
    }
  },
  _objectToChildren: function(o) {
    var a, cur, key, val;
    a = [];
    for (key in o) {
      if (!hasProp.call(o, key)) continue;
      val = o[key];
      cur = {};
      cur[key] = self.sanitize(val);
      a.push(cur);
    }
    return a;
  },
  _arrayToChildren: function(a) {
    var i, len, ret, v;
    ret = [];
    for (i = 0, len = a.length; i < len; i++) {
      v = a[i];
      ret.push(self._toNode(v));
    }
    return ret;
  },
  _toNode: function(o) {
    var key, keys, obj, ref;
    if ((ref = typeof o) === 'string' || ref === 'number') {
      return String(o);
    } else if (object.isBareObject(o)) {
      keys = Object.keys(o);
      if (keys.length !== 1) {
        throw Error("a node must only have one key as tag name");
      }
      key = keys[0];
      obj = {};
      obj[key] = self._toChildren(o[key]);
      return obj;
    } else {
      throw Error("not a valid node: `" + o + "`");
    }
  }
};


/***/ }),
/* 591 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.7
var self,
  hasProp = {}.hasOwnProperty;

module.exports = self = {
  convert: function(obj) {
    return self._arrayToChildren(obj);
  },
  _arrayToChildren: function(a, parent) {
    var children, j, len, node, prev, v;
    if (parent == null) {
      parent = null;
    }
    children = [];
    prev = null;
    for (j = 0, len = a.length; j < len; j++) {
      v = a[j];
      if (typeof v === 'string') {
        node = self._getTextNodeFor(v);
      } else {
        node = self._objectToNode(v, parent);
        node.prev = null;
        node.next = null;
        node.parent = parent;
        if (prev != null) {
          node.prev = prev;
          prev.next = node;
        }
        prev = node;
      }
      children.push(node);
    }
    return children;
  },
  _objectToNode: function(o) {
    var attribs, children, i, k, key, name, node, ref, v, val;
    i = 0;
    for (k in o) {
      if (!hasProp.call(o, k)) continue;
      v = o[k];
      if (i > 0) {
        throw Error("_objectToNode() only accepts an object with one key/value");
      }
      key = k;
      val = v;
      i++;
    }
    node = {};
    if (typeof key !== 'string') {
      throw Error("_objectToNode()'s key must be a string of tag name and classes");
    }
    if (typeof val === 'string') {
      children = [self._getTextNodeFor(val)];
    } else if (Array.isArray(val)) {
      children = self._arrayToChildren(val, node);
    } else {
      inspect(o);
      throw Error("_objectToNode()'s key's value must only be a string or an array");
    }
    node.type = 'tag';
    ref = self._parseTag(key), name = ref.name, attribs = ref.attribs;
    node.name = name;
    node.attribs = attribs;
    node.children = children;
    return node;
  },
  _getTextNodeFor: function(s) {
    return {
      type: 'text',
      data: s
    };
  },
  _nameRx: /^[a-zA-Z\-\_]{1}[a-zA-Z0-9\-\_]*$/,
  _parseTag: function(k) {
    var attribs, classes, cls, id, m, name, parts;
    if (!k.match(/^[a-zA-Z0-9\#\-\_\.\[\]\"\'\=\,\s]+$/) || k.match(/^[0-9]+/)) {
      throw Error("cannot parse tag `" + k + "`");
    }
    attribs = {};
    parts = {
      name: '',
      attribs: attribs
    };
    if (m = k.match(/^([^\.#]+)/)) {
      name = m[1];
      if (!name.match(self._nameRx)) {
        throw Error("tag name `" + name + "` is not valid");
      }
      parts.name = name;
      k = k.substr(name.length, k.length);
    }
    if (m = k.match(/^#([a-zA-Z0-9\-]+)/)) {
      id = m[1];
      if (!id.match(self._nameRx)) {
        throw Error("tag id `" + id + "` is not valid");
      }
      attribs.id = id;
      k = k.substr(id.length + 1, k.length);
    }
    classes = [];
    while (m = k.match(/\.([a-zA-Z0-9\-\_]+)/)) {
      cls = m[1];
      if (!cls.match(self._nameRx)) {
        throw Error("tag class `" + cls + "` is not valid");
      }
      classes.push(cls);
      k = k.replace('.' + cls, '');
    }
    if (classes.length) {
      attribs["class"] = classes.join(" ");
    }
    return parts;
  }
};


/***/ }),
/* 592 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.7



/***/ }),
/* 593 */
/***/ (function(module, exports) {

module.exports = require("tty");

/***/ }),
/* 594 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.3
var color, colors, i, len, tags;

module.exports = tags = {
  'none': {
    color: 'none',
    bg: 'none'
  },
  'bg-none': {
    color: 'inherit',
    bg: 'none'
  },
  'color-none': {
    color: 'none',
    bg: 'inherit'
  }
};

colors = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'grey', 'bright-red', 'bright-green', 'bright-yellow', 'bright-blue', 'bright-magenta', 'bright-cyan', 'bright-white'];

for (i = 0, len = colors.length; i < len; i++) {
  color = colors[i];
  tags[color] = {
    color: color,
    bg: 'inherit'
  };
  tags["color-" + color] = {
    color: color,
    bg: 'inherit'
  };
  tags["bg-" + color] = {
    color: 'inherit',
    bg: color
  };
}


/***/ }),
/* 595 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.3
var codes, styles;

module.exports = styles = {};

styles.codes = codes = {
  'none': 0,
  'black': 30,
  'red': 31,
  'green': 32,
  'yellow': 33,
  'blue': 34,
  'magenta': 35,
  'cyan': 36,
  'white': 37,
  'grey': 90,
  'bright-red': 91,
  'bright-green': 92,
  'bright-yellow': 93,
  'bright-blue': 94,
  'bright-magenta': 95,
  'bright-cyan': 96,
  'bright-white': 97,
  'bg-black': 40,
  'bg-red': 41,
  'bg-green': 42,
  'bg-yellow': 43,
  'bg-blue': 44,
  'bg-magenta': 45,
  'bg-cyan': 46,
  'bg-white': 47,
  'bg-grey': 100,
  'bg-bright-red': 101,
  'bg-bright-green': 102,
  'bg-bright-yellow': 103,
  'bg-bright-blue': 104,
  'bg-bright-magenta': 105,
  'bg-bright-cyan': 106,
  'bg-bright-white': 107
};

styles.color = function(str) {
  var code;
  if (str === 'none') {
    return '';
  }
  code = codes[str];
  if (code == null) {
    throw Error("Unknown color `" + str + "`");
  }
  return "\x1b[" + code + "m";
};

styles.bg = function(str) {
  var code;
  if (str === 'none') {
    return '';
  }
  code = codes['bg-' + str];
  if (code == null) {
    throw Error("Unknown bg color `" + str + "`");
  }
  return "\x1B[" + code + "m";
};

styles.none = function(str) {
  return "\x1B[" + codes.none + "m";
};


/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var _common, blockStyleApplier, object, self;

_common = __webpack_require__(278);

object = __webpack_require__(45).object;

module.exports = blockStyleApplier = self = {
  applyTo: function(el, style) {
    var config, ret;
    ret = _common.getStyleTagsFor(style);
    ret.blockConfig = config = {};
    this._margins(style, config);
    this._bullet(style, config);
    this._dims(style, config);
    return ret;
  },
  _margins: function(style, config) {
    if (style.marginLeft != null) {
      object.appendOnto(config, {
        linePrependor: {
          options: {
            amount: parseInt(style.marginLeft)
          }
        }
      });
    }
    if (style.marginRight != null) {
      object.appendOnto(config, {
        lineAppendor: {
          options: {
            amount: parseInt(style.marginRight)
          }
        }
      });
    }
    if (style.marginTop != null) {
      object.appendOnto(config, {
        blockPrependor: {
          options: {
            amount: parseInt(style.marginTop)
          }
        }
      });
    }
    if (style.marginBottom != null) {
      object.appendOnto(config, {
        blockAppendor: {
          options: {
            amount: parseInt(style.marginBottom)
          }
        }
      });
    }
  },
  _bullet: function(style, config) {
    var after, before, bullet, conf, ref;
    if ((style.bullet != null) && style.bullet.enabled) {
      bullet = style.bullet;
      conf = {};
      conf.alignment = style.bullet.alignment;
      ref = _common.getStyleTagsFor({
        color: bullet.color,
        background: bullet.background
      }), before = ref.before, after = ref.after;
      conf.char = before + bullet.char + after;
      object.appendOnto(config, {
        linePrependor: {
          options: {
            bullet: conf
          }
        }
      });
    }
  },
  _dims: function(style, config) {
    var w;
    if (style.width != null) {
      w = parseInt(style.width);
      config.width = w;
    }
  }
};


/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var MixedDeclarationSet, StyleSheet, Styles, terminalWidth;

StyleSheet = __webpack_require__(598);

MixedDeclarationSet = __webpack_require__(619);

terminalWidth = __webpack_require__(33).getCols();

module.exports = Styles = (function() {
  var self;

  self = Styles;

  Styles.defaultRules = {
    '*': {
      display: 'inline'
    },
    'body': {
      background: 'none',
      color: 'white',
      display: 'block',
      width: terminalWidth + ' !important'
    }
  };

  function Styles() {
    this._defaultStyles = new StyleSheet;
    this._userStyles = new StyleSheet;
    this._setDefaultStyles();
  }

  Styles.prototype._setDefaultStyles = function() {
    this._defaultStyles.setRule(self.defaultRules);
  };

  Styles.prototype.setRule = function(selector, rules) {
    this._userStyles.setRule.apply(this._userStyles, arguments);
    return this;
  };

  Styles.prototype.getStyleFor = function(el) {
    var styles;
    styles = el.styles;
    if (styles == null) {
      el.styles = styles = this._getComputedStyleFor(el);
    }
    return styles;
  };

  Styles.prototype._getRawStyleFor = function(el) {
    var def, user;
    def = this._defaultStyles.getRulesFor(el);
    user = this._userStyles.getRulesFor(el);
    return MixedDeclarationSet.mix(def, user).toObject();
  };

  Styles.prototype._getComputedStyleFor = function(el) {
    var decs, parent, prop, ref, val;
    decs = {};
    parent = el.parent;
    ref = this._getRawStyleFor(el);
    for (prop in ref) {
      val = ref[prop];
      if (val !== 'inherit') {
        decs[prop] = val;
      } else {
        throw Error("Inherited styles are not supported yet.");
      }
    }
    return decs;
  };

  return Styles;

})();


/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Rule, StyleSheet;

Rule = __webpack_require__(599);

module.exports = StyleSheet = (function() {
  var self;

  self = StyleSheet;

  function StyleSheet() {
    this._rulesBySelector = {};
  }

  StyleSheet.prototype.setRule = function(selector, styles) {
    var key, val;
    if (typeof selector === 'string') {
      this._setRule(selector, styles);
    } else if (typeof selector === 'object') {
      for (key in selector) {
        val = selector[key];
        this._setRule(key, val);
      }
    }
    return this;
  };

  StyleSheet.prototype._setRule = function(s, styles) {
    var i, len, ref, selector;
    ref = self.splitSelectors(s);
    for (i = 0, len = ref.length; i < len; i++) {
      selector = ref[i];
      this._setSingleRule(selector, styles);
    }
    return this;
  };

  StyleSheet.prototype._setSingleRule = function(s, styles) {
    var rule, selector;
    selector = self.normalizeSelector(s);
    if (!(rule = this._rulesBySelector[selector])) {
      rule = new Rule(selector);
      this._rulesBySelector[selector] = rule;
    }
    rule.setStyles(styles);
    return this;
  };

  StyleSheet.prototype.getRulesFor = function(el) {
    var ref, rule, rules, selector;
    rules = [];
    ref = this._rulesBySelector;
    for (selector in ref) {
      rule = ref[selector];
      if (rule.selector.matches(el)) {
        rules.push(rule);
      }
    }
    return rules;
  };

  StyleSheet.normalizeSelector = function(selector) {
    return selector.replace(/[\s]+/g, ' ').replace(/[\s]*([>\,\+]{1})[\s]*/g, '$1').trim();
  };

  StyleSheet.splitSelectors = function(s) {
    return s.trim().split(',');
  };

  return StyleSheet;

})();


/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var DeclarationBlock, Rule, Selector;

Selector = __webpack_require__(600);

DeclarationBlock = __webpack_require__(609);

module.exports = Rule = (function() {
  function Rule(selector) {
    this.selector = new Selector(selector);
    this.styles = new DeclarationBlock;
  }

  Rule.prototype.setStyles = function(styles) {
    this.styles.set(styles);
    return this;
  };

  return Rule;

})();


/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var CSSSelect, Selector;

CSSSelect = __webpack_require__(601);

module.exports = Selector = (function() {
  var self;

  self = Selector;

  function Selector(text1) {
    this.text = text1;
    this._fn = CSSSelect.compile(this.text);
    this.priority = self.calculatePriority(this.text);
  }

  Selector.prototype.matches = function(elem) {
    return CSSSelect.is(elem, this._fn);
  };

  Selector.calculatePriority = function(text) {
    var n, priotrity;
    priotrity = 0;
    if (n = text.match(/[\#]{1}/g)) {
      priotrity += 100 * n.length;
    }
    if (n = text.match(/[a-zA-Z]+/g)) {
      priotrity += 2 * n.length;
    }
    if (n = text.match(/\*/g)) {
      priotrity += 1 * n.length;
    }
    return priotrity;
  };

  return Selector;

})();


/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = CSSselect;

var Pseudos       = __webpack_require__(165),
    DomUtils      = __webpack_require__(76),
    findOne       = DomUtils.findOne,
    findAll       = DomUtils.findAll,
    getChildren   = DomUtils.getChildren,
    removeSubsets = DomUtils.removeSubsets,
    falseFunc     = __webpack_require__(97).falseFunc,
    compile       = __webpack_require__(605),
    compileUnsafe = compile.compileUnsafe,
    compileToken  = compile.compileToken;

function getSelectorFunc(searchFunc){
	return function select(query, elems, options){
        if(typeof query !== "function") query = compileUnsafe(query, options, elems);
        if(!Array.isArray(elems)) elems = getChildren(elems);
		else elems = removeSubsets(elems);
		return searchFunc(query, elems);
	};
}

var selectAll = getSelectorFunc(function selectAll(query, elems){
	return (query === falseFunc || !elems || elems.length === 0) ? [] : findAll(query, elems);
});

var selectOne = getSelectorFunc(function selectOne(query, elems){
	return (query === falseFunc || !elems || elems.length === 0) ? null : findOne(query, elems);
});

function is(elem, query, options){
	return (typeof query === "function" ? query : compile(query, options))(elem);
}

/*
	the exported interface
*/
function CSSselect(query, elems, options){
	return selectAll(query, elems, options);
}

CSSselect.compile = compile;
CSSselect.filters = Pseudos.filters;
CSSselect.pseudos = Pseudos.pseudos;

CSSselect.selectAll = selectAll;
CSSselect.selectOne = selectOne;

CSSselect.is = is;

//legacy methods (might be removed)
CSSselect.parse = compile;
CSSselect.iterate = selectAll;

//hooks
CSSselect._compileUnsafe = compileUnsafe;
CSSselect._compileToken = compileToken;


/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(603),
    compile = __webpack_require__(604);

module.exports = function nthCheck(formula){
	return compile(parse(formula));
};

module.exports.parse = parse;
module.exports.compile = compile;

/***/ }),
/* 603 */
/***/ (function(module, exports) {

module.exports = parse;

//following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo

//[ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
var re_nthElement = /^([+\-]?\d*n)?\s*(?:([+\-]?)\s*(\d+))?$/;

/*
	parses a nth-check formula, returns an array of two numbers
*/
function parse(formula){
	formula = formula.trim().toLowerCase();

	if(formula === "even"){
		return [2, 0];
	} else if(formula === "odd"){
		return [2, 1];
	} else {
		var parsed = formula.match(re_nthElement);

		if(!parsed){
			throw new SyntaxError("n-th rule couldn't be parsed ('" + formula + "')");
		}

		var a;

		if(parsed[1]){
			a = parseInt(parsed[1], 10);
			if(isNaN(a)){
				if(parsed[1].charAt(0) === "-") a = -1;
				else a = 1;
			}
		} else a = 0;

		return [
			a,
			parsed[3] ? parseInt((parsed[2] || "") + parsed[3], 10) : 0
		];
	}
}


/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = compile;

var BaseFuncs = __webpack_require__(97),
    trueFunc  = BaseFuncs.trueFunc,
    falseFunc = BaseFuncs.falseFunc;

/*
	returns a function that checks if an elements index matches the given rule
	highly optimized to return the fastest solution
*/
function compile(parsed){
	var a = parsed[0],
	    b = parsed[1] - 1;

	//when b <= 0, a*n won't be possible for any matches when a < 0
	//besides, the specification says that no element is matched when a and b are 0
	if(b < 0 && a <= 0) return falseFunc;

	//when a is in the range -1..1, it matches any element (so only b is checked)
	if(a ===-1) return function(pos){ return pos <= b; };
	if(a === 0) return function(pos){ return pos === b; };
	//when b <= 0 and a === 1, they match any element
	if(a === 1) return b < 0 ? trueFunc : function(pos){ return pos >= b; };

	//when a > 0, modulo can be used to check if there is a match
	var bMod = b % a;
	if(bMod < 0) bMod += a;

	if(a > 1){
		return function(pos){
			return pos >= b && pos % a === bMod;
		};
	}

	a *= -1; //make `a` positive

	return function(pos){
		return pos <= b && pos % a === bMod;
	};
}

/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

/*
	compiles a selector to an executable function
*/

module.exports = compile;
module.exports.compileUnsafe = compileUnsafe;
module.exports.compileToken = compileToken;

var parse       = __webpack_require__(606),
    DomUtils    = __webpack_require__(76),
    isTag       = DomUtils.isTag,
    Rules       = __webpack_require__(607),
    sortRules   = __webpack_require__(608),
    BaseFuncs   = __webpack_require__(97),
    trueFunc    = BaseFuncs.trueFunc,
    falseFunc   = BaseFuncs.falseFunc,
    procedure   = __webpack_require__(281);

function compile(selector, options, context){
	var next = compileUnsafe(selector, options, context);
	return wrap(next);
}

function wrap(next){
	return function base(elem){
		return isTag(elem) && next(elem);
	};
}

function compileUnsafe(selector, options, context){
	var token = parse(selector, options);
	return compileToken(token, options, context);
}

function includesScopePseudo(t){
    return t.type === "pseudo" && (
        t.name === "scope" || (
            Array.isArray(t.data) &&
            t.data.some(function(data){
                return data.some(includesScopePseudo);
            })
        )
    );
}

var DESCENDANT_TOKEN = {type: "descendant"},
    SCOPE_TOKEN = {type: "pseudo", name: "scope"},
    PLACEHOLDER_ELEMENT = {},
    getParent = DomUtils.getParent;

//CSS 4 Spec (Draft): 3.3.1. Absolutizing a Scope-relative Selector
//http://www.w3.org/TR/selectors4/#absolutizing
function absolutize(token, context){
    //TODO better check if context is document
    var hasContext = !!context && !!context.length && context.every(function(e){
        return e === PLACEHOLDER_ELEMENT || !!getParent(e);
    });


    token.forEach(function(t){
        if(t.length > 0 && isTraversal(t[0]) && t[0].type !== "descendant"){
            //don't return in else branch
        } else if(hasContext && !includesScopePseudo(t)){
            t.unshift(DESCENDANT_TOKEN);
        } else {
            return;
        }

        t.unshift(SCOPE_TOKEN);
    });
}

function compileToken(token, options, context){
    token = token.filter(function(t){ return t.length > 0; });

	token.forEach(sortRules);

	var isArrayContext = Array.isArray(context);

    context = (options && options.context) || context;

    if(context && !isArrayContext) context = [context];

    absolutize(token, context);

	return token
		.map(function(rules){ return compileRules(rules, options, context, isArrayContext); })
		.reduce(reduceRules, falseFunc);
}

function isTraversal(t){
	return procedure[t.type] < 0;
}

function compileRules(rules, options, context, isArrayContext){
	var acceptSelf = (isArrayContext && rules[0].name === "scope" && rules[1].type === "descendant");
	return rules.reduce(function(func, rule, index){
		if(func === falseFunc) return func;
		return Rules[rule.type](func, rule, options, context, acceptSelf && index === 1);
	}, options && options.rootFunc || trueFunc);
}

function reduceRules(a, b){
	if(b === falseFunc || a === trueFunc){
		return a;
	}
	if(a === falseFunc || b === trueFunc){
		return b;
	}

	return function combine(elem){
		return a(elem) || b(elem);
	};
}

//:not, :has and :matches have to compile selectors
//doing this in lib/pseudos.js would lead to circular dependencies,
//so we add them here

var Pseudos     = __webpack_require__(165),
    filters     = Pseudos.filters,
    existsOne   = DomUtils.existsOne,
    isTag       = DomUtils.isTag,
    getChildren = DomUtils.getChildren;


function containsTraversal(t){
	return t.some(isTraversal);
}

filters.not = function(next, token, options, context){
	var opts = {
	    	xmlMode: !!(options && options.xmlMode),
	    	strict: !!(options && options.strict)
	    };

	if(opts.strict){
		if(token.length > 1 || token.some(containsTraversal)){
			throw new SyntaxError("complex selectors in :not aren't allowed in strict mode");
		}
	}

    var func = compileToken(token, opts, context);

	if(func === falseFunc) return next;
	if(func === trueFunc)  return falseFunc;

	return function(elem){
		return !func(elem) && next(elem);
	};
};

filters.has = function(next, token, options){
	var opts = {
		xmlMode: !!(options && options.xmlMode),
		strict: !!(options && options.strict)
	};

    //FIXME: Uses an array as a pointer to the current element (side effects)
    var context = token.some(containsTraversal) ? [PLACEHOLDER_ELEMENT] : null;

	var func = compileToken(token, opts, context);

	if(func === falseFunc) return falseFunc;
	if(func === trueFunc)  return function(elem){
			return getChildren(elem).some(isTag) && next(elem);
		};

	func = wrap(func);

    if(context){
        return function has(elem){
		return next(elem) && (
                (context[0] = elem), existsOne(func, getChildren(elem))
            );
	};
    }

    return function has(elem){
		return next(elem) && existsOne(func, getChildren(elem));
	};
};

filters.matches = function(next, token, options, context){
	var opts = {
		xmlMode: !!(options && options.xmlMode),
		strict: !!(options && options.strict),
		rootFunc: next
	};

	return compileToken(token, opts, context);
};


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = parse;

var re_name = /^(?:\\.|[\w\-\u00c0-\uFFFF])+/,
    re_escape = /\\([\da-f]{1,6}\s?|(\s)|.)/ig,
    //modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87
    re_attr = /^\s*((?:\\.|[\w\u00c0-\uFFFF\-])+)\s*(?:(\S?)=\s*(?:(['"])([^]*?)\3|(#?(?:\\.|[\w\u00c0-\uFFFF\-])*)|)|)\s*(i)?\]/;

var actionTypes = {
	__proto__: null,
	"undefined": "exists",
	"":  "equals",
	"~": "element",
	"^": "start",
	"$": "end",
	"*": "any",
	"!": "not",
	"|": "hyphen"
};

var simpleSelectors = {
	__proto__: null,
	">": "child",
	"<": "parent",
	"~": "sibling",
	"+": "adjacent"
};

var attribSelectors = {
	__proto__: null,
	"#": ["id", "equals"],
	".": ["class", "element"]
};

//pseudos, whose data-property is parsed as well
var unpackPseudos = {
	__proto__: null,
	"has": true,
	"not": true,
	"matches": true
};

var stripQuotesFromPseudos = {
	__proto__: null,
	"contains": true,
	"icontains": true
};

var quotes = {
	__proto__: null,
	"\"": true,
	"'": true
};

//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L139
function funescape( _, escaped, escapedWhitespace ) {
	var high = "0x" + escaped - 0x10000;
	// NaN means non-codepoint
	// Support: Firefox
	// Workaround erroneous numeric interpretation of +"0x"
	return high !== high || escapedWhitespace ?
		escaped :
		// BMP codepoint
		high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
}

function unescapeCSS(str){
	return str.replace(re_escape, funescape);
}

function isWhitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function parse(selector, options){
	var subselects = [];

	selector = parseSelector(subselects, selector + "", options);

	if(selector !== ""){
		throw new SyntaxError("Unmatched selector: " + selector);
	}

	return subselects;
}

function parseSelector(subselects, selector, options){
	var tokens = [],
		sawWS = false,
		data, firstChar, name, quot;

	function getName(){
		var sub = selector.match(re_name)[0];
		selector = selector.substr(sub.length);
		return unescapeCSS(sub);
	}

	function stripWhitespace(start){
		while(isWhitespace(selector.charAt(start))) start++;
		selector = selector.substr(start);
	}

	function isEscaped(pos) {
		var slashCount = 0;

		while (selector.charAt(--pos) === "\\") slashCount++;
		return (slashCount & 1) === 1;
	}

	stripWhitespace(0);

	while(selector !== ""){
		firstChar = selector.charAt(0);

		if(isWhitespace(firstChar)){
			sawWS = true;
			stripWhitespace(1);
		} else if(firstChar in simpleSelectors){
			tokens.push({type: simpleSelectors[firstChar]});
			sawWS = false;

			stripWhitespace(1);
		} else if(firstChar === ","){
			if(tokens.length === 0){
				throw new SyntaxError("empty sub-selector");
			}
			subselects.push(tokens);
			tokens = [];
			sawWS = false;
			stripWhitespace(1);
		} else {
			if(sawWS){
				if(tokens.length > 0){
					tokens.push({type: "descendant"});
				}
				sawWS = false;
			}

			if(firstChar === "*"){
				selector = selector.substr(1);
				tokens.push({type: "universal"});
			} else if(firstChar in attribSelectors){
				selector = selector.substr(1);
				tokens.push({
					type: "attribute",
					name: attribSelectors[firstChar][0],
					action: attribSelectors[firstChar][1],
					value: getName(),
					ignoreCase: false
				});
			} else if(firstChar === "["){
				selector = selector.substr(1);
				data = selector.match(re_attr);
				if(!data){
					throw new SyntaxError("Malformed attribute selector: " + selector);
				}
				selector = selector.substr(data[0].length);
				name = unescapeCSS(data[1]);

				if(
					!options || (
						"lowerCaseAttributeNames" in options ?
							options.lowerCaseAttributeNames :
							!options.xmlMode
					)
				){
					name = name.toLowerCase();
				}

				tokens.push({
					type: "attribute",
					name: name,
					action: actionTypes[data[2]],
					value: unescapeCSS(data[4] || data[5] || ""),
					ignoreCase: !!data[6]
				});

			} else if(firstChar === ":"){
				if(selector.charAt(1) === ":"){
					selector = selector.substr(2);
					tokens.push({type: "pseudo-element", name: getName().toLowerCase()});
					continue;
				}

				selector = selector.substr(1);

				name = getName().toLowerCase();
				data = null;

				if(selector.charAt(0) === "("){
					if(name in unpackPseudos){
						quot = selector.charAt(1);
						var quoted = quot in quotes;

						selector = selector.substr(quoted + 1);

						data = [];
						selector = parseSelector(data, selector, options);

						if(quoted){
							if(selector.charAt(0) !== quot){
								throw new SyntaxError("unmatched quotes in :" + name);
							} else {
								selector = selector.substr(1);
							}
						}

						if(selector.charAt(0) !== ")"){
							throw new SyntaxError("missing closing parenthesis in :" + name + " " + selector);
						}

						selector = selector.substr(1);
					} else {
						var pos = 1, counter = 1;

						for(; counter > 0 && pos < selector.length; pos++){
							if(selector.charAt(pos) === "(" && !isEscaped(pos)) counter++;
							else if(selector.charAt(pos) === ")" && !isEscaped(pos)) counter--;
						}

						if(counter){
							throw new SyntaxError("parenthesis not matched");
						}

						data = selector.substr(1, pos - 2);
						selector = selector.substr(pos);

						if(name in stripQuotesFromPseudos){
							quot = data.charAt(0);

							if(quot === data.slice(-1) && quot in quotes){
								data = data.slice(1, -1);
							}

							data = unescapeCSS(data);
						}
					}
				}

				tokens.push({type: "pseudo", name: name, data: data});
			} else if(re_name.test(selector)){
				name = getName();

				if(!options || ("lowerCaseTags" in options ? options.lowerCaseTags : !options.xmlMode)){
					name = name.toLowerCase();
				}

				tokens.push({type: "tag", name: name});
			} else {
				if(tokens.length && tokens[tokens.length - 1].type === "descendant"){
					tokens.pop();
				}
				addToken(subselects, tokens);
				return selector;
			}
		}
	}

	addToken(subselects, tokens);

	return selector;
}

function addToken(subselects, tokens){
	if(subselects.length > 0 && tokens.length === 0){
		throw new SyntaxError("empty sub-selector");
	}

	subselects.push(tokens);
}


/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

var DomUtils    = __webpack_require__(76),
    isTag       = DomUtils.isTag,
    getParent   = DomUtils.getParent,
    getChildren = DomUtils.getChildren,
    getSiblings = DomUtils.getSiblings,
    getName     = DomUtils.getName;

/*
	all available rules
*/
module.exports = {
	__proto__: null,

	attribute: __webpack_require__(280).compile,
	pseudo: __webpack_require__(165).compile,

	//tags
	tag: function(next, data){
		var name = data.name;
		return function tag(elem){
			return getName(elem) === name && next(elem);
		};
	},

	//traversal
	descendant: function(next, rule, options, context, acceptSelf){
		return function descendant(elem){

			if (acceptSelf && next(elem)) return true;

			var found = false;

			while(!found && (elem = getParent(elem))){
				found = next(elem);
			}

			return found;
		};
	},
	parent: function(next, data, options){
		if(options && options.strict) throw SyntaxError("Parent selector isn't part of CSS3");

		return function parent(elem){
			return getChildren(elem).some(test);
		};

		function test(elem){
			return isTag(elem) && next(elem);
		}
	},
	child: function(next){
		return function child(elem){
			var parent = getParent(elem);
			return !!parent && next(parent);
		};
	},
	sibling: function(next){
		return function sibling(elem){
			var siblings = getSiblings(elem);

			for(var i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(next(siblings[i])) return true;
				}
			}

			return false;
		};
	},
	adjacent: function(next){
		return function adjacent(elem){
			var siblings = getSiblings(elem),
			    lastElement;

			for(var i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					lastElement = siblings[i];
				}
			}

			return !!lastElement && next(lastElement);
		};
	},
	universal: function(next){
		return next;
	}
};

/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = sortByProcedure;

/*
	sort the parts of the passed selector,
	as there is potential for optimization
	(some types of selectors are faster than others)
*/

var procedure = __webpack_require__(281);

var attributes = {
	__proto__: null,
	exists: 10,
	equals: 8,
	not: 7,
	start: 6,
	end: 6,
	any: 5,
	hyphen: 4,
	element: 4
};

function sortByProcedure(arr){
	var procs = arr.map(getProcedure);
	for(var i = 1; i < arr.length; i++){
		var procNew = procs[i];

		if(procNew < 0) continue;

		for(var j = i - 1; j >= 0 && procNew < procs[j]; j--){
			var token = arr[j + 1];
			arr[j + 1] = arr[j];
			arr[j] = token;
			procs[j + 1] = procs[j];
			procs[j] = procNew;
		}
	}
}

function getProcedure(token){
	var proc = procedure[token.type];

	if(proc === procedure.attribute){
		proc = attributes[token.action];

		if(proc === attributes.equals && token.name === "id"){
			//prefer ID selectors (eg. #ID)
			proc = 9;
		}

		if(token.ignoreCase){
			//ignoreCase adds some overhead, prefer "normal" token
			//this is a binary operation, to ensure it's still an int
			proc >>= 1;
		}
	} else if(proc === procedure.pseudo){
		if(!token.data){
			proc = 3;
		} else if(token.name === "has" || token.name === "contains"){
			proc = 0; //expensive in any case
		} else if(token.name === "matches" || token.name === "not"){
			proc = 0;
			for(var i = 0; i < token.data.length; i++){
				//TODO better handling of complex selectors
				if(token.data[i].length !== 1) continue;
				var cur = getProcedure(token.data[i][0]);
				//avoid executing :has or :contains
				if(cur === 0){
					proc = 0;
					break;
				}
				if(cur > proc) proc = cur;
			}
			if(token.data.length > 1 && proc > 0) proc -= 1;
		} else {
			proc = 1;
		}
	}
	return proc;
}


/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Arbitrary, DeclarationBlock, declarationClasses;

module.exports = DeclarationBlock = (function() {
  var self;

  self = DeclarationBlock;

  function DeclarationBlock() {
    this._declarations = {};
  }

  DeclarationBlock.prototype.set = function(prop, value) {
    var key, val;
    if (typeof prop === 'object') {
      for (key in prop) {
        val = prop[key];
        this.set(key, val);
      }
      return this;
    }
    prop = self.sanitizeProp(prop);
    this._getDeclarationClass(prop).setOnto(this._declarations, prop, value);
    return this;
  };

  DeclarationBlock.prototype._getDeclarationClass = function(prop) {
    var cls;
    if (prop[0] === '_') {
      return Arbitrary;
    }
    if (!(cls = declarationClasses[prop])) {
      throw Error("Unknown property `" + prop + "`. Write it as `_" + prop + "` if you're defining a custom property");
    }
    return cls;
  };

  DeclarationBlock.sanitizeProp = function(prop) {
    return String(prop).trim();
  };

  return DeclarationBlock;

})();

Arbitrary = __webpack_require__(610);

declarationClasses = {
  color: __webpack_require__(611),
  background: __webpack_require__(612),
  width: __webpack_require__(613),
  height: __webpack_require__(614),
  bullet: __webpack_require__(615),
  display: __webpack_require__(616),
  margin: __webpack_require__(617),
  marginTop: __webpack_require__(282),
  marginLeft: __webpack_require__(283),
  marginRight: __webpack_require__(284),
  marginBottom: __webpack_require__(285),
  padding: __webpack_require__(618),
  paddingTop: __webpack_require__(286),
  paddingLeft: __webpack_require__(287),
  paddingRight: __webpack_require__(288),
  paddingBottom: __webpack_require__(289)
};


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Arbitrary, _Declaration,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Declaration = __webpack_require__(56);

module.exports = Arbitrary = (function(superClass) {
  extend(Arbitrary, superClass);

  function Arbitrary() {
    return Arbitrary.__super__.constructor.apply(this, arguments);
  }

  return Arbitrary;

})(_Declaration);


/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Color, _Declaration,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Declaration = __webpack_require__(56);

module.exports = Color = (function(superClass) {
  extend(Color, superClass);

  function Color() {
    return Color.__super__.constructor.apply(this, arguments);
  }

  return Color;

})(_Declaration);


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Background, _Declaration,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Declaration = __webpack_require__(56);

module.exports = Background = (function(superClass) {
  extend(Background, superClass);

  function Background() {
    return Background.__super__.constructor.apply(this, arguments);
  }

  return Background;

})(_Declaration);


/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Width, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Length = __webpack_require__(37);

module.exports = Width = (function(superClass) {
  extend(Width, superClass);

  function Width() {
    return Width.__super__.constructor.apply(this, arguments);
  }

  return Width;

})(_Length);


/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Height, _Length,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Length = __webpack_require__(37);

module.exports = Height = (function(superClass) {
  extend(Height, superClass);

  function Height() {
    return Height.__super__.constructor.apply(this, arguments);
  }

  return Height;

})(_Length);


/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Bullet, _Declaration,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Declaration = __webpack_require__(56);

module.exports = Bullet = (function(superClass) {
  var self;

  extend(Bullet, superClass);

  function Bullet() {
    return Bullet.__super__.constructor.apply(this, arguments);
  }

  self = Bullet;

  Bullet.prototype._set = function(val) {
    var alignment, bg, char, color, enabled, m, original;
    val = String(val);
    original = val;
    char = null;
    enabled = false;
    color = 'none';
    bg = 'none';
    if (m = val.match(/\"([^"]+)\"/) || (m = val.match(/\'([^']+)\'/))) {
      char = m[1];
      val = val.replace(m[0], '');
      enabled = true;
    }
    if (m = val.match(/(none|left|right|center)/)) {
      alignment = m[1];
      val = val.replace(m[0], '');
    } else {
      alignment = 'left';
    }
    if (alignment === 'none') {
      enabled = false;
    }
    if (m = val.match(/color\:([\w\-]+)/)) {
      color = m[1];
      val = val.replace(m[0], '');
    }
    if (m = val.match(/bg\:([\w\-]+)/)) {
      bg = m[1];
      val = val.replace(m[0], '');
    }
    if (val.trim() !== '') {
      throw Error("Unrecognizable value `" + original + "` for `" + this.prop + "`");
    }
    return this.val = {
      enabled: enabled,
      char: char,
      alignment: alignment,
      background: bg,
      color: color
    };
  };

  return Bullet;

})(_Declaration);


/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Display, _Declaration,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_Declaration = __webpack_require__(56);

module.exports = Display = (function(superClass) {
  var self;

  extend(Display, superClass);

  function Display() {
    return Display.__super__.constructor.apply(this, arguments);
  }

  self = Display;

  Display._allowed = ['inline', 'block', 'none'];

  Display.prototype._set = function(val) {
    val = String(val).toLowerCase();
    if (indexOf.call(self._allowed, val) < 0) {
      throw Error("Unrecognizable value `" + val + "` for `" + this.prop + "`");
    }
    return this.val = val;
  };

  return Display;

})(_Declaration);


/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Margin, MarginBottom, MarginLeft, MarginRight, MarginTop, _Declaration,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Declaration = __webpack_require__(56);

MarginTop = __webpack_require__(282);

MarginLeft = __webpack_require__(283);

MarginRight = __webpack_require__(284);

MarginBottom = __webpack_require__(285);

module.exports = Margin = (function(superClass) {
  var self;

  extend(Margin, superClass);

  function Margin() {
    return Margin.__super__.constructor.apply(this, arguments);
  }

  self = Margin;

  Margin.setOnto = function(declarations, prop, originalValue) {
    var append, val, vals;
    append = '';
    val = _Declaration.sanitizeValue(originalValue);
    if (_Declaration.importantClauseRx.test(String(val))) {
      append = ' !important';
      val = val.replace(_Declaration.importantClauseRx, '');
    }
    val = val.trim();
    if (val.length === 0) {
      return self._setAllDirections(declarations, append, append, append, append);
    }
    vals = val.split(" ").map(function(val) {
      return val + append;
    });
    if (vals.length === 1) {
      return self._setAllDirections(declarations, vals[0], vals[0], vals[0], vals[0]);
    } else if (vals.length === 2) {
      return self._setAllDirections(declarations, vals[0], vals[1], vals[0], vals[1]);
    } else if (vals.length === 3) {
      return self._setAllDirections(declarations, vals[0], vals[1], vals[2], vals[1]);
    } else if (vals.length === 4) {
      return self._setAllDirections(declarations, vals[0], vals[1], vals[2], vals[3]);
    } else {
      throw Error("Can't understand value for margin: `" + originalValue + "`");
    }
  };

  Margin._setAllDirections = function(declarations, top, right, bottom, left) {
    MarginTop.setOnto(declarations, 'marginTop', top);
    MarginTop.setOnto(declarations, 'marginRight', right);
    MarginTop.setOnto(declarations, 'marginBottom', bottom);
    MarginTop.setOnto(declarations, 'marginLeft', left);
  };

  return Margin;

})(_Declaration);


/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Padding, PaddingBottom, PaddingLeft, PaddingRight, PaddingTop, _Declaration,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Declaration = __webpack_require__(56);

PaddingTop = __webpack_require__(286);

PaddingLeft = __webpack_require__(287);

PaddingRight = __webpack_require__(288);

PaddingBottom = __webpack_require__(289);

module.exports = Padding = (function(superClass) {
  var self;

  extend(Padding, superClass);

  function Padding() {
    return Padding.__super__.constructor.apply(this, arguments);
  }

  self = Padding;

  Padding.setOnto = function(declarations, prop, originalValue) {
    var append, val, vals;
    append = '';
    val = _Declaration.sanitizeValue(originalValue);
    if (_Declaration.importantClauseRx.test(String(val))) {
      append = ' !important';
      val = val.replace(_Declaration.importantClauseRx, '');
    }
    val = val.trim();
    if (val.length === 0) {
      return self._setAllDirections(declarations, append, append, append, append);
    }
    vals = val.split(" ").map(function(val) {
      return val + append;
    });
    if (vals.length === 1) {
      return self._setAllDirections(declarations, vals[0], vals[0], vals[0], vals[0]);
    } else if (vals.length === 2) {
      return self._setAllDirections(declarations, vals[0], vals[1], vals[0], vals[1]);
    } else if (vals.length === 3) {
      return self._setAllDirections(declarations, vals[0], vals[1], vals[2], vals[1]);
    } else if (vals.length === 4) {
      return self._setAllDirections(declarations, vals[0], vals[1], vals[2], vals[3]);
    } else {
      throw Error("Can't understand value for padding: `" + originalValue + "`");
    }
  };

  Padding._setAllDirections = function(declarations, top, right, bottom, left) {
    PaddingTop.setOnto(declarations, 'paddingTop', top);
    PaddingTop.setOnto(declarations, 'paddingRight', right);
    PaddingTop.setOnto(declarations, 'paddingBottom', bottom);
    PaddingTop.setOnto(declarations, 'paddingLeft', left);
  };

  return Padding;

})(_Declaration);


/***/ }),
/* 619 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.3
var MixedDeclarationSet,
  slice = [].slice;

module.exports = MixedDeclarationSet = (function() {
  var self;

  self = MixedDeclarationSet;

  MixedDeclarationSet.mix = function() {
    var i, len, mixed, ruleSets, rules;
    ruleSets = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    mixed = new self;
    for (i = 0, len = ruleSets.length; i < len; i++) {
      rules = ruleSets[i];
      mixed.mixWithList(rules);
    }
    return mixed;
  };

  function MixedDeclarationSet() {
    this._declarations = {};
  }

  MixedDeclarationSet.prototype.mixWithList = function(rules) {
    var i, len, rule;
    rules.sort(function(a, b) {
      return a.selector.priority > b.selector.priority;
    });
    for (i = 0, len = rules.length; i < len; i++) {
      rule = rules[i];
      this._mixWithRule(rule);
    }
    return this;
  };

  MixedDeclarationSet.prototype._mixWithRule = function(rule) {
    var dec, prop, ref;
    ref = rule.styles._declarations;
    for (prop in ref) {
      dec = ref[prop];
      this._mixWithDeclaration(dec);
    }
  };

  MixedDeclarationSet.prototype._mixWithDeclaration = function(dec) {
    var cur;
    cur = this._declarations[dec.prop];
    if ((cur != null) && cur.important && !dec.important) {
      return;
    }
    this._declarations[dec.prop] = dec;
  };

  MixedDeclarationSet.prototype.get = function(prop) {
    if (prop == null) {
      return this._declarations;
    }
    if (this._declarations[prop] == null) {
      return null;
    }
    return this._declarations[prop].val;
  };

  MixedDeclarationSet.prototype.toObject = function() {
    var dec, obj, prop, ref;
    obj = {};
    ref = this._declarations;
    for (prop in ref) {
      dec = ref[prop];
      obj[prop] = dec.val;
    }
    return obj;
  };

  return MixedDeclarationSet;

})();


/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Block, Layout, SpecialString, fn, i, len, object, prop, ref, terminalWidth;

Block = __webpack_require__(621);

object = __webpack_require__(45).object;

SpecialString = __webpack_require__(166);

terminalWidth = __webpack_require__(33).getCols();

module.exports = Layout = (function() {
  var self;

  self = Layout;

  Layout._rootBlockDefaultConfig = {
    linePrependor: {
      options: {
        amount: 0
      }
    },
    lineAppendor: {
      options: {
        amount: 0
      }
    },
    blockPrependor: {
      options: {
        amount: 0
      }
    },
    blockAppendor: {
      options: {
        amount: 0
      }
    }
  };

  Layout._defaultConfig = {
    terminalWidth: terminalWidth
  };

  function Layout(config, rootBlockConfig) {
    var rootConfig;
    if (config == null) {
      config = {};
    }
    if (rootBlockConfig == null) {
      rootBlockConfig = {};
    }
    this._written = [];
    this._activeBlock = null;
    this._config = object.append(self._defaultConfig, config);
    rootConfig = object.append(self._rootBlockDefaultConfig, rootBlockConfig);
    this._root = new Block(this, null, rootConfig, '__root');
    this._root._open();
  }

  Layout.prototype.getRootBlock = function() {
    return this._root;
  };

  Layout.prototype._append = function(text) {
    return this._written.push(text);
  };

  Layout.prototype._appendLine = function(text) {
    var s;
    this._append(text);
    s = SpecialString(text);
    if (s.length < this._config.terminalWidth) {
      this._append('<none>\n</none>');
    }
    return this;
  };

  Layout.prototype.get = function() {
    this._ensureClosed();
    if (this._written[this._written.length - 1] === '<none>\n</none>') {
      this._written.pop();
    }
    return this._written.join("");
  };

  Layout.prototype._ensureClosed = function() {
    if (this._activeBlock !== this._root) {
      throw Error("Not all the blocks have been closed. Please call block.close() on all open blocks.");
    }
    if (this._root.isOpen()) {
      this._root.close();
    }
  };

  return Layout;

})();

ref = ['openBlock', 'write'];
fn = function() {
  var method;
  method = prop;
  return Layout.prototype[method] = function() {
    return this._root[method].apply(this._root, arguments);
  };
};
for (i = 0, len = ref.length; i < len; i++) {
  prop = ref[i];
  fn();
}


/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var Block, SpecialString, object, terminalWidth;

SpecialString = __webpack_require__(166);

object = __webpack_require__(45).object;

terminalWidth = __webpack_require__(33).getCols();

module.exports = Block = (function() {
  var self;

  self = Block;

  Block.defaultConfig = {
    blockPrependor: {
      fn: __webpack_require__(622),
      options: {
        amount: 0
      }
    },
    blockAppendor: {
      fn: __webpack_require__(624),
      options: {
        amount: 0
      }
    },
    linePrependor: {
      fn: __webpack_require__(626),
      options: {
        amount: 0
      }
    },
    lineAppendor: {
      fn: __webpack_require__(628),
      options: {
        amount: 0
      }
    },
    lineWrapper: {
      fn: __webpack_require__(630),
      options: {
        lineWidth: null
      }
    },
    width: terminalWidth,
    prefixRaw: '',
    suffixRaw: ''
  };

  function Block(_layout, _parent, config, _name) {
    this._layout = _layout;
    this._parent = _parent;
    if (config == null) {
      config = {};
    }
    this._name = _name != null ? _name : '';
    this._config = object.append(self.defaultConfig, config);
    this._closed = false;
    this._wasOpenOnce = false;
    this._active = false;
    this._buffer = '';
    this._didSeparateBlock = false;
    this._linePrependor = new this._config.linePrependor.fn(this._config.linePrependor.options);
    this._lineAppendor = new this._config.lineAppendor.fn(this._config.lineAppendor.options);
    this._blockPrependor = new this._config.blockPrependor.fn(this._config.blockPrependor.options);
    this._blockAppendor = new this._config.blockAppendor.fn(this._config.blockAppendor.options);
  }

  Block.prototype._activate = function(deactivateParent) {
    if (deactivateParent == null) {
      deactivateParent = true;
    }
    if (this._active) {
      throw Error("This block is already active. This is probably a bug in RenderKid itself");
    }
    if (this._closed) {
      throw Error("This block is closed and cannot be activated. This is probably a bug in RenderKid itself");
    }
    this._active = true;
    this._layout._activeBlock = this;
    if (deactivateParent) {
      if (this._parent != null) {
        this._parent._deactivate(false);
      }
    }
    return this;
  };

  Block.prototype._deactivate = function(activateParent) {
    if (activateParent == null) {
      activateParent = true;
    }
    this._ensureActive();
    this._flushBuffer();
    if (activateParent) {
      if (this._parent != null) {
        this._parent._activate(false);
      }
    }
    this._active = false;
    return this;
  };

  Block.prototype._ensureActive = function() {
    if (!this._wasOpenOnce) {
      throw Error("This block has never been open before. This is probably a bug in RenderKid itself.");
    }
    if (!this._active) {
      throw Error("This block is not active. This is probably a bug in RenderKid itself.");
    }
    if (this._closed) {
      throw Error("This block is already closed. This is probably a bug in RenderKid itself.");
    }
  };

  Block.prototype._open = function() {
    if (this._wasOpenOnce) {
      throw Error("Block._open() has been called twice. This is probably a RenderKid bug.");
    }
    this._wasOpenOnce = true;
    if (this._parent != null) {
      this._parent.write(this._whatToPrependToBlock());
    }
    this._activate();
    return this;
  };

  Block.prototype.close = function() {
    this._deactivate();
    this._closed = true;
    if (this._parent != null) {
      this._parent.write(this._whatToAppendToBlock());
    }
    return this;
  };

  Block.prototype.isOpen = function() {
    return this._wasOpenOnce && !this._closed;
  };

  Block.prototype.write = function(str) {
    this._ensureActive();
    if (str === '') {
      return;
    }
    str = String(str);
    this._buffer += str;
    return this;
  };

  Block.prototype.openBlock = function(config, name) {
    var block;
    this._ensureActive();
    block = new Block(this._layout, this, config, name);
    block._open();
    return block;
  };

  Block.prototype._flushBuffer = function() {
    var str;
    if (this._buffer === '') {
      return;
    }
    str = this._buffer;
    this._buffer = '';
    this._writeInline(str);
  };

  Block.prototype._toPrependToLine = function() {
    var fromParent;
    fromParent = '';
    if (this._parent != null) {
      fromParent = this._parent._toPrependToLine();
    }
    return this._linePrependor.render(fromParent);
  };

  Block.prototype._toAppendToLine = function() {
    var fromParent;
    fromParent = '';
    if (this._parent != null) {
      fromParent = this._parent._toAppendToLine();
    }
    return this._lineAppendor.render(fromParent);
  };

  Block.prototype._whatToPrependToBlock = function() {
    return this._blockPrependor.render();
  };

  Block.prototype._whatToAppendToBlock = function() {
    return this._blockAppendor.render();
  };

  Block.prototype._writeInline = function(str) {
    var i, j, k, l, lineBreaksToAppend, m, ref, ref1, ref2, remaining;
    if (SpecialString(str).isOnlySpecialChars()) {
      this._layout._append(str);
      return;
    }
    remaining = str;
    lineBreaksToAppend = 0;
    if (m = remaining.match(/^\n+/)) {
      for (i = j = 1, ref = m[0].length; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        this._writeLine('');
      }
      remaining = remaining.substr(m[0].length, remaining.length);
    }
    if (m = remaining.match(/\n+$/)) {
      lineBreaksToAppend = m[0].length;
      remaining = remaining.substr(0, remaining.length - m[0].length);
    }
    while (remaining.length > 0) {
      if (m = remaining.match(/^[^\n]+/)) {
        this._writeLine(m[0]);
        remaining = remaining.substr(m[0].length, remaining.length);
      } else if (m = remaining.match(/^\n+/)) {
        for (i = k = 1, ref1 = m[0].length; 1 <= ref1 ? k < ref1 : k > ref1; i = 1 <= ref1 ? ++k : --k) {
          this._writeLine('');
        }
        remaining = remaining.substr(m[0].length, remaining.length);
      }
    }
    if (lineBreaksToAppend > 0) {
      for (i = l = 1, ref2 = lineBreaksToAppend; 1 <= ref2 ? l <= ref2 : l >= ref2; i = 1 <= ref2 ? ++l : --l) {
        this._writeLine('');
      }
    }
  };

  Block.prototype._writeLine = function(str) {
    var line, lineContent, lineContentLength, remaining, roomLeft, toAppend, toAppendLength, toPrepend, toPrependLength;
    remaining = SpecialString(str);
    while (true) {
      toPrepend = this._toPrependToLine();
      toPrependLength = SpecialString(toPrepend).length;
      toAppend = this._toAppendToLine();
      toAppendLength = SpecialString(toAppend).length;
      roomLeft = this._layout._config.terminalWidth - (toPrependLength + toAppendLength);
      lineContentLength = Math.min(this._config.width, roomLeft);
      lineContent = remaining.cut(0, lineContentLength, true);
      line = toPrepend + lineContent.str + toAppend;
      this._layout._appendLine(line);
      if (remaining.isEmpty()) {
        break;
      }
    }
  };

  return Block;

})();


/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var DefaultBlockPrependor, tools,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

tools = __webpack_require__(33);

module.exports = DefaultBlockPrependor = (function(superClass) {
  extend(DefaultBlockPrependor, superClass);

  function DefaultBlockPrependor() {
    return DefaultBlockPrependor.__super__.constructor.apply(this, arguments);
  }

  DefaultBlockPrependor.prototype._render = function(options) {
    return tools.repeatString("\n", this._config.amount);
  };

  return DefaultBlockPrependor;

})(__webpack_require__(623));


/***/ }),
/* 623 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.3
var _BlockPrependor;

module.exports = _BlockPrependor = (function() {
  function _BlockPrependor(_config) {
    this._config = _config;
  }

  _BlockPrependor.prototype.render = function(options) {
    return this._render(options);
  };

  return _BlockPrependor;

})();


/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var DefaultBlockAppendor, tools,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

tools = __webpack_require__(33);

module.exports = DefaultBlockAppendor = (function(superClass) {
  extend(DefaultBlockAppendor, superClass);

  function DefaultBlockAppendor() {
    return DefaultBlockAppendor.__super__.constructor.apply(this, arguments);
  }

  DefaultBlockAppendor.prototype._render = function(options) {
    return tools.repeatString("\n", this._config.amount);
  };

  return DefaultBlockAppendor;

})(__webpack_require__(625));


/***/ }),
/* 625 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.3
var _BlockAppendor;

module.exports = _BlockAppendor = (function() {
  function _BlockAppendor(_config) {
    this._config = _config;
  }

  _BlockAppendor.prototype.render = function(options) {
    return this._render(options);
  };

  return _BlockAppendor;

})();


/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var DefaultLinePrependor, SpecialString, tools,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

tools = __webpack_require__(33);

SpecialString = __webpack_require__(166);

module.exports = DefaultLinePrependor = (function(superClass) {
  var self;

  extend(DefaultLinePrependor, superClass);

  function DefaultLinePrependor() {
    return DefaultLinePrependor.__super__.constructor.apply(this, arguments);
  }

  self = DefaultLinePrependor;

  DefaultLinePrependor.pad = function(howMuch) {
    return tools.repeatString(" ", howMuch);
  };

  DefaultLinePrependor.prototype._render = function(inherited, options) {
    var addToLeft, addToRight, alignment, bullet, char, charLen, diff, left, output, space, toWrite;
    if (this._lineNo === 0 && (bullet = this._config.bullet)) {
      char = bullet.char;
      charLen = SpecialString(char).length;
      alignment = bullet.alignment;
      space = this._config.amount;
      toWrite = char;
      addToLeft = '';
      addToRight = '';
      if (space > charLen) {
        diff = space - charLen;
        if (alignment === 'right') {
          addToLeft = self.pad(diff);
        } else if (alignment === 'left') {
          addToRight = self.pad(diff);
        } else if (alignment === 'center') {
          left = Math.round(diff / 2);
          addToLeft = self.pad(left);
          addToRight = self.pad(diff - left);
        } else {
          throw Error("Unknown alignment `" + alignment + "`");
        }
      }
      output = addToLeft + char + addToRight;
    } else {
      output = self.pad(this._config.amount);
    }
    return inherited + output;
  };

  return DefaultLinePrependor;

})(__webpack_require__(627));


/***/ }),
/* 627 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.3
var _LinePrependor;

module.exports = _LinePrependor = (function() {
  function _LinePrependor(_config) {
    this._config = _config;
    this._lineNo = -1;
  }

  _LinePrependor.prototype.render = function(inherited, options) {
    this._lineNo++;
    return '<none>' + this._render(inherited, options) + '</none>';
  };

  return _LinePrependor;

})();


/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var DefaultLineAppendor, tools,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

tools = __webpack_require__(33);

module.exports = DefaultLineAppendor = (function(superClass) {
  extend(DefaultLineAppendor, superClass);

  function DefaultLineAppendor() {
    return DefaultLineAppendor.__super__.constructor.apply(this, arguments);
  }

  DefaultLineAppendor.prototype._render = function(inherited, options) {
    return inherited + tools.repeatString(" ", this._config.amount);
  };

  return DefaultLineAppendor;

})(__webpack_require__(629));


/***/ }),
/* 629 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.3
var _LineAppendor;

module.exports = _LineAppendor = (function() {
  function _LineAppendor(_config) {
    this._config = _config;
    this._lineNo = 0;
  }

  _LineAppendor.prototype.render = function(inherited, options) {
    this._lineNo++;
    return '<none>' + this._render(inherited, options) + '</none>';
  };

  return _LineAppendor;

})();


/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.3
var DefaultLineWrapper,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = DefaultLineWrapper = (function(superClass) {
  extend(DefaultLineWrapper, superClass);

  function DefaultLineWrapper() {
    return DefaultLineWrapper.__super__.constructor.apply(this, arguments);
  }

  DefaultLineWrapper.prototype._render = function() {};

  return DefaultLineWrapper;

})(__webpack_require__(631));


/***/ }),
/* 631 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.3
var _LineWrapper;

module.exports = _LineWrapper = (function() {
  function _LineWrapper() {}

  _LineWrapper.prototype.render = function(str, options) {
    return this._render(str, options);
  };

  return _LineWrapper;

})();


/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};


/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "9092e37197f4e624cc45f878afd8ac6e.png";

/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */,
/* 645 */,
/* 646 */,
/* 647 */,
/* 648 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "window.React"
var external_window_React_ = __webpack_require__(1);
var external_window_React_default = /*#__PURE__*/__webpack_require__.n(external_window_React_);

// EXTERNAL MODULE: external "window.ReactDOM"
var external_window_ReactDOM_ = __webpack_require__(5);
var external_window_ReactDOM_default = /*#__PURE__*/__webpack_require__.n(external_window_ReactDOM_);

// EXTERNAL MODULE: ./renderer/node_modules/@icedesign/base/reset.scss
var base_reset = __webpack_require__(185);

// EXTERNAL MODULE: ./renderer/node_modules/rc-tooltip/assets/bootstrap.css
var bootstrap = __webpack_require__(180);

// EXTERNAL MODULE: external "electron"
var external_electron_ = __webpack_require__(4);

// EXTERNAL MODULE: ./renderer/node_modules/mobx-react/index.module.js
var index_module = __webpack_require__(81);

// CONCATENATED MODULE: ./renderer/src/scripts-listener.js

/**
 * 统一监听 main process 进程事件
 * 管理每个 project 的状态，ice-scripts 进程发送事件更新项目的状态
 * ice-scripts 通过 iceworks ipc 发送
 *
 * @param {Object} projects mobx observer object
 */

/* harmony default export */ var scripts_listener = ({
  initialize: function initialize(projects) {
    // dev 回调
    external_electron_["ipcRenderer"].on('update_project', function (event, eventData) {
      var path = eventData.path,
          eventMessage = eventData.message; // ice dev 发送的消息
      // eslint-disable-next-line no-unused-vars

      var action = eventMessage.action,
          message = eventMessage.message,
          _eventMessage$data = eventMessage.data,
          data = _eventMessage$data === void 0 ? {} : _eventMessage$data;
      var project = projects.getProject(path);

      if (project) {
        project.batchUpdate(data);
      }
    });
  }
});
// EXTERNAL MODULE: external "window.mobx"
var external_window_mobx_ = __webpack_require__(0);

// EXTERNAL MODULE: ./node_modules/uppercamelcase/index.js
var uppercamelcase = __webpack_require__(77);
var uppercamelcase_default = /*#__PURE__*/__webpack_require__.n(uppercamelcase);

// EXTERNAL MODULE: ./node_modules/uuid/index.js
var uuid = __webpack_require__(169);
var uuid_default = /*#__PURE__*/__webpack_require__.n(uuid);

// EXTERNAL MODULE: ./renderer/src/services.js
var services = __webpack_require__(6);

// CONCATENATED MODULE: ./renderer/src/lib/filter-material.js

var settings = services["a" /* default */].settings;
function filterMaterial(materials) {
  var isAlibaba = settings.get('isAlibaba'); // 是否为管理员？管理员可见所有物料

  var isAdmin = localStorage.getItem('isAdmin') === 'true';
  return materials.filter(function (material) {
    // 内部用户屏蔽内置的 vue 源
    if (isAdmin) {
      return true;
    } // 内网用户只透出 react 物料


    if (isAlibaba && material.builtIn && !['react', 'rax'].includes(material.type)) {
      return false;
    }

    return true;
  });
}
// EXTERNAL MODULE: ./renderer/src/lib/request-material.js
var request_material = __webpack_require__(47);

// CONCATENATED MODULE: ./renderer/src/datacenter/materials.js
// 物料管理中心
// 负责加载所有物料，以及区块等




var materials_settings = services["a" /* default */].settings; // 请求所有物料源数据

function fetchMaterialsData() {
  var materials = materials_settings.get('materials'); // 获取物料接口

  materials = filterMaterial(materials);
  return new Promise(function (resolve, reject) {
    var requestPromise = materials.map(function (material) {
      return Object(request_material["a" /* default */])(material.source, true);
    });
    var materialDatas = materials.map(function (m) {
      return {
        name: m.name,
        source: m.source,
        body: {}
      };
    });
    Promise.all(requestPromise).then(function (requestResult) {
      requestResult.forEach(function (res, index) {
        materialDatas[index].body = res || {};
      });
      resolve(materialDatas);
    }).catch(reject);
  });
} // 获取所有物料模板
// const getScaffolds = () => {
//   return fetchMaterialsData().then((materialDatas) => {
//     return materialDatas.map((materials) => {
//       return {
//         name: materials.name,
//         source: materials.source,
//         data: materials.body.scaffolds,
//       };
//     });
//   });
// };

/**
 * 获取所有物料中可用的 layouts
 * @param {stirng} type 物料的类型，根据项目类型获取对应源的物料
 */


var getBlocks = function getBlocks() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return fetchMaterialsData().then(function (materialDatas) {
    if (type) {
      materialDatas = materialDatas.filter(function (materials) {
        return materials.body.type === type;
      });
    }

    return materialDatas.map(function (materials) {
      return {
        name: materials.name,
        source: materials.source,
        data: materials.body.blocks
      };
    });
  });
};
/**
 * 获取所有物料中可用的 layouts
 * @param {stirng} type 物料的类型，根据项目类型获取对应源的物料
 */
// const getLayouts = (type = '') => {
//   return fetchMaterialsData().then((materialDatas) => {
//     if (type) {
//       materialDatas = materialDatas.filter((materials) => {
//         return materials.body.type === type;
//       });
//     }
//     return materialDatas.map((materials) => {
//       return {
//         name: materials.name,
//         source: materials.source,
//         data: materials.body.layouts,
//       };
//     });
//   });
// };
// 区块分类逻辑


var materials_getCategoriesByBlocks = function getCategoriesByBlocks(blocks) {
  var categoryMap = {
    table: '表格',
    form: '表单',
    chart: '图表',
    list: '列表',
    modal: '模态框',
    filter: '筛选',
    'data-display': '数据展示',
    'info-display': '信息展示',
    exception: '异常',
    layout: '布局'
  };
  var uniqueCategories = {};
  blocks.forEach(function (block) {
    if (block.categories) {
      block.categories.forEach(function (originalCategoryName) {
        var categoryName = categoryMap[originalCategoryName] || originalCategoryName;
        uniqueCategories[categoryName] = {
          name: originalCategoryName,
          className: uppercamelcase_default()(originalCategoryName),
          description: categoryName
        };
      });
    }
  });
  return Object.values(uniqueCategories);
};


// EXTERNAL MODULE: ./renderer/src/lib/logger.js
var logger = __webpack_require__(7);

// EXTERNAL MODULE: ./renderer/src/stores/projects.js + 1 modules
var stores_projects = __webpack_require__(16);

// CONCATENATED MODULE: ./renderer/src/stores/block-groups.js
var _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;

function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }




var shared = services["a" /* default */].shared;
/**
 * 用于管理 block groups 的 store 管理
 */

var block_groups_BlockGroups = (_dec = external_window_mobx_["action"].bound, (_class = (_temp =
/*#__PURE__*/
function () {
  function BlockGroups() {
    _classCallCheck(this, BlockGroups);

    _initializerDefineProperty(this, "visible", _descriptor, this);

    _initializerDefineProperty(this, "isLoading", _descriptor2, this);

    _initializerDefineProperty(this, "blocks", _descriptor3, this);

    _initializerDefineProperty(this, "showModal", _descriptor4, this);

    _initializerDefineProperty(this, "previewBlocks", _descriptor5, this);

    _initializerDefineProperty(this, "blockGroups", _descriptor6, this);

    _initializerDefineProperty(this, "openModal", _descriptor7, this);

    _initializerDefineProperty(this, "closeModal", _descriptor8, this);
  }

  _createClass(BlockGroups, [{
    key: "getBlockGroups",
    // 区块组合列表
    value: function getBlockGroups() {
      var uri = shared.blockGroupsMaterials.source;
      return Object(request_material["a" /* default */])(uri, true);
    }
  }, {
    key: "fetch",
    value: function fetch() {
      var _this = this;

      this.isLoading = true;
      return this.getBlockGroups().then(this.fetchSuccess).catch(function () {
        _this.blockGroups = [];
        _this.isLoading = false;
      });
    }
  }, {
    key: "fetchSuccess",
    value: function fetchSuccess(body) {
      this.blockGroups = body || [];
      this.isLoading = false;
    }
  }]);

  return BlockGroups;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "isLoading", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return true;
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "blocks", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "showModal", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "previewBlocks", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "blockGroups", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), _applyDecoratedDescriptor(_class.prototype, "fetch", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "fetch"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchSuccess", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "fetchSuccess"), _class.prototype), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "openModal", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this2 = this;

    return function (blocks) {
      _this2.showModal = true;
      _this2.previewBlocks = blocks;
    };
  }
}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "closeModal", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this3 = this;

    return function () {
      _this3.showModal = false;
    };
  }
})), _class));
/* harmony default export */ var block_groups = (new block_groups_BlockGroups());
// CONCATENATED MODULE: ./renderer/src/stores/blocks-search.js
var blocks_search_class, blocks_search_descriptor, blocks_search_descriptor2, blocks_search_temp;

function blocks_search_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function blocks_search_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function blocks_search_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function blocks_search_createClass(Constructor, protoProps, staticProps) { if (protoProps) blocks_search_defineProperties(Constructor.prototype, protoProps); if (staticProps) blocks_search_defineProperties(Constructor, staticProps); return Constructor; }

function blocks_search_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function blocks_search_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }



/**
 * 用于区块选择面板管理区块状态
 */

var blocks_search_MaterialBlocks = (blocks_search_class = (blocks_search_temp =
/*#__PURE__*/
function () {
  function MaterialBlocks(material) {
    var _this = this;

    blocks_search_classCallCheck(this, MaterialBlocks);

    blocks_search_initializerDefineProperty(this, "keywords", blocks_search_descriptor, this);

    blocks_search_initializerDefineProperty(this, "newBlocks", blocks_search_descriptor2, this);

    this.additionalIsNew = function (blocks) {
      var sortBlocks = blocks.filter(function (block) {
        return !!block.publishTime;
      });

      if (sortBlocks.length === 0) {
        return blocks;
      }

      var isNewlyBlock = [];
      var days = 0;
      var nowDate = new Date();

      while (!isNewlyBlock.length) {
        days += 7; // eslint-disable-next-line no-loop-func

        sortBlocks.forEach(function (item) {
          var blockCreatedDate = new Date(item.publishTime);
          /* eslint-disable no-underscore-dangle */

          var _isNew = nowDate - blockCreatedDate < days * 24 * 60 * 60 * 1000;

          if (_isNew) {
            isNewlyBlock.push(item);
          }

          item._isNew = _isNew;
          /* eslint-enable no-underscore-dangle */
        });
      }

      _this.newBlocks = isNewlyBlock;
      return blocks;
    };

    var categories = materials_getCategoriesByBlocks(material.data); // 全部分类

    this.name = material.name;
    this.source = material.source;
    this.originBlocks = this.additionalIsNew(material.data);
    this.categories = categories;
  }

  blocks_search_createClass(MaterialBlocks, [{
    key: "setKeywords",
    value: function setKeywords(key) {
      this.keywords = key;
    }
  }, {
    key: "getBlocksFilterByCategory",
    value: function getBlocksFilterByCategory(name) {
      var _this2 = this;

      if (this.keywords && this.keywords.length > 0) {
        return this.originBlocks.filter(function (block) {
          var blockKeywords = [block.title, block.name, block.description].join(' ').toLowerCase();

          var matched = _this2.keywords.some(function (key) {
            return blockKeywords.indexOf(key) !== -1;
          });

          return block.categories.includes(name) && matched;
        });
      }

      return this.originBlocks.filter(function (block) {
        return block.categories.includes(name);
      });
    }
  }, {
    key: "blocks",
    get: function get() {
      var _this3 = this;

      var categories = this.categories;
      var blocks = external_window_mobx_["observable"].map({});
      categories.forEach(function (category) {
        var blocksCategory = _this3.getBlocksFilterByCategory(category.name);

        blocks.set(category.name, blocksCategory);
      });
      return blocks;
    }
  }, {
    key: "blocksWithCategory",
    get: function get() {
      var result = [];

      if (Array.isArray(this.newBlocks) && this.newBlocks.length > 0 && this.keywords && this.keywords.length === 0) {
        result.push({
          category: '最新',
          blocks: this.newBlocks
        });
      }
      /* eslint-disable no-restricted-syntax */


      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.blocks.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;
          result.push({
            category: key,
            blocks: Object(external_window_mobx_["toJS"])(this.blocks.get(key))
          });
        }
        /* eslint-enable no-restricted-syntax */

      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }
  }]);

  return MaterialBlocks;
}(), blocks_search_temp), (blocks_search_descriptor = blocks_search_applyDecoratedDescriptor(blocks_search_class.prototype, "keywords", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), blocks_search_descriptor2 = blocks_search_applyDecoratedDescriptor(blocks_search_class.prototype, "newBlocks", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), blocks_search_applyDecoratedDescriptor(blocks_search_class.prototype, "setKeywords", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_search_class.prototype, "setKeywords"), blocks_search_class.prototype), blocks_search_applyDecoratedDescriptor(blocks_search_class.prototype, "blocks", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(blocks_search_class.prototype, "blocks"), blocks_search_class.prototype), blocks_search_applyDecoratedDescriptor(blocks_search_class.prototype, "blocksWithCategory", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(blocks_search_class.prototype, "blocksWithCategory"), blocks_search_class.prototype)), blocks_search_class);
/* harmony default export */ var blocks_search = (blocks_search_MaterialBlocks);
// CONCATENATED MODULE: ./renderer/src/stores/blocks.js
var blocks_dec, _dec2, _dec3, _dec4, blocks_class, blocks_descriptor, blocks_descriptor2, blocks_descriptor3, blocks_descriptor4, blocks_descriptor5, blocks_descriptor6, blocks_descriptor7, blocks_descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, blocks_temp;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function blocks_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function blocks_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function blocks_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function blocks_createClass(Constructor, protoProps, staticProps) { if (protoProps) blocks_defineProperties(Constructor.prototype, protoProps); if (staticProps) blocks_defineProperties(Constructor, staticProps); return Constructor; }

function blocks_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function blocks_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }










var blocks_shared = services["a" /* default */].shared;
/**
 * 用于管理 block picker 的 store 管理
 */

var blocks_Blocks = (blocks_dec = external_window_mobx_["action"].bound, _dec2 = external_window_mobx_["action"].bound, _dec3 = external_window_mobx_["action"].bound, _dec4 = external_window_mobx_["action"].bound, (blocks_class = (blocks_temp =
/*#__PURE__*/
function () {
  // 原搜索关键词
  // 物料源列表
  // 区块选择器已选择的区块
  // 图片预览弹窗
  // 当前预览的区块
  // 记录当前选中的Tab
  function Blocks() {
    var _this = this;

    blocks_classCallCheck(this, Blocks);

    blocks_initializerDefineProperty(this, "visible", blocks_descriptor, this);

    blocks_initializerDefineProperty(this, "isLoading", blocks_descriptor2, this);

    blocks_initializerDefineProperty(this, "keywords", blocks_descriptor3, this);

    blocks_initializerDefineProperty(this, "originKeywords", blocks_descriptor4, this);

    blocks_initializerDefineProperty(this, "materialsValue", blocks_descriptor5, this);

    blocks_initializerDefineProperty(this, "originBlocks", blocks_descriptor6, this);

    blocks_initializerDefineProperty(this, "categories", blocks_descriptor7, this);

    blocks_initializerDefineProperty(this, "selected", blocks_descriptor8, this);

    blocks_initializerDefineProperty(this, "isSorting", _descriptor9, this);

    blocks_initializerDefineProperty(this, "showModal", _descriptor10, this);

    blocks_initializerDefineProperty(this, "previewBlock", _descriptor11, this);

    blocks_initializerDefineProperty(this, "currentTabKey", _descriptor12, this);

    this.timer = null;

    blocks_initializerDefineProperty(this, "openModal", _descriptor13, this);

    blocks_initializerDefineProperty(this, "closeModal", _descriptor14, this);

    blocks_initializerDefineProperty(this, "onSortStart", _descriptor15, this);

    blocks_initializerDefineProperty(this, "onSortEnd", _descriptor16, this);

    Object(external_window_mobx_["autorun"])(function () {
      // 每次展开数据清空
      if (_this.visible) {
        _this.reset();
      }
    });
  }

  blocks_createClass(Blocks, [{
    key: "reset",
    value: function reset() {
      this.selected = [];
      this.keywords = [];
      this.originKeywords = '';
      this.currentTabKey = '0'; // tab重置
    }
  }, {
    key: "fetch",
    value: function fetch() {
      this.isLoading = true;
      this.type = stores_projects["a" /* default */].currentProject.getLibraryType(); // 展示当前框架库类型匹配的区块

      getBlocks(this.type).then(this.fetchSuccess).catch(this.fetchFailed);
    }
  }, {
    key: "fetchSuccess",
    value: function fetchSuccess(materials) {
      var materialsValue = [];

      if (Array.isArray(materials) && materials.length > 0) {
        materials.forEach(function (material) {
          materialsValue.push(new blocks_search(material));
        });
        this.reset();
        this.materialsValue = materialsValue; // 所有 blocks 数据

        var _this$getIceMaterial = this.getIceMaterial(),
            iceMaterial = _this$getIceMaterial.iceMaterial,
            iceIndex = _this$getIceMaterial.iceIndex; // materials 中有飞冰物料时，处理飞冰组合推荐


        if (iceMaterial) {
          // tab 中加塞飞冰组合推荐。这里提前加塞，为了渲染tab不出现抖动
          this.materialsValue = this.addBlockGroupsMaterial(iceMaterial, iceIndex); // fetch组合推荐

          block_groups.fetch();
        }

        this.isLoading = false;
      } else {
        this.reset();
        this.materialsValue = [];
        this.isLoading = false;
      }
    } // materials 中有飞冰物料时，加塞飞冰组合推荐

  }, {
    key: "addBlockGroupsMaterial",
    value: function addBlockGroupsMaterial(iceMaterial, iceIndex) {
      if (iceIndex !== -1) {
        var formatMaterials = this.materialsValue.slice();
        formatMaterials.splice(iceIndex + 1, 0, {
          name: '飞冰区块组合',
          key: 'iceBlockGroups'
        });
        return formatMaterials;
      }

      return this.materialsValue;
    }
  }, {
    key: "fetchFailed",
    value: function fetchFailed(err) {
      logger["a" /* default */].info(err);
      this.isLoading = false;
    }
  }, {
    key: "search",
    // search 关键字搜索
    value: function search(key) {
      var _this2 = this;

      this.originKeywords = key;

      if (this.timer) {
        clearTimeout(this.timer);
      }

      this.timer = setTimeout(function () {
        _this2.searchDelay(key);
      }, 150);
    }
  }, {
    key: "searchDelay",
    value: function searchDelay(key) {
      var _this3 = this;

      this.keywords = key.toLowerCase().split(/\s+/).filter(Boolean);
      this.materialsValue.forEach(function (materila) {
        materila.setKeywords(_this3.keywords);
      });
    }
    /* =============== 弹窗相关 ================ */

  }, {
    key: "open",
    value: function open() {
      this.visible = true;
    }
  }, {
    key: "close",
    value: function close() {
      this.visible = false;
    }
  }, {
    key: "formatBlockName",
    value: function formatBlockName(name) {
      return name.replace('@', '').replace(/\//g, '-');
    } // block 选中、排序，管理等操作

  }, {
    key: "addBlock",
    value: function addBlock(block) {
      var existBlocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var blockClassName = this.formatBlockName(block.name);

      if (block.aliasUpper !== false) {
        blockClassName = uppercamelcase_default()(blockClassName);
      }

      var aliasName = this.generateBlockAliasName(blockClassName, 0, existBlocks);
      this.selected.push(_objectSpread({}, block, {
        uid: uuid_default.a.v1(),
        // 模块渲染唯一值
        alias: aliasName
      }));
    }
  }, {
    key: "addCustomBlock",
    value: function addCustomBlock(block, blockName) {
      var existBlocks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var aliasName = this.generateBlockAliasName(blockName, 0, existBlocks);
      this.selected.push(_objectSpread({}, block, {
        blockName: blockName,
        uid: uuid_default.a.v1(),
        // 模块渲染唯一值
        alias: aliasName
      }));
    }
  }, {
    key: "generateBlockAliasName",
    value: function generateBlockAliasName(blockAlias, count, existBlocks) {
      var name = count === 0 ? blockAlias : blockAlias + count;
      var isConflict = this.selected.some(function (block) {
        return block.alias === name;
      }) || existBlocks.some(function (blockName) {
        return blockName === name;
      }); // TODO 验证名称冲突

      if (isConflict) {
        return this.generateBlockAliasName(blockAlias, count + 1, existBlocks);
      }

      return name;
    }
  }, {
    key: "getIceMaterial",
    value: function getIceMaterial() {
      var iceIndex = -1; // 获取配置中的ice物料源source；

      var _shared$defaultMateri = blocks_shared.defaultMaterials.find(function (recommendMaterial) {
        return recommendMaterial.key === 'ice';
      }),
          source = _shared$defaultMateri.source; // 获取ice物料源及对应的index


      var iceMaterial = this.materialsValue.find(function (material, index) {
        if (material.source === source) {
          iceIndex = index;
          return true;
        }

        return false;
      });
      return {
        iceMaterial: iceMaterial,
        iceIndex: iceIndex
      };
    } // 开始拖拽排序区块

  }, {
    key: "removeBlock",
    // 删除 Block
    value: function removeBlock(orderIndex) {
      this.selected.splice(orderIndex, 1);
    } // 修改 block 别名

  }, {
    key: "blockModifyAlias",
    value: function blockModifyAlias(orderIndex, newAlias) {
      var _this4 = this;

      this.selected = this.selected.map(function (block, index) {
        if (index === orderIndex) {
          block.alias = _this4.formatBlockName(newAlias);
        }

        return block;
      });
    }
  }, {
    key: "pageNameConflict",
    value: function pageNameConflict(pageName) {
      var blocksNames = this.selected.map(function (b) {
        return b.alias.toLowerCase();
      }); // 已经存在的 block 名称

      var confilict = '';

      if (blocksNames.includes(pageName.toLowerCase())) {
        confilict = pageName;
      }

      return confilict;
    }
  }, {
    key: "setCurrentTabKey",
    value: function setCurrentTabKey(key) {
      this.currentTabKey = key;
    }
  }, {
    key: "materials",
    get: function get() {
      return this.materialsValue;
    }
  }]);

  return Blocks;
}(), blocks_temp), (blocks_descriptor = blocks_applyDecoratedDescriptor(blocks_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), blocks_descriptor2 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "isLoading", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return true;
  }
}), blocks_descriptor3 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "keywords", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), blocks_descriptor4 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "originKeywords", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), blocks_descriptor5 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "materialsValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), blocks_descriptor6 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "originBlocks", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), blocks_descriptor7 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "categories", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), blocks_descriptor8 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "selected", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), _descriptor9 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "isSorting", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor10 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "showModal", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor11 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "previewBlock", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor12 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "currentTabKey", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '0';
  }
}), blocks_applyDecoratedDescriptor(blocks_class.prototype, "reset", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "reset"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "fetch", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "fetch"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "fetchSuccess", [blocks_dec], Object.getOwnPropertyDescriptor(blocks_class.prototype, "fetchSuccess"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "addBlockGroupsMaterial", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "addBlockGroupsMaterial"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "fetchFailed", [_dec2], Object.getOwnPropertyDescriptor(blocks_class.prototype, "fetchFailed"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "materials", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "materials"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "search", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "search"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "searchDelay", [_dec3], Object.getOwnPropertyDescriptor(blocks_class.prototype, "searchDelay"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "open", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "open"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "close", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "close"), blocks_class.prototype), _descriptor13 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "openModal", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this5 = this;

    return function (block) {
      _this5.showModal = true;
      _this5.previewBlock = block;
    };
  }
}), _descriptor14 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "closeModal", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this6 = this;

    return function () {
      _this6.showModal = false;
    };
  }
}), blocks_applyDecoratedDescriptor(blocks_class.prototype, "addBlock", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "addBlock"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "addCustomBlock", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "addCustomBlock"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "getIceMaterial", [_dec4], Object.getOwnPropertyDescriptor(blocks_class.prototype, "getIceMaterial"), blocks_class.prototype), _descriptor15 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "onSortStart", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this7 = this;

    return function () {
      _this7.isSorting = true;
    };
  }
}), _descriptor16 = blocks_applyDecoratedDescriptor(blocks_class.prototype, "onSortEnd", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this8 = this;

    return function (_ref) {
      var oldIndex = _ref.oldIndex,
          newIndex = _ref.newIndex;
      _this8.isSorting = false;
      _this8.selected = arrayMove(_this8.selected, oldIndex, newIndex);
    };
  }
}), blocks_applyDecoratedDescriptor(blocks_class.prototype, "removeBlock", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "removeBlock"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "blockModifyAlias", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "blockModifyAlias"), blocks_class.prototype), blocks_applyDecoratedDescriptor(blocks_class.prototype, "setCurrentTabKey", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(blocks_class.prototype, "setCurrentTabKey"), blocks_class.prototype)), blocks_class));

function arrayMove(arr, previousIndex, newIndex) {
  var array = arr.slice(0);

  if (newIndex >= array.length) {
    var k = newIndex - array.length;

    while (k-- + 1) {
      array.push(undefined);
    }
  }

  array.splice(newIndex, 0, array.splice(previousIndex, 1)[0]);
  return array;
}

/* harmony default export */ var stores_blocks = (new blocks_Blocks());
// EXTERNAL MODULE: ./node_modules/uuid/v1.js
var v1 = __webpack_require__(167);
var v1_default = /*#__PURE__*/__webpack_require__.n(v1);

// EXTERNAL MODULE: ./renderer/src/packages/theme-colors/index.js
var theme_colors = __webpack_require__(170);

// CONCATENATED MODULE: ./renderer/src/stores/custom-scaffold.js
var custom_scaffold_class, custom_scaffold_descriptor, custom_scaffold_descriptor2, custom_scaffold_descriptor3, custom_scaffold_descriptor4, custom_scaffold_temp;

function custom_scaffold_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function custom_scaffold_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function custom_scaffold_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function custom_scaffold_createClass(Constructor, protoProps, staticProps) { if (protoProps) custom_scaffold_defineProperties(Constructor.prototype, protoProps); if (staticProps) custom_scaffold_defineProperties(Constructor, staticProps); return Constructor; }

function custom_scaffold_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function custom_scaffold_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }




/**
 * 自定义脚手架状态管理
 */

var RECENT_KEY = 'scaffold:recentV2';
var DEFAULT_SCAFFOLD = {};
var DEFAULT_LAYOUT_CONFIG = {
  // 模板名称
  name: 'app',
  // 模板类型: layout、redux、mobx
  type: 'redux',
  // 下载到指定的目录
  directory: __dirname,
  // 是否启用自定义模板名称
  enableName: false,
  // 是否启用主题
  enableTheme: true,
  // 布局方式: fluid-layout、boxed-layout
  layout: 'fluid-layout',
  // 主题配置
  themeConfig: {
    theme: 'dark',
    primaryColor: '#3080FE',
    secondaryColor: '#FFC107'
  },
  // 是否启用 Header
  header: {
    position: 'static',
    width: 'full-width',
    enabled: true
  },
  // 是否启用 Aside
  aside: {
    position: 'embed-fixed',
    mode: 'vertical',
    width: 200,
    collapsed: false,
    enabled: true
  },
  // 是否启用 Footer
  footer: {
    position: 'fixed',
    width: 'full-width',
    enabled: true
  },
  // Redux 配置
  redux: {
    enabled: true,
    // 生成基础的 redux 配置文件，默认会同步路由信息到 redux store
    registerLoginModule: false,
    // 生成注册登录的示例代码
    authorityModule: false,
    // 生成权限管理的示例代码
    mockModule: false // 生成简单的 Mock 示例代码

  },
  // Mobx 配置
  mobx: {}
};
var custom_scaffold_CustomScaffold = (custom_scaffold_class = (custom_scaffold_temp =
/*#__PURE__*/
function () {
  // 将用户的模板操作记录保存下来
  function CustomScaffold() {
    custom_scaffold_classCallCheck(this, CustomScaffold);

    this.editScaffoldConigId = null;

    custom_scaffold_initializerDefineProperty(this, "visible", custom_scaffold_descriptor, this);

    custom_scaffold_initializerDefineProperty(this, "scaffoldValue", custom_scaffold_descriptor2, this);

    custom_scaffold_initializerDefineProperty(this, "layoutConfigValue", custom_scaffold_descriptor3, this);

    custom_scaffold_initializerDefineProperty(this, "scaffoldConfigStoresValue", custom_scaffold_descriptor4, this);

    this.title = '新建自定义模板';
    var scaffoldConfigStores = localStorage.getItem(RECENT_KEY);
    var scaffoldConfigStoresFilterById = [];

    try {
      scaffoldConfigStores = JSON.parse(scaffoldConfigStores); // 以 id 作为存储键值，不存在则清空

      scaffoldConfigStoresFilterById = scaffoldConfigStores.filter(function (scaffoldConfig) {
        return Boolean(scaffoldConfig.id);
      });
    } catch (e) {} // eslint-disable-line no-empty


    if (Array.isArray(scaffoldConfigStoresFilterById)) {
      this.scaffoldConfigStores = scaffoldConfigStoresFilterById;

      if (scaffoldConfigStoresFilterById.length !== scaffoldConfigStores) {
        this.saveCustomScaffoldConfigToStores();
      }
    }
  }

  custom_scaffold_createClass(CustomScaffold, [{
    key: "reset",
    value: function reset() {
      this.editScaffoldConigId = null;
      this.scaffoldValue = DEFAULT_SCAFFOLD;
      this.layoutConfigValue = DEFAULT_LAYOUT_CONFIG;
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.visible = !this.visible;
    }
  }, {
    key: "close",
    value: function close() {
      this.visible = false;
    }
  }, {
    key: "open",
    value: function open() {
      this.visible = true;
    }
  }, {
    key: "setLayoutConfig",
    value: function setLayoutConfig(value) {
      this.layoutConfigValue = value;
    }
  }, {
    key: "saveCustomScaffoldConfigToStores",
    value: function saveCustomScaffoldConfigToStores() {
      localStorage.setItem(RECENT_KEY, JSON.stringify(this.scaffoldConfigStores));
    }
    /**
     * 添加模板数据到记录中
     * @param {Object} scaffoldConfig 模板数据
     */

  }, {
    key: "saveCustomScaffoldConfig",
    value: function saveCustomScaffoldConfig(scaffoldConfig) {
      var _this = this;

      return new Promise(function (resolve) {
        var scaffoldConfigStores = _this.scaffoldConfigStores;

        if (_this.editScaffoldConigId) {
          scaffoldConfigStores = scaffoldConfigStores.map(function (s) {
            if (s.id === _this.editScaffoldConigId) {
              scaffoldConfig.id = _this.editScaffoldConigId;
              return scaffoldConfig;
            }

            return s;
          });
        } else {
          scaffoldConfig.id = v1_default()();
          scaffoldConfigStores.push(scaffoldConfig);
        }

        _this.scaffoldConfigStores = scaffoldConfigStores;

        _this.saveCustomScaffoldConfigToStores();

        resolve();
      });
    }
    /**
     * 删除模板数据到记录项
     * @param {Number} 模板索引值
     */

  }, {
    key: "removeScaffoldConfigByIndex",
    value: function removeScaffoldConfigByIndex(index) {
      this.scaffoldConfigStores = this.scaffoldConfigStores.filter(function (a, key) {
        return key !== index;
      });
      this.saveCustomScaffoldConfigToStores();
    }
    /**
     * 编辑模板数据到记录项
     * @param {Number} 模板索引值
     */

  }, {
    key: "editScaffoldConfigByIndex",
    value: function editScaffoldConfigByIndex(index) {
      var editScaffoldConfig = this.scaffoldConfigStores.find(function (scaffoldConfig, k) {
        return k === index;
      });
      this.editScaffoldConigId = editScaffoldConfig.id;
      this.setLayoutConfig(editScaffoldConfig.layoutConfig);
      this.toggle();
    }
  }, {
    key: "scaffoldConfigStores",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.scaffoldConfigStoresValue);
    },
    set: function set(value) {
      this.scaffoldConfigStoresValue = value;
    }
  }, {
    key: "scaffold",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.scaffoldValue);
    }
  }, {
    key: "layoutConfig",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.layoutConfigValue);
    }
  }, {
    key: "primaryColors",
    get: function get() {
      var primaryColor = this.layoutConfig.themeConfig.primaryColor;
      return Object(theme_colors["calcPrimaryColors"])(primaryColor);
    }
  }, {
    key: "secondaryColors",
    get: function get() {
      var secondaryColor = this.layoutConfig.themeConfig.secondaryColor;
      return Object(theme_colors["calcSecondaryColor"])(secondaryColor);
    }
  }]);

  return CustomScaffold;
}(), custom_scaffold_temp), (custom_scaffold_descriptor = custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), custom_scaffold_descriptor2 = custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "scaffoldValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return DEFAULT_SCAFFOLD;
  }
}), custom_scaffold_descriptor3 = custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "layoutConfigValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return DEFAULT_LAYOUT_CONFIG;
  }
}), custom_scaffold_descriptor4 = custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "scaffoldConfigStoresValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "scaffoldConfigStores", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "scaffoldConfigStores"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "scaffold", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "scaffold"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "layoutConfig", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "layoutConfig"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "primaryColors", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "primaryColors"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "secondaryColors", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "secondaryColors"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "reset", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "reset"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "toggle", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "toggle"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "close", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "close"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "open", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "open"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "setLayoutConfig", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "setLayoutConfig"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "saveCustomScaffoldConfig", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "saveCustomScaffoldConfig"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "removeScaffoldConfigByIndex", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "removeScaffoldConfigByIndex"), custom_scaffold_class.prototype), custom_scaffold_applyDecoratedDescriptor(custom_scaffold_class.prototype, "editScaffoldConfigByIndex", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_scaffold_class.prototype, "editScaffoldConfigByIndex"), custom_scaffold_class.prototype)), custom_scaffold_class);
/* harmony default export */ var custom_scaffold = (new custom_scaffold_CustomScaffold());
// CONCATENATED MODULE: ./renderer/src/stores/extensions.js
var extensions_class, extensions_descriptor, extensions_descriptor2, extensions_temp;

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function extensions_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function extensions_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function extensions_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function extensions_createClass(Constructor, protoProps, staticProps) { if (protoProps) extensions_defineProperties(Constructor.prototype, protoProps); if (staticProps) extensions_defineProperties(Constructor, staticProps); return Constructor; }

function extensions_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function extensions_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }

/**
 * 插件内容管理
 * 数据存储在 localStorage 里，通过插件的启用切换在项目面板中展示
 */



var extensions_settings = services["a" /* default */].settings;
var extensions_Extensions = (extensions_class = (extensions_temp =
/*#__PURE__*/
function () {
  function Extensions() {
    var _this = this;

    extensions_classCallCheck(this, Extensions);

    extensions_initializerDefineProperty(this, "orderByNameValue", extensions_descriptor, this);

    extensions_initializerDefineProperty(this, "isSorting", extensions_descriptor2, this);

    this.list = [{
      name: 'pages',
      cover: __webpack_require__(501),
      // 1x1 的封面图
      title: '页面列表',
      description: '展示当前项目中 pages 目录下的所有页面，新建页面快捷入口，支持对已有页面下载区块。',
      author: 'ICE TEAM',
      version: '1.0.0'
    }, {
      name: 'layout-builder',
      cover: __webpack_require__(502),
      // 1x1 的封面图
      title: '布局列表',
      description: '展示当前项目中 layouts 目录下的所有布局。',
      author: 'ICE TEAM',
      extra: '仅支持 react 项目',
      version: '1.0.0',
      conditions: {
        libraryType: 'react'
      }
    }, {
      name: 'proxies',
      cover: __webpack_require__(503),
      // 1x1 的封面图
      title: '代理配置',
      description: '自定义代理规则，支持多种规则并存、规则切换，设置代理后重启应用，项目中的 GET、POST 请求命中规则时则被代理到对应的地址。代理地址注意需要支持 CORS 跨域请求哦。',
      author: 'ICE TEAM',
      version: '1.0.0',
      extra: 'cli 需 ice-scripts',
      conditions: {
        libraryType: 'react',
        applicationType: 'ice'
      }
    }, {
      name: 'todo',
      cover: __webpack_require__(504),
      // 1x1 的封面图
      title: 'TODO',
      description: '收集项目源代码中的 TODO、FIXME等注释信息，提醒您项目中还有什么工作没有完成。',
      author: 'ICE TEAM',
      version: '1.0.0'
    }, {
      name: 'dependencies',
      cover: __webpack_require__(505),
      // 1x1 的封面图
      title: '依赖管理',
      description: '探测项目中依赖是否已安装，以及依赖安装的版本，支持快捷安装项目依赖；支持一键更新依赖的操作，当依赖出现新版时可用。',
      author: 'ICE TEAM',
      version: '1.0.0'
    }, {
      name: 'assets',
      cover: __webpack_require__(232),
      // 1x1 的封面图
      title: '构建结果',
      description: '展示项目的构建结果，文件名、文件大小等信息。',
      author: 'ICE TEAM',
      version: '1.0.0'
    }];
    var gitConfig = {
      name: 'git',
      cover: __webpack_require__(233),
      // 1x1 的封面图
      title: 'Git 面板',
      description: '关联项目的 git 仓库',
      author: 'ICE TEAM',
      version: '1.0.0'
    };
    var isAlibaba = extensions_settings.get('isAlibaba');

    if (isAlibaba) {
      this.list.unshift({
        name: 'def',
        cover: __webpack_require__(233),
        // 1x1 的封面图
        title: 'DEF 前端发布',
        description: '支持阿里内网 DEF 发布构建流程，发布到日常以及线上。',
        author: 'ICE TEAM',
        version: '1.0.0'
      }, gitConfig);
    } else {
      this.list.push({
        name: 'aliyun',
        cover: __webpack_require__(232),
        // 1x1 的封面图
        title: '阿里云 OSS',
        description: '将项目构建结果上传到阿里云 OSS。',
        author: 'ICE TEAM',
        version: '1.0.0'
      }, gitConfig);
    }

    var checked = {};
    this.list.forEach(function (extension) {
      var extensionStorageValue = localStorage.getItem("extension:".concat(extension.name));

      if (extensionStorageValue && typeof extensionStorageValue === 'string') {
        checked[extension.name] = extensionStorageValue === 'true';
      } else {
        // 默认开启
        checked[extension.name] = true;
      }
    });
    this.checked = Object(external_window_mobx_["observable"])(checked);
    this.refreshExtensions();
    var orderByNameWatcher = Object(external_window_mobx_["computed"])(function () {
      return _this.orderByName;
    });
    Object(external_window_mobx_["autorun"])(function () {
      var orderByName = orderByNameWatcher.get();
      localStorage.setItem('extensions:order', JSON.stringify(orderByName));
    });
    stores_projects["a" /* default */].on('change', function () {
      _this.refreshExtensions();
    });
  }

  extensions_createClass(Extensions, [{
    key: "refreshExtensions",
    value: function refreshExtensions() {
      this.orderByNameValue = this.sortByUserStore(this.getEnableAndAvailableNames());
    }
  }, {
    key: "switch",
    value: function _switch(name, value) {
      this.checked[name] = value;
      this.refreshExtensions();
      localStorage.setItem("extension:".concat(name), value);
    }
  }, {
    key: "sortStart",
    value: function sortStart() {
      this.isSorting = true;
    }
  }, {
    key: "sortEnd",
    value: function sortEnd() {
      this.isSorting = false;
    }
  }, {
    key: "checkEnable",
    value: function checkEnable(_ref) {
      var name = _ref.name;

      if (this.checked[name]) {
        return true;
      }

      return false;
    }
  }, {
    key: "checkAvailable",
    value: function checkAvailable(_ref2) {
      var name = _ref2.name,
          other = _objectWithoutProperties(_ref2, ["name"]);

      var extension = this.list.find(function (item) {
        return item.name === name;
      });

      if ('conditions' in extension) {
        return Object.keys(extension.conditions).every(function (key) {
          return extension.conditions[key] === other[key];
        });
      }

      return true;
    }
  }, {
    key: "getEnableAndAvailableNames",
    value: function getEnableAndAvailableNames() {
      var _this2 = this;

      var allNames = this.list.map(function (e) {
        return e.name;
      });
      var enableNames = allNames.filter(function (name) {
        return _this2.checkEnable({
          name: name
        });
      });
      var currentProject = stores_projects["a" /* default */].currentProject;

      if (currentProject) {
        var libraryType = currentProject.getLibraryType();
        var applicationType = currentProject.getApplicationType();
        var availableNames = enableNames.filter(function (name) {
          return _this2.checkAvailable({
            name: name,
            libraryType: libraryType,
            applicationType: applicationType
          });
        });
        return availableNames;
      }

      return enableNames;
    }
  }, {
    key: "sortByUserStore",
    value: function sortByUserStore() {
      var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var extensionsOrder = localStorage.getItem('extensions:order');

      if (extensionsOrder) {
        try {
          extensionsOrder = JSON.parse(extensionsOrder);
        } catch (e) {} // eslint-disable-line no-empty

      }

      if (!(Array.isArray(extensionsOrder) && extensionsOrder.length > 0)) {
        extensionsOrder = [];
      } // 保留用户的排序


      var keepOrder = extensionsOrder.filter(function (n) {
        return names.includes(n);
      }); // 多余的排序

      var excludeOrder = names.filter(function (n) {
        return !keepOrder.includes(n);
      }); // 调整 Git 插件顺序，开启 Git 插件之后保证其在 Def 面板之后，不存在则跳过。

      if (excludeOrder.includes('git')) {
        if (keepOrder.includes('def')) {
          keepOrder.splice(keepOrder.indexOf('def') + 1, 0, 'git');
          excludeOrder.splice(excludeOrder.indexOf('git'), 1);
        } else if (excludeOrder.includes('def')) {
          excludeOrder.splice(excludeOrder.indexOf('git'), 1);
          excludeOrder.splice(keepOrder.indexOf('def') + 1, 0, 'git');
        }
      }

      return keepOrder.concat(excludeOrder);
    }
  }, {
    key: "orderByName",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.orderByNameValue);
    },
    set: function set(value) {
      this.orderByNameValue = value;
    }
  }]);

  return Extensions;
}(), extensions_temp), (extensions_descriptor = extensions_applyDecoratedDescriptor(extensions_class.prototype, "orderByNameValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), extensions_descriptor2 = extensions_applyDecoratedDescriptor(extensions_class.prototype, "isSorting", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), extensions_applyDecoratedDescriptor(extensions_class.prototype, "orderByName", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(extensions_class.prototype, "orderByName"), extensions_class.prototype), extensions_applyDecoratedDescriptor(extensions_class.prototype, "refreshExtensions", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(extensions_class.prototype, "refreshExtensions"), extensions_class.prototype), extensions_applyDecoratedDescriptor(extensions_class.prototype, "switch", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(extensions_class.prototype, "switch"), extensions_class.prototype), extensions_applyDecoratedDescriptor(extensions_class.prototype, "sortStart", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(extensions_class.prototype, "sortStart"), extensions_class.prototype), extensions_applyDecoratedDescriptor(extensions_class.prototype, "sortEnd", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(extensions_class.prototype, "sortEnd"), extensions_class.prototype)), extensions_class);
/* harmony default export */ var extensions = (new extensions_Extensions());
// CONCATENATED MODULE: ./renderer/src/stores/installer.js
var installer_class, installer_descriptor, installer_descriptor2, installer_descriptor3, installer_descriptor4, installer_temp;

function installer_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function installer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function installer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function installer_createClass(Constructor, protoProps, staticProps) { if (protoProps) installer_defineProperties(Constructor.prototype, protoProps); if (staticProps) installer_defineProperties(Constructor, staticProps); return Constructor; }

function installer_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function installer_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }


/**
 * 安装路径统一从currentProject中获取
 */

var Installer = (installer_class = (installer_temp =
/*#__PURE__*/
function () {
  function Installer() {
    installer_classCallCheck(this, Installer);

    installer_initializerDefineProperty(this, "deps", installer_descriptor, this);

    installer_initializerDefineProperty(this, "installing", installer_descriptor2, this);

    installer_initializerDefineProperty(this, "type", installer_descriptor3, this);

    installer_initializerDefineProperty(this, "visible", installer_descriptor4, this);
  }

  installer_createClass(Installer, [{
    key: "open",
    value: function open() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'dependencies';
      this.type = type;
      this.deps = '';
      this.visible = true;
    }
  }, {
    key: "close",
    value: function close() {
      this.visible = false;
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.visible = !this.visible;
    }
  }]);

  return Installer;
}(), installer_temp), (installer_descriptor = installer_applyDecoratedDescriptor(installer_class.prototype, "deps", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), installer_descriptor2 = installer_applyDecoratedDescriptor(installer_class.prototype, "installing", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), installer_descriptor3 = installer_applyDecoratedDescriptor(installer_class.prototype, "type", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'dependencies';
  }
}), installer_descriptor4 = installer_applyDecoratedDescriptor(installer_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), installer_applyDecoratedDescriptor(installer_class.prototype, "open", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(installer_class.prototype, "open"), installer_class.prototype), installer_applyDecoratedDescriptor(installer_class.prototype, "close", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(installer_class.prototype, "close"), installer_class.prototype), installer_applyDecoratedDescriptor(installer_class.prototype, "toggle", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(installer_class.prototype, "toggle"), installer_class.prototype)), installer_class);
/* harmony default export */ var installer = (new Installer());
// EXTERNAL MODULE: external "events"
var external_events_ = __webpack_require__(32);
var external_events_default = /*#__PURE__*/__webpack_require__.n(external_events_);

// EXTERNAL MODULE: ./renderer/src/lib/project-utils.js
var project_utils = __webpack_require__(46);

// CONCATENATED MODULE: ./renderer/src/stores/progress.js
var progress_class, progress_descriptor, progress_descriptor2, progress_descriptor3, progress_descriptor4, progress_descriptor5, progress_descriptor6, progress_descriptor7, progress_descriptor8, progress_descriptor9, progress_descriptor10, progress_descriptor11, progress_temp;

function progress_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function progress_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function progress_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function progress_createClass(Constructor, protoProps, staticProps) { if (protoProps) progress_defineProperties(Constructor.prototype, protoProps); if (staticProps) progress_defineProperties(Constructor, staticProps); return Constructor; }

function progress_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function progress_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }


var Progress = (progress_class = (progress_temp =
/*#__PURE__*/
function () {
  function Progress() {
    progress_classCallCheck(this, Progress);

    progress_initializerDefineProperty(this, "statusText", progress_descriptor, this);

    progress_initializerDefineProperty(this, "visible", progress_descriptor2, this);

    progress_initializerDefineProperty(this, "showProgress", progress_descriptor3, this);

    progress_initializerDefineProperty(this, "showTerminal", progress_descriptor4, this);

    progress_initializerDefineProperty(this, "progressValue", progress_descriptor5, this);

    progress_initializerDefineProperty(this, "progressSpeedValue", progress_descriptor6, this);

    progress_initializerDefineProperty(this, "progressRemainingValue", progress_descriptor7, this);

    progress_initializerDefineProperty(this, "progressSection", progress_descriptor8, this);

    progress_initializerDefineProperty(this, "SectionCount", progress_descriptor9, this);

    progress_initializerDefineProperty(this, "currentCount", progress_descriptor10, this);

    progress_initializerDefineProperty(this, "handleProgressFunc", progress_descriptor11, this);
  }

  progress_createClass(Progress, [{
    key: "start",
    // 每段长度
    value: function start() {
      var showProgress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.visible = true;
      this.showProgress = showProgress;
    }
  }, {
    key: "end",
    value: function end() {
      this.reset();
    }
  }, {
    key: "setStatusText",
    value: function setStatusText(text) {
      this.statusText = text;
    }
  }, {
    key: "setSectionCount",
    value: function setSectionCount(count) {
      this.SectionCount = count; // 几段

      this.progressSection = Number((100 / count).toFixed(1)); // 每段长度
    }
  }, {
    key: "setShowTerminal",
    value: function setShowTerminal(isShow) {
      this.showTerminal = isShow;
    }
  }, {
    key: "setShowProgress",
    value: function setShowProgress(isShow) {
      this.showProgress = isShow;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.statusText = '';
      this.visible = false;
      this.showProgress = false;
      this.showTerminal = false;
      this.progressValue = 0; // 进度

      this.progressSpeedValue = 0; // 下载速度

      this.progressRemainingValue = 0; // 剩余时间

      this.progressSection = 100;
      this.sectionCount = 1;
      this.currentCount = 1;
    } // @see https://www.npmjs.com/package/request-progress

    /**
      {
        percent: 0.5, // Overall percent (between 0 to 1)
        speed: 554732, // The download speed in bytes/sec
        size:
        {
          total: 90044871, // The total payload size in bytes
          transferred: 27610959 // The transferred payload size in bytes
        },
        time:
        {
          elapsed: 36.235, // The total elapsed seconds since the start (3 decimals)
          remaining: 81.403 // The remaining seconds to finish (3 decimals)
        }
      }
     */
    // 多区块下载合并成一个进度的逻辑。

  }, {
    key: "progress",
    get: function get() {
      return Number(this.progressValue.toFixed(1));
    }
  }, {
    key: "progressSpeed",
    get: function get() {
      return Math.floor(this.progressSpeedValue / 1024) || '-';
    }
  }, {
    key: "progressRemaining",
    get: function get() {
      return Math.floor(this.progressRemainingValue) || '-';
    }
  }]);

  return Progress;
}(), progress_temp), (progress_descriptor = progress_applyDecoratedDescriptor(progress_class.prototype, "statusText", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), progress_descriptor2 = progress_applyDecoratedDescriptor(progress_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), progress_descriptor3 = progress_applyDecoratedDescriptor(progress_class.prototype, "showProgress", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), progress_descriptor4 = progress_applyDecoratedDescriptor(progress_class.prototype, "showTerminal", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), progress_descriptor5 = progress_applyDecoratedDescriptor(progress_class.prototype, "progressValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), progress_descriptor6 = progress_applyDecoratedDescriptor(progress_class.prototype, "progressSpeedValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), progress_descriptor7 = progress_applyDecoratedDescriptor(progress_class.prototype, "progressRemainingValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), progress_descriptor8 = progress_applyDecoratedDescriptor(progress_class.prototype, "progressSection", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 100;
  }
}), progress_descriptor9 = progress_applyDecoratedDescriptor(progress_class.prototype, "SectionCount", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 1;
  }
}), progress_descriptor10 = progress_applyDecoratedDescriptor(progress_class.prototype, "currentCount", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 1;
  }
}), progress_applyDecoratedDescriptor(progress_class.prototype, "start", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(progress_class.prototype, "start"), progress_class.prototype), progress_applyDecoratedDescriptor(progress_class.prototype, "end", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(progress_class.prototype, "end"), progress_class.prototype), progress_applyDecoratedDescriptor(progress_class.prototype, "setStatusText", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(progress_class.prototype, "setStatusText"), progress_class.prototype), progress_applyDecoratedDescriptor(progress_class.prototype, "setSectionCount", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(progress_class.prototype, "setSectionCount"), progress_class.prototype), progress_applyDecoratedDescriptor(progress_class.prototype, "setShowTerminal", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(progress_class.prototype, "setShowTerminal"), progress_class.prototype), progress_applyDecoratedDescriptor(progress_class.prototype, "setShowProgress", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(progress_class.prototype, "setShowProgress"), progress_class.prototype), progress_applyDecoratedDescriptor(progress_class.prototype, "progress", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(progress_class.prototype, "progress"), progress_class.prototype), progress_applyDecoratedDescriptor(progress_class.prototype, "progressSpeed", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(progress_class.prototype, "progressSpeed"), progress_class.prototype), progress_applyDecoratedDescriptor(progress_class.prototype, "progressRemaining", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(progress_class.prototype, "progressRemaining"), progress_class.prototype), progress_applyDecoratedDescriptor(progress_class.prototype, "reset", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(progress_class.prototype, "reset"), progress_class.prototype), progress_descriptor11 = progress_applyDecoratedDescriptor(progress_class.prototype, "handleProgressFunc", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this = this;

    return function () {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (state.percent) {
        if (state.percent >= 1) {
          if (_this.SectionCount === _this.currentCount) {
            _this.progressValue = 100;
            _this.progressSpeedValue = 0;
            _this.progressRemainingValue = 0;
          } else {
            _this.currentCount++;
          }
        } else if (state.percent > 0) {
          _this.progressValue = Number(state.percent) * _this.progressSection + (_this.currentCount - 1) * _this.progressSection;
          _this.progressSpeedValue = state.speed || 0;
          _this.progressRemainingValue = state.time && state.time.remaining || 0;
        }
      }
    };
  }
})), progress_class);
/* harmony default export */ var progress = (new Progress());
// EXTERNAL MODULE: ./renderer/src/datacenter/scanLayout.js
var scanLayout = __webpack_require__(234);

// CONCATENATED MODULE: ./renderer/src/stores/newpage.js
var newpage_dec, newpage_dec2, newpage_class, newpage_descriptor, newpage_descriptor2, newpage_descriptor3, newpage_descriptor4, newpage_descriptor5, newpage_descriptor6, newpage_descriptor7, newpage_descriptor8, newpage_descriptor9, newpage_temp;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function newpage_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function newpage_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function newpage_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function newpage_createClass(Constructor, protoProps, staticProps) { if (protoProps) newpage_defineProperties(Constructor.prototype, protoProps); if (staticProps) newpage_defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function newpage_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function newpage_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }





 // store



 // useStrict(true); // 严格模式，只能内部修改值
// tog 下面这个配置应该移动出来单独存放
// 由于快速修复线上 bug 等正式版将其移走
// XXX 不在白名单里的 Layout 直接返回

/**
 * 新建页面
 */

var newpage_NewPage = (newpage_dec = external_window_mobx_["action"].bound, newpage_dec2 = external_window_mobx_["action"].bound, (newpage_class = (newpage_temp =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(NewPage, _EventEmitter);

  // 所有 layouts
  // 当前选中的 layout
  // 控制弹窗展示
  // 控制 page 保存 dialog 的显示
  // 用于控制 pageConfig 确定按钮 loading 状态
  // 新建页面过程中的事件名
  function NewPage() {
    var _this;

    newpage_classCallCheck(this, NewPage);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewPage).call(this));

    newpage_initializerDefineProperty(_this, "layouts", newpage_descriptor, _assertThisInitialized(_assertThisInitialized(_this)));

    newpage_initializerDefineProperty(_this, "loading", newpage_descriptor2, _assertThisInitialized(_assertThisInitialized(_this)));

    newpage_initializerDefineProperty(_this, "currentLayout", newpage_descriptor3, _assertThisInitialized(_assertThisInitialized(_this)));

    newpage_initializerDefineProperty(_this, "visible", newpage_descriptor4, _assertThisInitialized(_assertThisInitialized(_this)));

    newpage_initializerDefineProperty(_this, "savePageVisible", newpage_descriptor5, _assertThisInitialized(_assertThisInitialized(_this)));

    newpage_initializerDefineProperty(_this, "isCreatingValue", newpage_descriptor6, _assertThisInitialized(_assertThisInitialized(_this)));

    newpage_initializerDefineProperty(_this, "createProcess", newpage_descriptor7, _assertThisInitialized(_assertThisInitialized(_this)));

    newpage_initializerDefineProperty(_this, "createProcessEventName", newpage_descriptor8, _assertThisInitialized(_assertThisInitialized(_this)));

    newpage_initializerDefineProperty(_this, "progressVisible", newpage_descriptor9, _assertThisInitialized(_assertThisInitialized(_this)));

    external_electron_["ipcRenderer"].on('processTracking', function (event, process, eventName) {
      progress.setStatusText(process);
      progress.setShowTerminal(eventName === 'installBlockDeps');
    });
    external_electron_["ipcRenderer"].on('progressVisible', function (event, visible) {
      progress.setShowProgress(visible);
    });
    return _this;
  }

  newpage_createClass(NewPage, [{
    key: "openSave",
    value: function openSave() {
      this.savePageVisible = true;
    }
  }, {
    key: "closeSave",
    value: function closeSave() {
      this.savePageVisible = false;
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (!this.targetPath) {
        logger["a" /* default */].error(new Error('新建页面未设置 targetPath'));
      } else {
        this.visible = !this.visible; // 每次展开更新数据

        if (this.visible) {
          this.reset();
          this.fetch();
        }
      }
    }
  }, {
    key: "fetch",
    value: function fetch() {
      var destDir = stores_projects["a" /* default */].currentProject.clientSrcPath;
      this.loading = true;
      Promise.all([Object(scanLayout["a" /* default */])({
        targetPath: destDir
      }), Object(project_utils["f" /* scanPages */])(destDir)]).then(this.fetchSuccess).catch(this.fetchFailed);
    } // fetch success 回调

  }, {
    key: "fetchSuccess",
    value: function fetchSuccess(_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          layouts = _ref2[0],
          pages = _ref2[1];

      var projectPkgData = stores_projects["a" /* default */].currentProject.getPkgData();
      logger["a" /* default */].info('scaned layouts', layouts);
      var scaffoldConfig = projectPkgData && projectPkgData.scaffoldConfig || {};
      logger["a" /* default */].info('scaffoldConfig data', scaffoldConfig);
      var defaultLayout = scaffoldConfig.defaultLayout;
      var localLayouts = layouts.filter(function (n) {
        return n.localization;
      });
      logger["a" /* default */].info('localLayouts', localLayouts, defaultLayout);
      var currentLayout = layouts[0];

      if (Array.isArray(localLayouts) && localLayouts.length) {
        if (defaultLayout) {
          currentLayout = localLayouts.find(function (l) {
            return l.folderName === defaultLayout;
          }) || localLayouts[0];
        } else {
          currentLayout = localLayouts[0];
        }
      }

      this.layouts = layouts;
      this.currentLayout = currentLayout;
      this.pages = pages; // 获取页面数，用于生产页面时，默认的页面名

      this.loading = false;
    } // fetch failed 回调

  }, {
    key: "fetchFailed",
    value: function fetchFailed() {
      this.loading = false;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      logger["a" /* default */].info(args);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.pages = []; // 当前项目所有 page

      this.layouts = []; // 所有 layout 列表
    }
  }, {
    key: "setCurrentLayout",
    value: function setCurrentLayout(layout) {
      this.currentLayout = layout;
    }
  }, {
    key: "isCreating",
    get: function get() {
      return this.isCreatingValue;
    },
    set: function set(value) {
      this.isCreatingValue = value;
    }
  }, {
    key: "targetPath",
    get: function get() {
      return stores_projects["a" /* default */].currentProject.clientPath;
    }
  }]);

  return NewPage;
}(external_events_default.a), newpage_temp), (newpage_descriptor = newpage_applyDecoratedDescriptor(newpage_class.prototype, "layouts", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), newpage_descriptor2 = newpage_applyDecoratedDescriptor(newpage_class.prototype, "loading", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return true;
  }
}), newpage_descriptor3 = newpage_applyDecoratedDescriptor(newpage_class.prototype, "currentLayout", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), newpage_descriptor4 = newpage_applyDecoratedDescriptor(newpage_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), newpage_descriptor5 = newpage_applyDecoratedDescriptor(newpage_class.prototype, "savePageVisible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), newpage_descriptor6 = newpage_applyDecoratedDescriptor(newpage_class.prototype, "isCreatingValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), newpage_descriptor7 = newpage_applyDecoratedDescriptor(newpage_class.prototype, "createProcess", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), newpage_descriptor8 = newpage_applyDecoratedDescriptor(newpage_class.prototype, "createProcessEventName", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), newpage_descriptor9 = newpage_applyDecoratedDescriptor(newpage_class.prototype, "progressVisible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), newpage_applyDecoratedDescriptor(newpage_class.prototype, "isCreating", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(newpage_class.prototype, "isCreating"), newpage_class.prototype), newpage_applyDecoratedDescriptor(newpage_class.prototype, "openSave", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(newpage_class.prototype, "openSave"), newpage_class.prototype), newpage_applyDecoratedDescriptor(newpage_class.prototype, "closeSave", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(newpage_class.prototype, "closeSave"), newpage_class.prototype), newpage_applyDecoratedDescriptor(newpage_class.prototype, "toggle", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(newpage_class.prototype, "toggle"), newpage_class.prototype), newpage_applyDecoratedDescriptor(newpage_class.prototype, "fetch", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(newpage_class.prototype, "fetch"), newpage_class.prototype), newpage_applyDecoratedDescriptor(newpage_class.prototype, "fetchSuccess", [newpage_dec], Object.getOwnPropertyDescriptor(newpage_class.prototype, "fetchSuccess"), newpage_class.prototype), newpage_applyDecoratedDescriptor(newpage_class.prototype, "fetchFailed", [newpage_dec2], Object.getOwnPropertyDescriptor(newpage_class.prototype, "fetchFailed"), newpage_class.prototype), newpage_applyDecoratedDescriptor(newpage_class.prototype, "reset", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(newpage_class.prototype, "reset"), newpage_class.prototype), newpage_applyDecoratedDescriptor(newpage_class.prototype, "setCurrentLayout", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(newpage_class.prototype, "setCurrentLayout"), newpage_class.prototype)), newpage_class));
/* harmony default export */ var newpage = (new newpage_NewPage());
// EXTERNAL MODULE: external "path"
var external_path_ = __webpack_require__(3);
var external_path_default = /*#__PURE__*/__webpack_require__.n(external_path_);

// EXTERNAL MODULE: ./renderer/src/lib/file-system.js
var file_system = __webpack_require__(181);

// CONCATENATED MODULE: ./renderer/src/stores/page-block-picker.js
var page_block_picker_class, page_block_picker_descriptor, page_block_picker_descriptor2, page_block_picker_temp;

function page_block_picker_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function page_block_picker_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function page_block_picker_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function page_block_picker_createClass(Constructor, protoProps, staticProps) { if (protoProps) page_block_picker_defineProperties(Constructor.prototype, protoProps); if (staticProps) page_block_picker_defineProperties(Constructor, staticProps); return Constructor; }

function page_block_picker_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function page_block_picker_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }



 // store


var page_block_picker_PageBlockPicker = (page_block_picker_class = (page_block_picker_temp =
/*#__PURE__*/
function () {
  function PageBlockPicker() {
    page_block_picker_classCallCheck(this, PageBlockPicker);

    page_block_picker_initializerDefineProperty(this, "visible", page_block_picker_descriptor, this);

    this.projectPath = '';
    this.componentsPath = '';
    this.blocksPath = '';
    this.existBlocks = [];

    page_block_picker_initializerDefineProperty(this, "downloading", page_block_picker_descriptor2, this);
  }

  page_block_picker_createClass(PageBlockPicker, [{
    key: "blockHasConflict",
    value: function blockHasConflict(selectedBlocks) {
      var blocksNames = this.existBlocks.map(function (n) {
        return n.toLowerCase();
      }); // 已经存在的 block 名称

      var confilict = ''; // eslint-disable-next-line no-restricted-syntax

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = selectedBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var block = _step.value;

          if (blocksNames.includes(block.alias.toLowerCase())) {
            confilict = block.alias;
            break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return confilict;
    }
  }, {
    key: "downloadStart",
    value: function downloadStart() {
      this.downloading = true;
    }
  }, {
    key: "downloadDone",
    value: function downloadDone() {
      this.downloading = false;
    }
    /**
     * 启动进度条
     */

  }, {
    key: "startProgress",
    value: function startProgress() {
      var showProgress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      progress.setStatusText('正在生成区块');
      progress.start(showProgress);
    }
    /**
     * 结束进度条
     */

  }, {
    key: "endProgress",
    value: function endProgress() {
      progress.setStatusText('区块创建完成');
      progress.end();
    }
  }, {
    key: "resetProgress",
    value: function resetProgress() {
      progress.reset();
    }
  }, {
    key: "open",
    value: function open(_ref) {
      var blocksPath = _ref.blocksPath,
          projectPath = _ref.projectPath,
          pageName = _ref.pageName;
      this.blocksPath = external_path_default.a.join(blocksPath, 'components');
      this.projectPath = projectPath;
      this.componentsPath = external_path_default.a.relative(this.projectPath, this.blocksPath);
      this.pageName = pageName;
      this.visible = true;
      this.downloading = false;
      this.lookupPage();
    }
  }, {
    key: "close",
    value: function close() {
      this.visible = false;
    }
  }, {
    key: "lookupPage",
    value: function lookupPage() {
      var components = Object(file_system["a" /* readdirSync */])(this.blocksPath);

      if (Array.isArray(components) && components.length > 0) {
        this.existBlocks = components;
      } else {
        this.existBlocks = [];
      }
    }
  }, {
    key: "isDownloading",
    get: function get() {
      return this.downloading === true;
    }
  }]);

  return PageBlockPicker;
}(), page_block_picker_temp), (page_block_picker_descriptor = page_block_picker_applyDecoratedDescriptor(page_block_picker_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), page_block_picker_descriptor2 = page_block_picker_applyDecoratedDescriptor(page_block_picker_class.prototype, "downloading", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), page_block_picker_applyDecoratedDescriptor(page_block_picker_class.prototype, "isDownloading", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(page_block_picker_class.prototype, "isDownloading"), page_block_picker_class.prototype), page_block_picker_applyDecoratedDescriptor(page_block_picker_class.prototype, "blockHasConflict", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(page_block_picker_class.prototype, "blockHasConflict"), page_block_picker_class.prototype), page_block_picker_applyDecoratedDescriptor(page_block_picker_class.prototype, "downloadStart", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(page_block_picker_class.prototype, "downloadStart"), page_block_picker_class.prototype), page_block_picker_applyDecoratedDescriptor(page_block_picker_class.prototype, "downloadDone", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(page_block_picker_class.prototype, "downloadDone"), page_block_picker_class.prototype), page_block_picker_applyDecoratedDescriptor(page_block_picker_class.prototype, "startProgress", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(page_block_picker_class.prototype, "startProgress"), page_block_picker_class.prototype), page_block_picker_applyDecoratedDescriptor(page_block_picker_class.prototype, "open", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(page_block_picker_class.prototype, "open"), page_block_picker_class.prototype), page_block_picker_applyDecoratedDescriptor(page_block_picker_class.prototype, "close", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(page_block_picker_class.prototype, "close"), page_block_picker_class.prototype), page_block_picker_applyDecoratedDescriptor(page_block_picker_class.prototype, "lookupPage", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(page_block_picker_class.prototype, "lookupPage"), page_block_picker_class.prototype)), page_block_picker_class);
/* harmony default export */ var page_block_picker = (new page_block_picker_PageBlockPicker());
// EXTERNAL MODULE: ./renderer/node_modules/@icedesign/base/lib/dialog/index.js
var dialog = __webpack_require__(24);
var dialog_default = /*#__PURE__*/__webpack_require__.n(dialog);

// EXTERNAL MODULE: ./node_modules/mkdirp/index.js
var mkdirp = __webpack_require__(80);
var mkdirp_default = /*#__PURE__*/__webpack_require__.n(mkdirp);

// EXTERNAL MODULE: ./renderer/node_modules/@icedesign/notification/lib/index.js
var lib = __webpack_require__(44);
var lib_default = /*#__PURE__*/__webpack_require__.n(lib);

// EXTERNAL MODULE: external "os"
var external_os_ = __webpack_require__(34);
var external_os_default = /*#__PURE__*/__webpack_require__.n(external_os_);

// EXTERNAL MODULE: ./node_modules/path-exists/index.js
var path_exists = __webpack_require__(35);
var path_exists_default = /*#__PURE__*/__webpack_require__.n(path_exists);

// EXTERNAL MODULE: ./renderer/src/components/dialog/index.js + 4 modules
var components_dialog = __webpack_require__(100);

// EXTERNAL MODULE: ./renderer/src/history.js
var src_history = __webpack_require__(38);

// CONCATENATED MODULE: ./renderer/src/stores/scaffold.js


var scaffold_class, scaffold_descriptor, scaffold_descriptor2, scaffold_descriptor3, scaffold_descriptor4, scaffold_descriptor5, scaffold_descriptor6, scaffold_descriptor7, scaffold_descriptor8, scaffold_descriptor9, scaffold_descriptor10, scaffold_descriptor11, scaffold_descriptor12, scaffold_descriptor13, scaffold_descriptor14, scaffold_temp;

function scaffold_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function scaffold_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function scaffold_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function scaffold_createClass(Constructor, protoProps, staticProps) { if (protoProps) scaffold_defineProperties(Constructor.prototype, protoProps); if (staticProps) scaffold_defineProperties(Constructor, staticProps); return Constructor; }

function scaffold_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function scaffold_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }













 // store


var defaultWorkspacePath = external_path_default.a.join(external_os_default.a.homedir(), 'iceworks-workspace');
var WORKSPACE_KEY = 'iceworks-workspace'; // const progressText = {
//   ing: '项目文件生成中',
//   done: '项目创建完成',
// };

var scaffold_Scaffold = (scaffold_class = (scaffold_temp =
/*#__PURE__*/
function () {
  function Scaffold() {
    scaffold_classCallCheck(this, Scaffold);

    scaffold_initializerDefineProperty(this, "scaffoldValue", scaffold_descriptor, this);

    scaffold_initializerDefineProperty(this, "layoutConfigValue", scaffold_descriptor2, this);

    scaffold_initializerDefineProperty(this, "isLegalProjectName", scaffold_descriptor3, this);

    scaffold_initializerDefineProperty(this, "projectName", scaffold_descriptor4, this);

    scaffold_initializerDefineProperty(this, "projectFolderName", scaffold_descriptor5, this);

    scaffold_initializerDefineProperty(this, "projectFolderNameValidation", scaffold_descriptor6, this);

    scaffold_initializerDefineProperty(this, "scaffolds", scaffold_descriptor7, this);

    scaffold_initializerDefineProperty(this, "visible", scaffold_descriptor8, this);

    scaffold_initializerDefineProperty(this, "tabScaffoldActiveKey", scaffold_descriptor9, this);

    scaffold_initializerDefineProperty(this, "workspacePath", scaffold_descriptor10, this);

    scaffold_initializerDefineProperty(this, "nodeFramework", scaffold_descriptor11, this);

    scaffold_initializerDefineProperty(this, "isNode", scaffold_descriptor12, this);

    scaffold_initializerDefineProperty(this, "addNewProjectToProjects", scaffold_descriptor13, this);

    scaffold_initializerDefineProperty(this, "toggleNodeSelect", scaffold_descriptor14, this);
  }

  scaffold_createClass(Scaffold, [{
    key: "reset",
    // 重置状态
    value: function reset() {
      this.scaffoldValue = null; // 当前模板

      this.layoutConfigValue = null; // 当前模板

      this.projectFolderName = ''; // 生成状态

      this.projectFolderNameValidation = ''; // 生成状态

      this.projectName = '';
      this.visible = false;
      this.nodeFramework = '';
      this.isNode = false;
    } // 更新本地缓存项目信息

  }, {
    key: "pushRoute",
    // 修改路由跳转到首页
    value: function pushRoute(url) {
      this.visible = false;
      custom_scaffold.close();
      src_history["a" /* default */].push(url);
    } // 再次打开目录选择器   没有被使用过的方法

  }, {
    key: "reopenDirectory",
    value: function reopenDirectory() {
      if (this.scaffoldValue) {
        this.openDirectory();
      }
    }
  }, {
    key: "createProjectFolder",
    value: function createProjectFolder() {
      var self = this;
      var targetPath = self.getProjectPathWithWorkspace();

      if (!path_exists_default.a.sync(targetPath)) {
        mkdirp_default.a.sync(targetPath);
      }

      return new Promise(function (resolve, reject) {
        mkdirp_default()(targetPath, function (err) {
          if (err) {
            reject(err);
          } else {
            var status = Object(project_utils["a" /* checkProject */])(targetPath);

            switch (status) {
              case 'legalProject':
                lib_default.a.warning({
                  message: '当前目录是可用项目',
                  description: '已添加到项目列表顶部'
                });
                self.addNewProjectToProjects(targetPath);
                self.pushRoute('/');
                resolve(false);
                break;

              case 'noAccess':
                dialog_default.a.alert({
                  content: '当前目录没有读写权限，请更换项目目录名！',
                  closable: false,
                  title: '没有权限',
                  onOk: function onOk() {
                    // self.reopenDirectory();
                    self.projectFolderName = '';
                    resolve(false);
                  }
                });

                break;

              case 'hasFiles':
                dialog_default.a.confirm({
                  needWrapper: false,
                  locale: {
                    ok: '是',
                    cancel: '继续使用'
                  },
                  title: '警告',
                  content: external_window_React_default.a.createElement("div", {
                    style: {
                      width: 300,
                      lineHeight: '32px'
                    }
                  }, external_window_React_default.a.createElement("p", {
                    style: {
                      margin: 0,
                      padding: '5px 0'
                    }
                  }, targetPath), external_window_React_default.a.createElement("p", {
                    style: {
                      margin: 0,
                      padding: '5px 0'
                    }
                  }, "\u5F53\u524D\u6587\u4EF6\u5939\u4E0D\u4E3A\u7A7A\uFF0C\u53EF\u80FD\u4F1A\u8986\u76D6\u539F\u6709\u6587\u4EF6\uFF0C\u662F\u5426\u66F4\u6362\u9879\u76EE\u76EE\u5F55\u540D\uFF1F")),
                  onOk: function onOk() {
                    // self.reopenDirectory();
                    self.projectFolderName = '';
                    resolve(false);
                  },
                  onCancel: function onCancel() {
                    resolve(true);
                  }
                });

                break;

              case 'emptyProject':
                resolve(true);
                break;

              case 'unknown':
                resolve(true);
                break;

              default:
                resolve(true);
                break;
            }
          }
        });
      });
    } // 打开目录选择器

  }, {
    key: "openDirectory",
    value: function openDirectory() {
      var _this = this;

      services["a" /* default */].folder.selector().then(function (paths) {
        if (paths && paths.length > 0) {
          var selectedPath = paths[0];
          _this.workspacePath = selectedPath;
          localStorage.setItem(WORKSPACE_KEY, selectedPath);
        }
      });
    }
  }, {
    key: "startProgress",

    /**
     * 启动进度条
     */
    value: function startProgress(SectionCount) {
      progress.setStatusText('项目文件生成中');
      progress.start(true);
      progress.setSectionCount(SectionCount);
    }
    /**
     * 结束进度条
     */

  }, {
    key: "endProgress",
    value: function endProgress() {
      progress.setStatusText('项目创建完成');
      progress.end();
    }
  }, {
    key: "resetProgress",
    value: function resetProgress() {
      progress.reset();
    }
    /**
     * 开始创建项目
     * @param {String} targetPath 项目地址
     * @param {Object} options 脚手架配置
     */

  }, {
    key: "create",
    value: function create(targetPath, options) {
      var progressFunc = progress.handleProgressFunc;
      return new Promise(function (resolve, reject) {
        services["a" /* default */].worker.create.add({
          path: targetPath,
          data: options,
          progressFunc: progressFunc
        }, function (error
        /* 返回的 Error | CreateProjectError 实例 */
        ) {
          // 创建项目弹窗提示
          if (error) {
            components_dialog["a" /* default */].error('创建项目失败', error, function () {
              external_electron_["shell"].moveItemToTrash(targetPath);
            });
            reject(error);
          } else {
            resolve();
          }
        });
      });
    }
  }, {
    key: "setScaffoldConfig",
    value: function setScaffoldConfig(_ref) {
      var scaffold = _ref.scaffold,
          _ref$layoutConfig = _ref.layoutConfig,
          layoutConfig = _ref$layoutConfig === void 0 ? null : _ref$layoutConfig;
      this.reset();
      this.installDeps = true;
      this.scaffoldValue = scaffold;
      this.layoutConfigValue = layoutConfig;
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.visible = !this.visible;
    }
  }, {
    key: "open",
    value: function open() {
      this.visible = true;
    }
  }, {
    key: "close",
    value: function close() {
      this.visible = false;
    } // 中断创建

  }, {
    key: "abort",
    value: function abort() {
      if (progress) {
        progress.abort();
      }

      services["a" /* default */].worker.create.destroy();
    }
  }, {
    key: "setProjectName",
    value: function setProjectName() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this.projectName = value;
    }
  }, {
    key: "setProjectFolderName",
    value: function setProjectFolderName() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      if (value.trim() === '' || !/^[a-z][-_0-9a-z]*$/i.test(value.trim())) {
        this.projectFolderNameValidation = '首字母开头、字母、数字、中下划线组成';
      } else {
        this.projectFolderNameValidation = '';
      }

      this.projectFolderName = value;
    }
  }, {
    key: "toggleInstall",
    value: function toggleInstall() {
      this.installDeps = !this.installDeps;
    }
  }, {
    key: "toggleNodeProject",
    value: function toggleNodeProject(value) {
      this.nodeFramework = value;
    }
  }, {
    key: "getProjectPathWithWorkspace",
    value: function getProjectPathWithWorkspace() {
      return external_path_default.a.join(this.workspacePath, this.projectFolderName || '');
    }
  }, {
    key: "currentScaffoldName",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.scaffoldValue).name;
    }
  }, {
    key: "isCreating",
    get: function get() {
      return progress.visible;
    }
  }, {
    key: "isDisabled",
    get: function get() {
      // 以下情况禁用创建按钮
      return !this.scaffoldValue || this.projectFolderName.trim() === '' || // 项目名为空
      this.projectFolderNameValidation !== '' || // 含错误信息
      // !this.isLegalProjectName || // 合法项目名
      progress && progress.visible // 非初始状态
      ;
    }
  }, {
    key: "scaffold",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.scaffoldValue);
    }
  }, {
    key: "layoutConfig",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.layoutConfigValue);
    }
  }, {
    key: "projectFinalName",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.projectName || this.projectFolderName);
    }
  }]);

  return Scaffold;
}(), scaffold_temp), (scaffold_descriptor = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "scaffoldValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), scaffold_descriptor2 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "layoutConfigValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), scaffold_descriptor3 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "isLegalProjectName", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), scaffold_descriptor4 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "projectName", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), scaffold_descriptor5 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "projectFolderName", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), scaffold_descriptor6 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "projectFolderNameValidation", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), scaffold_descriptor7 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "scaffolds", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), scaffold_descriptor8 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), scaffold_descriptor9 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "tabScaffoldActiveKey", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), scaffold_descriptor10 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "workspacePath", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return localStorage.getItem(WORKSPACE_KEY) || defaultWorkspacePath;
  }
}), scaffold_descriptor11 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "nodeFramework", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), scaffold_descriptor12 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "isNode", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "reset", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "reset"), scaffold_class.prototype), scaffold_descriptor13 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "addNewProjectToProjects", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this2 = this;

    return function (targetPath, needInstallDeps) {
      _this2.projects.add(targetPath, needInstallDeps);
    };
  }
}), scaffold_descriptor14 = scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "toggleNodeSelect", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this3 = this;

    return function (checked) {
      _this3.isNode = checked;
    };
  }
}), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "pushRoute", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "pushRoute"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "reopenDirectory", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "reopenDirectory"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "createProjectFolder", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "createProjectFolder"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "openDirectory", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "openDirectory"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "isCreating", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "isCreating"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "startProgress", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "startProgress"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "create", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "create"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "isDisabled", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "isDisabled"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "scaffold", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "scaffold"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "layoutConfig", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "layoutConfig"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "setScaffoldConfig", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "setScaffoldConfig"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "toggle", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "toggle"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "open", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "open"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "close", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "close"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "setProjectName", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "setProjectName"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "projectFinalName", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "projectFinalName"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "setProjectFolderName", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "setProjectFolderName"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "toggleInstall", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "toggleInstall"), scaffold_class.prototype), scaffold_applyDecoratedDescriptor(scaffold_class.prototype, "toggleNodeProject", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(scaffold_class.prototype, "toggleNodeProject"), scaffold_class.prototype)), scaffold_class);
/* harmony default export */ var scaffold = (new scaffold_Scaffold());
// CONCATENATED MODULE: ./renderer/src/stores/component.js
var component_class, component_descriptor, component_descriptor2, component_descriptor3, component_temp;

function component_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function component_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function component_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function component_createClass(Constructor, protoProps, staticProps) { if (protoProps) component_defineProperties(Constructor.prototype, protoProps); if (staticProps) component_defineProperties(Constructor, staticProps); return Constructor; }

function component_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function component_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }


var Component = (component_class = (component_temp =
/*#__PURE__*/
function () {
  function Component() {
    component_classCallCheck(this, Component);

    component_initializerDefineProperty(this, "visible", component_descriptor, this);

    component_initializerDefineProperty(this, "downloading", component_descriptor2, this);

    component_initializerDefineProperty(this, "currentComponent", component_descriptor3, this);
  }

  component_createClass(Component, [{
    key: "downloadStart",
    value: function downloadStart() {
      this.downloading = true;
    }
  }, {
    key: "downloadDone",
    value: function downloadDone() {
      this.downloading = false;
    }
  }, {
    key: "open",
    value: function open() {
      this.visible = true;
    }
  }, {
    key: "close",
    value: function close() {
      this.visible = false;
    }
  }, {
    key: "isDownloading",
    get: function get() {
      return this.downloading === true;
    }
  }]);

  return Component;
}(), component_temp), (component_descriptor = component_applyDecoratedDescriptor(component_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), component_descriptor2 = component_applyDecoratedDescriptor(component_class.prototype, "downloading", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), component_descriptor3 = component_applyDecoratedDescriptor(component_class.prototype, "currentComponent", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), component_applyDecoratedDescriptor(component_class.prototype, "isDownloading", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(component_class.prototype, "isDownloading"), component_class.prototype), component_applyDecoratedDescriptor(component_class.prototype, "downloadStart", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(component_class.prototype, "downloadStart"), component_class.prototype), component_applyDecoratedDescriptor(component_class.prototype, "downloadDone", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(component_class.prototype, "downloadDone"), component_class.prototype), component_applyDecoratedDescriptor(component_class.prototype, "open", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(component_class.prototype, "open"), component_class.prototype), component_applyDecoratedDescriptor(component_class.prototype, "close", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(component_class.prototype, "close"), component_class.prototype)), component_class);
/* harmony default export */ var stores_component = (new Component());
// CONCATENATED MODULE: ./renderer/src/stores/additional-blocks.js
var additional_blocks_class, additional_blocks_descriptor, additional_blocks_temp;

function additional_blocks_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function additional_blocks_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function additional_blocks_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function additional_blocks_createClass(Constructor, protoProps, staticProps) { if (protoProps) additional_blocks_defineProperties(Constructor.prototype, protoProps); if (staticProps) additional_blocks_defineProperties(Constructor, staticProps); return Constructor; }

function additional_blocks_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function additional_blocks_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }



var additional_blocks_AdditionalBlocks = (additional_blocks_class = (additional_blocks_temp =
/*#__PURE__*/
function () {
  function AdditionalBlocks(_blocks) {
    var _this = this;

    additional_blocks_classCallCheck(this, AdditionalBlocks);

    additional_blocks_initializerDefineProperty(this, "newBlocks", additional_blocks_descriptor, this);

    this.additionalIsNew = function (blocks) {
      var sortBlocks = blocks.filter(function (block) {
        return !!block.publishTime;
      });

      if (sortBlocks.length === 0) {
        return blocks;
      }

      var isNewlyBlock = [];
      var days = 0;
      var nowDate = new Date();

      while (!isNewlyBlock.length) {
        days += 7; // eslint-disable-next-line no-loop-func

        sortBlocks.forEach(function (item) {
          var blockCreatedDate = new Date(item.publishTime);
          /* eslint-disable no-underscore-dangle */

          var _isNew = nowDate - blockCreatedDate < days * 24 * 60 * 60 * 1000;

          if (_isNew) {
            isNewlyBlock.push(item);
          }

          item._isNew = _isNew;
          /* eslint-enable no-underscore-dangle */
        });
      }

      _this.newBlocks = isNewlyBlock;
      return blocks;
    };

    var categories = materials_getCategoriesByBlocks(_blocks);
    this.originBlocks = this.additionalIsNew(_blocks);
    this.categories = categories;
  }

  additional_blocks_createClass(AdditionalBlocks, [{
    key: "getBlocksFilterByCategory",
    value: function getBlocksFilterByCategory(name) {
      return this.originBlocks.filter(function (block) {
        return block.categories.includes(name);
      });
    }
  }, {
    key: "blocksWithCategory",
    get: function get() {
      var result = [];

      if (Array.isArray(this.newBlocks) && this.newBlocks.length > 0) {
        result.push({
          category: '最新',
          blocks: this.newBlocks
        });
      }
      /* eslint-disable no-restricted-syntax */


      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.blocks.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;
          result.push({
            category: key,
            blocks: Object(external_window_mobx_["toJS"])(this.blocks.get(key))
          });
        }
        /* eslint-enable no-restricted-syntax */

      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }
  }, {
    key: "blocks",
    get: function get() {
      var _this2 = this;

      var categories = this.categories;
      var blocks = external_window_mobx_["observable"].map({});
      categories.forEach(function (category) {
        var blocksCategory = _this2.getBlocksFilterByCategory(category.name);

        blocks.set(category.name, blocksCategory);
      });
      return blocks;
    }
  }, {
    key: "values",
    get: function get() {
      return this.originBlocks;
    }
  }]);

  return AdditionalBlocks;
}(), additional_blocks_temp), (additional_blocks_descriptor = additional_blocks_applyDecoratedDescriptor(additional_blocks_class.prototype, "newBlocks", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), additional_blocks_applyDecoratedDescriptor(additional_blocks_class.prototype, "blocksWithCategory", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(additional_blocks_class.prototype, "blocksWithCategory"), additional_blocks_class.prototype), additional_blocks_applyDecoratedDescriptor(additional_blocks_class.prototype, "blocks", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(additional_blocks_class.prototype, "blocks"), additional_blocks_class.prototype), additional_blocks_applyDecoratedDescriptor(additional_blocks_class.prototype, "values", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(additional_blocks_class.prototype, "values"), additional_blocks_class.prototype)), additional_blocks_class);
/* harmony default export */ var additional_blocks = (additional_blocks_AdditionalBlocks);
// CONCATENATED MODULE: ./renderer/src/stores/additional-scaffolds.js
var additional_scaffolds_class, additional_scaffolds_descriptor, additional_scaffolds_temp;

function additional_scaffolds_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function additional_scaffolds_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function additional_scaffolds_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function additional_scaffolds_createClass(Constructor, protoProps, staticProps) { if (protoProps) additional_scaffolds_defineProperties(Constructor.prototype, protoProps); if (staticProps) additional_scaffolds_defineProperties(Constructor, staticProps); return Constructor; }

function additional_scaffolds_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function additional_scaffolds_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }



var additional_scaffolds_AdditionalScaffolds = (additional_scaffolds_class = (additional_scaffolds_temp =
/*#__PURE__*/
function () {
  function AdditionalScaffolds(_scaffolds, material) {
    var _this = this;

    additional_scaffolds_classCallCheck(this, AdditionalScaffolds);

    additional_scaffolds_initializerDefineProperty(this, "activeCategory", additional_scaffolds_descriptor, this);

    this.excludeScaffold = function (builder) {
      var isAlibaba = services["a" /* default */].settings.get('isAlibaba');
      var isOfficialSource = /ice\.alicdn\.com\/(pre-)?assets\/react-materials\.json/.test(_this.material.source);
      return isAlibaba && isOfficialSource && builder !== 'ice-scripts';
    };

    this.additionalIsNew = function (scaffolds) {
      var sortScaffolds = scaffolds.filter(function (scaffold) {
        return !!scaffold.publishTime && !_this.excludeScaffold(scaffold.builder);
      });

      if (sortScaffolds.length === 0) {
        return sortScaffolds;
      }

      var isNewlyScaffold = [];
      var days = 0;
      var nowDate = new Date();

      while (!isNewlyScaffold.length) {
        days += 7; // eslint-disable-next-line no-loop-func

        sortScaffolds.forEach(function (item) {
          var blockCreatedDate = new Date(item.publishTime);
          /* eslint-disable no-underscore-dangle */

          var _isNew = nowDate - blockCreatedDate < days * 24 * 60 * 60 * 1000;

          if (_isNew) {
            isNewlyScaffold.push(item);
          }

          item._isNew = _isNew;
          /* eslint-enable no-underscore-dangle */
        });
      }

      return sortScaffolds;
    };

    this.startRecommendScaffolds = function (scaffolds) {
      var RECOMMEND_SCAFFOLDS = ['@icedesign/pro-scaffold', '@icedesign/lite-scaffold'];
      return scaffolds.filter(function (scaffold) {
        return RECOMMEND_SCAFFOLDS.includes(scaffold.source.npm);
      });
    };

    this.material = material || '';
    this.scaffoldsValue = this.additionalIsNew(_scaffolds);
    this.startRecommendScaffolds = this.startRecommendScaffolds(_scaffolds);
  }

  additional_scaffolds_createClass(AdditionalScaffolds, [{
    key: "categories",

    /**
     * 获取模板的分类
     */
    get: function get() {
      var _this2 = this;

      // 默认展示全部
      var categories = [];
      this.scaffoldsValue.forEach(function (item) {
        if (_this2.excludeScaffold(item.builder)) return;

        if (Array.isArray(item.categories)) {
          item.categories.forEach(function (currentValue) {
            if (!categories.includes(currentValue)) {
              categories.push(currentValue);
            }
          });
        }
      });

      if (categories.length > 0) {
        categories.unshift('全部');
      }

      return categories;
    }
  }, {
    key: "values",
    get: function get() {
      var _this3 = this;

      if (this.activeCategory === '全部') {
        return this.scaffolds;
      }

      var filterByCatefory = this.scaffolds.filter(function (item) {
        if (item.categories.includes(_this3.activeCategory)) {
          return item;
        }

        return false;
      });
      return Object(external_window_mobx_["toJS"])(filterByCatefory);
    }
  }, {
    key: "scaffolds",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.scaffoldsValue);
    }
  }, {
    key: "recommendScaffolds",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.startRecommendScaffolds);
    }
  }]);

  return AdditionalScaffolds;
}(), additional_scaffolds_temp), (additional_scaffolds_descriptor = additional_scaffolds_applyDecoratedDescriptor(additional_scaffolds_class.prototype, "activeCategory", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '全部';
  }
}), additional_scaffolds_applyDecoratedDescriptor(additional_scaffolds_class.prototype, "categories", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(additional_scaffolds_class.prototype, "categories"), additional_scaffolds_class.prototype), additional_scaffolds_applyDecoratedDescriptor(additional_scaffolds_class.prototype, "values", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(additional_scaffolds_class.prototype, "values"), additional_scaffolds_class.prototype), additional_scaffolds_applyDecoratedDescriptor(additional_scaffolds_class.prototype, "scaffolds", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(additional_scaffolds_class.prototype, "scaffolds"), additional_scaffolds_class.prototype), additional_scaffolds_applyDecoratedDescriptor(additional_scaffolds_class.prototype, "recommendScaffolds", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(additional_scaffolds_class.prototype, "recommendScaffolds"), additional_scaffolds_class.prototype)), additional_scaffolds_class);
/* harmony default export */ var additional_scaffolds = (additional_scaffolds_AdditionalScaffolds);
// EXTERNAL MODULE: ./renderer/src/lib/utils.js
var utils = __webpack_require__(58);

// CONCATENATED MODULE: ./renderer/src/stores/additional-components.js
var additional_components_class, additional_components_descriptor, additional_components_descriptor2, additional_components_temp;

function additional_components_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function additional_components_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function additional_components_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function additional_components_createClass(Constructor, protoProps, staticProps) { if (protoProps) additional_components_defineProperties(Constructor.prototype, protoProps); if (staticProps) additional_components_defineProperties(Constructor, staticProps); return Constructor; }

function additional_components_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function additional_components_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }





var additional_components_AdditionalComponents = (additional_components_class = (additional_components_temp =
/*#__PURE__*/
function () {
  function AdditionalComponents(_components, material, _iceBaseComponents) {
    var _this = this;

    additional_components_classCallCheck(this, AdditionalComponents);

    additional_components_initializerDefineProperty(this, "activeCategory", additional_components_descriptor, this);

    additional_components_initializerDefineProperty(this, "componentsValue", additional_components_descriptor2, this);

    this.additionalSource = function (components, iceBaseComponents) {
      // 如果是飞冰物料，同时是基础组件
      if (Object(utils["a" /* isIceMaterial */])(_this.material.source) && iceBaseComponents.length > 0) {
        var currentProject = stores_projects["a" /* default */].currentProject;
        var iceVersion = currentProject ? currentProject.iceVersion : '1.x';
        var npm = iceVersion === '0.x' ? '@icedesign/base' : '@alifd/next';
        iceBaseComponents.forEach(function (component) {
          component.source = {
            npm: npm
          };
        });
      }

      components.forEach(function (component) {
        var _component$source = component.source,
            source = _component$source === void 0 ? {} : _component$source,
            importStatement = component.importStatement,
            name = component.name;

        if (!importStatement) {
          var cn = name.split('/').pop();
          component.importStatement = "import ".concat(uppercamelcase_default()(cn), " from '").concat(source.npm, "';");
        } else {
          component.importStatement = importStatement;
        }
      });
    };

    this.additionalIsDownloaded = function (components, iceBaseComponents) {
      var currentProject = stores_projects["a" /* default */].currentProject;
      var dependencies = {};

      if (currentProject) {
        var projectPkgData = currentProject.getPkgData();
        dependencies = projectPkgData.dependencies || {};
      } // 如果是飞冰物料，同时是基础组件


      if (Object(utils["a" /* isIceMaterial */])(_this.material.source) && iceBaseComponents.length > 0) {
        var iceVersion = currentProject ? currentProject.iceVersion : '1.x';
        var npm = iceVersion === '0.x' ? '@icedesign/base' : '@alifd/next';
        var isDownloaded = !!dependencies[npm];
        iceBaseComponents.forEach(function (component) {
          component.isDownloaded = isDownloaded;
        });
      }

      components.forEach(function (component) {
        var _component$source2 = component.source,
            source = _component$source2 === void 0 ? {} : _component$source2;

        if (dependencies[source.npm]) {
          component.isDownloaded = true;
        } else {
          component.isDownloaded = false;
        }
      });
    };

    this.material = material || '';
    this.iceBusinessComponents = _components;
    this.iceBaseComponents = _iceBaseComponents || [];
    this.additionalSource(_components, this.iceBaseComponents);
    this.additionalIsDownloaded(_components, this.iceBaseComponents);
    this.componentsValue = _components.concat(this.iceBaseComponents);
  }

  additional_components_createClass(AdditionalComponents, [{
    key: "categories",

    /**
     * 获取模板的分类
     */
    get: function get() {
      // 默认展示全部
      if (Object(utils["a" /* isIceMaterial */])(this.material.source)) {
        return ['全部', '业务组件', '基础组件'];
      }

      var categories = [];
      this.componentsValue.forEach(function (item) {
        if (Array.isArray(item.categories)) {
          item.categories.forEach(function (currentValue) {
            if (!categories.includes(currentValue)) {
              categories.push(currentValue);
            }
          });
        }
      });

      if (categories.length > 0) {
        categories.unshift('全部');
      }

      return categories;
    }
  }, {
    key: "values",
    get: function get() {
      var _this2 = this;

      if (this.activeCategory === '全部') {
        return this.components;
      }

      if (Object(utils["a" /* isIceMaterial */])(this.material.source)) {
        if (this.activeCategory === '业务组件') {
          return this.iceBusinessComponents;
        } // this.activeCategory === '基础组件'


        return this.iceBaseComponents;
      }

      var filterByCatefory = this.components.filter(function (item) {
        if (item.categories.includes(_this2.activeCategory)) {
          return item;
        }

        return false;
      });
      return Object(external_window_mobx_["toJS"])(filterByCatefory);
    }
  }, {
    key: "components",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.componentsValue);
    }
  }]);

  return AdditionalComponents;
}(), additional_components_temp), (additional_components_descriptor = additional_components_applyDecoratedDescriptor(additional_components_class.prototype, "activeCategory", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '全部';
  }
}), additional_components_descriptor2 = additional_components_applyDecoratedDescriptor(additional_components_class.prototype, "componentsValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), additional_components_applyDecoratedDescriptor(additional_components_class.prototype, "categories", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(additional_components_class.prototype, "categories"), additional_components_class.prototype), additional_components_applyDecoratedDescriptor(additional_components_class.prototype, "values", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(additional_components_class.prototype, "values"), additional_components_class.prototype), additional_components_applyDecoratedDescriptor(additional_components_class.prototype, "components", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(additional_components_class.prototype, "components"), additional_components_class.prototype)), additional_components_class);
/* harmony default export */ var additional_components = (additional_components_AdditionalComponents);
// CONCATENATED MODULE: ./renderer/src/stores/materials.js
var materials_class, materials_descriptor, materials_descriptor2, materials_descriptor3, materials_descriptor4, materials_descriptor5, materials_descriptor6, materials_temp;

function materials_slicedToArray(arr, i) { return materials_arrayWithHoles(arr) || materials_iterableToArrayLimit(arr, i) || materials_nonIterableRest(); }

function materials_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function materials_iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function materials_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function materials_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = materials_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function materials_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function materials_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function materials_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function materials_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function materials_createClass(Constructor, protoProps, staticProps) { if (protoProps) materials_defineProperties(Constructor.prototype, protoProps); if (staticProps) materials_defineProperties(Constructor, staticProps); return Constructor; }

function materials_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function materials_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }

/**
 * 用于管理物料加载与缓存的数据中心。
 */










var stores_materials_settings = services["a" /* default */].settings,
    materials_shared = services["a" /* default */].shared;
var materials_Materials = (materials_class = (materials_temp =
/*#__PURE__*/
function () {
  // 是否启用内置的物料数据
  function Materials() {
    materials_classCallCheck(this, Materials);

    materials_initializerDefineProperty(this, "materials", materials_descriptor, this);

    materials_initializerDefineProperty(this, "refreshing", materials_descriptor2, this);

    materials_initializerDefineProperty(this, "tabBlockActiveKey", materials_descriptor3, this);

    materials_initializerDefineProperty(this, "tabScaffoldActiveKeyValue", materials_descriptor4, this);

    materials_initializerDefineProperty(this, "tabComponentActiveKey", materials_descriptor5, this);

    materials_initializerDefineProperty(this, "startRecommendMaterials", materials_descriptor6, this);

    this.useBuiltinData = false;
    // 加载物料数据
    this.fetchSettingsMaterials().then(function () {});
  } // 刷新数据


  materials_createClass(Materials, [{
    key: "refresh",
    value: function refresh() {
      var _this = this;

      this.refreshing = true;
      this.fetchSettingsMaterials().then(function () {
        _this.refreshing = false;

        _this.initMaterials();
      });
    }
  }, {
    key: "setBlockTabActiveKey",
    value: function setBlockTabActiveKey(key) {
      var load = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.tabBlockActiveKey = key;
      var index = key.split('_')[1];

      if (load) {
        this.loaderMaterial(index);
      }
    }
  }, {
    key: "setScaffoldTabActiveKey",
    value: function setScaffoldTabActiveKey(key) {
      var load = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.tabScaffoldActiveKeyValue = key;
      var index = key.split('_')[1];

      if (load) {
        this.loaderMaterial(index);
      }
    }
  }, {
    key: "setComponentTabActiveKey",
    value: function setComponentTabActiveKey(key) {
      var load = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.tabComponentActiveKey = key;
      var index = key.split('_')[1];

      if (load) {
        this.loaderMaterial(index);
      }
    }
  }, {
    key: "initMaterials",
    value: function initMaterials() {
      this.setBlockTabActiveKey(this.getBlockTabActiveKey(0), false);
      this.setScaffoldTabActiveKey(this.getScaffoldTabActiveKey(0), false);
      this.setComponentTabActiveKey(this.getComponentTabActiveKey(0), false); // 加载第一个物料

      this.loaderMaterial(0);
    }
  }, {
    key: "getBlockTabActiveKey",
    value: function getBlockTabActiveKey(index) {
      return "block_".concat(index);
    }
  }, {
    key: "getScaffoldTabActiveKey",
    value: function getScaffoldTabActiveKey(index) {
      return "scaffold_".concat(index);
    }
  }, {
    key: "getComponentTabActiveKey",
    value: function getComponentTabActiveKey(index) {
      return "component_".concat(index);
    }
  }, {
    key: "fetchSettingsMaterials",
    value: function fetchSettingsMaterials() {
      var _this2 = this;

      return new Promise(function (resolve) {
        var materials = stores_materials_settings.get('materials'); // 过滤掉隐藏的物料源

        materials = materials.filter(function (item) {
          return item.checked !== false;
        });
        materials = filterMaterial(materials);
        _this2.materials = external_window_mobx_["observable"].array(materials);
        setTimeout(function () {
          resolve();
        }, 300);
      });
    }
  }, {
    key: "fetchByMaterial",
    value: function fetchByMaterial(source) {
      return Object(request_material["a" /* default */])(source);
    }
    /**
     * 启动页推荐模板
     */

  }, {
    key: "loadStartRecommendMaterials",
    value: function loadStartRecommendMaterials() {
      var _this3 = this;

      var recommendMaterialSource = stores_materials_settings.get('materials')[0];
      var startRecommendMaterials = this.startRecommendMaterials;

      var fn = function fn(data) {
        var scaffolds = data.scaffolds || [];

        var _ref = new additional_scaffolds(scaffolds),
            startRecommendScaffolds = _ref.startRecommendScaffolds;

        startRecommendMaterials.scaffolds = startRecommendScaffolds || [];
        startRecommendMaterials.loaded = true;
        startRecommendMaterials.error = null;
      };

      if (!this.useBuiltinData) {
        this.fetchByMaterial(recommendMaterialSource.source).then(function () {
          var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          fn(body);
        }).catch(function (error) {
          // TODO: 这里的 error 可能有那些原因
          logger["a" /* default */].info(error); // 如果 alicdn 物料源访问超时 切换备份内置的物料源数据

          if (!_this3.useBuiltinData) {
            _this3.useBuiltinData = true;

            _this3.loadStartRecommendMaterials();
          } else {
            startRecommendMaterials.loaded = true;
            startRecommendMaterials.error = '物料源加载失败，建议将此问题反馈给飞冰（ICE）团队，在菜单中点击: 帮助 => 反馈问题';
          }
        });
      } else {
        fn(__webpack_require__(159));
      }
    }
  }, {
    key: "loaderMaterial",
    value: function loaderMaterial(index) {
      var _this4 = this;

      var material = this.materials[index];
      if (!material) return;
      var currentProject = stores_projects["a" /* default */].currentProject;
      var iceVersion = currentProject ? currentProject.iceVersion : '1.x';

      var fn = function fn(data, iceBaseComponents) {
        var _data$blocks = data.blocks,
            blocks = _data$blocks === void 0 ? [] : _data$blocks,
            _data$scaffolds = data.scaffolds,
            scaffolds = _data$scaffolds === void 0 ? [] : _data$scaffolds,
            _data$components = data.components,
            components = _data$components === void 0 ? [] : _data$components,
            name = data.name,
            attrs = materials_objectWithoutProperties(data, ["blocks", "scaffolds", "components", "name"]);

        Object.keys(attrs).forEach(function (key) {
          material[key] = attrs[key];
        }); // 双向绑定数据

        material.blocks = new additional_blocks(blocks);
        material.scaffolds = new additional_scaffolds(scaffolds, material);
        material.components = new additional_components(components, material, iceBaseComponents);
        material.loaded = true;
        material.data = data;
        material.error = null;
      };

      if (!this.useBuiltinData) {
        if (material && !material.loaded) {
          var promiseAll;

          if (Object(utils["a" /* isIceMaterial */])(material.source)) {
            var iceBaseMaterials = materials_shared.iceBaseMaterials;
            var iceBaseMaterial = iceVersion === '0.x' ? iceBaseMaterials[0] : iceBaseMaterials[1];
            promiseAll = Promise.all([this.fetchByMaterial(material.source), // HACK: 获取 ICE 物料源时一同获取基础组件数据
            // 因为 ICE 物料源会有一份单独的基础组件数据，其他的没有
            this.fetchByMaterial(iceBaseMaterial.source).catch(function () {
              // 获取基础组件列表失败，不终止流程
              material.componentsError = "\u57FA\u7840\u7EC4\u4EF6\u5217\u8868\u52A0\u8F7D\u5931\u8D25\uFF0C\u8BF7\u786E\u8BA4\u7F51\u7EDC\u662F\u5426\u80FD\u76F4\u63A5\u8BBF\u95EE\u6B64\u94FE\u63A5 ".concat(iceBaseMaterial.source, "\uFF0C\u5EFA\u8BAE\u5C06\u6B64\u95EE\u9898\u53CD\u9988\u7ED9\u98DE\u51B0\uFF08ICE\uFF09\u56E2\u961F\uFF0C\u5728\u83DC\u5355\u4E2D\u70B9\u51FB: \u5E2E\u52A9 => \u53CD\u9988\u95EE\u9898");
              return null;
            })]);
          } else {
            promiseAll = Promise.all([this.fetchByMaterial(material.source)]);
          }

          promiseAll.then(function (_ref2) {
            var _ref3 = materials_slicedToArray(_ref2, 2),
                _ref3$ = _ref3[0],
                body = _ref3$ === void 0 ? {} : _ref3$,
                iceBaseComponents = _ref3[1];

            fn(body, iceBaseComponents);
          }).catch(function (error) {
            logger["a" /* default */].error(error); // 判断是否是官方提供的物料源
            // 只有官方提供的物料源才会走兜底逻辑使用内置的物料数据

            if (!_this4.useBuiltinData && material.source.includes('ice.alicdn.com')) {
              _this4.useBuiltinData = true;

              _this4.loaderMaterial(index);
            } else {
              material.loaded = true;
              var errMsg = '物料源加载失败，建议将此问题反馈给飞冰（ICE）团队，在菜单中点击: 帮助 => 反馈问题';
              material.error = errMsg;
            }
          });
        }
      } else {
        var matchsArray = material.source.match(/assets\/(\S*)\.json/) || [];
        var sourceName = matchsArray.length ? matchsArray[1] : '';

        if (sourceName) {
          var materialsData = __webpack_require__(248)("./".concat(sourceName)); // 如果是官方提供的 React 物料源单独获取基础组件数据


          var iceComponentsData = [];

          if (Object(utils["a" /* isIceMaterial */])(material.source)) {
            var iceComponentsSourceName = iceVersion === '0.x' ? 'base-components' : 'base-components-1.x';
            iceComponentsData = __webpack_require__(248)("./".concat(iceComponentsSourceName));
          }

          fn(materialsData, iceComponentsData);
        } else {
          material.loaded = true;
          var errMsg = '内置物料源加载失败，建议将此问题反馈给飞冰（ICE）团队，在菜单中点击: 帮助 => 反馈问题';
          material.error = errMsg;
        }
      }
    }
  }, {
    key: "updateComponents",
    value: function updateComponents() {
      var index = this.tabComponentActiveKey.split('_')[1];

      if (index) {
        var material = this.materials[index];
        var components = material.components.iceBusinessComponents;
        var iceBaseComponents = material.components.iceBaseComponents;
        material.components = new additional_components(components, material, iceBaseComponents);
      }
    }
  }, {
    key: "tabScaffoldActiveKey",
    get: function get() {
      if (this.materials.length === 0) {
        return 'custom-scaffold';
      }

      return this.tabScaffoldActiveKeyValue;
    }
  }, {
    key: "currentBlocks",
    get: function get() {
      var index = this.tabBlockActiveKey.split('_')[1];

      if (index) {
        var material = this.materials[index];
        return Object(external_window_mobx_["toJS"])(material.data && material.data.blocks) || null;
      }

      return null;
    }
  }, {
    key: "currentScaffolds",
    get: function get() {
      var index = this.tabScaffoldActiveKeyValue.split('_')[1];

      if (index) {
        var material = this.materials[index];
        return Object(external_window_mobx_["toJS"])(material.data && material.data.scaffolds) || null;
      }

      return null;
    }
  }, {
    key: "currentComponents",
    get: function get() {
      var index = this.tabComponentActiveKey.split('_')[1];

      if (index) {
        var material = this.materials[index];
        return Object(external_window_mobx_["toJS"])(material.data && material.data.components) || null;
      }

      return null;
    }
  }]);

  return Materials;
}(), materials_temp), (materials_descriptor = materials_applyDecoratedDescriptor(materials_class.prototype, "materials", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), materials_descriptor2 = materials_applyDecoratedDescriptor(materials_class.prototype, "refreshing", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), materials_descriptor3 = materials_applyDecoratedDescriptor(materials_class.prototype, "tabBlockActiveKey", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), materials_descriptor4 = materials_applyDecoratedDescriptor(materials_class.prototype, "tabScaffoldActiveKeyValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), materials_descriptor5 = materials_applyDecoratedDescriptor(materials_class.prototype, "tabComponentActiveKey", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), materials_descriptor6 = materials_applyDecoratedDescriptor(materials_class.prototype, "startRecommendMaterials", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), materials_applyDecoratedDescriptor(materials_class.prototype, "refresh", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "refresh"), materials_class.prototype), materials_applyDecoratedDescriptor(materials_class.prototype, "setBlockTabActiveKey", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "setBlockTabActiveKey"), materials_class.prototype), materials_applyDecoratedDescriptor(materials_class.prototype, "setScaffoldTabActiveKey", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "setScaffoldTabActiveKey"), materials_class.prototype), materials_applyDecoratedDescriptor(materials_class.prototype, "setComponentTabActiveKey", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "setComponentTabActiveKey"), materials_class.prototype), materials_applyDecoratedDescriptor(materials_class.prototype, "tabScaffoldActiveKey", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "tabScaffoldActiveKey"), materials_class.prototype), materials_applyDecoratedDescriptor(materials_class.prototype, "loadStartRecommendMaterials", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "loadStartRecommendMaterials"), materials_class.prototype), materials_applyDecoratedDescriptor(materials_class.prototype, "loaderMaterial", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "loaderMaterial"), materials_class.prototype), materials_applyDecoratedDescriptor(materials_class.prototype, "currentBlocks", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "currentBlocks"), materials_class.prototype), materials_applyDecoratedDescriptor(materials_class.prototype, "currentScaffolds", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "currentScaffolds"), materials_class.prototype), materials_applyDecoratedDescriptor(materials_class.prototype, "currentComponents", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "currentComponents"), materials_class.prototype), materials_applyDecoratedDescriptor(materials_class.prototype, "updateComponents", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(materials_class.prototype, "updateComponents"), materials_class.prototype)), materials_class);
/* harmony default export */ var stores_materials = (new materials_Materials());
// CONCATENATED MODULE: ./renderer/src/stores/switcher.js
var switcher_class, switcher_descriptor, switcher_temp;

function switcher_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function switcher_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function switcher_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function switcher_createClass(Constructor, protoProps, staticProps) { if (protoProps) switcher_defineProperties(Constructor.prototype, protoProps); if (staticProps) switcher_defineProperties(Constructor, staticProps); return Constructor; }

function switcher_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function switcher_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }


var Switch = (switcher_class = (switcher_temp =
/*#__PURE__*/
function () {
  function Switch() {
    switcher_classCallCheck(this, Switch);

    switcher_initializerDefineProperty(this, "visible", switcher_descriptor, this);
  }

  switcher_createClass(Switch, [{
    key: "open",
    value: function open() {
      this.visible = true;
    }
  }, {
    key: "close",
    value: function close() {
      this.visible = false;
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.visible = !this.visible;
    }
  }]);

  return Switch;
}(), switcher_temp), (switcher_descriptor = switcher_applyDecoratedDescriptor(switcher_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), switcher_applyDecoratedDescriptor(switcher_class.prototype, "open", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(switcher_class.prototype, "open"), switcher_class.prototype), switcher_applyDecoratedDescriptor(switcher_class.prototype, "close", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(switcher_class.prototype, "close"), switcher_class.prototype), switcher_applyDecoratedDescriptor(switcher_class.prototype, "toggle", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(switcher_class.prototype, "toggle"), switcher_class.prototype)), switcher_class);
/* harmony default export */ var switcher = (new Switch());
// EXTERNAL MODULE: ./node_modules/fs-extra/lib/index.js
var fs_extra_lib = __webpack_require__(27);
var fs_extra_lib_default = /*#__PURE__*/__webpack_require__.n(fs_extra_lib);

// EXTERNAL MODULE: ./renderer/node_modules/fecha/fecha.js
var fecha = __webpack_require__(254);
var fecha_default = /*#__PURE__*/__webpack_require__.n(fecha);

// EXTERNAL MODULE: ./node_modules/request/index.js
var request = __webpack_require__(62);
var request_default = /*#__PURE__*/__webpack_require__.n(request);

// EXTERNAL MODULE: ./node_modules/request-progress/index.js
var request_progress = __webpack_require__(171);
var request_progress_default = /*#__PURE__*/__webpack_require__.n(request_progress);

// CONCATENATED MODULE: ./renderer/src/stores/custom-blocks.js
var custom_blocks_class, custom_blocks_descriptor, custom_blocks_descriptor2, custom_blocks_descriptor3, custom_blocks_descriptor4, custom_blocks_descriptor5, custom_blocks_descriptor6, custom_blocks_descriptor7, custom_blocks_descriptor8, custom_blocks_descriptor9, custom_blocks_descriptor10, custom_blocks_descriptor11, custom_blocks_descriptor12, custom_blocks_descriptor13, custom_blocks_descriptor14, custom_blocks_descriptor15, custom_blocks_descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, custom_blocks_temp;

function custom_blocks_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function custom_blocks_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function custom_blocks_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function custom_blocks_createClass(Constructor, protoProps, staticProps) { if (protoProps) custom_blocks_defineProperties(Constructor.prototype, protoProps); if (staticProps) custom_blocks_defineProperties(Constructor, staticProps); return Constructor; }

function custom_blocks_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function custom_blocks_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }












var custom_blocks_defaultWorkspacePath = external_path_default.a.join(external_os_default.a.homedir(), '.iceworks'); // const devWorkbenchPath = 'http://127.0.0.1:3333/src/pages/workbench/index.html';

var onlineWorkbenchPath = 'http://ice.alicdn.com/iceland-assets/workbench/v21300/pages/workbench/index.html';
var presentWorkbenchPath = onlineWorkbenchPath;
/**
 * 自定义区块状态管理
 */

var custom_blocks_CustomBlocks = (custom_blocks_class = (custom_blocks_temp =
/*#__PURE__*/
function () {
  function CustomBlocks() {
    var _this = this;

    custom_blocks_classCallCheck(this, CustomBlocks);

    this.blockSaving = false;
    this.materialData = '';
    this.materialEngine = null;
    this.blockCounter = 0;
    this.paintOffset = {};
    this.paintHeight = 0;
    this.paintWidth = 0;
    this.iconData = '';
    this.dataLoading = false;
    this.capture = false;
    this.requestCount = 0;

    custom_blocks_initializerDefineProperty(this, "blockEditing", custom_blocks_descriptor, this);

    custom_blocks_initializerDefineProperty(this, "workBenchWindow", custom_blocks_descriptor2, this);

    custom_blocks_initializerDefineProperty(this, "visible", custom_blocks_descriptor3, this);

    custom_blocks_initializerDefineProperty(this, "showCustomBlocks", custom_blocks_descriptor4, this);

    custom_blocks_initializerDefineProperty(this, "isDisabled", custom_blocks_descriptor5, this);

    custom_blocks_initializerDefineProperty(this, "blockName", custom_blocks_descriptor6, this);

    custom_blocks_initializerDefineProperty(this, "blockAlias", custom_blocks_descriptor7, this);

    custom_blocks_initializerDefineProperty(this, "currentBlock", custom_blocks_descriptor8, this);

    custom_blocks_initializerDefineProperty(this, "blockJSON", custom_blocks_descriptor9, this);

    custom_blocks_initializerDefineProperty(this, "blockCode", custom_blocks_descriptor10, this);

    custom_blocks_initializerDefineProperty(this, "blockNameValidation", custom_blocks_descriptor11, this);

    custom_blocks_initializerDefineProperty(this, "renameVisible", custom_blocks_descriptor12, this);

    custom_blocks_initializerDefineProperty(this, "renameBlockName", custom_blocks_descriptor13, this);

    custom_blocks_initializerDefineProperty(this, "renameBlockAlias", custom_blocks_descriptor14, this);

    custom_blocks_initializerDefineProperty(this, "renameBlock", custom_blocks_descriptor15, this);

    custom_blocks_initializerDefineProperty(this, "blockDeps", custom_blocks_descriptor16, this);

    custom_blocks_initializerDefineProperty(this, "blocksStorage", _descriptor17, this);

    custom_blocks_initializerDefineProperty(this, "showModal", _descriptor18, this);

    custom_blocks_initializerDefineProperty(this, "previewBlock", _descriptor19, this);

    custom_blocks_initializerDefineProperty(this, "materialProgress", _descriptor20, this);

    custom_blocks_initializerDefineProperty(this, "progressVisible", _descriptor21, this);

    custom_blocks_initializerDefineProperty(this, "progressRemaining", _descriptor22, this);

    custom_blocks_initializerDefineProperty(this, "progressSpeed", _descriptor23, this);

    custom_blocks_initializerDefineProperty(this, "progressTitle", _descriptor24, this);

    custom_blocks_initializerDefineProperty(this, "errorVisible", _descriptor25, this);

    custom_blocks_initializerDefineProperty(this, "openProgress", _descriptor26, this);

    custom_blocks_initializerDefineProperty(this, "closeProgress", _descriptor27, this);

    custom_blocks_initializerDefineProperty(this, "closeError", _descriptor28, this);

    custom_blocks_initializerDefineProperty(this, "openModal", _descriptor29, this);

    custom_blocks_initializerDefineProperty(this, "closeModal", _descriptor30, this);

    this.saveCustomBlock = function (deps, code) {
      _this.blockDeps = deps;
      _this.blockCode = JSON.parse(code);
      _this.currentBlock = {
        json: _this.blockJSON,
        alias: _this.blockAlias,
        code: _this.blockCode,
        type: 'custom',
        time: fecha_default.a.format(new Date(), 'YYYY-MM-DD HH:mm:ss'),
        dep: _this.blockDeps
      };
      fs_extra_lib_default.a.writeFileSync(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'blocks', _this.blockName), JSON.stringify(_this.currentBlock));

      if (_this.capture) {
        _this.workBenchWindow.capturePage({
          x: Math.floor(_this.paintOffset.left),
          y: Math.floor(_this.paintOffset.top),
          width: Math.floor(_this.paintWidth),
          height: Math.floor(_this.paintHeight)
        }, function (img) {
          fs_extra_lib_default.a.writeFile(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'images', _this.blockName), img.toPNG(), function () {
            _this.refreshBlocks();

            _this.blockSaving = false;
            _this.blockJSON = '';
            _this.capture = false;
          });
        });
      }
    };

    this.refreshBlocks = function () {
      _this.blocksStorage[_this.blockName] = _this.deepClone(_this.currentBlock);
    };
  }

  custom_blocks_createClass(CustomBlocks, [{
    key: "deepClone",
    value: function deepClone(value) {
      return JSON.parse(JSON.stringify(value));
    }
  }, {
    key: "initCustomBlocks",
    value: function initCustomBlocks() {
      // 确保目录存在
      mkdirp_default.a.sync(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'blocks'));
      mkdirp_default.a.sync(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'images')); // 读取区块文件数据到状态池

      this.initBlocksData();
    }
  }, {
    key: "initBlocksData",
    value: function initBlocksData() {
      var _this2 = this;

      fs_extra_lib_default.a.readdirSync(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'blocks')).forEach(function (element) {
        _this2.blocksStorage[element] = JSON.parse(fs_extra_lib_default.a.readFileSync(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'blocks', element), 'utf8'));
      });
    }
  }, {
    key: "loadMaterialData",
    value: function loadMaterialData() {
      var _this3 = this;

      if (this.dataLoading) {
        this.progressVisible = true;
      }

      if (!this.materialData) {
        this.dataLoading = true;
        this.progressTitle = '下载物料数据';
        request_progress_default()(request_default()('http://ice.alicdn.com/iceland-assets/material-engine-production.json', function (error, response, body) {
          if (!error) {
            _this3.materialData = body;

            _this3.getEngine('react');

            _this3.loadIconData();
          } else if (_this3.requestCount < 3) {
            _this3.requestCount++;

            _this3.loadMaterialData();
          } else {
            _this3.requestCount = 0;
            _this3.errorVisible = true;
            _this3.dataLoading = false;
            _this3.progressVisible = false;
          }
        }), {}).on('progress', function (state) {
          _this3.materialProgress = Math.ceil(state.percentage * 50);
          _this3.progressSpeed = Math.floor(state.speed / 1024);
        });
      }
    }
  }, {
    key: "loadIconData",
    value: function loadIconData() {
      var _this4 = this;

      if (!this.iconData) {
        this.progressTitle = '下载 Iconfont 数据';
        request_progress_default()(request_default()('http://ice.alicdn.com/iceland-assets/iconData.json', function (error, response, body) {
          if (!error) {
            _this4.materialProgress = 100;
            _this4.iconData = body;
            _this4.dataLoading = false;
            _this4.progressVisible = false;

            _this4.dataTest();
          } else if (_this4.requestCount < 3) {
            _this4.requestCount++;

            _this4.loadIconData();
          } else {
            _this4.requestCount = 0;
            _this4.errorVisible = true;
            _this4.dataLoading = false;
            _this4.progressVisible = false;
          }
        }), {}).on('progress', function (state) {
          _this4.materialProgress = Math.ceil(state.percentage * 50) + 50;
          _this4.progressSpeed = Math.floor(state.speed / 1024);
        });
      }
    }
  }, {
    key: "getEngine",
    value: function getEngine() {
      if (!this.materialEngine) {
        this.materialEngine = services["a" /* default */].customBlocks.getEngine(JSON.parse(this.materialData));
      }
    }
  }, {
    key: "formReset",
    // 重置新建区块和重命名表单
    value: function formReset() {
      this.blockName = '';
      this.blockAlias = '';
      this.blockNameValidation = '';
      this.renameBlock = '';
      this.renameBlockName = '';
      this.renameBlockAlias = '';
    }
  }, {
    key: "getBlockImg",
    value: function getBlockImg(blockName) {
      try {
        var img = fs_extra_lib_default.a.readFileSync(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'images', blockName), 'base64');
        return img;
      } catch (e) {
        return '';
      }
    }
  }, {
    key: "close",
    value: function close() {
      this.visible = false;
    }
  }, {
    key: "open",
    value: function open() {
      this.visible = true; // 获取区块名默认值

      this.blockCounter = Object.keys(this.blocksStorage).length;
      this.getDefaultBlockName(this.blockCounter);
    }
  }, {
    key: "renameClose",
    value: function renameClose() {
      this.renameVisible = false;
    }
  }, {
    key: "renameOpen",
    value: function renameOpen(name) {
      this.renameVisible = true;
      this.renameBlockName = name;
      this.renameBlock = name;
      this.resetBlockAlias(this.blocksStorage[name].alias);
    }
  }, {
    key: "getDefaultBlockName",
    value: function getDefaultBlockName(blockCounter) {
      blockCounter++;
      var blockName = "block".concat(blockCounter);

      if (Object.prototype.hasOwnProperty.call(this.blocksStorage, blockName)) {
        this.getDefaultBlockName(blockCounter);
      } else {
        this.setBlockName(blockName);
      }
    } // 表单onChange + 验证

  }, {
    key: "setBlockName",
    value: function setBlockName() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      if (value.trim() === '' || !/^[a-z][0-9a-z]*$/i.test(value.trim())) {
        this.blockNameValidation = '区块名须由字母、数字组成, 字母开头';
        this.isDisabled = true;
      } else if (Object.prototype.hasOwnProperty.call(this.blocksStorage, value)) {
        this.isDisabled = true;
        this.blockNameValidation = '区块名重复';
      } else {
        this.blockNameValidation = '';
        this.isDisabled = false;
      }

      this.blockName = value;
    }
  }, {
    key: "setBlockAlias",
    value: function setBlockAlias() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this.blockAlias = value;
    } // 表单onChange时表单验证

  }, {
    key: "resetBlockName",
    value: function resetBlockName() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      if (value.trim() === '' || !/^[a-z][0-9a-z]*$/i.test(value.trim())) {
        this.blockNameValidation = '区块名须由字母、数字组成,字母开头';
        this.isDisabled = true;
      } else if (Object.prototype.hasOwnProperty.call(this.blocksStorage, value) && this.renameBlock !== value) {
        this.isDisabled = true;
        this.blockNameValidation = '区块名重复';
      } else {
        this.blockNameValidation = '';
        this.isDisabled = false;
      }

      this.renameBlockName = value;
    }
  }, {
    key: "resetBlockAlias",
    value: function resetBlockAlias() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this.renameBlockAlias = value;
    }
  }, {
    key: "refactorBlock",
    value: function refactorBlock() {
      if (this.renameBlock !== this.renameBlockName || this.renameBlockAlias !== this.blocksStorage[this.renameBlockName].alias) {
        this.blockEditing = true;
        this.refactorBlockFiles(this.renameBlock);
        this.blocksStorage[this.renameBlockName] = this.deepClone(this.blocksStorage[this.renameBlock]);
        this.blocksStorage[this.renameBlockName].alias = this.renameBlockAlias;

        if (this.renameBlock !== this.renameBlockName) {
          this.deleteBlock(this.renameBlock);
        }

        this.blockEditing = false;
        this.formReset();
      }
    }
  }, {
    key: "refactorBlockFiles",
    value: function refactorBlockFiles(blockName) {
      var blockData = fs_extra_lib_default.a.readFileSync(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'blocks', blockName), 'utf8');
      var newBlockData = JSON.parse(blockData);
      newBlockData.alias = this.renameBlockAlias;
      fs_extra_lib_default.a.writeFileSync(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'blocks', this.renameBlockName), JSON.stringify(newBlockData));
      var imageData = fs_extra_lib_default.a.readFileSync(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'images', blockName));
      fs_extra_lib_default.a.writeFileSync(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'images', this.renameBlockName), imageData);
    }
  }, {
    key: "dataTest",
    value: function dataTest() {
      if (!this.materialData || !this.iconData) {
        this.progressVisible = true;
        this.loadMaterialData();
      } else {
        this.openWorkBench();
      }
    }
  }, {
    key: "openWorkBench",
    value: function openWorkBench() {
      if (!this.materialData || !this.iconData) {
        return this.dataTest();
      }

      if (!this.workBenchWindow) {
        this.workBenchEventsBinding();

        if (this.blockJSON) {
          this.workBenchWindow.webContents.setUserAgent(JSON.stringify({
            name: this.blockName,
            json: this.blockJSON
          }));
        } else {
          this.workBenchWindow.webContents.setUserAgent(JSON.stringify({
            name: this.blockName
          }));
        }
      }
    }
  }, {
    key: "editBlock",
    value: function editBlock(name) {
      this.blockName = name;
      this.blockCode = this.blocksStorage[name].code;
      this.blockAlias = this.blocksStorage[name].alias;
      this.blockJSON = this.blocksStorage[name].json;
      this.dataTest();
    }
  }, {
    key: "workBenchEventsBinding",
    value: function workBenchEventsBinding() {
      var _this5 = this;

      this.blockEditing = true;
      this.workBenchWindow = new external_electron_["remote"].BrowserWindow({
        title: 'ICELAND - 区块搭建',
        width: 1280,
        minWidth: 1186,
        height: 720,
        minHeight: 720,
        show: false
      });
      this.workBenchWindow.once('ready-to-show', function () {
        _this5.workBenchWindow.show();
      });
      this.workBenchWindow.loadURL(presentWorkbenchPath);
      this.workBenchWindow.webContents.executeJavaScript("window.IceLand.materialData = ".concat(this.materialData), true); // 回调参数和官方文档描述不符

      this.workBenchWindow.webContents.on('console-message', function (level, sourceId, message, line) {
        logger["a" /* default */].info(message, line);

        if (line === 133 || line === 125) {
          var passBackData = JSON.parse(message);

          if (passBackData) {
            if (passBackData.type === 'icon') {
              _this5.workBenchWindow.webContents.executeJavaScript("window.IceLand.iconData = ".concat(_this5.iconData), true);
            } else if (passBackData.type === 'offset') {
              _this5.paintOffset = passBackData.value;
            } else if (passBackData.type === 'height') {
              _this5.paintHeight = passBackData.value + 72;
            } else if (passBackData.type === 'width') {
              _this5.paintWidth = passBackData.value + 72;
              _this5.capture = true;
            } else if (passBackData.type === 'Group') {
              _this5.blockSaving = true;
              var JSONObj = passBackData;
              JSONObj.props.style.position = 'relative';
              _this5.blockJSON = JSON.stringify(JSONObj);

              _this5.jsonTransfer();
            }
          }
        }
      });
      this.workBenchWindow.on('closed', function () {
        _this5.workBenchWindow = null;

        _this5.formReset();
      });
      this.workBenchWindow.on('close', function (event) {
        if (!_this5.blockSaving) {
          _this5.workBenchWindow.destroy();

          _this5.blockJSON = '';
          _this5.blockEditing = false;
        } else {
          event.preventDefault();
        }
      });
    } // json转代码 + 抽取依赖 + 代码美化

  }, {
    key: "jsonTransfer",
    value: function jsonTransfer() {
      var json = JSON.parse(this.blockJSON);
      services["a" /* default */].customBlocks.dsl2code(json, this.materialEngine, this.saveCustomBlock);
    }
  }, {
    key: "deleteBlock",
    value: function deleteBlock(name) {
      delete this.blocksStorage[name];
      fs_extra_lib_default.a.remove(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'blocks', name), function (error) {
        if (error) {
          logger["a" /* default */].error(error);
        } else {
          logger["a" /* default */].info('删除区块数据');
        }
      });
      fs_extra_lib_default.a.remove(external_path_default.a.join(custom_blocks_defaultWorkspacePath, 'images', name), function (error) {
        if (error) {
          logger["a" /* default */].error(error);
        } else {
          logger["a" /* default */].info('删除区块截图');
        }
      });
    }
  }]);

  return CustomBlocks;
}(), custom_blocks_temp), (custom_blocks_descriptor = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "blockEditing", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), custom_blocks_descriptor2 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "workBenchWindow", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), custom_blocks_descriptor3 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), custom_blocks_descriptor4 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "showCustomBlocks", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), custom_blocks_descriptor5 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "isDisabled", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), custom_blocks_descriptor6 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "blockName", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), custom_blocks_descriptor7 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "blockAlias", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), custom_blocks_descriptor8 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "currentBlock", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), custom_blocks_descriptor9 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "blockJSON", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), custom_blocks_descriptor10 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "blockCode", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), custom_blocks_descriptor11 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "blockNameValidation", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), custom_blocks_descriptor12 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "renameVisible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), custom_blocks_descriptor13 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "renameBlockName", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), custom_blocks_descriptor14 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "renameBlockAlias", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), custom_blocks_descriptor15 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "renameBlock", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), custom_blocks_descriptor16 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "blockDeps", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), _descriptor17 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "blocksStorage", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor18 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "showModal", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor19 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "previewBlock", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor20 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "materialProgress", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor21 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "progressVisible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor22 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "progressRemaining", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor23 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "progressSpeed", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), _descriptor24 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "progressTitle", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), _descriptor25 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "errorVisible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), _descriptor26 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "openProgress", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this6 = this;

    return function () {
      _this6.progressVisible = true;
    };
  }
}), _descriptor27 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "closeProgress", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this7 = this;

    return function () {
      _this7.progressVisible = false;
    };
  }
}), _descriptor28 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "closeError", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this8 = this;

    return function () {
      _this8.errorVisible = false;
    };
  }
}), _descriptor29 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "openModal", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this9 = this;

    return function (blockName) {
      _this9.showModal = true;
      _this9.previewBlock.name = blockName;
      _this9.previewBlock.screenshot = "data:image/png;base64,".concat(_this9.getBlockImg(blockName));
    };
  }
}), _descriptor30 = custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "closeModal", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this10 = this;

    return function () {
      _this10.showModal = false;
    };
  }
}), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "getBlockImg", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "getBlockImg"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "close", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "close"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "open", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "open"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "renameClose", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "renameClose"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "renameOpen", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "renameOpen"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "setBlockName", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "setBlockName"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "setBlockAlias", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "setBlockAlias"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "resetBlockName", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "resetBlockName"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "resetBlockAlias", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "resetBlockAlias"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "refactorBlock", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "refactorBlock"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "dataTest", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "dataTest"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "openWorkBench", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "openWorkBench"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "editBlock", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "editBlock"), custom_blocks_class.prototype), custom_blocks_applyDecoratedDescriptor(custom_blocks_class.prototype, "deleteBlock", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(custom_blocks_class.prototype, "deleteBlock"), custom_blocks_class.prototype)), custom_blocks_class);
/* harmony default export */ var custom_blocks = (new custom_blocks_CustomBlocks());
// EXTERNAL MODULE: ./renderer/node_modules/@icedesign/base/lib/feedback/index.js
var feedback = __webpack_require__(26);
var feedback_default = /*#__PURE__*/__webpack_require__.n(feedback);

// CONCATENATED MODULE: ./renderer/src/lib/equal-source.js
function removeSchame(url) {
  return url.replace(/https?:\/\//, '//');
}
/**
 * 比对物料源是否相等
 * @param {string} source1 物料源地址1
 * @param {string} source2 物料源地址2
 */


var equalSource = function equalSource(source1, source2) {
  return removeSchame(source1) === removeSchame(source2);
};

/* harmony default export */ var equal_source = (equalSource);
// CONCATENATED MODULE: ./renderer/src/stores/settings-materials.js


var settings_materials_class, settings_materials_descriptor, settings_materials_descriptor2, settings_materials_descriptor3, settings_materials_descriptor4, settings_materials_descriptor5, settings_materials_temp;

function settings_materials_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { settings_materials_defineProperty(target, key, source[key]); }); } return target; }

function settings_materials_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function settings_materials_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function settings_materials_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function settings_materials_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function settings_materials_createClass(Constructor, protoProps, staticProps) { if (protoProps) settings_materials_defineProperties(Constructor.prototype, protoProps); if (staticProps) settings_materials_defineProperties(Constructor, staticProps); return Constructor; }

function settings_materials_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function settings_materials_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }






var settings_materials_settings = services["a" /* default */].settings,
    settings_materials_shared = services["a" /* default */].shared;
var settings_materials_SettingsMaterials = (settings_materials_class = (settings_materials_temp =
/*#__PURE__*/
function () {
  // 记录正在编辑的自定义物料源数据
  function SettingsMaterials() {
    var _this = this;

    settings_materials_classCallCheck(this, SettingsMaterials);

    settings_materials_initializerDefineProperty(this, "builtInMaterialsValue", settings_materials_descriptor, this);

    settings_materials_initializerDefineProperty(this, "customMaterialsValue", settings_materials_descriptor2, this);

    settings_materials_initializerDefineProperty(this, "edittingCustomMaterialValue", settings_materials_descriptor3, this);

    this.notification = function (message) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';
      clearTimeout(_this.notificationTimer || 0);
      _this.notificationTimer = setTimeout(function () {
        lib_default.a.destroy();
        lib_default.a[type]({
          message: message
        });
      }, 300);
    };

    settings_materials_initializerDefineProperty(this, "updateCustomMaterialName", settings_materials_descriptor4, this);

    settings_materials_initializerDefineProperty(this, "updateCustomMaterialSource", settings_materials_descriptor5, this);

    this.getMaterialsChecked = function (materials) {
      var materialsChecked = {};
      materials.forEach(function (material) {
        materialsChecked = Object.assign(materialsChecked, settings_materials_defineProperty({}, material.key, material.checked));
      });
      return materialsChecked;
    };

    this.filterMaterialsByChecked = function (checked, selectedMaterial, materials) {
      return materials.map(function (m) {
        if (equal_source(m.source, selectedMaterial.source)) {
          m.checked = checked;
        }

        return m;
      });
    };

    this.filterBuiltInMaterials = function (materials) {
      // 如果用户物料源配置是否在推荐的物料源集合里，如果在则默认打开推荐列表的选项
      var builtInMaterialsValue = settings_materials_shared.defaultMaterials.map(function (recommendMaterial) {
        // TODO: 排查 shared.defaultMaterials 变成类mobx的observable的对象的原因
        // 这里是一个类mobx的observable的对象，需要通过解构转换成简单js对象，否则渲染时读取为空对象，toJS无效。
        recommendMaterial = settings_materials_objectSpread({}, recommendMaterial);
        var hasInUserMaterials = materials.some(function (userMaterial) {
          return equal_source(recommendMaterial.source, userMaterial.source) && userMaterial.builtIn;
        });
        recommendMaterial.checked = hasInUserMaterials;
        return recommendMaterial;
      });
      return filterMaterial(builtInMaterialsValue); // 过滤内网用户可见
    };

    this.filterCustomMaterials = function (materials) {
      return materials.filter(function (material) {
        return !material.builtIn;
      });
    };

    var _materials = settings_materials_settings.get('materials') || [];

    _materials = _materials.filter(function (material) {
      return material.source && material.name;
    }).map(function (item) {
      return settings_materials_objectSpread({}, item);
    });
    this.customMaterialsValue = this.filterCustomMaterials(_materials);
    this.builtInMaterialsValue = this.filterBuiltInMaterials(_materials);
  }

  settings_materials_createClass(SettingsMaterials, [{
    key: "check",
    value: function check() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        // 检测物料名以及 source
        var hasEmpty = _this2.customMaterialsValue.some(function (material) {
          return material.name.trim() === '' || material.source.trim() === '';
        });

        if (hasEmpty) {
          feedback_default.a.toast.error('请完善已输入的物料信息');

          reject(false);
        } else {
          _this2.customMaterialsValue = _this2.customMaterialsValue.map(function (material) {
            if ('update' in material) {
              delete material.update;
            }

            if ('editing' in material) {
              delete material.editing;
            }

            return material;
          });
          resolve(true);
        }
      });
    }
  }, {
    key: "resetBuiltInMaterials",
    value: function resetBuiltInMaterials() {
      var defaultMaterials = settings_materials_shared.defaultMaterials;
      var saveMaterials = defaultMaterials.map(function (item) {
        return settings_materials_objectSpread({}, item);
      });
      this.builtInMaterialsValue = this.filterBuiltInMaterials(saveMaterials);
      settings_materials_settings.set('materials', saveMaterials);
      settings_materials_settings.set('isMaterialsBackup', false);
      this.notification('官方物料源重置成功');
    }
  }, {
    key: "save",
    value: function save() {
      var _this3 = this;

      this.check().then(function () {
        var builtInMaterialsValue = _this3.getSaveBuiltInMaterials();

        var customMaterialsValue = _this3.customMaterials;
        var saveMaterials = [];
        Array.prototype.push.apply(saveMaterials, builtInMaterialsValue);
        Array.prototype.push.apply(saveMaterials, customMaterialsValue);
        settings_materials_settings.set('materials', saveMaterials);
        _this3.edittingCustomMaterialValue = null;

        _this3.notification('设置变更已保存');
      }).catch(function () {});
    }
  }, {
    key: "addCustomMaterials",
    value: function addCustomMaterials() {
      if (this.edittingCustomMaterialValue) {
        return feedback_default.a.toast.error('同时只能编辑一个自定义物料源');
      }

      var newMaterial = {
        name: '',
        source: '',
        builtIn: false,
        editing: true,
        type: 'add'
      };
      this.edittingCustomMaterialValue = newMaterial;
      this.customMaterialsValue.push(newMaterial);
    }
  }, {
    key: "removeCustomMaterial",
    value: function removeCustomMaterial(index) {
      this.customMaterialsValue.splice(index, 1);
      this.save();
    }
  }, {
    key: "editCustomMaterial",
    value: function editCustomMaterial(index) {
      if (this.edittingCustomMaterialValue) {
        return feedback_default.a.toast.error('同时只能编辑一个自定义物料源');
      }

      this.edittingCustomMaterialValue = Object(external_window_mobx_["toJS"])(this.customMaterialsValue[index]);
      this.customMaterialsValue[index].update = true;
      this.customMaterialsValue[index].type = 'edit';
    }
  }, {
    key: "cancelEditCustomMaterial",
    value: function cancelEditCustomMaterial(index) {
      if (this.customMaterialsValue[index].type === 'add') {
        // 新增后取消
        this.customMaterialsValue.splice(index, 1);
        this.edittingCustomMaterialValue = null;
      } else {
        // 编辑后取消
        this.customMaterialsValue[index] = this.edittingCustomMaterialValue;
        this.customMaterialsValue[index].update = false;
        this.edittingCustomMaterialValue = null;
      }
    }
  }, {
    key: "switchCustomMaterial",
    value: function switchCustomMaterial(checked, selectedMaterial) {
      this.customMaterialsValue = this.filterMaterialsByChecked(checked, selectedMaterial, this.customMaterialsValue);
      this.save();
    }
  }, {
    key: "checkSwitch",
    value: function checkSwitch(checked, selectedMaterial) {
      var _this4 = this;

      return new Promise(function (resove, reject) {
        var materialsChecked = _this4.getMaterialsChecked(_this4.builtInMaterialsValue); // 所有已勾选的物料用于判断冲突


        if (selectedMaterial.key === 'fusion' && materialsChecked.ice && checked) {
          _this4.notification('Fusion 物料源和飞冰物料源不能同时选择', 'error');

          reject(true);
        } else if (selectedMaterial.key === 'ice' && materialsChecked.fusion && checked) {
          _this4.notification('飞冰物料源和 Fusion 物料源不能同时选择', 'error');

          reject(true);
        } else {
          resove(true);
        }
      });
    }
  }, {
    key: "switchBuitInMaterial",
    value: function switchBuitInMaterial(checked, selectedMaterial) {
      var _this5 = this;

      this.checkSwitch(checked, selectedMaterial).then(function () {
        _this5.builtInMaterialsValue = _this5.filterMaterialsByChecked(checked, selectedMaterial, _this5.builtInMaterials);

        _this5.save();
      }).catch(function () {});
    }
    /**
     * 获取物料源的选中状态
     */

  }, {
    key: "getSaveBuiltInMaterials",
    value: function getSaveBuiltInMaterials() {
      return this.builtInMaterials.filter(function (m) {
        return m.checked === true;
      }).map(function (item) {
        return {
          name: item.name,
          source: item.source,
          backupSource: item.backupSource,
          builtIn: item.builtIn,
          type: item.type
        };
      });
    }
  }, {
    key: "builtInMaterials",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.builtInMaterialsValue);
    }
  }, {
    key: "customMaterials",
    get: function get() {
      return Object(external_window_mobx_["toJS"])(this.customMaterialsValue);
    }
  }]);

  return SettingsMaterials;
}(), settings_materials_temp), (settings_materials_descriptor = settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "builtInMaterialsValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), settings_materials_descriptor2 = settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "customMaterialsValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), settings_materials_descriptor3 = settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "edittingCustomMaterialValue", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "builtInMaterials", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(settings_materials_class.prototype, "builtInMaterials"), settings_materials_class.prototype), settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "customMaterials", [external_window_mobx_["computed"]], Object.getOwnPropertyDescriptor(settings_materials_class.prototype, "customMaterials"), settings_materials_class.prototype), settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "addCustomMaterials", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(settings_materials_class.prototype, "addCustomMaterials"), settings_materials_class.prototype), settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "removeCustomMaterial", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(settings_materials_class.prototype, "removeCustomMaterial"), settings_materials_class.prototype), settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "editCustomMaterial", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(settings_materials_class.prototype, "editCustomMaterial"), settings_materials_class.prototype), settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "cancelEditCustomMaterial", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(settings_materials_class.prototype, "cancelEditCustomMaterial"), settings_materials_class.prototype), settings_materials_descriptor4 = settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "updateCustomMaterialName", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this6 = this;

    return function (index, value) {
      _this6.customMaterialsValue[index].name = value;
    };
  }
}), settings_materials_descriptor5 = settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "updateCustomMaterialSource", [external_window_mobx_["action"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    var _this7 = this;

    return function (index, value) {
      _this7.customMaterialsValue[index].source = value;
    };
  }
}), settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "switchCustomMaterial", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(settings_materials_class.prototype, "switchCustomMaterial"), settings_materials_class.prototype), settings_materials_applyDecoratedDescriptor(settings_materials_class.prototype, "switchBuitInMaterial", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(settings_materials_class.prototype, "switchBuitInMaterial"), settings_materials_class.prototype)), settings_materials_class);
/* harmony default export */ var settings_materials = (new settings_materials_SettingsMaterials());
// CONCATENATED MODULE: ./renderer/src/stores/user.js
var user_class, user_descriptor, user_descriptor2, user_temp;

function user_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function user_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function user_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function user_createClass(Constructor, protoProps, staticProps) { if (protoProps) user_defineProperties(Constructor.prototype, protoProps); if (staticProps) user_defineProperties(Constructor, staticProps); return Constructor; }

function user_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function user_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }


var user_User = (user_class = (user_temp =
/*#__PURE__*/
function () {
  function User() {
    user_classCallCheck(this, User);

    user_initializerDefineProperty(this, "visible", user_descriptor, this);

    user_initializerDefineProperty(this, "data", user_descriptor2, this);
  }

  user_createClass(User, [{
    key: "open",
    value: function open() {
      // 未登录时可唤起
      if (this.data && !this.data.workid) {
        this.visible = true;
      }
    }
  }, {
    key: "close",
    value: function close() {
      this.visible = false;
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.visible = !this.visible;
    }
  }]);

  return User;
}(), user_temp), (user_descriptor = user_applyDecoratedDescriptor(user_class.prototype, "visible", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), user_descriptor2 = user_applyDecoratedDescriptor(user_class.prototype, "data", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), user_applyDecoratedDescriptor(user_class.prototype, "open", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(user_class.prototype, "open"), user_class.prototype), user_applyDecoratedDescriptor(user_class.prototype, "close", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(user_class.prototype, "close"), user_class.prototype), user_applyDecoratedDescriptor(user_class.prototype, "toggle", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(user_class.prototype, "toggle"), user_class.prototype)), user_class);
/* harmony default export */ var user = (new user_User());
// EXTERNAL MODULE: ./renderer/node_modules/simple-git/promise.js
var promise = __webpack_require__(296);
var promise_default = /*#__PURE__*/__webpack_require__.n(promise);

// CONCATENATED MODULE: ./renderer/src/lib/git-tools.js


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function git_tools_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * 命令文档：https://web.npm.alibaba-inc.com/package/simple-git
 */

var gitToolsMap = {
  originRemote: {
    // 获取远程仓库
    name: 'getRemotes',
    errMsg: 'git getRemotes 失败',
    handleFunc: function handleFunc(result) {
      return result.filter(function (_ref) {
        var name = _ref.name;
        return name === 'origin';
      });
    }
  },
  branches: {
    // 获取所有分支
    name: 'branchLocal',
    errMsg: 'git branchLocal 失败'
  },
  status: {
    // 获取当前分支文件状态
    name: 'status',
    errMsg: 'git status 失败'
  },
  lastCommit: {
    // 获取最新的 Commit 信息
    name: 'log',
    errMsg: 'git lastCommit 失败'
  },
  checkIsRepo: {
    // 检查当前输入的是否是一个repo地址
    name: 'checkIsRepo',
    errMsg: '仓库地址错误',
    errorless: true
  },
  add: {
    // git add
    name: 'add',
    errMsg: 'git add 失败请重试'
  },
  commit: {
    // git commit
    name: 'commit',
    errMsg: 'git commit 失败请重试'
  },
  push: {
    // git push
    name: 'push',
    errMsg: 'git push 失败请重试'
  },
  pull: {
    // git pull
    name: 'pull',
    errMsg: 'git pull 失败请重试'
  },
  init: {
    // git init
    name: 'init',
    errMsg: 'git int 失败请重试'
  },
  removeRemote: {
    // 移除当前remote
    name: 'removeRemote',
    errMsg: 'git remote remove 失败请重试'
  },
  addRemote: {
    // 添加当前remote
    name: 'addRemote',
    errMsg: 'git remote add 失败请重试'
  },
  fetch: {
    // git fetch
    name: 'fetch',
    errMsg: 'git fetch 失败请重试'
  },
  branch: {
    // git branch
    name: 'branch',
    errMsg: 'git branch 失败请重试'
  },
  checkout: {
    // git checkout 参数： checkoutBranch
    name: 'checkout',
    errMsg: 'git checkout 失败请重试'
  },
  checkoutBranch: {
    // git checkout 参数：checkoutBranch, branchOrigin
    name: 'checkoutBranch',
    errMsg: 'git checkout -b 失败请重试'
  },
  checkoutLocalBranch: {
    // 切新分支 参数：newBranch
    name: 'checkoutLocalBranch',
    errMsg: 'git checkoutLocalBranch 失败请重试'
  }
};

var git_tools_GitTools = function GitTools(cwd) {
  var _this = this;

  git_tools_classCallCheck(this, GitTools);

  this.git = function () {
    return promise_default()(_this.cwd);
  };

  this.run =
  /*#__PURE__*/
  function () {
    var _ref2 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(toolName) {
      var _gitToolsMap$toolName,
          name,
          errMsg,
          handleFunc,
          errorless,
          result,
          _len,
          opts,
          _key,
          _this$git,
          _args = arguments;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (_this.cwd) {
                _context.next = 3;
                break;
              }

              logger["a" /* default */].debug('git-tools: 当前项目路径不存在');
              return _context.abrupt("return");

            case 3:
              _gitToolsMap$toolName = gitToolsMap[toolName], name = _gitToolsMap$toolName.name, errMsg = _gitToolsMap$toolName.errMsg, handleFunc = _gitToolsMap$toolName.handleFunc, errorless = _gitToolsMap$toolName.errorless;
              _context.prev = 4;

              for (_len = _args.length, opts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                opts[_key - 1] = _args[_key];
              }

              if (!(opts[0] !== undefined)) {
                _context.next = 12;
                break;
              }

              _context.next = 9;
              return (_this$git = _this.git())[name].apply(_this$git, opts);

            case 9:
              result = _context.sent;
              _context.next = 15;
              break;

            case 12:
              _context.next = 14;
              return _this.git()[name]();

            case 14:
              result = _context.sent;

            case 15:
              if (!(typeof handleFunc === 'function')) {
                _context.next = 17;
                break;
              }

              return _context.abrupt("return", handleFunc(result));

            case 17:
              return _context.abrupt("return", result);

            case 20:
              _context.prev = 20;
              _context.t0 = _context["catch"](4);
              _context.t0.message = "git ".concat(toolName, " error: ").concat(_context.t0.message);
              logger["a" /* default */].error(_context.t0);

              if (!errorless) {
                _this.showError(_context.t0, errMsg);
              }

              throw _context.t0;

            case 26:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[4, 20]]);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  this.showError = function (error, msg) {
    dialog_default.a.alert({
      title: '提示',
      content: React.createElement("div", {
        style: {
          width: 400
        }
      }, error && error.message || msg)
    });
  };

  this.cwd = cwd;
};

/* harmony default export */ var git_tools = (git_tools_GitTools);
// CONCATENATED MODULE: ./renderer/src/stores/git.js


var git_class, git_descriptor, git_descriptor2, git_descriptor3, git_descriptor4, git_descriptor5, git_descriptor6, git_descriptor7, git_descriptor8, git_descriptor9, git_descriptor10, git_descriptor11, git_descriptor12, git_descriptor13, git_descriptor14, git_descriptor15, git_descriptor16, git_descriptor17, git_descriptor18, git_descriptor19, git_descriptor20, git_descriptor21, git_descriptor22, git_descriptor23, git_descriptor24, git_descriptor25, git_descriptor26, git_descriptor27, git_temp;

function git_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function git_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { git_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { git_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function git_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function git_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function git_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function git_createClass(Constructor, protoProps, staticProps) { if (protoProps) git_defineProperties(Constructor.prototype, protoProps); if (staticProps) git_defineProperties(Constructor, staticProps); return Constructor; }

function git_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }

function git_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }




 // store


var git_Git = (git_class = (git_temp =
/*#__PURE__*/
function () {
  function Git() {
    git_classCallCheck(this, Git);

    git_initializerDefineProperty(this, "gitTools", git_descriptor, this);

    git_initializerDefineProperty(this, "loading", git_descriptor2, this);

    git_initializerDefineProperty(this, "showMainPanel", git_descriptor3, this);

    git_initializerDefineProperty(this, "isGit", git_descriptor4, this);

    git_initializerDefineProperty(this, "isRepo", git_descriptor5, this);

    git_initializerDefineProperty(this, "originRemote", git_descriptor6, this);

    git_initializerDefineProperty(this, "remoteUrl", git_descriptor7, this);

    git_initializerDefineProperty(this, "currentBranch", git_descriptor8, this);

    git_initializerDefineProperty(this, "status", git_descriptor9, this);

    git_initializerDefineProperty(this, "currentStep", git_descriptor10, this);

    git_initializerDefineProperty(this, "branches", git_descriptor11, this);

    git_initializerDefineProperty(this, "checkoutBranch", git_descriptor12, this);

    git_initializerDefineProperty(this, "branchOrigin", git_descriptor13, this);

    git_initializerDefineProperty(this, "branchType", git_descriptor14, this);

    git_initializerDefineProperty(this, "branchesCheckout", git_descriptor15, this);

    git_initializerDefineProperty(this, "selectedFiles", git_descriptor16, this);

    git_initializerDefineProperty(this, "unstagedFiles", git_descriptor17, this);

    git_initializerDefineProperty(this, "commitMsg", git_descriptor18, this);

    git_initializerDefineProperty(this, "gitIniting", git_descriptor19, this);

    git_initializerDefineProperty(this, "gitCommitting", git_descriptor20, this);

    git_initializerDefineProperty(this, "gitNewBranching", git_descriptor21, this);

    git_initializerDefineProperty(this, "reloading", git_descriptor22, this);

    git_initializerDefineProperty(this, "removeAndAddRemoting", git_descriptor23, this);

    git_initializerDefineProperty(this, "gitRemoteAdding", git_descriptor24, this);

    git_initializerDefineProperty(this, "visibleDialogChangeRemote", git_descriptor25, this);

    git_initializerDefineProperty(this, "visibleDialogNewBranch", git_descriptor26, this);

    git_initializerDefineProperty(this, "visibleDialogBranches", git_descriptor27, this);
  }

  git_createClass(Git, [{
    key: "initTools",
    value: function initTools() {
      var _Projects$currentProj = stores_projects["a" /* default */].currentProject,
          currentProject = _Projects$currentProj === void 0 ? {} : _Projects$currentProj;
      var cwd = currentProject.fullPath;

      if (cwd && path_exists_default.a.sync(cwd)) {
        this.gitTools = new git_tools(cwd);
      }
    }
  }, {
    key: "init",
    value: function () {
      var _init = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                this.gitIniting = true;
                _context.next = 4;
                return this.gitTools.run('init');

              case 4:
                _context.next = 6;
                return this.doEmptyCommit();

              case 6:
                this.gitIniting = false;
                this.nextStep();
                return _context.abrupt("return", true);

              case 11:
                _context.prev = 11;
                _context.t0 = _context["catch"](0);
                this.gitIniting = false;
                return _context.abrupt("return", false);

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 11]]);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "doEmptyCommit",
    value: function () {
      var _doEmptyCommit = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.gitTools.run('commit', 'init commit', [], {
                  '--allow-empty': null
                });

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function doEmptyCommit() {
        return _doEmptyCommit.apply(this, arguments);
      }

      return doEmptyCommit;
    }()
  }, {
    key: "reset",
    value: function reset() {
      this.showMainPanel = false;
      this.currentStep = 0;
    }
  }, {
    key: "checkIsRepo",
    value: function () {
      var _checkIsRepo = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        var _Projects$currentProj2, currentProject, cwd, isRepo, isGit, originRemote, remoteUrl, branches, status;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _Projects$currentProj2 = stores_projects["a" /* default */].currentProject, currentProject = _Projects$currentProj2 === void 0 ? {} : _Projects$currentProj2;
                cwd = currentProject.fullPath;
                this.loading = true;
                _context3.prev = 3;
                _context3.next = 6;
                return this.gitTools.run('checkIsRepo');

              case 6:
                isRepo = _context3.sent;
                isGit = isRepo && path_exists_default.a.sync(external_path_default.a.join(cwd, '.git'));

                if (!isGit) {
                  _context3.next = 26;
                  break;
                }

                _context3.next = 11;
                return this.gitTools.run('originRemote', true);

              case 11:
                originRemote = _context3.sent;
                originRemote = originRemote[0] || {};
                remoteUrl = originRemote.refs && originRemote.refs.push || '';
                _context3.next = 16;
                return this.gitTools.run('branches');

              case 16:
                branches = _context3.sent;
                _context3.next = 19;
                return this.gitTools.run('status');

              case 19:
                status = _context3.sent;
                this.originRemote = originRemote;
                this.remoteUrl = remoteUrl;
                this.currentBranch = branches.current;
                this.status = status;
                this.unstagedFiles = this.getUnstagedFiles(status);

                if (remoteUrl) {
                  this.showMainPanel = true;
                } else {
                  this.currentStep = 1;
                }

              case 26:
                this.isGit = isGit;
                this.isRepo = isRepo;
                this.loading = false;
                _context3.next = 36;
                break;

              case 31:
                _context3.prev = 31;
                _context3.t0 = _context3["catch"](3);
                this.isGit = false;
                this.loading = false;
                throw _context3.t0;

              case 36:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[3, 31]]);
      }));

      function checkIsRepo() {
        return _checkIsRepo.apply(this, arguments);
      }

      return checkIsRepo;
    }()
  }, {
    key: "getUnstagedFiles",
    value: function getUnstagedFiles(status) {
      var statusMap = ['conflicted', 'not_added', 'modified', 'created', 'deleted', 'renamed'];
      var unstagedFiles = [];

      if (status && status.files && status.files.length > 0) {
        statusMap.forEach(function (item) {
          unstagedFiles = unstagedFiles.concat(status[item]);
        });
      }

      return unstagedFiles;
    }
  }, {
    key: "getOriginRemote",
    value: function () {
      var _getOriginRemote = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                _context4.next = 3;
                return this.gitTools.run('originRemote');

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 6:
                _context4.prev = 6;
                _context4.t0 = _context4["catch"](0);
                return _context4.abrupt("return", false);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[0, 6]]);
      }));

      function getOriginRemote() {
        return _getOriginRemote.apply(this, arguments);
      }

      return getOriginRemote;
    }()
  }, {
    key: "removeRemote",
    value: function () {
      var _removeRemote = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.prev = 0;
                _context5.next = 3;
                return this.gitTools.run('removeRemote', 'origin');

              case 3:
                return _context5.abrupt("return", _context5.sent);

              case 6:
                _context5.prev = 6;
                _context5.t0 = _context5["catch"](0);
                return _context5.abrupt("return", false);

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[0, 6]]);
      }));

      function removeRemote() {
        return _removeRemote.apply(this, arguments);
      }

      return removeRemote;
    }()
  }, {
    key: "addRemote",
    value: function () {
      var _addRemote = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6(remoteUrl) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.prev = 0;
                this.gitRemoteAdding = true;
                _context6.next = 4;
                return this.gitTools.run('addRemote', 'origin', remoteUrl);

              case 4:
                this.gitRemoteAdding = false;
                return _context6.abrupt("return", true);

              case 8:
                _context6.prev = 8;
                _context6.t0 = _context6["catch"](0);
                this.gitRemoteAdding = false;
                return _context6.abrupt("return", false);

              case 12:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[0, 8]]);
      }));

      function addRemote(_x) {
        return _addRemote.apply(this, arguments);
      }

      return addRemote;
    }()
  }, {
    key: "add",
    value: function () {
      var _add = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee7(files) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.gitTools.run('add', files || this.selectedFiles);

              case 2:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function add(_x2) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
  }, {
    key: "commit",
    value: function () {
      var _commit = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee8(msg) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.gitTools.run('commit', msg || this.commitMsg);

              case 2:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function commit(_x3) {
        return _commit.apply(this, arguments);
      }

      return commit;
    }()
  }, {
    key: "addAndCommit",
    value: function () {
      var _addAndCommit = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee9(files, msg) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.prev = 0;
                this.gitCommitting = true;
                _context9.next = 4;
                return this.add(files);

              case 4:
                _context9.next = 6;
                return this.commit(msg);

              case 6:
                this.gitCommitting = false;
                this.resetCommit();
                return _context9.abrupt("return", true);

              case 11:
                _context9.prev = 11;
                _context9.t0 = _context9["catch"](0);
                this.gitCommitting = false;
                this.resetCommit();
                return _context9.abrupt("return", false);

              case 16:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[0, 11]]);
      }));

      function addAndCommit(_x4, _x5) {
        return _addAndCommit.apply(this, arguments);
      }

      return addAndCommit;
    }()
  }, {
    key: "newBranch",
    value: function () {
      var _newBranch = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee10(value) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.prev = 0;
                this.gitNewBranching = true;
                _context10.next = 4;
                return this.gitTools.run('checkoutLocalBranch', value);

              case 4:
                this.gitNewBranching = false;
                return _context10.abrupt("return", true);

              case 8:
                _context10.prev = 8;
                _context10.t0 = _context10["catch"](0);
                this.gitNewBranching = false;
                return _context10.abrupt("return", false);

              case 12:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[0, 8]]);
      }));

      function newBranch(_x6) {
        return _newBranch.apply(this, arguments);
      }

      return newBranch;
    }()
  }, {
    key: "getBranches",
    value: function () {
      var _getBranches = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee11() {
        var originBranches, localBranches, local, origin, branchesCheckout;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                feedback_default.a.toast.show({
                  type: 'loading',
                  content: 'Git fetching'
                });

                _context11.prev = 1;
                _context11.next = 4;
                return this.gitTools.run('fetch');

              case 4:
                _context11.next = 6;
                return this.gitTools.run('branch', ['--remotes', '--list', '-v']);

              case 6:
                originBranches = _context11.sent;
                _context11.next = 9;
                return this.gitTools.run('branches');

              case 9:
                localBranches = _context11.sent;
                local = localBranches.all.map(function (value) {
                  return {
                    label: value,
                    value: value
                  };
                });
                origin = originBranches.all.map(function (value) {
                  return {
                    label: value,
                    value: value
                  };
                });
                branchesCheckout = [];

                if (local.length > 0) {
                  branchesCheckout.push({
                    label: 'local',
                    value: 'local',
                    children: local
                  });
                }

                if (origin.length > 0) {
                  branchesCheckout.push({
                    label: 'origin',
                    value: 'origin',
                    children: origin
                  });
                }

                feedback_default.a.toast.hide();

                if (!(branchesCheckout.length === 0)) {
                  _context11.next = 19;
                  break;
                }

                feedback_default.a.toast.prompt('本地和远程仓库均无分支，请先 push');

                return _context11.abrupt("return");

              case 19:
                this.branchesCheckout = branchesCheckout;
                this.visibleDialogBranches = true;
                _context11.next = 27;
                break;

              case 23:
                _context11.prev = 23;
                _context11.t0 = _context11["catch"](1);

                feedback_default.a.toast.hide();

                this.visibleDialogBranches = false;

              case 27:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this, [[1, 23]]);
      }));

      function getBranches() {
        return _getBranches.apply(this, arguments);
      }

      return getBranches;
    }()
  }, {
    key: "checkout",
    value: function () {
      var _checkout = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee12() {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.prev = 0;
                _context12.next = 3;
                return this.gitTools.run('checkout', this.checkoutBranch);

              case 3:
                this.visibleDialogBranches = false;
                return _context12.abrupt("return", true);

              case 7:
                _context12.prev = 7;
                _context12.t0 = _context12["catch"](0);
                this.visibleDialogBranches = false;
                return _context12.abrupt("return", false);

              case 11:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this, [[0, 7]]);
      }));

      function checkout() {
        return _checkout.apply(this, arguments);
      }

      return checkout;
    }()
  }, {
    key: "checkoutLocalBranch",
    value: function () {
      var _checkoutLocalBranch = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee13() {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.prev = 0;
                _context13.next = 3;
                return this.gitTools.run('checkoutBranch', this.checkoutBranch, this.branchOrigin);

              case 3:
                this.visibleDialogBranches = false;
                return _context13.abrupt("return", true);

              case 7:
                _context13.prev = 7;
                _context13.t0 = _context13["catch"](0);
                this.visibleDialogBranches = false;
                return _context13.abrupt("return", false);

              case 11:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this, [[0, 7]]);
      }));

      function checkoutLocalBranch() {
        return _checkoutLocalBranch.apply(this, arguments);
      }

      return checkoutLocalBranch;
    }()
  }, {
    key: "push",
    value: function () {
      var _push = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee14() {
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                feedback_default.a.toast.show({
                  type: 'loading',
                  content: 'Git push'
                });

                _context14.prev = 1;
                _context14.next = 4;
                return this.gitTools.run('push', 'origin', this.currentBranch);

              case 4:
                feedback_default.a.toast.hide();

                return _context14.abrupt("return", true);

              case 8:
                _context14.prev = 8;
                _context14.t0 = _context14["catch"](1);

                feedback_default.a.toast.hide();

                return _context14.abrupt("return", false);

              case 12:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this, [[1, 8]]);
      }));

      function push() {
        return _push.apply(this, arguments);
      }

      return push;
    }()
  }, {
    key: "pull",
    value: function () {
      var _pull = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee15() {
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                feedback_default.a.toast.show({
                  type: 'loading',
                  content: 'Git pull'
                });

                _context15.prev = 1;
                _context15.next = 4;
                return this.gitTools.run('pull', 'origin', this.currentBranch);

              case 4:
                feedback_default.a.toast.hide();

                return _context15.abrupt("return", true);

              case 8:
                _context15.prev = 8;
                _context15.t0 = _context15["catch"](1);

                feedback_default.a.toast.hide();

                return _context15.abrupt("return", false);

              case 12:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this, [[1, 8]]);
      }));

      function pull() {
        return _pull.apply(this, arguments);
      }

      return pull;
    }()
  }, {
    key: "lastCommit",
    value: function () {
      var _lastCommit = git_asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee16() {
        var _lastCommit2;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.prev = 0;
                _lastCommit2 = this.gitTools.run('lastCommit', [this.currentBranch]);
                return _context16.abrupt("return", _lastCommit2);

              case 5:
                _context16.prev = 5;
                _context16.t0 = _context16["catch"](0);
                return _context16.abrupt("return", false);

              case 8:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this, [[0, 5]]);
      }));

      function lastCommit() {
        return _lastCommit.apply(this, arguments);
      }

      return lastCommit;
    }()
  }, {
    key: "resetCommit",
    value: function resetCommit() {
      this.selectedFiles = [];
      this.commitMsg = '';
    }
  }, {
    key: "gitFormReset",
    value: function gitFormReset() {
      this.branches = [];
      this.checkoutBranch = '';
      this.branchOrigin = '';
      this.branchType = '';
      this.selectedFiles = [];
      this.commitMsg = '';
    }
  }, {
    key: "nextStep",
    value: function nextStep() {
      var s = this.currentStep + 1;
      this.currentStep = s > 2 ? 2 : s;
    }
  }]);

  return Git;
}(), git_temp), (git_descriptor = git_applyDecoratedDescriptor(git_class.prototype, "gitTools", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return null;
  }
}), git_descriptor2 = git_applyDecoratedDescriptor(git_class.prototype, "loading", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor3 = git_applyDecoratedDescriptor(git_class.prototype, "showMainPanel", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor4 = git_applyDecoratedDescriptor(git_class.prototype, "isGit", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor5 = git_applyDecoratedDescriptor(git_class.prototype, "isRepo", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor6 = git_applyDecoratedDescriptor(git_class.prototype, "originRemote", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {};
  }
}), git_descriptor7 = git_applyDecoratedDescriptor(git_class.prototype, "remoteUrl", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), git_descriptor8 = git_applyDecoratedDescriptor(git_class.prototype, "currentBranch", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), git_descriptor9 = git_applyDecoratedDescriptor(git_class.prototype, "status", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), git_descriptor10 = git_applyDecoratedDescriptor(git_class.prototype, "currentStep", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 0;
  }
}), git_descriptor11 = git_applyDecoratedDescriptor(git_class.prototype, "branches", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), git_descriptor12 = git_applyDecoratedDescriptor(git_class.prototype, "checkoutBranch", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), git_descriptor13 = git_applyDecoratedDescriptor(git_class.prototype, "branchOrigin", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), git_descriptor14 = git_applyDecoratedDescriptor(git_class.prototype, "branchType", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), git_descriptor15 = git_applyDecoratedDescriptor(git_class.prototype, "branchesCheckout", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), git_descriptor16 = git_applyDecoratedDescriptor(git_class.prototype, "selectedFiles", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), git_descriptor17 = git_applyDecoratedDescriptor(git_class.prototype, "unstagedFiles", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return [];
  }
}), git_descriptor18 = git_applyDecoratedDescriptor(git_class.prototype, "commitMsg", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return '';
  }
}), git_descriptor19 = git_applyDecoratedDescriptor(git_class.prototype, "gitIniting", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor20 = git_applyDecoratedDescriptor(git_class.prototype, "gitCommitting", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor21 = git_applyDecoratedDescriptor(git_class.prototype, "gitNewBranching", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor22 = git_applyDecoratedDescriptor(git_class.prototype, "reloading", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor23 = git_applyDecoratedDescriptor(git_class.prototype, "removeAndAddRemoting", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor24 = git_applyDecoratedDescriptor(git_class.prototype, "gitRemoteAdding", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor25 = git_applyDecoratedDescriptor(git_class.prototype, "visibleDialogChangeRemote", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor26 = git_applyDecoratedDescriptor(git_class.prototype, "visibleDialogNewBranch", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_descriptor27 = git_applyDecoratedDescriptor(git_class.prototype, "visibleDialogBranches", [external_window_mobx_["observable"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return false;
  }
}), git_applyDecoratedDescriptor(git_class.prototype, "initTools", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "initTools"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "init", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "init"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "doEmptyCommit", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "doEmptyCommit"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "reset", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "reset"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "checkIsRepo", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "checkIsRepo"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "getOriginRemote", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "getOriginRemote"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "removeRemote", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "removeRemote"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "addRemote", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "addRemote"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "add", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "add"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "commit", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "commit"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "addAndCommit", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "addAndCommit"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "newBranch", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "newBranch"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "getBranches", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "getBranches"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "checkout", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "checkout"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "checkoutLocalBranch", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "checkoutLocalBranch"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "push", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "push"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "pull", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "pull"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "lastCommit", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "lastCommit"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "resetCommit", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "resetCommit"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "gitFormReset", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "gitFormReset"), git_class.prototype), git_applyDecoratedDescriptor(git_class.prototype, "nextStep", [external_window_mobx_["action"]], Object.getOwnPropertyDescriptor(git_class.prototype, "nextStep"), git_class.prototype)), git_class);
/* harmony default export */ var git = (new git_Git());
// EXTERNAL MODULE: ./renderer/node_modules/classnames/index.js
var classnames = __webpack_require__(8);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);

// EXTERNAL MODULE: ./renderer/node_modules/react-document-title/index.js
var react_document_title = __webpack_require__(118);
var react_document_title_default = /*#__PURE__*/__webpack_require__.n(react_document_title);

// EXTERNAL MODULE: ./renderer/node_modules/@icedesign/layout/lib/index.js
var layout_lib = __webpack_require__(98);
var layout_lib_default = /*#__PURE__*/__webpack_require__.n(layout_lib);

// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(2);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);

// EXTERNAL MODULE: ./renderer/node_modules/rc-tooltip/es/index.js + 28 modules
var es = __webpack_require__(99);

// EXTERNAL MODULE: ./renderer/src/external.js
var external = __webpack_require__(179);

// EXTERNAL MODULE: ./renderer/src/components/Icon/index.jsx
var Icon = __webpack_require__(22);

// EXTERNAL MODULE: ./renderer/src/components/Link.jsx
var Link = __webpack_require__(63);

// EXTERNAL MODULE: ./node_modules/js-base64/base64.js
var base64 = __webpack_require__(267);

// EXTERNAL MODULE: ./renderer/src/components/User/index.scss
var components_User = __webpack_require__(560);

// CONCATENATED MODULE: ./renderer/src/components/User/index.jsx


var User_dec, User_class, _class2, User_temp;

function User_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { User_typeof = function _typeof(obj) { return typeof obj; }; } else { User_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return User_typeof(obj); }

function User_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function User_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function User_createClass(Constructor, protoProps, staticProps) { if (protoProps) User_defineProperties(Constructor.prototype, protoProps); if (staticProps) User_defineProperties(Constructor, staticProps); return Constructor; }

function User_possibleConstructorReturn(self, call) { if (call && (User_typeof(call) === "object" || typeof call === "function")) { return call; } return User_assertThisInitialized(self); }

function User_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function User_getPrototypeOf(o) { User_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return User_getPrototypeOf(o); }

function User_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) User_setPrototypeOf(subClass, superClass); }

function User_setPrototypeOf(o, p) { User_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return User_setPrototypeOf(o, p); }







var User_User = (User_dec = Object(index_module["b" /* inject */])('user'), User_dec(User_class = Object(index_module["c" /* observer */])(User_class = (User_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  User_inherits(User, _Component);

  function User(props) {
    var _this;

    User_classCallCheck(this, User);

    _this = User_possibleConstructorReturn(this, User_getPrototypeOf(User).call(this, props));

    _this.handleClose = function () {
      _this.props.user.close();
    };

    _this.handleOpenLogin = function () {
      _this.props.user.open();
    };

    _this.bindWebview = function (webview) {
      if (webview) {
        _this.webviewAddEvents(webview);
      } else {
        _this.webviewRemoveEvents();
      }
    };

    _this.webviewAddEvents = function (webview) {
      _this.webview = webview;

      _this.webview.addEventListener('did-finish-load', _this.handleDidFinishLoad);
    };

    _this.webviewRemoveEvents = function () {
      _this.webview.removeEventListener('did-finish-load', _this.handleDidFinishLoad);

      _this.webview = null;
    };

    _this.handleDidFinishLoad = function () {
      logger["a" /* default */].info('login-page 加载完成');

      if (_this.webview.src.indexOf('/iceworks-login') != -1) {
        var sessionCookies = _this.webview.getWebContents().session.cookies;

        sessionCookies.get({}, function (error, cookies) {
          for (var i = 0, len = cookies.length; i < len; i++) {
            if (cookies[i].name === 'login_user') {
              // eslint-disable-next-line
              var userData = JSON.parse(base64["Base64"].decode(cookies[i].value));

              _this.saveUser(userData);

              break;
            }
          }
        });
      }
    };

    _this.saveUser = function (data) {
      localStorage.setItem('login:user', JSON.stringify(data));

      _this.props.user.close();

      _this.props.user.data = data;
    };

    _this.handleWebviewIpcmsssage = function (_ref) {
      var channel = _ref.channel,
          args = _ref.args;

      if (channel === 'login-success') {
        var user = args[0];
        localStorage.setItem('login:user', JSON.stringify(user));

        _this.props.user.close();

        _this.props.user.data = user;
      }
    };

    var userValue = localStorage.getItem('login:user');
    var _user = {};

    if (userValue) {
      try {
        _user = JSON.parse(userValue);
      } catch (e) {}
    }

    _this.props.user.data = _user;
    _this.webview = null;
    return _this;
  }

  User_createClass(User, [{
    key: "render",
    value: function render() {
      var data = this.props.user.data;
      return external_window_React_default.a.createElement("div", {
        className: "user-wrapper"
      }, external_window_React_default.a.createElement("div", {
        className: "user-info",
        style: {
          cursor: 'pointer'
        },
        onClick: this.handleOpenLogin
      }, external_window_React_default.a.createElement("div", {
        className: "user-avater"
      }, data.avatar_url ? external_window_React_default.a.createElement("img", {
        src: data.avatar_url
      }) : external_window_React_default.a.createElement("img", {
        src: __webpack_require__(561)
      })), external_window_React_default.a.createElement("div", {
        className: "user-name"
      }, data.name || '请登录')), external_window_React_default.a.createElement(dialog_default.a, {
        className: "fullscreen-dialog",
        visible: this.props.user.visible,
        onClose: this.handleClose,
        title: "\u8D26\u53F7\u767B\u5F55",
        footer: false
      }, external_window_React_default.a.createElement("div", {
        style: {
          height: 'calc(100vh - 160px)',
          width: 'calc(100vw - 160px)'
        }
      }, external_window_React_default.a.createElement("webview", {
        id: "webview",
        disablewebsecurity: "true",
        ref: this.bindWebview,
        src: "http://ice.alibaba-inc.com/iceworks-login",
        httpreferrer: "http://ice.alibaba-inc.com",
        style: {
          width: '100%',
          height: '100%'
        }
      }))));
    }
  }]);

  return User;
}(external_window_React_["Component"]), _class2.propTypes = {
  user: prop_types_default.a.object
}, User_temp)) || User_class) || User_class);
/* harmony default export */ var src_components_User = (User_User);
// EXTERNAL MODULE: ./renderer/src/Layout/Layout.scss
var Layout = __webpack_require__(562);

// CONCATENATED MODULE: ./renderer/src/Layout/Layout.jsx
function Layout_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Layout_typeof = function _typeof(obj) { return typeof obj; }; } else { Layout_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Layout_typeof(obj); }

function Layout_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Layout_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function Layout_createClass(Constructor, protoProps, staticProps) { if (protoProps) Layout_defineProperties(Constructor.prototype, protoProps); if (staticProps) Layout_defineProperties(Constructor, staticProps); return Constructor; }

function Layout_possibleConstructorReturn(self, call) { if (call && (Layout_typeof(call) === "object" || typeof call === "function")) { return call; } return Layout_assertThisInitialized(self); }

function Layout_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function Layout_getPrototypeOf(o) { Layout_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Layout_getPrototypeOf(o); }

function Layout_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Layout_setPrototypeOf(subClass, superClass); }

function Layout_setPrototypeOf(o, p) { Layout_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Layout_setPrototypeOf(o, p); }












var Layout_settings = services["a" /* default */].settings;

var ASIDE_WIDTH = 68;

var Layout_SidebarLayout =
/*#__PURE__*/
function (_Component) {
  Layout_inherits(SidebarLayout, _Component);

  function SidebarLayout() {
    var _getPrototypeOf2;

    var _this;

    Layout_classCallCheck(this, SidebarLayout);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = Layout_possibleConstructorReturn(this, (_getPrototypeOf2 = Layout_getPrototypeOf(SidebarLayout)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleOpenHelp = function () {
      Object(external["a" /* openInBrowser */])('https://github.com/alibaba/ice/issues/new?labels=iceworks');
    };

    return _this;
  }

  Layout_createClass(SidebarLayout, [{
    key: "renderHelpIcon",
    value: function renderHelpIcon() {
      return external_window_React_default.a.createElement(es["default"], {
        placement: "right",
        overlay: external_window_React_default.a.createElement("span", null, "\u53CD\u9988\u95EE\u9898")
      }, external_window_React_default.a.createElement("div", {
        onClick: this.handleOpenHelp,
        className: "iceworks-help-menu"
      }, external_window_React_default.a.createElement(Icon["a" /* default */], {
        type: "help",
        size: "large"
      }), external_window_React_default.a.createElement("span", {
        style: {
          paddingTop: '4px'
        }
      }, "\u5E2E\u52A9")));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          className = _this$props.className;
      var isAlibaba = Layout_settings.get('isAlibaba');
      return external_window_React_default.a.createElement(react_document_title_default.a, {
        title: title
      }, external_window_React_default.a.createElement(layout_lib_default.a, {
        fixable: true,
        style: {
          minHeight: '100vh'
        },
        className: classnames_default()({
          'ice-admin__layout': true,
          'iceworks-layout': true
        }, className)
      }, external_window_React_default.a.createElement(layout_lib_default.a.Section, {
        className: "ice-admin__layout__body"
      }, external_window_React_default.a.createElement(layout_lib_default.a.Aside, {
        width: ASIDE_WIDTH,
        className: "iceworks-aside"
      }, external_window_React_default.a.createElement("div", {
        className: "iceworks-menu"
      }, external_window_React_default.a.createElement("ul", null, external_window_React_default.a.createElement("li", null, external_window_React_default.a.createElement(Link["a" /* default */], {
        onlyActiveOnIndex: true,
        activeClassName: "active",
        to: "/"
      }, external_window_React_default.a.createElement(Icon["a" /* default */], {
        className: "menu-icon",
        size: "small",
        type: "projects"
      }), external_window_React_default.a.createElement("span", {
        className: "menu-tip"
      }, "\u9879\u76EE"))), external_window_React_default.a.createElement("li", null, external_window_React_default.a.createElement(Link["a" /* default */], {
        onlyActiveOnIndex: true,
        activeClassName: "active",
        to: "scaffolds"
      }, external_window_React_default.a.createElement(Icon["a" /* default */], {
        className: "menu-icon",
        size: "small",
        type: "template"
      }), external_window_React_default.a.createElement("span", {
        className: "menu-tip"
      }, "\u6A21\u677F"))), external_window_React_default.a.createElement("li", null, external_window_React_default.a.createElement(Link["a" /* default */], {
        onlyActiveOnIndex: true,
        activeClassName: "active",
        to: "blocks"
      }, external_window_React_default.a.createElement(Icon["a" /* default */], {
        className: "menu-icon",
        size: "small",
        type: "blocks"
      }), external_window_React_default.a.createElement("span", {
        className: "menu-tip"
      }, "\u533A\u5757"))), external_window_React_default.a.createElement("li", null, external_window_React_default.a.createElement(Link["a" /* default */], {
        onlyActiveOnIndex: true,
        activeClassName: "active",
        to: "components"
      }, external_window_React_default.a.createElement(Icon["a" /* default */], {
        className: "menu-icon",
        size: "small",
        type: "zujian"
      }), external_window_React_default.a.createElement("span", {
        className: "menu-tip"
      }, "\u7EC4\u4EF6"))), external_window_React_default.a.createElement("li", null, external_window_React_default.a.createElement(Link["a" /* default */], {
        onlyActiveOnIndex: true,
        activeClassName: "active",
        to: "extensions"
      }, external_window_React_default.a.createElement(Icon["a" /* default */], {
        className: "menu-icon",
        size: "small",
        type: "puzzle"
      }), external_window_React_default.a.createElement("span", {
        className: "menu-tip"
      }, "\u63D2\u4EF6"))), external_window_React_default.a.createElement("li", null, external_window_React_default.a.createElement(Link["a" /* default */], {
        onlyActiveOnIndex: true,
        activeClassName: "active",
        to: "settings"
      }, external_window_React_default.a.createElement(Icon["a" /* default */], {
        className: "menu-icon",
        size: "small",
        type: "settings"
      }), external_window_React_default.a.createElement("span", {
        className: "menu-tip"
      }, "\u8BBE\u7F6E"))))), isAlibaba && external_window_React_default.a.createElement(src_components_User, null)), external_window_React_default.a.createElement(layout_lib_default.a.Main, null, this.props.children))));
    }
  }]);

  return SidebarLayout;
}(external_window_React_["Component"]);

Layout_SidebarLayout.propTypes = {
  title: prop_types_default.a.string
};
Layout_SidebarLayout.defaultProps = {
  // 业务替换为自己的页面标题
  title: 'Iceworks'
};
/* harmony default export */ var Layout_Layout = (Layout_SidebarLayout);
// CONCATENATED MODULE: ./renderer/src/Layout/index.jsx


// CONCATENATED MODULE: ./renderer/src/components/RegistryNotice/index.js
function RegistryNotice_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { RegistryNotice_typeof = function _typeof(obj) { return typeof obj; }; } else { RegistryNotice_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return RegistryNotice_typeof(obj); }

function RegistryNotice_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function RegistryNotice_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function RegistryNotice_createClass(Constructor, protoProps, staticProps) { if (protoProps) RegistryNotice_defineProperties(Constructor.prototype, protoProps); if (staticProps) RegistryNotice_defineProperties(Constructor, staticProps); return Constructor; }

function RegistryNotice_possibleConstructorReturn(self, call) { if (call && (RegistryNotice_typeof(call) === "object" || typeof call === "function")) { return call; } return RegistryNotice_assertThisInitialized(self); }

function RegistryNotice_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function RegistryNotice_getPrototypeOf(o) { RegistryNotice_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return RegistryNotice_getPrototypeOf(o); }

function RegistryNotice_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) RegistryNotice_setPrototypeOf(subClass, superClass); }

function RegistryNotice_setPrototypeOf(o, p) { RegistryNotice_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return RegistryNotice_setPrototypeOf(o, p); }




var RegistryNotice_settings = services["a" /* default */].settings;
var currentRegistry = RegistryNotice_settings.get('registry') || '';
var RegistryNotice_isAlibaba = RegistryNotice_settings.get('isAlibaba');
var taobaoRegistry = 'https://registry.npm.taobao.org';

var RegistryNotice_RegistryNotice =
/*#__PURE__*/
function (_Component) {
  RegistryNotice_inherits(RegistryNotice, _Component);

  function RegistryNotice() {
    var _getPrototypeOf2;

    var _this;

    RegistryNotice_classCallCheck(this, RegistryNotice);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = RegistryNotice_possibleConstructorReturn(this, (_getPrototypeOf2 = RegistryNotice_getPrototypeOf(RegistryNotice)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.isTaobaoRegistry = function () {
      if (currentRegistry.includes('taobao')) {
        return true;
      }

      return false;
    };

    _this.settingRegistry = function () {
      RegistryNotice_settings.set('registry', taobaoRegistry);
      RegistryNotice_settings.set('checkedRegistry', true);
    };

    _this.handleCancel = function () {
      RegistryNotice_settings.set('checkedRegistry', true);
    };

    return _this;
  }

  RegistryNotice_createClass(RegistryNotice, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var checked = RegistryNotice_settings.get('checkedRegistry');
      return external_window_React_default.a.createElement("div", {
        className: "setting-registy-dialog"
      }, !this.isTaobaoRegistry() && !checked && !RegistryNotice_isAlibaba ? components_dialog["a" /* default */].confirm({
        title: '提示',
        content: '检测到当前下载源不是淘宝源，建议切换到 npm 淘宝镜像源，下载体验更加。'
      }, function (ok) {
        if (ok) {
          _this2.settingRegistry();
        } else {
          _this2.handleCancel();
        }
      }) : null);
    }
  }]);

  return RegistryNotice;
}(external_window_React_["Component"]);

/* harmony default export */ var components_RegistryNotice = (RegistryNotice_RegistryNotice);
// CONCATENATED MODULE: ./renderer/src/App.jsx
function App_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { App_typeof = function _typeof(obj) { return typeof obj; }; } else { App_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return App_typeof(obj); }

function App_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function App_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function App_createClass(Constructor, protoProps, staticProps) { if (protoProps) App_defineProperties(Constructor.prototype, protoProps); if (staticProps) App_defineProperties(Constructor, staticProps); return Constructor; }

function App_possibleConstructorReturn(self, call) { if (call && (App_typeof(call) === "object" || typeof call === "function")) { return call; } return App_assertThisInitialized(self); }

function App_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function App_getPrototypeOf(o) { App_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return App_getPrototypeOf(o); }

function App_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) App_setPrototypeOf(subClass, superClass); }

function App_setPrototypeOf(o, p) { App_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return App_setPrototypeOf(o, p); }




 // stores



















var App_settings = services["a" /* default */].settings; // pages


 // components



var _require = __webpack_require__(563),
    PageHome = _require.PageHome,
    PageScaffolds = _require.PageScaffolds,
    PageBlocks = _require.PageBlocks,
    PageComponents = _require.PageComponents,
    PageExtensions = _require.PageExtensions,
    PageSettings = _require.PageSettings; // spc


__webpack_require__(313);

__webpack_require__(564); // 将 projects 与 scaffold 关联


scaffold.projects = stores_projects["a" /* default */]; // ice-scripts 命令行终端监听同步状态

scripts_listener.initialize(stores_projects["a" /* default */]);

var App_App =
/*#__PURE__*/
function (_Component) {
  App_inherits(App, _Component);

  function App(props) {
    var _this;

    App_classCallCheck(this, App);

    _this = App_possibleConstructorReturn(this, App_getPrototypeOf(App).call(this, props));

    _this.componentWillMount = function () {
      // 过滤用户设置的fusion，bizchart物料源。
      var materials = App_settings.get('materials');

      if (materials && materials.length) {
        App_settings.set('materials', materials.filter(function (material) {
          if (['Fusion 物料源', 'Bizchart 物料源'].includes(material.name)) {
            return false;
          }

          return true;
        }));
      }
    };

    _this.changeDisplay = function (pathname) {
      _this.setState({
        activePathname: pathname
      });
    };

    var location = src_history["a" /* default */].location;
    _this.state = {
      activePathname: location.pathname
    };
    return _this;
  }

  App_createClass(App, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.unlisten = src_history["a" /* default */].listen(function (location, action) {
        // location is an object like window.location
        _this2.changeDisplay(location.pathname);
      }); // 根据url唤起是传参来定位当前path，定位后重置参数

      var urlEvokeQuery = App_settings.get('urlEvokeQuery');

      if (urlEvokeQuery && urlEvokeQuery.to) {
        src_history["a" /* default */].push(urlEvokeQuery.to);
        App_settings.set('urlEvokeQuery', Object.assign(urlEvokeQuery, {
          to: ''
        }));
      }

      external_electron_["ipcRenderer"].on('router.push', function (event, _ref) {
        var url = _ref.url,
            state = _ref.state,
            title = _ref.title;
        src_history["a" /* default */].push(url);
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unlisten();
    }
  }, {
    key: "render",
    value: function render() {
      return external_window_React_default.a.createElement(index_module["a" /* Provider */], {
        blocks: stores_blocks,
        customScaffold: custom_scaffold,
        extensions: extensions,
        installer: installer,
        newpage: newpage,
        pageBlockPicker: page_block_picker,
        projects: stores_projects["a" /* default */],
        scaffold: scaffold,
        component: stores_component,
        materials: stores_materials,
        switcher: switcher,
        customBlocks: custom_blocks,
        settingsMaterials: settings_materials,
        user: user,
        progress: progress,
        blockGroups: block_groups,
        git: git
      }, external_window_React_default.a.createElement(Layout_Layout, null, external_window_React_default.a.createElement(components_RegistryNotice, null), external_window_React_default.a.createElement(App_VisibleWrapper, {
        visible: this.state.activePathname === '/' || this.state.activePathname === '/index.html'
      }, external_window_React_default.a.createElement(PageHome, null)), external_window_React_default.a.createElement(App_VisibleWrapper, {
        visible: this.state.activePathname === '/scaffolds'
      }, external_window_React_default.a.createElement(PageScaffolds, null)), external_window_React_default.a.createElement(App_VisibleWrapper, {
        visible: this.state.activePathname === '/blocks'
      }, external_window_React_default.a.createElement(PageBlocks, null)), external_window_React_default.a.createElement(App_VisibleWrapper, {
        visible: this.state.activePathname === '/components'
      }, external_window_React_default.a.createElement(PageComponents, null)), external_window_React_default.a.createElement(App_VisibleWrapper, {
        rerender: true,
        visible: this.state.activePathname === '/settings'
      }, external_window_React_default.a.createElement(PageSettings, null)), external_window_React_default.a.createElement(App_VisibleWrapper, {
        visible: this.state.activePathname === '/extensions'
      }, external_window_React_default.a.createElement(PageExtensions, null))));
    }
  }]);

  return App;
}(external_window_React_["Component"]);

var App_VisibleWrapper =
/*#__PURE__*/
function (_Component2) {
  App_inherits(VisibleWrapper, _Component2);

  function VisibleWrapper() {
    var _getPrototypeOf2;

    var _this3;

    App_classCallCheck(this, VisibleWrapper);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this3 = App_possibleConstructorReturn(this, (_getPrototypeOf2 = App_getPrototypeOf(VisibleWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this3.rendered = false;
    return _this3;
  }

  App_createClass(VisibleWrapper, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          rerender = _this$props.rerender,
          visible = _this$props.visible;

      if (rerender && !visible) {
        return null;
      }

      if (!visible && this.rendered === false) {
        return null;
      }

      this.rendered = true;
      return external_window_React_default.a.createElement("div", {
        className: "visible-wrapper",
        style: {
          display: visible ? 'flex' : 'none',
          minHeight: '100vh',
          flex: 'auto',
          flexDirection: 'column'
        }
      }, this.props.children);
    }
  }]);

  return VisibleWrapper;
}(external_window_React_["Component"]);

/* harmony default export */ var src_App = (App_App);
// EXTERNAL MODULE: ./node_modules/ansi-html/index.js
var ansi_html = __webpack_require__(57);
var ansi_html_default = /*#__PURE__*/__webpack_require__.n(ansi_html);

// EXTERNAL MODULE: ./node_modules/pretty-error/lib/PrettyError.js
var PrettyError = __webpack_require__(299);
var PrettyError_default = /*#__PURE__*/__webpack_require__.n(PrettyError);

// EXTERNAL MODULE: ./node_modules/strip-ansi/index.js
var strip_ansi = __webpack_require__(168);
var strip_ansi_default = /*#__PURE__*/__webpack_require__.n(strip_ansi);

// CONCATENATED MODULE: ./renderer/src/pages/Error/index.jsx
function Error_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Error_typeof = function _typeof(obj) { return typeof obj; }; } else { Error_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Error_typeof(obj); }

function Error_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Error_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function Error_createClass(Constructor, protoProps, staticProps) { if (protoProps) Error_defineProperties(Constructor.prototype, protoProps); if (staticProps) Error_defineProperties(Constructor, staticProps); return Constructor; }

function Error_possibleConstructorReturn(self, call) { if (call && (Error_typeof(call) === "object" || typeof call === "function")) { return call; } return Error_assertThisInitialized(self); }

function Error_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function Error_getPrototypeOf(o) { Error_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Error_getPrototypeOf(o); }

function Error_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Error_setPrototypeOf(subClass, superClass); }

function Error_setPrototypeOf(o, p) { Error_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Error_setPrototypeOf(o, p); }






var pe = new PrettyError_default.a();

var Error_index =
/*#__PURE__*/
function (_Component) {
  Error_inherits(index, _Component);

  function index() {
    var _getPrototypeOf2;

    var _this;

    Error_classCallCheck(this, index);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = Error_possibleConstructorReturn(this, (_getPrototypeOf2 = Error_getPrototypeOf(index)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.report = function () {
      var error = _this.props.error;
      var errorMsg = pe.render(error);
      var url = "https://github.com/alibaba/ice/issues/new?labels=iceworks&title=Iceworks \u542F\u52A8\u9519\u8BEF&assignee=noyobo&body=- version: ".concat(external_electron_["remote"].app.getVersion(), "\n- platform: ").concat(external_electron_["remote"].process.platform, "\n- error: \n```\n").concat(strip_ansi_default()(errorMsg), "\n```");
      external_electron_["shell"].openExternal(encodeURI(url));
    };

    return _this;
  }

  Error_createClass(index, [{
    key: "render",
    value: function render() {
      return external_window_React_default.a.createElement("div", {
        style: {
          width: '100vw',
          height: '100vh',
          display: 'flex',
          flexDirection: 'column'
        }
      }, external_window_React_default.a.createElement("div", {
        style: {
          padding: 40,
          display: 'flex',
          flexDirection: 'row',
          alignItems: 'center',
          flex: '0 0 210px'
        }
      }, external_window_React_default.a.createElement("img", {
        src: __webpack_require__(633),
        style: {
          height: 130,
          width: 130
        }
      }), external_window_React_default.a.createElement("div", {
        style: {
          paddingLeft: 30
        }
      }, external_window_React_default.a.createElement("h1", {
        style: {
          margin: 0
        }
      }, "Sorry! "), external_window_React_default.a.createElement("div", null, "\u53D1\u751F\u4E86\u672A\u77E5\u7684\u9519\u8BEF! \u53EF\u4EE5\u70B9\u51FB", ' ', external_window_React_default.a.createElement("a", {
        href: "javascript:void(0);",
        onClick: this.report
      }, "\u63D0\u4EA4\u95EE\u9898"), ' ', "\u53CD\u9988\u7ED9\u6211\u4EEC\uFF0C\u8C22\u8C22\u3002"))), external_window_React_default.a.createElement("div", {
        style: {
          backgroundColor: '#010100',
          padding: '10px 0',
          flex: 'auto',
          overflow: 'auto'
        }
      }, external_window_React_default.a.createElement("pre", {
        dangerouslySetInnerHTML: {
          __html: ansi_html_default()(pe.render(this.props.error))
        }
      })));
    }
  }]);

  return index;
}(external_window_React_["Component"]);

/* harmony default export */ var pages_Error = (Error_index);
// EXTERNAL MODULE: ./renderer/src/global.scss
var global = __webpack_require__(634);

// CONCATENATED MODULE: ./renderer/src/index.jsx
window.js_ready = Date.now();

 // 载入默认全局样式







logger["a" /* default */].info('dom ready', window.js_ready - window.dom_start); // 载入自定义全局样式

var container = document.createElement('div');
container.id = 'root';
document.body.appendChild(container);
document.body.classList.add("platform-".concat(process.platform));

function removeLoading() {
  var loading = document.getElementById('iceworks-loading');

  if (loading) {
    loading.remove();
  }
}

try {
  external_window_ReactDOM_default.a.render(external_window_React_default.a.createElement(src_App, null), container, function () {
    removeLoading();
    window.app_rendered = Date.now();
    logger["a" /* default */].info('app rendered', window.app_rendered - window.dom_start);
  });
} catch (e) {
  external_window_ReactDOM_default.a.render(external_window_React_default.a.createElement(pages_Error, {
    error: e
  }), container, function () {
    removeLoading();
  });
}

/***/ }),
/* 649 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/objectWithoutProperties.js
var objectWithoutProperties = __webpack_require__(78);
var objectWithoutProperties_default = /*#__PURE__*/__webpack_require__.n(objectWithoutProperties);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(48);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/extends.js
var helpers_extends = __webpack_require__(25);
var extends_default = /*#__PURE__*/__webpack_require__.n(helpers_extends);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(13);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/createClass.js
var createClass = __webpack_require__(30);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(9);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/inherits.js
var inherits = __webpack_require__(14);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: external "window.React"
var external_window_React_ = __webpack_require__(1);
var external_window_React_default = /*#__PURE__*/__webpack_require__.n(external_window_React_);

// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(2);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);

// EXTERNAL MODULE: external "window.ReactDOM"
var external_window_ReactDOM_ = __webpack_require__(5);
var external_window_ReactDOM_default = /*#__PURE__*/__webpack_require__.n(external_window_ReactDOM_);

// EXTERNAL MODULE: ./renderer/node_modules/rc-animate/es/Animate.js + 5 modules
var Animate = __webpack_require__(79);

// CONCATENATED MODULE: ./renderer/node_modules/rc-util/es/createChainedFunction.js
/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @returns {function|null}
 */
function createChainedFunction() {
  var args = [].slice.call(arguments, 0);
  if (args.length === 1) {
    return args[0];
  }

  return function chainedFunction() {
    for (var i = 0; i < args.length; i++) {
      if (args[i] && args[i].apply) {
        args[i].apply(this, arguments);
      }
    }
  };
}
// EXTERNAL MODULE: ./renderer/node_modules/classnames/index.js
var classnames = __webpack_require__(8);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);

// CONCATENATED MODULE: ./renderer/node_modules/rc-notification/es/Notice.js









var Notice_Notice = function (_Component) {
  inherits_default()(Notice, _Component);

  function Notice() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck_default()(this, Notice);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, (_ref = Notice.__proto__ || Object.getPrototypeOf(Notice)).call.apply(_ref, [this].concat(args))), _this), _this.clearCloseTimer = function () {
      if (_this.closeTimer) {
        clearTimeout(_this.closeTimer);
        _this.closeTimer = null;
      }
    }, _this.close = function () {
      _this.clearCloseTimer();
      _this.props.onClose();
    }, _temp), possibleConstructorReturn_default()(_this, _ret);
  }

  createClass_default()(Notice, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.duration) {
        this.closeTimer = setTimeout(function () {
          _this2.close();
        }, this.props.duration * 1000);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.clearCloseTimer();
    }
  }, {
    key: 'render',
    value: function render() {
      var _className;

      var props = this.props;
      var componentClass = props.prefixCls + '-notice';
      var className = (_className = {}, defineProperty_default()(_className, '' + componentClass, 1), defineProperty_default()(_className, componentClass + '-closable', props.closable), defineProperty_default()(_className, props.className, !!props.className), _className);
      return external_window_React_default.a.createElement(
        'div',
        { className: classnames_default()(className), style: props.style },
        external_window_React_default.a.createElement(
          'div',
          { className: componentClass + '-content' },
          props.children
        ),
        props.closable ? external_window_React_default.a.createElement(
          'a',
          { tabIndex: '0', onClick: this.close, className: componentClass + '-close' },
          external_window_React_default.a.createElement('span', { className: componentClass + '-close-x' })
        ) : null
      );
    }
  }]);

  return Notice;
}(external_window_React_["Component"]);

Notice_Notice.propTypes = {
  duration: prop_types_default.a.number,
  onClose: prop_types_default.a.func,
  children: prop_types_default.a.any
};
Notice_Notice.defaultProps = {
  onEnd: function onEnd() {},
  onClose: function onClose() {},

  duration: 1.5,
  style: {
    right: '50%'
  }
};
/* harmony default export */ var es_Notice = (Notice_Notice);
// CONCATENATED MODULE: ./renderer/node_modules/rc-notification/es/Notification.js















var seed = 0;
var now = Date.now();

function getUuid() {
  return 'rcNotification_' + now + '_' + seed++;
}

var Notification_Notification = function (_Component) {
  inherits_default()(Notification, _Component);

  function Notification() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck_default()(this, Notification);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, (_ref = Notification.__proto__ || Object.getPrototypeOf(Notification)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      notices: []
    }, _this.add = function (notice) {
      var key = notice.key = notice.key || getUuid();
      _this.setState(function (previousState) {
        var notices = previousState.notices;
        if (!notices.filter(function (v) {
          return v.key === key;
        }).length) {
          return {
            notices: notices.concat(notice)
          };
        }
      });
    }, _this.remove = function (key) {
      _this.setState(function (previousState) {
        return {
          notices: previousState.notices.filter(function (notice) {
            return notice.key !== key;
          })
        };
      });
    }, _temp), possibleConstructorReturn_default()(_this, _ret);
  }

  createClass_default()(Notification, [{
    key: 'getTransitionName',
    value: function getTransitionName() {
      var props = this.props;
      var transitionName = props.transitionName;
      if (!transitionName && props.animation) {
        transitionName = props.prefixCls + '-' + props.animation;
      }
      return transitionName;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this,
          _className;

      var props = this.props;
      var noticeNodes = this.state.notices.map(function (notice) {
        var onClose = createChainedFunction(_this2.remove.bind(_this2, notice.key), notice.onClose);
        return external_window_React_default.a.createElement(
          es_Notice,
          extends_default()({
            prefixCls: props.prefixCls
          }, notice, {
            onClose: onClose
          }),
          notice.content
        );
      });
      var className = (_className = {}, defineProperty_default()(_className, props.prefixCls, 1), defineProperty_default()(_className, props.className, !!props.className), _className);
      return external_window_React_default.a.createElement(
        'div',
        { className: classnames_default()(className), style: props.style },
        external_window_React_default.a.createElement(
          Animate["default"],
          { transitionName: this.getTransitionName() },
          noticeNodes
        )
      );
    }
  }]);

  return Notification;
}(external_window_React_["Component"]);

Notification_Notification.propTypes = {
  prefixCls: prop_types_default.a.string,
  transitionName: prop_types_default.a.string,
  animation: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.object]),
  style: prop_types_default.a.object
};
Notification_Notification.defaultProps = {
  prefixCls: 'rc-notification',
  animation: 'fade',
  style: {
    top: 65,
    left: '50%'
  }
};


Notification_Notification.newInstance = function newNotificationInstance(properties) {
  var _ref2 = properties || {},
      getContainer = _ref2.getContainer,
      props = objectWithoutProperties_default()(_ref2, ['getContainer']);

  var div = void 0;
  if (getContainer) {
    div = getContainer();
  } else {
    div = document.createElement('div');
    document.body.appendChild(div);
  }
  var notification = external_window_ReactDOM_default.a.render(external_window_React_default.a.createElement(Notification_Notification, props), div);
  return {
    notice: function notice(noticeProps) {
      notification.add(noticeProps);
    },
    removeNotice: function removeNotice(key) {
      notification.remove(key);
    },

    component: notification,
    destroy: function destroy() {
      external_window_ReactDOM_default.a.unmountComponentAtNode(div);
      document.body.removeChild(div);
    }
  };
};

/* harmony default export */ var es_Notification = (Notification_Notification);
// CONCATENATED MODULE: ./renderer/node_modules/rc-notification/es/index.js

/* harmony default export */ var es = __webpack_exports__["default"] = (es_Notification);

/***/ }),
/* 650 */,
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */
/***/ (function(module, exports) {

module.exports = require("string_decoder");

/***/ })
/******/ ]);