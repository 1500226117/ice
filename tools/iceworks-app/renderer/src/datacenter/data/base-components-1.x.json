[
  {
    "name": "Affix",
    "category": "Components",
    "title": "固钉",
    "type": "基本",
    "importStatement": "import { Affix } from '@alifd/next';",
    "body": "\n## Guide\n\n### 何时使用\n\n当用户需要将某个组件固定在页面的某个位置时，可以使用 Affix 组件进行固定。\n\n API\n\n### Affix\n\n| 参数           | 说明                                                                                                                  | 类型       | 默认值          |\n| ------------ | ------------------------------------------------------------------------------------------------------------------- | -------- | ------------ |\n| container    | 设置 Affix 需要监听滚动事件的容器元素<br><br>**签名**:<br>Function() => ReactElement<br>**返回值**:<br>{ReactElement} 目标容器元素的实例<br>     | Function | () => window |\n| offsetTop    | 距离窗口顶部达到指定偏移量后触发                                                                                                    | Number   | -            |\n| offsetBottom | 距离窗口底部达到制定偏移量后触发                                                                                                    | Number   | -            |\n| onAffix      | 当元素的样式发生固钉样式变化时触发的回调函数<br><br>**签名**:<br>Function(元素是否被固钉: Boolean) => void<br>**参数**:<br>_元素是否被固钉_: {Boolean} null | Function | func.noop    |\n| useAbsolute  | 是否启用绝对布局实现 affix                                                                                                    | Boolean  | -            |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "启用绝对布局",
        "order": "3",
        "jsx": "import { Affix, Button } from '@alifd/next';\n\nclass Demo extends React.Component {\n\n    _containerRefHandler(ref) {\n        this.container = ref;\n    }\n\n    render() {\n        return (\n            <div className=\"custom-affix-container\" ref={this._containerRefHandler.bind(this)}>\n                <div className=\"affix-wrapper\">\n                    <Affix container={() => this.container} offsetTop={0} useAbsolute>\n                        <Button type=\"secondary\">Affixed Button</Button>\n                    </Affix>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".custom-affix-container {\n    height: 150px;\n    overflow-y: scroll;\n    width: 50px;\n    background: url(https://img.alicdn.com/tfs/TB1AbJXSpXXXXXJXpXXXXXXXXXX-32-32.jpg) repeat 50% 50%;\n}\n\n.custom-affix-container .affix-wrapper {\n    padding-top: 100px;\n    height: 500px;\n}\n",
        "body": "\n<p>可以通过 <code>container</code> 属性设置 Affix 组件需要监听其滚动事件的元素，该属性接收一个函数作为参数，默认为 <code>() =&gt; window</code>；\n设置 useAbsolute 为 true，通过 absolute 布局实现组件固定。</p>\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Affix, Button } from '@alifd/next';\n\nReactDOM.render(<div className=\"custom-affix-wrapper\">\n    <Affix>\n        <Button type=\"secondary\">Affixed Button</Button>\n    </Affix>\n</div>, mountNode);\n",
        "css": ".custom-affix-wrapper {\n    padding: 40px 0;\n}\n",
        "body": "\n<p>默认情况下，Affix 的默认目标容器元素是整个 <code>window</code>，并且 <code>offsetTop = 0</code>，\n也就意味着当页面往下滚动时，当 Affix 元素接触到浏览器边框时，此时会将 Affix 钉住。</p>\n"
      },
      {
        "title": "自定义目标容器",
        "order": "2",
        "jsx": "import { Affix, Button } from '@alifd/next';\n\nclass Demo extends React.Component {\n\n    _containerRefHandler(ref) {\n        this.container = ref;\n    }\n\n    render() {\n        return (\n            <div className=\"custom-affix-container\" ref={this._containerRefHandler.bind(this)}>\n                <div className=\"affix-wrapper\">\n                    <Affix container={() => this.container} offsetTop={0}>\n                        <Button type=\"secondary\">Affixed Button</Button>\n                    </Affix>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".custom-affix-container {\n    height: 150px;\n    overflow-y: scroll;\n    background: url(https://img.alicdn.com/tfs/TB1AbJXSpXXXXXJXpXXXXXXXXXX-32-32.jpg) repeat 50% 50%;\n}\n\n.custom-affix-container .affix-wrapper {\n    padding-top: 50px;\n    height: 500px;\n}\n",
        "body": "\n<p>可以通过 <code>container</code> 属性设置 Affix 组件需要监听其滚动事件的元素，该属性接收一个函数作为参数，默认为 <code>() =&gt; window</code>。</p>\n"
      },
      {
        "title": "自定义偏移量",
        "order": "1",
        "jsx": "import { Affix, Button } from '@alifd/next';\n\nReactDOM.render(<div className=\"custom-affix-wrapper\">\n    <Affix offsetBottom={0}>\n        <Button type=\"secondary\">Affixed Button</Button>\n    </Affix>\n</div>, mountNode);\n",
        "css": ".custom-affix-wrapper {\n    padding: 40px 0;\n}\n",
        "body": "\n<p>可以通过 <code>offsetTop</code> 或 <code>offsetBottom</code> 自定义偏移量。</p>\n"
      },
      {
        "title": "onAffix",
        "order": "4",
        "jsx": "import { Affix, Button } from '@alifd/next';\n\nclass Demo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            affixed: false,\n        };\n    }\n\n    onAffix = (affixed) => {\n        this.setState({\n            affixed,\n        });\n    }\n\n    render() {\n        const state = this.state;\n\n        return (<div className=\"affix-demo-wrapper\">\n            <Affix onAffix={this.onAffix}>\n                <Button type=\"secondary\">{state.affixed ? 'Affixed Button' : 'Unaffixed Button'}</Button>\n            </Affix>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".affix-demo-wrapper {\n    padding: 40px 0;\n}\n",
        "body": "\n<p>可以通过传入 <code>onAffix</code> 的事件回调函数来监听元素是否发生了固钉状态。该函数会在状态变化时返回固钉状态。</p>\n"
      }
    ]
  },
  {
    "name": "Animate",
    "category": "Components",
    "title": "动画",
    "importStatement": "import { Animate } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n需要自定义动效\n\n API\n\n### Animate\n\n| 参数              | 说明                                                                                                                                                | 类型                                  | 默认值      |\n| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------- | -------- |\n| animation       | 动画 className                                                                                                                                      | String/Object                       | -        |\n| animationAppear | 子元素第一次挂载时是否执行动画                                                                                                                                   | Boolean                             | true     |\n| component       | 包裹子元素的标签                                                                                                                                          | any                                 | 'div'    |\n| singleMode      | 是否只有单个子元素，如果有多个子元素，请设置为 false                                                                                                                     | Boolean                             | true     |\n| children        | 子元素                                                                                                                                               | ReactElement/Array&lt;ReactElement> | -        |\n| beforeAppear    | 执行第一次挂载动画前触发的回调函数<br><br>**签名**:<br>Function() => void                                                                                            | Function                            | () => {} |\n| onAppear        | 执行第一次挂载动画，添加 xxx-appear-active 类名后触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素 | Function                            | () => {} |\n| afterAppear     | 执行完第一次挂载动画后触发的函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素                          | Function                            | () => {} |\n| beforeEnter     | 执行进场动画前触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素                            | Function                            | () => {} |\n| onEnter         | 执行进场动画，添加 xxx-enter-active 类名后触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素     | Function                            | () => {} |\n| afterEnter      | 执行完进场动画后触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素                           | Function                            | () => {} |\n| beforeLeave     | 执行离场动画前触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素                            | Function                            | () => {} |\n| onLeave         | 执行离场动画，添加 xxx-leave-active 类名后触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素     | Function                            | () => {} |\n| afterLeave      | 执行完离场动画后触发的回调函数<br><br>**签名**:<br>Function(node: HTMLElement) => void<br>**参数**:<br>_node_: {HTMLElement} \b执行动画的 dom 元素                           | Function                            | () => {} |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Animate } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { visible: true };\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle() {\n        this.setState({\n            visible: !this.state.visible\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.handleToggle}>Toggle visible</button>\n                <Animate animation={{\n                    enter: 'my-zoom-in',\n                    leave: 'my-zoom-out'\n                }}>\n                    {this.state.visible ?\n                        <div className=\"basic-demo\">Next Animate</div> :\n                        null}\n                </Animate>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".basic-demo {\n    font-size: 96px;\n    text-align: center;\n}\n\n.my-zoom-in {\n    opacity: 0;\n}\n\n.my-zoom-in-active {\n    animation: my-zoom-in 500ms linear;\n}\n\n.my-zoom-out {\n    opacity: 1;\n}\n\n.my-zoom-out-active {\n    animation: my-zoom-out 500ms linear;\n}\n\n@keyframes my-zoom-in {\n    from {\n        opacity: 0;\n        transform: scale3d(.3, .3, .3);\n    }\n\n    50% {\n        opacity: 1;\n    }\n\n    to {\n        opacity: 1;\n    }\n}\n\n@keyframes my-zoom-out {\n    from {\n        opacity: 1;\n    }\n\n    50% {\n        opacity: 0;\n        transform: scale3d(.3, .3, .3);\n    }\n\n    to {\n        opacity: 0;\n    }\n}\n",
        "body": "\n<p>展示单个子元素的进场离场动画。</p>\n"
      },
      {
        "title": "展开收起动画",
        "order": "2",
        "jsx": "import { Animate } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { expand: true };\n        ['beforeEnter', 'onEnter', 'afterEnter', 'beforeLeave', 'onLeave', 'afterLeave', 'handleToggle'].forEach(method => {\n            this[method] = this[method].bind(this);\n        });\n    }\n\n    handleToggle() {\n        this.setState({\n            expand: !this.state.expand\n        });\n    }\n\n    beforeEnter(node) {\n        this.height = node.offsetHeight;\n        node.style.height = '0px';\n    }\n\n    onEnter(node) {\n        node.style.height = `${this.height}px`;\n    }\n\n    afterEnter(node) {\n        this.height = null;\n        node.style.height = null;\n    }\n\n    beforeLeave(node) {\n        node.style.height = `${this.height}px`;\n    }\n\n    onLeave(node) {\n        node.style.height = '0px';\n    }\n\n    afterLeave(node) {\n        node.style.height = null;\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.handleToggle}>Toggle expand</button>\n                <Animate animation=\"expand\"\n                    beforeEnter={this.beforeEnter}\n                    onEnter={this.onEnter}\n                    afterEnter={this.afterEnter}\n                    beforeLeave={this.beforeLeave}\n                    onLeave={this.onLeave}\n                    afterLeave={this.afterLeave}>\n                    {this.state.expand ?\n                        <div className=\"notice\"></div> :\n                        null}\n                </Animate>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".expand-enter {\n    overflow: hidden;\n}\n\n.expand-enter-active {\n    transition: height 0.3s ease-out;\n}\n\n.expand-leave {\n    overflow: hidden;\n}\n\n.expand-leave-active {\n    transition: height 0.3s ease-out;\n}\n\n.notice {\n    width: 200px;\n    height: 100px;\n    margin-top: 20px;\n    border: 1px solid #ccc;\n}\n",
        "body": "\n<p>展示单个子元素的展开收起动画。</p>\n"
      },
      {
        "title": "多个子元素动画",
        "order": "1",
        "jsx": "import { Animate } from '@alifd/next';\n\nclass TodoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { items: ['hello', 'world', 'click', 'me'] };\n    }\n\n    handleAdd() {\n        this.setState({\n            items: [\n                ...this.state.items,\n                // eslint-disable-next-line\n                prompt('Enter some text')\n            ]\n        });\n    }\n\n    handleRemove(i) {\n        const newItems = this.state.items.slice();\n        newItems.splice(i, 1);\n        this.setState({ items: newItems });\n    }\n\n    render() {\n        return (\n            <div className=\"totolist-container\">\n                <Animate animationAppear animation=\"fade\" className=\"todo-list\" singleMode={false}\n                    beforeAppear={() => console.log('before appear')}\n                    onAppear={() => console.log('appear')}\n                    afterAppear={() => console.log('after appear')}\n                    beforeEnter={() => console.log('before enter')}\n                    onEnter={() => console.log('enter')}\n                    afterEnter={() => console.log('after enter')}\n                    beforeLeave={() => console.log('before leave')}\n                    onLeave={() => console.log('leave')}\n                    afterLeave={() => console.log('after leave')}>\n                    {this.state.items.map((item, i) => (\n                        <div key={item}>\n                            {item}\n                            <button onClick={() => this.handleRemove(i)}>\n                                &times;\n                            </button>\n                        </div>\n                    ))}\n                </Animate>\n                <button onClick={() => this.handleAdd()}>Add Item</button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<TodoList />, mountNode);\n",
        "css": ".fade-appear {\n  opacity: 0.01;\n}\n\n.fade-appear.fade-appear-active {\n  opacity: 1;\n  transition: opacity 1000ms ease-in;\n}\n\n.fade-enter {\n  opacity: 0.01;\n}\n\n.fade-enter.fade-enter-active {\n  opacity: 1;\n  transition: opacity 1000ms ease-in;\n}\n\n.fade-leave {\n  opacity: 1;\n}\n\n.fade-leave.fade-leave-active {\n  opacity: 0.01;\n  transition: opacity 800ms ease-in;\n}\n\n.totolist-container {\n  padding: 20px;\n  border: 1px solid #ccc;\n  width: 200px;\n  border-radius: 4px;\n}\n\n.todo-list > * {\n  margin: 5px 0;\n  padding: 5px 0;\n  border-bottom:  1px solid #ccc;\n}\n\n.totolist-container > button {\n  margin-top: 20px;\n}\n",
        "body": "\n<p>展示多个子元素的进场离场动画。</p>\n"
      }
    ]
  },
  {
    "name": "Badge",
    "category": "Components",
    "title": "徽标数",
    "type": "展示",
    "importStatement": "import { Badge } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n在有新消息、讯息时，或者是app/插件/功能模块可以更新、升级时使用这个组件。\n\n API\n\n### Badge\n\n| 参数            | 说明                                                    | 类型            | 默认值   |\n| ------------- | ----------------------------------------------------- | ------------- | ----- |\n| children      | 徽章依托的内容                                               | ReactNode     | -     |\n| count         | 展示的数字，大于 overflowCount 时显示为 ${overflowCount}+，为 0 时隐藏 | Number/String | 0     |\n| content       | 自定义节点内容                                               | ReactNode     | -     |\n| overflowCount | 展示的封顶的数字                                              | Number/String | 99    |\n| dot           | 不展示数字，只展示一个小红点                                        | Boolean       | false |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Badge } from '@alifd/next';\n\nReactDOM.render(\n    <Badge count={5}>\n        <a href=\"#\" className=\"basic-example\"></a>\n    </Badge>, mountNode);\n",
        "css": ".basic-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 8px;\n    background: #eee;\n}\n",
        "body": "\n<p>简单的徽章展示。</p>\n"
      },
      {
        "title": "动态",
        "order": "3",
        "jsx": "import { Badge, Button, Icon } from '@alifd/next';\n\n\n\nconst ButtonGroup = Button.Group;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            count: 5,\n            show: true\n        };\n\n        this.increase = this.increase.bind(this);\n        this.decrease = this.decrease.bind(this);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    increase() {\n        const count = this.state.count + 1;\n        this.setState({ count });\n    }\n\n    decrease() {\n        let count = this.state.count - 1;\n        if (count < 0) {\n            count = 0;\n        }\n        this.setState({ count });\n    }\n\n    onClick() {\n        this.setState({\n            show: !this.state.show\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"change-count\">\n                    <Badge count={this.state.count}>\n                        <a href=\"#\" className=\"head-example\"></a>\n                    </Badge>\n                    <ButtonGroup>\n                        <Button onClick={this.increase}>\n                            <Icon type=\"add\"/>\n                        </Button>\n                        <Button onClick={this.decrease}>\n                            <Icon type=\"minus\"/>\n                        </Button>\n                    </ButtonGroup>\n                </div>\n                <div>\n                    <Badge dot={this.state.show}>\n                        <a href=\"#\" className=\"head-example\"></a>\n                    </Badge>\n                    <Button onClick={this.onClick}>\n                        Toggle Display\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".next-badge {\n    margin-right: 16px;\n}\n.change-count {\n    margin-bottom: 16px;\n}\n.head-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 8px;\n    background: #eee;\n}\n",
        "body": "\n<p>展示动态变化的效果。</p>\n"
      },
      {
        "title": "自定义徽标内容",
        "order": "4",
        "jsx": "import { Badge, Icon } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Badge content=\"hot\" style={{backgroundColor: '#FC0E3D', color: '#FFFFFF'}}>\n            <a href=\"#\" className=\"head-example\"></a>\n        </Badge>\n        <Badge content={<Icon type=\"error\" />} style={{backgroundColor: 'transparent', color: 'red', padding: 0}}>\n            <a href=\"#\" className=\"head-example\"></a>\n        </Badge>\n    </div>, mountNode);\n",
        "css": ".next-badge {\n    margin-right: 24px;\n}\n.head-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 8px;\n    background-color: #eee;\n}\n",
        "body": "\n<p>通过 <code>content</code> 属性可以自定义徽标的内容，自定义内容不包含任何色彩样式，完全由使用者自己定义。</p>\n"
      },
      {
        "title": "讨嫌的小红点",
        "order": "2",
        "jsx": "import { Badge, Icon } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Badge dot>\n            <Icon type=\"email\" />\n        </Badge>\n        <Badge dot>\n            <a href=\"#\">A Link</a>\n        </Badge>\n    </div>, mountNode);\n",
        "css": ".next-badge {\n    margin-right: 16px;\n}\n",
        "body": "\n<p>没有具体的数字。</p>\n"
      },
      {
        "title": "独立使用",
        "order": "5",
        "jsx": "import { Badge } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Badge count={25} />\n        <Badge count={4} style={{backgroundColor: '#fff', color: '#999', border: '1px solid #d9d9d9'}} />\n        <Badge count={109} style={{backgroundColor: '#87d068'}} />\n        <Badge dot />\n        <Badge content=\"hot\" style={{backgroundColor: '#FC0E3D', color: '#FFFFFF'}} />\n    </div>, mountNode);\n",
        "css": ".next-badge {\n    margin-right: 16px;\n}\n",
        "body": "\n<p>不包裹任何元素即独立使用，可自定样式展示。</p>\n"
      },
      {
        "title": "大数字",
        "order": "1",
        "jsx": "import { Badge } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Badge count={100}>\n            <a href=\"#\" className=\"head-example\"></a>\n        </Badge>\n        <Badge count={200} overflowCount={199}>\n            <a href=\"#\" className=\"head-example\"></a>\n        </Badge>\n    </div>, mountNode);\n",
        "css": ".next-badge {\n    margin-right: 16px;\n}\n.head-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 8px;\n    background: #eee;\n}\n",
        "body": "\n<p>超过overflow的数值，会显示<code>\\${overflow}+</code>，overflow默认值为<code>99</code>。</p>\n"
      }
    ]
  },
  {
    "name": "Balloon",
    "category": "Components",
    "title": "气泡提示",
    "type": "弹层",
    "importStatement": "import { Balloon } from '@alifd/next';",
    "body": "\n## 开发指南\n\n气泡组件\n\n### 何时使用\n\n-   当用户与被说明对象（文字，图片，输入框等）发生交互行为的action开始时, 即刻跟随动作出现一种辅助或帮助的提示信息。\n-   其中Balloon.Tooltip是简化版本，主要用于hover时显示简单文案。\n\n### 使用注意\n\n-   对于trigger是自定义的React Component的情况，自定义的React Component 需要透传onMouseEnter/onMouseLeave/onClick 事件。\n\n API\n\n### Balloon\n\n| 参数                   | 说明                                                                                                                                                                    | 类型              | 默认值                                      |\n| -------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- | ---------------------------------------- |\n| children             | 浮层的内容                                                                                                                                                                 | any             | -                                        |\n| type                 | 样式类型<br><br>**可选值**:<br>'normal', 'primary'                                                                                                                           | Enum            | 'normal'                                 |\n| visible              | 弹层当前显示的状态                                                                                                                                                             | Boolean         | -                                        |\n| defaultVisible       | 弹层默认显示的状态                                                                                                                                                             | Boolean         | false                                    |\n| onVisibleChange      | 弹层在显示和隐藏触发的事件<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否隐藏和显示                                                       | Function        | func.noop                                |\n| alignEdge            | 弹出层对齐方式                                                                                                                                                               | Boolean         | false                                    |\n| closable             | 是否显示关闭按钮                                                                                                                                                              | Boolean         | true                                     |\n| align                | 弹出层位置<br><br>**可选值**:<br>'t'(上)<br>'r'(右)<br>'b'(下)<br>'l'(左)<br>'tl'(上左)<br>'tr'(上右)<br>'bl'(下左)<br>'br'(下右)<br>'lt'(左上)<br>'lb'(左下)<br>'rt'(右上)<br>'rb'(右下 及其 两两组合) | Enum            | 'b'                                      |\n| offset               | 弹层相对于trigger的定位的微调                                                                                                                                                    | Array           | [0, 0]                                   |\n| trigger              | 触发元素                                                                                                                                                                  | any             | &lt;span>&lt;/span>                      |\n| triggerType          | 触发行为<br>鼠标悬浮, 获取到焦点, 鼠标点击('hover'，'focus'，'click')或者它们组成的数组，如 ['hover', 'focus']                                                                                      | String/Array    | 'hover'                                  |\n| onClose              | 任何visible为false时会触发的事件<br><br>**签名**:<br>Function() => void                                                                                                           | Function        | func.noop                                |\n| needAdjust           | 是否进行自动位置调整                                                                                                                                                            | Boolean         | false                                    |\n| delay                | 弹层在触发以后的延时显示, 单位毫秒 ms                                                                                                                                                 | Number          | -                                        |\n| afterClose           | 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void                                                                                                      | Function        | func.noop                                |\n| shouldUpdatePosition | 强制更新定位信息                                                                                                                                                              | Boolean         | -                                        |\n| autoFocus            | 弹层出现后是否自动focus到内部第一个元素                                                                                                                                                | Boolean         | false                                    |\n| safeNode             | 安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象                                                                         | String          | undefined                                |\n| safeId               | 用来指定safeNode节点的id，和safeNode配合使用                                                                                                                                       | String          | null                                     |\n| animation            | 配置动画的播放方式                                                                                                                                                             | Object/Boolean  | {     in: 'zoomIn',     out: 'zoomOut' } |\n| cache                | 弹层的dom节点关闭时是否删除                                                                                                                                                       | Boolean         | false                                    |\n| popupContainer       | 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。                                                                                                                                   | String/Function | -                                        |\n| popupStyle           | 弹层组件style，透传给Popup                                                                                                                                                    | Object          | {}                                       |\n| popupClassName       | 弹层组件className，透传给Popup                                                                                                                                                | String          | ''                                       |\n| popupProps           | 弹层组件属性，透传给Popup                                                                                                                                                       | Object          | {}                                       |\n| id                   | 弹层id, 传入值才会支持无障碍                                                                                                                                                      | String          | -                                        |\n\n### Balloon.Tooltip\n\n| 参数             | 说明                                                                                                                                                                    | 类型              | 默认值                 |\n| -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- | ------------------- |\n| children       | tooltip的内容                                                                                                                                                            | any             | -                   |\n| align          | 弹出层位置<br><br>**可选值**:<br>'t'(上)<br>'r'(右)<br>'b'(下)<br>'l'(左)<br>'tl'(上左)<br>'tr'(上右)<br>'bl'(下左)<br>'br'(下右)<br>'lt'(左上)<br>'lb'(左下)<br>'rt'(右上)<br>'rb'(右下 及其 两两组合) | Enum            | 'b'                 |\n| trigger        | 触发元素                                                                                                                                                                  | any             | &lt;span>&lt;/span> |\n| triggerType    | 触发行为<br>鼠标悬浮, 获取到焦点, 鼠标点击('hover'，'focus'，'click')或者它们组成的数组，如 ['hover', 'focus']                                                                                      | String/Array    | 'hover'             |\n| popupStyle     | 弹层组件style，透传给Popup                                                                                                                                                    | Object          | -                   |\n| popupClassName | 弹层组件className，透传给Popup                                                                                                                                                | String          | -                   |\n| popupProps     | 弹层组件属性，透传给Popup                                                                                                                                                       | Object          | -                   |\n| pure           | 是否pure render                                                                                                                                                         | Boolean         | -                   |\n| popupContainer | 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。                                                                                                                                   | String/Function | -                   |\n| id             | 弹层id, 传入值才会支持无障碍                                                                                                                                                      | String          | -                   |\n\n## 已知问题\n\n-   对于 disabled 的元素，onMouseLeave 事件在chrome下无法触发，此为chrome的bug，暂时无法绕过。\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "边缘对齐设置",
        "order": "3",
        "jsx": "import { Button, Balloon } from '@alifd/next';\n\n\n\n\nconst top = <Button  id=\"top\" style={{margin: '5px'}} className=\"btrigger\">top</Button>;\nconst right = <Button  id=\"right\" style={{margin: '5px'}} className=\"btrigger\">right</Button>;\nconst bottom = <Button id=\"bottom\" style={{margin: '5px'}} className=\"btrigger\">bottom</Button>;\nconst left = <Button id=\"left\" style={{margin: '5px'}} className=\"btrigger\">left</Button>;\nconst topLeft = <Button id=\"topLeft\" style={{margin: '5px'}} className=\"btrigger\">top left</Button>;\nconst topRight = <Button id=\"topRight\" style={{margin: '5px'}} className=\"btrigger\">top right</Button>;\nconst rightTop = <Button id=\"rightTop\" style={{margin: '5px'}} className=\"btrigger\">right top</Button>;\nconst rightBottom = <Button id=\"rightBottom\" style={{margin: '5px'}} className=\"btrigger\">right bottom</Button>;\nconst bottomLeft = <Button id=\"bottomLeft\" style={{margin: '5px'}} className=\"btrigger\">bottom left</Button>;\nconst bottomRight = <Button id=\"bottomRight\" style={{margin: '5px'}} className=\"btrigger\">bottom right</Button>;\nconst leftTop = <Button id=\"leftTop\" style={{margin: '5px'}} className=\"btrigger\">left top</Button>;\nconst leftBottom = <Button id=\"leftBottom\" style={{margin: '5px'}} className=\"btrigger\">left bottom</Button>;\n\nconst Content = () => (\n    <div>\n        <h4 style={{marginTop: 0}}>balloon title</h4>\n        <hr/>\n        <p>\n            balloon content\n        </p>\n    </div>\n);\n\nconst App = () => (\n    <div style={{paddingLeft: 320, paddingTop: 100}}>\n        <div style={{marginLeft: 75}}>\n            <Balloon trigger={topLeft} align=\"tl\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={top} align=\"t\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={topRight} align=\"tr\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n        </div>\n        <div style={{width: 80, float: 'left'}}>\n            <Balloon trigger={leftTop} align=\"lt\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={left} align=\"l\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={leftBottom} align=\"lb\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n        </div>\n        <div style={{width: 80, marginLeft: 290}}>\n            <Balloon trigger={rightTop} align=\"rt\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={right} align=\"r\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={rightBottom} align=\"rb\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n        </div>\n        <div style={{marginLeft: 80, clear: 'both'}}>\n            <Balloon trigger={bottomLeft} align=\"bl\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={bottom} align=\"b\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n            <Balloon trigger={bottomRight} align=\"br\" alignEdge triggerType=\"click\" style={{width: 300}}>\n                <Content/>\n            </Balloon>\n        </div>\n    </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n<p>位置有十二个方向。</p>\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Button, Balloon } from '@alifd/next';\n\n\n\nconst defaultTrigger = <Button className=\"btrigger\" style={{margin: '5px'}}>default style</Button>;\nconst primary = <Button className=\"btrigger\" style={{margin: '5px'}}>primary style</Button>;\n\n\nconst Demo = () => (\n    <div className=\"container\">\n        <Balloon  trigger={defaultTrigger} closable={false}>\n            default\n        </Balloon>\n        <Balloon type=\"primary\" trigger={primary}  triggerType=\"click\">\n            primary\n        </Balloon>\n    </div>\n);\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n<p>最简单的用法。</p>\n"
      },
      {
        "title": "从浮层内关闭, 事件回调",
        "order": "4",
        "jsx": "import { Button, Balloon } from '@alifd/next';\n\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false\n        };\n    }\n\n    hide() {\n        this.setState({\n            visible: false\n        });\n    }\n\n    // onVisibleChange callback will be triggered when visible changes.\n    // For example, for click type, it'll be triggered when clicking the button and later the other areas;\n    // for hover type, it'll be triggered when mouse enter and mouse leave\n    handleVisibleChange(visible) {\n        this.setState({visible});\n    }\n\n    onClose() {\n        console.log('onClose doing!');\n    }\n\n    afterClose() {\n        console.log('afterClose doing!');\n    }\n    render() {\n        const visibleTrigger = <Button type=\"primary\" style={{margin: '5px'}}>click to popup the card</Button>;\n        const clickTrigger = <Button type=\"primary\" style={{margin: '5px'}}>hover to popup the card</Button>;\n\n        const content = (<div>\n            click the button<br/>\n            <a style={{right: 0}} id=\"confirmBtn\" onClick={this.hide.bind(this)}>confirm</a>\n            <a style={{marginLeft: '4px'}} id=\"cancelBtn\" onClick={this.hide.bind(this)}>cancel</a>\n        </div>);\n        return (\n            <div>\n                <Balloon trigger={visibleTrigger}\n                    triggerType=\"click\"\n                    visible={this.state.visible}\n                    onVisibleChange={this.handleVisibleChange.bind(this)}\n                >\n                    {content}\n                </Balloon>\n                <Balloon trigger={clickTrigger}\n                    triggerType=\"hover\"\n                    onClose={this.onClose.bind(this)}\n                    afterClose={this.afterClose.bind(this)}>\n                    {content}\n                </Balloon>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n<p>使用 <code>visible</code> ,属性控制浮层显示, 使 balloon 变为受限组件。</p>\n"
      },
      {
        "title": "嵌套浮层问题",
        "order": "6",
        "jsx": "import { Button, Balloon, DatePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst primary = <Button className=\"btrigger\">primary</Button>;\nconst innerButton = <Button className=\"btrigger\">innerButton</Button>;\nconst dateValue = moment('2018-01-01', 'YYYY-MM-DD', true);\n\nconst App = () => (\n    <div className=\"container nested\">\n        <Balloon type=\"primary\" trigger={primary} closable={false} triggerType=\"click\">\n            <DatePicker defaultValue={dateValue} popupContainer={\n                (trigger) => trigger.parentNode\n            } />\n        </Balloon>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        <Balloon type=\"primary\"  trigger={innerButton} closable={false} triggerType=\"click\">\n            <Balloon trigger={<Button type=\"primary\">please click</Button>} popupContainer={(trigger) => trigger.parentNode} triggerType=\"click\">\n                nesting balloon content\n            </Balloon>\n        </Balloon>\n    </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "\n.container.nested {\n    margin-left: 100px;\n    margin-bottom: 50px;\n}\n\n",
        "body": "\n<p>浮层中如果又有浮层,比如在Balloon中有DatePicker的浮层,需要用safeNode解决datePicker选择时,balloon浮层关闭的问题.</p>\n"
      },
      {
        "title": "close按钮事件，手动控制visible",
        "order": "5",
        "jsx": "import { Button, Balloon } from '@alifd/next';\n\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false\n        };\n    }\n\n    // triggered every time visible becomes false\n    onClose() {\n        console.log('onClose doing!');\n    }\n\n    onClick() {\n        this.setState({visible: true});\n    }\n\n    render() {\n        const visibleTrigger = <Button onClick={this.onClick.bind(this)} type=\"primary\">click to pupup the card</Button>;\n        const content = (<div>content</div>);\n\n        return (\n            <div style={{marginBottom: '100px'}}>\n                <Balloon trigger={visibleTrigger}\n                    triggerType=\"click\"\n                    visible={this.state.visible}\n                    onClose={this.onClose.bind(this)} >\n                    {content}\n                </Balloon>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n<p>使用 <code>visible</code>,属性控制浮层显示, 使balloon变为受限组件。</p>\n"
      },
      {
        "title": "tooltip",
        "order": "7",
        "jsx": "import { Button, Balloon } from '@alifd/next';\n\n\n\nconst Tooltip = Balloon.Tooltip;\n\nconst top = <Button  style={{margin: '5px'}} id=\"top\" className=\"btrigger\">top</Button>;\nconst right = <Button style={{margin: '5px'}}id=\"right\" className=\"btrigger\">right</Button>;\nconst bottom = <Button style={{margin: '5px'}} id=\"bottom\" className=\"btrigger\">bottom</Button>;\nconst left = <Button style={{margin: '5px'}} id=\"left\" className=\"btrigger\">left</Button>;\nconst topLeft = <Button style={{margin: '5px'}} id=\"topLeft\" className=\"btrigger\">top left</Button>;\nconst topRight = <Button style={{margin: '5px'}} id=\"topRight\" className=\"btrigger\">top right</Button>;\nconst rightTop = <Button style={{margin: '5px'}} id=\"rightTop\" className=\"btrigger\">right top</Button>;\nconst rightBottom = <Button style={{margin: '5px'}} id=\"rightBottom\" className=\"btrigger\">right bottom</Button>;\nconst bottomLeft = <Button style={{margin: '5px'}} id=\"bottomLeft\" className=\"btrigger\">bottom left</Button>;\nconst bottomRight = <Button style={{margin: '5px'}} id=\"bottomRight\" className=\"btrigger\">bottom right</Button>;\nconst leftTop = <Button style={{margin: '5px'}} id=\"leftTop\" className=\"btrigger\">left top</Button>;\nconst leftBottom = <Button style={{margin: '5px'}} id=\"leftBottom\" className=\"btrigger\">left bottom</Button>;\n\nconst App = () => (\n    <div style={{paddingLeft: 220, paddingTop: 100}}>\n        <div style={{marginLeft: 75}}>\n            <Tooltip trigger={topLeft} align=\"tl\">text text</Tooltip>\n            <Tooltip trigger={top} align=\"t\">text text</Tooltip>\n            <Tooltip trigger={topRight} align=\"tr\">text text</Tooltip>\n        </div>\n        <div style={{width: 80, float: 'left'}}>\n            <Tooltip trigger={leftTop} align=\"lt\">text text</Tooltip>\n            <Tooltip trigger={left} align=\"l\">text text</Tooltip>\n            <Tooltip trigger={leftBottom} align=\"lb\">text text</Tooltip>\n        </div>\n        <div style={{width: 80, marginLeft: 290}}>\n            <Tooltip trigger={rightTop} align=\"rt\">text text</Tooltip>\n            <Tooltip trigger={right} align=\"r\">text text</Tooltip>\n            <Tooltip trigger={rightBottom} align=\"rb\">text text</Tooltip>\n        </div>\n        <div style={{marginLeft: 80, clear: 'both'}}>\n            <Tooltip trigger={bottomLeft} align=\"bl\">text text</Tooltip>\n            <Tooltip trigger={bottom} align=\"b\">text text</Tooltip>\n            <Tooltip trigger={bottomRight} align=\"br\">text text</Tooltip>\n        </div>\n    </div>\n\n);\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".code-box-demo .sui-btn {\n    margin-right: 1em;\n    margin-bottom: 1em;\n}\n",
        "body": "\n<p>简化的Balloon, 只能设置align, trigger和children, 触发条件是hover.</p>\n"
      },
      {
        "title": "三种触发方式",
        "order": "1",
        "jsx": "import { Button, Balloon } from '@alifd/next';\n\n\nconst content = (<div><p>content</p></div>);\nconst MoveTarget = <Button style={{margin: '5px'}}>hover</Button>;\nconst ClickTarget = <Button style={{margin: '5px'}}>click</Button>;\nconst FocusTarget = <Button style={{margin: '5px'}}>focus</Button>;\n\nconst App = () => (\n    <div>\n        <Balloon trigger={MoveTarget} triggerType=\"hover\">\n            {content}\n        </Balloon>\n\n        <Balloon trigger={ClickTarget} triggerType=\"click\">\n            {content}\n        </Balloon>\n\n        <Balloon trigger={FocusTarget} triggerType=\"focus\">\n            {content}\n        </Balloon>\n    </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n<p>鼠标移入、聚集、点击。</p>\n"
      }
    ]
  },
  {
    "name": "Breadcrumb",
    "category": "Components",
    "title": "面包屑",
    "type": "导航",
    "importStatement": "import { Breadcrumb } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n用来告知用户当前的位置，以及当前页面在整个网站中的位置，属于一种辅助的导航方式，适用于清晰且具多层次结构的网站，每一层内容为层级归属关系，方便用户返回上一级或各个层级的页面。\n\n API\n\n### Breadcrumb\n\n| 参数        | 说明                         | 类型        | 默认值                            |\n| --------- | -------------------------- | --------- | ------------------------------ |\n| children  | 面包屑子节点，需传入 Breadcrumb.Item | custom    | -                              |\n| maxNode   | 面包屑最多显示个数，超出部分会被隐藏         | Number    | 100                            |\n| separator | 分隔符，可以是文本或 Icon            | ReactNode | &lt;Icon type=\"arrow-right\" /> |\n\n### Breadcrumb.Item\n\n| 参数   | 说明                                           | 类型     | 默认值 |\n| ---- | -------------------------------------------- | ------ | --- |\n| link | 面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />` | String | -   |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本用法",
        "order": "0",
        "jsx": "import { Breadcrumb } from '@alifd/next';\n\nReactDOM.render(\n    <Breadcrumb>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Home</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">All Categories</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Women’s Clothing</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Blouses & Shirts</Breadcrumb.Item>\n        <Breadcrumb.Item>\n            T-shirts&nbsp; <b>78,999</b> Results\n        </Breadcrumb.Item>\n    </Breadcrumb>,\n    mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>Breadcrumb.Item</code> 来设置面包屑子节点，如果设置其 <code>link</code> 属性就是 <code>&lt;a /&gt;</code> 节点，否则为 <code>&lt;span /&gt;</code> 节点。</p>\n"
      },
      {
        "title": "显示省略",
        "order": "1",
        "jsx": "import { Breadcrumb } from '@alifd/next';\n\nReactDOM.render(\n    <Breadcrumb maxNode={5}>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Home 1</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Whatever 2</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">All Categories 3</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Women’s Clothing 4</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Blouses & Shirts 5</Breadcrumb.Item>\n        <Breadcrumb.Item>T-shirts 6</Breadcrumb.Item>\n    </Breadcrumb>,\n    mountNode);\n",
        "css": "",
        "body": "\n<p>当超过设置的最大个数的时候，显示省略号。</p>\n"
      },
      {
        "title": "设置分隔符",
        "order": "2",
        "jsx": "import { Breadcrumb } from '@alifd/next';\n\nReactDOM.render(\n    <Breadcrumb separator=\"/\">\n        <Breadcrumb.Item link=\"javascript:void(0);\">Home</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">All Categories</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Women’s Clothing</Breadcrumb.Item>\n        <Breadcrumb.Item link=\"javascript:void(0);\">Blouses & Shirts</Breadcrumb.Item>\n        <Breadcrumb.Item>T-shirts</Breadcrumb.Item>\n    </Breadcrumb>,\n    mountNode);\n",
        "css": "",
        "body": "\n<p>也可以设置不同的分隔符。</p>\n"
      }
    ]
  },
  {
    "name": "Button",
    "category": "Components",
    "title": "按钮",
    "type": "表单",
    "importStatement": "import { Button } from '@alifd/next';",
    "body": "\n按钮用于开始一个即时操作。\n\n## Guide\n\n### 何时使用\n\n标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。\n\n API\n\n### Button\n\n| 参数        | 说明                                                                                                           | 类型       | 默认值      |\n| --------- | ------------------------------------------------------------------------------------------------------------ | -------- | -------- |\n| size      | 按钮的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                          | Enum     | 'medium' |\n| type      | 按钮的类型<br><br>**可选值**:<br>'primary', 'secondary', 'normal'                                                    | Enum     | 'normal' |\n| iconSize  | 按钮中 Icon 的尺寸，用于替代 Icon 的默认大小<br><br>**可选值**:<br>'xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl' | Enum     | -        |\n| htmlType  | 当 component = 'button' 时，设置 button 标签的 type 值<br><br>**可选值**:<br>'submit', 'reset', 'button'                 | Enum     | 'button' |\n| component | 设置标签类型<br><br>**可选值**:<br>'button', 'a'                                                                      | Enum     | 'button' |\n| loading   | 设置按钮的载入状态                                                                                                    | Boolean  | false    |\n| ghost     | 是否为幽灵按钮<br><br>**可选值**:<br>true, false, 'light', 'dark'                                                      | Enum     | false    |\n| text      | 是否为文本按钮                                                                                                      | Boolean  | false    |\n| warning   | 是否为警告按钮                                                                                                      | Boolean  | false    |\n| disabled  | 是否禁用                                                                                                         | Boolean  | false    |\n| onClick   | 点击按钮的回调<br><br>**签名**:<br>Function(e: Object) => void<br>**参数**:<br>_e_: {Object} Event Object               | Function | () => {} |\n\n### Button.Group\n\n| 参数   | 说明                  | 类型     | 默认值      |\n| ---- | ------------------- | ------ | -------- |\n| size | 统一设置 Button 组件的按钮大小 | String | 'medium' |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "按钮类型",
        "order": "0",
        "jsx": "import { Button } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Button type=\"normal\">Normal</Button> &nbsp;&nbsp;\n    <Button type=\"primary\">Prirmary</Button> &nbsp;&nbsp;\n    <Button type=\"secondary\">Secondary</Button>\n    <br /><br />\n    <Button type=\"normal\" text>Normal</Button> &nbsp;&nbsp;\n    <Button type=\"primary\" text>Primary</Button> &nbsp;&nbsp;\n    <Button type=\"secondary\" text>Secondary</Button>\n    <br /><br />\n    <Button type=\"normal\" warning>Normal</Button> &nbsp;&nbsp;\n    <Button type=\"primary\" warning>Primary</Button> &nbsp;&nbsp;\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>按钮有三种视觉层次：主按钮、次按钮、普通按钮。不同的类型可以用来区别按钮的重要程度。</p>\n"
      },
      {
        "title": "自定义标签类型",
        "order": "6",
        "jsx": "import { Button } from '@alifd/next';\n\nconst props = {\n    component: 'a',\n    href: 'http://www.alibaba.com',\n    target: '_blank',\n};\n\nReactDOM.render(<div>\n    <Button {...props} type=\"primary\">alibaba.com</Button> &nbsp;&nbsp;\n    <Button {...props} type=\"secondary\">alibaba.com</Button> &nbsp;&nbsp;\n    <Button {...props} type=\"normal\">alibaba.com</Button>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>默认情况下 Button 组件使用 <code>&lt;button&gt;</code> 标签来渲染按钮，通过 <code>component</code> 属性可以自定义 Button 的标签类型。\n可选值为 <code>button</code> 和 <code>a</code>。</p>\n"
      },
      {
        "title": "不可用状态",
        "order": "5",
        "jsx": "import { Button } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Button type=\"primary\">Primary</Button>&nbsp;&nbsp;\n    <Button component=\"a\" type=\"primary\" disabled>Primary</Button>\n    <br />\n    <br />\n    <Button type=\"secondary\">Secondary</Button>&nbsp;&nbsp;\n    <Button type=\"secondary\" disabled>Secondary</Button>\n    <br />\n    <br />\n    <Button type=\"normal\">Normal</Button>&nbsp;&nbsp;\n    <Button type=\"normal\" disabled>Normal</Button>\n    <br />\n    <br />\n    <div>\n        <div className=\"ghost-light-background\">\n            <Button ghost=\"light\" disabled>Ghost Light</Button>\n        </div>\n        <div className=\"ghost-dark-background\">\n            <Button ghost=\"dark\" disabled>Ghost Dark</Button>\n        </div>\n    </div>\n</div>, mountNode);\n",
        "css": ".ghost-light-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #EBECF0;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n.ghost-dark-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #333;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n",
        "body": "\n<p>添加 <code>disabled</code> 属性即可让按钮处于不可用状态，同时按钮样式也会改变。</p>\n"
      },
      {
        "title": "幽灵按钮",
        "order": "4",
        "jsx": "import { Button } from '@alifd/next';\n\nReactDOM.render(<div style={{ clear: 'both' }}>\n    <div className=\"ghost-light-background\">\n        <Button ghost=\"light\">Ghost light</Button>\n    </div>\n    <div className=\"ghost-dark-background\">\n        <Button ghost=\"dark\">Ghost dark</Button>\n    </div>\n</div>, mountNode);\n",
        "css": ".ghost-light-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #EBECF0;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n.ghost-dark-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #333;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n",
        "body": "\n<p>幽灵按钮通常用在有色背景下，可以使用 <code>ghost</code> 属性开启，此时 Button 为透明背景。对于浅色背景和深色背景，通过取值 <code>light</code>, <code>dark</code> 可以配置使用幽灵按钮的场景。</p>\n"
      },
      {
        "title": "按钮组",
        "order": "7",
        "jsx": "import { Button, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Button.Group>\n        <Button type=\"primary\">OK</Button>\n        <Button type=\"secondary\">Cancel</Button>\n    </Button.Group>\n    &nbsp;&nbsp;\n    <Button.Group>\n        <Button disabled>Left</Button>\n        <Button disabled>Middle</Button>\n        <Button disabled>Right</Button>\n    </Button.Group>\n    <br />\n    <br />\n\n    <Button.Group>\n        <Button type=\"primary\"><Icon type=\"arrow-left\" /> Backward</Button>\n        <Button type=\"primary\">Forward <Icon type=\"arrow-right\" /></Button>\n    </Button.Group>\n    &nbsp;&nbsp;\n    <Button.Group>\n        <Button type=\"primary\"><Icon type=\"prompt\" /></Button>\n        <Button type=\"primary\"><Icon type=\"clock\" /></Button>\n        <Button type=\"primary\"><Icon type=\"set\" /></Button>\n    </Button.Group>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p><code>Button.Group</code> 子组件用于将多个按钮组合在一个容器中。</p>\n"
      },
      {
        "title": "图标按钮",
        "order": "2",
        "jsx": "import { Button, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Button><Icon type=\"atm\" /> ATM</Button> &nbsp;&nbsp;\n    <Button text><Icon type=\"atm\" /> ATM</Button> &nbsp;&nbsp;\n    <Button warning><Icon type=\"atm\" /> ATM</Button> &nbsp;&nbsp;\n    <Button iconSize=\"xxs\"><Icon type=\"arrow-left\" /> ARROW</Button> &nbsp;&nbsp;\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>Button 可以嵌入 Icon，默认情况下 Icon 尺寸自动跟随 Button 的尺寸。如果用户想要控制 Icon 的大小，可以通过 <code>iconSize</code> 属性进行设置。</p>\n"
      },
      {
        "title": "加载中",
        "order": "3",
        "jsx": "import { Button } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            loading: false,\n        };\n    }\n\n    setLoading = () => {\n        this.setState({ loading: true });\n    }\n\n    render() {\n        return (<div>\n            <Button type=\"secondary\" loading>Loading</Button>&nbsp;&nbsp;\n            <Button type=\"primary\" loading={this.state.loading} onClick={this.setLoading}>Click to loading</Button>\n        </div>);\n    }\n}\n\nReactDOM.render(<Demo/>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过设置 <code>loading</code> 属性即可以让按钮处于加载状态。</p>\n"
      },
      {
        "title": "按钮尺寸",
        "order": "1",
        "jsx": "import { Button, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Button type=\"primary\" size=\"large\"><Icon type=\"atm\" />Large</Button>&nbsp;&nbsp;\n    <Button type=\"primary\"><Icon type=\"atm\" />Medium</Button>&nbsp;&nbsp;\n    <Button type=\"primary\" size=\"small\"><Icon type=\"atm\" />Small</Button>\n    <br />\n    <br />\n    <Button.Group size=\"large\">\n        <Button>Button</Button>\n        <Button>Button</Button>\n        <Button>Button</Button>\n    </Button.Group>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过设置 <code>size</code> 属性控制按钮的尺寸，可选值为 <code>large</code> <code>medium</code> <code>small</code>，其中默认值为 <code>medium</code>。</p>\n"
      }
    ]
  },
  {
    "name": "Calendar",
    "category": "Components",
    "title": "日历",
    "type": "展示",
    "importStatement": "import { Calendar } from '@alifd/next';",
    "body": "\n## Guide\n\n按照日历形式展示数据的容器。\n\n### 何时使用\n\n日历组件是一个偏向于展示与受控的基础组件，可用于日程、课表、价格日历、农历展示等。\n\n### 日期值的多语言\n\n由于 Calendar 组件内部使用 moment 对象来设置日期（请使用最新版 moment），部分 Locale 读取自 moment，因此用户需要在外部使用时[正确的设置 moment 的 locale](http://momentjs.cn/docs/#/i18n/changing-locale/) 。\n\n```js\nimport moment from 'moment';\n\nmoment.locale('zh-cn');\n```\n\n API\n\n### Calendar\n\n| 参数                   | 说明                                                                                                                                                                        | 类型       | 默认值                     |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ----------------------- |\n| defaultValue         | 默认选中的日期（moment 对象）                                                                                                                                                        | custom   | -                       |\n| shape                | 展现形态<br><br>**可选值**:<br>'card', 'fullscreen', 'panel'                                                                                                                     | Enum     | 'fullscreen'            |\n| value                | 选中的日期值 (moment 对象)                                                                                                                                                        | custom   | -                       |\n| showOtherMonth       | 是否展示非本月的日期                                                                                                                                                                | Boolean  | true                    |\n| defaultVisibleMonth  | 默认展示的月份<br><br>**签名**:<br>Function() => void                                                                                                                              | Function | -                       |\n| onSelect             | 选择日期单元格时的回调<br><br>**签名**:<br>Function(value: Object) => void<br>**参数**:<br>_value_: {Object} 对应的日期值 (moment 对象)                                                          | Function | func.noop               |\n| onVisibleMonthChange | 展现的月份变化时的回调<br><br>**签名**:<br>Function(value: Object, reason: String) => void<br>**参数**:<br>_value_: {Object} 显示的月份 (moment 对象)<br>_reason_: {String} 触发月份改变原因            | Function | func.noop               |\n| dateCellRender       | 自定义日期渲染函数<br><br>**签名**:<br>Function(value: Object) => ReactNode<br>**参数**:<br>_value_: {Object} 日期值（moment对象）<br>**返回值**:<br>{ReactNode} null<br>                        | Function | (value) => value.date() |\n| monthCellRender      | 自定义月份渲染函数<br><br>**签名**:<br>Function(calendarDate: Object) => ReactNode<br>**参数**:<br>_calendarDate_: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{ReactNode} null<br> | Function | -                       |\n| disabledDate         | 不可选择的日期<br><br>**签名**:<br>Function(calendarDate: Object) => Boolean<br>**参数**:<br>_calendarDate_: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Boolean} null<br>       | Function | -                       |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "全屏日历",
        "order": "0",
        "jsx": "import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\nfunction onDateChange(value) {\n    console.log(value.format('L'));\n}\n\nReactDOM.render(<div>\n    <Calendar onSelect={onDateChange} defaultValue={moment().add(1, 'days')} /></div>, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的日历用法，用户可以切换年/月。</p>\n"
      },
      {
        "title": "日历卡片",
        "order": "1",
        "jsx": "import { Calendar } from '@alifd/next';\n\nfunction onDateChange(value) {\n    console.log(value);\n}\n\nReactDOM.render(<div className=\"wrapped-calendar\">\n    <Calendar onSelect={onDateChange} shape=\"card\" />\n</div>, mountNode);\n",
        "css": ".wrapped-calendar {\n    width: 300px;\n    border: 1px solid #C4C6CF;\n    border-radius: 3px;\n    padding: 8px;\n}\n",
        "body": "\n<p>可以将 <code>card</code> 形态的日历组件嵌套在宽高受限的容器中。</p>\n"
      },
      {
        "title": "定制日历内容",
        "order": "3",
        "jsx": "import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\nconst currentDate = moment();\nconst localeData = currentDate.clone().localeData();\nconst monthLocale = localeData.monthsShort();\n\n\nfunction dateCellRender(date) {\n    const dateNum = date.date();\n    if (currentDate.month() !== date.month()) {\n        return dateNum;\n    }\n\n    let eventList;\n    switch (dateNum) {\n        case 1:\n            eventList = [\n                { type: 'primary', content: 'Event 1' },\n                { type: 'normal', content: 'Event 2' },\n            ];\n            break;\n        case 10:\n            eventList = [\n                { type: 'normal', content: 'Event 3' },\n                { type: 'normal', content: 'Event 4' },\n            ];\n            break;\n        case 11:\n            eventList = [\n                { type: 'primary', content: 'Event 5' },\n                { type: 'primary', content: 'Event 6' },\n            ];\n            break;\n        default:\n            eventList = [];\n    }\n\n    return (<div className=\"custom-calendar-cell\">\n        <div className=\"custom-calendar-cell-value\">{dateNum}</div>\n        <div className=\"custom-calendar-cell-content\">\n            <ul className=\"event-list\">\n                {eventList.map((item, key) => <li className={`${item.type}-event`} key={key}>{item.content}</li>)}\n            </ul>\n        </div>\n    </div>);\n}\n\nfunction monthCellRender(date) {\n    if (currentDate.month() === date.month()) {\n        return (<div>\n            <div>{monthLocale[date.month()]}</div>\n            <div>Events</div>\n        </div>);\n    }\n    return monthLocale[date.month()];\n}\n\nReactDOM.render(<Calendar dateCellRender={dateCellRender} monthCellRender={monthCellRender} />, mountNode);\n",
        "css": ".custom-calendar-guide {\n    width: 270px;\n    border: 1px solid #C4C6CF;\n    border-radius: 3px;\n    overflow: hidden;\n    margin-top: 20px;\n}\n\n.custom-calendar-cell-content {\n    height: 50px;\n    text-align: left;\n}\n\n.event-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.primary-event {\n    color: white;\n    background: red;\n    border-radius: 3px;\n    padding-left: 10px;\n    margin-bottom: 3px;\n}\n\n.normal-event {\n    color: white;\n    background: blue;\n    border-radius: 3px;\n    padding-left: 10px;\n    margin-bottom: 3px;\n}\n",
        "body": "\n<p>通过 <code>dateCellRender</code> 和  <code>monthCellRender</code> 用户可以在日历中添加自定义内容。</p>\n"
      },
      {
        "title": "日历默认展示月份",
        "order": "4",
        "jsx": "import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\nfunction onSelect(value) {\n    console.log(value.format('L'));\n}\n\nfunction onVisibleMonthChange(value, reason) {\n    console.log('Visible month changed to %s from <%s>', value.format('YYYY-MM'), reason);\n}\n\nReactDOM.render(<Calendar onSelect={onSelect} defaultVisibleMonth={() => moment('2018-01', 'YYYY-MM', true)} onVisibleMonthChange={onVisibleMonthChange} />, mountNode);\n",
        "css": "",
        "body": "\n<p>日历组件默认使用当前月作为展示的月份，用户可以可以通过 <code>defaultVisibleMonth</code> 属性进行定制。并可以通过 <code>onVisibleMonthChange</code> 属性监听面板可视月份的变化。</p>\n"
      },
      {
        "title": "禁用日期",
        "order": "2",
        "jsx": "import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\nconst currentDate = moment();\nconst disabledDate = function (date) {\n    return date.valueOf() > currentDate.valueOf();\n};\n\nReactDOM.render(<div className=\"wrapped-calendar\">\n    <Calendar disabledDate={disabledDate} shape=\"card\" />\n</div>, mountNode);\n",
        "css": ".wrapped-calendar {\n    width: 300px;\n    border: 1px solid #C4C6CF;\n    border-radius: 3px;\n    padding: 8px;\n}\n",
        "body": "\n<p>可以通过 <code>disabledDate</code> 属性禁止用户选择某些日期。</p>\n"
      },
      {
        "title": "多语言",
        "order": "6",
        "jsx": "import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\n// Setting moment locale to Chinese\nmoment.locale('zh-cn');\n\nReactDOM.render(<Calendar />, mountNode);\n",
        "css": "",
        "body": "\n<p>日期时间的多语言来源于 moment ，可以通过 <code>moment.locale(&#39;zh-cn&#39;)</code> 来设置显示中文。</p>\n"
      },
      {
        "title": "日历面板",
        "order": "5",
        "jsx": "import { Calendar } from '@alifd/next';\nimport moment from 'moment';\n\nReactDOM.render(<div>\n    <Calendar shape=\"panel\" value={moment().add(1, 'days')} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>日历面板通用用于嵌套在弹层容器中。</p>\n"
      }
    ]
  },
  {
    "name": "Card",
    "category": "Components",
    "title": "卡片",
    "type": "基本",
    "importStatement": "import { Card } from '@alifd/next';",
    "body": "\n## Guide\n\n一个通用的卡片组件。\n\n### 何时使用\n\n当一个模块的同类信息不能自然形成区块感，可借助 Card 组件将信息整合，帮助界面信息模块感更强。\n\n API\n\n### Card\n\n| 参数              | 说明           | 类型            | 默认值  |\n| --------------- | ------------ | ------------- | ---- |\n| title           | 卡片的标题        | ReactNode     | -    |\n| subTitle        | 卡片的副标题       | ReactNode     | -    |\n| showTitleBullet | 是否显示标题的项目符号  | Boolean       | true |\n| showHeadDivider | 是否展示头部的分隔线   | Boolean       | true |\n| contentHeight   | 内容区域的固定高度    | String/Number | 120  |\n| extra           | 标题区域的用户自定义内容 | ReactNode     | -    |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Card } from '@alifd/next';\n\nconst commonProps = {\n    style: { width: 300 },\n    subTitle: 'SubTitle',\n    extra: 'Link',\n};\n\nReactDOM.render(<div>\n    <Card {...commonProps} title=\"Simple Card\">\n        <div className=\"card-placeholder\"></div>\n    </Card>\n</div>, mountNode);\n",
        "css": ".card-placeholder {\n    height: 500px;\n    text-align: center;\n    background: #F7F8FA;\n}\n",
        "body": "\n<p>最简单的用法。</p>\n"
      },
      {
        "title": "自定义卡片样式",
        "order": "2",
        "jsx": "import { Card } from '@alifd/next';\n\nReactDOM.render(<Card className=\"image-card\" contentHeight=\"auto\">\n    <img src=\"https://img.alicdn.com/tfs/TB1FNIOSFXXXXaWXXXXXXXXXXXX-260-188.png\" alt=\"father day\" />\n    <div className=\"custom-card\">\n        <h3>Father's Day</h3>\n        <p>Thank you, papa</p>\n    </div>\n</Card>, mountNode);\n",
        "css": ".image-card {\n    display: inline-block;\n    text-align: center;\n}\n\n.custom-card p {\n    color: #999;\n}\n",
        "body": "\n<p>如果默认的卡片样式不能满足您的需求，除了通过 Fusion 配置平台修改，还可以通过传入自定义样式修改。\n如果 <code>title</code> 属性不传入任何值，则默认会去除整个头部区域。</p>\n"
      },
      {
        "title": "自定义内容高度",
        "order": "1",
        "jsx": "import { Card } from '@alifd/next';\n\nconst commonProps = {\n    style: { width: 300 },\n    title: 'Title',\n    subTitle: 'Sub-title',\n};\n\nReactDOM.render(<div>\n    <Card {...commonProps} contentHeight=\"auto\">\n        <div className=\"custom-content\">\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n        </div>\n    </Card>\n    &nbsp;&nbsp;\n    <Card {...commonProps} contentHeight={200}>\n        <div className=\"custom-content\">\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n            <p>Card content</p>\n        </div>\n    </Card>\n</div>, mountNode);\n",
        "css": ".custom-content p {\n    margin: 0;\n}\n",
        "body": "\n<p>可以通过 <code>contentHeight</code> 属性自定义内容区的高度。例如取值为 <code>auto</code> 的时候会默认关闭卡片的收缩效果。</p>\n"
      },
      {
        "title": "标题无项目符号",
        "order": "3",
        "jsx": "import { Card, Button } from '@alifd/next';\n\nconst commonProps = {\n    style: { width: 300 },\n    title: 'Title',\n    extra: <Button text>More</Button>\n};\n\nReactDOM.render(<div>\n    <Card {...commonProps} showTitleBullet={false}>\n        Card Content\n    </Card>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过配置 <code>hasTitleBullet</code> 属性配置卡片标题是否显示项目符号。此外，<code>extra</code> 允许用户传入自定义的 React 组件。</p>\n"
      },
      {
        "title": "隐藏头部下划线",
        "order": "4",
        "jsx": "import { Card } from '@alifd/next';\n\nconst commonProps = {\n    title: 'Title',\n    style: { width: 300 },\n    subTitle: 'Sub-title',\n    extra: 'Link',\n};\n\nReactDOM.render(<div>\n    <Card {...commonProps} showHeadDivider={false}>\n        <div className=\"card-placeholder\"></div>\n    </Card>\n</div>, mountNode);\n",
        "css": ".card-placeholder {\n    height: 500px;\n    text-align: center;\n    background: #F7F8FA;\n}\n",
        "body": "\n<p>可以通过设置 <code>showHeadDivider={false}</code> 隐藏头部下划线。</p>\n"
      }
    ]
  },
  {
    "name": "CascaderSelect",
    "category": "Components",
    "title": "级联选择",
    "type": "基本",
    "importStatement": "import { CascaderSelect } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n级联选择由选择器和级联组成。把级联组件以弹层的方式隐藏，多用于表单场景。\n\n API\n\n### CascaderSelect\n\n| 参数                   | 说明| 类型                      | 默认值                                                                                     |\n| -------------------- || ----------------------- | --------------------------------------------------------------------------------------- |\n| size                 | 选择框大小<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | Enum                    | 'medium'                                                                                |\n| placeholder          | 选择框占位符| String                  | -                                                                                       |\n| disabled             | 是否禁用| Boolean                 | false                                                                                   |\n| hasArrow             | 是否有下拉箭头| Boolean                 | true                                                                                    |\n| hasBorder            | 是否有边框| Boolean                 | true                                                                                    |\n| hasClear             | 是否有清除按钮| Boolean                 | false                                                                                   |\n| label                | 自定义内联 label                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | ReactNode               | -                                                                                       |\n| readOnly             | 是否只读，只读模式下可以展开弹层但不能选                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean                 | -                                                                                       |\n| dataSource           | 数据源，结构可参考下方说明                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Array&lt;Object>        | \\[]                                                                                     |\n| defaultValue         | （非受控）默认值                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | String/Array&lt;String> | null                                                                                    |\n| value                | （受控）当前值| String/Array&lt;String> | -                                                                                       |\n| onChange             | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array, extra: Object) => void<br>**参数**:<br>_value_: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>_data_: {Object/Array} 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点<br>_extra_: {Object} 额外参数<br>_extra.selectedPath_: {Array} 单选时选中的数据的路径<br>_extra.checked_: {Boolean} 多选时当前的操作是选中还是取消选中<br>_extra.currentData_: {Object} 多选时当前操作的数据<br>_extra.checkedData_: {Array} 多选时所有被选中的数据<br>_extra.indeterminateData_: {Array} 多选时半选的数据 | Function                | -                                                                                       |\n| defaultExpandedValue | 默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Array&lt;String>        | -                                                                                       |\n| expandTriggerType    | 展开触发的方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | Enum                    | 'click'                                                                                 |\n| useVirtual           | 是否开启虚拟滚动                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Boolean                 | false                                                                                   |\n| multiple             | 是否多选| Boolean                 | false                                                                                   |\n| changeOnSelect       | 是否选中即发生改变, 该属性仅在单选模式下有效                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | Boolean                 | false                                                                                   |\n| canOnlyCheckLeaf     | 是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Boolean                 | false                                                                                   |\n| checkStrictly        | 父子节点是否选中不关联                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | Boolean                 | false                                                                                   |\n| listStyle            | 每列列表样式对象                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Object                  | -                                                                                       |\n| listClassName        | 每列列表类名                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | String                  | -                                                                                       |\n| displayRender        | 选择框单选时展示结果的自定义渲染函数<br><br>**签名**:<br>Function(label: Array) => ReactNode<br>**参数**:<br>_label_: {Array} 选中路径的文本数组<br>**返回值**:<br>{ReactNode} 渲染在选择框中的内容<br>                                                                                                                                                                                                                                                                                                                                                                | Function                | 单选时：labelPath => labelPath.join(' / ')；多选时：labelPath => labelPath[labelPath.length - 1] |\n| showSearch           | 是否显示搜索框| Boolean                 | false                                                                                   |\n| filter               | 自定义搜索函数<br><br>**签名**:<br>Function(searchValue: String, path: Array) => Boolean<br>**参数**:<br>_searchValue_: {String} 搜索的关键字<br>_path_: {Array} 节点路径<br>**返回值**:<br>{Boolean} 是否匹配<br>                                                                                                                                                                                                                                                                                                                                     | Function                | 根据路径所有节点的文本值模糊匹配                                                                        |\n| resultRender         | 搜索结果自定义渲染函数<br><br>**签名**:<br>Function(searchValue: String, path: Array) => ReactNode<br>**参数**:<br>_searchValue_: {String} 搜索的关键字<br>_path_: {Array} 匹配到的节点路径<br>**返回值**:<br>{ReactNode} 渲染的内容<br>                                                                                                                                                                                                                                                                                                                        | Function                | 按照节点文本 a / b / c 的模式渲染                                                                  |\n| resultAutoWidth      | 搜索结果列表是否和选择框等宽                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             | Boolean                 | true                                                                                    |\n| notFoundContent      | 无数据时显示内容                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | ReactNode               | 'Not Found'                                                                             |\n| loadData             | 异步加载数据函数<br><br>**签名**:<br>Function(data: Object) => void<br>**参数**:<br>_data_: {Object} 当前点击异步加载的数据                                                                                                                                                                                                                                                                                                                                                                                                                       | Function                | -                                                                                       |\n| header               | 自定义下拉框头部                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | ReactNode               | -                                                                                       |\n| footer               | 自定义下拉框底部                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | ReactNode               | -                                                                                       |\n| defaultVisible       | 初始下拉框是否显示                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Boolean                 | false                                                                                   |\n| visible              | 当前下拉框是否显示                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Boolean                 | -                                                                                       |\n| onVisibleChange      | 下拉框显示或关闭时触发事件的回调函数<br><br>**签名**:<br>Function(visible: Boolean, type: String) => void<br>**参数**:<br>_visible_: {Boolean} 是否显示<br>_type_: {String} 触发显示关闭的操作类型                                                                                                                                                                                                                                                                                                                                                              | Function                | () => {}                                                                                |\n| popupStyle           | 下拉框自定义样式对象                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | Object                  | -                                                                                       |\n| popupClassName       | 下拉框样式自定义类名                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | String                  | -                                                                                       |\n| popupContainer       | 下拉框挂载的容器节点                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | String/Function         | -                                                                                       |\n| popupProps           | 透传到 Popup 的属性对象                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Object                  | {}                                                                                      |\n\n<!-- api-extra-start -->\n\n### dataSource数据结构\n\n```js\nconst dataSource = [{\n    value: '2974',\n    label: '西安',\n    children: [\n        { value: '2975', label: '西安市', disabled: true },\n        { value: '2976', label: '高陵县', checkboxDisabled: true },\n        { value: '2977', label: '蓝田县' },\n        { value: '2978', label: '户县' },\n        { value: '2979', label: '周至县' },\n        { value: '4208', label: '灞桥区' },\n        { value: '4209', label: '长安区' },\n        { value: '4210', label: '莲湖区' },\n        { value: '4211', label: '临潼区' },\n        { value: '4212', label: '未央区' },\n        { value: '4213', label: '新城区' },\n        { value: '4214', label: '阎良区' },\n        { value: '4215', label: '雁塔区' },\n        { value: '4388', label: '碑林区' },\n        { value: '610127', label: '其它区' }\n    ]\n}];\n```\n\n数组中 Item 的自定义属性也会被透传到 onChange 函数的 data 参数中。\n\n<!-- api-extra-end -->\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本使用",
        "order": "0",
        "jsx": "import { CascaderSelect } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => {\n                data[1].disabled = true;\n                this.setState({ data });\n            })\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return <CascaderSelect style={{ width: '302px' }} dataSource={this.state.data} onChange={this.handleChange} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示基本的单选用法。</p>\n"
      },
      {
        "title": "自定义样式",
        "order": "6",
        "jsx": "import { CascaderSelect } from '@alifd/next';\n\nconst dataSource = [{\n    value: '2973',\n    label: '陕西',\n    children: [{\n        value: '2974',\n        label: '西安',\n        children: [\n            { value: '2975', label: '西安市' },\n            { value: '2976', label: '高陵县' }\n        ]\n    }, {\n        value: '2980',\n        label: '铜川',\n        children: [\n            { value: '2981', label: '铜川市' },\n            { value: '2982', label: '宜君县' }\n        ]\n    }]\n}, {\n    value: '3371',\n    label: '新疆',\n    children: [{\n        value: '3430',\n        label: '巴音郭楞蒙古自治州',\n        children: [\n            { value: '3431', label: '库尔勒市' },\n            { value: '3432', label: '和静县' }\n        ]\n    }]\n}];\n\nReactDOM.render(<CascaderSelect style={{ width: '452px'}} listStyle={{ width: '150px', height: '160px' }} displayRender={labels => labels[labels.length - 1]} defaultValue=\"3431\" dataSource={dataSource} />, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 displayRender 来定制单选时展示的结果，可以通过 listStyle，listClassName 来定制组件宽高。</p>\n"
      },
      {
        "title": "异步加载数据",
        "order": "7",
        "jsx": "import { CascaderSelect } from '@alifd/next';\n\nconst dataSource = [{\n    value: '2973',\n    label: '陕西'\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataSource\n        };\n\n        this.onLoadData = this.onLoadData.bind(this);\n    }\n\n    onLoadData(data) {\n        console.log(data);\n\n        return new Promise(resolve => {\n            setTimeout(() => {\n                this.setState({\n                    dataSource: [{\n                        value: '2973',\n                        label: '陕西',\n                        children: [{\n                            value: '2974',\n                            label: '西安',\n                            children: [\n                                { value: '2975', label: '西安市', isLeaf: true },\n                                { value: '2976', label: '高陵县', isLeaf: true }\n                            ]\n                        }, {\n                            value: '2980',\n                            label: '铜川',\n                            children: [\n                                { value: '2981', label: '铜川市', isLeaf: true },\n                                { value: '2982', label: '宜君县', isLeaf: true }\n                            ]\n                        }]\n                    }]\n                }, resolve);\n            }, 500);\n        });\n    }\n\n    render() {\n        return <CascaderSelect style={{ width: '302px' }} dataSource={this.state.dataSource} loadData={this.onLoadData} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示动态获取数据的用法。</p>\n"
      },
      {
        "title": "展开触发行为",
        "order": "1",
        "jsx": "import { Radio, CascaderSelect } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            triggerType: 'click',\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleTriggerTypeChange = this.handleTriggerTypeChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data }))\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    handleTriggerTypeChange(triggerType) {\n        this.setState({\n            triggerType\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"trigger-check\">\n                    Expand trigger type:\n                    <RadioGroup dataSource={['click', 'hover']} value={this.state.triggerType} onChange={this.handleTriggerTypeChange} />\n                </div>\n\n                <CascaderSelect style={{ width: '302px' }} expandTriggerType={this.state.triggerType} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".trigger-check {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n\n.trigger-check .next-radio-group {\n    margin-left: 10px;\n}\n",
        "body": "\n<p>展示可通过 expandTriggerType 来设置不同的展开触发行为，支持 click 和 hover，默认值为 click。</p>\n"
      },
      {
        "title": "设置父子节点选中是否关联",
        "order": "4",
        "jsx": "import { Checkbox, CascaderSelect } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: [],\n            data: [],\n            checkStrictly: false\n        };\n\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data, value: ['2975'] }))\n            .catch(e => console.log(e));\n    }\n\n    handleCheck() {\n        this.setState({\n            checkStrictly: !this.state.checkStrictly,\n            value: []\n        });\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"control-multiple-demo\">\n                <label className=\"strictly-check\">\n                    <Checkbox value={this.state.checkStrictly} onChange={this.handleCheck} />\n                    <span className=\"strictly-text\">Enable checkStrictly</span>\n                </label>\n                <CascaderSelect style={{ width: '302px' }} multiple checkStrictly={this.state.checkStrictly} value={this.state.value} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".control-multiple-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-multiple-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n<p>展示受控多选以及是否开启严格受控父子节点选中不再关联的用法。</p>\n"
      },
      {
        "title": "多选",
        "order": "2",
        "jsx": "import { CascaderSelect } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => {\n                data[1].disabled = true;\n                data[2].checkboxDisabled = true;\n                this.setState({ data });\n            })\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return <CascaderSelect style={{ width: '302px' }} multiple dataSource={this.state.data} onChange={this.handleChange} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".cascader-value {\n    width: 500px;\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n<p>展示基本的多选用法。</p>\n"
      },
      {
        "title": "搜索",
        "order": "5",
        "jsx": "import { Checkbox, CascaderSelect } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: [],\n            data: [],\n            multiple: false\n        };\n\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data, value: ['2975'] }))\n            .catch(e => console.log(e));\n    }\n\n    handleCheck() {\n        this.setState({\n            multiple: !this.state.multiple,\n            value: []\n        });\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"search-demo\">\n                <label className=\"multiple-check\">\n                    <Checkbox value={this.state.multiple} onChange={this.handleCheck} />\n                    <span className=\"multiple-text\">Multiple select</span>\n                </label>\n                <CascaderSelect style={{ width: '302px' }} showSearch multiple={this.state.multiple} value={this.state.value} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".search-demo .multiple-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.search-demo .multiple-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n<p>通过设置 showSearch 为 true，可以开启组件的搜索功能。</p>\n"
      },
      {
        "title": "设置是否只能选择叶子项",
        "order": "3",
        "jsx": "import { Checkbox, CascaderSelect } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null,\n            changeOnSelect: false,\n            data: []\n        };\n\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data, value: '2975' }))\n            .catch(e => console.log(e));\n    }\n\n    handleCheck() {\n        this.setState({\n            changeOnSelect: !this.state.changeOnSelect,\n            value: null\n        });\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"control-single-demo\">\n                <label className=\"change-check\">\n                    <Checkbox value={!this.state.changeOnSelect} onChange={this.handleCheck} />\n                    <span className=\"change-text\">Enable changeOnSelect</span>\n                </label>\n                <CascaderSelect style={{ width: '302px' }} changeOnSelect={this.state.changeOnSelect} value={this.state.value} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".control-single-demo .change-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-single-demo .change-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n<p>展示受控单选以及是否选择即改变。</p>\n"
      }
    ]
  },
  {
    "name": "Cascader",
    "category": "Components",
    "title": "级联",
    "type": "基本",
    "importStatement": "import { Cascader } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n-   适用于从一组具有关联性的数据集合中进行选择的交互方式。\n-   由于子集目录隐藏，级联是一种节约屏幕空间的有效方法。\n-   级别数因业务需求而定，建议不超过5级。\n-   级联多用于表单场景，可以独立在页面中使用，也可以与其他元素组合使用，如级联选择。\n\n API\n\n### Cascader\n\n| 参数                   | 说明| 类型                      | 默认值                |\n| -------------------- || ----------------------- | ------------------ |\n| dataSource           | 数据源，结构可参考下方说明                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Array&lt;Object>        | \\[]                |\n| defaultValue         | （非受控）默认值                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | String/Array&lt;String> | null               |\n| value                | （受控）当前值| String/Array&lt;String> | -                  |\n| onChange             | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array, extra: Object) => void<br>**参数**:<br>_value_: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>_data_: {Object/Array} 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点<br>_extra_: {Object} 额外参数<br>_extra.selectedPath_: {Array} 单选时选中的数据的路径<br>_extra.checked_: {Boolean} 多选时当前的操作是选中还是取消选中<br>_extra.currentData_: {Object} 多选时当前操作的数据<br>_extra.checkedData_: {Array} 多选时所有被选中的数据<br>_extra.indeterminateData_: {Array} 多选时半选的数据 | Function                | -                  |\n| defaultExpandedValue | （非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Array&lt;String>        | -                  |\n| expandedValue        | （受控）当前展开值                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Array&lt;String>        | -                  |\n| expandTriggerType    | 展开触发的方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | Enum                    | 'click'            |\n| onExpand             | 展开时触发的回调函数<br><br>**签名**:<br>Function(expandedValue: Array) => void<br>**参数**:<br>_expandedValue_: {Array} 各列展开值的数组                                                                                                                                                                                                                                                                                                                                                                                                        | Function                | -                  |\n| useVirtual           | 是否开启虚拟滚动                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Boolean                 | false              |\n| multiple             | 是否多选| Boolean                 | false              |\n| canOnlySelectLeaf    | 单选时是否只能选中叶子节点                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Boolean                 | false              |\n| canOnlyCheckLeaf     | 多选时是否只能选中叶子节点                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | Boolean                 | false              |\n| checkStrictly        | 父子节点是否选中不关联                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | Boolean                 | false              |\n| listStyle            | 每列列表样式对象                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Object                  | -                  |\n| listClassName        | 每列列表类名| String                  | -                  |\n| itemRender           | 每列列表项渲染函数<br><br>**签名**:<br>Function(data: Object) => ReactNode<br>**参数**:<br>_data_: {Object} 数据<br>**返回值**:<br>{ReactNode} 列表项内容<br>                                                                                                                                                                                                                                                                                                                                                                                     | Function                | item => item.label |\n| loadData             | 异步加载数据函数<br><br>**签名**:<br>Function(data: Object, source: Object) => void<br>**参数**:<br>_data_: {Object} 当前点击异步加载的数据<br>_source_: {Object} 当前点击数据                                                                                                                                                                                                                                                                                                                                                                          | Function                | -                  |\n\n<!-- api-extra-start -->\n\n### dataSource数据结构\n\n```js\nconst dataSource = [{\n    value: '2974',\n    label: '西安',\n    children: [\n        { value: '2975', label: '西安市', disabled: true },\n        { value: '2976', label: '高陵县', checkboxDisabled: true },\n        { value: '2977', label: '蓝田县' },\n        { value: '2978', label: '户县' },\n        { value: '2979', label: '周至县' },\n        { value: '4208', label: '灞桥区' },\n        { value: '4209', label: '长安区' },\n        { value: '4210', label: '莲湖区' },\n        { value: '4211', label: '临潼区' },\n        { value: '4212', label: '未央区' },\n        { value: '4213', label: '新城区' },\n        { value: '4214', label: '阎良区' },\n        { value: '4215', label: '雁塔区' },\n        { value: '4388', label: '碑林区' },\n        { value: '610127', label: '其它区' }\n    ]\n}];\n```\n\n数组中 Item 的自定义属性也会被透传到 onChange 函数的 data 参数中。\n\n<!-- api-extra-end -->\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本使用",
        "order": "0",
        "jsx": "import { Cascader } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            label: '',\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => {\n                data[1].disabled = true;\n                this.setState({ data });\n            })\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            label: extra.selectedPath.map(d => d.label).join(' / ')\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"cascader-value\">Select: {this.state.label}</div>\n                <Cascader dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".cascader-value {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n<p>展示基本的单选用法。</p>\n"
      },
      {
        "title": "自定义样式",
        "order": "5",
        "jsx": "import { Cascader } from '@alifd/next';\n\nconst dataSource = [{\n    value: '2973',\n    label: '陕西',\n    children: [{\n        value: '2974',\n        label: '西安',\n        children: [\n            { value: '2975', label: '西安市' },\n            { value: '2976', label: '高陵县' }\n        ]\n    }, {\n        value: '2980',\n        label: '铜川',\n        children: [\n            { value: '2981', label: '铜川市' },\n            { value: '2982', label: '宜君县' }\n        ]\n    }]\n}, {\n    value: '3371',\n    label: '新疆',\n    children: [{\n        value: '3430',\n        label: '巴音郭楞蒙古自治州',\n        children: [\n            { value: '3431', label: '库尔勒市' },\n            { value: '3432', label: '和静县' }\n        ]\n    }]\n}];\n\nReactDOM.render(<Cascader defaultValue=\"3439\" defaultExpandedValue={['3371', '3430']} listStyle={{ width: '200px', height: '256px' }} dataSource={dataSource} />, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过<code>listStyle</code>，<code>listClassName</code>来定制组件宽高。</p>\n"
      },
      {
        "title": "异步加载数据",
        "order": "6",
        "jsx": "import { Cascader } from '@alifd/next';\n\nconst dataSource = [{\n    value: '2973',\n    label: '陕西'\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataSource\n        };\n\n        this.onLoadData = this.onLoadData.bind(this);\n    }\n\n    onLoadData(data) {\n        console.log(data);\n\n        return new Promise(resolve => {\n            setTimeout(() => {\n                this.setState({\n                    dataSource: [{\n                        value: '2973',\n                        label: '陕西',\n                        children: [{\n                            value: '2974',\n                            label: '西安',\n                            children: [\n                                { value: '2975', label: '西安市', isLeaf: true },\n                                { value: '2976', label: '高陵县', isLeaf: true }\n                            ]\n                        }, {\n                            value: '2980',\n                            label: '铜川',\n                            children: [\n                                { value: '2981', label: '铜川市', isLeaf: true },\n                                { value: '2982', label: '宜君县', isLeaf: true }\n                            ]\n                        }]\n                    }]\n                }, resolve);\n            }, 500);\n        });\n    }\n\n    render() {\n        return <Cascader canOnlySelectLeaf dataSource={this.state.dataSource} loadData={this.onLoadData} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".cascader-value {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n<p>展示动态获取数据的用法。</p>\n"
      },
      {
        "title": "展开触发行为",
        "order": "1",
        "jsx": "import { Radio, Cascader } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            triggerType: 'click',\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleTriggerTypeChange = this.handleTriggerTypeChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data }))\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    handleTriggerTypeChange(triggerType) {\n        this.setState({\n            triggerType\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"trigger-check\">\n                    Expand trigger type:\n                    <RadioGroup dataSource={['click', 'hover']} value={this.state.triggerType} onChange={this.handleTriggerTypeChange} />\n                </div>\n\n                <Cascader expandTriggerType={this.state.triggerType} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".trigger-check {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n\n.trigger-check .next-radio-group {\n    margin-left: 10px;\n}\n",
        "body": "\n<p>展示可通过<code>expandTriggerType</code>来设置不同的展开触发行为，支持<code>click</code>和<code>hover</code>，默认值为<code>click</code>。</p>\n"
      },
      {
        "title": "设置父子节点选中是否关联",
        "order": "4",
        "jsx": "import { Checkbox, Cascader } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: [],\n            data: [],\n            checkStrictly: false\n        };\n\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data, value: ['2975'] }))\n            .catch(e => console.log(e));\n    }\n\n    handleCheck() {\n        this.setState({\n            checkStrictly: !this.state.checkStrictly,\n            value: []\n        });\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"control-multiple-demo\">\n                <label className=\"strictly-check\">\n                    <Checkbox value={this.state.checkStrictly} onChange={this.handleCheck} />\n                    <span className=\"strictly-text\">Enable checkStrictly</span>\n                </label>\n                <Cascader multiple checkStrictly={this.state.checkStrictly} value={this.state.value} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".control-multiple-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-multiple-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n<p>展示受控多选以及是否开启严格受控父子节点选中不再关联的用法。</p>\n"
      },
      {
        "title": "多选",
        "order": "2",
        "jsx": "import { Cascader } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            label: '',\n            data: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => {\n                data[1].disabled = true;\n                data[2].checkboxDisabled = true;\n                this.setState({ data });\n            })\n            .catch(e => console.log(e));\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            label: data.map(d => d.label).join(', ')\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"cascader-value\">Select: {this.state.label}</div>\n                <Cascader multiple dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".cascader-value {\n    width: 500px;\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n<p>展示基本的多选用法。</p>\n"
      },
      {
        "title": "设置是否只能选择叶子项",
        "order": "3",
        "jsx": "import { Checkbox, Cascader } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null,\n            canOnlySelectLeaf: false,\n            data: []\n        };\n\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json')\n            .then(response => response.json())\n            .then(data => this.setState({ data, value: '2975' }))\n            .catch(e => console.log(e));\n    }\n\n    handleCheck() {\n        this.setState({\n            canOnlySelectLeaf: !this.state.canOnlySelectLeaf,\n            value: null\n        });\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"control-single-demo\">\n                <label className=\"leaf-check\">\n                    <Checkbox value={this.state.canOnlySelectLeaf} onChange={this.handleCheck} />\n                    <span className=\"leaf-text\">Enable canOnlySelectLeaf</span>\n                </label>\n                <Cascader canOnlySelectLeaf={this.state.canOnlySelectLeaf} value={this.state.value} dataSource={this.state.data} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".control-single-demo .leaf-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-single-demo .leaf-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n<p>展示受控单选以及是否只能选择叶子项的用法。</p>\n"
      },
      {
        "title": "异步加载数据",
        "order": "7",
        "jsx": "import { Cascader } from '@alifd/next';\n\nconst dataSource = [{\n    value: '2974',\n    label: '西安'\n}, {\n    value: '2980',\n    label: '铜川'\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dataSource\n        };\n\n        this.onLoadData = this.onLoadData.bind(this);\n    }\n\n    onLoadData(data, source) {\n        console.log(data, source);\n\n        return new Promise(resolve => {\n            source.children = source.value === '2974' ? [\n                { value: '2975', label: '西安市', isLeaf: true },\n                { value: '2976', label: '高陵县', isLeaf: true }\n            ] : [\n                { value: '2981', label: '铜川市', isLeaf: true },\n                { value: '2982', label: '宜君县', isLeaf: true }\n            ];\n            setTimeout(() => {\n                this.setState({\n                    dataSource: this.state.dataSource\n                }, resolve);\n            }, 500);\n        });\n    }\n\n    render() {\n        return <Cascader canOnlySelectLeaf dataSource={this.state.dataSource} loadData={this.onLoadData} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".cascader-value {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n<p>展示动态获取数据的用法。</p>\n"
      }
    ]
  },
  {
    "name": "Checkbox",
    "category": "Components",
    "title": "复选按钮",
    "type": "表单",
    "importStatement": "import { Checkbox } from '@alifd/next';",
    "body": "\n## 开发指南\n\n多选框\n\n### 何时使用\n\n复选框允许用户从一个数据集中选择多个选项。如果在一个列表中有多个选项，你可以通过使用复选框而不是开/关切换来节省空间。如果你有一个单选项，不要用复选框，使用开/关切换。\n\n API\n\n### Checkbox\n\n| 参数                   | 说明                                                                                                                                         | 类型        | 默认值       |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ | --------- | --------- |\n| id                   | checkbox id, 挂载在input上                                                                                                                     | String    | -         |\n| checked              | 选中状态                                                                                                                                       | Boolean   | -         |\n| defaultChecked       | 默认选中状态                                                                                                                                     | Boolean   | false     |\n| disabled             | 禁用                                                                                                                                         | Boolean   | -         |\n| label                | 通过属性配置label，                                                                                                                               | ReactNode | -         |\n| indeterminate        | Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性                                                                                         | Boolean   | -         |\n| defaultIndeterminate | Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性                                                                                        | Boolean   | false     |\n| onChange             | 状态变化时触发的事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>_checked_: {Boolean} 是否选中<br>_e_: {Event} Dom 事件对象 | Function  | func.noop |\n| onMouseEnter         | 鼠标进入enter事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} Dom 事件对象                                               | Function  | func.noop |\n| onMouseLeave         | 鼠标离开Leave事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} Dom 事件对象                                               | Function  | func.noop |\n\n### Checkbox.Group\n\n| 参数            | 说明                                                                                                                                                                | 类型                     | 默认值       |\n| ------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------- | --------- |\n| disabled      | 整体禁用                                                                                                                                                              | Boolean                | -         |\n| dataSource    | 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]` | Array&lt;any>          | \\[]       |\n| value         | 被选中的值列表                                                                                                                                                           | Array/String/Number    | -         |\n| defaultValue  | 默认被选中的值列表                                                                                                                                                         | Array/String/Number    | -         |\n| children      | 通过子元素方式设置内部 checkbox                                                                                                                                              | Array&lt;ReactElement> | -         |\n| onChange      | 选中值改变时的事件<br><br>**签名**:<br>Function(value: Array, e: Event) => void<br>**参数**:<br>_value_: {Array} 选中项列表<br>_e_: {Event} Dom 事件对象                                | Function               | () => { } |\n| itemDirection | 子项目的排列方式<br>- hoz: 水平排列 (default)<br>- ver: 垂直排列<br><br>**可选值**:<br>'hoz', 'ver'                                                                                  | Enum                   | 'hoz'     |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Checkbox } from '@alifd/next';\n\nReactDOM.render((\n    <div>\n        <h6>Different status without label:</h6>\n        Unchecked：<Checkbox />&nbsp;\n        DefaultChecked：<Checkbox defaultChecked />&nbsp;\n        Indeterminate：<Checkbox defaultIndeterminate />&nbsp;\n        Disabled：<Checkbox disabled />&nbsp;\n        Checked-Disabled：<Checkbox disabled checked />&nbsp;\n        Checked：<Checkbox checked />&nbsp;\n        <h6>Using with label</h6>\n        <Checkbox>Banana</Checkbox>&nbsp;\n        <Checkbox id=\"apple\" /><label htmlFor=\"apple\" className=\"next-checkbox-label\">Apple</label>&nbsp;\n        <label>\n            <Checkbox id=\"pear\" />\n            <span className=\"next-checkbox-label\">Pear</span>\n        </label>&nbsp;\n        <Checkbox label=\"Banana\" />\n    </div>\n), mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>Checkbox</code> 渲染的基本组件。</p>\n"
      },
      {
        "title": "受限组件",
        "order": "2",
        "jsx": "import { Checkbox } from '@alifd/next';\n\nconst { Group: CheckboxGroup } = Checkbox;\nconst list = [\n    {\n        value: 'apple',\n        label: 'Apple'\n    }, {\n        value: 'pear',\n        label: 'Pear'\n    }, {\n        value: 'orange',\n        label: 'Orange'\n    }\n];\n\nclass ControlApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ['orange']\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(selectedItems) {\n        console.log('onChange callback', selectedItems);\n        this.setState({\n            value: selectedItems\n        });\n    }\n\n    render() {\n        return (\n            <div style={{padding: '20px'}}>\n                <CheckboxGroup value={this.state.value} dataSource={list} onChange={this.onChange} />\n            </div>\n        );\n    }\n\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>CheckboxGroup</code> 渲染的组，通过设置 <code>value</code> 属性可以让组件变成<a href=\"https://facebook.github.io/react/docs/forms.html#controlled-components\">受限组件</a>。</p>\n"
      },
      {
        "title": "分组",
        "order": "1",
        "jsx": "import { Checkbox } from '@alifd/next';\n\nconst CheckboxGroup = () => (\n    <div>\n        <h4>Horizonal direction</h4>\n        <p>\n            <Checkbox.Group itemDirection=\"hoz\">\n                <Checkbox value=\"react\">React</Checkbox>\n                <Checkbox value=\"vue\">Vue</Checkbox>\n                <Checkbox value=\"angular\">Angular</Checkbox>\n            </Checkbox.Group>\n        </p>\n        <h4>Vertical direction</h4>\n        <p>\n            <Checkbox.Group itemDirection=\"ver\">\n                <Checkbox value=\"react\">React</Checkbox>\n                <Checkbox value=\"vue\">Vue</Checkbox>\n                <Checkbox value=\"angular\">Angular</Checkbox>\n            </Checkbox.Group>\n        </p>\n    </div>\n);\n\nReactDOM.render(<CheckboxGroup />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>&lt;Checkbox.Group&gt;</code> 渲染 <code>&lt;Checkbox&gt;</code> 分组。</p>\n"
      },
      {
        "title": "中间状态组件",
        "order": "1",
        "jsx": "import { Checkbox, Button } from '@alifd/next';\n\nclass IndeterminateApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checked: false,\n            indeterminate: true,\n            disabled: false\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <Checkbox\n                    checked={this.state.checked}\n                    indeterminate={this.state.indeterminate}\n                    disabled={this.state.disabled}\n                    onChange={\n                        (checked) => {\n                            this.setState({checked: checked, indeterminate: false});\n                        }\n                    }\n                />\n                <br />\n                <br />\n                <Button\n                    type=\"primary\"\n                    onClick={\n                        () => {\n                            this.setState({checked: true, indeterminate: false});\n                        }\n                    }>checked = true</Button>\n                <br />\n                <br />\n                <Button\n                    type=\"primary\"\n                    onClick={\n                        () => {\n                            this.setState({checked: false});\n                        }\n                    }\n                >checked = false</Button>\n                <br />\n                <br />\n                <Button\n                    type=\"primary\"\n                    onClick={\n                        () => {\n                            this.setState({checked: false, indeterminate: true});\n                        }\n                    }\n                >indeterminate = true</Button>\n                <br />\n                <br />\n                <Button\n                    type=\"primary\"\n                    onClick={\n                        () => {\n                            this.setState({indeterminate: false});\n                        }\n                    }\n                >indeterminate = false</Button>\n                <br />\n                <br />\n                <Button\n                    type=\"primary\"\n                    onClick={\n                        () => {\n                            this.setState({disabled: !this.state.disabled});\n                        }\n                    }\n                >toggle disabled</Button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<IndeterminateApp />, mountNode);\n",
        "css": "",
        "body": "\n<p>通过使用 <code>indeterminate</code> 来渲染<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\">中间状态</a>的组件。</p>\n"
      },
      {
        "title": "Checkbox嵌套使用",
        "order": "4",
        "jsx": "import { Checkbox } from '@alifd/next';\n\nconst { Group: CheckboxGroup } = Checkbox;\n\nclass NestApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ['orange']\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(selectedItems) {\n        this.setState({\n            value: selectedItems\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <CheckboxGroup value={this.state.value} onChange={this.onChange}>\n                    <Checkbox id=\"apple\" value=\"apple\" disabled>Apple</Checkbox>\n                    <Checkbox id=\"watermelon\" value=\"watermelon\">Watermelon</Checkbox>\n                    <Checkbox id=\"orange\" value=\"orange\">Orange</Checkbox>\n                </CheckboxGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<NestApp />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>CheckboxGroup</code>，通过直接嵌套 <code>Checkbox</code> 组件来渲染的组。</p>\n"
      },
      {
        "title": "非受限组件",
        "order": "3",
        "jsx": "import { Checkbox } from '@alifd/next';\n\nconst { Group: CheckboxGroup } = Checkbox;\nconst list = [\n    {\n        value: 'apple',\n        label: 'Apple',\n        disabled: false\n    }, {\n        value: 'pear',\n        label: 'Pear'\n    }, {\n        value: 'orange',\n        label: 'Orange',\n        disabled: true\n    }\n];\n\nclass UnControlApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(selectedItems) {\n        console.log('onChange callback', selectedItems);\n    }\n\n    render() {\n        return (\n            <div style={{padding: '20px'}}>\n                <CheckboxGroup defaultValue={['apple']} dataSource={list} onChange={this.onChange} />\n            </div>\n        );\n    }\n\n}\n\nReactDOM.render(<UnControlApp />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>CheckboxGroup</code> 渲染的组，通过设置 <code>defaultValue</code> 属性可以让组件变成<a href=\"https://facebook.github.io/react/docs/forms.html#uncontrolled-components\">非受限组件</a>。</p>\n"
      }
    ]
  },
  {
    "name": "Collapse",
    "category": "Components",
    "title": "折叠面板",
    "type": "布局",
    "importStatement": "import { Collapse } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n可以折叠/展开的内容区域。\n\n API\n\n### Collapse\n\n| 参数                  | 说明                                                 | 类型       | 默认值       |\n| ------------------- | -------------------------------------------------- | -------- | --------- |\n| dataSource          | 使用数据模型构建                                           | Array    | -         |\n| defaultExpandedKeys | 默认展开keys                                           | Array    | -         |\n| expandedKeys        | 受控展开keys                                           | Array    | -         |\n| onExpand            | 展开状态发升变化时候的回调<br><br>**签名**:<br>Function() => void | Function | func.noop |\n| disabled            | 所有禁用                                               | Boolean  | -         |\n| accordion           | 手风琴模式，一次只能打开一个                                     | Boolean  | false     |\n\n### Collapse.Panel\n\n| 参数       | 说明       | 类型        | 默认值 |\n| -------- | -------- | --------- | --- |\n| disabled | 是否禁止用户操作 | Boolean   | -   |\n| title    | 标题       | ReactNode | -   |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "手风琴",
        "order": "2",
        "jsx": "import { Collapse } from '@alifd/next';\n\nconst Panel = Collapse.Panel;\n\nReactDOM.render(<Collapse accordion>\n    <Panel\n        title=\"There is a long title, you can set the multiTitle to multi line display, the associated configuration properties and a single height is not the same, the specific configuration platform configuration can be configured.\">\n        <ul>\n            <li>Promotions are marketing campaigns ran by Marketplace</li>\n            <li>Participate to sale your products during that promotion and make a profit</li>\n        </ul>\n    </Panel>\n    <Panel title=\"What are Promotion Products?\">\n        <ul>\n            <li>Promotion Products is a service that helps you to promote products you list on Marketplace during a\n                certain time range\n            </li>\n            <li>You can choose which products should be available for the promotion</li>\n            <li>Not all Products of you will be available, because Promotions will only attract certain Product areas\n            </li>\n        </ul>\n    </Panel>\n    <Panel title=\"Why can i not submit a higher price?\">\n        <ul>\n            <li>The Promotion requires a certain price to make sure that our customers are attracted</li>\n        </ul>\n    </Panel>\n    <Panel title=\"What is Promo Stock?\">\n        Promo Stock is the criteria needed to be followed to be able to join Promotion. With setting particular Promo\n        Stock value you commit to have this amount of stock available while Promotion is active.\n    </Panel>\n</Collapse>, mountNode);\n",
        "css": "",
        "body": "\n<p>手风琴单例模式，每次只打开一个Panel。</p>\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Collapse } from '@alifd/next';\n\nconst Panel = Collapse.Panel;\n\nReactDOM.render(\n    <Collapse>\n        <Panel title=\"simple tile\">\n            <ul>\n                <li>Promotions are marketing campaigns ran by Marketplace</li>\n                <li>Participate to sale your products during that promotion and make a profit</li>\n            </ul>\n        </Panel>\n        <Panel title=\"What are Promotion Products?\">\n            <ul>\n                <li>Promotion Products is a service that helps you to promote products you list on Marketplace during a certain time range</li>\n                <li>You can choose which products should be available for the promotion</li>\n                <li>Not all Products of you will be available, because Promotions will only attract certain Product areas</li>\n            </ul>\n        </Panel>\n        <Panel title=\"Why can i not submit a higher price?\">\n            <ul>\n                <li>The Promotion requires a certain price to make sure that our customers are attracted</li>\n            </ul>\n        </Panel>\n        <Panel title=\"What is Promo Stock?\">\n            Promo Stock is the criteria needed to be followed to be able to join Promotion. With setting particular Promo Stock value you commit to have this amount of stock available while Promotion is active.\n        </Panel>\n    </Collapse>,\n    mountNode);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "数据",
        "order": "1",
        "jsx": "import { Collapse } from '@alifd/next';\n\nconst list = [\n    {\n        title: 'Well, hello there',\n        content: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.',\n        disabled: true,\n    },\n    {\n        title: 'Gigantomaniac Monster Text, very long, much width, wow',\n        content: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.',\n    },\n    {\n        title: 'Generic Title',\n        content: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.'\n    },\n    {\n        title: 'Login Infomation',\n        content: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.'\n    }\n];\n\nReactDOM.render(<Collapse dataSource={list}/>, mountNode);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "禁用",
        "order": "3",
        "jsx": "import { Collapse } from '@alifd/next';\n\nconst Panel = Collapse.Panel;\n\nReactDOM.render(\n    <div>\n        <Collapse disabled>\n            <Panel title=\"disable collapse\">\n                <ul>\n                    <li>Promotions are marketing campaigns ran by Marketplace</li>\n                    <li>Participate to sale your products during that promotion and make a profit</li>\n                </ul>\n            </Panel>\n            <Panel title=\"disable collapse\">\n                <ul>\n                    <li>Promotion Products is a service that helps you to promote products you list on Marketplace during a certain time range</li>\n                    <li>You can choose which products should be available for the promotion</li>\n                    <li>Not all Products of you will be available, because Promotions will only attract certain Product areas</li>\n                </ul>\n            </Panel>\n            <Panel title=\"disable collapse\">\n                <ul>\n                    <li>The Promotion requires a certain price to make sure that our customers are attracted</li>\n                </ul>\n            </Panel>\n            <Panel title=\"disable collapse\">\n                Promo Stock is the criteria needed to be followed to be able to join Promotion. With setting particular Promo Stock value you commit to have this amount of stock available while Promotion is active.\n            </Panel>\n        </Collapse>\n        <br />\n        <Collapse>\n            <Panel title=\"simple title(disabled)\" disabled>\n                <ul>\n                    <li>Promotions are marketing campaigns ran by Marketplace</li>\n                    <li>Participate to sale your products during that promotion and make a profit</li>\n                </ul>\n            </Panel>\n            <Panel title=\"What are Promotion Products?(disabled)\" disabled>\n                <ul>\n                    <li>Promotion Products is a service that helps you to promote products you list on Marketplace during a certain time range</li>\n                    <li>You can choose which products should be available for the promotion</li>\n                    <li>Not all Products of you will be available, because Promotions will only attract certain Product areas</li>\n                </ul>\n            </Panel>\n            <Panel title=\"Why can i not submit a higher price?\">\n                <ul>\n                    <li>The Promotion requires a certain price to make sure that our customers are attracted</li>\n                </ul>\n            </Panel>\n            <Panel title=\"What is Promo Stock?\">\n                Promo Stock is the criteria needed to be followed to be able to join Promotion. With setting particular Promo Stock value you commit to have this amount of stock available while Promotion is active.\n            </Panel>\n        </Collapse>\n    </div>,\n    mountNode);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "事件",
        "jsx": "import { Collapse } from '@alifd/next';\n\nconst Panel = Collapse.Panel;\n\nclass Demo extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            expandedKeys: []\n        };\n    }\n\n    onExpand(expandedKeys) {\n        this.setState({\n            expandedKeys\n        });\n    }\n\n    onClick(key) {\n        console.log('clicked', key);\n    }\n    render() {\n        return (\n            <Collapse onExpand={this.onExpand.bind(this)} expandedKeys={this.state.expandedKeys} >\n                <Panel title=\"simple tile\" onClick={this.onClick}>\n                    <ul>\n                        <li>Promotions are marketing campaigns ran by Marketplace</li>\n                        <li>Participate to sale your products during that promotion and make a profit</li>\n                    </ul>\n                </Panel>\n                <Panel title=\"What are Promotion Products?\">\n                    <ul>\n                        <li>Promotion Products is a service that helps you to promote products you list on Marketplace during a certain time range</li>\n                        <li>You can choose which products should be available for the promotion</li>\n                        <li>Not all Products of you will be available, because Promotions will only attract certain Product areas</li>\n                    </ul>\n                </Panel>\n                <Panel title=\"Why can i not submit a higher price?\">\n                    <ul>\n                        <li>The Promotion requires a certain price to make sure that our customers are attracted</li>\n                    </ul>\n                </Panel>\n                <Panel title=\"What is Promo Stock?\">\n                    Promo Stock is the criteria needed to be followed to be able to join Promotion. With setting particular Promo Stock value you commit to have this amount of stock available while Promotion is active.\n                </Panel>\n            </Collapse>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n"
      }
    ]
  },
  {
    "name": "ConfigProvider",
    "category": "Components",
    "title": "全局配置 Next 组件",
    "type": "基本",
    "importStatement": "import { ConfigProvider } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n-   修改组件类名前缀，Next 组件类名的默认前缀都是 'next-'，如 'next-btn'，你可能在以下两种情况下想改变这个默认前缀：\n    -   自定义组件品牌，如 'my-btn'，'my-select'\n    -   一个页面中同时引入两个主题，防止相同类名样式互相覆盖\n-   实现多语言文案切换\n-   开启 Pure Render 模式，提高性能，注意同时可能会带来副作用\n\n### 基本使用\n\n#### 指定多语言文案\n\n通过 `<ConfigProvider locale={localeObj}>` 传入语言包，以支持多语言。目前 Fusion 内置的 locale 库支持中英繁日四种语言，覆盖各组件的简单词汇，例如：确定、取消、展开、收起、下一页等， 简单词汇映射表可参考 <https://unpkg.com/@alifd/next/lib/locale/>\n<br />\n(ConfigProvider 提供简单组件简单词汇国际化能力，由于日期时间的国际化较为特殊，例如中国的日历是从周一到周日，美国的日历是从周日到周六等，时间相关的组件如DatePicker等需要国际化，请查看相应组件文档。)\n<br />\n\n可通过两种方式设置多语言文案，两种方式接收的对象格式略有不同:\n\n-   1.设置组件自身 locale 属性\n\n```jsx\n{\n    key1: value1,\n    key2: value2\n}\n```\n\n-   2.ConfigProvider 的 locale 属性 (推荐)\n\n```jsx\n{\n    component1: {\n        key1: value1,\n        key2: value2\n    },\n    component2: {\n        key1: value1,\n        key2: value2\n    }\n}\n```\n\n优先级顺序为: 组件自身 locale > 最近 ConfigProvider 的 locale > 更远父级 ConfigProvider 的 locale\n\n```js\nimport { ConfigProvider, DatePicker } from '@alifd/next';\n\nconst localeDatePicker = {\n  placeholder: 'localeDatePicker placeholder'\n};\n\nconst localeGlobal = {\n  DatePicker: {\n    placeholder: 'localeGlobal placeholder'\n  }\n};\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <ConfigProvider locale={localeGlobal}>\n                    <DatePicker /> should be 'localeGlobal placeholder'\n                </ConfigProvider>\n                <br />\n                <br />\n                <ConfigProvider locale={localeGlobal}>\n                    <DatePicker locale={localeDatePicker} /> should be 'localeDatePicker placeholder'\n                </ConfigProvider>\n            </div>\n        );\n    }\n}\n```\n\n根据引入组件库方式的不同(CDN直接引用、作为依赖引用)，使用语言包的方式略有差异，具体见如下代码：\n<br />\n\n```js\nimport { ConfigProvider, DatePicker } from '@alifd/next';\nimport enUS from '@alifd/next/lib/locale/en-us';\n// import zhCN from '@alifd/next/lib/locale/zh-cn';\n// import zhTW from '@alifd/next/lib/locale/zh-tw';\n// import jaJP from '@alifd/next/lib/locale/ja-jp';\n\n// 如果应用中直接引入的是 cdn 上的 next-with-locales.js 文件\n// 需要按照下面的方式引入国际化文案文件\n// const { ConfigProvider, DatePicker, locales } = window.Next;\n// const enUS = locales['en-us'];\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider locale={enUS}>\n                <DatePicker />\n            </ConfigProvider>\n        );\n    }\n}\n```\n\n如果内置的 locale 库不满足你的需求(比如想支持法语、德语、西班牙语)，你也可以参考 <https://unpkg.com/@alifd/next/lib/locale/> 来自定义语言包，按照如下格式传入给 locale 即可：\n\n```js\n{\n    DatePicker: {\n        datePlaceholder: 'Select date',\n        monthPlaceholder: 'Select month',\n        yearPlaceholder: 'Select year',\n        rangeStartPlaceholder: 'Start date',\n        rangeEndPlaceholder: 'End date',\n        ok: 'OK',\n        clear: 'Clear'\n    },\n    Dialog: {\n        // ...\n    },\n    // ...\n}\n```\n\n#### 修改组件类名前缀\n\n1.  为你的应用包裹 ConfigProvider，并设置相应的 prefix\n\n    entry.jsx\n\n    ```js\n    class App extends React.Component {\n        render() {\n            return (\n                <ConfigProvider prefix=\"my-\">\n                    <div>\n                        <Input />\n                        <Button>Submit</Button>\n                    </div>\n                </ConfigProvider>\n            );\n        }\n    }\n    ```\n\n2.  scss 入口文件中在引入主题 scss 文件前，设置相应的 `$css-prefix`\n\n    entry.scss\n\n    ```scss\n    $css-prefix: \"my-\";\n    @import \"~@alifd/theme-xxx/index.scss\";\n    ```\n\n#### 开启 Pure Render\n\n```js\nimport { ConfigProvider, DatePicker } from '@alifd/next';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider pure>\n                <DatePicker />\n            </ConfigProvider>\n        );\n    }\n}\n```\n\n#### 如何让组件支持 ConfigProvider ？\n\n```js\nimport { ConfigProvider } from '@alifd/next';\nimport locale from './locale';\n\nconst { config } = ConfigProvider;\n\nclass Component extends React.Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        locale: PropTypes.object,\n        pure: PropTypes.bool\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        locale: locale,\n        pure: false\n    };\n\n    render() {\n        const { prefix, locale, pure } = this.props;\n        // ...\n    }\n}\n\nexport default config(Component);\n```\n\n API\n\n### ConfigProvider\n\n| 参数       | 说明                                  | 类型           | 默认值  |\n| -------- | ----------------------------------- | ------------ | ---- |\n| pure     | 是否开启 Pure Render 模式，会提高性能，但是也会带来副作用 | Boolean      | -    |\n| warning  | 是否在开发模式下显示组件属性被废弃的 warning 提示       | Boolean      | true |\n| rtl      | 是否开启 rtl 模式                         | Boolean      | -    |\n| children | 组件树                                 | ReactElement | -    |\n\n<!-- api-extra-start -->\n\n### ConfigProvider.config(Component)\n\n传入组件，生成受 ConfigProvider 控制的 HOC 组件，如果组件没有声明 shouldComponentUpdate 方法，会添加如下 shouldComponentUpdate 方法以支持 ConfigProvider 的 pure 属性\n\n```js\nComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.pure) {\n        return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n    }\n\n    return true;\n};\n```\n\n### ConfigProvider.getContextProps(props, displayName)\n\n传入组件的 props 和 displayName，得到和 childContext 计算过的包含有 preifx/locale/pure 的对象，一般用于通过静态方法生成脱离组件树的组件。\n\n### ConfigProvider.getContext()\n\n通过该方法可以获取到 ConfigProvider 的上下文，格式如下。若有多层级 ConfigProvider 嵌套，会返回merge后的结果，关系近的优先。\n\n```js\n{\n    prefix: nextPrefix,\n    locale: nextLocale,\n    pure: nextPure,\n    warning: nextWarning\n}\n```\n\n### ConfigProvider.initLocales(locales)\n\n配置所有语言包, 可配合 `ConfigProvider.setLanguage` 方法，确定组件使用的语言包。\n\n```js\nConfigProvider.initLocales({\n    'zh-cn': {},\n    'en-us': {}\n});\n```\n\n### ConfigProvider.setLanguage(language)\n\n设置语言，参数 `language` 需要能在 `ConfigProvider.initLocales` 方法传入的参数的 key 中找到， 默认为 `zh-cn`\n\n```js\nConfigProvider.setLanguage('zh-cn');\n```\n\n### ConfigProvider.setLocale(locale)\n\n直接设置语言包\n\n```js\n// 相当于 同时用ConfigProvider.initLocales 和 ConfigProvider.setLanguage\nConfigProvider.setLocale({\n    DatePicker: {},\n    Dialog: {}\n});\n```\n\n### ConfigProvider.setDirection(dir)\n\n设置组件展示方向，当传入 `rtl`时，会在组件的根DOM节点加上 `dir=\"rtl\"`，同时组件展示rtl视觉。可用于阿拉伯等阅读顺序从右到左的国家。\n\n```js\nConfigProvider.setDirection('rtl');\n```\n\n### ConfigProvider.getLocale()\n\n获取当前的语言包\n\n### ConfigProvider.getLanguage()\n\n获取当前设定的语言\n\n### ConfigProvider.getDirection()\n\n获取当前设定的方向\n\n<!-- api-extra-end -->\n\n## 使用注意\n\n### 减小应用中 webpack 打包 moment 体积\n\nNext 1.x 中将 moment 作为自己的 peerDependencies 而非 dependencies，所以用户需要自己在应用中引入 moment 的 cdn 文件 moment-with-locales.js 或者本地安装 moment 打包进自己的应用。对于后者，由于 moment 在引入 locale 文件时存在这样的代码：`require('./locale/' + name)`，如果用 webpack 构建，会打包进所有的 [locale 文件](https://github.com/moment/moment/tree/develop/locale)，增加构建后文件的体积，目前社区比较主流的解决方案有以下两种：\n\n```js\nconst webpack = require('webpack');\n\nmodule.exports = {\n    // ...\n    plugins: [\n    // 打包指定需要的语言文件\n        new webpack.ContextReplacementPlugin(/moment[\\/\\\\]locale$/, /zh-cn|ja/)\n    // 只打包有过引用的语言文件，应用中需要添加如：`import 'moment/locale/zh-cn';`\n    // new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)\n    ]\n};\n```\n\n### 为自定义组件添加 displayName\n\nConfigProvider 获取组件对应的多语言文案，是通过组件的 displayName 或者 name 获取的，但是压缩混淆的过程中有可能会修改函数的 name，因此如果想支持在 ConfigProvider 下实现切换多语言切换，请为组件如下手动添加 displayName:\n\n```js\nclass CustomComponent extends React.Component {\n\tstatic displayName = 'CustomComponent';\n\t// ...\n}\n```\n\n或者使用 `babel-plugin-transform-react-es6-displayname` 自动在编译期间添加 displayname。\n\n### 获取 HOC 组件内部组件的引用\n\n由于 HOC 本身的限制，我们不能直接像下面代码那样获取内部组件的引用，从而调用它的一些内部方法：\n\n```js\nclass App extends React.Component {\n    componentDidMount() {\n        // 报错\n        this.refs.hoc.someMethod();\n    }\n\n    render() {\n        return <HOC ref=\"hoc\" />;\n    }\n}\n```\n\n为了解决这个问题，我们为调用 config 方法生成的 HOC 组件添加了 getInstance 方法，你可以如下调用：\n\n```js\nclass App extends React.Component {\n    componentDidMount() {\n        this.refs.hoc.getInstance().someMethod();\n    }\n\n    render() {\n        return <HOC ref=\"hoc\" />;\n    }\n}\n```\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { ConfigProvider } from '@alifd/next';\nimport PropTypes from 'prop-types';\n\nconst { config } = ConfigProvider;\n\nclass Output extends React.Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        locale: PropTypes.object,\n        pure: PropTypes.bool\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        locale: {\n            hello: '你好'\n        },\n        pure: false\n    };\n\n    render() {\n        const { prefix, locale, pure } = this.props;\n\n        return (\n            <ul>\n                <li>prefix: {prefix}</li>\n                <li>locale: {JSON.stringify(locale)}</li>\n                <li>pure: {pure.toString()}</li>\n            </ul>\n        );\n    }\n}\n\nconst NewOutput = config(Output);\n\nclass Demo extends React.Component {\n    render() {\n        return (\n            <ConfigProvider prefix=\"custom-\" locale={{ Output: { hello: 'hello' } }} pure>\n                <NewOutput />\n            </ConfigProvider>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的用法，展示 ConfigProvider 是如何工作的。</p>\n"
      },
      {
        "title": "支持国际化的组件",
        "order": "1",
        "jsx": "import { ConfigProvider, Button, Radio, Calendar, Card, DatePicker, Dialog, Pagination, TimePicker, Timeline, Transfer, Select, Upload, Table } from '@alifd/next';\n\nimport enUS from '@alifd/next/lib/locale/en-us';\nimport zhCN from '@alifd/next/lib/locale/zh-cn';\n\n// If the application directly imports the next-with-locales.js file from cdn\n// it need to import locale file in the following way\n// import { locales } from '@alifd/next';\n// const enUS = locales['en-us'];\n// const zhCN = locales['zh-cn'];\n\nconst RangePicker = DatePicker.RangePicker;\n\nconst transferDataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content ${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lang: 'en-us'\n        };\n\n        this.changeLang = this.changeLang.bind(this);\n        this.showDialog = this.showDialog.bind(this);\n    }\n\n    changeLang(lang) {\n        this.setState({\n            lang\n        });\n    }\n\n    showDialog() {\n        Dialog.confirm({\n            title: 'Confirm',\n            content: 'Are you sure you want to delete all alert e-mails waiting in queue?'\n        });\n    }\n\n    render() {\n        const locale = this.state.lang === 'en-us' ? enUS : zhCN;\n\n        return (\n            <div>\n                <div className=\"change-locale\">\n                    <span style={{ marginRight: 16 }}>Change locale of components: </span>\n                    <Radio.Group shape=\"button\" size=\"large\" defaultValue=\"en-us\" onChange={this.changeLang}>\n                        <Radio key=\"en\" value=\"en-us\">English</Radio>\n                        <Radio key=\"cn\" value=\"zh-cn\">中文</Radio>\n                    </Radio.Group>\n                </div>\n                <ConfigProvider locale={locale}>\n                    <div className=\"locale-components\">\n                        <Button type=\"primary\" onClick={this.showDialog}>Show Dialog</Button>\n                        <Select style={{ width: '150px' }} dataSource={['hello', 'bye']} />\n                        <DatePicker />\n                        <TimePicker />\n                        <RangePicker />\n                        <Calendar style={{ width: '350px', padding: '12px', border: '1px solid #C4C6CF', borderRadius: '3px' }} shape=\"card\" />\n                        <Pagination defaultCurrent={2} />\n                        <Transfer dataSource={transferDataSource} defaultValue={['3']} defaultLeftChecked={['1']} titles={['Source', 'Target']} />\n                        <Table style={{ width: '500px' }} dataSource={[]}>\n                            <Table.Column title=\"Name\" dataIndex=\"name\" filters={[{ label: 'Filter 1', value: '1' }, { label: 'Filter 2', value: '2' }]} />\n                            <Table.Column title=\"Age\" dataIndex=\"age\" />\n                        </Table>\n                        <Card style={{ width: '300px' }} title=\"Title\">\n                            <div style={{ height: '250px', background: '#F7F8FA' }}></div>\n                        </Card>\n                        <Timeline fold={[{foldArea: [1, 2], foldShow: true}]}>\n                            <Timeline.Item title=\"Signed\" content=\"Signed, sign Alibaba is a small post office, thanks to the use of STO, look forward to once again at your service\" time={'2016-06-10 10:30:00'} state=\"process\"/>\n                            <Timeline.Item title=\"Ship\" content=\"Express has arrived in Hangzhou, Zhejiang Binjiang company\" time={'2016-06-10 09:30:00'} />\n                            <Timeline.Item title=\"Ship\" content=\"Zhejiang Hangzhou Riverside company sent a member for you to send pieces\" time={'2016-06-10 09:03:00'} />\n                            <Timeline.Item title=\"Ship\" content=\"Zhejiang Hangzhou Transshipment Center has been issued\" time={'2016-06-10 06:10:00'} />\n                        </Timeline>\n                        <Upload.Dragger style={{ width: '500px' }}\n                            listType=\"image\"\n                            action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n                            accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\" />\n                    </div>\n                </ConfigProvider>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".change-locale {\n    border-bottom: 1px solid #d9d9d9;\n    padding-bottom: 16px;\n}\n\n.locale-components > * {\n    margin: 16px 0;\n    display: block;\n}\n",
        "body": "\n<p>展示目前 Next 组件中支持国际化的组件。</p>\n"
      },
      {
        "title": "使用 Consumer 组件读取上下文中的数据",
        "order": "4",
        "jsx": "import { ConfigProvider } from '@alifd/next';\nimport PropTypes from 'prop-types';\n\nconst localeSettings = {\n    momentLocale: 'fr-FR',\n    CustomizedComponent: {\n        helloWorld: 'hello, world',\n    },\n};\n\nconst App = ({ children }) => (\n    <ConfigProvider\n        prefix=\"customized-\"\n        locale={localeSettings}\n        pure\n        warning={false}\n    >\n        {children}\n    </ConfigProvider>\n);\n\nApp.propTypes = {\n    children: PropTypes.node,\n};\n\nconst Child = () => (\n    <ConfigProvider.Consumer>\n        {\n            context => (\n                <div className=\"context-data\">\n                    <h3>Context's state</h3>\n                    <pre>{JSON.stringify(context, false, 2)}</pre>\n                </div>\n            )\n        }\n    </ConfigProvider.Consumer>\n);\n\nconst Demo = () => (\n    <App>\n        <Child />\n    </App>\n);\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".context-data {\n    padding: 0 32px 32px;\n    border: 3px dashed #aaa;\n    border-radius: 9px;\n}\n",
        "body": "\n<p>使用 <code>&lt;Consumer&gt;</code> 可以方便地读取 <code>&lt;ConfigProvider&gt;</code> 中上下文的数据</p>\n"
      },
      {
        "title": "国际化",
        "order": "3",
        "jsx": "import { ConfigProvider, Button, Select } from '@alifd/next';\nimport PropTypes from 'prop-types';\n\nconst { config, getContextProps } = ConfigProvider;\nconst { Option } = Select;\n\nconst locales = {\n    'zh-cn': {\n        ClickMe: {\n            clickMe: '点我！'\n        },\n        Toast: {\n            close: '关闭'\n        }\n    },\n    'en-us': {\n        ClickMe: {\n            clickMe: 'click me!'\n        },\n        Toast: {\n            close: 'close'\n        }\n    }\n};\n\nclass ClickMe extends React.Component {\n    static propTypes = {\n        locale: PropTypes.object,\n        onClick: PropTypes.func\n    };\n\n    static defaultProps = {\n        locale: locales['zh-cn'].ClickMe,\n        onClick: () => {}\n    };\n\n    render() {\n        const { locale, onClick } = this.props;\n        return (\n            <Button onClick={onClick}>{locale.clickMe}</Button>\n        );\n    }\n}\n\nclass Toast extends React.Component {\n    static propTypes = {\n        locale: PropTypes.object,\n        afterClose: PropTypes.func\n    };\n\n    static defaultProps = {\n        locale: locales['zh-cn'].Toast,\n        afterClose: () => {}\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false\n        };\n\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    handleClose() {\n        this.setState({\n            visible: false\n        });\n        this.props.afterClose();\n    }\n\n    render() {\n        return (\n            <div className=\"toast\">\n                <Button type=\"primary\" onClick={this.handleClose}>\n                    {this.props.locale.close}\n                </Button>\n            </div>\n        );\n    }\n}\nToast.create = (props = {}) => {\n    const mountNode = document.createElement('div');\n    document.body.appendChild(mountNode);\n\n    const closeChain = () => {\n        ReactDOM.unmountComponentAtNode(mountNode);\n        document.body.removeChild(mountNode);\n    };\n\n    const newLocale = getContextProps(props, 'Toast').locale;\n\n    ReactDOM.render(<Toast afterClose={closeChain} locale={newLocale} />, mountNode);\n};\n\nconst NewClickMe = config(ClickMe);\nconst NewToast = config(Toast);\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            language: 'zh-cn'\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleChangeLanguage = this.handleChangeLanguage.bind(this);\n    }\n\n    handleClick() {\n        NewToast.create();\n    }\n\n    handleChangeLanguage(language) {\n        this.setState({\n            language\n        });\n    }\n\n    render() {\n        const { language } = this.state;\n\n        return (\n            <ConfigProvider locale={locales[language]}>\n                <div>\n                    <div className=\"select-language\">\n                        <Select value={language} onChange={this.handleChangeLanguage}>\n                            <Option value=\"zh-cn\">zh-cn</Option>\n                            <Option value=\"en-us\">en-us</Option>\n                        </Select>\n                    </div>\n                    <NewClickMe onClick={this.handleClick} />\n                </div>\n            </ConfigProvider>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".toast {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: auto;\n    width: 200px;\n    height: 100px;\n    line-height: 100px;\n    text-align: center;\n    background: white;\n    box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, .32);\n}\n\n.toast .next-btn {\n    margin: auto;\n}\n\n.select-language {\n    margin-bottom: 20px;\n}\n",
        "body": "\n<p>展示如何配合 ConfigProvider 实现具有国际化能力的组件。</p>\n"
      },
      {
        "title": "组件的RTL",
        "order": "2",
        "jsx": "import { ConfigProvider, Button, Radio, Menu, Calendar, DatePicker, Dialog, TimePicker, Timeline, Select } from '@alifd/next';\n\nconst { SubMenu, Item, Group, Divider } = Menu;\nconst RangePicker = DatePicker.RangePicker;\n\nConfigProvider.setDirection('rtl');\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dir: 'rtl'\n        };\n\n        this.changeDir = this.changeDir.bind(this);\n        this.showDialog = this.showDialog.bind(this);\n    }\n\n    changeDir(value) {\n        this.setState({\n            dir: value\n        });\n    }\n\n    showDialog() {\n        Dialog.confirm({\n            title: 'Confirm',\n            content: 'Are you sure you want to delete all alert e-mails waiting in queue?'\n        });\n    }\n\n    render() {\n\n        return (\n            <div dir={this.state.dir}>\n                <div className=\"change-rtl\">\n                    <span style={{ marginRight: 16 }}>Change direction of components: </span>\n                    <Radio.Group shape=\"button\" size=\"large\" value={this.state.dir} onChange={this.changeDir}>\n                        <Radio key=\"en\" value=\"rtl\">RTL</Radio>\n                        <Radio key=\"cn\" value=\"ltr\">LTR</Radio>\n                    </Radio.Group>\n                </div>\n                <br />\n                <hr />\n                <ConfigProvider rtl={this.state.dir === 'rtl'}>\n                    <div className=\"locale-components\">\n                        <Button type=\"primary\" onClick={this.showDialog}>Show Dialog</Button>\n                        <Select style={{ width: '150px' }} dataSource={['hello', 'bye']} />\n                        <RangePicker showTime/>\n                        <Calendar style={{ width: '350px', padding: '12px', border: '1px solid #C4C6CF', borderRadius: '3px' }} shape=\"card\" />\n\n                        <Timeline fold={[{foldArea: [1, 2], foldShow: true}]}>\n                            <Timeline.Item title=\"Signed\" content=\"Signed, sign Alibaba is a small post office, thanks to the use of STO, look forward to once again at your service\" time={'2016-06-10 10:30:00'} state=\"process\"/>\n                            <Timeline.Item title=\"Ship\" content=\"Express has arrived in Hangzhou, Zhejiang Binjiang company\" time={'2016-06-10 09:30:00'} />\n                            <Timeline.Item title=\"Ship\" content=\"Zhejiang Hangzhou Riverside company sent a member for you to send pieces\" time={'2016-06-10 09:03:00'} />\n                            <Timeline.Item title=\"Ship\" content=\"Zhejiang Hangzhou Transshipment Center has been issued\" time={'2016-06-10 06:10:00'} />\n                        </Timeline>\n\n                        <Menu className=\"my-menu\" defaultOpenKeys=\"sub-menu\">\n                            <Item key=\"1\">Option 1</Item>\n                            <Item disabled key=\"2\">Disabled option 2</Item>\n                            <Divider key=\"divider\" />\n                            <Group label=\"Group\">\n                                <Item key=\"group-1\">Group option 1</Item>\n                                <Item key=\"group-2\">Group option 2</Item>\n                            </Group>\n                            <Divider />\n                            <SubMenu key=\"sub-menu\" label=\"Sub menu\">\n                                <Item key=\"sub-1\">Sub option 1</Item>\n                                <Item key=\"sub-2\">Sub option 2</Item>\n                                <Item disabled key=\"sub-3\">\n                                    <a href=\"https://www.taobao.com/\" target=\"__blank\">Disabled Option Link 3</a>\n                                </Item>\n                                <Item key=\"sub-4\">\n                                    <a href=\"https://www.taobao.com/\" target=\"__blank\">Option Link 4</a>\n                                </Item>\n                            </SubMenu>\n                            <Item key=\"3\" helper=\"CTRL+P\">Option 3</Item>\n                            <Item disabled key=\"4\">\n                                <a href=\"https://www.taobao.com/\" target=\"__blank\">Disabled Option Link</a>\n                            </Item>\n                            <Item key=\"5\">\n                                <a href=\"https://www.taobao.com/\" target=\"__blank\">Option Link</a>\n                            </Item>\n                        </Menu>\n                    </div>\n                </ConfigProvider>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".my-menu {\n    width: 200px;\n}\n\n.change-locale {\n    border-bottom: 1px solid #d9d9d9;\n    padding-bottom: 16px;\n}\n\n.locale-components > * {\n    margin: 16px 0;\n    display: block;\n}\n",
        "body": "\n<p>组件RTL样式展示(目前部分支持)</p>\n"
      }
    ]
  },
  {
    "name": "DatePicker",
    "category": "Components",
    "title": "日期选择框",
    "type": "表单",
    "importStatement": "import { DatePicker } from '@alifd/next';",
    "body": "\n## Guide\n\n输入或选择日期的控件。当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。\n\n### 日期选择模式\n\nDatePicker/RangePicker 在交互上增加了**操作焦点**的设置，意味着，如果某个输入框处于 focus 态，那么当前选择的日期将会作用于该输入框对应的日期。\n\n如上图所示，带时间的 RangePicker 有 4 个输入焦点，分别为开始日期、开始时间、结束日期、结束时间。当用户激活某个输入框时，此时下拉选择的日期将会作用域该输入框。同时设置了如下两个规则：\n\n1.  已选定日期范围后，当焦点在开始日期时，如果即将选择的日期大于结束日期，将会重设开始日期。\n2.  已选定日期范围后，当焦点在结束日期时，如果即将选择的日期小于开始日期，将会重设开始日期。\n\n### 日期值的多语言\n\n由于 Calendar 组件内部使用 moment 对象来设置日期（请使用最新版 moment），部分 Locale 读取自 moment，因此用户需要在外部使用时[正确的设置 moment 的 locale](http://momentjs.cn/docs/#/i18n/changing-locale/) 。\n\n-   Q: 文档站点上看是中式日历，为什么我本地却是美式日历呢？如何进行多语言适配？<br/>\n    A: 日期的多语言情况比较复杂，涉及到年、月、日、星期、阅读习惯等多方面(美式从周日到周六，中式从周一到周日)，因此我们借助了成熟的时间库 moment.js 来进行日期的多语言处理。\n     moment.js 默认支持美式表达，如需中文等其他语言，请引入moment-with-locales.js语言包。\n\n```js\nimport moment from 'moment';\n\nmoment.locale('zh-cn');\n```\n\n此外，当改变 moment 的全局 locale 时并不会修改之前的已有实例，例如：\n\n```js\nmoment.locale('fr');\nconst m = moment(1316116057189);\nm.fromNow(); // il y a une heure\n\nmoment.locale('en');\nm.fromNow(); // il y a une heure\nmoment(1316116057189).fromNow(); // an hour ago\n```\n\n除了全局设置 moment 的多语言，还可以只对某个 moment 实例设置多语言。比如：\n\n```js\nconst value = moment();\nvalue.locale('fr'); // set this instance to use French\n```\n\n### Moment 对象和字符串\n\nDatePicker 默认情况下接收和返回的数据类型都是 Moment 对象。为了便于用户的使用，DatePikcer 还支持直接传入字符串（组件内部仍然会格式化为 Moment 对象）。使用方法如下：\n\n标准非受控\n\n```jsx\n<DatePicker onChange={val => console.log(val)} />\n// select 2019-01-23\n// >> MomentObject\n\n<DatePicker defaultValue={moment()} onChange={val => console.log(val)} />\n// select 2019-01-23\n// >> MomentObject\n\n<DatePicker defaultValue=\"2018-01-23\" onChange={val => console.log(val)} />\n// select 2019-01-23\n// >> \"2019-01-23\"\n```\n\n标准受控\n\n```jsx\n<DatePicker value={moment()} onChange={val => console.log(val)} />\n// setProps({ value: moment().add(1, 'months') })\n// >> MomentObject\n\n<DatePicker value=\"2018-01-23\" onChange={val => console.log(val)} />\n// setProps({ value: '2019-01-23' })\n// >> \"2019-01-23\"\n```\n\n API\n\n### DatePicker\n\n| 参数                  | 说明                                                                                                                                                             | 类型             | 默认值          |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | ------------ |\n| label               | 输入框内置标签                                                                                                                                                        | ReactNode      | -            |\n| size                | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                            | Enum           | 'medium'     |\n| state               | 输入框状态<br><br>**可选值**:<br>'success', 'error'                                                                                                                    | Enum           | -            |\n| placeholder         | 输入提示                                                                                                                                                           | String         | -            |\n| defaultVisibleMonth | 默认展现的月<br><br>**签名**:<br>Function() => MomentObject<br>**返回值**:<br>{MomentObject} 返回包含指定月份的 moment 对象实例<br>                                                    | Function       | -            |\n| value               | 日期值（受控）moment 对象                                                                                                                                               | custom         | -            |\n| defaultValue        | 初始日期值，moment 对象                                                                                                                                                | custom         | -            |\n| format              | 日期值的格式（用于限定用户输入和展示）                                                                                                                                            | String         | 'YYYY-MM-DD' |\n| showTime            | 是否使用时间控件，传入 TimePicker 的属性 { defaultValue, format, ... }                                                                                                       | Object/Boolean | false        |\n| resetTime           | 每次选择日期时是否重置时间（仅在 showTime 开启时有效）                                                                                                                               | Boolean        | false        |\n| disabledDate        | 禁用日期函数<br><br>**签名**:<br>Function(日期值: MomentObject) => Boolean<br>**参数**:<br>_日期值_: {MomentObject} null<br>**返回值**:<br>{Boolean} 是否禁用<br>                     | Function       | () => false  |\n| footerRender        | 自定义面板页脚<br><br>**签名**:<br>Function() => Node<br>**返回值**:<br>{Node} 自定义的面板页脚组件<br>                                                                              | Function       | () => null   |\n| onChange            | 日期值改变时的回调<br><br>**签名**:<br>Function(value: MomentObject/String) => void<br>**参数**:<br>_value_: {MomentObject/String} 日期值                                      | Function       | func.noop    |\n| onOk                | 点击确认按钮时的回调<br><br>**签名**:<br>Function() => MomentObject/String<br>**返回值**:<br>{MomentObject/String} 日期值<br>                                                    | Function       | func.noop    |\n| disabled            | 是否禁用                                                                                                                                                           | Boolean        | -            |\n| hasClear            | 是否显示清空按钮                                                                                                                                                       | Boolean        | true         |\n| visible             | 弹层显示状态                                                                                                                                                         | Boolean        | -            |\n| defaultVisible      | 弹层默认是否显示                                                                                                                                                       | Boolean        | -            |\n| onVisibleChange     | 弹层展示状态变化时的回调<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function       | func.noop    |\n| popupTriggerType    | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                     | Enum           | 'click'      |\n| popupAlign          | 弹层对齐方式,具体含义见 OverLay文档                                                                                                                                         | String         | 'tl tl'      |\n| popupContainer      | 弹层容器<br><br>**签名**:<br>Function(target: Element) => Element<br>**参数**:<br>_target_: {Element} 目标元素<br>**返回值**:<br>{Element} 弹层的容器元素<br>                        | Function       | -            |\n| popupStyle          | 弹层自定义样式                                                                                                                                                        | Object         | -            |\n| popupClassName      | 弹层自定义样式类                                                                                                                                                       | String         | -            |\n| popupProps          | 弹层其他属性                                                                                                                                                         | Object         | -            |\n\n### DatePicker.MonthPicker\n\n| 参数                 | 说明                                                                                                                                                             | 类型        | 默认值         |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ----------- |\n| label              | 输入框内置标签                                                                                                                                                        | ReactNode | -           |\n| size               | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                            | Enum      | 'medium'    |\n| state              | 输入框状态<br><br>**可选值**:<br>'success', 'error'                                                                                                                    | Enum      | -           |\n| placeholder        | 输入提示                                                                                                                                                           | String    | -           |\n| defaultVisibleYear | 默认展现的年<br><br>**签名**:<br>Function() => MomentObject<br>**返回值**:<br>{MomentObject} 返回包含指定年份的 moment 对象实例<br>                                                    | Function  | -           |\n| value              | 日期值（受控）moment 对象                                                                                                                                               | custom    | -           |\n| defaultValue       | 初始日期值，moment 对象                                                                                                                                                | custom    | -           |\n| format             | 日期值的格式（用于限定用户输入和展示）                                                                                                                                            | String    | 'YYYY-MM'   |\n| disabledDate       | 禁用日期函数<br><br>**签名**:<br>Function(日期值: MomentObject) => Boolean<br>**参数**:<br>_日期值_: {MomentObject} null<br>**返回值**:<br>{Boolean} 是否禁用<br>                     | Function  | () => false |\n| footerRender       | 自定义面板页脚<br><br>**签名**:<br>Function() => Node<br>**返回值**:<br>{Node} 自定义的面板页脚组件<br>                                                                              | Function  | () => null  |\n| onChange           | 日期值改变时的回调<br><br>**签名**:<br>Function(value: MomentObject/String) => void<br>**参数**:<br>_value_: {MomentObject/String} 日期值                                      | Function  | func.noop   |\n| disabled           | 是否禁用                                                                                                                                                           | Boolean   | -           |\n| hasClear           | 是否显示清空按钮                                                                                                                                                       | Boolean   | true        |\n| visible            | 弹层显示状态                                                                                                                                                         | Boolean   | -           |\n| defaultVisible     | 弹层默认是否显示                                                                                                                                                       | Boolean   | -           |\n| onVisibleChange    | 弹层展示状态变化时的回调<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function  | func.noop   |\n| popupTriggerType   | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                     | Enum      | 'click'     |\n| popupAlign         | 弹层对齐方式, 具体含义见 OverLay文档                                                                                                                                        | String    | 'tl tl'     |\n| popupContainer     | 弹层容器<br><br>**签名**:<br>Function(target: Element) => Element<br>**参数**:<br>_target_: {Element} 目标元素<br>**返回值**:<br>{Element} 弹层的容器元素<br>                        | Function  | -           |\n| popupStyle         | 弹层自定义样式                                                                                                                                                        | Object    | -           |\n| popupClassName     | 弹层自定义样式类                                                                                                                                                       | String    | -           |\n| popupProps         | 弹层其他属性                                                                                                                                                         | Object    | -           |\n\n### DatePicker.RangePicker\n\n| 参数                  | 说明                                                                                                                                                             | 类型                   | 默认值                                                                                          |          |           |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------- | -------------------------------------------------------------------------------------------- | -------- | --------- |\n| size                | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                            | Enum                 | 'medium'                                                                                     |          |           |\n| defaultVisibleMonth | 默认展示的起始月份<br><br>**签名**:<br>Function() => MomentObject<br>**返回值**:<br>{MomentObject} 返回包含指定月份的 moment 对象实例<br>                                                 | Function             | -                                                                                            |          |           |\n| value               | 日期范围值数组 [moment, moment]                                                                                                                                       | Array                | -                                                                                            |          |           |\n| defaultValue        | 初始的日期范围值数组 [moment, moment]                                                                                                                                    | Array                | -                                                                                            |          |           |\n| format              | 日期格式                                                                                                                                                           | String               | 'YYYY-MM-DD'                                                                                 |          |           |\n| showTime            | 是否使用时间控件，支持传入 TimePicker 的属性                                                                                                                                   | Object/Boolean       | false                                                                                        |          |           |\n| resetTime           | 每次选择是否重置时间（仅在 showTime 开启时有效）                                                                                                                                  | Boolean              | false                                                                                        |          |           |\n| disabledDate        | 禁用日期函数<br><br>**签名**:<br>Function(日期值: MomentObject) => Boolean<br>**参数**:<br>_日期值_: {MomentObject} null<br>**返回值**:<br>{Boolean} 是否禁用<br>                     | Function             | () => false                                                                                  |          |           |\n| footerRender        | 自定义面板页脚<br><br>**签名**:<br>Function() => Node<br>**返回值**:<br>{Node} 自定义的面板页脚组件<br>                                                                              | Function             | () => null                                                                                   |          |           |\n| onChange            | 日期范围值改变时的回调 \\[ MomentObject                                                                                                                                    | String, MomentObject | String ]<br><br>**签名**:<br>Function(value: Array) => void<br>**参数**:<br>_value_: {Array} 日期值 | Function | func.noop |\n| onOk                | 点击确认按钮时的回调 返回开始时间和结束时间`[ MomentObject|String, MomentObject|String ]`<br><br>**签名**:<br>Function() => Array<br>**返回值**:<br>{Array} 日期范围<br>                     | Function             | func.noop                                                                                    |          |           |\n| label               | 输入框内置标签                                                                                                                                                        | ReactNode            | -                                                                                            |          |           |\n| state               | 输入框状态<br><br>**可选值**:<br>'error', 'success'                                                                                                                    | Enum                 | -                                                                                            |          |           |\n| disabled            | 是否禁用                                                                                                                                                           | Boolean              | -                                                                                            |          |           |\n| hasClear            | 是否显示清空按钮                                                                                                                                                       | Boolean              | true                                                                                         |          |           |\n| visible             | 弹层显示状态                                                                                                                                                         | Boolean              | -                                                                                            |          |           |\n| defaultVisible      | 弹层默认是否显示                                                                                                                                                       | Boolean              | -                                                                                            |          |           |\n| onVisibleChange     | 弹层展示状态变化时的回调<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function             | func.noop                                                                                    |          |           |\n| popupTriggerType    | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                     | Enum                 | 'click'                                                                                      |          |           |\n| popupAlign          | 弹层对齐方式, 具体含义见 OverLay文档                                                                                                                                        | String               | 'tl tl'                                                                                      |          |           |\n| popupContainer      | 弹层容器<br><br>**签名**:<br>Function(target: Element) => Element<br>**参数**:<br>_target_: {Element} 目标元素<br>**返回值**:<br>{Element} 弹层的容器元素<br>                        | Function             | -                                                                                            |          |           |\n| popupStyle          | 弹层自定义样式                                                                                                                                                        | Object               | -                                                                                            |          |           |\n| popupClassName      | 弹层自定义样式类                                                                                                                                                       | String               | -                                                                                            |          |           |\n| popupProps          | 弹层其他属性                                                                                                                                                         | Object               | -                                                                                            |          |           |\n\n### DatePicker.YearPicker\n\n| 参数               | 说明                                                                                                                                                             | 类型        | 默认值         |\n| ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ----------- |\n| label            | 输入框内置标签                                                                                                                                                        | ReactNode | -           |\n| size             | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                            | Enum      | 'medium'    |\n| state            | 输入框状态<br><br>**可选值**:<br>'success', 'error'                                                                                                                    | Enum      | -           |\n| placeholder      | 输入提示                                                                                                                                                           | String    | -           |\n| value            | 日期值（受控）moment 对象                                                                                                                                               | custom    | -           |\n| defaultValue     | 初始日期值，moment 对象                                                                                                                                                | custom    | -           |\n| format           | 日期值的格式（用于限定用户输入和展示）                                                                                                                                            | String    | 'YYYY'      |\n| disabledDate     | 禁用日期函数<br><br>**签名**:<br>Function(日期值: MomentObject) => Boolean<br>**参数**:<br>_日期值_: {MomentObject} null<br>**返回值**:<br>{Boolean} 是否禁用<br>                     | Function  | () => false |\n| footerRender     | 自定义面板页脚<br><br>**签名**:<br>Function() => Node<br>**返回值**:<br>{Node} 自定义的面板页脚组件<br>                                                                              | Function  | () => null  |\n| onChange         | 日期值改变时的回调<br><br>**签名**:<br>Function(value: MomentObject/String) => void<br>**参数**:<br>_value_: {MomentObject/String} 日期值                                      | Function  | func.noop   |\n| disabled         | 是否禁用                                                                                                                                                           | Boolean   | -           |\n| hasClear         | 是否显示清空按钮                                                                                                                                                       | Boolean   | true        |\n| visible          | 弹层显示状态                                                                                                                                                         | Boolean   | -           |\n| defaultVisible   | 弹层默认是否显示                                                                                                                                                       | Boolean   | -           |\n| onVisibleChange  | 弹层展示状态变化时的回调<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function  | func.noop   |\n| popupTriggerType | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                     | Enum      | 'click'     |\n| popupAlign       | 弹层对齐方式, 具体含义见 OverLay文档                                                                                                                                        | String    | 'tl tl'     |\n| popupContainer   | 弹层容器<br><br>**签名**:<br>Function(target: Element) => Element<br>**参数**:<br>_target_: {Element} 目标元素<br>**返回值**:<br>{Element} 弹层的容器元素<br>                        | Function  | -           |\n| popupStyle       | 弹层自定义样式                                                                                                                                                        | Object    | -           |\n| popupClassName   | 弹层自定义样式类                                                                                                                                                       | String    | -           |\n| popupProps       | 弹层其他属性                                                                                                                                                         | Object    | -           |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本用法",
        "order": "0",
        "jsx": "import { DatePicker } from '@alifd/next';\n\nconst { RangePicker, MonthPicker, YearPicker } = DatePicker;\nconst onChange = val => console.log(val);\n\nReactDOM.render(<div>\n    <DatePicker onChange={onChange} /> <br /><br />\n    <MonthPicker onChange={onChange} /> <br /><br />\n    <YearPicker onChange={onChange} /> <br /><br />\n    <RangePicker onChange={onChange} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>最基本的用法。可以通过 <code>onChange</code> 监听选中值的变化。</p>\n"
      },
      {
        "title": "自定义日期范围选择",
        "order": "8",
        "jsx": "import { DatePicker } from '@alifd/next';\n\nclass CustomRangePicker extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            startValue: null,\n            endValue: null,\n            endOpen: false,\n        };\n    }\n\n    disabledStartDate = (startValue) => {\n        const { endValue } = this.state;\n        if (!startValue || !endValue) {\n            return false;\n        }\n        return startValue.valueOf() > endValue.valueOf();\n    }\n\n    disabledEndDate = (endValue) => {\n        const { startValue } = this.state;\n        if (!endValue || !startValue) {\n            return false;\n        }\n        return endValue.valueOf() <= startValue.valueOf();\n    }\n\n    onChange = (stateName, value) => {\n        this.setState({\n            [stateName]: value,\n        });\n    }\n\n    onStartChange = (value) => {\n        this.onChange('startValue', value);\n    }\n\n    onEndChange = value => {\n        this.onChange('endValue', value);\n    }\n\n    handleStartOpenChange = (open) => {\n        if (!open) {\n            this.setState({ endOpen: true });\n        }\n    }\n\n    handleEndOpenChange = (open) => {\n        this.setState({ endOpen: open });\n    }\n\n    render() {\n        const { endOpen } = this.state;\n        return (\n            <div>\n                <DatePicker\n                    disabledDate={this.disabledStartDate}\n                    placeholder=\"Departure Date\"\n                    onChange={this.onStartChange}\n                    onVisibleChange={this.handleStartOpenChange}\n                />\n                <span className=\"custom-sep\">-</span>\n                <DatePicker\n                    disabledDate={this.disabledEndDate}\n                    placeholder=\"Return Date\"\n                    onChange={this.onEndChange}\n                    visible={endOpen}\n                    onVisibleChange={this.handleEndOpenChange}\n                />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<div>\n    <CustomRangePicker />\n</div>, mountNode);\n",
        "css": ".custom-sep {\n    margin: 0 6px;\n    color: #999;\n}\n",
        "body": "\n<p>如果默认的 RangePicker 在交互上无法满足您的使用需求，还可以基于 DatePicker 封装实现类似的功能。\n例如，示例中的日期选择可以自由的更改开始或结束日期，而不必每次选择时重置日期。</p>\n"
      },
      {
        "title": "面板的默认展现日期",
        "order": "2",
        "jsx": "import { DatePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst { RangePicker, MonthPicker } = DatePicker;\n\nfunction onVisibleMonthChange(val, reason) {\n    console.log(val.format('L'), reason);\n}\n\nReactDOM.render(<div>\n    <p>Setting last month as default visible month</p>\n    <DatePicker defaultVisibleMonth={() => moment().add(-1, 'months')} onVisibleMonthChange={onVisibleMonthChange} />\n    <br /><br />\n    <RangePicker defaultVisibleMonth={() => moment().add(-1, 'months')} onVisibleMonthChange={onVisibleMonthChange} />\n    <br /><br />\n    <p>Setting 2017 as default visible year</p>\n    <MonthPicker defaultVisibleYear={() => moment('2017', 'YYYY')} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 <code>defaultVisibleMonth</code> 或 <code>defaultVisibleYear</code> 属性可以修改面板的默认展现日期。</p>\n"
      },
      {
        "title": "提供默认值",
        "order": "1",
        "jsx": "import { DatePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst { RangePicker, MonthPicker, YearPicker } = DatePicker;\nconst startValue = moment('2017-11-20', 'YYYY-MM-DD', true);\nconst endValue = moment('2017-12-15', 'YYYY-MM-DD', true);\nconst onChange = val => console.log(val);\n\nReactDOM.render(<div>\n    <DatePicker defaultValue={startValue} onChange={onChange} /><br /><br />\n    <MonthPicker defaultValue={startValue} onChange={onChange} /><br /><br />\n    <YearPicker defaultValue={startValue} onChange={onChange} /><br /><br />\n    <RangePicker defaultValue={[startValue, endValue]} onChange={onChange} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 <code>defaultValue</code> 属性为日期选择器提供初值，所提供的初值必须为 moment 对象。</p>\n"
      },
      {
        "title": "禁止选择某些日期",
        "order": "4",
        "jsx": "import { DatePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst { RangePicker, MonthPicker, YearPicker } = DatePicker;\nconst currentDate = moment();\n\n// Disable all dates before today\nconst disabledDate = function (date) {\n    return date.valueOf() <= currentDate.valueOf();\n};\n\nReactDOM.render(<div>\n    <DatePicker disabledDate={disabledDate} onChange={val => console.log(val)} /><br /><br />\n    <MonthPicker disabledDate={disabledDate} onChange={val => console.log(val)} /><br /><br />\n    <YearPicker disabledDate={disabledDate} onChange={val => console.log(val)} /><br /><br />\n    <RangePicker disabledDate={disabledDate} onChange={val => console.log(val)} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 <code>disabledDate</code> 属性来禁止用户选择或输入某些特定日期。</p>\n"
      },
      {
        "title": "禁用日期选择",
        "order": "6",
        "jsx": "import { DatePicker } from '@alifd/next';\n\nconst { RangePicker } = DatePicker;\n\nReactDOM.render(<div>\n    <DatePicker disabled />&nbsp;&nbsp;<RangePicker disabled />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>当开启 <code>disabled</code> 属性时，选择框处于完全禁用状态。</p>\n"
      },
      {
        "title": "与 Field 结合",
        "order": "12",
        "jsx": "import { DatePicker, Field, Button } from '@alifd/next';\n\nconst { RangePicker, YearPicker, MonthPicker } = DatePicker;\n\nclass App extends React.Component {\n\n    field = new Field(this);\n\n    printData = () => {\n        this.field.validate((err, values) => {\n\n            if (err) {\n                console.error('Error: ', err);\n                return;\n            }\n\n            console.log('datepicker: %s', values.date.format('YYYY-MM-DD'));\n            console.log('monthpicker: %s', values.month.format('YYYY-MM'));\n            console.log('yearpicker: %s', values.year.format('YYYY'));\n            const range = values.range;\n            console.log('rangepicker: [%s, %s]', range[0] && range[0].format('YYYY-MM-DD'), range[1] && range[1].format('YYYY-MM-DD'));\n        });\n    }\n\n    printError = (name) => {\n        if (this.field.getError(name)) {\n            return <span className=\"error-msg\">{this.field.getError(name).join(',')}</span>;\n        }\n    }\n\n    render() {\n        const init = this.field.init;\n\n        return (\n            <div>\n                <DatePicker {...init('date', { rules: [ {\n                    required: true,\n                    message: '请选择日期',\n                } ] })} />{this.printError('date')}<br /><br />\n                <MonthPicker {...init('month', { rules: [ {\n                    required: true,\n                    message: '请选择月份',\n                } ]  })} />{this.printError('month')}<br /><br />\n                <YearPicker {...init('year', { rules: [ {\n                    required: true,\n                    message: '请选择年份',\n                } ]  })} />{this.printError('year')}<br /><br />\n                <RangePicker {...init('range', { rules: [ {\n                    required: true,\n                    message: '请选择日期范围',\n                } ]  })} />{this.printError('range')}<br /><br />\n                <Button onClick={this.printData}>Print to Console</Button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": ".error-msg {\n    color: #E72B00;\n    font-size: 12px;\n}\n",
        "body": "\n<p>与 Field 结合使用，简单示范自定义返回值</p>\n"
      },
      {
        "title": "自定义面板页脚",
        "order": "11",
        "jsx": "import { DatePicker } from '@alifd/next';\n\nconst { RangePicker } = DatePicker;\n\nfunction footerRender() {\n    return <div className=\"custom-footer\">👍 Some useful info here</div>;\n}\n\nReactDOM.render(<div>\n    <DatePicker footerRender={footerRender}  />&nbsp;&nbsp;\n    <RangePicker footerRender={footerRender} />\n</div>, mountNode);\n",
        "css": ".custom-footer {\n    padding: 12px;\n    font-size: 12px;\n    border-top: 1px solid #DCDEE3;\n}\n",
        "body": "\n<p>可以通过 <code>footerRender</code> 自定义对面板页脚的定制。</p>\n"
      },
      {
        "title": "日期格式",
        "order": "7",
        "jsx": "import { DatePicker } from '@alifd/next';\n\nconst { RangePicker } = DatePicker;\nconst onChange = val => console.log(val);\n\nReactDOM.render(<div>\n    <DatePicker format=\"YYYY-M-D\" onChange={onChange} />\n    <br /><br />\n    <DatePicker format=\"YYYY-M-D\" onChange={onChange} showTime={{ format: 'HH:mm' }} />\n    <br /><br />\n    <RangePicker format=\"YYYY-M-D\" onChange={onChange} />\n    <br /><br />\n    <RangePicker format=\"YYYY-M-D\" onChange={onChange} showTime={{ format: 'HH:mm' }} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过 <code>format</code> 属性可以约束日期选择器的日期格式，该格式同时会限定用户的输入格式。</p>\n"
      },
      {
        "title": "自定义日期选择器弹层",
        "order": "10",
        "jsx": "import { DatePicker } from '@alifd/next';\n\nconst { RangePicker } = DatePicker;\n\nReactDOM.render(<div>\n    <p>Change popup align</p>\n    <DatePicker popupAlign=\"bl tl\"  />\n    <p>Change popup container</p>\n    <RangePicker popupContainer={target => target.parentNode} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>组件对外透出了 <code>visible</code>, <code>defaultVisible</code>, <code>onVisibleChange</code>, <code>popupTriggerType</code>, <code>popupAlign</code>, <code>popupContainer</code>, <code>popupStyle</code>, <code>popupClassName</code> 等属性用于直接定制弹层。此外，如果这些属性仍然无法满足需求，可以通过 <code>popupProps</code> 进行透传。</p>\n"
      },
      {
        "title": "日期时间选择",
        "order": "5",
        "jsx": "import { DatePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst { RangePicker } = DatePicker;\nconst onChange = (value) => console.log(value);\nconst onOk = (value) => console.log('onOK:', value.format('YYYY-MM-DD HH:mm:ss'));\nconst onRangeOk = (value) => console.log('onOk: [%s, %s]', value[0].format('YYYY-MM-DD HH:mm:ss'), value[1].format('YYYY-MM-DD HH:mm:ss'));\n\nconst defaultTimeValue = moment('09:00:00', 'HH:mm:ss', true);\n\nReactDOM.render(<div>\n    <p>DatePicker With Time</p>\n    <DatePicker showTime onChange={onChange} onOk={onOk} />\n    <p>DatePicker with Time, reset 00:00:00 for every select</p>\n    <DatePicker showTime onChange={onChange} onOk={onOk} resetTime />\n    <p>DatePicker with Time, with default time value</p>\n    <DatePicker showTime={{ defaultValue: defaultTimeValue, secondStep: 10 }} onChange={onChange} onOk={onOk} />\n    <p>RangePicker with Time</p>\n    <RangePicker showTime onChange={onChange} onOk={onRangeOk} />\n    <p>RangePicker with Time, reset 00:00:00 for every select</p>\n    <RangePicker showTime resetTime onChange={onChange} onOk={onRangeOk} />\n    <p>RangePicker with Time, with default time value, hide seconds</p>\n    <RangePicker showTime={{ defaultValue: defaultTimeValue, format: 'HH:mm', minuteStep: 15 }} onChange={onChange} onOk={onRangeOk} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>如果需要同时选择时间，可以通过 <code>showTime</code> 属性开启，<code>showTime</code> 支持传入 TimePickerPanel 的属性，例如 <code>format</code>, <code>defaultValue</code> 等。</p>\n"
      },
      {
        "title": "不同尺寸",
        "order": "3",
        "jsx": "import { DatePicker } from '@alifd/next';\n\nReactDOM.render(<div>\n    <DatePicker size=\"large\" /> &nbsp;&nbsp;\n    <DatePicker /> &nbsp;&nbsp;\n    <DatePicker size=\"small\" />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过 <code>size</code> 属性可以改变 Input 组件的尺寸，默认为 <code>medium</code>。</p>\n"
      }
    ]
  },
  {
    "name": "Dialog",
    "category": "Components",
    "title": "弹窗",
    "type": "弹层",
    "importStatement": "import { Dialog } from '@alifd/next';",
    "body": "\n## 使用指南\n\n对话框\n\n### 何时使用\n\n对话框是用于在不离开主路径的情况下，提供用户快速执行简单的操作、确认用户信息或反馈提示的辅助窗口。\n\n API\n\n### Dialog\n\n| 参数                   | 说明                                                                                                                                                                                                               | 类型                | 默认值                                                                               |\n| -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------- | --------------------------------------------------------------------------------- |\n| visible              | 是否显示                                                                                                                                                                                                             | Boolean           | false                                                                             |\n| title                | 标题                                                                                                                                                                                                               | ReactNode         | -                                                                                 |\n| children             | 内容                                                                                                                                                                                                               | ReactNode         | -                                                                                 |\n| footer               | 底部内容，设置为 false，则不进行显示                                                                                                                                                                                            | Boolean/ReactNode | [&lt;Button type=\"primary\"&gt;确定&lt;/Button&gt;, &lt;Button&gt;取消&lt;/Button&gt;] |\n| footerAlign          | 底部按钮的对齐方式<br><br>**可选值**:<br>'left', 'center', 'right'                                                                                                                                                           | Enum              | 'right'                                                                           |\n| footerActions        | 指定确定按钮和取消按钮是否存在以及如何排列,<br><br>**可选值**：<br>['ok', 'cancel']（确认取消按钮同时存在，确认按钮在左）<br>['cancel', 'ok']（确认取消按钮同时存在，确认按钮在右）<br>['ok']（只存在确认按钮）<br>['cancel']（只存在取消按钮）                                                   | Array             | ['ok', 'cancel']                                                                  |\n| onOk                 | 在点击确定按钮时触发的回调函数<br><br>**签名**:<br>Function(event: Object) => void<br>**参数**:<br>_event_: {Object} 点击事件对象                                                                                                         | Function          | () => {}                                                                          |\n| onCancel             | 在点击取消按钮时触发的回调函数<br><br>**签名**:<br>Function(event: Object) => void<br>**参数**:<br>_event_: {Object} 点击事件对象                                                                                                         | Function          | () => {}                                                                          |\n| okProps              | 应用于确定按钮的属性对象                                                                                                                                                                                                     | Object            | {}                                                                                |\n| cancelProps          | 应用于取消按钮的属性对象                                                                                                                                                                                                     | Object            | {}                                                                                |\n| closeable            | 控制对话框关闭的方式，值可以为字符串或者布尔值，其中字符串是由以下值组成：<br>**close** 表示点击关闭按钮可以关闭对话框<br>**mask** 表示点击遮罩区域可以关闭对话框<br>**esc** 表示按下 esc 键可以关闭对话框<br>如 'close' 或 'close,esc,mask'<br>如果设置为 true，则以上关闭方式全部生效<br>如果设置为 false，则以上关闭方式全部失效 | String/Boolean    | 'esc,close'                                                                       |\n| onClose              | 对话框关闭时触发的回调函数<br><br>**签名**:<br>Function(trigger: String, event: Object) => void<br>**参数**:<br>_trigger_: {String} 关闭触发行为的描述字符串<br>_event_: {Object} 关闭时事件对象                                                     | Function          | () => {}                                                                          |\n| afterClose           | 对话框关闭后触发的回调函数, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void                                                                                                                                              | Function          | () => {}                                                                          |\n| hasMask              | 是否显示遮罩                                                                                                                                                                                                           | Boolean           | true                                                                              |\n| animation            | 显示隐藏时动画的播放方式                                                                                                                                                                                                     | Object/Boolean    | {     in: 'fadeInDown',     out: 'fadeOutUp' }                                    |\n| autoFocus            | 对话框弹出时是否自动获得焦点                                                                                                                                                                                                   | Boolean           | false                                                                             |\n| align                | 对话框对齐方式, 具体见Overlay文档                                                                                                                                                                                            | String/Boolean    | 'cc cc'                                                                           |\n| isFullScreen         | 当对话框高度超过浏览器视口高度时，是否显示所有内容而不是出现滚动条以保证对话框完整显示在浏览器视口内，该属性仅在对话框垂直水平居中时生效，即 align 被设置为 'cc cc' 时                                                                                                                      | Boolean           | false                                                                             |\n| shouldUpdatePosition | 是否在对话框重新渲染时及时更新对话框位置，一般用于对话框高度变化后依然能保证原来的对齐方式                                                                                                                                                                    | Boolean           | false                                                                             |\n| minMargin            | 对话框距离浏览器顶部和底部的最小间距，align 被设置为 'cc cc' 并且 isFullScreen 被设置为 true 时不生效                                                                                                                                             | Number            | 40                                                                                |\n| overlayProps         | 透传到弹层组件的属性对象                                                                                                                                                                                                     | Object            | {}                                                                                |\n\n<!-- api-extra-start -->\n\n### Dialog.alert(config)/Dialog.confirm(config)\n\n以下只列举 config 可以传入的常用属性，Dialog 组件的其他属性也可以传入\n\n| 属性           | 说明                | 类型        | 默认值      |\n| :----------- | :---------------- | :-------- | :------- |\n| title        | 标题                | ReactNode | ''       |\n| content      | 内容                | ReactNode | ''       |\n| onOk         | 在点击确定按钮时触发的回调函数   | Function  | () => {} |\n| onCancel     | 在点击取消按钮时触发的回调函数   | Function  | () => {} |\n| messageProps | 内嵌 Message 组件属性对象 | Object    | {}       |\n\n### Dialog.show\n\n以下只列举 config 可以传入的常用属性，Dialog 组件其他属性也可以传入\n\n| 属性       | 说明              | 类型        | 默认值      |\n| :------- | :-------------- | :-------- | :------- |\n| title    | 标题              | ReactNode | ''       |\n| content  | 内容              | ReactNode | ''       |\n| onOk     | 在点击确定按钮时触发的回调函数 | Function  | () => {} |\n| onCancel | 在点击取消按钮时触发的回调函数 | Function  | () => {} |\n\n<!-- api-extra-end -->\n\n## 常见问题\n\n### 对话框高度变化，保持居中\n\nDialog 组件默认使用 JS 进行定位，当内容过长时使用 JS 自动调整对话框高度，以使得操作按钮在可视区域内出现，但是这会造成在对话框高度发生变化时无法感知重新使用 JS 定位，有下面两种解决方案：\n\n1.  设置 `shouldUpdatePosition`，在内容更新后，会重新进行定位。\n\n2.  使用 `isFullScreen`，启动 CSS 进行定位，无论对话框高度如何变化都能自适应居中，但是当内容过长时无法让操作按钮在可视区域内出现。\n\n## ARIA and Keyboard\n\n| 键盘        | 说明                                       |\n| :-------- | :--------------------------------------- |\n| esc       | 按下ESC键将会关闭dialog而不触发任何的动作                |\n| tab       | 正向聚焦到任何可以被聚焦的元素， 在Dialog显示的时候，焦点始终保持在框体内 |\n| shift+tab | 反向聚焦到任何可以被聚焦的元素，在Dialog显示的时候，焦点始终保持在框体内  |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Button, Dialog } from '@alifd/next';\n\n\nclass Demo extends React.Component {\n    state = {\n        visible: false\n    };\n\n    onOpen = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    onClose = reason => {\n        console.log(reason);\n\n        this.setState({\n            visible: false\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.onOpen} type=\"primary\">\n                    Open dialog\n                </Button>\n                <Dialog\n                    title=\"Welcome to Alibaba.com\"\n                    visible={this.state.visible}\n                    onOk={this.onClose.bind(this, 'okClick')}\n                    onCancel={this.onClose.bind(this, 'cancelClick')}\n                    onClose={this.onClose}>\n                    Start your business here by searching a popular product\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>第一个对话框</p>\n"
      },
      {
        "title": "自定义底部",
        "order": "2",
        "jsx": "import { Button, Dialog } from '@alifd/next';\n\n\nclass Demo extends React.Component {\n    state = {\n        visible: false\n    };\n\n    onOpen = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.onOpen} type=\"primary\">\n                    Open dialog\n                </Button>\n                <Dialog\n                    title=\"Welcome to Alibaba.com\"\n                    footer={<Button warning type=\"primary\" onClick={this.onClose}>Customize footer</Button>}\n                    visible={this.state.visible}\n                    onOk={this.onClose}\n                    onCancel={this.onClose}\n                    onClose={this.onClose}>\n                    Start your business here by searching a popular product\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>默认的 footer 为确定取消两个按钮，你可以自定义 footer 的内容。</p>\n"
      },
      {
        "title": "定制底部按钮",
        "order": "1",
        "jsx": "import { Button, Radio, Dialog } from '@alifd/next';\n\n\nclass Demo extends React.Component {\n    state = {\n        visible: false,\n        footerActions: ['ok', 'cancel'],\n        footerAlign: 'right'\n    };\n\n    onOpen = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    };\n\n    toggleFooterActions = footerActionsStr => {\n        this.setState({\n            footerActions: footerActionsStr.split(',')\n        });\n    };\n\n    toggleFooterAlign = footerAlign => {\n        this.setState({\n            footerAlign\n        });\n    };\n\n    render() {\n        const { visible, footerActions, footerAlign } = this.state;\n\n        return (\n            <div>\n                <Button onClick={this.onOpen} type=\"primary\">\n                    Open dialog\n                </Button>\n                <Dialog title=\"Customize buttons of footer\"\n                    visible={visible}\n                    footerActions={footerActions}\n                    footerAlign={footerAlign}\n                    onOk={this.onClose}\n                    onCancel={this.onClose}\n                    onClose={this.onClose}>\n                    <div className=\"demo-content\">\n                        <Radio.Group className=\"demo-radio-group\" shape=\"button\" value={footerActions.join(',')} onChange={this.toggleFooterActions}>\n                            <Radio value=\"ok,cancel\">ok is left</Radio>\n                            <Radio value=\"cancel,ok\">ok is right</Radio>\n                            <Radio value=\"ok\">only ok</Radio>\n                            <Radio value=\"cancel\">only cancel</Radio>\n                        </Radio.Group>\n                        <Radio.Group className=\"demo-radio-group\" shape=\"button\" value={footerAlign} onChange={this.toggleFooterAlign}>\n                            <Radio value=\"left\">left</Radio>\n                            <Radio value=\"center\">center</Radio>\n                            <Radio value=\"right\">right</Radio>\n                        </Radio.Group>\n                    </div>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".demo-content {\n    padding: 10px;\n    border: 2px dashed #ddd;\n    background: #F8F8F8;\n}\n\n.demo-radio-group {\n    display: block;\n}\n\n.demo-radio-group + .demo-radio-group  {\n    margin-top: 10px;\n}\n",
        "body": "\n<p>通过 footerActions 来调整确定按钮和取消按钮是否出现以及相互间的位置，通过 footerAlign 来调整底部按钮的对齐方式。</p>\n"
      },
      {
        "title": "内容较多的对话框",
        "order": "4",
        "jsx": "import { Switch, Button, Dialog } from '@alifd/next';\n\n\nconst largeContent = new Array(30).fill(\n    <p>Start your business here by searching a popular product</p>\n);\n\nclass Demo extends React.Component {\n    state = {\n        visible: false,\n        isFullScreen: false\n    };\n\n    onOpen = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    };\n\n    toggleIsFullScreen = () => {\n        this.setState({\n            isFullScreen: !this.state.isFullScreen\n        });\n    }\n\n    render() {\n        const { visible, isFullScreen } = this.state;\n\n        return (\n            <div>\n                <div style={{ display: 'block', marginBottom: '10px' }}>\n                    When the height of the dialog exceeds the viewport height of the browser, whether to show the scroll bar:\n                </div>\n                <Switch style={{ display: 'block', marginBottom: '10px' }} checked={isFullScreen} onChange={this.toggleIsFullScreen} />\n                <Button onClick={this.onOpen} type=\"primary\">\n                    Open dialog\n                </Button>\n                <Dialog title=\"Welcome to Alibaba.com\"\n                    visible={visible}\n                    isFullScreen={isFullScreen}\n                    onOk={this.onClose}\n                    onCancel={this.onClose}\n                    onClose={this.onClose}>\n                    {largeContent}\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "延迟关闭",
        "order": "6",
        "jsx": "import { Button, Message, Dialog } from '@alifd/next';\n\n\nconst popupConfirm = () => {\n    Dialog.confirm({\n        title: 'Confirm',\n        content: 'Do you confirm deleting this content?',\n        onOk: () => {\n            return new Promise(resolve => {\n                setTimeout(resolve, 2000);\n            }).then(() => {\n                Message.success('Deleted successfully!');\n            });\n        }\n    });\n};\n\nReactDOM.render(<Button type=\"primary\" warning onClick={popupConfirm}>Delete</Button>, mountNode);\n",
        "css": "",
        "body": "\n<p>在使用 Dialog.alert，Dialog.confirm 以及 Dialog.show 时，如果 onOk 返回 Promise，对话框会在 Promise resolve 时关闭，除非调用 <code>resolve(false)</code>。</p>\n"
      },
      {
        "title": "快捷调用",
        "order": "5",
        "jsx": "import { Button, Dialog, ConfigProvider } from '@alifd/next';\n\n\nconst popupAlert = () => {\n    Dialog.alert({\n        title: 'Alert',\n        content: 'alert content alert content...',\n        onOk: () => console.log('ok')\n    });\n};\n\nconst popupConfirm = () => {\n    Dialog.confirm({\n        title: 'Confirm',\n        content: 'confirm content confirm content...',\n        onOk: () => console.log('ok'),\n        onCancel: () => console.log('cancel')\n    });\n};\n\nconst popupCustom = () => {\n    const dialog = Dialog.show({\n        title: 'Custom',\n        content: 'custom content custom content...',\n        footer: (\n            <Button warning type=\"primary\" onClick={() => dialog.hide()}>\n                Custom button\n            </Button>\n        )\n    });\n};\n\nReactDOM.render(\n    <ConfigProvider locale={{ Dialog: { ok: 'OK', cancel: 'Cancel' } }}>\n        <span>\n            <Button onClick={popupAlert}>Alert</Button> &nbsp;\n            <Button onClick={popupConfirm}>Confirm</Button> &nbsp;\n            <Button onClick={popupCustom}>Custom</Button>\n        </span>\n    </ConfigProvider>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n<p>Dialog 提供 alert 和 confirm 的快掉调用方式，以及更底层的 show 方式。</p>\n"
      },
      {
        "title": "更新位置",
        "order": "3",
        "jsx": "import { Switch, Button, Dialog } from '@alifd/next';\n\n\nconst shortContent = <p>Start your business here by searching a popular product</p>;\nconst longContent = [\n    <p key=\"0\">Start your business here by searching a popular product</p>,\n    <p key=\"1\">Start your business here by searching a popular product</p>,\n    <p key=\"2\">Start your business here by searching a popular product</p>,\n    <p key=\"3\">Start your business here by searching a popular product</p>\n];\n\nclass App extends React.Component {\n    state = {\n        visible: false,\n        short: true,\n        shouldUpdatePosition: true\n    }\n\n    onOpen = () => {\n        this.setState({\n            visible: true,\n            short: true\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    };\n\n    toggleShouldUpdatePosition = () => {\n        this.setState({\n            shouldUpdatePosition: !this.state.shouldUpdatePosition\n        });\n    };\n\n    modifyContent = () => {\n        this.setState({\n            short: !this.state.short\n        });\n    };\n\n    render() {\n        const { visible, short, shouldUpdatePosition } = this.state;\n\n        return (\n            <div>\n                <div style={{ display: 'block', marginBottom: '10px' }}>\n                    Whether to update the dialog position when the dialog height changes:\n                </div>\n                <Switch style={{ display: 'block', marginBottom: '10px' }} checked={shouldUpdatePosition} onChange={this.toggleShouldUpdatePosition} />\n                <Button onClick={this.onOpen} type=\"primary\">\n                    Open dialog\n                </Button>\n                <Dialog title=\"Welcome to Alibaba.com\"\n                    visible={visible}\n                    onOk={this.onClose.bind(this, 'okClick')}\n                    onCancel={this.onClose.bind(this, 'cancelClick')}\n                    onClose={this.onClose}\n                    shouldUpdatePosition={shouldUpdatePosition}>\n                    <Button type=\"primary\" onClick={this.modifyContent}>\n                        Change content\n                    </Button>\n                    {short ? shortContent : longContent}\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过设置 shouldUpdatePosition 为 true 来及时更新对话框的位置，一般用于对话框内容发生变化但是仍然要保证原来对齐方式的情况</p>\n"
      }
    ]
  },
  {
    "name": "Dropdown",
    "category": "Components",
    "title": "下拉菜单",
    "type": "弹层",
    "importStatement": "import { Dropdown } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。\n\n API\n\n### Dropdown\n\n> 继承 Popup 的 API，除非特别说明\n\n| 参数              | 说明                                                                                                                                                                                              | 类型             | 默认值                                        |\n| --------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | ------------------------------------------ |\n| children        | 弹层内容                                                                                                                                                                                            | ReactNode      | -                                          |\n| visible         | 弹层当前是否显示                                                                                                                                                                                        | Boolean        | -                                          |\n| defaultVisible  | 弹层默认是否显示                                                                                                                                                                                        | Boolean        | false                                      |\n| onVisibleChange | 弹层显示或隐藏时触发的回调函数<br><br>**签名**:<br>Function(visible: Boolean, type: String, e: Object) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_type_: {String} 触发弹层显示或隐藏的来源<br>_e_: {Object} DOM事件 | Function       | func.noop                                  |\n| trigger         | 触发弹层显示或者隐藏的元素                                                                                                                                                                                   | ReactNode      | -                                          |\n| triggerType     | 触发弹层显示或隐藏的操作类型<br><br>**可选值**:<br>'hover', 'click', 'focus'                                                                                                                                     | Enum           | 'hover'                                    |\n| disabled        | 设置此属性，弹层无法显示或隐藏                                                                                                                                                                                 | Boolean        | false                                      |\n| align           | 弹层相对于触发元素的定位, 详见 Overlay 的定位部分                                                                                                                                                                  | String         | 'tl bl'                                    |\n| offset          | 弹层相对于触发元素定位的微调                                                                                                                                                                                  | Array          | [0, 0]                                     |\n| delay           | 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效                                                                                                                                               | Number         | 200                                        |\n| autoFocus       | 弹层打开时是否让其中的元素自动获取焦点                                                                                                                                                                             | Boolean        | true                                       |\n| hasMask         | 是否显示遮罩                                                                                                                                                                                          | Boolean        | false                                      |\n| cache           | 隐藏时是否保留子节点                                                                                                                                                                                      | Boolean        | false                                      |\n| animation       | 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画                                                                                                                 | Object/Boolean | { in: 'expandInDown', out: 'expandOutUp' } |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Dropdown, Menu } from '@alifd/next';\n\nconst menu = (\n    <Menu>\n        <Menu.Item>Option 1</Menu.Item>\n        <Menu.Item>Option 2</Menu.Item>\n        <Menu.Item>Option 3</Menu.Item>\n        <Menu.Item>Option 4</Menu.Item>\n    </Menu>\n);\n\nReactDOM.render(\n    <Dropdown trigger={<a>Hello dropdown</a>} afterOpen={() => console.log('after open')}>\n        {menu}\n    </Dropdown>, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的用法。</p>\n"
      },
      {
        "title": "从弹层外关闭",
        "order": "2",
        "jsx": "import { Dropdown, Menu, Button } from '@alifd/next';\n\nconst menu = (\n    <Menu>\n        <Menu.Item>Option 1</Menu.Item>\n        <Menu.Item>Option 2</Menu.Item>\n        <Menu.Item>Option 3</Menu.Item>\n        <Menu.Item>Option 4</Menu.Item>\n    </Menu>\n);\n\nclass App extends React.Component {\n    state = {\n        visible: false\n    };\n\n    toggleVisible = () => {\n        this.setState({\n            visible: !this.state.visible\n        });\n    };\n\n    onVisibleChange = visible => {\n        this.setState({\n            visible\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <div style={{ marginBottom: '20px' }}>\n                    <Button onClick={this.toggleVisible} ref=\"button\">Toggle Overlay</Button>\n                </div>\n                <Dropdown trigger={<span>Hello dropdown</span>}\n                    triggerType=\"click\"\n                    visible={this.state.visible}\n                    onVisibleChange={this.onVisibleChange}\n                    safeNode={() => this.refs.button}>\n                    {menu}\n                </Dropdown>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 visible 属性控制弹层显示或者隐藏，需要使用 safeNode 将其控制的元素告诉 dropdown 组件。</p>\n"
      },
      {
        "title": "触发的事件类型",
        "order": "1",
        "jsx": "import { Dropdown, Menu } from '@alifd/next';\n\nconst menu = (\n    <Menu>\n        <Menu.Item>Option 1</Menu.Item>\n        <Menu.Item>Option 2</Menu.Item>\n        <Menu.Item>Option 3</Menu.Item>\n        <Menu.Item>Option 4</Menu.Item>\n    </Menu>\n);\n\nReactDOM.render(\n    <Dropdown trigger={<a>Click me</a>} triggerType=\"click\">\n        {menu}\n    </Dropdown>, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 triggerType 设置触发的事件类型。</p>\n"
      }
    ]
  },
  {
    "name": "Field",
    "category": "Components",
    "title": "表单辅助工具",
    "type": "表单",
    "importStatement": "import { Field } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n涉及到表单数据操作、校验的地方都可以用Field来管理数据。和组件关联后可以自动对表单数据进行回写、读取、校验。\n\n### 使用注意\n\n- 使用Field `init` 过的组件, `value` `onChange` 必须放在 init 的第三个参数, 否则有可能被 init 覆盖。\n- `Form`已经和`Field` 在`数据获取`和`自动校验提示`方面做了深度优化，建议在`Form`中使用`Field`, 请查看 Form demo。\n- initValue 类似组件的 defaultValue 只有在组件第一次render的时候才生效(ajax 异步调用设置 initValue 可能已经错过了第一次render)\n- autoUnmount 默认打开的，如果需要保留会 `自动卸载的组件` 数据请关闭此项\n\n### 基本使用\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);    // 实例创建\n\n    onClick = ()=>{\n        console.log(this.field.getValue('name'));\n    }\n    render() {\n        const init = this.field.init;\n\n        // 注意：initValue只会在组件第一次初始化的时候被赋值，如果你是异步赋值请用setValue\n        return <div>\n            <Input {...init('name',{initValue:'first value'})} />\n            <button onClick={this.onClick>获取数据</button>\n        </div>\n    }\n}\n```\n\n### 更新数据\n#### 事件更新\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    onClick = ()=>{\n        this.field.setValue('name', 'newvalue');    // 赋值会自动触发render\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n            <button onClick={this.onClick}>设置数据</button>\n        </div>\n    }\n}\n```\n\n#### props更新\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    // 在组件挂载之前把数据设置进去(可以用initValue替代这种用法)\n    componentWillMount() {\n        this.field.setValue('name', 'init Name')\n    }\n    // 接收来自props的数据\n    componentWillReceiveProps(nextProps) {\n        this.field.setValue('name', nextProps.name)\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n        </div>\n    }\n}\n```\n\n#### ajax更新\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    onClick = ()=>{\n        Ajax({\n            url:'/demo.json',\n            success:(json)=>{\n                // 回调事件中赋值更新\n                this.field.setValue('name',json.name);\n            }\n        });\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n            <button onClick={this.onClick}>设置数据</button>\n        </div>\n    }\n}\n```\n\n#### onChange更新监控\n两种用法：\n1. 统一管理\n\n```\nclass Demo extends React.Component {\n    field = new Field(this,{\n        onChange:(name, value) => {\n          switch(name) {\n            case 'name1':\n              this.field.setValue('name2','value set by name1');\n              break;\n            case 'name2':\n              this.field.setValue('name1','value set by name2');\n              break;\n          }\n        }\n    });\n    render() {\n        const init = this.field.init;\n\n        return <div>\n          <Input {...init('name1')} />\n          <Input {...init('name2')} />\n        </div>\n    }\n}\n```\n\n2. 各自管理\n\n```\nclass Demo extends React.Component {\n    render() {\n        const init = this.field.init;\n\n        return <div>\n          <Input {...init('name1',{\n              props:{\n                onChange:(v)=>{\n                  this.field.setValue('name2','value set by name1');\n                }\n              }\n            })} />\n          <Input {...init('name2',{\n              props:{\n                onChange:(v)=>{\n                  this.field.setValue('name1','value set by name2');\n                }\n              }\n            })} />\n        </div>\n    }\n}\n```\n\n详细请查看demo演示 `关联控制`\n\n API\n\n### 初始化\n```\nlet myfield = new Field(this [,options]);\n```\n\n| 参数      | 说明                                     | 类型       |  可选值 |默认值 |\n|-----------|------------------------------------------|------------|-------|--------|\n| this | 传入调用class的this | React.Component | 必须设置| |\n| options | 一些事件配置, 详细参数如下 | Object | 非必须| |\n\n`options` 配置项\n\n| 参数      | 说明                                     | 类型        |默认值 |\n|-----------|------------------------------------------|-----------|--------|\n| onChange | 所有组件的change都会到达这里[setValue不会触发该函数] | Function(name,value) | |\n| parseName | 是否翻译`init(name)`中的`name`(getValues会把带`.`的字符串转换成对象) | Boolean | false|\n| forceUpdate | 仅建议PureComponent的组件打开此强制刷新功能，会带来性能问题(500个组件为例：打开的时候render花费700ms, 关闭时候render花费400ms) | Boolean  |false|\n| scrollToFirstError | field.validate的时候滚动到第一个出错的组件, 如果是整数会进行偏移 | Boolean/Number  |true|\n| autoUnmount | 自动删除Unmout元素，如果想保留数据可以设置为false | Boolean  |true|\n| values | 初始化数据 | Object ||\n\n#### API接口\n`new`之后的对象提供的api接口 （例：`myfield.getValues()`）(`set` 开头的api函数不要在render里面操作, 可能会触发死循环)\n\n| 参数      | 说明                                     | 类型       |  可选值 |默认值 |\n|-----------|------------------------------------------|------------|-------|--------|\n| init  | 初始化每个组件，[详细参数如下](#init)）| Function(name:String, option:Object)| | |\n| getValues | 获取一组输入控件的值，如不传入参数，则获取全部组件的值 | Function([names: String[]]) | | |\n| getValue | 获取单个输入控件的值 | Function(name: String) | | |\n| setValues | 设置一组输入控件的值（会触发render，请遵循react时机使用) | Function(obj: Object) | | |\n| setValue | 设置单个输入控件的值 （会触发render，请遵循react时机使用)| Function(name: String, value) | | |\n| validate | 校验并获取一组输入域的值与 Error | Function([names: String[]], [options: Object], callback: Function(errors, values)) | | |\n| getError | 获取单个输入控件的 Error | Function(name: String) | | |\n| getErrors | 获取一组输入控件的 Error | Function([name: String]) | | |\n| setError | 设置单个输入控件的 Error | Function(name: String, errors:String/Array[String]) | | |\n| setErrors | 设置一组输入控件的 Error | Function(obj: Object) | | |\n| reset  | 重置一组输入控件的值、清空校验 | Function([names: String[]])| ||\n| resetToDefault  | 重置一组输入控件的值为默认值 | Function([names: String[]])| ||\n| getState  | 判断校验状态 | Function(name: String)| 'error' 'success' 'loading' '' | '' |\n| getNames  | 获取所有组件的key | Function()|  |  |\n| remove  | 删除某一个或者一组控件的数据，删除后与之相关的validate/value都会被清空 | Function(name: String/String[])|  |  |\n\n\n#### init\n```\ninit(name, options, props)\n```\n\n| 参数      | 说明                                     | 类型       |  可选值 |默认值 |\n|-----------|------------------------------------------|------------|-------|--------|\n| name | 必填输入控件唯一标志 | String | |  |\n| options.valueName | 组件值的属性名称，如 Checkbox 的是 `checked`，Input是 `value` | String | | 'value' |\n| options.initValue | 组件初始值(组件第一次render的时候才会读取，后面再修改此值无效),类似defaultValue | any | | |\n| options.trigger | 触发数据变化的事件名称 | String | | 'onChange' |\n| options.rules | 校验规则 | Array/Object | | | |\n| options.getValueFromEvent | 自定义从`onChange`事件中获取value的方式，一般不需要设置. 详细用法查看demo `自定义数据获取` | Function(value,...args) 参数顺序和组件是完全一致的 | | | |\n| props | 组件自定义的事件可以写在这里  | Object | | | |\n\n返回值\n```\n{id,value,onChange}\n```\n\n#### rules\n\n```\n{\n    rules:[{ required: true }]\n}\n```\n\n多个rule\n\n```\n{\n    rules:[{required:true,trigger:'onBlur'},{pattern:/abcd/,message:'abcd不能缺'},{validator:(rule, value, callback)=>{callback('出错了')}}]\n}\n```\n\n\n\n| 参数      | 说明                                     | 类型       |  可选值 | 使用类型 |\n|-----------|------------------------------------------|------------|-------|--------|\n| required | 不能为空| Boolean | true | `undefined/null/“”/[]` 会触发此规则) |\n| pattern | 校验正则表达式 | 正则 | | |\n| minLength | 字符串最小长度 / 数组最小个数 | Number | | String/Number/Array |\n| maxLength | 字符串最大长度 / 数组最大个数 | Number | | String/Number/Array |\n| length | 字符串精确长度 / 数组精确个数 | Number | | String/Number/Array |\n| min | 最小值 | Number | | String/Number |\n| max | 最大值 | Number | | String/Number |\n| format | 对常用 pattern 的总结\t | String | url、email、tel、number | String |\n| validator | 自定义校验,(校验成功的时候不要忘记执行 `callback()`,否则会校验不返回) | Function(rule,value,callback) | | |\n| trigger | 触发校验的事件名称 | String/Array | onChange/onBlur/... | onChange |\n| message | 出错时候信息 | String | | |\n\n## 自定义组件接入Field标准\n\n- 支持受控模式(value+onChange) `必须`\n    - value 控制组件数据展现\n    - onChange 组件发生变化时候的回调函数（第一个参数可以给到value)\n\n- 一次完整操作抛一次onChange事件 `建议`\n    比如有Process表示进展中的状态，建议增加API `onProcess`；如果有Start表示启动状态，建议增加API `onStart`\n\n- `value={undefined}`的时候清空数据, field 的 reset 函数会给所有组件下发 undefined 数据 `建议`\n\n```\ncomponentWillReceiveProps(nextProps) {\n    if ('value' in nextProps ) {\n        this.setState({\n           value: nextProps.value === undefined? []: nextProps.value   //  设置组件的被清空后的数值\n        })\n    }\n}\n```\n\n## 已知问题\n\n- 为何手动调用`this.field.validate`的时候进不了回调函数？ 答: 是不是自定义了validator方法,确保`callback`在任何分支下都能被执行到。\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "自动卸载",
        "order": "6",
        "jsx": "import { Input, Button, Field } from '@alifd/next';\n\n\nclass Demo extends React.Component {\n    state = {\n        show: true,\n        show2: true,\n    }\n    field = new Field(this);\n    field2 = new Field(this, { autoUnmount: false });\n\n    render() {\n        return (\n            <div>\n                {this.state.show ? < Input {...this.field.init('name', { initValue: 'autoUnmount = true' })} /> : null}\n                <Button\n                    onClick={() => {\n                        console.log('value auto delete', this.field.getValues());\n                    }}\n                    style={{marginLeft: 4}}\n                >\n                    print\n                </Button>\n                <Button\n                    onClick={() => this.setState({ show: false })}\n                    warning\n                    style={{marginLeft: 4}}\n                >\n                    delete\n                </Button>\n                <br />\n                <br />\n                {this.state.show2 ? < Input {...this.field2.init('name2', { initValue: 'autoUnmount = false' })} /> : null}\n                <Button\n                    onClick={() => {\n                        console.log('value always exist', this.field2.getValues());\n                    }}\n                    style={{marginLeft: 4}}\n                >\n                    print\n                </Button>\n                <Button\n                    onClick={() => this.setState({ show2: false })}\n                    warning\n                    style={{marginLeft: 4}}\n                >\n                    delete\n                </Button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>autoUnmount 默认为 true，当组件被 unmount 的时候会自动删除数据. autoUnmount 设置为 false 后，会一直保存数据.</p>\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Input, Button, Field } from '@alifd/next';\n\n\n\nclass App extends React.PureComponent {\n    field = new Field(this, {forceUpdate: true});\n\n    onGetValue() {\n        console.log(this.field.getValue('input'));\n    }\n\n    render() {\n        const { init, setValue, reset } = this.field;\n\n        return (<div className=\"demo\">\n            <Input  {...init('input', {initValue: 'test'})}  />\n            <br/><br/>\n            <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>getValue</Button>\n            <Button type=\"primary\" onClick={() => setValue('input', 'set me by click')}>setValue</Button>\n            <Button onClick={() => reset()}>reset</Button>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<App/>, mountNode);\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n<p><code>getValue</code> <code>setValue</code> <code>reset</code> 的使用</p>\n"
      },
      {
        "title": "自定义组件",
        "order": "10",
        "jsx": "import { Button, Field } from '@alifd/next';\n\n\nclass Custom extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: typeof props.value === 'undefined' ? [] : props.value\n        };\n    }\n\n    // update value\n    componentWillReceiveProps(nextProps) {\n        if ('value' in nextProps) {\n            this.setState({\n                value: typeof nextProps.value === 'undefined' ? [] : nextProps.value\n            });\n        }\n    }\n\n    onAdd = () => {\n        const value = this.state.value.concat([]);\n        value.push('new');\n\n        this.setState({\n            value\n        });\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (<div className=\"custom\">\n            {this.state.value.map((v, i) => {\n                return <Button key={i} >{v}</Button>;\n            })}\n            <Button type=\"primary\" onClick={this.onAdd.bind(this)}>Add ＋ </Button>\n        </div>);\n    }\n}\n\n/* eslint-disable react/no-multi-comp */\nclass App extends React.Component {\n    field = new Field(this, {\n        deepReset: true\n    });\n\n    onGetValue() {\n        console.log(this.field.getValue('custom'));\n    }\n\n    render() {\n        const { init, setValue, reset } = this.field;\n\n        return (<div className=\"demo\">\n            <Custom  {...init('custom', {initValue: ['test']})}  />\n\n            <br/><br/>\n\n            <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>getValue</Button>\n            <Button type=\"primary\" onClick={() => setValue('custom', ['test', 'setValue'])}>setValue</Button>\n            <Button onClick={() => reset()}>reset</Button>\n        </div>);\n    }\n}\nReactDOM.render(<App/>, mountNode);\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n.custom {\n    border: 1px dashed;\n    padding: 4px;\n    display: inline-block;\n}\n.custom span {\n    border: 1px solid green;\n    padding: 0px 5px;\n    height: 24px;\n    display: inline-block;\n    margin-right: 2px;\n}\n",
        "body": "\n<p>自己的组件如何接入Field。</p>\n<p><code>最低标准</code>: 组件支持 <code>onChange</code> 读取组件数据。<code>达到效果</code>：Field 可以 getValue，但是 setValue 无效</p>\n<p><code>完全支持</code>: 组件支持<a href=\"https://facebook.github.io/react/docs/forms.html#controlled-components\">受控</a>， 也就是支持两个api：<code>value</code> <code>onChange</code>. value: 设置组件的数据; onChange: 在组件修改的时候在第一个数暴露数据</p>\n"
      },
      {
        "title": "动态表格",
        "order": "6",
        "jsx": "import { Button, Input, Table, Field } from '@alifd/next';\n\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tableSource: [1, 2, 3].map(i => {\n                return { id: i };\n            })\n        };\n        this.idx = 3;\n\n        this.field = new Field(this, {\n            parseName: true,\n            autoUnmount: true,\n        });\n    }\n\n    getValues = () => {\n        const values = this.field.getValues();\n        console.log(values);\n    }\n\n    add = () => {\n        const { tableSource } = this.state;\n        tableSource.push({\n            id: ++this.idx,\n        });\n\n        this.setState({ tableSource });\n    }\n\n    removeItem(index) {\n        const { tableSource } = this.state;\n        tableSource.splice(index, 1);\n        this.setState({ tableSource });\n    }\n\n    // name.${value} 全局唯一\n    input = (value) => <Input {...this.field.init(`name.${value}`, { initValue: value })} />;\n    delete = (value, index) => <Button warning onClick={this.removeItem.bind(this, index)}>delete</Button>;\n\n    render() {\n        return (\n            <div>\n                <Table dataSource={this.state.tableSource}>\n                    <Table.Column title=\"id\" dataIndex=\"id\" />\n                    <Table.Column title=\"input\" dataIndex=\"id\" cell={this.input} />\n                    <Table.Column title=\"operation\" cell={this.delete} width={100} />\n                </Table>\n                <div style={{ marginTop: 10 }}>\n                    <Button type=\"primary\" onClick={this.getValues}>print</Button>\n                    <Button type=\"normal\" onClick={this.add} style={{ marginLeft: 4 }}>Add</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n<p>Input 的 name 必须全局唯一, 否则可能会出现串行的错误</p>\n"
      },
      {
        "title": "组合使用",
        "order": "8",
        "jsx": "import { Button, Checkbox, Input, Radio, Select, Range, DatePicker, TimePicker, Field } from '@alifd/next';\n\n\nconst CheckboxGroup = Checkbox.Group;\nconst RadioGroup = Radio.Group;\n\nconst list = [\n    {\n        value: 'apple',\n        label: 'apple'\n    }, {\n        value: 'pear',\n        label: 'pear'\n    }, {\n        value: 'orange',\n        label: 'orange'\n    }\n];\nconst layout = {\n    marginBottom: 10,\n    width: 400\n};\n\nclass App extends React.Component {\n    field = new Field(this, {\n        deepReset: true\n    });\n\n    render() {\n        const {init, getValue} = this.field;\n\n        return (<div className=\"demo\">\n            <div style={{marginBottom: 10}}>\n                <RadioGroup {...init('radiogroup', {initValue: 'a'})} >\n                    <Radio value=\"a\">A</Radio>\n                    <Radio value=\"b\">B</Radio>\n                    <Radio value=\"c\">C</Radio>\n                    <Radio value=\"d\">D</Radio>\n                </RadioGroup>\n            </div>\n\n            {\n                getValue('radiogroup') !== 'd' ?\n                    <Select {...init('name', {initValue: 'lucy'})} style={layout}>\n                        <Select.Option value=\"jack\">jack</Select.Option>\n                        <Select.Option value=\"lucy\">lucy</Select.Option>\n                        <Select.Option value=\"disabled\" disabled>disabled</Select.Option>\n                        <Select.Option value=\"hugohua\">hugohua</Select.Option>\n                    </Select> :\n                    <Input {...init('name', {initValue: 'frankqian'})} />\n            }\n            <br/>\n\n            <Range style={{...layout, marginTop: 30}} slider={'double'} scales={10}\n                marks={10}  {...init('range', {initValue: [20, 40]})}/>\n\n            <div style={{marginBottom: 10}}>\n                <CheckboxGroup dataSource={list}  {...init('checkboxgroup', {initValue: ['apple']})} />\n            </div>\n            <div style={{marginBottom: 10}}>\n                <DatePicker {...init('datepicker')}/>\n            </div>\n            <div style={{marginBottom: 10}}>\n                <DatePicker.RangePicker {...init('rangepicker')}/>\n            </div>\n            <div style={{marginBottom: 10}}>\n                <TimePicker {...init('timepicker')}/>\n            </div>\n            <Button type=\"primary\" onClick={() => {\n                console.log(this.field.getValues());\n            }}>getValues</Button>\n            <Button onClick={() => {\n                this.field.setValues({\n                    name: 'hugohua',\n                    range: [30, 50],\n                    checkboxgroup: ['orange'],\n                    radiogroup: 'd'\n                });\n            }}>setValues</Button>\n            <Button onClick={() => {\n                this.field.reset();\n            }}>reset</Button>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<App/>, mountNode);\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n<p>多组件混合使用</p>\n"
      },
      {
        "title": "自定义返回值",
        "order": "2",
        "jsx": "import { Button, Input, Field } from '@alifd/next';\n\n\nclass App extends React.Component {\n\n    field = new Field(this);\n\n    normFile(list) {\n        if (Array.isArray(list)) {\n            return list;\n        }\n        return list && list.fileList;\n    }\n\n    normDate(date, strdate) {\n        console.log('normDate:', date, strdate);\n        return strdate;\n    }\n\n    render() {\n        const init = this.field.init;\n\n        return (<div>\n            <Input {...init('name', { getValueFromEvent: (value) => {\n                if (value.match(/##/)) {\n                    return value;\n                } else {\n                    return `## title-${value}`;\n                }\n            }})} />\n            <Button type=\"primary\" onClick={() => {\n                console.log(this.field.getValues());\n            }}>getValues</Button>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过 <code>getValueFromEvent</code> 自定义从组件的 <code>Event</code> 获取 <code>value</code> 的方式</p>\n"
      },
      {
        "title": "关联控制",
        "order": "1",
        "jsx": "import { Input, Select, Range, Field } from '@alifd/next';\n\n\n\nclass App extends React.Component {\n    field = new Field(this, {\n        onChange: (name, value) => {\n            console.log(this.field.getValues());\n\n            switch (name) {\n                case 'input':\n                    this.field.setValue('sync', `change to: ${value}`);\n                    break;\n                case 'select':\n                    this.field.setValue('sync', `${value} is coming`);\n                    break;\n                case 'range':\n                    this.field.setValue('sync', ` (${value.join(',')}) ready`);\n                    break;\n            }\n        }\n    });\n\n    render() {\n        const {init, getValue} = this.field;\n        const layout = {\n            marginBottom: 10,\n            width: 400\n        };\n\n        return (<div>\n            <Input placeholder=\"controlled by onChange\" {...init('input')} style={layout}/><br/>\n            <Input placeholder=\"under control\" {...init('input')} style={layout}/><br/>\n\n            <Select style={layout} {...init('select', {initValue: 'lucy'})}>\n                <Select.Option value=\"jack\">jack</Select.Option>\n                <Select.Option value=\"lucy\">lucy</Select.Option>\n                <Select.Option value=\"disabled\" disabled>disabled</Select.Option>\n                <Select.Option value=\"hugo\">hugo</Select.Option>\n            </Select><br/>\n\n            {\n                getValue('select') !== 'hugo' ?\n                    <Range\n                        style={{...layout, marginTop: 30}}\n                        slider={'double'} scales={10} marks={10}\n                        {...init('range', {initValue: [20, 40], trigger: 'onProcess'})}\n                    /> : null\n            }\n            <br/>\n\n            <hr style={{marginBottom: 10}}/>\n            <Input placeholder=\"everyone can control me\" {...init('sync')} style={layout}/><br/>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>组件之间的关联控制. <code>onChange</code> 统一管理。</p>\n"
      },
      {
        "title": "redux 中使用",
        "order": "5",
        "jsx": "import { Input, Button, Field } from '@alifd/next';\n\n\nimport { combineReducers, createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\n\nfunction formReducer(state = {email: 'frankqian@qq.com'}, action) {\n    switch (action.type) {\n        case 'save_fields':\n            return {\n                ...state,\n                ...action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nclass Demo extends React.Component {\n    componentWillReceiveProps(nextProps) {\n        this.field.setValues({\n            email: nextProps.email,\n            newlen: nextProps.email.length\n        });\n    }\n\n    field = new Field(this, {\n        onChange: (name, value) => {\n            console.log('onChange', name, value);\n            this.field.setValue('newlen', value.length);\n            this.props.dispatch({\n                type: 'save_fields',\n                payload: {\n                    [name]: value\n                }\n            });\n        }\n    });\n\n    setEmail() {\n        this.props.dispatch({\n            type: 'save_fields',\n            payload: {\n                email: 'qq@gmail.com'\n            },\n        });\n    }\n\n\n    render() {\n        const init = this.field.init;\n\n        const newLen = init('newlen', { initValue: this.props.email.length });\n\n        return (<div>\n            <Input {...init('email', { initValue: this.props.email }, {\n                rules: [\n                    {required: true, type: 'email', message: 'at least 5 chars'},\n                ]\n            })} />\n            now length is:{newLen.value}\n            <p>email: {this.props.email}</p>\n            <Button onClick={this.setEmail.bind(this)}>set</Button>\n        </div>);\n    }\n}\n\n\nconst ReduxDemo = connect((state) => {\n    return {\n        email: state.formReducer.email,\n    };\n})(Demo);\n\n\nconst store = createStore(combineReducers({\n    formReducer,\n}));\n\nReactDOM.render((<Provider store={store}>\n    <div>\n        <ReduxDemo />\n    </div>\n</Provider>), mountNode);\n",
        "css": "",
        "body": "\n<p>在 redux 中使用, 在 <code>componentWillReceiveProps</code> 更新</p>\n"
      },
      {
        "title": "自定义错误",
        "order": "3",
        "jsx": "import { Input, Button, Field } from '@alifd/next';\n\n\n\nclass App extends React.Component {\n    field = new Field(this);\n\n    render() {\n        const { init, getError, setError, setErrors } = this.field;\n        return (<div className=\"demo\">\n            <Input  {...init('input', {\n                rules: [{\n                    required: true,\n                    pattern: /hello/,\n                    message: 'must be hello'\n                }]\n            })}  /><br/>\n            <span style={{color: 'red'}}>{getError('input')}</span>\n\n            <br/>\n            <Button onClick={() => {\n                setError('input', 'set error 1');\n            }}>setError</Button>\n\n            <Button onClick={() => {\n                setErrors({input: 'set error 2'});\n            }}>setErrors</Button>\n\n            <Button onClick={() => {\n                setErrors({input: ''});\n            }}>clear</Button>\n\n            <br/><br/>\n            <Input  {...init('input2')}  /><br/>\n            <span style={{color: 'red'}}>{getError('input2')}</span><br/>\n\n            <Button onClick={() => {\n                setError('input2', 'errors will be removed by onChange');\n            }}>setError</Button>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<App/>, mountNode);\n\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n<p>自己控制组件的errors</p>\n"
      },
      {
        "title": "结构化解析",
        "order": "11",
        "jsx": "import { Input, Button, Field } from '@alifd/next';\n\n\n\nclass App extends React.Component {\n    field = new Field(this, {\n        parseName: true\n    });\n\n    onGetValue() {\n        console.log(this.field.getValues());\n    }\n\n    onSetValue() {\n        this.field.setValues({\n            obj: {\n                b: 'b',\n                c: 'c'\n            },\n            arr: ['first', 'second']\n        });\n    }\n\n    render() {\n        const { init, reset } = this.field;\n\n        return (<div className=\"demo\">\n            <h3>Object transfer</h3>\n            obj.b: <Input  {...init('obj.b', {initValue: 'test1'})}  /> &nbsp;\n            obj.c: <Input  {...init('obj.c', {initValue: 'test2'})}  />\n\n            <br/>\n\n            <h3>Array transfer</h3>\n            arr.0: <Input  {...init('arr.0', {initValue: '0'})}  /> &nbsp;\n            arr.1: <Input  {...init('arr.1', {initValue: '1'})}  />\n            <br/><br/>\n\n            result:\n            <pre>{JSON.stringify(this.field.getValues(), null, 2)}</pre>\n\n            <br/><br/>\n\n            <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>getValues</Button>\n            <Button onClick={this.onSetValue.bind(this)}>setValues</Button>\n            <Button onClick={() => reset()}>reset</Button>\n        </div>);\n    }\n}\n\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n<p>把 <code>init(&#39;obj.b&#39;)</code> 的数据转换成 <code>obj={obj:{b:&#39;value&#39;}}</code>；</p>\n<p>把 <code>init(&#39;arr.0&#39;)</code> 的数据转换成 <code>obj={arr:[&#39;&#39;]}</code>；</p>\n"
      },
      {
        "title": "校验",
        "order": "4",
        "jsx": "import { Input, Button, Checkbox, Field } from '@alifd/next';\n\n\n\nconst CheckboxGroup = Checkbox.Group;\n\nconst list = [\n    {\n        value: 'apple',\n        label: 'apple'\n    }, {\n        value: 'pear',\n        label: 'pear'\n    }, {\n        value: 'orange',\n        label: 'orange'\n    }\n];\n\nclass App extends React.Component {\n    state = {\n        checkboxStatus: true\n    }\n    field = new Field(this, {scrollToFirstError: -10});\n\n    isChecked(rule, value, callback) {\n        if (!value) {\n            callback('consent agreement not checked ');\n        } else {\n            callback();\n        }\n    }\n\n    userName(rule, value, callback) {\n        if (value === 'frank') {\n            setTimeout(() => callback('name existed'), 200);\n        } else {\n            setTimeout(() => callback(), 200);\n        }\n    }\n\n    render() {\n        const init = this.field.init;\n\n        return (<div className=\"demo\">\n            <Input {...init('input', {initValue: 'delete all', rules: {required: true}})} />\n            {this.field.getError('input') ?\n                <span style={{color: 'red'}}>{this.field.getError('input').join(',')}</span> : ''}\n\n            <br/>\n            <br/>\n\n            <Input placeholder=\"try onBlur\" {...init('input1', {\n                rules: [{\n                    required: true,\n                    message: 'can not be empty',\n                    trigger: ['onBlur', 'onChange']\n                }]\n            })} />\n            {this.field.getError('input1') ?\n                <span style={{color: 'red'}}>{this.field.getError('input1').join(',')}</span> : ''}\n\n            <br/>\n            <br/>\n\n            <Input defaultValue=\"\" placeholder=\"try frank\" {...init('username', {\n                rules: [{\n                    validator: this.userName,\n                    trigger: ['onBlur', 'onChange']\n                }]\n            })} />\n            {this.field.getState('username') === 'loading' ? 'validating...' : ''}\n            {this.field.getError('username') ?\n                <span style={{color: 'red'}}>{this.field.getError('username').join(',')}</span> : ''}\n\n            <br/>\n            <br/>\n\n            agreement:\n            <Checkbox  {...init('checkbox', {\n                valueName: 'checked',\n                rules: [{validator: this.isChecked}]\n            })} />\n            {this.field.getError('checkbox') ?\n                <span style={{color: 'red'}}>{this.field.getError('checkbox').join(',')}</span> : ''}\n\n            <br/>\n            <br/>\n\n            <Input multiple maxLength={10} defaultValue=\">3 and <10\" {...init('textarea', {\n                rules: [{\n                    required: true,\n                    min: 3,\n                    max: 10\n                }]\n            })} />\n            {this.field.getError('textarea') ?\n                <span style={{color: 'red'}}>{this.field.getError('textarea').join(',')}</span> : ''}\n\n            <br/>\n            <br/>\n\n            {this.state.checkboxStatus ? <div>\n                Array validate：\n                <CheckboxGroup dataSource={list}  {...init('checkboxgroup', {\n                    rules: [{\n                        required: true,\n                        type: 'array',\n                        message: 'choose one please'\n                    }]\n                })} style={{marginBottom: 10}}/>\n                {this.field.getError('checkboxgroup') ?\n                    <span style={{color: 'red'}}>{this.field.getError('checkboxgroup').join(',')}</span> : ''}\n            </div> : null}\n\n            <br/>\n            <br/>\n\n            <Button type=\"primary\" onClick={() => {\n                this.field.validate((errors, values) => {\n                    console.log(errors, values);\n                });\n            }}>validate</Button>\n            <Button onClick={() => {\n                this.field.reset();\n            }}>reset</Button>\n\n            <Button onClick={() => {\n                if (this.state.checkboxStatus) {\n                    this.setState({checkboxStatus: false});\n                    this.field.remove('checkboxgroup');\n                } else {\n                    this.setState({checkboxStatus: true});\n                }\n\n            }}>{this.state.checkboxStatus ? 'delete' : 'restore'}</Button>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n<p>校验的错误信息需要用<code>getError</code>获取</p>\n<p><code>注意</code>：Form 和 Field 做了深度结合，在 Form 中使用Field，错误信息不需<code>getError</code>获取会自动展现。</p>\n"
      },
      {
        "title": "自定义受控字段",
        "order": "9",
        "jsx": "import { Button, Checkbox, Radio, Switch, Field } from '@alifd/next';\n\n\n\nclass App extends React.Component {\n\n    field = new Field(this);\n\n    render() {\n        const init = this.field.init;\n\n        return (<div className=\"demo\">\n            <Radio {...init('radio', {initValue: false, valueName: 'checked'})} > checked</Radio>\n            <br/>\n            <Checkbox {...init('checkbox', {valueName: 'checked', initValue: true})} >\n                defaultChecked\n            </Checkbox>\n            <br/>\n            <Switch {...init('switch', {valueName: 'checked', initValue: false})}\n                style={{marginTop: 10, marginBottom: 10}}/>\n            <br/>\n\n            <Button type=\"primary\" onClick={() => {\n                console.log(this.field.getValues());\n            }}>getValues</Button>\n            <Button onClick={() => {\n                this.field.setValues({\n                    radio: true,\n                    switch: true,\n                    checkbox: false\n                });\n            }}> setValues </Button>\n            <Button onClick={() => {\n                this.field.reset();\n            }}>reset</Button>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n<p>valueName 的默认值为 value，如果为其他需要用 valueName 指定</p>\n"
      }
    ]
  },
  {
    "name": "Form",
    "category": "Components",
    "title": "表单",
    "type": "表单",
    "importStatement": "import { Form } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n表单布局、校验、数据提交操作时用到。\n\n### 注意事项\n\n-   组件不要使用关键字 `nodeName` 作为 name、id\n-   Form 默认使用 `size=medium`, 并且会控制 FormItem 内所有组件的size。 如果想修改组件的size `<FormItem size=\"small\" >`\n-   在垂直表单中如果文字（一般 `<p>` 标签）或者组件向上偏离，可以通过 `className=\"next-form-text-align\"` 辅助调整\n-   必须是被 `<FormItem>`直接包裹的组件才能展示校验错误提示。如果界面不展示错误信息，请检查是否有多个层级。 比如 `<FormItem><div><Input/></div></FormItem>` 是无法展示校验信息的。\n\n API\n\n### Form\n\n| 参数             | 说明                                                                                                                                   | 类型       | 默认值                                                    |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------ | -------- | ------------------------------------------------------ |\n| inline         | 内联表单                                                                                                                                 | Boolean  | -                                                      |\n| size           | 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。<br><br>**可选值**:<br>'large'(大)<br>'medium'(中)<br>'small'(小) | Enum     | 'medium'                                               |\n| labelAlign     | 标签的位置<br><br>**可选值**:<br>'top'(上)<br>'left'(左)<br>'inset'(内)                                                                         | Enum     | 'left'                                                 |\n| labelTextAlign | 标签的左右对齐方式<br><br>**可选值**:<br>'left'(左)<br>'right'(右)                                                                                 | Enum     | -                                                      |\n| field          | 经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项                                                                                  | any      | -                                                      |\n| saveField      | 保存 Form 自动生成的 field 对象<br><br>**签名**:<br>Function() => void                                                                          | Function | func.noop                                              |\n| labelCol       | 控制第一级 Item 的 labelCol                                                                                                                | Object   | -                                                      |\n| wrapperCol     | 控制第一级 Item 的 wrapperCol                                                                                                              | Object   | -                                                      |\n| onSubmit       | form内有 `htmlType=\"submit\"` 的元素的时候会触发<br><br>**签名**:<br>Function() => void                                                            | Function | function preventDefault(e) {     e.preventDefault(); } |\n| children       | 子元素                                                                                                                                  | any      | -                                                      |\n| value          | 表单数值                                                                                                                                 | Object   | -                                                      |\n| onChange       | 表单变化回调<br><br>**签名**:<br>Function() => void                                                                                          | Function | func.noop                                              |\n| component      | 设置标签类型                                                                                                                               | String   | 'form'                                                 |\n\n### Form.Item\n\n> 手动传递了 wrapCol labelCol 会使用 Grid 辅助布局; labelAlign='top' 会强制禁用 Grid\n\n| 参数                  | 说明                                                                                                                      | 类型                 | 默认值   |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------- | ------------------ | ----- |\n| label               | label 标签的文本                                                                                                             | ReactNode          | -     |\n| size                | 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。<br><br>**可选值**:<br>'large', 'small', 'medium' | Enum               | -     |\n| labelCol            | label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效                                             | Object             | -     |\n| wrapperCol          | 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol                                                                                       | Object             | -     |\n| help                | 自定义提示信息，如不设置，则会根据校验规则自动生成.                                                                                              | ReactNode          | -     |\n| validateState       | 校验状态，如不设置，则会根据校验规则自动生成<br><br>**可选值**:<br>'error'<br>'success'(成功)<br>'loading'(失败)                                     | Enum               | -     |\n| hasFeedback         | 配合 validateState 属性使用，是否展示 success/loading 的校验状态图标, 目前只有Input支持                                                         | Boolean            | false |\n| children            | node 或者 function(values)                                                                                                | ReactNode/Function | -     |\n| extra               | 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面                                                                    | ReactNode          | -     |\n| labelAlign          | 标签的位置<br><br>**可选值**:<br>'top'(上)<br>'left'(左)<br>'inset'(内)                                                            | Enum               | -     |\n| labelTextAlign      | 标签的左右对齐方式<br><br>**可选值**:<br>'left'(左)<br>'right'(右)                                                                    | Enum               | -     |\n| required            | [表单校验] 不能为空                                                                                                             | Boolean            | -     |\n| asterisk            | required 的星号是否显示                                                                                                        | Boolean            | -     |\n| requiredMessage     | required 自定义错误信息                                                                                                        | String             | -     |\n| requiredTrigger     | required 自定义触发方式                                                                                                        | String/Array       | -     |\n| min                 | [表单校验] 最小值                                                                                                              | Number             | -     |\n| max                 | [表单校验] 最大值                                                                                                              | Number             | -     |\n| minmaxMessage       | min/max 自定义错误信息                                                                                                         | String             | -     |\n| minmaxTrigger       | min/max 自定义触发方式                                                                                                         | String/Array       | -     |\n| minLength           | [表单校验] 字符串最小长度 / 数组最小个数                                                                                                 | Number             | -     |\n| maxLength           | [表单校验] 字符串最大长度 / 数组最大个数                                                                                                 | Number             | -     |\n| minmaxLengthMessage | minLength/maxLength 自定义错误信息                                                                                             | String             | -     |\n| minmaxLengthTrigger | minLength/maxLength 自定义触发方式                                                                                             | String/Array       | -     |\n| length              | [表单校验] 字符串精确长度 / 数组精确个数                                                                                                 | Number             | -     |\n| lengthMessage       | length 自定义错误信息                                                                                                          | String             | -     |\n| lengthTrigger       | length 自定义触发方式                                                                                                          | String/Array       | -     |\n| pattern             | 正则校验                                                                                                                    | any                | -     |\n| patternMessage      | pattern 自定义错误信息                                                                                                         | String             | -     |\n| patternTrigger      | pattern 自定义触发方式                                                                                                         | String/Array       | -     |\n| format              | [表单校验] 四种常用的 pattern<br><br>**可选值**:<br>'number', 'email', 'url', 'tel'                                                 | Enum               | -     |\n| formatMessage       | format 自定义错误信息                                                                                                          | String             | -     |\n| formatTrigger       | format 自定义触发方式                                                                                                          | String/Array       | -     |\n| validator           | [表单校验] 自定义校验函数<br><br>**签名**:<br>Function() => void                                                                     | Function           | -     |\n| validatorTrigger    | validator 自定义触发方式                                                                                                       | String/Array       | -     |\n\n### Form.Submit\n\n> 继承 Button API\n\n| 参数       | 说明                                                                                                                                                                           | 类型            | 默认值       |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | --------- |\n| onClick  | 点击提交后触发<br><br>**签名**:<br>Function(value: Object, errors: Object, field: class) => void<br>**参数**:<br>_value_: {Object} 数据<br>_errors_: {Object} 错误数据<br>_field_: {class} 实例 | Function      | func.noop |\n| validate | 是否校验/需要校验的 name 数组                                                                                                                                                           | Boolean/Array | -         |\n| field    | 自定义 field (在 Form 内不需要设置)                                                                                                                                                    | Object        | -         |\n\n### Form.Reset\n\n> 继承 Button API\n\n| 参数        | 说明                                           | 类型       | 默认值       |\n| --------- | -------------------------------------------- | -------- | --------- |\n| names     | 自定义重置的字段                                     | Array    | -         |\n| onClick   | 点击提交后触发<br><br>**签名**:<br>Function() => void | Function | func.noop |\n| toDefault | 返回默认值                                        | Boolean  | -         |\n| field     | 自定义 field (在 Form 内不需要设置)                    | Object   | -         |\n\n### Form.Error\n\n> 自定义错误展示\n\n| 参数       | 说明                                           | 类型                 | 默认值 |\n| -------- | -------------------------------------------- | ------------------ | --- |\n| name     | 表单名                                          | String/Array       | -   |\n| field    | 自定义 field (在 Form 内不需要设置)                    | Object             | -   |\n| children | 自定义错误渲染, 可以是 node 或者 function(errors, state) | ReactNode/Function | -   |\n\n## 关于校验\n\n-   建议一个FormItem放一个组件, 方便错误提示跟随组件展示\n-   组件必须是FormItem的第一层子元素\n-   详细校验请查看 `Field` 组件文档的 rules\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Form, Input, Checkbox } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n    labelCol: {\n        fixedSpan: 10\n    },\n    wrapperCol: {\n        span: 14\n    }\n};\n\nclass Demo extends React.Component {\n\n    handleSubmit = (values) => {\n        console.log('Get form value:', values);\n    };\n\n    render() {\n        return (\n            <Form style={{width: '60%'}} {...formItemLayout} >\n                <FormItem label=\"userName:\">\n                    <p>Fixed Name</p>\n                </FormItem>\n                <FormItem label=\"password:\">\n                    <Input htmlType=\"password\" name=\"pass\" placeholder=\"Please Enter Password\"/>\n                </FormItem>\n                <FormItem label=\"Note:\" help=\"something\">\n                    <Input.TextArea placeholder=\"something\" name=\"remark\" />\n                </FormItem>\n                <FormItem label=\"Agreement:\">\n                    <Checkbox name=\"agreement\" defaultChecked>Agree</Checkbox>\n                </FormItem>\n                <FormItem label=\" \">\n                    <Form.Submit onClick={this.handleSubmit}>Confirm</Form.Submit>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>拉伸浏览器的时候label宽度不变。</p>\n<p>如果组件比较靠上，可以用 <code>className=&quot;next-form-text-align&quot;</code> 做调整</p>\n"
      },
      {
        "title": "自定义布局",
        "order": "6",
        "jsx": "import { Form, Input, Switch, Grid, Button, Icon, Balloon } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst {Row, Col} = Grid;\n\nconst style = {\n    padding: '20px',\n    background: '#F7F8FA',\n    margin: '20px',\n};\nconst formItemLayout = {\n    labelCol: {fixedSpan: 4},\n};\nconst label = (<span>\nname：<Balloon type=\"primary\" trigger={<Icon type=\"prompt\" size=\"small\" />} closable={false}>blablablablablablablabla</Balloon>\n</span>);\n\nclass Demo extends React.Component {\n    state = {\n        labelAlign: 'top'\n    }\n    handleChange = (v) => {\n        this.setState({\n            labelAlign: v ? 'left' : 'top'\n        });\n    }\n    render() {\n        const labelAlign = this.state.labelAlign;\n\n        return (\n            <div>\n                <h3>Label Position</h3>\n                <Switch checkedChildren=\"left\" unCheckedChildren=\"top\" checked={this.state.labelAlign === 'left'} onChange={this.handleChange} />\n\n                <Form  style={style}>\n                    <Row gutter=\"4\">\n                        <Col>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label={label}\n                                required\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Long search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem  {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Long search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem  {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem  {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem  {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Long search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                            <FormItem  {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col style={{ textAlign: 'right' }}>\n                            <Button type=\"primary\" style={{ marginRight: '5px' }}>Search</Button>\n                            <Button >Clear All</Button>\n                        </Col>\n                    </Row>\n                </Form>\n\n\n                <Form style={style}>\n                    <Row gutter=\"4\">\n                        <Col>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label={label}\n                                required\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem {...formItemLayout}  labelAlign={labelAlign}\n                                label=\"Long search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem {...formItemLayout} labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem {...formItemLayout}  labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                        <Col>\n                            <FormItem {...formItemLayout}  labelAlign={labelAlign}\n                                label=\"Search name:\"\n                            >\n                                <Input placeholder=\"Enter a search name:\"/>\n                            </FormItem>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col style={{ textAlign: 'right' }}>\n                            <Button type=\"primary\" style={{ marginRight: '5px' }}>Search</Button>\n                            <Button >Clear All</Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>标签位置：上、左</p>\n<p>配合 <code>Row</code> <code>Col</code> 控制表单内元素布局 (注意：FormItem非Form直接子元素需要不能直接直接在Form上设置布局)</p>\n"
      },
      {
        "title": "复杂功能(Field)",
        "order": "10",
        "jsx": "import { Form, Input, Radio, Field, Button } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nconst formItemLayout = {\n    labelCol: {\n        span: 6\n    },\n    wrapperCol: {\n        span: 14\n    }\n};\n\nclass BasicDemo extends React.Component {\n    field = new Field(this);\n\n    userExists(rule, value) {\n        return new Promise((resolve, reject) => {\n            if (!value) {\n                resolve();\n            } else {\n                setTimeout(() => {\n                    if (value === 'frank') {\n                        reject([new Error('Sorry, this username is already occupied.')]);\n                    } else {\n                        resolve();\n                    }\n                }, 500);\n            }\n        });\n    }\n\n    checkPass(rule, value, callback) {\n        const { validate } = this.field;\n        if (value) {\n            validate(['rePasswd']);\n        }\n        callback();\n    }\n\n    checkPass2(rule, value, callback) {\n        const { getValue } = this.field;\n        if (value && value !== getValue('passwd')) {\n            callback('Inconsistent password input twice!');\n        } else {\n            callback();\n        }\n    }\n\n    validate = () => {\n        this.field.validate(['sex']);\n    }\n\n    render() {\n        const {getState, getValue, getError} = this.field;\n\n        return (\n            <Form {...formItemLayout} field={this.field}>\n                <FormItem\n                    label=\"Username:\"\n                    hasFeedback\n                    required\n                    validator={this.userExists.bind(this)}\n                    help={getState('username') === 'loading' ? 'Checking ...' : getError('username')}\n                >\n                    <Input placeholder=\"Input frank\" name=\"username\" />\n                    <p>Hello {getValue('username')}</p>\n                </FormItem>\n\n                <FormItem\n                    label=\"Password:\"\n                    hasFeedback\n                    required\n                    requiredMessage=\"Please enter password\"\n                    validator={this.checkPass.bind(this)}\n                >\n                    <Input htmlType=\"password\" name=\"passwd\" />\n                </FormItem>\n\n                <FormItem\n                    label=\"Check your password:\"\n                    hasFeedback\n                    required\n                    requiredMessage=\"Enter your password again\"\n                    validator={this.checkPass2.bind(this)}\n                >\n                    <Input htmlType=\"password\" placeholder=\"Enter the same password twice\" name=\"rePasswd\" />\n                </FormItem>\n\n                <FormItem\n                    label=\"Gender:\"\n                    hasFeedback\n                    required\n                    requiredMessage=\"Please select your gender\"\n                >\n                    <RadioGroup name=\"sex\" >\n                        <Radio value=\"male\">Male</Radio>\n                        <Radio value=\"female\">Female</Radio>\n                    </RadioGroup>\n                </FormItem>\n\n                <FormItem wrapperCol={{ offset: 6 }} >\n                    <Button onClick={this.validate}>Validate by Field</Button>\n                    <Form.Submit validate type=\"primary\" onClick={(v, e) => console.log(v, e)} style={{margin: '0 10px'}}>Submit</Form.Submit>\n                    <Form.Reset >Reset</Form.Reset>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\n\nReactDOM.render(<BasicDemo />, mountNode);\n",
        "css": "",
        "body": "\n<p>配合 <code>Field</code> 可以实现较复杂功能</p>\n"
      },
      {
        "title": "水平",
        "order": "1",
        "jsx": "import { Form, Input } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nfunction handleSubmit(v) {\n    console.log(v);\n}\n\nReactDOM.render(<div>\n    <Form inline>\n        <FormItem label=\"Username:\">\n            <FormItem  >\n                <Input name=\"first\" style={{width: 80}} placeholder=\"first\"/>\n            </FormItem>\n            <FormItem  >\n                <Input name=\"second\" style={{width: 80}} placeholder=\"second\"/>\n            </FormItem>\n        </FormItem>\n        <FormItem label=\"Password:\" required hasFeedback={false}>\n            <Input htmlType=\"password\" name=\"pass\" placeholder=\"Please enter your password!\"/>\n        </FormItem>\n\n        <FormItem label=\" \">\n            <Form.Submit onClick={handleSubmit}>Submit</Form.Submit>\n        </FormItem>\n    </Form>\n\n</div>, mountNode);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "标签内嵌",
        "order": "4",
        "jsx": "import { Form, Input, Select } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nconst formItemLayout = {\n    labelCol: {fixedSpan: 4},\n    wrapperCol: {span: 20},\n};\n\nReactDOM.render(<div>\n\n    <Form {...formItemLayout} labelAlign=\"inset\" style={{maxWidth: '500px'}}>\n        <FormItem  label=\"User Name:\">\n            <Input placeholder=\"Please enter your name\" id=\"userName\" name=\"userName\"/>\n        </FormItem>\n        <FormItem  label=\"Password:\" validateState=\"error\">\n            <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"password\" name=\"password\"/>\n        </FormItem>\n\n        <FormItem  label=\"Size：\">\n            <Select style={{width: '100%'}}>\n                <Option value=\"small\">small</Option>\n                <Option value=\"medium\">medium</Option>\n                <Option value=\"large\">large</Option>\n            </Select>\n        </FormItem>\n    </Form>\n\n    <br/><br/>\n\n    <Form labelAlign=\"inset\" inline>\n        <FormItem label=\"User Name:\">\n            <Input placeholder=\"Enter your name\" id=\"userName2\" name=\"userName2\"/>\n        </FormItem>\n        <FormItem label=\"Password:\" validateState=\"error\" help=\"Password is required!\">\n            <Input htmlType=\"password\" placeholder=\"Enter your password\" id=\"password2\" name=\"password2\"/>\n        </FormItem>\n\n        <FormItem label=\"Size:\">\n            <Select style={{width: 150}}>\n                <Option value=\"small\">small</Option>\n                <Option value=\"medium\">medium</Option>\n                <Option value=\"large\">large</Option>\n            </Select>\n        </FormItem>\n    </Form>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过设置<code>labelAlign=&quot;inset&quot;</code> (只适用于Input、Select组件，其他组件不适用)</p>\n"
      },
      {
        "title": "表单组合",
        "order": "11",
        "jsx": "import { Form, Input, Button, Checkbox, Radio, Select, Range, Balloon, DatePicker, TimePicker, NumberPicker, Field, Switch, Upload, Grid } from '@alifd/next';\n\n\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst RangePicker = DatePicker.RangePicker;\nconst {Row, Col} = Grid;\n\nconst formItemLayout = {\n    labelCol: {span: 6},\n    wrapperCol: {span: 14},\n};\n\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    handleSubmit(value) {\n        console.log('Form values：', value);\n    }\n\n    render() {\n        const init = this.field.init;\n\n        return (\n            <Form {...formItemLayout} field={this.field}>\n                <FormItem label=\"I'm the title：\">\n                    <p className=\"next-form-text-align\">The quick brown fox jumps over the lazy dog.</p>\n                    <p ><a href=\"#\">Link</a></p>\n                </FormItem>\n\n                <FormItem label=\"Password:\">\n                    <Balloon trigger={<Input htmlType=\"password\" {...init('pass')} />} align=\"r\" closable={false} triggerType=\"hover\">\n                        input password\n                    </Balloon>\n                </FormItem>\n\n                <FormItem label=\"NumberPicker:\">\n                    <NumberPicker min={1} max={10} name=\"numberPicker\" defaultValue={3} />\n                    <span>Something in here</span>\n                </FormItem>\n\n                <FormItem\n                    label=\"Switch:\"\n                    required>\n                    <Switch name=\"switch\" defaultChecked />\n                </FormItem>\n\n                <FormItem label=\"Range:\" required>\n                    <Range defaultValue={30} scales={[0, 100]} marks={[0, 100]} name=\"range\" />\n                </FormItem>\n\n                <FormItem  label=\"Select:\" required>\n                    <Select style={{width: 200}} name=\"select\">\n                        <Option value=\"jack\">jack</Option>\n                        <Option value=\"lucy\">lucy</Option>\n                        <Option value=\"disabled\" disabled>disabled</Option>\n                        <Option value=\"hugohua\">hugohua</Option>\n                    </Select>\n                </FormItem>\n\n                <FormItem\n                    label=\"DatePicker:\"\n                    labelCol={{span: 6}}\n                    required>\n                    <Row>\n                        <FormItem style={{marginRight: 10, marginBottom: 0}}><DatePicker name=\"startDate\"/></FormItem>\n                        <FormItem style={{marginBottom: 0}}><DatePicker name=\"endDate\" /></FormItem>\n                    </Row>\n                </FormItem>\n\n                <FormItem\n                    label=\"RangePicker:\"\n                    labelCol={{span: 6}}\n                    required>\n                    <RangePicker name=\"rangeDate\"/>\n                </FormItem>\n\n                <FormItem\n                    label=\"TimePicker:\"\n                    required>\n                    <TimePicker name=\"time\" />\n                </FormItem>\n\n                <FormItem\n                    label=\"Checkbox:\">\n                    <Checkbox.Group name=\"checkbox\">\n                        <Checkbox value=\"a\">option 1 </Checkbox>\n                        <Checkbox value=\"b\">option 2 </Checkbox>\n                        <Checkbox disabled value=\"c\">option 3（disabled）</Checkbox>\n                    </Checkbox.Group>\n                </FormItem>\n\n                <FormItem\n                    label=\"Radio:\">\n                    <Radio.Group name=\"radio\">\n                        <Radio value=\"apple\">apple</Radio>\n                        <Radio value=\"banana\">banana</Radio>\n                        <Radio disabled value=\"cherry\">cherry（disabled）</Radio>\n                    </Radio.Group>\n                </FormItem>\n\n                <FormItem\n                    label=\"Logo：\"\n                >\n                    <Upload action=\"/upload.do\" listType=\"text\" name=\"upload\" >\n                        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload</Button>\n                    </Upload>\n                </FormItem>\n                <Row style={{marginTop: 24}}>\n                    <Col offset=\"6\">\n                        <Form.Submit type=\"primary\" onClick={this.handleSubmit.bind(this)}>Submit</Form.Submit>\n                    </Col>\n                </Row>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示和表单相关的其他组件。</p>\n"
      },
      {
        "title": "嵌套",
        "order": "5",
        "jsx": "import { Form, Input, Grid } from '@alifd/next';\n\n\n\nconst FormItem = Form.Item;\nconst {Row, Col} = Grid;\n\nconst formItemLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 14},\n};\n\nconst insetLayout = {\n    labelCol: {fixedSpan: 3},\n};\n\nReactDOM.render(<Form {...formItemLayout}>\n    <FormItem id=\"control-input\" label=\"Input Something：\">\n        <Row gutter=\"4\">\n            <Col>\n                <FormItem label=\"Nest\" labelAlign=\"inset\" {...insetLayout} required requiredTrigger=\"onBlur\" asterisk={false}>\n                    <Input placeholder=\"Please enter...\"  name=\"firstname\"/>\n                </FormItem>\n            </Col>\n            <Col>\n                <FormItem label=\"Nest\" labelAlign=\"inset\" {...insetLayout} required asterisk={false}>\n                    <Input placeholder=\"need onChange\"  name=\"secondname\" />\n                </FormItem>\n            </Col>\n        </Row>\n    </FormItem>\n    <FormItem label=\"Bank Account：\" >\n        <Row gutter=\"4\">\n            <Col>\n                <FormItem required requiredTrigger=\"onBlur\">\n                    <Input name=\"A\"/>\n                </FormItem>\n            </Col>\n            <Col>\n                <FormItem required requiredTrigger=\"onBlur\">\n                    <Input name=\"B\"/>\n                </FormItem>\n            </Col>\n            <Col>\n                <FormItem required requiredTrigger=\"onBlur\">\n                    <Input name=\"C\"/>\n                </FormItem>\n            </Col>\n            <Col>\n                <FormItem required requiredTrigger=\"onBlur\">\n                    <Input name=\"D\"/>\n                </FormItem>\n            </Col>\n        </Row>\n    </FormItem>\n    <FormItem label=\" \">\n        <Form.Submit onClick={(v) => console.log(v)}>Submit</Form.Submit>\n    </FormItem>\n</Form>, mountNode);\n",
        "css": "",
        "body": "\n<p>FormItem 嵌套</p>\n"
      },
      {
        "title": "回车提交",
        "order": "7",
        "jsx": "import { Form, Input } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nclass Demo extends React.Component {\n    onSubmit(e) {\n        e.preventDefault(); // form will auto submit if remove this line\n        console.log('onsubmit');\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.onSubmit.bind(this)}>\n                <FormItem >\n                    <Input placeholder=\"Enter Key can also trigger ‘onSubmit’\"/>\n                </FormItem>\n                <Form.Submit htmlType=\"submit\">submit</Form.Submit>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>需要Form里面有 htmlType=&quot;submit&quot; 的元素</p>\n"
      },
      {
        "title": "手动设置错误",
        "order": "13",
        "jsx": "import { Form, Input, Button, Field } from '@alifd/next';\nimport { combineReducers, createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\n\n\n\nconst initState = {\n    values: {email: '', username: 'xiachi'},\n    errors: {}\n};\n\nfunction formReducer(state = initState, action) {\n    switch (action.type) {\n        case 'save_fields':\n            return {\n                ...state,\n                values: {\n                    ...state.values,\n                    ...action.values\n                }\n            };\n        case 'set_errors':\n            return {\n                ...state,\n                errors: {\n                    ...state.errors,\n                    ...action.errors\n                }\n            };\n        default:\n            return state;\n    }\n}\n\nclass FormDemo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.field = new Field(this, {\n            onChange: (name, value) => {\n                console.log('onChange', name, value, this.field.getError(name));\n                this.props.dispatch({\n                    type: 'save_fields',\n                    values: {\n                        [name]: value\n                    }\n                });\n                this.props.dispatch({\n                    type: 'set_errors',\n                    errors: {\n                        [name]: this.field.getError(name)\n                    }\n                });\n            }\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.field.setValues(nextProps.formData.values);\n        this.field.setErrors(nextProps.formData.errors);\n    }\n\n    setEmail() {\n        this.props.dispatch({\n            type: 'save_fields',\n            values: {\n                email: 'qq@gmail.com'\n            },\n        });\n    }\n\n    setName() {\n        this.props.dispatch({\n            type: 'save_fields',\n            values: {\n                username: 'frank'\n            },\n        });\n    }\n\n    setError() {\n        this.props.dispatch({\n            type: 'set_errors',\n            errors: {\n                email: 'Error message from remote'\n            },\n        });\n    }\n\n    setErrors() {\n        this.props.dispatch({\n            type: 'set_errors',\n            errors: {\n                email: 'A-Error message from remote',\n                username: 'B-Error message from remote'\n            },\n        });\n    }\n\n    render() {\n        return (<Form field={this.field}>\n            <Form.Item required format=\"email\">\n                <Input name=\"email\"/>\n            </Form.Item>\n            <Form.Item help=\"\" required requiredMessage=\"required\">\n                <Input name=\"username\" defaultValue={this.props.formData.values.username} />\n                <p style={{color: 'blue'}}>{this.field.getError('username')}</p>\n            </Form.Item>\n\n            <p>email: {this.props.email && this.props.email.value}</p>\n            <Button onClick={this.setEmail.bind(this)}>setEmail</Button>\n            <Button onClick={this.setName.bind(this)}>setName</Button>\n            <Button onClick={this.setError.bind(this)}>setError</Button>\n            <Button onClick={this.setErrors.bind(this)}>setErrors</Button>\n            <Button onClick={() => this.field.reset()}>reset</Button>\n        </Form>);\n    }\n}\n\n\nconst ReduxFormDemo = connect((state) => {\n    return {\n        formData: state.formReducer,\n    };\n})(FormDemo);\n\nconst store = createStore(combineReducers({\n    formReducer,\n}));\n\nReactDOM.render(<Provider store={store}>\n    <div>\n        <ReduxFormDemo />\n    </div>\n</Provider>, mountNode);\n",
        "css": "",
        "body": "\n<p>在<code>redux</code>中结合 <code>componentWillReceiveProps</code> <code>setErrors</code> 使用, 配合 Field 使用更加方便</p>\n<p>如果需要自己控制错误位置，可以让<code>help=&quot;&quot;</code> 然后自己放置展示错误的地方</p>\n"
      },
      {
        "title": "配合redux使用",
        "order": "12",
        "jsx": "import { Form, Input, Button, Checkbox, Field } from '@alifd/next';\nimport { combineReducers, createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\n\n\n\n\nconst CheckboxGroup = Checkbox.Group;\nfunction formReducer(state = {email: '', username: 'xiachi', fruit: ['apple']}, action) {\n    switch (action.type) {\n        case 'save_fields':\n            return {\n                ...state,\n                ...action.payload,\n            };\n        default:\n            return state;\n    }\n}\n\nclass FormDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.field = new Field(this, {\n            onChange: (name, value) => {\n                console.log('onChange', name, value, this.field.getValues());\n                this.props.dispatch({\n                    type: 'save_fields',\n                    payload: {\n                        [name]: value\n                    }\n                });\n                /* Method 2, Updates all values.\n                 this.props.dispatch({\n                 type: 'save_fields',\n                 payload: this.field.getValues()\n                 });\n                 */\n            }\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.field.setValues(nextProps.formData);\n    }\n\n    setEmail() {\n        this.props.dispatch({\n            type: 'save_fields',\n            payload: {\n                email: 'qq@gmail.com'\n            },\n        });\n    }\n\n    setName() {\n        this.props.dispatch({\n            type: 'save_fields',\n            payload: {\n                username: 'frank'\n            },\n        });\n    }\n\n    setGroup() {\n        this.props.dispatch({\n            type: 'save_fields',\n            payload: {\n                fruit: ['pear']\n            },\n        });\n    }\n\n    render() {\n        return (<Form field={this.field}>\n            <Form.Item required requiredMessage=\"required!\">\n                <Input name=\"email\"/>\n            </Form.Item>\n            <Form.Item required requiredMessage=\"required!\">\n                <Input name=\"username\" defaultValue={this.props.formData.username} />\n            </Form.Item>\n            <Form.Item required requiredMessage=\"required!\">\n                <CheckboxGroup name=\"fruit\" dataSource={[{label: 'Apple', value: 'apple'}, {label: 'Pear', value: 'pear'}]} defaultValue={this.props.formData.fruit}/>\n            </Form.Item>\n\n            <p>email: {this.props.email && this.props.email.value}</p>\n            <Button onClick={this.setEmail.bind(this)}>setEmail</Button>\n            <Button onClick={this.setName.bind(this)}>setName</Button>\n            <Button onClick={this.setGroup.bind(this)}>setGroup</Button>\n        </Form>);\n    }\n}\n\nconst ReduxFormDemo = connect((state) => {\n    return {\n        formData: state.formReducer,\n    };\n})(FormDemo);\n\nconst store = createStore(combineReducers({\n    formReducer\n}));\n\nReactDOM.render(<Provider store={store}>\n    <div>\n        <ReduxFormDemo />\n    </div>\n</Provider>, mountNode);\n",
        "css": "",
        "body": "\n<p>在<code>redux</code>中结合 <code>componentWillReceiveProps</code> <code>setValues</code> 使用， 配合 Field 使用</p>\n"
      },
      {
        "title": "注册",
        "order": "1",
        "jsx": "import { Form, Input } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n    labelCol: { fixedSpan: 3 },\n    wrapperCol: { span: 20 },\n};\n\nclass Demo extends React.Component {\n    state = {\n        code: '',\n        second: 60,\n    }\n\n    handleSubmit = (values, errors) => {\n        if (errors) {\n            return;\n        }\n        console.log('Get form value:', values);\n    };\n\n    sendCode = (values, errors) => {\n        if (errors) {\n            return;\n        }\n        this.setState({\n            code: Math.floor(Math.random() * (999999 - 99999 + 1) + 99999)\n        });\n\n        setInterval(() => {\n            this.setState({\n                second: --this.state.second\n            });\n        }, 1000);\n    }\n\n    render() {\n        const { code } = this.state;\n\n        return (\n            <Form style={{ width: 400 }} {...formItemLayout} labelTextAlign=\"left\" size=\"large\" labelAlign=\"inset\" >\n                <FormItem label=\"name\" required asterisk={false}>\n                    <Input name=\"username\" trim defaultValue=\"frank\" />\n                </FormItem>\n                <FormItem label=\"phone\" format=\"tel\" required asterisk={false}>\n                    <Input name=\"phone\" trim innerAfter={\n                        <Form.Submit\n                            text\n                            type=\"primary\"\n                            disabled={!!code}\n                            validate={['phone']}\n                            onClick={this.sendCode}\n                            style={{ marginRight: 10 }}\n                        >\n                            {code ? `retry after ${this.state.second}s` : 'send code'}\n                        </Form.Submit>\n                    } />\n                </FormItem>\n                {\n                    this.state.code ? <FormItem label=\"code\" required asterisk={false}>\n                        <Input name=\"code\" trim defaultValue={this.state.code} />\n                    </FormItem> : null\n                }\n\n                <FormItem label=\" \">\n                    <Form.Submit style={{ width: '100%' }} type=\"primary\" validate onClick={this.handleSubmit}>Submit</Form.Submit>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>验证码获取</p>\n"
      },
      {
        "title": "响应式",
        "order": "7",
        "jsx": "import { Form, Input, Select } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n    labelCol: {xxs: 4, l: 4},\n    wrapperCol: {xxs: 20, l: 16}\n};\n\nReactDOM.render(<Form {...formItemLayout} >\n    <FormItem label=\"userName:\">\n        <Input />\n    </FormItem>\n    <FormItem label=\"password:\">\n        <Input htmlType=\"password\" name=\"pass\" placeholder=\"Please Enter Password\"/>\n    </FormItem>\n    <FormItem label=\"Country:\">\n        <Select placeholder=\"Please select a country\" style={{width: '100%'}}>\n            <option value=\"china\">China</option>\n            <option value=\"use\">United States</option>\n            <option value=\"japan\">Japan</option>\n            <option value=\"korean\">South Korea</option>\n            <option value=\"Thailand\">Thailand</option>\n        </Select>\n    </FormItem>\n    <FormItem label=\"Note:\" help=\"something\">\n        <Input.TextArea placeholder=\"something\" name=\"remark\" />\n    </FormItem>\n    <FormItem label=\" \">\n        <Form.Submit>Submit</Form.Submit>\n    </FormItem>\n</Form>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过配置 <code>labelCol</code> <code>wrapperCol</code> 的 <code>Grid.Col</code> 响应式属性实现响应式</p>\n"
      },
      {
        "title": "尺寸",
        "order": "2",
        "jsx": "import { Form, Input, Select } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst formItemLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 20}\n};\n\nclass Demo extends React.Component {\n    state = {\n        size: 'medium'\n    }\n\n    handleChange = (v) => {\n        this.setState({\n            size: v\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Form {...formItemLayout} size={this.state.size} style={{maxWidth: '500px'}}>\n                    <FormItem label=\"Size:\">\n                        <Select value={this.state.size} onChange={this.handleChange} style={{width: '100%'}}>\n                            <Option value=\"small\">small</Option>\n                            <Option value=\"medium\">medium</Option>\n                            <Option value=\"large\">large</Option>\n                        </Select>\n                    </FormItem>\n                    <FormItem label=\"Account:\">\n                        <Input placeholder=\"Please enter your user name\" id=\"userName\" name=\"userName\"/>\n                    </FormItem>\n                    <FormItem required label=\"Password:\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"password\" name=\"password\"/>\n                    </FormItem>\n                    <FormItem label=\"Password:\" validateState=\"error\">\n                        <Input htmlType=\"password\" placeholder=\"Check your password\" id=\"rePass\" name=\"rePass\"/>\n                    </FormItem>\n                </Form>\n\n                <br/><br/>\n\n                <Form size={this.state.size} inline>\n                    <FormItem label=\"Size:\">\n                        <Select style={{width: '100%'}} value={this.state.size} onChange={this.handleChange}>\n                            <Option value=\"small\">small</Option>\n                            <Option value=\"medium\">medium</Option>\n                            <Option value=\"large\">large</Option>\n                        </Select>\n                    </FormItem>\n                    <FormItem label=\"Account:\">\n                        <Input placeholder=\"Please enter your user name\" id=\"userName2\" name=\"userName2\"/>\n                    </FormItem>\n                    <FormItem label=\"Password:\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"password2\" name=\"password2\"/>\n                    </FormItem>\n                    <FormItem label=\"Password:\" validateState=\"error\">\n                        <Input htmlType=\"password\" placeholder=\"Check your password\" id=\"rePass2\" name=\"rePass2\"/>\n                    </FormItem>\n                </Form>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".demo-ctl {\n  background-color: #f1f1f1;\n  padding: 10.0px;\n  color: #0a7ac3;\n  border-left: 4.0px solid #0d599a;\n}\n",
        "body": "\n<p><code>size</code> 会强制设置 <code>FormItem</code> 下的所有组件的size</p>\n<p><code>labelAlign</code> label方位</p>\n<p><code>labelTextAlign</code> 文字左右对齐方式</p>\n"
      },
      {
        "title": "标签在上",
        "order": "3",
        "jsx": "import { Form, Input, Select } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass Demo extends React.Component {\n    render() {\n        return (\n            <div>\n                <Form labelAlign=\"top\" >\n                    <FormItem label=\"Account:\">\n                        <Input placeholder=\"Please enter your user name\" id=\"userName\" name=\"userName\"/>\n                    </FormItem>\n\n                    <FormItem required label=\"Password:\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"password\" name=\"password\"/>\n                    </FormItem>\n\n                    <FormItem label=\"Password:\" validateState=\"error\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"rePass\" name=\"rePass\"/>\n                    </FormItem>\n\n                    <FormItem label=\"Size:\">\n                        <Select style={{width: '100%'}} name=\"size\">\n                            <Option value=\"small\">small</Option>\n                            <Option value=\"medium\">medium</Option>\n                            <Option value=\"large\">large</Option>\n                        </Select>\n                    </FormItem>\n                </Form>\n\n                <Form inline labelAlign=\"top\">\n                    <FormItem label=\"Account:\">\n                        <Input placeholder=\"Please enter your user name\" id=\"userName2\" name=\"userName2\"/>\n                    </FormItem>\n                    <FormItem label=\"Password:\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"password2\" name=\"password2\"/>\n                    </FormItem>\n                    <FormItem label=\"Password:\" validateState=\"error\">\n                        <Input htmlType=\"password\" placeholder=\"Please enter your password\" id=\"rePass2\" name=\"rePass2\"/>\n                    </FormItem>\n                    <FormItem label=\"Size:\">\n                        <Select style={{width: '100%'}} name=\"size2\">\n                            <Option value=\"small\">small</Option>\n                            <Option value=\"medium\">medium</Option>\n                            <Option value=\"large\">large</Option>\n                        </Select>\n                    </FormItem>\n                </Form>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".demo-ctl {\n  background-color: #f1f1f1;\n  padding: 10.0px;\n  color: #0a7ac3;\n  border-left: 4.0px solid #0d599a;\n}\n",
        "body": "\n<p><code>size</code> 会强制设置 <code>FormItem</code> 下的所有组件的size</p>\n<p><code>labelAlign</code> label方位</p>\n<p><code>labelTextAlign</code> 文字左右对齐方式</p>\n"
      },
      {
        "title": "校验",
        "order": "9",
        "jsx": "import { Form, Input, Radio } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nconst formItemLayout = {\n    labelCol: {\n        span: 6\n    },\n    wrapperCol: {\n        span: 14\n    }\n};\n\nclass BasicDemo extends React.Component {\n    userExists(rule, value) {\n        return new Promise((resolve, reject) => {\n            if (!value) {\n                resolve();\n            } else {\n                setTimeout(() => {\n                    if (value === 'frank') {\n                        reject([new Error('Sorry, this username is already exist.')]);\n                    } else {\n                        resolve();\n                    }\n                }, 500);\n            }\n        });\n    }\n\n    render() {\n        return (\n            <Form {...formItemLayout} >\n                <FormItem\n                    label=\"Account:\"\n                    hasFeedback\n                    validator={this.userExists.bind(this)}\n                    help=\"\"\n                >\n                    <Input placeholder=\"Input frank\" name=\"username\" />\n                    <Form.Error name=\"username\" >{\n                        (errors, state) => {\n                            if (state === 'loading') {\n                                return 'loading...';\n                            } else {\n                                return errors;\n                            }\n                        }\n                    }</Form.Error>\n                </FormItem>\n                <FormItem\n                    label=\"Email:\"\n                    hasFeedback\n                    required\n                    requiredTrigger=\"onBlur\"\n                    format=\"email\"\n                >\n                    <Input placeholder=\"Both trigget onBlur and onChange\" name=\"email\" />\n                </FormItem>\n\n                <FormItem\n                    label=\"Password:\"\n                    hasFeedback\n                    required\n                    requiredMessage=\"Please enter password\"\n                >\n                    <Input htmlType=\"password\" name=\"passwd\" />\n                </FormItem>\n\n                <FormItem\n                    label=\"Gender:\"\n                    hasFeedback\n                    required\n                    requiredMessage=\"Please select your gender\"\n                >\n                    <RadioGroup name=\"sex\" >\n                        <Radio value=\"male\">Male</Radio>\n                        <Radio value=\"female\">Female</Radio>\n                    </RadioGroup>\n                </FormItem>\n\n                <FormItem\n                    label=\"Remarks:\"\n                    required\n                    requiredMessage=\"Really do not intend to write anything?\"\n                >\n                    <Input.TextArea maxLength={20} hasLimitHint placeholder=\"Everything is ok!\" name=\"textarea\" />\n                </FormItem>\n\n                <FormItem wrapperCol={{ offset: 6 }} >\n                    <Form.Submit validate type=\"primary\" onClick={(v, e) => console.log(v, e)} style={{marginRight: 10}}>Submit</Form.Submit>\n                    <Form.Reset >Reset</Form.Reset>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<BasicDemo />, mountNode);\n",
        "css": "",
        "body": "\n<p>基本的表单校验例子。</p>\n"
      },
      {
        "title": "校验提示",
        "order": "8",
        "jsx": "import { Form, Input, DatePicker, TimePicker, NumberPicker, Select } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n    labelCol: {\n        span: 6\n    },\n    wrapperCol: {\n        span: 14\n    }\n};\n\nReactDOM.render(\n    <Form {...formItemLayout}>\n        <FormItem label=\"Input Error：\" validateState=\"error\" help=\"Please enter a numeric and alphabetic string\">\n            <Input defaultValue=\"Invalid choice\"/>\n        </FormItem>\n\n        <FormItem label=\"Loading：\" hasFeedback validateState=\"loading\" help=\"Information Checking...\">\n            <Input defaultValue=\"Checking\"/>\n        </FormItem>\n\n        <FormItem label=\"Success：\" hasFeedback validateState=\"success\">\n            <Input defaultValue=\"Successful verification\"/>\n        </FormItem>\n\n        <FormItem label=\"Datepicker：\" validateState=\"error\" help=\"Please select the correct date\">\n            <DatePicker />\n        </FormItem>\n\n        <FormItem label=\"Timepicker：\" validateState=\"error\" help=\"Please select the correct time\">\n            <TimePicker />\n        </FormItem>\n\n        <FormItem label=\"Select：\" validateState=\"error\" help=\"Please select a country\">\n            <Select placeholder=\"Please select a country\">\n                <option value=\"china\">China</option>\n                <option value=\"use\">United States</option>\n                <option value=\"japan\">Japan</option>\n                <option value=\"korean\">South Korea</option>\n                <option value=\"Thailand\">Thailand</option>\n            </Select>\n        </FormItem>\n\n        <FormItem label=\"NumberPicker：\" validateState=\"error\">\n            <NumberPicker defaultValue={0} />\n        </FormItem>\n    </Form>\n    , mountNode);\n",
        "css": "",
        "body": "\n<p>为 <code>&lt;FormItem&gt;</code> 定义 <code>state</code> 属性控制三种校验状态。</p>\n<p>如果是  <code>&lt;Input&gt;</code> 组件, 可在<code>&lt;FormItem&gt;</code>上面添加 <code>hasFeedback</code> 控制图标的展示</p>\n<p><strong>注意</strong>: 反馈图标只对 <code>&lt;Input /&gt;</code> 有效。</p>\n"
      }
    ]
  },
  {
    "name": "Grid",
    "category": "Components",
    "title": "栅格",
    "type": "布局",
    "importStatement": "import { Grid } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 基本使用\n\n此栅格系统提供了320，480，720, 990，1200，1500等几乎所有主流分辨率场景的响应规则。<br>\n响应式栅格采用24列栅格体系和5分比实现，以满足2，3，4，5，6分比布局等多种情况。<br>\n固定栅格采用 20px 宽度作为单位栅格， 推荐使用9，10，12，14，16，18，24，但同时也提供了从1到30的所有栅格，也可根据需求定制固定栅格列。<br>\n响应式断点阈值为：xss(320px), xs(480px), s(720px), m(990px), l(1200px), xl(1500px)。<br />\n API 和 DEMO 的说明）。\n\n## API\n\n### Grid.Row\n\n| 参数         | 说明                                                                                                                                                                       | 类型                   | 默认值   |\n| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------- | ----- |\n| children   | 行内容                                                                                                                                                                      | ReactNode            | -     |\n| gutter     | 列间隔                                                                                                                                                                      | String/Number        | 0     |\n| wrap       | 列在行中宽度溢出后是否换行                                                                                                                                                            | Boolean              | false |\n| fixed      | 行在某一断点下宽度是否保持不变（默认行宽度随视口变化而变化）                                                                                                                                           | Boolean              | false |\n| fixedWidth | 固定行的宽度为某一断点的宽度，不受视口影响而变动<br><br>**可选值**:<br>'xxs'(320px)<br>'xs'(480px)<br>'s'(720px)<br>'m'(990px)<br>'l'(1200px)<br>'xl'(1500px)                                       | Enum                 | -     |\n| align      | （不支持IE9浏览器）多列垂直方向对齐方式<br><br>**可选值**:<br>'top'(顶部对齐)<br>'center'(居中对齐)<br>'bottom'(底部对齐)<br>'baseline'(按第一行文字基线对齐)<br>'stretch'(未设置高度或设为 auto，将占满整个容器的高度)                | Enum                 | -     |\n| justify    | （不支持IE9浏览器）行内具有多余空间时的布局方式<br><br>**可选值**:<br>'start'(左对齐)<br>'center'(居中对齐)<br>'end'(右对齐)<br>'space-between'(两端对齐，列之间间距相等)<br>'space-around'(每列具有相同的左右间距，行两端间距是列间距的二分之一) | Enum                 | -     |\n| hidden     | 行在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl']\\(在 xxs, xs, s, m, l, xl 断点下隐藏）              | Boolean/String/Array | -     |\n| component  | 指定以何种元素渲染该节点<br>- 默认为 'div'                                                                                                                                              | String               | 'div' |\n\n### Grid.Col\n\n| 参数          | 说明                                                                                                                                                          | 类型                   | 默认值   |\n| ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------- | ----- |\n| children    | 列内容                                                                                                                                                         | ReactNode            | -     |\n| span        | 列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24                                                                                                             | String/Number        | -     |\n| fixedSpan   | 固定列宽度，宽度值为20 \\* 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30                                                                                             | String/Number        | -     |\n| offset      | （不支持IE9浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24                                                                                                  | String/Number        | -     |\n| fixedOffset | （不支持IE9浏览器）固定列偏移，宽度值为20 \\* 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30                                                                                  | String/Number        | -     |\n| align       | （不支持IE9浏览器）多列垂直方向对齐方式，可覆盖Row的align属性<br><br>**可选值**:<br>'top', 'center', 'bottom', 'baseline', 'stretch'                                                    | Enum                 | -     |\n| hidden      | 列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl']\\(在 xxs, xs, s, m, l, xl 断点下隐藏） | Boolean/String/Array | -     |\n| xxs         | >=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                     | String/Number/Object | -     |\n| xs          | >=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                     | String/Number/Object | -     |\n| s           | >=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                     | String/Number/Object | -     |\n| m           | >=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                     | String/Number/Object | -     |\n| l           | >=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                    | String/Number/Object | -     |\n| xl          | >=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象                                                                                                    | String/Number/Object | -     |\n| component   | 指定以何种元素渲染该节点，默认为 'div'                                                                                                                                      | String               | 'div' |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "多列垂直方向对齐方式",
        "order": "10",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"align-demo\">\n        <div className=\"demo-title\">top</div>\n        <Row align=\"top\">\n            <Col span=\"8\" style={{ height: '100px', lineHeight: '100px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '50px', lineHeight: '50px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '150px', lineHeight: '150px' }}>col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">center</div>\n        <Row align=\"center\">\n            <Col span=\"8\" style={{ height: '100px', lineHeight: '100px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '50px', lineHeight: '50px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '150px', lineHeight: '150px' }}>col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">bottom</div>\n        <Row align=\"bottom\">\n            <Col span=\"8\" style={{ height: '100px', lineHeight: '100px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '50px', lineHeight: '50px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '150px', lineHeight: '150px' }}>col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">baseline</div>\n        <Row align=\"baseline\">\n            <Col span=\"8\" style={{ height: '100px', paddingTop: '20px', fontSize: '30px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '50px', paddingTop: '20px', fontSize: '20px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '150px', paddingTop: '20px', fontSize: '40px' }}>col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">stretch</div>\n        <Row align=\"stretch\" style={{ height: '150px' }}>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"8\">col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">override</div>\n        <Row align=\"top\">\n            <Col align=\"bottom\" span=\"8\" style={{ height: '100px', lineHeight: '100px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '50px', lineHeight: '50px' }}>col-8</Col>\n            <Col span=\"8\" style={{ height: '150px', lineHeight: '150px' }}>col-8</Col>\n        </Row>\n    </div>, mountNode);\n",
        "css": ".align-demo .demo-title {\n    margin-left: 20px;\n}\n\n.align-demo .next-row {\n    margin: 10px 0;\n}\n\n.align-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>（不支持 IE9 浏览器）基于 Flex 的 align-items 和 align-self 属性实现，在 <code>Row</code> 上设置 <code>align</code> 属性，即可控制 <code>Row</code> 下面所有 <code>Col</code> 的垂直方向对齐方式：top（顶部对齐，默认），center（居中对齐），bottom（底部对齐），baseline（第一行文字的基线对齐），stretch（如果未设置高度或设为 auto，将占满整个容器的高度）；在 <code>Col</code> 上设置 <code>align</code> 属性，可允许它与其它列不一样的对齐方式，覆盖 <code>Row</code> 的 <code>align</code> 属性。</p>\n"
      },
      {
        "title": "基础布局",
        "order": "0",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"basic-demo\">\n        <div className=\"demo-title\">One</div>\n        <Row>\n            <Col span=\"24\">col-24</Col>\n        </Row>\n\n        <div className=\"demo-title\">Two</div>\n        <Row>\n            <Col span=\"12\">col-12</Col>\n            <Col span=\"12\">col-12</Col>\n        </Row>\n\n        <div className=\"demo-title\">Three</div>\n        <Row>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"8\">col-8</Col>\n        </Row>\n\n        <div className=\"demo-title\">Four</div>\n        <Row>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n        </Row>\n\n        <div className=\"demo-title\">Five</div>\n        <Row>\n            <Col span=\"1p5\">col-1p5</Col>\n            <Col span=\"1p5\">col-1p5</Col>\n            <Col span=\"1p5\">col-1p5</Col>\n            <Col span=\"1p5\">col-1p5</Col>\n            <Col span=\"1p5\">col-1p5</Col>\n        </Row>\n\n        <div className=\"demo-title\">Six</div>\n        <Row>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n    </div>, mountNode);\n",
        "css": ".basic-demo .demo-title {\n    margin-left: 20px;\n}\n\n.basic-demo .next-row {\n    margin: 10px 0;\n}\n\n.basic-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>通过 <code>Col</code> 的 <code>span</code> 属性指定该列宽度占整行宽度24分之几或5分之几。</p>\n"
      },
      {
        "title": "响应式布局",
        "order": "5",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"breakpoint-demo\">\n        <div className=\"demo-title\">Resize browser to see how each column changes</div>\n        <Row >\n            <Col xs={12} s={8} m={6}>Col</Col>\n            <Col xs={6} s={8} m={6}>Col</Col>\n            <Col xs={6} s={8} m={12}>Col</Col>\n        </Row>\n    </div>, mountNode);\n",
        "css": ".breakpoint-demo .demo-title {\n    margin-left: 20px;\n}\n\n.breakpoint-demo .next-row {\n    margin: 10px 0;\n}\n\n.breakpoint-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n"
      },
      {
        "title": "自定义元素渲染类型",
        "order": "12",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"basic-demo\">\n        <div className=\"demo-title\">Rendered as `ul` and `li`</div>\n        <Row component=\"ul\">\n            <Col span=\"12\" component=\"li\">col-12</Col>\n            <Col span=\"12\" component=\"li\">col-12</Col>\n        </Row>\n    </div>, mountNode);\n",
        "css": ".basic-demo ul {\n    list-style: none;\n    padding: 0;\n}\n\n.basic-demo .demo-title {\n    margin-left: 20px;\n}\n\n.basic-demo .next-row {\n    margin: 10px 0;\n}\n\n.basic-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>使用 <code>component</code> 来指定需要渲染的元素类型，默认为 <code>div</code></p>\n"
      },
      {
        "title": "固定宽度列",
        "order": "1",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"mixin-demo\">\n        <div className=\"demo-title\">Two-column layout, left column fixed, right column adaptive</div>\n        <Row>\n            <Col fixedSpan=\"16\">col-fixed-16</Col>\n            <Col>col</Col>\n        </Row>\n\n        <div className=\"demo-title\">Two-column layout, right column fixed, left column adaptive</div>\n        <Row>\n            <Col>col</Col>\n            <Col fixedSpan=\"16\">col-fixed-16</Col>\n        </Row>\n\n        <div className=\"demo-title\">Three-column layout, left column and right column fixed, middle column adaptive</div>\n        <Row>\n            <Col fixedSpan=\"8\">col-fixed-8</Col>\n            <Col>col</Col>\n            <Col fixedSpan=\"8\">col-fixed-8</Col>\n        </Row>\n    </div>, mountNode);\n",
        "css": ".mixin-demo .demo-title {\n    margin-left: 20px;\n}\n\n.mixin-demo .next-row {\n    margin: 10px 0;\n}\n\n.mixin-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>通过 <code>Col</code> 的 <code>fixedSpan</code> 属性来指定某列为固定宽度列，其宽度的计算方式为 20 * fixedSpan。</p>\n"
      },
      {
        "title": "列间距",
        "order": "2",
        "jsx": "import { Range, Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gutter: 0\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(gutter) {\n        this.setState({\n            gutter\n        });\n    }\n\n    render() {\n        const { gutter } = this.state;\n\n        return (\n            <div className=\"gutter-demo\">\n                <Range value={gutter} onChange={this.handleChange} marks={4} step={4} max={16} hasTip={false} style={{ width: '400px', marginLeft: '20px', marginTop: '30px' }} />\n                <Row gutter={gutter}>\n                    <Col span=\"6\"><div className=\"demo-col-inset\">col-6</div></Col>\n                    <Col span=\"6\"><div className=\"demo-col-inset\">col-6</div></Col>\n                    <Col span=\"6\"><div className=\"demo-col-inset\">col-6</div></Col>\n                    <Col span=\"6\"><div className=\"demo-col-inset\">col-6</div></Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".gutter-demo .demo-title {\n    margin-left: 20px;\n}\n\n.gutter-demo .next-row {\n    margin: 10px 0;\n}\n\n.gutter-demo .demo-col-inset {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>列与列间距默认为0，可以通过设置 <code>Row</code> 的 <code>gutter</code> 属性来改变列间距。</p>\n"
      },
      {
        "title": "显示与隐藏",
        "order": "6",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"hidden-demo\">\n        <div className=\"demo-title\">Hide columns under all breakpoints, resize browser to see if the second column is hidden or shown</div>\n        <Row>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"16\" hidden>col-16</Col>\n        </Row>\n\n        <div className=\"demo-title\">Hide columns under a breakpoint such as xs, resize browser to see if the second column is hidden or shown</div>\n        <Row>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"16\" hidden=\"xs\">col-16</Col>\n        </Row>\n\n        <div className=\"demo-title\">Hide columns under some breakpoints such as xs and s, resize browser to see if the second column is hidden or shown</div>\n        <Row>\n            <Col span=\"8\">col-8</Col>\n            <Col span=\"16\" hidden={['xs', 's']}>col-16</Col>\n        </Row>\n    </div>, mountNode);\n",
        "css": ".hidden-demo .demo-title {\n    margin-left: 20px;\n}\n\n.hidden-demo .next-row {\n    margin: 10px 0;\n}\n\n.hidden-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>提供了强大的响应式的显示与隐藏功能，支持在不同断点下的显示与隐藏。</p>\n"
      },
      {
        "title": "多列水平方向对齐方式",
        "order": "11",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"justify-demo\">\n        <div className=\"demo-title\">start</div>\n        <Row justify=\"start\">\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n\n        <div className=\"demo-title\">center</div>\n        <Row justify=\"center\">\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n\n        <div className=\"demo-title\">end</div>\n        <Row justify=\"end\">\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n\n        <div className=\"demo-title\">space-between</div>\n        <Row justify=\"space-between\">\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n\n        <div className=\"demo-title\">space-around</div>\n        <Row justify=\"space-around\">\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n            <Col span=\"4\">col-4</Col>\n        </Row>\n    </div>, mountNode);\n",
        "css": ".justify-demo  .demo-title {\n    margin-left: 20px;\n}\n\n.justify-demo  .next-row {\n    margin: 10px 0;\n}\n\n.justify-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>（不支持 IE9 浏览器）基于 Flex 的 justify-content 属性实现，在 <code>Row</code> 上设置 <code>justify</code> 属性，即可行内多列水平方向对齐方式：start（左对齐，默认），center（居中对齐），end（右对齐），space-between（两端对齐，项目之间的间隔都相），space-around（两侧的间隔相等，列之间的间隔比列与左右两端的间隔大一倍）。</p>\n"
      },
      {
        "title": "嵌套布局",
        "order": "4",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"nest-demo\">\n        <Row className=\"demo-row\">\n            <Col span=\"10\">\n                <Row>\n                    <Col span=\"6\">\n                        <div className=\"demo-col-inset\">col-10-6</div>\n                    </Col>\n                    <Col span=\"18\">\n                        <div className=\"demo-col-inset\">col-10-18</div>\n                    </Col>\n                </Row>\n            </Col>\n            <Col span=\"14\">\n                <Row>\n                    <Col span=\"18\">\n                        <div className=\"demo-col-inset\">col-14-18</div>\n                    </Col>\n                    <Col span=\"6\">\n                        <div className=\"demo-col-inset\">col-14-6</div>\n                    </Col>\n                </Row>\n            </Col>\n        </Row>\n    </div>, mountNode);\n",
        "css": ".nest-demo .demo-title {\n    margin-left: 20px;\n}\n\n.nest-demo .demo-row {\n    margin: 10px 0;\n}\n\n.nest-demo .demo-col-inset {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p><code>Col</code> 下也可嵌套 <code>Row</code>，以完成更细致的布局。</p>\n"
      },
      {
        "title": "固定宽度偏移",
        "order": "9",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"offset-fixed-demo\">\n        <div className=\"demo-title\">Normal offset, set offset from 1 to 30</div>\n        <Row>\n            <Col fixedOffset=\"0\">offset-fixed-0</Col>\n        </Row>\n        <Row>\n            <Col fixedOffset=\"4\">offset-fixed-4</Col>\n        </Row>\n        <Row>\n            <Col fixedOffset=\"8\">offset-fixed-8</Col>\n        </Row>\n        <Row>\n            <Col fixedOffset=\"12\">offset-fixed-12</Col>\n        </Row>\n\n        <div className=\"demo-title\">Adaptive offset</div>\n        <Row>\n            <Col>col</Col>\n            <Col fixedOffset=\"12\">offset-fixed-12</Col>\n        </Row>\n    </div>, mountNode\n);\n",
        "css": ".offset-fixed-demo .demo-title {\n    margin-left: 20px;\n}\n\n.offset-fixed-demo .next-row {\n    margin: 10px 0;\n}\n\n.offset-fixed-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>（不支持 IE9 浏览器）列可以向右偏移一定距离，该距离的计算方式和固定宽度列的宽度相同。</p>\n"
      },
      {
        "title": "偏移",
        "order": "8",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"offset-demo\">\n        <div className=\"demo-title\">Normal offset, set offset from 1 to 24</div>\n        <Row>\n            <Col offset=\"0\">offset-0</Col>\n        </Row>\n        <Row>\n            <Col offset=\"4\">offset-4</Col>\n        </Row>\n        <Row>\n            <Col offset=\"8\">offset-8</Col>\n        </Row>\n        <Row>\n            <Col offset=\"12\">offset-12</Col>\n        </Row>\n\n        <div className=\"demo-title\">Adaptive offset</div>\n        <Row>\n            <Col>col</Col>\n            <Col offset=\"12\">offset-12</Col>\n        </Row>\n    </div>,\n    mountNode\n);\n",
        "css": ".offset-demo .demo-title {\n    margin-left: 20px;\n}\n\n.offset-demo .next-row {\n    margin: 10px 0;\n}\n\n.offset-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>（不支持 IE9 浏览器）列可以向右偏移一定距离，该距离的计算方式和列所占宽度计算方式相同。</p>\n"
      },
      {
        "title": "设置行的宽度",
        "order": "7",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nconst breakpoints = {\n    xxs: 320,\n    xs: 480,\n    s: 720,\n    m: 990,\n    l: 1200,\n    xl: 1500\n};\n\nclass Demo extends React.Component {\n    componentDidMount() {\n        const row = ReactDOM.findDOMNode(this.refs.fixCol);\n\n        this.handleResize = () => {\n            let point = '';\n            const innerWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            const keys = Object.keys(breakpoints);\n            for (let i = 0; i < keys.length; i++) {\n                const width = breakpoints[keys[i]];\n                const nextWidth = breakpoints[keys[i + 1]];\n                if (innerWidth > width && (innerWidth < nextWidth || !nextWidth)) {\n                    point = keys[i];\n                    break;\n                }\n            }\n\n            if (point) {\n                row.innerHTML = `${breakpoints[point]}px`;\n            }\n        };\n        window.addEventListener('resize', this.handleResize);\n\n        this.handleResize();\n    }\n\n    componentWillUnmount() {\n        window.removeListener('resize', this.handleResize);\n    }\n\n    render() {\n        return (\n            <div className=\"type-demo\">\n                <div className=\"demo-title\">Default</div>\n                <Row>\n                    <Col>100%</Col>\n                </Row>\n                <div className=\"demo-title\">Set fixed to true</div>\n                <Row ref=\"fixedRow\" fixed>\n                    <Col ref=\"fixCol\" />\n                </Row>\n                <div className=\"demo-title\">Set fixedWidth to 's'</div>\n                <Row fixedWidth=\"s\">\n                    <Col>720px</Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".type-demo .demo-title {\n    margin-left: 20px;\n}\n\n.type-demo .next-row {\n    margin: 10px 0;\n}\n\n.type-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>默认 <code>Row</code> 的宽度被设置为100%，可以通过设置 <code>fixed</code> 属性为 true，来让 <code>Row</code> 的宽度不立刻随着是视口大小变动而变动，而是在某个断点下维持固定的宽度，也可以通过设置 <code>fixedWidth</code> 属性为某一断点值，从而固定 <code>Row</code> 的宽度，不再随着视口大小变动而变动。</p>\n"
      },
      {
        "title": "溢出后是否换行",
        "order": "3",
        "jsx": "import { Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n    <div className=\"wrap-demo\">\n        <div className=\"demo-title\">No wrap</div>\n        <Row>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"8\">col-8</Col>\n        </Row>\n        <div className=\"demo-title\">Wrap</div>\n        <Row wrap>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"6\">col-6</Col>\n            <Col span=\"8\">col-8</Col>\n        </Row>\n    </div>, mountNode);\n",
        "css": ".wrap-demo .demo-title {\n    margin-left: 20px;\n}\n\n.wrap-demo .next-row {\n    margin: 10px 0;\n}\n\n.wrap-demo .next-col {\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    height: 30px;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n<p>（不支持 IE9 浏览器）默认列在行中宽度溢出后不会换行，如果想自动换行，请为 <code>Row</code> 设置 <code>wrap</code> 为 true。</p>\n"
      }
    ]
  },
  {
    "name": "Icon",
    "category": "Components",
    "title": "图标",
    "type": "展示",
    "importStatement": "import { Icon } from '@alifd/next';",
    "body": "\n## Q&A\n\n-   Q: 如何添加自定义Icon呢？<br/>\n    A: 默认提供部分基础 icon ，若要添加自定义 icon 可在 Fusion 设计中心新建主题，编辑主题中的Icon组件，完成后发布主题。每个主题是一个 npm 包，npm 包里面包含了主题变量、iconfont 地址等相关代码。在你的项目里引用该自定义主题包，更新主题包的版本即可（前提是你的项目/构建工具支持 Fusion 主题的使用）\n\n API\n\n### Icon\n\n| 参数   | 说明                                                                                     | 类型     | 默认值      |\n| ---- | -------------------------------------------------------------------------------------- | ------ | -------- |\n| size | 指定图标大小<br><br>**可选值**:<br>'xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl' | Enum   | 'medium' |\n| type | 指定显示哪种图标                                                                               | String | -        |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Icon } from '@alifd/next';\n\nReactDOM.render(<Icon type=\"atm\" />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示图标基本使用方法。</p>\n"
      },
      {
        "title": "尺寸",
        "order": "2",
        "jsx": "import { Icon } from '@alifd/next';\n\nconst sizes = ['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl'];\n\nReactDOM.render((\n    <ul className=\"icon-sizes\">\n        {sizes.map((size, index) => (\n            <li key={index}>\n                <Icon type=\"smile\" size={size} />\n                <span>{size}</span>\n            </li>))}\n    </ul>\n), mountNode);\n\n",
        "css": ".icon-sizes {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.icon-sizes li {\n    display: inline-block;\n    width: 80px;\n    height: 80px;\n}\n\n.icon-sizes i {\n    display: block;\n    margin: 12px auto 0 auto;\n    text-align: center;\n}\n\n.icon-sizes span {\n    display: block;\n    margin-top: 10px;\n    text-align: center;\n}\n",
        "body": "\n<p>ICON的尺寸包括：<code>xxs</code>，<code>xs</code>，<code>small</code>，<code>medium</code>，<code>large</code>，<code>xl</code>，<code>xxl</code>，<code>xxxl</code>。</p>\n"
      },
      {
        "title": "自定义样式",
        "order": "3",
        "jsx": "import { Icon } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <div className=\"icon-style-demo\">\n            <Icon type=\"success\" style={{ color: '#1DC11D', marginRight: '10px' }} />\n            This is a success message!\n        </div>\n        <div className=\"icon-style-demo\">\n            <Icon type=\"warning\" style={{ color: '#FFA003', marginRight: '10px' }} />\n            This is a warning message!\n        </div>\n        <div className=\"icon-style-demo\">\n            <Icon type=\"error\" style={{ color: '#FF3333', marginRight: '10px' }} />\n            This is a failure message!\n        </div>\n    </div>\n    , mountNode);\n",
        "css": ".icon-style-demo {\n    height: 24px;\n    line-height: 24px;\n    margin-bottom: 10px;\n    font-size: 16px;\n    color: #333;\n}\n",
        "body": "\n<p>图标字体本质上还是文字，可以使用 style 和 className 设置图标的大小和颜色。</p>\n"
      },
      {
        "title": "图标列表",
        "order": "1",
        "jsx": "import { Message, Icon } from '@alifd/next';\n\n\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\nconst types = [\n    'smile', 'cry', 'success', 'warning', 'prompt',\n    'error', 'help', 'clock', 'success-filling', 'delete-filling',\n    'favorites-filling', 'add', 'minus', 'arrow-up', 'arrow-down',\n    'arrow-left', 'arrow-right', 'arrow-double-left', 'arrow-double-right', 'switch',\n    'sorting', 'descending', 'ascending', 'select', 'semi-select',\n    'loading', 'search', 'close', 'ellipsis', 'picture',\n    'calendar', 'ashbin', 'upload', 'download', 'set',\n    'edit', 'refresh', 'filter', 'attachment', 'account',\n    'email', 'atm'\n];\n\n\nlet customTypes = [];\n\n// The code here is for fusion dev display custom Icon components only\nif (window.customIcons) {\n    customTypes = window.customIcons;\n}\n\nconst handleCopy = () => Message.success('Copied!');\n\nReactDOM.render(\n    <div>\n        <div className=\"icon-list-title\">Click on the icon to copy the code.</div>\n        <ul className=\"icon-list\">\n            {types.map((type, index) => (\n                <CopyToClipboard key={index} text={`<Icon type=\"${type}\" />`} onCopy={handleCopy}>\n                    <li>\n                        <Icon type={type} size=\"xl\" />\n                        <span>{type}</span>\n                    </li>\n                </CopyToClipboard>))}\n        </ul>\n        {\n            customTypes.length ?\n                <div>\n                    <div className=\"icon-list-custom-title\">Custom Icon</div>\n                    <ul className=\"icon-list\">\n                        {\n                            customTypes.map((type, index) => (\n                                <CopyToClipboard key={index} text={`<Icon type=\"${type}\" />`} onCopy={handleCopy}>\n                                    <li>\n                                        <Icon type={type} size=\"xl\" />\n                                        <span>{type}</span>\n                                    </li>\n                                </CopyToClipboard>))\n                        }\n                    </ul>\n                </div> :\n                null\n        }\n\n    </div>\n    , mountNode);\n",
        "css": ".icon-list-title {\n    margin-bottom: 20px;\n    font-size: 24px;\n    color: #333;\n}\n\n.icon-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.icon-list li {\n    display: inline-block;\n    width: 140px;\n    padding: 30px 0;\n    color: #666;\n    cursor: pointer;\n}\n\n.icon-list li:hover {\n    color: #333;\n    background-color: #f7f7f7;\n}\n\n.icon-list i {\n    display: block;\n    width: 32px;\n    margin: 0 auto;\n}\n\n.icon-list span {\n    display: block;\n    margin-top: 10px;\n    text-align: center;\n    font-size: 14px;\n}\n\n.icon-list-custom-title {\n    margin: 20px 0 20px 10px;\n    font-size: 20px;\n    color: #333;\n}\n",
        "body": "\n<p>点击图标复制代码。</p>\n"
      }
    ]
  },
  {
    "name": "Input",
    "category": "Components",
    "title": "输入框",
    "type": "表单",
    "importStatement": "import { Input } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n表单输入，一般配合Form使用\n\n API\n\n### Input\n\n| 参数              | 说明                                                                                                                                                                                                                           | 类型            | 默认值       |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | --------- |\n| value           | 当前值                                                                                                                                                                                                                          | String/Number | -         |\n| size            | 尺寸<br><br>**可选值**:<br>'small'(小)<br>'medium'(中)<br>'large'(大)                                                                                                                                                                | Enum          | 'medium'  |\n| defaultValue    | 初始化值                                                                                                                                                                                                                         | String/Number | -         |\n| onChange        | 发生改变的时候触发的回调<br><br>**签名**:<br>Function(value: String, e: Event) => void<br>**参数**:<br>_value_: {String} 数据<br>_e_: {Event} DOM事件对象                                                                                          | Function      | func.noop |\n| onKeyDown       | 键盘按下的时候触发的回调<br><br>**签名**:<br>Function(e: Event, opts: Object) => void<br>**参数**:<br>_e_: {Event} DOM事件对象<br>_opts_: {Object} 可扩展的附加信息：<br> - opts.overMaxLength: {Boolean} 已超出最大长度<br> - opts.beTrimed: {Boolean} 输入的空格被清理 | Function      | func.noop |\n| disabled        | 禁用状态                                                                                                                                                                                                                         | Boolean       | false     |\n| maxLength       | 最大长度                                                                                                                                                                                                                         | Number        | null      |\n| hasLimitHint    | 是否展现最大长度样式                                                                                                                                                                                                                   | Boolean       | false     |\n| cutString       | 当设置了maxLength时，是否截断超出字符串                                                                                                                                                                                                     | Boolean       | true      |\n| readOnly        | 只读                                                                                                                                                                                                                           | Boolean       | false     |\n| trim            | onChange返回会自动去除头尾空字符                                                                                                                                                                                                         | Boolean       | false     |\n| placeholder     | 输入提示                                                                                                                                                                                                                         | String        | -         |\n| onFocus         | 获取焦点时候触发的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                             | Function      | func.noop |\n| onBlur          | 失去焦点时候触发的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                             | Function      | func.noop |\n| getValueLength  | 自定义字符串计算长度方式<br><br>**签名**:<br>Function(value: String) => Number<br>**参数**:<br>_value_: {String} 数据<br>**返回值**:<br>{Number} 自定义长度<br>                                                                                        | Function      | func.noop |\n| htmlType        | 原生type                                                                                                                                                                                                                       | String        | -         |\n| name            | name                                                                                                                                                                                                                         | String        | -         |\n| state           | 状态<br><br>**可选值**:<br>'error'(错误)<br>'loading'(校验中)<br>'success'(成功)                                                                                                                                                         | Enum          | -         |\n| label           | label                                                                                                                                                                                                                        | ReactNode     | -         |\n| hasClear        | 是否出现clear按钮                                                                                                                                                                                                                  | Boolean       | -         |\n| hasBorder       | 是否有边框                                                                                                                                                                                                                        | Boolean       | true      |\n| onPressEnter    | 按下回车的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                                 | Function      | func.noop |\n| hint            | 水印 (Icon的type类型，和hasClear占用一个地方)                                                                                                                                                                                             | String        | -         |\n| innerBefore     | 文字前附加内容                                                                                                                                                                                                                      | ReactNode     | -         |\n| innerAfter      | 文字后附加内容                                                                                                                                                                                                                      | ReactNode     | -         |\n| addonBefore     | 输入框前附加内容                                                                                                                                                                                                                     | ReactNode     | -         |\n| addonAfter      | 输入框后附加内容                                                                                                                                                                                                                     | ReactNode     | -         |\n| addonTextBefore | 输入框前附加文字                                                                                                                                                                                                                     | ReactNode     | -         |\n| addonTextAfter  | 输入框后附加文字                                                                                                                                                                                                                     | ReactNode     | -         |\n| autoComplete    | (原生input支持)                                                                                                                                                                                                                  | String        | 'off'     |\n| autoFocus       | 自动聚焦(原生input支持)                                                                                                                                                                                                              | Boolean       | -         |\n\n### Input.TextArea\n\n| 参数             | 说明                                                                                                                                                                                                                           | 类型             | 默认值       |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | --------- |\n| value          | 当前值                                                                                                                                                                                                                          | String/Number  | -         |\n| defaultValue   | 初始化值                                                                                                                                                                                                                         | String/Number  | -         |\n| onChange       | 发生改变的时候触发的回调<br><br>**签名**:<br>Function(value: String, e: Event) => void<br>**参数**:<br>_value_: {String} 数据<br>_e_: {Event} DOM事件对象                                                                                          | Function       | func.noop |\n| onKeyDown      | 键盘按下的时候触发的回调<br><br>**签名**:<br>Function(e: Event, opts: Object) => void<br>**参数**:<br>_e_: {Event} DOM事件对象<br>_opts_: {Object} 可扩展的附加信息：<br> - opts.overMaxLength: {Boolean} 已超出最大长度<br> - opts.beTrimed: {Boolean} 输入的空格被清理 | Function       | func.noop |\n| disabled       | 禁用状态                                                                                                                                                                                                                         | Boolean        | false     |\n| maxLength      | 最大长度                                                                                                                                                                                                                         | Number         | null      |\n| hasLimitHint   | 是否展现最大长度样式                                                                                                                                                                                                                   | Boolean        | false     |\n| cutString      | 当设置了maxLength时，是否截断超出字符串                                                                                                                                                                                                     | Boolean        | true      |\n| readOnly       | 只读                                                                                                                                                                                                                           | Boolean        | false     |\n| trim           | onChange返回会自动去除头尾空字符                                                                                                                                                                                                         | Boolean        | false     |\n| placeholder    | 输入提示                                                                                                                                                                                                                         | String         | -         |\n| onFocus        | 获取焦点时候触发的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                             | Function       | func.noop |\n| onBlur         | 失去焦点时候触发的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                             | Function       | func.noop |\n| getValueLength | 自定义字符串计算长度方式<br><br>**签名**:<br>Function(value: String) => Number<br>**参数**:<br>_value_: {String} 数据<br>**返回值**:<br>{Number} 自定义长度<br>                                                                                        | Function       | func.noop |\n| htmlType       | 原生type                                                                                                                                                                                                                       | String         | -         |\n| name           | name                                                                                                                                                                                                                         | String         | -         |\n| state          | 状态<br><br>**可选值**:<br>'error'(错误)                                                                                                                                                                                            | Enum           | -         |\n| autoHeight     | 自动高度 true / {minRows: 2, maxRows: 4}                                                                                                                                                                                         | Boolean/Object | false     |\n| rows           | 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)                                                                                                                                                                         | Number         | 4         |\n\n### Input.Group\n\n| 参数                   | 说明          | 类型        | 默认值 |\n| -------------------- | ----------- | --------- | --- |\n| addonBefore          | 输入框前附加内容    | ReactNode | -   |\n| addonBeforeClassName | 输入框前附加内容css | String    | -   |\n| addonAfter           | 输入框后附加内容    | ReactNode | -   |\n| addonAfterClassName  | 输入框后额外css   | String    | -   |\n| rtl                  | rtl         | Boolean   | -   |\n\n## Input/TextArea 内部函数(通过refs获取)\n\n| 参数           | 说明                                                                                                                           | 类型       | 默认值 |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------------- | -------- | --- |\n| getInputNode | 获取真正input节点                                                                                                                  | Function |     |\n| focus        | 获取焦点<br><br>**签名**:<br> Function(start:Number, end: Number)<br>**参数**:<br>_start_: {Number} 光标起始位置<br>_end_: {Number} 选择结束位置 | Function |     |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "前后扩展",
        "order": "2",
        "jsx": "import { Input } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Input hasLimitHint\n        addonTextBefore=\"http://\"\n        addonTextAfter=\".com\"\n        size=\"large\"\n        defaultValue=\"alibaba\"\n        maxLength={2}\n        aria-label=\"input with config of addonTextBefore and addonTextAfter\" /><br /><br />\n\n    <Input\n        addonTextBefore=\"http://\"\n        addonTextAfter=\".com\"\n        size=\"medium\"\n        value=\"alibaba\"\n        aria-label=\"input with config of addonTextBefore and addonTextAfter\" /><br /><br />\n\n    <Input\n        addonTextBefore=\"http://\"\n        addonTextAfter=\".com\"\n        size=\"small\"\n        value=\"alibaba\"\n        aria-label=\"input with config of addonTextBefore and addonTextAfter\" />\n</div>\n    , mountNode);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "自动高度",
        "order": "9",
        "jsx": "import { Input } from '@alifd/next';\n\n\n\n\nReactDOM.render(\n    <div >\n        <Input.TextArea\n            autoHeight\n            trim\n            aria-label=\"auto height\"\n            placeholder=\"autoHeight\"\n            onKeyDown={(e, opts) => {\n                console.log('onKeyDown', opts);\n            }} /><br/><br/>\n\n        <Input.TextArea aria-label=\"auto height\" autoHeight={{ minRows: 2, maxRows: 6 }} />\n    </div>\n    , mountNode);\n",
        "css": "",
        "body": "\n<p>设置 <code>Input</code> 为 多行文本域；</p>\n"
      },
      {
        "title": "简单",
        "order": "0",
        "jsx": "import { Input } from '@alifd/next';\n\nfunction onChange(v) {\n    console.log(v);\n}\n\nReactDOM.render(<div>\n    <Input size=\"large\" placeholder=\"Large\" onChange={onChange} aria-label=\"Large\" /><br /><br />\n\n    <span id=\"J_InputMedium\" style={{display: 'none'}}>Aria Labelby Demo </span>\n    <Input placeholder=\"Medium\" aria-label=\"Medium\" aria-labelledby=\"J_InputMedium\" /><br /><br />\n\n    <Input placeholder=\"Small\" size=\"small\" label=\"SIZE :\" id=\"J_InputSmall\" /><br /><br />\n\n    <Input.TextArea placeholder=\"TextArea\" aria-label=\"TextArea\" />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "清除按钮",
        "order": "3",
        "jsx": "import { Input } from '@alifd/next';\n\nconst onChange = (value) => {\n    console.log(value);\n};\nconst onBlur = (e) => {\n    console.log(e);\n};\n\nReactDOM.render(\n    <div>\n        <Input\n            hasClear\n            defaultValue=\"clear by click\"\n            size=\"small\"\n            aria-label=\"input with config of hasClear\" onChange={onChange} /><br/><br/>\n\n        <Input\n            hasClear\n            defaultValue=\"2019-09-10 10:10:20\"\n            aria-label=\"input with config of hasClear\"\n            onChange={onChange}\n            onBlur={onBlur}\n            hint=\"calendar\"/><br/><br/>\n\n        <Input\n            hasClear\n            defaultValue=\"clear by click\"\n            size=\"large\"\n            aria-label=\"input with config of hasClear\"\n            onChange={onChange} /><br/><br/>\n    </div>\n    , mountNode);\n",
        "css": "",
        "body": "\n<p>通过设置 hasClear 添加清除按钮.</p>\n<p>hint为水印按钮，和hasClear占用同一个地方配合使用</p>\n"
      },
      {
        "title": "禁用状态",
        "order": "7",
        "jsx": "import { Input } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Input disabled aria-label=\"disabled\" placeholder=\"disabled\" size=\"small\"/><br /><br />\n\n        <Input\n            disabled\n            aria-label=\"disabled\"\n            addonTextBefore=\"http://\"\n            addonTextAfter=\".com\"\n            size=\"medium\"\n            value=\"alibaba\"/><br /><br />\n\n        <Input disabled aria-label=\"disabled\" placeholder=\"medium\" maxLength={10} hasLimitHint/><br /><br />\n\n        <Input.TextArea disabled aria-label=\"disabled\" placeholder=\"medium\" maxLength={10} hasLimitHint/>\n    </div>\n    , mountNode);\n",
        "css": "",
        "body": "\n<p>为 <code>Input</code> 设置 <code>disabled</code> 状态；</p>\n"
      },
      {
        "title": "输入框组合",
        "order": "11",
        "jsx": "import { Input, Select, Button } from '@alifd/next';\n\n\nconst select = (<Select aria-label=\"please select\" >\n    <option value=\"https\">https</option>\n    <option value=\"http\">http</option>\n</Select>);\nconst button = (<Button>search</Button>);\n\nReactDOM.render(<div>\n    <Input.Group addonBefore={select} addonAfter={button}>\n        <Input hasClear defaultValue=\"abc\" style={{width: '100%'}} aria-label=\"please input\" />\n    </Input.Group>\n    <br/><br/>\n    <Input addonTextAfter=\".com\" addonBefore={select} aria-label=\"please input\" />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>Group 具有两边长度固定中间组件任意伸缩的能力。在Input中可以用addonBefore/addonAfter快速使用</p>\n"
      },
      {
        "title": "水印和前后缀",
        "order": "8",
        "jsx": "import { Input, Icon } from '@alifd/next';\n\n\nclass App extends React.Component {\n    state = {\n        v: '',\n    };\n\n    onChange = (v) => {\n        this.setState({\n            v\n        });\n    };\n\n    onClick = () => {\n        console.log(this.state.v);\n    };\n\n    render() {\n\n        return (<div>\n            <Input\n                innerBefore={<Icon type=\"search\" style={{margin: 4}}  onClick={this.onClick} />}\n                placeholder=\"search\"\n                value={this.state.v}\n                aria-label=\"input with config of innerBefore\"\n                onChange={this.onChange}\n            /><br /><br />\n\n            <Input\n                innerAfter={<Icon type=\"search\" size=\"xs\" onClick={this.onClick} style={{margin: 4}}/>}\n                placeholder=\"search\"\n                value={this.state.v}\n                aria-label=\"input with config of innerAfter\"\n                onChange={this.onChange}\n            /><br /><br />\n\n            <Input\n                disabled\n                defaultValue=\"hi\"\n                innerAfter={<Icon type=\"calendar\" style={{margin: 4}}/>}\n                aria-label=\"input with config of innerAfter and disabled\" />\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以添加水印， 为input前后端增加额外内容</p>\n"
      },
      {
        "title": "最大长度",
        "order": "5",
        "jsx": "import { Input } from '@alifd/next';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            maxLength: 10,\n            control: 'maxLen control'\n        };\n    }\n\n    onChange(v) {\n        console.log(v);\n        this.setState({\n            control: v\n        });\n    }\n\n    onKeyDown(e, opts) {\n        console.log('onKeyDown', opts);\n    }\n\n    render() {\n        return (<div>\n            <Input\n                maxLength={10}\n                size=\"large\"\n                placeholder=\"Large\"\n                value={this.state.control}\n                hasLimitHint\n                aria-label=\"input max length 10\"\n                onChange={this.onChange.bind(this)}\n                onKeyDown={this.onKeyDown.bind(this)} /><br /><br />\n\n            <Input\n                maxLength={20}\n                placeholder=\"medium\"\n                hasLimitHint\n                cutString={false}\n                aria-label=\"input max length 20\"\n                onChange={(v) => {\n                    this.setState({control: v});\n                    console.log(v);\n                }}\n                onKeyDown={(e, opts) => {\n                    console.log('onKeyDown', opts);\n                }} /><br /><br />\n\n            <Input\n                hasLimitHint\n                size=\"small\"\n                placeholder=\"small\"\n                maxLength={100}\n                aria-label=\"input max length 100\" /><br /><br />\n\n            <Input.TextArea\n                placeholder=\"TextArea\"\n                maxLength={100}\n                rows={4}\n                hasLimitHint\n                aria-label=\"input max length 100\" /><br /><br />\n\n            <Input maxLength={5} placeholder=\"Original maxLength\" aria-label=\"input max length 5\" />\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>最大长度 hasLimitHint 会展现限制数字; cutString 可控制是否要切割字符串, 用于只展示最大长度</p>\n"
      },
      {
        "title": "密码输入框",
        "order": "1",
        "jsx": "import { Input } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Input htmlType=\"password\" defaultValue=\"whoami\" aria-label=\"Please input password\"/>\n    </div>\n    , mountNode);\n",
        "css": "",
        "body": "\n<p>设置 <code>Input</code> 为 密码类型；</p>\n"
      },
      {
        "title": "错误状态",
        "order": "4",
        "jsx": "import { Input } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Input state=\"error\"\n            placeholder=\"error\"\n            size=\"small\"\n            aria-live=\"assertive\"\n            aria-label=\"error\" /><br/><br/>\n        <Input state=\"error\"\n            hasLimitHint\n            maxLength={100}\n            placeholder=\"error\"\n            size=\"medium\"\n            aria-live=\"assertive\"\n            aria-label=\"error\" /><br/><br/>\n        <Input state=\"error\"\n            multiple\n            placeholder=\"error\"\n            size=\"small\"\n            aria-live=\"assertive\"\n            aria-label=\"error\" /><br/><br/>\n\n        <Input state=\"success\"\n            size=\"small\"\n            value=\"success\"\n            aria-live=\"assertive\"\n            aria-label=\"success\"/><br/><br/>\n        <Input state=\"success\"\n            maxLength={100}\n            hasLimitHint\n            placeholder=\"success\"\n            size=\"medium\"\n            aria-live=\"assertive\"\n            aria-label=\"success\"/><br/><br/>\n        <Input state=\"success\"\n            placeholder=\"success\"\n            size=\"large\"\n            aria-live=\"assertive\"\n            aria-label=\"success\"/><br/><br/>\n\n        <Input state=\"loading\"\n            placeholder=\"loading\"\n            size=\"small\"\n            aria-live=\"assertive\"\n            aria-label=\"loading\"/><br/><br/>\n        <Input state=\"loading\"\n            placeholder=\"loading\"\n            size=\"medium\"\n            aria-live=\"assertive\"\n            aria-label=\"loading\"/><br/><br/>\n        <Input state=\"loading\"\n            placeholder=\"loading\"\n            size=\"large\"\n            aria-live=\"assertive\"\n            aria-label=\"loading\"/><br/><br/>\n    </div>\n    , mountNode);\n",
        "css": "",
        "body": "\n<p>为 <code>Input</code> 设置 <code>error</code> 状态；</p>\n"
      },
      {
        "title": "自定义样式",
        "order": "11",
        "jsx": "import { Input } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Input placeholder=\"width:400\" style={{width: 400}} aria-label=\"style width 400\" /><br/><br/>\n\n        <Input\n            addonTextBefore=\"http://\"\n            addonTextAfter=\".com\"\n            size=\"medium\"\n            value=\"alibaba\"\n            style={{width: 400}} aria-label=\"style width 400\" /><br/><br/>\n\n        <Input\n            placeholder=\"medium\"\n            maxLength={10}\n            hasLimitHint\n            style={{width: 400}} aria-label=\"style width 400\" /><br/><br/>\n\n        <Input\n            placeholder=\"medium\"\n            hasClear maxLength={10}\n            hasLimitHint style={{width: 400}}\n            className=\"my-input-class\"\n            state=\"success\"\n            aria-label=\"style width 400\" /><br/><br/>\n\n        <Input placeholder=\"className\" className=\"my-input-class\" aria-label=\"custom my input class\" />\n        <Input htmlType=\"hidden\" aria-label=\"hidden input\" />\n    </div>\n    , mountNode);\n",
        "css": "body .my-input-class {\n    width:500px;\n}\n",
        "body": "\n<p>通过style设置宽度</p>\n"
      },
      {
        "title": "去除空格",
        "order": "6",
        "jsx": "import { Input } from '@alifd/next';\n\nclass App extends React.Component {\n    state = {\n        value: ''\n    }\n\n    onChange(value) {\n        console.log('onChange', value);\n        this.setState({\n            value\n        });\n    }\n\n    onKeyDown(e, opts) {\n        console.log('onKeyDown', opts);\n    }\n\n    render() {\n        return (<div>\n            <Input trim placeholder=\"cant not input space\" aria-label=\"cant not input space\"\n                onChange={this.onChange.bind(this)}\n                onKeyDown={this.onKeyDown.bind(this)} />\n        </div>);\n    }\n}\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>onChange返回会自动去除头尾空字符</p>\n"
      }
    ]
  },
  {
    "name": "Loading",
    "category": "Components",
    "title": "加载",
    "type": "基本",
    "importStatement": "import { Loading } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。\n\n### 注意事项\n\nLoading 默认使用 `display='inline-block'` 布局的方式包裹内部元素。\n\n如果希望 `通栏包裹` 可以修改 `<Loading style={{display: 'block'}} />`\n\n API\n\n### Loading\n\n| 参数         | 说明                                                               | 类型      | 默认值      |\n| ---------- | ---------------------------------------------------------------- | ------- | -------- |\n| tip        | 自定义内容                                                            | any     | -        |\n| size       | 设置动画尺寸<br><br>**可选值**:<br>'large'(大号)<br>'medium'(中号)            | Enum    | 'large'  |\n| tipAlign   | 自定义内容位置<br><br>**可选值**:<br>'right'(出现在动画右边)<br>'bottom'(出现在动画下面) | Enum    | 'bottom' |\n| visible    | loading 状态, 默认 true                                              | Boolean | true     |\n| indicator  | 自定义动画                                                            | any     | -        |\n| color      | 动画颜色                                                             | String  | -        |\n| fullScreen | 全屏展示                                                             | Boolean | -        |\n| children   | 子元素                                                              | any     | -        |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本用法",
        "order": "0",
        "jsx": "import { Loading } from '@alifd/next';\n\nReactDOM.render(<Loading tip=\"loading...\">\n    <div className=\"demo\">test</div>\n</Loading>, mountNode);\n",
        "css": ".demo {\n    width: 500px;\n    background-color: #F2F3F7;\n    text-align: center;\n    padding:50px;\n}\n",
        "body": "\n<p>最简单的用法。</p>\n"
      },
      {
        "title": "全屏",
        "order": "3",
        "jsx": "import { Loading, Button } from '@alifd/next';\n\n\n\nclass App extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            visible: false\n        };\n    }\n\n    onClick() {\n        this.setState({visible: !this.state.visible});\n    }\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    }\n\n    render() {\n        return (\n            <span>\n                <Loading visible={this.state.visible} fullScreen shape=\"fusion-reactor\"\n                    onVisibleChange={this.onClose.bind(this)}>\n                    <Button onClick={this.onClick.bind(this)} >Full Screen</Button>\n                </Loading>\n            </span>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>全屏展示</p>\n"
      },
      {
        "title": "自定义Loading动画",
        "order": "1",
        "jsx": "import { Loading } from '@alifd/next';\n\nconst indicator1 = (<div className=\"load-container load1\">\n    <div className=\"loader\">loading...</div>\n</div>);\nconst indicator7 = (<div className=\"load-container load7\">\n    <div className=\"loader\">loading...</div>\n</div>);\n\nReactDOM.render(<div>\n    <Loading tip=\"default animation\">\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading indicator={indicator1}>\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading indicator={indicator7}>\n        <div className=\"demo\">test</div>\n    </Loading>\n</div>, mountNode);\n",
        "css": ".demo {\n    width: 500px;\n    background-color: #F2F3F7;\n    text-align: center;\n    padding:50px;\n}\n.next-loading {\n    margin-bottom: 5px;\n}\n\n/* start copy from here */\n\n\n.load-container {\n  margin: 0 auto;\n  position: relative;\n}\n\n/* animation 1 */\n.load1 .loader,\n.load1 .loader:before,\n.load1 .loader:after {\n  background: #5584FF;\n  color: #5584FF;\n  -webkit-animation: load1 1s infinite ease-in-out;\n  animation: load1 1s infinite ease-in-out;\n  width: 1em;\n  height: 4em;\n}\n.load1 .loader:before,\n.load1 .loader:after {\n  position: absolute;\n  top: 0;\n  content: '';\n}\n.load1 .loader:before {\n  left: -1.5em;\n  -webkit-animation-delay: -0.32s;\n  animation-delay: -0.32s;\n}\n.load1 .loader {\n  text-indent: -9999em;\n  margin: 0 auto !important;\n  position: relative;\n  font-size: 11px;\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n}\n.load1 .loader:after {\n  left: 1.5em;\n}\n@-webkit-keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 ;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em ;\n    height: 5em;\n  }\n}\n@keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 ;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em ;\n    height: 5em;\n  }\n}\n\n\n/* animation 2 */\n.load7 .loader:before,\n.load7 .loader:after,\n.load7 .loader {\n  border-radius: 50%;\n  width: 2.5em;\n  height: 2.5em;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation: load7 1.8s infinite ease-in-out;\n  animation: load7 1.8s infinite ease-in-out;\n  top: -36px;\n}\n.load7 .loader {\n  margin: 0 auto !important;\n  font-size: 10px;\n  position: relative;\n  text-indent: -9999em;\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n}\n.load7 .loader:before {\n  left: -3.5em;\n  -webkit-animation-delay: -0.32s;\n  animation-delay: -0.32s;\n}\n.load7 .loader:after {\n  left: 3.5em;\n}\n.load7 .loader:before,\n.load7 .loader:after {\n  content: '';\n  position: absolute;\n  top: 0;\n}\n@-webkit-keyframes load7 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 2.5em 0 -1.3em #5584FF;\n  }\n  40% {\n    box-shadow: 0 2.5em 0 0 #5584FF;\n  }\n}\n@keyframes load7 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 2.5em 0 -1.3em #5584FF;\n  }\n  40% {\n    box-shadow: 0 2.5em 0 0 #5584FF;\n  }\n}\n",
        "body": "\n<p>你可以自定义动画，把自己的动画元素传进去, 需要自己写动画样式</p>\n"
      },
      {
        "title": "Loading动画尺寸",
        "order": "6",
        "jsx": "import { Loading } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Loading tip=\"normal(size default large)\" >\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading tip=\"large\" size=\"large\">\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading tip=\"medium\" size=\"medium\">\n        <div className=\"demo\">test</div>\n    </Loading>\n</div>, mountNode);\n",
        "css": ".demo {\n    width: 500px;\n    background-color: #F2F3F7;\n    text-align: center;\n    padding:50px;\n}\n.next-loading {\n    margin-bottom: 5px;\n}\n",
        "body": "\n<p>设置Loading动画的尺寸,只对原生的indicator管用</p>\n"
      },
      {
        "title": "关闭加载",
        "order": "2",
        "jsx": "import { Loading, Form, Input, Button } from '@alifd/next';\n\n\nconst FormItem = Form.Item;\n\nconst layout = {\n    labelCol: {\n        fixedSpan: 4\n    },\n    wrapperCol: {\n        span: 18\n    }\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false\n        };\n    }\n\n    setVisible(visible) {\n        this.setState({\n            visible\n        });\n    }\n    render() {\n        return (<div>\n            <Loading visible={this.state.visible} shape=\"fusion-reactor\">\n                <Form style={{width: 500}}>\n                    <FormItem label=\"Username\" {...layout} >\n                        <Input />\n                    </FormItem>\n                    <FormItem label=\"Password\"  {...layout} >\n                        <Input htmlType=\"password\" placeholder=\"please input\"/>\n                    </FormItem>\n                    <FormItem label=\"Detail\" {...layout} >\n                        <Input multiple  />\n                    </FormItem>\n                </Form>\n            </Loading>\n            <div style={{paddingLeft: 80}}>\n                <Button onClick={this.setVisible.bind(this, true)} type=\"primary\">Submit</Button>\n                <Button onClick={this.setVisible.bind(this, false)} style={{marginLeft: 5}}>Cancel</Button>\n            </div>\n        </div>);\n    }\n}\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>可切换加载状态。</p>\n"
      },
      {
        "title": "自定义提示语位置",
        "order": "5",
        "jsx": "import { Loading } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Loading tip=\"default\">\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading tip=\"right\" tipAlign=\"right\">\n        <div className=\"demo\">test</div>\n    </Loading>\n    <Loading tip=\"bottom\" tipAlign=\"bottom\">\n        <div className=\"demo\">test</div>\n    </Loading>\n</div>, mountNode);\n",
        "css": ".demo {\n    width: 500px;\n    background-color: #F2F3F7;\n    text-align: center;\n    padding:50px;\n}\n.next-loading {\n    margin-bottom: 5px;\n}\n",
        "body": "\n<p>你可以选择提示语的位置,目前支持两个值 right/bottom(默认值)</p>\n"
      }
    ]
  },
  {
    "name": "MenuButton",
    "category": "Components",
    "title": "菜单按钮",
    "type": "基本",
    "importStatement": "import { MenuButton } from '@alifd/next';",
    "body": "\n## 使用指南\n\n1.  通过触发按钮打开弹层菜单。支持透传所有的 Button 属性。\n2.  子组件 `Item`, `Group`, `Divider` 即 `Menu` 中对应的子组件，请参考 Menu 文档。\n\n API\n\n### MenuButton\n\n| 参数                  | 说明                                                    | 类型        | 默认值       |\n| ------------------- | ----------------------------------------------------- | --------- | --------- |\n| label               | 按钮上的文本内容                                              | ReactNode | -         |\n| autoWidth           | 弹层是否与按钮宽度相同                                           | Boolean   | true      |\n| popupTriggerType    | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'            | Enum      | 'click'   |\n| popupContainer      | 弹层容器<br><br>**签名**:<br>Function() => void             | Function  | -         |\n| visible             | 弹层展开状态                                                | Boolean   | -         |\n| defaultVisible      | 弹层默认是否展开                                              | Boolean   | -         |\n| onVisibleChange     | 弹层在显示和隐藏触发的事件<br><br>**签名**:<br>Function() => void    | Function  | func.noop |\n| popupStyle          | 弹层自定义样式                                               | Object    | -         |\n| popupClassName      | 弹层自定义样式类                                              | String    | -         |\n| popupProps          | 弹层属性透传                                                | Object    | -         |\n| defaultSelectedKeys | 默认激活的菜单项（用法同 Menu 非受控）                                | Array     | \\[]       |\n| selectedKeys        | 激活的菜单项（用法同 Menu 受控）                                   | Array     | -         |\n| selectMode          | 菜单的选择模式，同 Menu                                        | String    | -         |\n| onItemClick         | 点击菜单项后的回调，同 Menu<br><br>**签名**:<br>Function() => void | Function  | func.noop |\n| onSelect            | 选择菜单后的回调，同 Menu<br><br>**签名**:<br>Function() => void  | Function  | func.noop |\n| menuProps           | 菜单属性透传                                                | Object    | {}        |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { MenuButton } from '@alifd/next';\n\nconst { Item } = MenuButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nReactDOM.render(<div>\n    <MenuButton label=\"Document Edit\">{menu}</MenuButton>&nbsp;&nbsp;\n    <MenuButton type=\"primary\" label=\"Document Edit\">{menu}</MenuButton>&nbsp;&nbsp;\n    <MenuButton type=\"secondary\" label=\"Document Edit\">{menu}</MenuButton><br /><br />\n    <MenuButton text label=\"Document Edit\">{menu}</MenuButton>&nbsp;&nbsp;\n    <MenuButton text type=\"primary\" label=\"Document Edit\">{menu}</MenuButton>&nbsp;&nbsp;\n    <MenuButton text type=\"secondary\" label=\"Document Edit\">{menu}</MenuButton>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的用法。支持 Button 的 shape, type, size, component, ghost 等属性透传。</p>\n"
      },
      {
        "title": "菜单组",
        "order": "2",
        "jsx": "import { MenuButton } from '@alifd/next';\n\nconst { Item, Group, Divider } = MenuButton;\n\nfunction selectItem(id) {\n    console.log(id);\n}\n\nReactDOM.render(<MenuButton type=\"primary\" label=\"Document Edit\" onItemClick={selectItem}>\n    <Item key=\"undo\">Undo</Item>\n    <Item key=\"redo\">Redo</Item>\n    <Divider />\n    <Group>\n        <Item key=\"cut\">Cut</Item>\n        <Item key=\"copy\">Copy</Item>\n        <Item key=\"paste\">Paste</Item>\n    </Group>\n</MenuButton>, mountNode);\n",
        "css": "",
        "body": "\n<p>支持菜单组和菜单分割线，使用方法同 <code>Menu.Group</code>, <code>Menu.Item</code>, <code>Menu.Divider</code>。</p>\n"
      },
      {
        "title": "菜单选择模式",
        "order": "3",
        "jsx": "import { MenuButton } from '@alifd/next';\n\nconst { Item } = MenuButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nReactDOM.render(<div>\n    <MenuButton label=\"Document Edit\" selectMode=\"single\" onSelect={keys => console.log(keys)}>{menu}</MenuButton>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过 selectMode 控制菜单的选择模式。</p>\n"
      },
      {
        "title": "尺寸",
        "order": "1",
        "jsx": "import { MenuButton } from '@alifd/next';\n\nconst { Item } = MenuButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nReactDOM.render(<div>\n    <MenuButton label=\"Edit Document\" size=\"small\">{menu}</MenuButton> &nbsp; &nbsp;\n    <MenuButton label=\"Edit Document\" size=\"medium\">{menu}</MenuButton> &nbsp; &nbsp;\n    <MenuButton label=\"Edit Document\" size=\"large\">{menu}</MenuButton>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 size 属性改变按钮大小。</p>\n"
      }
    ]
  },
  {
    "name": "Menu",
    "category": "Components",
    "title": "菜单",
    "type": "展示",
    "importStatement": "import { Menu } from '@alifd/next';",
    "body": "\n API\n\n### Menu\n\n| 参数                  | 说明                                                                                                                                                                                                                                                                                                                                                              | 类型              | 默认值        |\n| ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- | ---------- |\n| children            | 菜单项和子菜单                                                                                                                                                                                                                                                                                                                                                         | ReactNode       | -          |\n| onItemClick         | 点击菜单项触发的回调函数<br><br>**签名**:<br>Function(key: String, item: Object, event: Object) => void<br>**参数**:<br>_key_: {String} 点击的菜单项的 key 值<br>_item_: {Object} 点击的菜单项对象<br>_event_: {Object} 点击的事件对象                                                                                                                                                                 | Function        | () => {}   |\n| openKeys            | 当前打开的子菜单的 key 值                                                                                                                                                                                                                                                                                                                                                 | String/Array    | -          |\n| defaultOpenKeys     | 初始打开的子菜单的 key 值                                                                                                                                                                                                                                                                                                                                                 | String/Array    | \\[]        |\n| defaultOpenAll      | 初始展开所有的子菜单，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效，优先级高于 defaultOpenKeys                                                                                                                                                                                                                                                                            | Boolean         | false      |\n| onOpen              | 打开或关闭子菜单触发的回调函数<br><br>**签名**:<br>Function(key: String, extra: Object) => void<br>**参数**:<br>_key_: {String} 打开的所有子菜单的 key 值<br>_extra_: {Object} 额外参数<br>_extra.key_: {String} 当前操作子菜单的 key 值<br>_extra.open_: {Boolean} 是否是打开                                                                                                                                 | Function        | () => {}   |\n| mode                | 子菜单打开的模式<br><br>**可选值**:<br>'inline', 'popup'                                                                                                                                                                                                                                                                                                                   | Enum            | 'inline'   |\n| triggerType         | 子菜单打开的触发行为<br><br>**可选值**:<br>'click', 'hover'                                                                                                                                                                                                                                                                                                                  | Enum            | 'click'    |\n| openMode            | 展开内连子菜单的模式，同时可以展开一个子菜单还是多个子菜单，该属性仅在 mode 为 inline 时生效<br><br>**可选值**:<br>'single', 'multiple'                                                                                                                                                                                                                                                                   | Enum            | 'multiple' |\n| inlineIndent        | 内连子菜单缩进距离                                                                                                                                                                                                                                                                                                                                                       | Number          | 20         |\n| popupAutoWidth      | 是否自动让弹层的宽度和菜单项保持一致，如果弹层的宽度比菜单项小则和菜单项保持一致，如果宽度大于菜单项则不做处理                                                                                                                                                                                                                                                                                                         | Boolean         | false      |\n| popupAlign          | 弹层的对齐方式<br><br>**可选值**:<br>'follow', 'outside'                                                                                                                                                                                                                                                                                                                  | Enum            | 'follow'   |\n| popupProps          | 弹层自定义 props                                                                                                                                                                                                                                                                                                                                                     | Object/Function | {}         |\n| popupClassName      | 弹出子菜单自定义 className                                                                                                                                                                                                                                                                                                                                              | String          | -          |\n| popupStyle          | 弹出子菜单自定义 style                                                                                                                                                                                                                                                                                                                                                  | Object          | -          |\n| selectedKeys        | 当前选中菜单项的 key 值                                                                                                                                                                                                                                                                                                                                                  | String/Array    | -          |\n| defaultSelectedKeys | 初始选中菜单项的 key 值                                                                                                                                                                                                                                                                                                                                                  | String/Array    | \\[]        |\n| onSelect            | 选中或取消选中菜单项触发的回调函数<br><br>**签名**:<br>Function(selectedKeys: Array, item: Object, extra: Object) => void<br>**参数**:<br>_selectedKeys_: {Array} 选中的所有菜单项的值<br>_item_: {Object} 选中或取消选中的菜单项<br>_extra_: {Object} 额外参数<br>_extra.select_: {Boolean} 是否是选中<br>_extra.key_: {Array} 菜单项的 key<br>_extra.label_: {Object} 菜单项的文本<br>_extra.keyPath_: {Array} 菜单项 key 的路径 | Function        | () => {}   |\n| selectMode          | 选中模式，单选还是多选，默认无值，不可选<br><br>**可选值**:<br>'single', 'multiple'                                                                                                                                                                                                                                                                                                    | Enum            | -          |\n| shallowSelect       | 是否只能选择第一层菜单项（不能选择子菜单中的菜单项）                                                                                                                                                                                                                                                                                                                                      | Boolean         | false      |\n| hasSelectedIcon     | 是否显示选中图标，如果设置为 false 需配合配置平台设置选中时的背景色以示区分                                                                                                                                                                                                                                                                                                                       | Boolean         | true       |\n| direction           | 菜单第一层展示方向<br><br>**可选值**:<br>'ver', 'hoz'                                                                                                                                                                                                                                                                                                                       | Enum            | 'ver'      |\n| hozAlign            | 横向菜单条 item 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效<br><br>**可选值**:<br>'left', 'right'                                                                                                                                                                                                                                                              | Enum            | 'left'     |\n| header              | 自定义菜单头部                                                                                                                                                                                                                                                                                                                                                         | ReactNode       | -          |\n| footer              | 自定义菜单尾部                                                                                                                                                                                                                                                                                                                                                         | ReactNode       | -          |\n| autoFocus           | 是否自动获得焦点                                                                                                                                                                                                                                                                                                                                                        | Boolean         | false      |\n| focusedKey          | 当前获得焦点的子菜单或菜单项 key 值                                                                                                                                                                                                                                                                                                                                            | String          | -          |\n\n### Menu.Item\n\n| 参数       | 说明      | 类型        | 默认值   |\n| -------- | ------- | --------- | ----- |\n| disabled | 是否禁用    | Boolean   | false |\n| helper   | 帮助文本    | ReactNode | -     |\n| children | 菜单项标签内容 | ReactNode | -     |\n\n### Menu.SubMenu\n\n| 参数         | 说明                                                               | 类型        | 默认值             |\n| ---------- | ---------------------------------------------------------------- | --------- | --------------- |\n| label      | 标签内容                                                             | ReactNode | -               |\n| selectable | 是否可选，该属性仅在设置 Menu 组件 selectMode 属性后生效                            | Boolean   | false           |\n| mode       | 子菜单打开方式，如果设置会覆盖 Menu 上的同名属性<br><br>**可选值**:<br>'inline', 'popup' | Enum      | Menu 的 mode 属性值 |\n| children   | 菜单项或下一级子菜单                                                       | ReactNode | -               |\n\n### Menu.PopupItem\n\n| 参数       | 说明      | 类型        | 默认值 |\n| -------- | ------- | --------- | --- |\n| label    | 标签内容    | ReactNode | -   |\n| children | 自定义弹层内容 | ReactNode | -   |\n\n### Menu.CheckboxItem\n\n> 该子组件选中情况不受 defaultSelectedKeys/selectedKeys 控制，请自行控制选中逻辑\n\n| 参数            | 说明                                                                                                                                                     | 类型        | 默认值      |\n| ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ | --------- | -------- |\n| checked       | 是否选中                                                                                                                                                   | Boolean   | false    |\n| indeterminate | 是否半选中                                                                                                                                                  | Boolean   | false    |\n| disabled      | 是否禁用                                                                                                                                                   | Boolean   | false    |\n| onChange      | 选中或取消选中触发的回调函数<br><br>**签名**:<br>Function(checked: Boolean, event: Object) => void<br>**参数**:<br>_checked_: {Boolean} 是否选中<br>_event_: {Object} 选中事件对象 | Function  | () => {} |\n| helper        | 帮助文本                                                                                                                                                   | ReactNode | -        |\n| children      | 标签内容                                                                                                                                                   | ReactNode | -        |\n\n### Menu.RadioItem\n\n> 该子组件选中情况不受 defaultSelectedKeys/selectedKeys 控制，请自行控制选中逻辑\n\n| 参数       | 说明                                                                                                                                                     | 类型        | 默认值      |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ | --------- | -------- |\n| checked  | 是否选中                                                                                                                                                   | Boolean   | false    |\n| disabled | 是否禁用                                                                                                                                                   | Boolean   | false    |\n| onChange | 选中或取消选中触发的回调函数<br><br>**签名**:<br>Function(checked: Boolean, event: Object) => void<br>**参数**:<br>_checked_: {Boolean} 是否选中<br>_event_: {Object} 选中事件对象 | Function  | () => {} |\n| helper   | 帮助文本                                                                                                                                                   | ReactNode | -        |\n| children | 标签内容                                                                                                                                                   | ReactNode | -        |\n\n### Menu.Group\n\n| 参数       | 说明   | 类型        | 默认值 |\n| -------- | ---- | --------- | --- |\n| label    | 标签内容 | ReactNode | -   |\n| children | 菜单项  | ReactNode | -   |\n\n### Menu.Divider\n\n<!-- api-extra-start -->\n\n### Menu.create(props)\n\n创建上下文菜单。\n\n-   props 参数可传入 Menu 所有支持的 props\n-   props 额外支持 overlayProps，用来自定义 Menu 所在的弹层\n\n<!-- api-extra-end -->\n\n## ARIA and KeyBoard\n\n| 按键          | 说明                              |\n| :---------- | :------------------------------ |\n| Up Arrow    | 导航到上一项                          |\n| Down Arrow  | 导航到下一项                          |\n| Right Arrow | 打开子菜单，导航到子菜单第一项；横向菜单条第一层，导航到右一项 |\n| Left Arrow  | 关闭子菜单，导航到父级菜单；横向菜单条第一层，导航都左一项   |\n| Enter       | 打开子菜单，导航到子菜单第一项                 |\n| Esc         | 关闭子菜单，导航到父级菜单                   |\n| SPACE       | 切换选中状态                          |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "内连菜单展开模式",
        "order": "1",
        "jsx": "import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item } = Menu;\n\nReactDOM.render(\n    <Menu defaultOpenKeys=\"1\" className=\"my-menu\" openMode=\"single\">\n        <SubMenu key=\"0\" label=\"Sub menu 1\">\n            <Item key=\"0-0\">Sub option 1</Item>\n            <Item key=\"0-1\">Sub option 2</Item>\n            <Item key=\"0-2\">Sub option 3</Item>\n        </SubMenu>\n        <SubMenu key=\"1\" label=\"Sub menu 2\">\n            <Item key=\"1-0\">Sub option 1</Item>\n            <Item key=\"1-1\">Sub option 2</Item>\n            <Item key=\"1-2\">Sub option 3</Item>\n        </SubMenu>\n        <SubMenu key=\"2\" label=\"Sub menu 3\">\n            <Item key=\"2-0\">Sub option 1</Item>\n            <Item key=\"2-1\">Sub option 2</Item>\n            <Item key=\"2-2\">Sub option 3</Item>\n        </SubMenu>\n        <SubMenu key=\"3\" label=\"Sub menu 4\">\n            <Item key=\"3-0\">Sub option 1</Item>\n            <Item key=\"3-1\">Sub option 2</Item>\n            <Item key=\"3-2\">Sub option 3</Item>\n        </SubMenu>\n    </Menu>\n    , mountNode);\n",
        "css": ".my-menu {\n    width: 200px;\n}\n",
        "body": "\n<p>通过设置 openMode 为 &#39;single&#39;，可以让菜单同时只能展开一个内连子菜单，默认为可以同时展开多个。</p>\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item, Group, Divider } = Menu;\n\nReactDOM.render(\n    <Menu className=\"my-menu\" defaultOpenKeys=\"sub-menu\">\n        <Item key=\"1\">Option 1</Item>\n        <Item disabled key=\"2\">Disabled option 2</Item>\n        <Divider key=\"divider\" />\n        <Group label=\"Group\">\n            <Item key=\"group-1\">Group option 1</Item>\n            <Item key=\"group-2\">Group option 2</Item>\n        </Group>\n        <Divider />\n        <SubMenu key=\"sub-menu\" label=\"Sub menu\">\n            <Item key=\"sub-1\">Sub option 1</Item>\n            <Item key=\"sub-2\">Sub option 2</Item>\n            <Item disabled key=\"sub-3\">\n                <a href=\"https://www.taobao.com/\" target=\"__blank\">Disabled Option Link 3</a>\n            </Item>\n            <Item key=\"sub-4\">\n                <a href=\"https://www.taobao.com/\" target=\"__blank\">Option Link 4</a>\n            </Item>\n        </SubMenu>\n        <Item key=\"3\" helper=\"CTRL+P\">Option 3</Item>\n        <Item disabled key=\"4\">\n            <a href=\"https://www.taobao.com/\" target=\"__blank\">Disabled Option Link</a>\n        </Item>\n        <Item key=\"5\">\n            <a href=\"https://www.taobao.com/\" target=\"__blank\">Option Link</a>\n        </Item>\n    </Menu>\n    , mountNode);\n",
        "css": ".my-menu {\n    width: 200px;\n}\n",
        "body": "\n<p>展示最基本的用法。</p>\n"
      },
      {
        "title": "创建上下文菜单",
        "order": "9",
        "jsx": "import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item, Divider } = Menu;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedKeys: []\n        };\n\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(selectedKeys) {\n        selectedKeys = selectedKeys.filter(key => {\n            return ['sub-1', 'sub-2'].indexOf(key) > -1;\n        });\n        this.setState({\n            selectedKeys\n        });\n    }\n\n    createContextMenu = e => {\n        e.preventDefault();\n\n        const target = e.target;\n        const { top, left } = target.getBoundingClientRect();\n\n        Menu.create({\n            target: e.target,\n            offset: [e.clientX - left, e.clientY - top],\n            className: 'context-menu',\n            popupClassName: 'context-menu',\n            onItemClick: console.log,\n            selectedKeys: this.state.selectedKeys,\n            selectMode: 'multiple',\n            onSelect: this.handleSelect,\n            children: [\n                <Item key=\"1\">Option 1</Item>,\n                <Item key=\"2\">Option 2</Item>,\n                <Item key=\"3\">Option 3</Item>,\n                <Divider key=\"divider-1\" />,\n                <SubMenu key=\"sub-menu\" label=\"Sub menu\">\n                    <Item key=\"sub-1\">Sub option 1</Item>\n                    <Item key=\"sub-2\">Sub option 2</Item>\n                </SubMenu>,\n                <Item key=\"4\">Option 4</Item>,\n                <Divider key=\"divider-2\" />,\n                <Item key=\"5\">Option 5</Item>\n            ]\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"context-demo\" onContextMenu={this.createContextMenu}>\n                Right click here to see the context menu!\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".context-demo {\n    width: 500px;\n    height: 200px;\n    line-height: 200px;\n    text-align: center;\n    background: #DDD;\n    border: 1px solid black;\n}\n\n.context-menu {\n    width: 120px;\n}\n",
        "body": "\n<p>展示如何创建自定义的上下文菜单。</p>\n"
      },
      {
        "title": "自定义菜单项选择",
        "order": "7",
        "jsx": "import { Menu } from '@alifd/next';\n\nconst { CheckboxItem, RadioItem, Divider } = Menu;\n\nconst sexs = ['male', 'female'];\nconst balls = ['football', 'basketball', 'volleyball'];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            sex: 'male',\n            balls: []\n        };\n\n        this.handleSexCheck = this.handleSexCheck.bind(this);\n        this.handleBallCheck = this.handleBallCheck.bind(this);\n    }\n\n    handleSexCheck(key) {\n        this.setState({\n            sex: key\n        });\n    }\n\n    handleBallCheck(key, check) {\n        let newKeys;\n        const index = this.state.balls.indexOf(key);\n        if (check && index === -1) {\n            newKeys = this.state.balls.concat(key);\n        } else if (!check && index > -1) {\n            newKeys = [\n                ...this.state.balls.slice(0, index),\n                ...this.state.balls.slice(index + 1)\n            ];\n        }\n\n        if (newKeys) {\n            this.setState({\n                balls: newKeys\n            });\n        }\n    }\n\n    render() {\n        return (\n            <Menu className=\"my-menu\">\n                {sexs.map(sex => (\n                    <RadioItem key={sex} checked={this.state.sex === sex} onChange={this.handleSexCheck.bind(this, sex)}>\n                        {sex}\n                    </RadioItem>\n                ))}\n                <Divider key=\"divider\" />\n                {balls.map(ball => (\n                    <CheckboxItem key={ball} checked={this.state.balls.indexOf(ball) > -1} onChange={this.handleBallCheck.bind(this, ball)}>\n                        {ball}\n                    </CheckboxItem>\n                ))}\n            </Menu>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".my-menu {\n    width: 200px;\n}\n",
        "body": "\n<p>展示自定义组合菜单项可选的用法。</p>\n"
      },
      {
        "title": "自定义弹出内容",
        "order": "5",
        "jsx": "import { Menu } from '@alifd/next';\n\nconst { PopupItem } = Menu;\n\nclass Demo extends React.Component {\n    render() {\n        const popupProps = {\n            target: () => ReactDOM.findDOMNode(this),\n            offset: [-1, 0],\n            animation: false\n        };\n\n        return (\n            <Menu className=\"my-custom-menu\" popupProps={popupProps}>\n                <PopupItem key=\"0\" label=\"Popup item 1\">\n                    <div className=\"my-custom-content\">Custom content 1</div>\n                </PopupItem>\n                <PopupItem key=\"1\" label=\"Popup item 2\">\n                    <div className=\"my-custom-content\">Custom content 2</div>\n                </PopupItem>\n                <PopupItem key=\"2\" label=\"Popup item 3\">\n                    <div className=\"my-custom-content\">Custom content 3</div>\n                </PopupItem>\n                <PopupItem key=\"3\" label=\"Popup item 4\">\n                    <div className=\"my-custom-content\">Custom content 4</div>\n                </PopupItem>\n            </Menu>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".my-custom-menu {\n    width: 200px;\n    border: 1px solid #ccc;\n    padding: 0;\n    box-shadow: none;\n    z-index: 1000;\n}\n\n.my-custom-content {\n    width: 400px;\n    height: 200px;\n    background: #fff;\n    border: 1px solid #ccc;\n    line-height: 200px;\n    text-align: center;\n    font-size: 20px;\n}\n",
        "body": "\n<p>自定义菜单弹出内容。</p>\n"
      },
      {
        "title": "hover 打开子菜单",
        "order": "3",
        "jsx": "import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item, Divider } = Menu;\n\nReactDOM.render(\n    <Menu className=\"my-menu\" mode=\"popup\" triggerType=\"hover\">\n        <Item key=\"1\">Option 1</Item>\n        <Item key=\"2\">Option 2</Item>\n        <Item key=\"3\">Option 3</Item>\n        <Divider key=\"divider\" />\n        <SubMenu key=\"sub-1\" label=\"Popup menu 1\">\n            <Item key=\"popup-1-1\">Popup option 1</Item>\n            <Item key=\"popup-1-2\">Popup option 2</Item>\n        </SubMenu>\n        <SubMenu key=\"sub-2\" label=\"Popup menu 2\">\n            <Item key=\"popup-2-1\">Popup option 1</Item>\n            <Item key=\"popup-2-2\">Popup option 2</Item>\n        </SubMenu>\n    </Menu>\n    , mountNode);\n",
        "css": ".my-menu {\n    width: 200px;\n}\n",
        "body": "\n<p>可以设置 triggerType 为 &#39;hover&#39;，来 hover 打开子菜单，默认点击打开子菜单。</p>\n"
      },
      {
        "title": "横向菜单条",
        "order": "8",
        "jsx": "import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item } = Menu;\n\nReactDOM.render(\n    <Menu header=\"aaa\" direction=\"hoz\" mode=\"popup\" className=\"my-hoz-menu\" popupClassName=\"my-hoz-menu\" popupAutoWidth>\n        <Item key=\"1\">First</Item>\n        <Item key=\"2\">Second</Item>\n        <SubMenu label=\"Sub Nav\">\n            <Item key=\"sub-1\">Sub option 1</Item>\n            <Item key=\"sub-2\">Sub option 2</Item>\n            <SubMenu label=\"Sub Sub Nav\">\n                <Item key=\"sub-sub-1\">Sub sub option 1</Item>\n                <Item key=\"sub-sub-2\">Sub sub option 2</Item>\n            </SubMenu>\n        </SubMenu>\n        <Item key=\"3\">Third</Item>\n    </Menu>\n    , mountNode);\n",
        "css": ".my-hoz-menu .next-menu-item {\n    width: 160px;\n}\n",
        "body": "\n<p>展示横向导航菜单条的用法。</p>\n"
      },
      {
        "title": "弹出菜单对齐方式",
        "order": "4",
        "jsx": "import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item, Divider } = Menu;\n\nReactDOM.render(\n    <Menu className=\"my-menu\" mode=\"popup\" popupAlign=\"outside\">\n        <Item key=\"1\">Option 1</Item>\n        <Item key=\"2\">Option 2</Item>\n        <Item key=\"3\">Option 3</Item>\n        <Divider key=\"divider\" />\n        <SubMenu key=\"sub-1\" label=\"Popup menu 1\">\n            <Item key=\"popup-1-1\">Popup option 1</Item>\n            <Item key=\"popup-1-2\">Popup option 2</Item>\n        </SubMenu>\n        <SubMenu key=\"sub-2\" label=\"Popup menu 2\">\n            <Item key=\"popup-2-1\">Popup option 1</Item>\n            <Item key=\"popup-2-2\">Popup option 2</Item>\n        </SubMenu>\n    </Menu>\n    , mountNode);\n",
        "css": ".my-menu {\n    width: 200px;\n}\n",
        "body": "\n<p>可以通过设置 popupAlign 为 &#39;outside&#39;，使弹出菜单和父级菜单对齐。</p>\n"
      },
      {
        "title": "弹出菜单",
        "order": "2",
        "jsx": "import { Menu } from '@alifd/next';\n\nconst { SubMenu, Item, Divider } = Menu;\n\nReactDOM.render(\n    <Menu className=\"my-menu\" mode=\"popup\">\n        <Item key=\"1\">Option 1</Item>\n        <Item key=\"2\">Option 2</Item>\n        <Item key=\"3\">Option 3</Item>\n        <Divider key=\"divider\" />\n        <SubMenu key=\"sub-1\" label=\"Popup menu 1\">\n            <Item key=\"popup-1-1\">Popup option 1</Item>\n            <Item key=\"popup-1-2\">Popup option 2</Item>\n        </SubMenu>\n        <SubMenu key=\"sub-2\" label=\"Popup menu 2\">\n            <Item key=\"popup-2-1\">Popup option 1</Item>\n            <Item key=\"popup-2-2\">Popup option 2</Item>\n        </SubMenu>\n    </Menu>\n    , mountNode);\n",
        "css": ".my-menu {\n    width: 200px;\n}\n",
        "body": "\n<p>展示弹出菜单的用法。</p>\n"
      },
      {
        "title": "菜单项选择",
        "order": "6",
        "jsx": "import { Switch, Menu } from '@alifd/next';\n\nconst { SubMenu, Item } = Menu;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            multiple: false,\n            subMenuSelectable: false,\n            shallowSelect: false,\n            selectedKeys: ['1']\n        };\n\n        [\n            'handleMultipleChange', 'handleSubMenuSelectableChange',\n            'handleShallowSelectChange', 'handleSelect'\n        ].forEach(method => {\n            this[method] = this[method].bind(this);\n        });\n    }\n\n    handleMultipleChange() {\n        this.setState({\n            multiple: !this.state.multiple,\n            selectedKeys: []\n        });\n    }\n\n    handleSubMenuSelectableChange() {\n        this.setState({\n            subMenuSelectable: !this.state.subMenuSelectable,\n            selectedKeys: []\n        });\n    }\n\n    handleShallowSelectChange() {\n        this.setState({\n            shallowSelect: !this.state.shallowSelect,\n            selectedKeys: []\n        });\n    }\n\n    handleSelect(selectedKeys, ...others) {\n        this.setState({\n            selectedKeys\n        });\n\n        console.log(selectedKeys, ...others);\n    }\n\n    render() {\n        const { multiple, subMenuSelectable, shallowSelect, selectedKeys } = this.state;\n        const selectMode = multiple ? 'multiple' : 'single';\n\n        return (\n            <div>\n                <div>\n                    <span className=\"my-switch-label\">Multiple </span>\n                    <Switch value={multiple} onChange={this.handleMultipleChange} />\n                </div>\n                <div>\n                    <span className=\"my-switch-label\">Label of submenu selectable </span>\n                    <Switch value={multiple} onChange={this.handleSubMenuSelectableChange} />\n                </div>\n                <div>\n                    <span className=\"my-switch-label\">Only first level selectable </span>\n                    <Switch value={multiple} onChange={this.handleShallowSelectChange} />\n                </div>\n                <Menu className=\"my-select-menu\" defaultOpenKeys={['sub']} selectMode={selectMode} selectedKeys={selectedKeys} shallowSelect={shallowSelect} onSelect={this.handleSelect}>\n                    <Item key=\"1\">Option 1</Item>\n                    <Item disabled key=\"2\">Disabled option 2</Item>\n                    <SubMenu key=\"sub\" label=\"Sub menu\" selectable={subMenuSelectable}>\n                        <Item key=\"sub-1\">Sub option 1</Item>\n                        <Item key=\"sub-2\">Sub option 2</Item>\n                    </SubMenu>\n                    <Item key=\"3\">Option 3</Item>\n                </Menu>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".my-switch-label {\n    vertical-align: super;\n}\n\n.my-select-menu {\n    margin-top: 10px;\n    width: 200px;\n}\n",
        "body": "\n<p>展示菜单项选择用法。</p>\n"
      }
    ]
  },
  {
    "name": "Message",
    "category": "Components",
    "title": "信息提示",
    "type": "展示",
    "importStatement": "import { Message } from '@alifd/next';",
    "body": "\n## 开发指南\n\n API\n\n### Message\n\n| 参数             | 说明                                                                                 | 类型        | 默认值       |\n| -------------- | ---------------------------------------------------------------------------------- | --------- | --------- |\n| size           | 反馈大小<br><br>**可选值**:<br>'medium', 'large'                                          | Enum      | 'medium'  |\n| type           | 反馈类型<br><br>**可选值**:<br>'success', 'warning', 'error', 'notice', 'help', 'loading' | Enum      | 'success' |\n| shape          | 反馈外观<br><br>**可选值**:<br>'inline', 'addon', 'toast'                                 | Enum      | 'inline'  |\n| title          | 标题                                                                                 | ReactNode | -         |\n| children       | 内容                                                                                 | ReactNode | -         |\n| defaultVisible | 默认是否显示                                                                             | Boolean   | true      |\n| visible        | 当前是否显示                                                                             | Boolean   | -         |\n| iconType       | 显示的图标类型，会覆盖内部设置的IconType                                                           | String    | -         |\n| closeable      | 显示关闭按钮                                                                             | Boolean   | false     |\n| onClose        | 关闭按钮的回调<br><br>**签名**:<br>Function() => void                                       | Function  | () => {}  |\n| afterClose     | 关闭之后调用的函数<br><br>**签名**:<br>Function() => void                                     | Function  | () => {}  |\n| animation      | 是否开启展开收起动画                                                                         | Boolean   | true      |\n\n<!-- api-extra-start -->\n\n### Message.show\n\n`Message.show(props)` 提供一个单例的调用方式，配置参数如下（继承 `Overlay` 的配置）：\n\n| 参数           | 说明                    | 类型        | 默认值       |\n| ------------ | --------------------- | --------- | --------- |\n| type         | 反馈类型                  | String    | 'success' |\n| title        | 反馈标题                  | ReactNode | -         |\n| content      | 反馈内容                  | ReactNode | -         |\n| duration     | 显示持续时间，0表示一直存在，以毫秒为单位 | Number    | 3000      |\n| align        | 对齐方式，参考Overlay        | String    | 'tc tc'   |\n| offset       | 对齐之后的偏移位置             | Array     | [0, 0]    |\n| hasMask      | 是否带有遮罩                | Boolean   | false     |\n| closeable    | 显示关闭按钮                | Boolean   | false     |\n| afterClose   | 关闭事件的回调函数             | Function  | -         |\n| overlayProps | 透传到弹层的属性对象            | Object    | -         |\n\n示例：\n\n```js\nMessage.show({\n    type: 'error',\n    title: '错误',\n    content: '请联系相关人员反馈！',\n    hasMask: true\n});\n```\n\n### Message.hide\n\n`Message.hide()` 提供关闭反馈弹层的快捷方法。\n\n### Message.[success|error|notice|help|loading]\n\n`Message.show({type: type, title: 'xxx'});` 的便捷调用方法。\n\n示例：\n\n```js\nMessage.success('反馈内容');\n\n// 或者\nMessage.success({\n    title: '反馈内容',\n    duration: 1000\n});\n```\n\n<!-- api-extra-end -->\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "受控显示隐藏",
        "order": "4",
        "jsx": "import { Message, Button } from '@alifd/next';\n\nclass App extends React.Component {\n    state = {\n        visible: true\n    }\n\n    handleChange = () => {\n        this.setState({\n            visible: !this.state.visible\n        });\n    }\n\n    handleClose = () => {\n        this.setState({\n            visible: false\n        });\n    }\n\n    render() {\n        const { visible } = this.state;\n\n        return (\n            <div className=\"control-demo\">\n                <Button onClick={this.handleChange}>Toggle Visible</Button>\n                <Message type=\"warning\" visible={visible} title=\"Warning\" closeable onClose={this.handleClose}>\n                    This item already has the label \"travel\". You can add a new label.\n                </Message>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": ".control-demo .next-btn.next-medium {\n    margin-bottom: 10px;\n}\n",
        "body": "\n"
      },
      {
        "title": "可关闭组件",
        "order": "3",
        "jsx": "import { Message } from '@alifd/next';\n\nconst onClose = () => console.log('onClose triggered!');\nconst afterClose = () => console.log('afterClose triggered!');\n\nReactDOM.render(\n    <div>\n        <Message title=\"title\" closeable onClose={onClose} afterClose={afterClose}>\n            Content Content Content Content\n        </Message>\n    </div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过增加<code>closeable</code>属性可以控制提示框是否可关闭。</p>\n"
      },
      {
        "title": "信息外观",
        "order": "1",
        "jsx": "import { Message, Radio } from '@alifd/next';\n\nconst types = ['success', 'warning', 'error', 'notice', 'help', 'loading'];\nconst list = [\n    {\n        value: 'inline',\n        label: 'inline'\n    }, {\n        value: 'addon',\n        label: 'addon'\n    }, {\n        value: 'toast',\n        label: 'toast'\n    }\n];\n\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            shape: 'inline'\n        };\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(shape) {\n        this.setState({ shape });\n    }\n\n    render() {\n        const { shape } = this.state;\n\n        return (\n            <div className=\"message-shape-demo\">\n                <span className=\"demo-label\">Select Shape：</span>\n                <Radio.Group defaultValue=\"inline\"  dataSource={list} value={this.state.shape} onChange={this.handleSelect} />\n\n\n                {types.map(type => (\n                    <Message key={type} title={type} type={type} shape={shape}>\n                        Content Content Content Content\n                    </Message>\n                ))}\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".message-shape-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 22px;\n    line-height: 22px;\n}\n\n.message-shape-demo .next-message-title {\n    text-transform: capitalize;\n}\n\n.message-shape-demo .next-message {\n    margin-top: 10px;\n}\n\n.message-shape-demo .next-message.next-message-toast {\n    position: relative !important;\n}\n",
        "body": "\n<p>通过设置<code>shape</code>调整信息外观</p>\n"
      },
      {
        "title": "信息尺寸",
        "order": "2",
        "jsx": "import { Message, Radio } from '@alifd/next';\n\nconst types = ['success', 'warning', 'error', 'notice', 'help', 'loading'];\nconst list = [\n    {\n        value: 'medium',\n        label: 'medium'\n    }, {\n        value: 'large',\n        label: 'large'\n    }\n];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            size: 'medium'\n        };\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(size) {\n        this.setState({ size });\n    }\n\n    render() {\n        const { size } = this.state;\n\n        return (\n            <div className=\"message-size-demo\">\n                <span className=\"demo-label\">Select Size：</span>\n                <Radio.Group defaultValue=\"medium\"  dataSource={list} value={this.state.size} onChange={this.handleSelect} />\n\n                {types.map(type => (\n                    <Message key={type} title={type} type={type} size={size}>\n                        Content Content Content Content\n                    </Message>\n                ))}\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".message-size-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 28px;\n    line-height: 28px;\n}\n\n.message-size-demo .next-message-title {\n    text-transform: capitalize;\n}\n\n.message-size-demo .next-message {\n    margin-top: 10px;\n}\n",
        "body": "\n<p>通过<code>size</code>设置尺寸</p>\n"
      },
      {
        "title": "弹窗便捷方法",
        "order": "6",
        "jsx": "import { Message, Button } from '@alifd/next';\n\n\nconst showSuccess = () => Message.success('success');\nconst showWarning = () => Message.warning('warning');\nconst showError = () => Message.error('error');\nconst showNotice = () => Message.notice('notice');\nconst showHelp = () => Message.help('help');\nconst showLoading = () => Message.loading('loading');\n\nReactDOM.render(\n    <div className=\"message-toast-quick-demo\">\n        <Button onClick={showSuccess}>success</Button>\n        <Button onClick={showWarning}>warning</Button>\n        <Button onClick={showError}>error</Button>\n        <Button onClick={showNotice}>notice</Button>\n        <Button onClick={showHelp}>help</Button>\n        <Button onClick={showLoading}>loading</Button>\n    </div>, mountNode);\n",
        "css": ".message-toast-quick-demo .next-btn.next-medium {\n    margin-right: 10px;\n    margin-bottom: 10px;\n}\n",
        "body": "\n<p>可以通过<code>Message.success</code>等静态方法来方便的显示指定类型的信息弹窗。</p>\n"
      },
      {
        "title": "弹窗用法",
        "order": "5",
        "jsx": "import { Message, Button } from '@alifd/next';\n\n\nconst show = () => {\n    Message.show({\n        type: 'loading',\n        content: 'Will be closed after 3 seconds or manually click on the close button',\n        afterClose: () => console.log('Closed the toast')\n    });\n};\nconst hide = () => Message.hide();\n\nReactDOM.render(\n    <div className=\"message-toast-demo\">\n        <Button onClick={show}>Show</Button>\n        <Button onClick={hide}>Hide</Button>\n    </div>, mountNode);\n",
        "css": ".message-toast-demo .next-btn.next-medium {\n    margin-right: 10px;\n}\n",
        "body": "\n<p>可以通过<code>Message.show</code>和<code>Message.hide</code>方法来方便的显示或隐藏反馈弹窗。</p>\n"
      },
      {
        "title": "信息类型",
        "order": "0",
        "jsx": "import { Message } from '@alifd/next';\n\nReactDOM.render(\n    <div className=\"message-type-demo\">\n        <Message title=\"Success\" type=\"success\">\n            Content Content Content Content\n        </Message>\n        <Message title=\"Warning\" type=\"warning\">\n            Content Content Content Content\n        </Message>\n        <Message title=\"Error\" type=\"error\">\n            Content Content Content Content\n        </Message>\n        <Message title=\"Notice\" type=\"notice\">\n            Content Content Content Content\n        </Message>\n        <Message title=\"Help\" type=\"help\">\n            Content Content Content Content\n        </Message>\n        <Message title=\"Loading\" type=\"loading\">\n            Content Content Content Content\n        </Message>\n    </div>, mountNode);\n",
        "css": ".message-type-demo .next-message {\n    margin-bottom: 10px;\n}\n",
        "body": "\n<p>通过设置<code>type</code>调整信息类型</p>\n"
      }
    ]
  },
  {
    "name": "Nav",
    "category": "Components",
    "title": "导航",
    "type": "导航",
    "importStatement": "import { Nav } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。\n\n### 注意事项\n\n-   iconOnly 只适用垂直方向。\n\n API。\n\n## API\n\n### Nav\n\n> 继承自 `Menu` 的能力请查看 `Menu` 文档\n\n| 参数                  | 说明                                                                                                                                                                                                                                                                                                                                                                 | 类型           | 默认值                                                                   |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------ | --------------------------------------------------------------------- |\n| children            | 导航项和子导航                                                                                                                                                                                                                                                                                                                                                            | ReactNode    | -                                                                     |\n| type                | 导航类型<br><br>**可选值**:<br>'normal'(普通)<br>'primary'(主要)<br>'secondary'(次要)<br>'line'(线形)                                                                                                                                                                                                                                                                             | Enum         | 'normal'                                                              |\n| direction           | 导航布局<br><br>**可选值**:<br>'hoz'(水平)<br>'ver'(垂直)                                                                                                                                                                                                                                                                                                                     | Enum         | 'ver'                                                                 |\n| hozAlign            | 横向导航条 items 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效<br><br>**可选值**:<br>'left', 'right'                                                                                                                                                                                                                                                                | Enum         | 'left'                                                                |\n| activeDirection     | 设置组件选中状态的 active 边方向<br><br>**可选值**:<br>null(无)<br>'top'(上)<br>'bottom'(下)<br>'left'(左)<br>'right'(右)                                                                                                                                                                                                                                                              | Enum         | 当 direction 为 'hoz' 时，默认值为 'bottom'，当 direction 为 'ver' 时，默认值为 'left' |\n| mode                | 子导航打开的模式（水平导航只支持弹出）<br><br>**可选值**:<br>'inline', 'popup'                                                                                                                                                                                                                                                                                                           | Enum         | 'inline'                                                              |\n| triggerType         | 子导航打开的触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                                                                                                                                                                                                                     | Enum         | 'click'                                                               |\n| inlineIndent        | 内联子导航缩进距离                                                                                                                                                                                                                                                                                                                                                          | Number       | 20                                                                    |\n| defaultOpenAll      | 初始展开所有的子导航，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效                                                                                                                                                                                                                                                                                                     | Boolean      | false                                                                 |\n| openMode            | 内联子导航的展开模式，同时可以展开一个同级子导航还是多个同级子导航，该属性仅在 mode 为 inline 时生效<br><br>**可选值**:<br>'single', 'multiple'                                                                                                                                                                                                                                                                  | Enum         | 'multiple'                                                            |\n| selectedKeys        | 当前选中导航项的 key 值                                                                                                                                                                                                                                                                                                                                                     | String/Array | -                                                                     |\n| defaultSelectedKeys | 初始选中导航项的 key 值                                                                                                                                                                                                                                                                                                                                                     | String/Array | \\[]                                                                   |\n| onSelect            | 选中或取消选中导航项触发的回调函数<br><br>**签名**:<br>Function(selectedKeys: Array, item: Object, extra: Object) => void<br>**参数**:<br>_selectedKeys_: {Array} 选中的所有导航项的 key<br>_item_: {Object} 选中或取消选中的导航项<br>_extra_: {Object} 额外参数<br>_extra.select_: {Boolean} 是否是选中<br>_extra.key_: {Array} 导航项的 key<br>_extra.label_: {Object} 导航项的文本<br>_extra.keyPath_: {Array} 导航项 key 的路径 | Function     | -                                                                     |\n| popupAlign          | 弹出子导航的对齐方式（水平导航只支持 follow ）<br><br>**可选值**:<br>'follow', 'outside'                                                                                                                                                                                                                                                                                                 | Enum         | 'follow'                                                              |\n| popupClassName      | 弹出子导航的自定义类名                                                                                                                                                                                                                                                                                                                                                        | String       | -                                                                     |\n| iconOnly            | 是否只显示图标                                                                                                                                                                                                                                                                                                                                                            | Boolean      | -                                                                     |\n| hasArrow            | 是否显示右侧的箭头（仅在 iconOnly=true 时生效）                                                                                                                                                                                                                                                                                                                                    | Boolean      | true                                                                  |\n| hasTooltip          | 是否有 ToolTips （仅在 iconOnly=true 时生效）                                                                                                                                                                                                                                                                                                                                | Boolean      | false                                                                 |\n| header              | 自定义导航头部                                                                                                                                                                                                                                                                                                                                                            | ReactNode    | -                                                                     |\n| footer              | 自定义导航尾部                                                                                                                                                                                                                                                                                                                                                            | ReactNode    | -                                                                     |\n\n### Nav.Group\n\n> 继承自 `Menu.Group` 的能力请查看 `Menu.Group` 文档\n\n| 参数       | 说明      | 类型        | 默认值 |\n| -------- | ------- | --------- | --- |\n| label    | 标签内容    | ReactNode | -   |\n| children | 导航项和子导航 | ReactNode | -   |\n\n### Nav.Item\n\n> 继承自 `Menu.Item` 的能力请查看 `Menu.Item` 文档\n\n| 参数       | 说明                                                         | 类型               | 默认值 |\n| -------- | ---------------------------------------------------------- | ---------------- | --- |\n| icon     | 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type=\"icon type\" />` | String/ReactNode | -   |\n| children | 导航内容                                                       | ReactNode        | -   |\n\n### Nav.PopupItem\n\n> 继承自 `Menu.PopupItem` 的能力请查看 `Menu.PopupItem` 文档\n\n| 参数       | 说明                                                          | 类型               | 默认值 |\n| -------- | ----------------------------------------------------------- | ---------------- | --- |\n| icon     | 自定义图标，可以使用 Icon 的 type, 也可以使用组件 `<Icon type=\"icon type\" />` | String/ReactNode | -   |\n| label    | 标签内容                                                        | ReactNode        | -   |\n| children | 弹出内容                                                        | ReactNode        | -   |\n\n### Nav.SubNav\n\n> 继承自 `Menu.SubMenu` 的能力请查看 `Menu.SubMenu` 文档\n\n| 参数         | 说明                                                         | 类型               | 默认值   |\n| ---------- | ---------------------------------------------------------- | ---------------- | ----- |\n| icon       | 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type=\"your type\" />` | String/ReactNode | -     |\n| label      | 标签内容                                                       | ReactNode        | -     |\n| selectable | 是否可选                                                       | Boolean          | false |\n| children   | 导航项和子导航                                                    | ReactNode        | -     |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Nav } from '@alifd/next';\n\n\nconst { Item, SubNav } = Nav;\n\nconst header = <span className=\"fusion\">FUSION</span>;\nconst footer = <a className=\"login-in\" href=\"javascript:;\">Login in</a>;\n\nReactDOM.render(\n    <Nav className=\"basic-nav\" direction=\"hoz\" type=\"primary\" header={header} footer={footer} defaultSelectedKeys={['home']} triggerType=\"hover\">\n        <Item key=\"home\">Home</Item>\n        <SubNav label=\"Component\" selectable>\n            <Item key=\"next\">Next</Item>\n            <Item key=\"mext\">Mext</Item>\n        </SubNav>\n        <Item key=\"document\">Document</Item>\n    </Nav>\n    , mountNode);\n",
        "css": ".basic-nav .fusion {\n    margin: 8px 20px;\n    width: 100px;\n    color: #FFFFFF;\n    font-size: 20px;\n}\n.basic-nav .login-in {\n    margin: 0 20px;\n    color: #FFFFFF;\n}\n.basic-nav .next-nav-item {\n    width: 120px;\n}\n",
        "body": "\n<p>最简单的使用方式。</p>\n"
      },
      {
        "title": "定制",
        "order": "1",
        "jsx": "import { Nav, Radio } from '@alifd/next';\n\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n    state = {\n        type: 'normal',\n        direction: 'hoz',\n        activeDirection: null,\n        triggerType: 'click'\n    }\n\n    setValue(name, value) {\n        this.setState({\n            [name]: value === '' ? null : value\n        });\n    }\n\n    setTriggerType(triggerType) {\n        this.setState({\n            triggerType\n        });\n    }\n\n    render() {\n        const { type, direction, activeDirection, triggerType } = this.state;\n\n        return (\n            <div>\n                <div className=\"demo-ctl\">\n                    <Radio.Group shape=\"button\" size=\"medium\" value={type} onChange={this.setValue.bind(this, 'type')}>\n                        <Radio value=\"normal\">type=\"normal\"</Radio>\n                        <Radio value=\"primary\">type=\"primary\"</Radio>\n                        <Radio value=\"secondary\">type=\"secondary\"</Radio>\n                        <Radio value=\"line\">type=\"line\"</Radio>\n                    </Radio.Group>\n                    <Radio.Group shape=\"button\" size=\"medium\" value={direction} onChange={this.setValue.bind(this, 'direction')}>\n                        <Radio value=\"hoz\">direction=\"hoz\"</Radio>\n                        <Radio value=\"ver\">direction=\"ver\"</Radio>\n                    </Radio.Group>\n                    <Radio.Group shape=\"button\" size=\"medium\" value={activeDirection === null ? '' : activeDirection} onChange={this.setValue.bind(this, 'activeDirection')}>\n                        <Radio value=\"\">activeDirection=null</Radio>\n                        {direction === 'hoz' ? <Radio value=\"top\">activeDirection=\"top\"</Radio> : null}\n                        {direction === 'hoz' ? <Radio value=\"bottom\">activeDirection=\"bottom\"</Radio> : null}\n                        {direction === 'ver' ? <Radio value=\"left\">activeDirection=\"left\"</Radio> : null}\n                        {direction === 'ver' ? <Radio value=\"right\">activeDirection=\"right\"</Radio> : null}\n                    </Radio.Group>\n                    <Radio.Group shape=\"button\" size=\"medium\" value={triggerType} onChange={this.setTriggerType.bind(this)}>\n                        <Radio value=\"click\">triggerType=\"click\"</Radio>\n                        <Radio value=\"hover\">triggerType=\"hover\"</Radio>\n                    </Radio.Group>\n                </div>\n                <Nav className=\"custom-nav\" type={type} direction={direction} activeDirection={activeDirection} triggerType={triggerType}>\n                    <Item>Item 1</Item>\n                    <Item>Item 2</Item>\n                    <SubNav label=\"Sub Nav\">\n                        <Item>Item 3</Item>\n                        <Item>Item 4</Item>\n                        <SubNav label=\"Sub Nav\">\n                            <Item>Item 5</Item>\n                            <Item>Item 6</Item>\n                        </SubNav>\n                    </SubNav>\n                    <Item icon=\"account\">\n                        <a href=\"http://www.taobao.com\" target=\"_blank\">Taobao</a>\n                    </Item>\n                </Nav>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": ".demo-ctl {\n    background-color: #F1F1F1;\n    border-left: 4px solid #0D599A;\n    color: #0A7AC3;\n    margin-bottom: 20px;\n    padding: 5px;\n}\n.demo-ctl .next-radio-group {\n    display: block;\n    margin: 5px;\n}\n.custom-nav.next-hoz .next-nav-item {\n    width: 100px;\n}\n.custom-nav.next-ver {\n    width: 200px;\n}\n",
        "body": "\n<p>Nav 提供了丰富的配置，可以进行个性化定制。</p>\n"
      },
      {
        "title": "分组",
        "order": "3",
        "jsx": "import { Nav } from '@alifd/next';\n\nconst { Item, Group } = Nav;\n\nReactDOM.render(\n    <Nav style={{ width: 240 }}>\n        <Group label=\"Group Label 1\">\n            <Item icon=\"account\">Navigation One</Item>\n            <Item icon=\"account\">Navigation Two</Item>\n            <Item icon=\"account\">Navigation Three</Item>\n        </Group>\n        <Group label=\"Group Label 2\">\n            <Item icon=\"account\">Navigation Four</Item>\n            <Item icon=\"account\">Navigation Five</Item>\n            <Item icon=\"account\">Navigation Six</Item>\n        </Group>\n    </Nav>, mountNode);\n",
        "css": "",
        "body": "\n<p>建议只在垂直布局中使用。</p>\n"
      },
      {
        "title": "只显示图标",
        "order": "2",
        "jsx": "import { Nav, Radio } from '@alifd/next';\n\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n    state = {\n        iconOnly: false,\n        hasTooltip: true,\n        hasArrow: true\n    }\n\n    setValue(name, value) {\n        this.setState({\n            [name]: value === 'true'\n        });\n    }\n\n    render() {\n        const { iconOnly, hasTooltip, hasArrow } = this.state;\n\n        return (\n            <div>\n                <div className=\"demo-ctl\">\n                    <Radio.Group shape=\"button\" size=\"medium\" value={iconOnly ? 'true' : 'false'} onChange={this.setValue.bind(this, 'iconOnly')}>\n                        <Radio value=\"true\">iconOnly=true</Radio>\n                        <Radio value=\"false\">iconOnly=false</Radio>\n                    </Radio.Group>\n                    {iconOnly ?\n                        <Radio.Group shape=\"button\" size=\"medium\" value={hasArrow ? 'true' : 'false'} onChange={this.setValue.bind(this, 'hasArrow')}>\n                            <Radio value=\"true\">hasArrow=true</Radio>\n                            <Radio value=\"false\">hasArrow=false</Radio>\n                        </Radio.Group> : null}\n                    {iconOnly ?\n                        <Radio.Group shape=\"button\" size=\"medium\" value={hasTooltip ? 'true' : 'false'} onChange={this.setValue.bind(this, 'hasTooltip')}>\n                            <Radio value=\"true\">hasTooltip=true</Radio>\n                            <Radio value=\"false\">hasTooltip=false</Radio>\n                        </Radio.Group> : null}\n                </div>\n                <Nav style={{ width: '200px' }} iconOnly={iconOnly} hasArrow={hasArrow} hasTooltip={hasTooltip}>\n                    <Item icon=\"account\">Navigation One</Item>\n                    <Item icon=\"account\">Navigation Two</Item>\n                    <Item icon=\"account\">Navigation Three</Item>\n                    <Item icon=\"account\">Navigation Four</Item>\n                    <Item icon=\"account\">Navigation Five</Item>\n                    <SubNav icon=\"account\" label=\"Sub Nav\">\n                        <Item icon=\"account\">Item 1</Item>\n                        <Item icon=\"account\">Item 2</Item>\n                        <Item icon=\"account\">Item 3</Item>\n                        <Item icon=\"account\">Item 4</Item>\n                    </SubNav>\n                </Nav>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": ".demo-ctl {\n    background-color: #F1F1F1;\n    border-left: 4px solid #0D599A;\n    color: #0A7AC3;\n    margin-bottom: 20px;\n    padding: 5px;\n}\n.demo-ctl .next-radio-group {\n    margin: 5px;\n}\n",
        "body": "\n<p>Nav 可设置 iconOnly 属性，只显示图标，以减少占用空间。</p>\n"
      },
      {
        "title": "展开模式",
        "order": "4",
        "jsx": "import { Nav, Radio } from '@alifd/next';\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n    state = {\n        openMode: 'single'\n    }\n\n    setValue(openMode) {\n        this.setState({\n            openMode\n        });\n    }\n\n    render() {\n        const { openMode } = this.state;\n\n        return (\n            <div>\n                <div className=\"demo-ctl\">\n                    <Radio.Group shape=\"button\" size=\"medium\" value={openMode} onChange={this.setValue.bind(this)}>\n                        <Radio value=\"single\">openMode=\"single\"</Radio>\n                        <Radio value=\"multiple\">openMode=\"multiple\"</Radio>\n                    </Radio.Group>\n                </div>\n                <Nav style={{ width: 240 }} openMode={openMode}>\n                    <SubNav label=\"Sub Nav 1\">\n                        <Item>Item 1</Item>\n                    </SubNav>\n                    <SubNav label=\"Sub Nav 2\">\n                        <Item>Item 1</Item>\n                        <Item>Item 2</Item>\n                        <SubNav label=\"Sub Nav 1\">\n                            <Item>Item 1</Item>\n                            <Item>Item 2</Item>\n                        </SubNav>\n                        <SubNav label=\"Sub Nav 2\">\n                            <Item>Item 1</Item>\n                            <Item>Item 2</Item>\n                        </SubNav>\n                    </SubNav>\n                    <SubNav label=\"Sub Nav 3\">\n                        <Item>Item 1</Item>\n                        <Item>Item 2</Item>\n                        <Item>Item 3</Item>\n                        <SubNav label=\"Sub Nav 1\">\n                            <Item>Item 1</Item>\n                            <Item>Item 2</Item>\n                            <Item>Item 3</Item>\n                        </SubNav>\n                        <SubNav label=\"Sub Nav 2\">\n                            <Item>Item 1</Item>\n                            <Item>Item 2</Item>\n                            <Item>Item 3</Item>\n                        </SubNav>\n                        <SubNav label=\"Sub Nav 3\">\n                            <Item>Item 1</Item>\n                            <Item>Item 2</Item>\n                            <Item>Item 3</Item>\n                        </SubNav>\n                    </SubNav>\n                    <Item>Item</Item>\n                </Nav>\n            </div>);\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": ".demo-ctl {\n    background-color: #F1F1F1;\n    border-left: 4px solid #0D599A;\n    color: #0A7AC3;\n    margin-bottom: 20px;\n    padding: 5px;\n}\n.demo-ctl .next-radio-group {\n    margin: 5px;\n}\n",
        "body": "\n<p>当 Nav 的 mode=&quot;inline&quot; 时，openMode 可控制同级内联子导航的展开数量。</p>\n"
      },
      {
        "title": "对齐方式",
        "order": "5",
        "jsx": "import { Nav, Radio } from '@alifd/next';\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n    state = {\n        popupAlign: 'follow'\n    }\n\n    setValue(popupAlign) {\n        this.setState({\n            popupAlign\n        });\n    }\n\n    render() {\n        const { popupAlign } = this.state;\n\n        return (\n            <div>\n                <div className=\"demo-ctl\">\n                    <Radio.Group shape=\"button\" size=\"medium\" value={popupAlign} onChange={this.setValue.bind(this)}>\n                        <Radio value=\"follow\">popupAlign=\"follow\"</Radio>\n                        <Radio value=\"outside\">popupAlign=\"outside\"</Radio>\n                    </Radio.Group>\n                </div>\n                <Nav style={{ height: 400, width: 240 }} mode=\"popup\" popupAlign={popupAlign} defaultOpenKeys={['sub-nav-2']}>\n                    <SubNav key=\"sub-nav-1\"label=\"Sub Nav 1\">\n                        <Item key=\"1\">Item 1</Item>\n                    </SubNav>\n                    <SubNav key=\"sub-nav-2\" label=\"Sub Nav 2\">\n                        <Item key=\"1\">Item 1</Item>\n                        <Item key=\"2\">Item 2</Item>\n                    </SubNav>\n                    <SubNav key=\"sub-nav-3\" label=\"Sub Nav 3\">\n                        <Item key=\"1\">Item 1</Item>\n                        <Item key=\"2\">Item 2</Item>\n                        <Item key=\"3\">Item 3</Item>\n                    </SubNav>\n                    <SubNav key=\"sub-nav-4\" label=\"Sub Nav 4\">\n                        <Item key=\"1\">Item 1</Item>\n                        <Item key=\"2\">Item 2</Item>\n                        <Item key=\"3\">Item 3</Item>\n                        <Item key=\"4\">Item 4</Item>\n                    </SubNav>\n                </Nav>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": ".demo-ctl {\n    background-color: #F1F1F1;\n    border-left: 4px solid #0D599A;\n    color: #0A7AC3;\n    margin-bottom: 20px;\n    padding: 5px;\n}\n.demo-ctl .next-radio-group {\n    margin: 5px;\n}\n",
        "body": "\n<p>当 Nav 的 mode=&quot;popup&quot; 时，popAlign 可控制弹出子导航的对齐方式。</p>\n"
      }
    ]
  },
  {
    "name": "NumberPicker",
    "category": "Components",
    "title": "数字输入框",
    "type": "表单",
    "importStatement": "import { NumberPicker } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n数字选择器，并对输入的数据做正确性检查、自动订正。\n\n### 注意事项\n\n1.  自动订正可能会导致onChange返回值和你输入的数据不一样。\n\n2.  其中有些中间输入状态无法触发onChange，主要考虑到自动订正可能永远无法到达想要的值了。例如：\n\n    -   `0`=>`0.`=>`0.0`=>`0.01`  中间两步不会触发onChange，因为如果订正会一直停留在0导致永远无法到达想要的值\n    -   min=10 的情况下, 输入 `1`=>`12`  第一步 `1` 不会触发onChange也不会订正数据，因为数字是一个一个输入的\n\n3.  如果输入时没触发onChange，会在onBlur检测数据正确性并触发onChange\n\n API\n\n### NumberPicker\n\n| 参数           | 说明                                                                                                                                             | 类型            | 默认值       |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | --------- |\n| size         | 大小<br><br>**可选值**:<br>'large', 'medium'                                                                                                        | Enum          | 'medium'  |\n| type         | 设置类型<br><br>**可选值**:<br>'normal'(普通)<br>'inline'(内联)                                                                                           | Enum          | 'normal'  |\n| value        | 当前值                                                                                                                                            | Number        | -         |\n| defaultValue | 默认值                                                                                                                                            | Number        | -         |\n| disabled     | 是否禁用                                                                                                                                           | Boolean       | -         |\n| step         | 步长                                                                                                                                             | Number/String | 1         |\n| precision    | 保留小数点后位数                                                                                                                                       | Number        | 0         |\n| editable     | 用户是否可以输入                                                                                                                                       | Boolean       | true      |\n| autoFocus    | 自动焦点                                                                                                                                           | Boolean       | -         |\n| onChange     | 数值被改变的事件<br><br>**签名**:<br>Function(value: Number, e: Event) => void<br>**参数**:<br>_value_: {Number} 数据<br>_e_: {Event} DOM事件对象                | Function      | func.noop |\n| onKeyDown    | 键盘按下<br><br>**签名**:<br>Function() => void                                                                                                      | Function      | func.noop |\n| onFocus      | 焦点获得<br><br>**签名**:<br>Function() => void                                                                                                      | Function      | -         |\n| onBlur       | 焦点失去<br><br>**签名**:<br>Function() => void                                                                                                      | Function      | func.noop |\n| onCorrect    | 数值订正后的回调<br><br>**签名**:<br>Function(obj: Object) => void<br>**参数**:<br>_obj_: {Object} {currentValue,oldValue:String}                          | Function      | func.noop |\n| max          | 最大值                                                                                                                                            | Number        | Infinity  |\n| min          | 最小值                                                                                                                                            | Number        | -Infinity |\n| format       | 格式化当前值<br><br>**签名**:<br>Function(value: Number) => String/Number<br>**参数**:<br>_value_: {Number} null<br>**返回值**:<br>{String/Number} null<br> | Function      | -         |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本用法",
        "order": "0",
        "jsx": "import { NumberPicker } from '@alifd/next';\n\nfunction onChange(value, e) {\n    console.log(value, e.type, e.triggerType);\n}\n\nReactDOM.render(\n    <div>\n        <NumberPicker onChange={onChange}/>\n        <br/><br/>\n        <NumberPicker defaultValue={0} type=\"inline\" onChange={onChange}/>\n    </div>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n<p>onChange 第二个参数 e.type 可以获取事件类型。</p>\n<p>如果是点击<code>+</code> <code>-</code> 触发，可以通过 <code>e.triggerType</code> 获取</p>\n"
      },
      {
        "title": "不可用",
        "order": "6",
        "jsx": "import { NumberPicker } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <NumberPicker defaultValue={0} disabled/>\n        <br/><br/>\n        <NumberPicker defaultValue={0} type=\"inline\" disabled />\n    </div>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n<p>不可用的 number picker。</p>\n"
      },
      {
        "title": "不可直接输入",
        "order": "1",
        "jsx": "import { NumberPicker, Button } from '@alifd/next';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            value: 0\n        };\n    }\n\n    toogle() {\n        this.setState({\n            editable: !this.state.editable\n        });\n    }\n\n    onChange(value) {\n        console.log('changed', value);\n        this.setState({\n            value: value\n        });\n    }\n\n    render() {\n        return (<div>\n            <NumberPicker onChange={this.onChange.bind(this)} value={this.state.value}\n                editable={this.state.editable}/><br/><br/>\n            <Button onClick={this.toogle.bind(this)}>Toggle to {!this.state.editable ? 'editable' : 'uneditable'}</Button>\n        </div>);\n    }\n}\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>用户不可直接输入编辑数据</p>\n"
      },
      {
        "title": "格式化",
        "order": "7",
        "jsx": "import { NumberPicker } from '@alifd/next';\n\nconst intlize = val => Intl.NumberFormat('en-US').format(val);\n\nReactDOM.render(\n    <div>\n        <NumberPicker format={intlize} />\n    </div>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "最大最小值",
        "order": "2",
        "jsx": "import { NumberPicker } from '@alifd/next';\n\nfunction onChange(value, e) {\n    console.log('onChange', value, e);\n}\n\nfunction onCorrect(obj) {\n    console.log('onCorrect', obj);\n}\nReactDOM.render(\n    <div>\n        <NumberPicker type=\"inline\" step={3} min={6} max={30} defaultValue={6}\n            onChange={onChange} onCorrect={onCorrect}/>\n    </div>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n<p>min max 来限制value的最大最小值。</p>\n<p>当数据自动订正会触发 onCorrect</p>\n"
      },
      {
        "title": "精度",
        "order": "4",
        "jsx": "import { NumberPicker } from '@alifd/next';\n\nfunction onChange(value) {\n    console.log('changed', value);\n}\nfunction onCorrect(obj) {\n    console.log(obj);\n}\nReactDOM.render(\n    <div>\n        <NumberPicker defaultValue={-3.99} onChange={onChange} onCorrect={onCorrect} step={2} precision={2}/>\n    </div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过 precision 控制小数点位数</p>\n"
      },
      {
        "title": "大小",
        "order": "5",
        "jsx": "import { NumberPicker } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <NumberPicker defaultValue={0} size=\"large\" />\n        <br/><br/>\n        <NumberPicker defaultValue={0} size=\"large\" type=\"inline\" />\n    </div>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "步长",
        "order": "3",
        "jsx": "import { NumberPicker } from '@alifd/next';\n\nfunction onChange(value) {\n    console.log('changed', value);\n}\nfunction onCorrect(obj) {\n    console.log(obj);\n}\nReactDOM.render(\n    <div>\n        <NumberPicker defaultValue={0} onChange={onChange} onCorrect={onCorrect} step={.01}/>\n    </div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过step控制每次加减步长</p>\n"
      }
    ]
  },
  {
    "name": "Overlay",
    "category": "Components",
    "title": "弹层",
    "importStatement": "import { Overlay } from '@alifd/next';",
    "body": "\n用于生成弹层的工具类集合.\n\n## 开发指南\n\nOverlay 提供了一系列组件用于创建弹层。其中包含：\n\n### Overlay\n\nOverlay 可以在页面中弹出一个浮层，封装了定位，动画及其他一些可用性的功能。Overlay 被设计为无状态的组件，其本身并不控制自己显示和隐藏的状态。\n\n**注意:** 类似 canCloseby\\* 的配置也需要配合 onRequestClose 才能关闭弹层。\n\n#### 安全节点\n\nOverlay 提供了点击弹层外文档中节点隐藏该弹层的功能，如果想让某个节点点击后不隐藏弹层（如：触发弹层打开的节点），请将该节点传入 safeNode 属性。\n\n#### 定位\n\n1.  align 的值可以是由空格隔开的字符串，如 `tl bl`，其中 `tl` 代表目标元素的左上方，`bl` 代表基准元素的左下方，所以 `tl bl` 的意思是目标元素的左上方对齐基准元素左下方。其中定位的可选值有 `tl`, `tc`, `tr`, `cl`, `cc`, `cr`, `bl`, `bc`, `br`。`t` 为 `top` 的缩写，`b` 为 `bottom` 的缩写，`c` 为 `center` 的缩写，`l` 为 `left` 的缩写，`r` 为 `right` 的缩写.\n\n2.  align 支持的 Boolean 值仅为 false，在设置为 false 时，不使用 JS 定位，这样你可以根据你的需要传入 style 或者 className 进行 CSS 定位。\n\n3.  rtl情况下会自动翻转 r(right)与 l(left), 例如 rtl状态下`tl bl`与 非rtl状态下`tr br`等效\n    下面的例子演示了如何将弹层定位到页面的右上角：\n\n```html\n<Overlay visible align=\"tr tr\"><span>123</span></Overlay>\n```\n\n### Popup\n\nPopup 是对 Overlay 的封装，它接收某个节点作为触发节点，弹出一个浮层，这个浮层默认情况下使用这个节点作为定位的参照对象。\n\n API\n\n### Overlay\n\n| 参数                     | 说明                                                                                                                                                                                                                                                                                                          | 类型             | 默认值                                        |\n| ---------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | ------------------------------------------ |\n| children               | 弹层内容                                                                                                                                                                                                                                                                                                        | any            | -                                          |\n| visible                | 是否显示弹层                                                                                                                                                                                                                                                                                                      | Boolean        | false                                      |\n| onRequestClose         | 弹层请求关闭时触发事件的回调函数<br><br>**签名**:<br>Function(type: String, e: Object) => void<br>**参数**:<br>_type_: {String} 弹层关闭的来源<br>_e_: {Object} DOM 事件                                                                                                                                                                 | Function       | func.noop                                  |\n| target                 | 弹层定位的参照元素                                                                                                                                                                                                                                                                                                   | any            | Position.VIEWPORT                          |\n| align                  | 弹层相对于参照元素的定位, 详见开发指南的[定位部分](#定位)                                                                                                                                                                                                                                                                            | String/Boolean | 'tl bl'                                    |\n| offset                 | 弹层相对于参照元素定位的微调                                                                                                                                                                                                                                                                                              | Array          | [0, 0]                                     |\n| container              | 渲染组件的容器，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点                                                                                                                                                                                                                                                     | any            | -                                          |\n| hasMask                | 是否显示遮罩                                                                                                                                                                                                                                                                                                      | Boolean        | false                                      |\n| canCloseByEsc          | 是否支持 esc 按键关闭弹层                                                                                                                                                                                                                                                                                             | Boolean        | true                                       |\n| canCloseByOutSideClick | 点击弹层外的区域是否关闭弹层，不显示遮罩时生效                                                                                                                                                                                                                                                                                     | Boolean        | true                                       |\n| canCloseByMask         | 点击遮罩区域是否关闭弹层，显示遮罩时生效                                                                                                                                                                                                                                                                                        | Boolean        | true                                       |\n| beforeOpen             | 弹层打开前触发事件的回调函数<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                         | Function       | func.noop                                  |\n| onOpen                 | 弹层打开时触发事件的回调函数<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                         | Function       | func.noop                                  |\n| afterOpen              | 弹层打开后触发事件的回调函数, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                        | Function       | func.noop                                  |\n| beforeClose            | 弹层关闭前触发事件的回调函数<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                         | Function       | func.noop                                  |\n| onClose                | 弹层关闭时触发事件的回调函数<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                         | Function       | func.noop                                  |\n| afterClose             | 弹层关闭后触发事件的回调函数, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                        | Function       | func.noop                                  |\n| beforePosition         | 弹层定位完成前触发的事件<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                                                           | Function       | func.noop                                  |\n| onPosition             | 弹层定位完成时触发的事件<br><br>**签名**:<br>Function(config: Object, node: Object) => void<br>**参数**:<br>_config_: {Object} 定位的参数<br>_config.align_: {Array} 对齐方式，如 ['cc', 'cc']（如果开启 needAdjust，可能和预先设置的 align 不同）<br>_config.top_: {Number} 距离视口顶部距离<br>_config.left_: {Number} 距离视口左侧距离<br>_node_: {Object} 定位参照的容器节点 | Function       | func.noop                                  |\n| shouldUpdatePosition   | 是否在每次弹层重新渲染后强制更新定位信息，一般用于弹层内容区域大小发生变化时，仍需保持原来的定位方式                                                                                                                                                                                                                                                          | Boolean        | false                                      |\n| autoFocus              | 弹层打开时是否让其中的元素自动获取焦点                                                                                                                                                                                                                                                                                         | Boolean        | false                                      |\n| needAdjust             | 当弹层由于页面滚动等情况不在可视区域时，是否自动调整定位以出现在可视区域                                                                                                                                                                                                                                                                        | Boolean        | true                                       |\n| disableScroll          | 是否禁用页面滚动                                                                                                                                                                                                                                                                                                    | Boolean        | false                                      |\n| cache                  | 隐藏时是否保留子节点                                                                                                                                                                                                                                                                                                  | Boolean        | false                                      |\n| safeNode               | 安全节点，当点击 document 的时候，如果包含该节点则不会关闭弹层，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点，或者以上值组成的数组                                                                                                                                                                                                             | any            | -                                          |\n| wrapperClassName       | 弹层的根节点的样式类                                                                                                                                                                                                                                                                                                  | String         | -                                          |\n| wrapperStyle           | 弹层的根节点的内联样式                                                                                                                                                                                                                                                                                                 | Object         | -                                          |\n| animation              | 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画                                                                                                                                                                                                                             | Object/Boolean | { in: 'expandInDown', out: 'expandOutUp' } |\n\n### Overlay.Popup\n\n> 继承 Overlay 的 API，除非特别说明\n\n| 参数                | 说明                                                                                                                                                                                              | 类型           | 默认值             |\n| ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ | --------------- |\n| children          | 弹层内容                                                                                                                                                                                            | ReactNode    | -               |\n| trigger           | 触发弹层显示或隐藏的元素                                                                                                                                                                                    | ReactElement | -               |\n| triggerType       | 触发弹层显示或隐藏的操作类型，可以是 'click'，'hover'，'focus'，或者它们组成的数组，如 ['hover', 'focus']                                                                                                                       | String/Array | 'hover'         |\n| visible           | 弹层当前是否显示                                                                                                                                                                                        | Boolean      | -               |\n| defaultVisible    | 弹层默认是否显示                                                                                                                                                                                        | Boolean      | false           |\n| onVisibleChange   | 弹层显示或隐藏时触发的回调函数<br><br>**签名**:<br>Function(visible: Boolean, type: String, e: Object) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示<br>_type_: {String} 触发弹层显示或隐藏的来源<br>_e_: {Object} DOM事件 | Function     | func.noop       |\n| disabled          | 设置此属性，弹层无法显示或隐藏                                                                                                                                                                                 | Boolean      | false           |\n| delay             | 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效                                                                                                                                               | Number       | 200             |\n| canCloseByTrigger | 触发元素是否可以关闭弹层                                                                                                                                                                                    | Boolean      | true            |\n| target            | 弹层定位的参照元素                                                                                                                                                                                       | any          | target 属性，即触发元素 |\n| followTrigger     | 是否跟随trigger滚动                                                                                                                                                                                   | Boolean      | false           |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "对齐",
        "order": "6",
        "jsx": "import { Overlay } from '@alifd/next';\n\nconst { Popup } = Overlay;\n\nReactDOM.render(\n    <div >\n        <div id=\"container1\" className=\"overlay-container\">\n            normal example\n            <Overlay target=\"container1\" visible align=\"tr tr\"><span>123</span></Overlay>\n            <Overlay target=\"container1\" visible align=\"cc cr\"><span>123</span></Overlay>\n            <Overlay target=\"container1\" visible align=\"bc bc\"><span>123</span></Overlay>\n        </div>\n        <br /><br /><br /><br />\n        <div id=\"container2\" className=\"overlay-container\" dir=\"rtl\">\n            dir=rtl example\n            <Overlay target=\"container2\" rtl visible align=\"tr tr\"><span>123</span></Overlay>\n            <Overlay target=\"container2\" rtl visible align=\"cc cr\"><span>123</span></Overlay>\n            <Overlay target=\"container2\" rtl visible align=\"bc bc\"><span>123</span></Overlay>\n        </div>\n    </div>\n    , mountNode);\n",
        "css": ".overlay-container {\n    position: relative;\n    height: 150px;\n    margin: 50px;\n    border: 1px solid #999;\n    overflow: auto;\n    text-align: center;\n    color: red;\n}\n",
        "body": "\n<p>可以自定义对齐方式</p>\n"
      },
      {
        "title": "遮罩",
        "order": "1",
        "jsx": "import { Overlay } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false\n        };\n    }\n\n    onClick = () => {\n        this.setState({\n            visible: true\n        });\n    }\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.onClick} ref={ref => {\n                    this.btn = ref;\n                }}>\n                    Open\n                </button>\n                <Overlay visible={this.state.visible}\n                    safeNode={() => this.btn}\n                    align=\"cc cc\"\n                    hasMask\n                    disableScroll\n                    onRequestClose={this.onClose}>\n                    <span className=\"overlay-demo\">\n                        Hello World From Overlay!\n                    </span>\n                </Overlay>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n",
        "body": "\n<p>带有遮罩的弹层。</p>\n"
      },
      {
        "title": "触发的弹层受控显示隐藏",
        "order": "3",
        "jsx": "import { Overlay } from '@alifd/next';\n\nconst { Popup } = Overlay;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false\n        };\n    }\n\n    onVisibleChange = visible => {\n        this.setState({\n            visible\n        });\n    }\n\n    render() {\n        return (\n            <Popup trigger={<button>Open</button>}\n                triggerType=\"click\"\n                visible={this.state.visible}\n                onVisibleChange={this.onVisibleChange}>\n                <span className=\"overlay-demo\">\n                    Hello World From Popup!\n                </span>\n            </Popup>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n",
        "body": "\n<p>展示了 Popup 受控显示隐藏的用法。</p>\n"
      },
      {
        "title": "弹层嵌套",
        "order": "4",
        "jsx": "import { Overlay } from '@alifd/next';\n\nconst { Popup } = Overlay;\n\nReactDOM.render(\n    <Popup trigger={<button>Open first overlay</button>}\n        triggerType=\"click\">\n        <div className=\"overlay-demo\">\n            <Popup trigger={<button>Open second overlay</button>}\n                triggerType=\"click\"\n                container={trigger => trigger.parentNode}>\n                <div className=\"overlay-demo\">\n                    <p>Hello World From Second Overlay!</p>\n                </div>\n            </Popup>\n            <p>Hello World From First Overlay!</p>\n        </div>\n    </Popup>\n    , mountNode);\n",
        "css": ".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n",
        "body": "\n<p>有弹层嵌套需求时，请使用 container 属性将第二个弹层渲染到第一个弹层内部。</p>\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Overlay } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false\n        };\n    }\n\n    onClick = () => {\n        this.setState({\n            visible: !this.state.visible\n        });\n    }\n\n    onClose = () => {\n        this.setState({\n            visible: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.onClick} ref={ref => {\n                    this.btn = ref;\n                }}>\n                    Toggle visible\n                </button>\n                <Overlay visible={this.state.visible}\n                    target={() => this.btn}\n                    safeNode={() => this.btn}\n                    onRequestClose={this.onClose}>\n                    <span className=\"overlay-demo\">\n                        Hello World From Overlay!\n                    </span>\n                </Overlay>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n",
        "body": "\n<p>弹出一个弹层。</p>\n"
      },
      {
        "title": "触发的弹层",
        "order": "2",
        "jsx": "import { Overlay } from '@alifd/next';\n\nconst { Popup } = Overlay;\n\nReactDOM.render(\n    <Popup trigger={<button>Open</button>} triggerType=\"click\">\n        <span className=\"overlay-demo\">\n            Hello World From Popup!\n        </span>\n    </Popup>, mountNode);\n",
        "css": ".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n",
        "body": "\n<p>使用 Popup 弹出一个弹层。</p>\n"
      },
      {
        "title": "弹层跟随滚动",
        "order": "5",
        "jsx": "import { Overlay } from '@alifd/next';\n\nconst { Popup } = Overlay;\n\nReactDOM.render(\n    <div className=\"scroll-container\">\n        <Popup trigger={<button>Open</button>}\n            triggerType=\"click\"\n            container={trigger => trigger.parentNode}>\n            <div className=\"overlay-demo\">\n                Hello World From Popup!\n            </div>\n        </Popup>\n        <div style={{ height: '300px' }} />\n    </div>\n    , mountNode);\n",
        "css": ".overlay-demo {\n    width: 300px;\n    height: 100px;\n    padding: 10px;\n    border: 1px solid #999999;\n    background: #FFFFFF;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n\n.scroll-container {\n    position: relative;\n    height: 150px;\n    padding: 10px;\n    border: 1px solid #999999;\n    overflow: auto;\n}\n",
        "body": "\n<p>弹层默认参照 document.body 绝对定位，如果弹层显示隐藏的触发元素所在容器（一般为父节点）有滚动条，那么当容器滚动时，会发生触发元素与弹层相分离的情况，解决的办法是将弹层渲染到触发元素所在的容器中。（触发元素所在的容器，必须设置 position 样式，以完成弹层的绝对定位。）</p>\n"
      }
    ]
  },
  {
    "name": "Pagination",
    "category": "Components",
    "title": "翻页器",
    "type": "导航",
    "importStatement": "import { Pagination } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n在有大量内容展现需要进行分页加载处理的时候。\n\n API\n\n### Pagination\n\n| 参数               | 说明                                                                                                                                                                            | 类型                                | 默认值            |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------- | -------------- |\n| size             | 分页组件大小<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                          | Enum                              | 'medium'       |\n| type             | 分页组件类型<br><br>**可选值**:<br>'normal', 'simple', 'mini'                                                                                                                          | Enum                              | 'normal'       |\n| shape            | 前进后退按钮样式<br><br>**可选值**:<br>'normal', 'arrow-only', 'arrow-prev-only', 'no-border'                                                                                            | Enum                              | 'normal'       |\n| current          | （受控）当前页码                                                                                                                                                                      | Number                            | -              |\n| defaultCurrent   | （非受控）初始页码                                                                                                                                                                     | Number                            | 1              |\n| onChange         | 页码发生改变时的回调函数<br><br>**签名**:<br>Function(current: Number, e: Object) => void<br>**参数**:<br>_current_: {Number} 改变后的页码数<br>_e_: {Object} 点击事件对象                                 | Function                          | () => {}       |\n| total            | 总记录数                                                                                                                                                                          | Number                            | 100            |\n| totalRender      | 总数的渲染函数<br><br>**签名**:<br>Function(total: Number, range: Array) => void<br>**参数**:<br>_total_: {Number} 总数<br>_range_: {Array} 当前数据在总数中的区间                                    | Function                          | -              |\n| pageShowCount    | 页码显示的数量，更多的使用...代替                                                                                                                                                            | Number                            | 5              |\n| pageSize         | 一页中的记录数                                                                                                                                                                       | Number                            | 10             |\n| pageSizeSelector | 每页显示选择器类型<br><br>**可选值**:<br>false, 'filter', 'dropdown'                                                                                                                      | Enum                              | false          |\n| pageSizeList     | 每页显示选择器可选值                                                                                                                                                                    | Array&lt;Number>/Array&lt;Object> | [5, 10, 20]    |\n| pageNumberRender | 自定义页码渲染函数，函数作用于页码button以及当前页/总页数的数字渲染<br><br>**签名**:<br>Function(index: Number) => ReactNode<br>**参数**:<br>_index_: {Number} 分页的页码，从1开始<br>**返回值**:<br>{ReactNode} 返回渲染结果<br> | Function                          | index => index |\n| pageSizePosition | 每页显示选择器在组件中的位置<br><br>**可选值**:<br>'start', 'end'                                                                                                                              | Enum                              | 'start'        |\n| useFloatLayout   | 存在每页显示选择器时是否使用浮动布局                                                                                                                                                            | Boolean                           | false          |\n| onPageSizeChange | 每页显示记录数量改变时的回调函数<br><br>**签名**:<br>Function(pageSize: Number) => void<br>**参数**:<br>_pageSize_: {Number} 改变后的每页显示记录数                                                          | Function                          | () => {}       |\n| hideOnlyOnePage  | 当分页数为1时，是否隐藏分页器                                                                                                                                                               | Boolean                           | false          |\n| showJump         | type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域                                                                                                      | Boolean                           | true           |\n| link             | 设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：<http://xxx.com/{page}>                                                                                                                  | String                            | -              |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "受控分页",
        "order": "1",
        "jsx": "import { Pagination } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            current: 2\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(current) {\n        this.setState({\n            current\n        });\n    }\n\n    render() {\n        return (\n            <Pagination current={this.state.current} onChange={this.handleChange} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>受控分页，是指分页组件的状态由父组件维护，组件自身只负责渲染其父组件传递的值，父组件通过 <code>current</code> 属性传递当前的值。</p>\n"
      },
      {
        "title": "分页按钮链接",
        "order": "7",
        "jsx": "import { Pagination } from '@alifd/next';\n\nconst format = `${window.location.href}#/{page}`;\n\nReactDOM.render(\n    <Pagination defaultCurrent={2} link={format} />,\n    mountNode\n);\n",
        "css": "",
        "body": "\n<p>可以通过指定 <code>link</code> 属性来设置页码按钮的跳转链接，方便 SEO，link 属性的值为一个包含 <code>{page}</code> 的模板字符串，Pagination 组件会将该占位符替换为具体的页码数字。</p>\n"
      },
      {
        "title": "每页显示",
        "order": "5",
        "jsx": "import { Pagination } from '@alifd/next';\n\nconst handlePageSizeChange = size => console.log(size);\n\nReactDOM.render(\n    <div>\n        <h3>To hidden per page size selector</h3>\n        <Pagination pageSizeSelector={false} />\n        <h3>Type per page size selector of is dropdown，and as for the tail of the entire component</h3>\n        <Pagination pageSizeSelector=\"dropdown\" pageSizePosition=\"end\" onPageSizeChange={handlePageSizeChange} />\n        <h3>Filter type per page size selector, and use floating layout</h3>\n        <Pagination pageSizeSelector=\"filter\" onPageSizeChange={handlePageSizeChange} useFloatLayout />\n    </div>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n<p>可以通过设置 <code>pageSize</code> 属性来指定每页显示的数量。<br>\n可以通过设置 <code>pageSizeSelector</code> 属性来指定是否显示 每页数量选择 的部件以及部件形状。<br>\n可以通过设置 <code>pageSizeList</code> 属性来指定 每页显示数量 可选的值。<br>\n可以通过设置 <code>pageSizePosition</code> 属性来指定 每页显示数量选择 的部件显示在整个组件的开始位置还是结束位置。\n可以通过设置 <code>onPageSizeChange</code> 属性来指定每页显示的数量变化时的回调函数。</p>\n"
      },
      {
        "title": "配合 react-router 使用",
        "order": "8",
        "jsx": "import { Pagination } from '@alifd/next';\nimport { hashHistory } from 'react-router';\n\nfunction handleChange(page) {\n    hashHistory.push(page.toString());\n}\n\nReactDOM.render(\n    <Pagination defaultCurrent={2} onChange={handleChange} />,\n    mountNode\n);\n",
        "css": "",
        "body": "\n<p>单页应用场景下，Pagination 组件可以使用外部跳转的方法来实现单页内部跳转。</p>\n"
      },
      {
        "title": "前进后退按钮只显示箭头",
        "order": "4",
        "jsx": "import { Pagination } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <h3>normal</h3>\n        <Pagination defaultCurrent={2} />\n        <h3>arrow-only</h3>\n        <Pagination defaultCurrent={2} shape=\"arrow-only\" />\n        <h3>arrow-prev-only</h3>\n        <Pagination defaultCurrent={2} shape=\"arrow-prev-only\" />\n        <h3>no-border</h3>\n        <Pagination defaultCurrent={2} shape=\"no-border\" type=\"simple\" />\n    </div>,\n    mountNode\n);\n",
        "css": ".next-pagination + .next-pagination {\n    margin-top: 20px;\n}\n",
        "body": "\n<p>可以通过指定 <code>shape</code> 属性来设置前进后退按钮箭头的显示方式。</p>\n"
      },
      {
        "title": "显示总数",
        "order": "6",
        "jsx": "import { Pagination } from '@alifd/next';\n\nconst total = 50;\n\nReactDOM.render(\n    <Pagination className=\"custom-pagination\" total={total} totalRender={total => `Total: ${total}`} />,\n    mountNode\n);\n",
        "css": ".custom-pagination {\n    display: inline-block;\n    margin-left: 10px;\n}\n",
        "body": "\n<p>分页组件默认不显示总数，你可以通过 totalRender 自定义总数的显示结果。</p>\n"
      },
      {
        "title": "分页尺寸",
        "order": "2",
        "jsx": "import { Pagination } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <h3>small</h3>\n        <Pagination defaultCurrent={2} size=\"small\" />\n        <h3>medium</h3>\n        <Pagination defaultCurrent={2} size=\"medium\" />\n        <h3>large</h3>\n        <Pagination defaultCurrent={2} size=\"large\" />\n    </div>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n<p>可以通过指定 <code>size</code> 属性来设置分页的尺寸。</p>\n"
      },
      {
        "title": "分页类型",
        "order": "3",
        "jsx": "import { Pagination } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <h3>normal</h3>\n        <Pagination defaultCurrent={2} />\n        <h3>simple</h3>\n        <Pagination defaultCurrent={2} type=\"simple\" />\n        <h3>mini</h3>\n        <Pagination defaultCurrent={2} type=\"mini\" />\n    </div>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n<p>可以通过指定 <code>type</code> 属性来设置分页的类型。</p>\n"
      },
      {
        "title": "非受控分页",
        "order": "0",
        "jsx": "import { Pagination } from '@alifd/next';\n\nconst change = function(value) {\n    console.log(value);\n};\n\nReactDOM.render(\n    <Pagination defaultCurrent={2} onChange={change} />,\n    mountNode\n);\n",
        "css": "",
        "body": "\n<p>非受控分页，是指分页组件的状态由自己维护，组件值的改变可以通过 <code>onChange</code> 事件通知父组件，默认值由 <code>defaultCurrent</code> 初始化。</p>\n"
      }
    ]
  },
  {
    "name": "Paragraph",
    "category": "Components",
    "title": "段落",
    "type": "基本",
    "importStatement": "import { Paragraph } from '@alifd/next';",
    "body": "\n## Guide\n\n段落用于控制页面整体的文本视觉，主要由行间距及文本大小体现。 \n\n## 何时使用\n\n-   页面文本展示需要一致体验。\n-   一般短文本和长文本的行间距是有差别的，短文本的行间距会更小(一般为三行以内)\n\n API\n\n### Paragraph\n\n| 参数   | 说明                                                                 | 类型   | 默认值      |\n| ---- | ------------------------------------------------------------------ | ---- | -------- |\n| size | 组件大小。<br><br>**可选值**:<br>'medium'(中号)<br>'small'(小号)               | Enum | 'medium' |\n| type | 什么方式展示段落<br><br>**可选值**:<br>'long'(展示所有文本)<br>'short'(展示三行以内（非强制）) | Enum | 'long'   |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Paragraph } from '@alifd/next';\n\nconst content = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\n\nReactDOM.render(<div>\n    <Paragraph>{content}</Paragraph>\n    <br/>\n    <Paragraph size=\"small\">{content}</Paragraph>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的用法。</p>\n"
      },
      {
        "title": "长短文本",
        "order": "1",
        "jsx": "import { Paragraph } from '@alifd/next';\n\nconst content = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\n\nReactDOM.render(<div>\n    <Paragraph>{content}</Paragraph>\n    <br/>\n    <Paragraph type=\"short\">{content}</Paragraph>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>用于短文本和长文本的区分，短文本的行间距会更小(一般为三行以内)</p>\n"
      }
    ]
  },
  {
    "name": "Progress",
    "category": "Components",
    "title": "进度指示器",
    "type": "展示",
    "importStatement": "import { Progress } from '@alifd/next';",
    "body": "\n## Guide\n\n展示操作的当前进度。\n\n### 何时使用\n\n在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。\n\n-   操作在后台运行，需要耗费一定的客户端等待时间。\n-   操作需要展示一个完成进度的百分比。\n\n API\n\n### Progress\n\n| 参数              | 说明                                                                                                                                                                                          | 类型       | 默认值                                  |\n| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ------------------------------------ |\n| size            | 尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                                            | Enum     | 'medium'                             |\n| shape           | 形态<br><br>**可选值**:<br>'circle', 'line'                                                                                                                                                      | Enum     | 'line'                               |\n| percent         | 所占百分比                                                                                                                                                                                       | Number   | 0                                    |\n| state           | 进度状态, 显示优先级: color > progressive > state<br><br>**可选值**:<br>'normal', 'success', 'error'                                                                                                    | Enum     | 'normal'                             |\n| progressive     | 是否为色彩阶段变化模式, 显示优先级: color > progressive > state                                                                                                                                             | Boolean  | false                                |\n| hasBorder       | 是否添加 Border（只适用于 Line Progress)                                                                                                                                                             | Boolean  | false                                |\n| textRender      | 文本渲染函数<br><br>**签名**:<br>Function(percent: Number, option: Object) => ReactNode<br>**参数**:<br>_percent_: {Number} 当前的进度信息<br>_option_: {Object} 额外的参数<br>**返回值**:<br>{ReactNode} 返回文本节点<br> | Function | percent => `${Math.floor(percent)}%` |\n| color           | 进度条颜色, 显示优先级: color > progressive > state                                                                                                                                                   | String   | -                                    |\n| backgroundColor | 背景色                                                                                                                                                                                         | String   | -                                    |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本进度条",
        "order": "0",
        "jsx": "import { Progress } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Progress percent={30} textRender={() => ''} />\n    <Progress percent={50} />\n    <Progress percent={90} />\n    <Progress percent={40} />\n    <Progress percent={40} hasBorder size=\"large\" />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>普通模式的进度条，通过 <code>percent</code> 属性指定进度，通过 <code>textRender</code> 控制右侧文本信息的展示，\n通过 <code>hasBorder</code> 属性设置组件是否包含边框。</p>\n"
      },
      {
        "title": "圆形进度条",
        "order": "1",
        "jsx": "import { Progress, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Progress percent={30} shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={50} shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={80} shape=\"circle\" textRender={() => ''}/>&nbsp;&nbsp;\n    <Progress percent={100} shape=\"circle\" textRender={() => <Icon type=\"select\" size=\"xl\" />} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过 <code>shape</code> 属性可以改变进度指示器的外观，当取值为 <code>circle</code> 时为圆形进度条。</p>\n"
      },
      {
        "title": "颜色",
        "order": "5",
        "jsx": "import { Progress, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Progress percent={30} shape=\"circle\" color=\"#AF5F3C\"/> &nbsp;&nbsp;&nbsp;&nbsp;\n    <Progress percent={50} shape=\"circle\"/>&nbsp;&nbsp;&nbsp;&nbsp;\n    <Progress percent={90} shape=\"circle\" color=\"rgba(119,66,141, 0.9)\" textRender={() => <Icon type=\"select\" size=\"xl\" />} />\n    <br /><br />\n    <Progress percent={30} shape=\"line\" color=\"rgb(208,16,76)\"/>\n    <Progress percent={50} shape=\"line\"/>\n    <Progress percent={90} shape=\"line\" color=\"blue\" textRender={() => <Icon type=\"select\" size=\"m\" />} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过 <code>color</code> 属性可以改变进度条的颜色。Progress 有三个API可以改变进度条的颜色,其优先级为 color &gt; progressive &gt;  state。</p>\n"
      },
      {
        "title": "动态展示",
        "order": "6",
        "jsx": "import { Progress, Button, Icon } from '@alifd/next';\n\n\nclass CustomProgress extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            percent: 0,\n        };\n    }\n\n    addProgress = () => {\n        this.setState(prevState => {\n            return {\n                percent: prevState.percent + 10\n            };\n        });\n    }\n\n    minusProgress = () => {\n        this.setState(prevState => {\n            return {\n                percent: prevState.percent - 10\n            };\n        });\n    }\n\n    render() {\n        const state = this.state;\n        return (<div>\n            <div className=\"progress-panel\">\n                <Button.Group>\n                    <Button onClick={this.minusProgress} disabled={state.percent === 0}><Icon type=\"minus\" /></Button>\n                    <Button onClick={this.addProgress} disabled={state.percent === 100}><Icon type=\"add\" /></Button>\n                </Button.Group>\n            </div>\n\n            <Progress percent={state.percent} progressive size=\"large\" />\n            <br /><br />\n            <Progress percent={state.percent} progressive shape=\"circle\" size=\"large\" />\n        </div>);\n    }\n}\n\nReactDOM.render(<CustomProgress />, mountNode);\n",
        "css": ".progress-panel {\n    display: flex;\n    margin-bottom: 14px;\n}\n\n.custom-select {\n    margin-right: 20px;\n}\n",
        "body": "\n<p>此时为增强模式的进度条，会根据当前进度展示不同的样式。注: css animation完成需要时间, 数据调整过于频繁会导致显示延迟。</p>\n"
      },
      {
        "title": "自定义百分比信息",
        "order": "7",
        "jsx": "import { Progress, Icon } from '@alifd/next';\n\nconst textRender = percent => {\n    if (percent === 100) {\n        return <Icon type=\"select\" size=\"medium\" />;\n    }\n    return `${percent.toFixed(2)}%`;\n};\n\nReactDOM.render(<div>\n    {[1, 2, 3, 4, 5, 6].map((value, index) => <Progress key={index} percent={value / 6 * 100} shape=\"circle\" color={`hsl(${index * 60 + 60}, 90%, 50%)`} textRender={textRender}/>)}\n    {[1, 2, 3, 4, 5, 6].map((value, index) => <Progress key={index} percent={value / 6 * 100} shape=\"line\" color={`hsl(${index * 60 + 60}, 90%, 50%)`} textRender={textRender}/>)}\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p><code>textRender</code> 控制百分比信息的展示,通过自定义<code>textRender</code>个性化百分比渲染. 下面给一个 百分比进度取2位,当达到100%是显示Icon的progressbar.</p>\n"
      },
      {
        "title": "Progressive",
        "order": "4",
        "jsx": "import { Progress } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Progress percent={20} progressive />\n    <Progress percent={60} progressive />\n    <Progress percent={90} progressive />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>当开启 <code>progressive</code> 模式时，Progress 组件会根据自身的进度自动设置展现的颜色值。\n注意，此时会忽略用户设置的 <code>state</code> 的属性值。</p>\n"
      },
      {
        "title": "尺寸",
        "order": "2",
        "jsx": "import { Progress } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Progress percent={30} size=\"small\" />\n    <Progress percent={50} size=\"medium\" />\n    <Progress percent={90} size=\"large\" />\n    <br />\n    <Progress percent={30} size=\"small\" shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={50} size=\"medium\" shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={90} size=\"large\" shape=\"circle\" />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 <code>size</code> 属性制定进度条的大小。</p>\n"
      },
      {
        "title": "进度条不同状态",
        "order": "3",
        "jsx": "import { Progress } from '@alifd/next';\n\nReactDOM.render(<div className=\"\">\n    <Progress percent={20} shape=\"circle\" state=\"normal\" className=\"custom-progress\" />\n    <Progress percent={95} shape=\"circle\" state=\"success\" className=\"custom-progress\" />\n    <Progress percent={95} shape=\"circle\" state=\"error\" className=\"custom-progress\" />\n</div>, mountNode);\n",
        "css": ".custom-progress {\n    margin: 0 20px;\n}\n",
        "body": "\n<p>用户可以通过 <code>state</code> 属性自定义当前进度的展现状态，可取值为 <code>normal</code>, <code>success</code>, <code>error</code> 分别表示普通、成功、失败这三种状态。</p>\n"
      }
    ]
  },
  {
    "name": "Radio",
    "category": "Components",
    "title": "单选框",
    "type": "表单",
    "importStatement": "import { Radio } from '@alifd/next';",
    "body": "\n## 开发指南\n\n单选框\n\n### 何时使用\n\n单选框允许用户从一个数据集中选择单个选项。如果你觉得用户需要并排看到所有的可选项，使用单选框进行排他操作。此外，考虑使用下拉列表，相对于显示所有的选项占用更少的空间。\n\n API\n\n### Radio\n\n| 参数             | 说明                                                                                                                                         | 类型                    | 默认值       |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------ | --------------------- | --------- |\n| id             | 组件input的id                                                                                                                                 | String                | -         |\n| checked        | 设置radio是否选中                                                                                                                                | Boolean               | -         |\n| defaultChecked | 设置radio是否默认选中                                                                                                                              | Boolean               | -         |\n| label          | 通过属性配置label                                                                                                                                | ReactNode             | -         |\n| onChange       | 状态变化时触发的事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>_checked_: {Boolean} 是否选中<br>_e_: {Event} Dom 事件对象 | Function              | func.noop |\n| onMouseEnter   | 鼠标进入enter事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} Dom 事件对象                                               | Function              | func.noop |\n| onMouseLeave   | 鼠标离开事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} Dom 事件对象                                                    | Function              | func.noop |\n| disabled       | radio是否被禁用                                                                                                                                 | Boolean               | -         |\n| value          | radio 的value                                                                                                                               | String/Number/Boolean | -         |\n| name           | name                                                                                                                                       | String                | -         |\n\n### Radio.Group\n\n| 参数            | 说明                                                                                                                                                 | 类型                                  | 默认值       |\n| ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------- | --------- |\n| name          | name                                                                                                                                               | String                              | -         |\n| size          | 与 `shape` 属性配套使用，shape设为button时有效<br><br>**可选值**:<br>'large'(大)<br>'medium'(中)<br>'small'(小)                                                       | Enum                                | 'medium'  |\n| shape         | 可以设置成 button 展示形状<br><br>**可选值**:<br>'button'(按钮状)                                                                                                 | Enum                                | -         |\n| value         | radio group的选中项的值                                                                                                                                  | String/Number/Boolean               | -         |\n| defaultValue  | radio group的默认值                                                                                                                                    | String/Number/Boolean               | -         |\n| onChange      | 选中值改变时的事件<br><br>**签名**:<br>Function(value: String/Number, e: Event) => void<br>**参数**:<br>_value_: {String/Number} 选中项的值<br>_e_: {Event} Dom 事件对象 | Function                            | () => { } |\n| disabled      | 表示radio被禁用                                                                                                                                         | Boolean                             | -         |\n| dataSource    | 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']`                                                                                     | Array&lt;any>                       | \\[]       |\n| children      | 通过子元素方式设置内部radio                                                                                                                                   | Array&lt;ReactElement>/ReactElement | -         |\n| itemDirection | 子项目的排列方式<br>- hoz: 水平排列 (default)<br>- ver: 垂直排列<br><br>**可选值**:<br>'hoz', 'ver'                                                                   | Enum                                | 'hoz'     |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Radio } from '@alifd/next';\n\nReactDOM.render((\n    <div>\n        <h4>Without Label</h4>\n        <Radio defaultChecked />&nbsp;\n        <Radio checked />&nbsp;\n        <Radio disabled />&nbsp;\n        <Radio checked disabled />&nbsp;\n        <Radio />\n        <br />\n        <h4>With Label</h4>\n        <Radio id=\"apple\">Apple</Radio>&nbsp;\n        <Radio id=\"banana\" /><label htmlFor=\"banana\" className=\"next-radio-label\">Banana</label>&nbsp;\n        <Radio id=\"apple2\" label=\"Apple\" className=\"testClassname\" />\n    </div>\n), mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>Radio</code> 渲染的基本组件。</p>\n"
      },
      {
        "title": "按钮样式组件",
        "order": "4",
        "jsx": "import { Radio } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nconst list = [\n    {\n        value: 'apple',\n        label: 'Apple',\n        disabled: false\n    }, {\n        value: 'pear',\n        label: 'Pear'\n    }, {\n        value: 'orange',\n        label: 'Orange',\n        disabled: true\n    }\n];\n\nclass ControlApp extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value1: 'apple',\n            value2: 'apple',\n            value3: ''\n        };\n\n        this.onNestChange = this.onNestChange.bind(this);\n        this.onSmallChange = this.onSmallChange.bind(this);\n        this.onMediumChange = this.onMediumChange.bind(this);\n    }\n\n    onSmallChange(value) {\n        this.setState({\n            value1: value\n        });\n    }\n\n    onMediumChange(value) {\n        this.setState({\n            value2: value\n        });\n    }\n\n    onNestChange(value) {\n        this.setState({\n            value3: value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>Small size</h4>\n                <RadioGroup dataSource={list} shape=\"button\" size=\"small\" value={this.state.value1} onChange={this.onSmallChange} />\n                <br/>\n                <br/>\n                <h4>Medium size (default)</h4>\n                <RadioGroup dataSource={list} shape=\"button\" size=\"medium\" value={this.state.value2} onChange={this.onMediumChange} />\n                <br/>\n                <br/>\n                <h4>Large size</h4>\n                <RadioGroup shape=\"button\" size=\"large\" value={this.state.value3} onChange={this.onNestChange}>\n                    <Radio id=\"banana\" value=\"banana\">Banana</Radio>\n                    <Radio id=\"watermelon\" value=\"watermelon\">Watermelon</Radio>\n                    <Radio id=\"peach\" value=\"peach\">Peach</Radio>\n                </RadioGroup>\n                <br/>\n                <br/>\n                <h4>Disabled and Selected-Disabled status</h4>\n                <RadioGroup shape=\"button\" value=\"banana\" onChange={this.onNestChange}>\n                    <Radio id=\"peach\" disabled value=\"peach\">Peach</Radio>\n                    <Radio id=\"banana\" disabled value=\"banana\">Banana</Radio>\n                </RadioGroup>\n\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>RadioGroup</code> 渲染的组，通过设置 <code>shape=&quot;button&quot;</code> 可以让组件以按钮形式展示，同时可以通过 <code>size</code> 来控制组件大小。</p>\n"
      },
      {
        "title": "受限组件",
        "order": "1",
        "jsx": "import { Radio } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nconst list = [\n    {\n        value: 'appale',\n        label: 'Appale'\n    }, {\n        value: 'pear',\n        label: 'Pear'\n    }, {\n        value: 'orange',\n        label: 'Orange'\n    }\n];\n\nclass ControlApp extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: 'orange',\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value) {\n        this.setState({\n            value: value\n        });\n        console.log('onChange', value);\n    }\n\n    onClick(e) {\n        console.log('onClick', e);\n    }\n\n    render() {\n        return (\n            <div>\n                normal:   <RadioGroup dataSource={list} value={this.state.value} onChange={this.onChange} />\n                <br />\n                <br />\n                <br />\n                disabled:  <RadioGroup disabled dataSource={list} value={this.state.value} onChange={this.onChange} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>RadioGroup</code> 渲染的组，通过设置 <code>value</code> 属性可以让组件变成<a href=\"https://facebook.github.io/react/docs/forms.html#controlled-components\">受限组件</a>。</p>\n"
      },
      {
        "title": "分组",
        "order": "1",
        "jsx": "import { Radio } from '@alifd/next';\n\nconst Shape = {\n    NORMAL: 'normal',\n    BUTTON: 'button',\n};\n\nconst ItemDirection = {\n    HORIZON: 'hoz',\n    VERTICAL: 'ver',\n};\n\nclass RadioGroup extends React.Component {\n    state = {\n        shape: Shape.NORMAL,\n        itemDirection: ItemDirection.HORIZON,\n    }\n\n    onShapeChange = (shape) => {\n        this.setState({ shape });\n    }\n\n    onItemDirectionChange = (itemDirection) => {\n        this.setState({ itemDirection });\n    }\n\n    render() {\n        return (\n            <div>\n                <h5>Choose a shape</h5>\n                <p>\n                    <Radio.Group\n                        shape=\"button\"\n                        value={this.state.shape}\n                        onChange={this.onShapeChange}\n                    >\n                        <Radio value={Shape.NORMAL}>Normal</Radio>\n                        <Radio value={Shape.BUTTON}>Button</Radio>\n                    </Radio.Group>\n                </p>\n                <h5>Choose an align-type of the item</h5>\n                <p>\n                    <Radio.Group\n                        shape=\"button\"\n                        value={this.state.itemDirection}\n                        onChange={this.onItemDirectionChange}\n                    >\n                        <Radio value={ItemDirection.HORIZON}>Horizon</Radio>\n                        <Radio\n                            value={ItemDirection.VERTICAL}\n                            disabled={this.state.shape === Shape.BUTTON}\n                        >Vertical</Radio>\n                    </Radio.Group>\n                </p>\n                <div className=\"rendered-container\">\n                    <h3>Rendered Result</h3>\n                    <Radio.Group\n                        shape={this.state.shape}\n                        itemDirection={this.state.itemDirection}\n                    >\n                        <Radio value=\"react\">React</Radio>\n                        <Radio value=\"vue\">Vue</Radio>\n                        <Radio value=\"angular\">Angular</Radio>\n                    </Radio.Group>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<RadioGroup />, mountNode);\n",
        "css": ".rendered-container {\n    margin: 32px 0 0;\n    padding: 0 24px 24px;\n    border: 3px dashed #aaa;\n    border-radius: 11px;\n}\n",
        "body": "\n<p>使用 <code>&lt;Radio.Group&gt;</code> 渲染 <code>&lt;Radio&gt;</code> 分组。</p>\n"
      },
      {
        "title": "嵌套组件",
        "order": "3",
        "jsx": "import { Radio } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nclass NestApp extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: 'orange'\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value) {\n        this.setState({\n            value: value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <label id=\"groupId\">Choose fruit</label><br/>\n                <RadioGroup value={this.state.value} onChange={this.onChange} aria-labelledby=\"groupId\">\n                    <Radio id=\"apple\" value=\"apple\">Apple</Radio>\n                    <Radio id=\"watermelon\" value=\"watermelon\">Watermelon</Radio>\n                    <Radio id=\"orange\" value=\"orange\">Orange</Radio>\n                </RadioGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<NestApp />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>RadioGroup</code>，通过直接嵌套 <code>Radio</code> 组件来渲染的组。</p>\n"
      },
      {
        "title": "非受限组件",
        "order": "2",
        "jsx": "import { Radio } from '@alifd/next';\n\nconst RadioGroup = Radio.Group;\n\nconst list = [\n    {\n        value: 'apple',\n        label: 'Apple',\n        disabled: false\n    }, {\n        value: 'pear',\n        label: 'Pear',\n        disabled: true\n    }, {\n        value: 'orange',\n        label: 'Orange',\n    },\n];\n\nconst UnControlApp = () => {\n    return (\n        <div>\n            <RadioGroup dataSource={list} defaultValue={'apple'} />\n        </div>\n    );\n};\n\nReactDOM.render(<UnControlApp />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>RadioGroup</code> 渲染的组，通过设置 <code>defaultValue</code> 属性可以让组件变成<a href=\"https://facebook.github.io/react/docs/forms.html#uncontrolled-components\">非受限组件</a>。</p>\n"
      },
      {
        "title": "使用Grid 布局",
        "order": "5",
        "jsx": "import { Radio, Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\nconst RadioGroup = Radio.Group;\n\nclass ControlApp extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: 'orange',\n            other: 0,\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value) {\n        this.setState({\n            value: value\n        });\n        console.log('onChange', value);\n    }\n\n    onClick(e) {\n        console.log('onClick', e);\n    }\n\n    render() {\n        return (\n            <div >\n                <h4>Grid Layout</h4>\n                <RadioGroup onChange={this.onChange} style={{ width: '1000px'}} >\n                    <Row>\n                        <Col span=\"8\">\n                            <Radio value=\"apple1\" onClick={this.onClick} >Apple</Radio>\n                        </Col>\n                        <Col span=\"8\">\n                            <Radio value=\"pear1\" onClick={this.onClick} >Pear</Radio>\n                        </Col>\n                        <Col span=\"8\">\n                            <Radio value=\"banana1\" onClick={this.onClick} >Banana</Radio>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span=\"8\">\n                            <Radio value=\"peach\" onClick={this.onClick} >Peach</Radio>\n                        </Col>\n                        <Col span=\"8\">\n                            <Radio value=\"watermelon\" onClick={this.onClick} >Watermelon</Radio>\n                        </Col>\n                        <Col span=\"8\">\n                            <Radio value=\"strawberry\" onClick={this.onClick} >Strawberry</Radio>\n                        </Col>\n                    </Row>\n                </RadioGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>Grid</code> 布局 <code>RadioGroup</code> 中的选项。</p>\n"
      }
    ]
  },
  {
    "name": "Range",
    "category": "Components",
    "title": "区段选择器",
    "type": "表单",
    "importStatement": "import { Range } from '@alifd/next';",
    "body": "\n## 开发指南\n\n区间选择\n\n### 何时使用\n\n滑块控件(Sliders，简称滑块)可以让我们通过在连续或间断的区间内滑动锚点来选择一个合适的数值。区间最小值放在左边，对应的，最大值放在右边。滑块(Sliders)可以在滑动条的左右两端设定图标来反映数值的强度。这种交互特性使得它在设置诸如音量、亮度、色彩饱和度等需要反映强度等级的选项时成为一种极好的选择。\n\n### 使用注意\n\n-   onChange是和value进行配置做受控处理的。onChange在滑动过程中不会触发，滑动停止后会触发。\n-   onProcess不建议内部做setState 进行受控，因为会频繁触发，整个滑动过程中会一直触发。\n\n API\n\n### Range\n\n| 参数             | 说明                                                                                                                                                                          | 类型                                     | 默认值            |\n| -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------- | -------------- |\n| slider         | 滑块个数<br><br>**可选值**:<br>'single'(单个)<br>'double'(两个)                                                                                                                        | Enum                                   | 'single'       |\n| min            | 最小值                                                                                                                                                                         | Number                                 | 0              |\n| max            | 最大值                                                                                                                                                                         | Number                                 | 100            |\n| step           | 步长，取值必须大于 0，并且可被 (max - min) 整除。                                                                                                                                            | Number                                 | 1              |\n| value          | 设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`                                                                                                           | Number/Array&lt;Number>                | -              |\n| defaultValue   | 设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`                                                                                                           | Number/Array&lt;Number>                | -              |\n| marks          | 刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示）                                                                                         | Boolean/Number/Array&lt;Number>/Object | false          |\n| marksPosition  | marks显示在上方('above')or下方('below')<br><br>**可选值**:<br>'above', 'below'                                                                                                        | Enum                                   | 'above'        |\n| disabled       | 值为 `true` 时，滑块为禁用状态                                                                                                                                                         | Boolean                                | false          |\n| onChange       | 当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用<br><br>**签名**:<br>Function(value: String/number) => void<br>**参数**:<br>_value_: {String/number} null | Function                               | func.noop      |\n| onProcess      | 滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用<br><br>**签名**:<br>Function(value: String/number) => void<br>**参数**:<br>_value_: {String/number} null                    | Function                               | func.noop      |\n| hasTip         | 是否显示 tip                                                                                                                                                                    | Boolean                                | true           |\n| tipRender      | 自定义 tip 显示内容<br><br>**签名**:<br>Function(value: Number/String) => ReactNode<br>**参数**:<br>_value_: {Number/String} 值<br>**返回值**:<br>{ReactNode} 显示内容<br>                     | Function                               | value => value |\n| reverse        | 选中态反转                                                                                                                                                                       | Boolean                                | false          |\n| pure           | 是否pure render                                                                                                                                                               | Boolean                                | false          |\n| fixedWidth     | 是否为拖动线段类型,默认slider为double, defaultValue必传且指定区间                                                                                                                              | Boolean                                | false          |\n| tooltipVisible | tooltip是否默认展示                                                                                                                                                               | Boolean                                | false          |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Range } from '@alifd/next';\n\n\nconst style = {\n    marginBottom: '15px'\n};\n\nReactDOM.render((\n    <div style={{width: '400px', margin: '50px'}}>\n\n        <h4>single slider - from left to right</h4>\n        <Range defaultValue={30} style={style} hasTip={false} />\n        <h4>single slider - from right to left</h4>\n        <Range defaultValue={30} style={style} reverse hasTip={false} />\n        <h4>double slider - from outside to inside</h4>\n        <Range slider={'double'} defaultValue={[20, 40]} style={style} />\n        <h4>double slider - from inside to outside</h4>\n        <Range slider={'double'} defaultValue={[20, 40]} style={style} reverse />\n        <h4>Disabled</h4>\n        <Range defaultValue={30} disabled style={style} />\n        <h4>Disabled</h4>\n        <Range slider={'double'} defaultValue={[20, 40]} disabled style={style} />\n        <h4>tooltipVisible disabled</h4>\n        <Range disabled tooltipVisible defaultValue={60} style={style} />\n        <h4>tooltipVisible</h4>\n        <Range tooltipVisible defaultValue={60} style={style} />\n        <h4>tooltipVisible disabled</h4>\n        <Range disabled tooltipVisible slider={'double'} defaultValue={[57, 77]} style={style} />\n        <h4>tooltipVisible</h4>\n        <Range tooltipVisible slider={'double'} defaultValue={[57, 77]} style={style} />\n    </div>\n), mountNode);\n",
        "css": "",
        "body": "\n<p>基本滑块，当 <code>slider</code> 为 <code>double</code> 时，渲染为双滑块。当 <code>disabled</code> 为 <code>true</code> 时，滑块处于不可用状态。</p>\n"
      },
      {
        "title": "事件",
        "order": "3",
        "jsx": "import { Range } from '@alifd/next';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 128,\n            value2: 300,\n            doubleValue: [200, 300]\n        };\n\n    }\n\n    //Controlled. onChange will be triggered when startValue isn't equal to endValue after sliding\n    onChange(value) {\n        console.log('onChange value:', value);\n        this.setState({value});\n    }\n\n    // This callback will be triggered when startValue and endValue aren't equal after mousedown/mousemove. You shouldn't call setState here.\n    onProcess(value) {\n        console.log('onProcess: ', value);\n    }\n\n    onChangeDouble(doubleValue) {\n        console.log('onChange doubleValue:', doubleValue);\n        this.setState({doubleValue});\n    }\n\n    onProcessDouble(doubleValue) {\n        console.log('onProcess: ', doubleValue);\n    }\n\n    render() {\n        return (\n            <div style={{width: '400px', margin: '50px'}}>\n                <p>range 0 ~ 1024</p>\n                <div style={{width: '400px', marginTop: '50px'}}>\n\n                    <Range value={this.state.value} onChange={this.onChange.bind(this)}\n                        onProcess={this.onProcess.bind(this)}\n                        min={0} max={1024} marks={[0, 1024]} />\n                </div>\n\n                <p>with value and without onChange</p>\n                <div style={{width: '400px', marginTop: '50px'}}>\n\n                    <Range value={this.state.value2}\n                        onProcess={this.onProcess.bind(this)}\n                        min={0} max={1024} marks={[0, 1024]} />\n                </div>\n\n\n                <p>double slider controlled</p>\n                <div style={{width: '400px', marginTop: '50px'}}>\n\n                    <Range slider=\"double\" value={this.state.doubleValue} onChange={this.onChangeDouble.bind(this)}\n                        onProcess={this.onProcessDouble.bind(this)}\n                        min={0} max={1024} marks={[0, 1024]} />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": "",
        "body": "\n<p>onChange,onProcess事件</p>\n"
      },
      {
        "title": "范围与 step",
        "order": "5",
        "jsx": "import { Range, NumberPicker, Grid, Icon } from '@alifd/next';\n\n\n\nconst {Row, Col} = Grid;\n\nclass Demo extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            valueInt: 3,\n            valueDec: 0.05,\n            valueIcon: 1,\n            preIconClass: '',\n            afterIconClass: ''\n        };\n\n    }\n\n    onChangeInt(value) {\n        console.log(value);\n        this.setState(Object.assign({}, this.state, {\n            valueInt: value\n        }));\n    }\n\n    onChangeDec(value) {\n\n        this.setState(Object.assign({}, this.state, {\n            valueDec: value\n        }));\n    }\n\n    onIconRangeProcess(value) {\n        const mid = 50;\n        this.setState(Object.assign({}, this.state, {\n            valueIcon: value,\n            preIconClass: value < mid ? 'myicon-highlight' : '',\n            afterIconClass: value >= mid ? 'myicon-highlight' : ''\n        }));\n    }\n\n    render() {\n        return (\n            <div style={{width: '400px', margin: '50px'}}>\n                <h2>Used with numberPicker</h2>\n                <Row>\n                    <Col span=\"12\" style={{marginTop: '10px'}}>\n                        <Range value={this.state.valueInt} min={0} max={20} step={1}\n                            onChange={this.onChangeInt.bind(this)} />\n                    </Col>\n                    <Col span=\"12\">\n                        <NumberPicker value={this.state.valueInt} min={0} max={1024} step={1}\n                            onChange={this.onChangeInt.bind(this)} />\n                    </Col>\n                </Row>\n                <br />\n                <Row>\n                    <Col span=\"12\" style={{marginTop: '10px'}}>\n                        <Range value={this.state.valueDec} min={0} max={1} step={0.01}\n                            onChange={this.onChangeDec.bind(this)} />\n                    </Col>\n                    <Col span=\"12\">\n                        <NumberPicker value={this.state.valueDec} min={0} max={1} step={0.01}\n                            onChange={this.onChangeDec.bind(this)} />\n                    </Col>\n                </Row>\n                <h2>Used with Icon</h2>\n\n                <div className=\"iconWrapper\">\n                    <Icon className={`myicon ${this.state.preIconClass}`} type=\"cry\" />\n                    <Range min={1} max={100} onChange={this.onIconRangeProcess.bind(this)} value={this.state.valueIcon} />\n                    <Icon className={`myicon ${this.state.afterIconClass}`} type=\"smile\" />\n                </div>\n            </div>\n        );\n    }\n\n\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n\n",
        "css": ".iconWrapper {\n  position: relative;\n  padding: 0px 40px;\n}\n\n.iconWrapper .myicon {\n  position: absolute;\n  top: -3px;\n  width: 16px;\n  height: 16px;\n  line-height: 1;\n  font-size: 16px;\n  color: #ccc;\n}\n\n.iconWrapper .myicon:first-child {\n  left: 0;\n}\n\n.iconWrapper .myicon:last-child {\n  right: 0;\n}\n\n.myicon.myicon-highlight {\n  color: #666;\n}\n",
        "body": "\n<p>与number-picker结合,外部控制,与Icon结合设置边界Icon</p>\n"
      },
      {
        "title": "固定宽度滑动",
        "order": "0",
        "jsx": "import { Range } from '@alifd/next';\n\nconst style = {\n    marginBottom: '15px'\n};\n\nconst styleX3 = {\n    marginBottom: '45px'\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: [10, 300]\n        };\n\n    }\n\n    //Controlled. onChange will be triggered when startValue isn't equal to endValue after sliding\n    onChange(value) {\n        console.log('onChange value:', value);\n        this.setState({value});\n    }\n\n    // This callback will be triggered when startValue and endValue aren't equal after mousedown/mousemove. You shouldn't call setState here.\n    onProcess(value) {\n        // this.setState({value});\n        console.log('onProcess: ', value);\n    }\n\n    render() {\n        return (\n            <div style={{width: '400px', margin: '50px'}}>\n                <h4>fixedWidth basic</h4>\n                <Range fixedWidth defaultValue={[20, 40]} style={style} />\n                <h4>fixedWidth basic with tooltipVisible</h4>\n                <Range tooltipVisible fixedWidth defaultValue={[70, 90]} style={styleX3} />\n                <Range disabled tooltipVisible fixedWidth defaultValue={[70, 90]} style={style} />\n                <h4>fixedWidth with marks</h4>\n                <Range fixedWidth step={10} defaultValue={[20, 40]} scales={10} marks={10} style={styleX3} />\n                <Range fixedWidth step={2} defaultValue={[60, 80]} scales={[0, 100]} marks={[0, 30, 100]} style={style} marksPosition=\"below\" />\n                <h4>fixedWidth with 0.01 step</h4>\n                <Range fixedWidth defaultValue={[0.6, 0.7]} min={0.5} max={1} step={0.01}/>\n                <div style={{width: '400px', marginTop: '50px'}}>\n                    <p>range 0 ~ 1024</p>\n                    <Range fixedWidth value={this.state.value}\n                        onChange={this.onChange.bind(this)}\n                        onProcess={this.onProcess.bind(this)}\n                        min={0} max={1024} marks={[0, 1024]} />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n<p>默认双滑块(<code>slider</code> 为 <code>double</code>)，且指定 <code>defaultValue</code>为区间值下可用。范围不可被改变，拖动所选区域改变始末滑块位置。</p>\n"
      },
      {
        "title": "刻度及标识",
        "order": "1",
        "jsx": "import { Range } from '@alifd/next';\n\nconst style = {\n    marginBottom: '20px',\n    marginTop: '20px'\n};\n\nReactDOM.render((\n    <div style={{width: '400px', margin: '50px'}}>\n        <p>With minimal and maximal value</p>\n        <Range defaultValue={0} marks={[0, 100]} style={style} />\n        <Range slider={'double'} defaultValue={[20, 40]} scales={[0, 100]} marks={[0, 100]} style={style} />\n        <Range defaultValue={30} style={style} />\n        <p>Below</p>\n        <Range defaultValue={0} marks={[0, 100]} style={style} marksPosition=\"below\" />\n        <Range slider={'double'} defaultValue={[20, 40]} scales={[0, 100]} marks={[0, 100]} style={style} marksPosition=\"below\" />\n        <Range defaultValue={30} scales={[0, 100]} marks={[0, 100]} style={style} marksPosition=\"below\" />\n        <p>Equal division</p>\n        <Range defaultValue={30} marks={5} style={style} />\n        <Range slider={'double'} defaultValue={[20, 40]} scales={10} marks={10} style={style} />\n        <Range disabled slider={'double'} defaultValue={[20, 40]} scales={10} marks={10} style={style} />\n        <p>Free</p>\n        <Range defaultValue={30} marks={[0, 26, 37, 100]} style={style} />\n        <Range slider={'double'} defaultValue={[20, 40]} marks={[0, 26, 37, 100]} style={style} hasTip={false}/>\n        <Range defaultValue={30} marks={{0: '0°C', 26: '26°C', 37: '37°C', 100: '100°C'}} style={style} />\n    </div>\n), mountNode);\n",
        "css": "",
        "body": "\n<p>通过 <code>scales</code> 与 <code>marks</code> 属性设置刻度及标识。</p>\n"
      },
      {
        "title": "min,max,step",
        "order": "2",
        "jsx": "import { Range } from '@alifd/next';\n\nconst style = {\n    marginBottom: '40px',\n    marginTop: '40px'\n};\nReactDOM.render((\n    <div style={{width: '400px', margin: '50px'}}>\n        <p>Range 0 ~ 1024</p>\n        <Range defaultValue={128} min={0} max={1024} marks={[0, 1024]} style={style} />\n        <p>Range 0 ~ 1024，step 128</p>\n        <Range defaultValue={512} min={0} max={1024} step={128} marks={[0, 1024]}\n            style={style} />\n    </div>\n), mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 <code>min</code> 与 <code>max</code> 设置范围边界。通过 <code>step</code>(被 max - min 整除) 设置移动的最小步频。min默认为0,max默认为100.</p>\n"
      },
      {
        "title": "选择态反转",
        "order": "7",
        "jsx": "import { Range } from '@alifd/next';\n\n\nconst style = {\n    marginBottom: '15px'\n};\n\nReactDOM.render((\n    <div style={{width: '400px', margin: '50px'}}>\n        <Range defaultValue={30} style={style} hasTip={false} />\n        <Range defaultValue={30} style={style} reverse hasTip={false} />\n        <Range slider={'double'} defaultValue={[20, 40]} style={style} />\n        <Range slider={'double'} defaultValue={[20, 40]} style={style} reverse />\n        <Range defaultValue={30} disabled style={style} />\n        <Range defaultValue={30} disabled style={style} reverse />\n        <Range slider={'double'} defaultValue={[20, 40]} disabled style={style} />\n        <Range slider={'double'} defaultValue={[20, 40]} disabled style={style} reverse />\n    </div>\n), mountNode);\n",
        "css": "",
        "body": "\n<p>设置reverse为true, 选中态会反转。</p>\n"
      },
      {
        "title": "tipRender",
        "order": "5",
        "jsx": "import { Range } from '@alifd/next';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 128\n        };\n\n    }\n\n    // This callback will be triggered when startValue and endValue aren't equal after moving.\n    onChange(value) {\n        console.log('onChange value:', value);\n    }\n\n    // This callback will be triggered when startValue and endValue aren't equal after mousedown/mousemove. You can call setState here when using a controlled component.\n    onProcess(value) {\n        console.log('onProcess');\n        this.setState({value});\n    }\n\n    formatter(value) {\n        return `$${value}`;\n    }\n    render() {\n        return (\n            <div style={{width: '400px', margin: '50px'}}>\n                <p>Range 0 ~ 1024</p>\n                <div style={{width: '400px', marginTop: '50px'}}>\n\n                    <Range defaultValue={256} tipRender={this.formatter.bind(this)} value={this.state.value} onChange={this.onChange.bind(this)}\n                        onProcess={this.onProcess.bind(this)}\n                        min={0} max={1024} marks={[0, 1024]} />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": "",
        "body": "\n<p>tipRender 示例</p>\n"
      }
    ]
  },
  {
    "name": "Rating",
    "category": "Components",
    "title": "评分",
    "type": "基本",
    "importStatement": "import { Rating } from '@alifd/next';",
    "body": "\n## Guide\n\n评分组件通常用于用户反馈场景。\n\n API\n\n### Rating\n\n| 参数            | 说明                                                                                                    | 类型       | 默认值       |\n| ------------- | ----------------------------------------------------------------------------------------------------- | -------- | --------- |\n| defaultValue  | 默认值                                                                                                   | Number   | 0         |\n| size          | 尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                      | Enum     | 'medium'  |\n| value         | 值                                                                                                     | Number   | -         |\n| count         | 评分的总数                                                                                                 | Number   | 5         |\n| showGrade     | 是否显示 grade                                                                                            | Boolean  | false     |\n| allowHalf     | 是否允许半星评分                                                                                              | Boolean  | false     |\n| onChange      | 用户点击评分时触发的回调<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>_value_: {String} 评分值    | Function | func.noop |\n| onHoverChange | 用户hover评分时触发的回调<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>_value_: {String} 评分值 | Function | func.noop |\n| disabled      | 是否禁用                                                                                                  | Boolean  | false     |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Rating } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Rating defaultValue={3.2} onChange={val => console.log('change:', val)} onHoverChange={val => console.log('hover:', val)} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的用法。</p>\n"
      },
      {
        "title": "只读模式",
        "order": "4",
        "jsx": "import { Rating } from '@alifd/next';\n\nReactDOM.render(<Rating defaultValue={3.2} disabled />, mountNode);\n",
        "css": "",
        "body": "\n<p>设置 <code>disabled</code> 属性后，评分组件仅展示模式，不可选择。</p>\n"
      },
      {
        "title": "等级提示",
        "order": "5",
        "jsx": "import { Rating } from '@alifd/next';\n\nReactDOM.render(<Rating defaultValue={2} showGrade />, mountNode);\n",
        "css": "",
        "body": "\n<p>添加 <code>showGrade</code> 属性，使评分组件具有等级提示信息。</p>\n"
      },
      {
        "title": "半星评分",
        "order": "2",
        "jsx": "import { Rating } from '@alifd/next';\n\nReactDOM.render(<Rating defaultValue={3.2} allowHalf />, mountNode);\n",
        "css": "",
        "body": "\n<p>默认情况下评分组件只支持整数评分，通过开启 <code>allowHalf</code> 属性可以支持半星评分。</p>\n"
      },
      {
        "title": "尺寸",
        "order": "1",
        "jsx": "import { Rating } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Rating defaultValue={3.2} size=\"small\" />\n    <br/>\n    <br/>\n    <Rating defaultValue={3.2} />\n    <br/>\n    <br/>\n    <Rating defaultValue={3.2} size=\"large\" />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过 <code>size</code> 属性可以控制评分组件的大小，支持三种尺寸 <code>small</code>, <code>medium</code>, <code>large</code>。\n默认尺寸为 <code>medium</code> 。</p>\n"
      }
    ]
  },
  {
    "name": "Search",
    "category": "Components",
    "title": "搜索",
    "type": "表单",
    "importStatement": "import { Search } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n页面、表单数据搜索时使用\n\n API\n\n### Search\n\n> 输入框部分继承 Select.AutoComplete 的能力，可以直接用AutoComplete 的 api\n\n| 参数                 | 说明                                                                                                                         | 类型            | 默认值       |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------- | ------------- | --------- |\n| size               | 大小<br><br>**可选值**:<br>'large'('大')<br>'medium'('小')                                                                        | Enum          | 'medium'  |\n| type               | 类型 shape=normal: primary/secondary; shape=simple: normal/dark;<br><br>**可选值**:<br>'primary', 'secondary', 'normal', 'dark' | Enum          | 'normal'  |\n| shape              | 形状<br><br>**可选值**:<br>'normal', 'simple'                                                                                   | Enum          | 'normal'  |\n| defaultValue       | 搜索框默认值                                                                                                                     | String        | -         |\n| value              | 搜索框数值                                                                                                                      | String/Number | -         |\n| onChange           | 输入关键字时的回掉<br><br>**签名**:<br>Function(value: Object) => void<br>**参数**:<br>_value_: {Object} 输入值                            | Function      | func.noop |\n| onSearch           | 点击搜索按钮触发的回调<br><br>**签名**:<br>Function(value: Object) => void<br>**参数**:<br>_value_: {Object} 输入值                          | Function      | func.noop |\n| defaultFilterValue | 选择器默认值                                                                                                                     | String        | -         |\n| filter             | 选择器                                                                                                                        | Array         | \\[]       |\n| filterValue        | 选择器值                                                                                                                       | String        | -         |\n| onFilterChange     | 选择器发生变化时回调<br><br>**签名**:<br>Function(filter: Object) => void<br>**参数**:<br>_filter_: {Object} value                       | Function      | func.noop |\n| dataSource         | 搜索框下拉联想列表                                                                                                                  | Array         | -         |\n| placeholder        | 默认提示                                                                                                                       | String        | -         |\n| searchText         | button 的内容                                                                                                                 | ReactNode     | -         |\n| filterProps        | 选择器的props                                                                                                                  | Object        | -         |\n| buttonProps        | 按钮的额外属性                                                                                                                    | Object        | {}        |\n| popupContent       | 自定义渲染的的下拉框                                                                                                                 | ReactNode     | -         |\n| visible            | 自定义渲染的的下拉框                                                                                                                 | Boolean       | -         |\n| hasClear           | 是否显示清除按钮                                                                                                                   | Boolean       | false     |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基础用法",
        "order": "0",
        "jsx": "import { Search } from '@alifd/next';\n\n\nfunction onSearch(v) {\n    console.log(v);\n}\nconst App = () => [\n    <p key=\"1\">simple</p>,\n    <Search key=\"2\" shape=\"simple\" onSearch={onSearch} style={{width: '400px'}}/>,\n    <p key=\"3\">default</p>,\n    <Search key=\"4\"  onSearch={onSearch} style={{width: '400px'}}/>,\n    <p key=\"5\">custom text </p>,\n    <Search key=\"6\" searchText=\"search\" onSearch={onSearch} style={{width: '400px'}}/>,\n    <p key=\"7\">custom text widthout icon</p>,\n    <Search key=\"8\" hasIcon={false} searchText={<span style={{color: 'blue'}}>search</span>} onSearch={onSearch} style={{width: '400px'}}/>,\n];\n\nReactDOM.render(<App />, mountNode);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "联想",
        "order": "4",
        "jsx": "import { Search } from '@alifd/next';\n\nconst dataSource = [{\n    label: 'Recent',\n    value: 'Recent',\n}, {\n    label: 'dress',\n    value: 'dress',\n}, {\n    label: 'sunglasses',\n    value: 'sunglasses',\n}, {\n    label: 't-shirt',\n    value: 't-shirt',\n}];\n\nclass App extends React.Component {\n    onSearch(value, filterValue) {\n        console.log(value, filterValue);\n    }\n\n    onChange(value) {\n        this.setState({\n            value: value\n        });\n    }\n\n    render() {\n        return (\n            <Search dataSource={dataSource} onChange={this.onChange.bind(this)}\n                onSearch={this.onSearch.bind(this)}/>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "自定义弹层",
        "order": "5",
        "jsx": "import { Search, Menu, Button } from '@alifd/next';\n\nconst menuData = [\n    {\n        label: 'Option 1',\n        value: 'Option 1 Value',\n        index: '1'\n    }, {\n        label: 'Option 2',\n        value: 'Option 2 Value',\n        index: '2'\n    }, {\n        label: 'Option 3',\n        value: 'Option 3 Value',\n        index: '3'\n    }, {\n        label: 'Option 4',\n        value: 'Option 4 Value',\n        index: '4'\n    }\n];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false,\n            value: '111222',\n            menuData: menuData\n        };\n    }\n\n    renderMenu() {\n        const menuData = this.state.menuData;\n\n        return (<Menu onSelect={this.onSelect.bind(this)} rtl className=\"diy-menu\" selectMode=\"single\">\n            <Menu.Group label=\"Recent\" key=\"xxx\">\n                {menuData.map((item) => {\n                    return (<Menu.Item key={item.value}>\n                        {item.label}\n                        <Button className=\"diy-menu-button\" onClick={this.onDelete.bind(this, item.index)} text>Delete</Button>\n                    </Menu.Item>);\n                })}\n            </Menu.Group>\n        </Menu>);\n    }\n\n    onSearch(value) {\n        console.log(value);\n    }\n\n    onChange(value) {\n        this.setState({\n            visible: value.length > 0,\n            value: value\n        });\n    }\n\n    onSelect(selectedKeys) {\n        this.setState({\n            visible: false,\n            value: selectedKeys[0]\n        });\n    }\n\n    onDelete(index, e) {\n        e.stopPropagation();\n\n        const menuData = this.state.menuData;\n\n        const menuDataNew = [];\n\n        menuData.forEach(function (item) {\n            if (item.index !== index) {\n                menuDataNew.push(item);\n            }\n        });\n\n        this.setState({\n            menuData: menuDataNew\n        });\n    }\n\n    onFocus() {\n        this.setState({\n            visible: true\n        });\n    }\n\n    render() {\n        const {visible, value} = this.state;\n\n        return (<div style={{width: 700}}>\n            <Search\n                popupContent={this.renderMenu()}\n                visible={visible}\n                value={value}\n                onSearch={this.onSearch.bind(this)}\n                onChange={this.onChange.bind(this)}\n                onFocus={this.onFocus.bind(this)}\n            />\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "\n.diy-menu{\n    /*width: 275px*/;\n}\n\n.diy-menu .next-menu-item a{\n    display:none;\n    float: right;\n    cursor: pointer;\n}\n.diy-menu .next-menu-item:hover a{\n    display:inline-block;\n}\n.diy-menu .diy-menu-button {\n    float: right;\n}\n.diy-menu[dir=rtl] .diy-menu-button {\n    float: left;\n}\n",
        "body": "\n<p>自定义下拉框内容。</p>\n"
      },
      {
        "title": "下拉框",
        "order": "3",
        "jsx": "import { Search } from '@alifd/next';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filter: [\n                {\n                    label: 'Products',\n                    value: 'Products'\n                },\n                {\n                    label: 'Products1',\n                    value: 'Products1'\n                },\n                {\n                    label: 'Products2',\n                    value: 'Products2'\n                },\n                {\n                    label: 'Products3',\n                    value: 'Products3'\n                },\n                {\n                    label: 'Products4',\n                    value: 'Products4'\n                },\n                {\n                    label: 'Products5',\n                    value: 'Products5'\n                },\n                {\n                    label: 'Products6',\n                    value: 'Products6'\n                },\n                {\n                    label: 'Products7',\n                    value: 'Products7'\n                },\n                {\n                    label: 'Products8',\n                    value: 'Products8'\n                },\n                {\n                    label: 'Products9',\n                    value: 'Products9'\n                },\n                {\n                    label: 'Products10',\n                    value: 'Products10'\n                },\n                {\n                    label: 'Suppliers',\n                    value: 'Suppliers',\n                    default: true\n                }\n            ],\n            value: ''\n        };\n    }\n\n    onSearch(value, filterValue) {\n        console.log(value, filterValue);\n    }\n\n    onChange(value) {\n        this.setState({\n            value: value\n        });\n    }\n\n    // value is filter value，obj is the search value\n    onFilterChange(value) {\n        console.log(value);\n    }\n\n    render() {\n\n        return (<div>\n            <Search onChange={this.onChange.bind(this)} onSearch={this.onSearch.bind(this)}\n                filterProps={{autoWidth: false}}\n                filter={this.state.filter} onFilterChange={this.onFilterChange.bind(this)}/>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>带下拉框的用法。可以设置onFilterChange事件</p>\n"
      },
      {
        "title": "大小",
        "order": "2",
        "jsx": "import { Search } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Search\n        size=\"large\"\n        defaultValue=\"large\"\n        searchText=\"Search\"\n        placeholder=\"What are you looking for...\" />\n    <br/><br/>\n    <Search\n        size=\"medium\"\n        defaultValue=\"medium\"\n        searchText=\"Search\"\n        placeholder=\"What are you looking for...\" />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过size进行大小设置，支持large、medium</p>\n"
      },
      {
        "title": "类别",
        "order": "1",
        "jsx": "import { Search } from '@alifd/next';\n\nReactDOM.render(<div>\n    <h2>Normal</h2>\n    <Search type=\"primary\" placeholder=\"primary\"/>\n    <br/> <br/>\n    <Search type=\"secondary\" placeholder=\"Secondary\"/>\n    <br/> <br/>\n    <Search type=\"normal\" placeholder=\"normal\"/>\n    <br/> <br/>\n    <div style={{background: '#333', padding: 20}}>\n        <Search type=\"dark\" placeholder=\"dark\"/>\n    </div>\n    <h2>Simple</h2>\n    <Search type=\"normal\" shape=\"simple\" placeholder=\"normal\"/>\n    <br/> <br/>\n    <div style={{background: '#333', padding: 20}}>\n        <Search shape=\"simple\" type=\"dark\" placeholder=\"dark\"/>\n    </div>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>简单用法</p>\n"
      }
    ]
  },
  {
    "name": "Select",
    "category": "Components",
    "title": "选择器",
    "type": "表单",
    "importStatement": "import { Select } from '@alifd/next';",
    "body": "\n## Guide\n\n### 何时使用\n\n#### Select\n\n如果你不期望用户输入的值生效而仅仅是选择，那么使用 Select. 同时可以使用 Select 的 showSearch 属性进行过滤。\n\n### AutoComplete\n\nAutoComplete 会保留用户输入的值，本质上是 Input 组件，扩展了 autocomplete 的能力，所以 Input 组件的属性可以直接透传。\n\n### 常见问题\n\n#### 出现类似的`flatternChildren`的warning\n\nSelect 默认使用 `value` 作为菜单项的 key，如果没有设置 key 值，则使用默认的序列 index 作为 key 值，确保这些值不会发生重复。\n\n#### dataSource的使用\n\nSelect 同时支持 children 和在 props 中传入 dataSource 作为数据源, 如果同时设置, 则以 children 为准.\n\n注意：1. Select 默认使用 `value` 作为渲染的菜单项的 `key` 值，所以 `value` 不能重复, 否则无法渲染下拉菜单。2. value 不允许出现 null/undefined/object/array 类型数值\n\n1.  `children`的方式\n\n```js\n<Select>\n    <Select.Option value=\"option1\">option1</Select.Option>\n    <Select.Option value=\"option2\">option2</Select.Option>\n    <Select.Option disabled>disabled</Select.Option>\n</Select>;\n```\n\n2.  `props`的方式\n\n```js\nconst dataSource = [\n    {label:'option1', value:'option1'},\n    {label:'option2', value:'option2'},\n    {label:'disabled', disabled:true}\n];\n\n<Select dataSource={dataSource}/>\n```\n\n#### 定制弹出层\n\n参见示例中的 `弹层定制`。唯一需要注意的是 `overlay` 的元素记得透传 props.\n这是因为 Overlay 的弹层的动画是依靠 `className` 实现的，如果不透传 props 则会造成无法监听到动画播放结束的事件。\n\n API\n\n### Select\n\n| 参数                    | 说明                                                                                                                                                                                                                                                        | 类型                                     | 默认值                                |\n| --------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------- | ---------------------------------- |\n| size                  | 选择器尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                                                                                                       | Enum                                   | 'medium'                           |\n| value                 | 当前值，用于受控模式                                                                                                                                                                                                                                                | any                                    | -                                  |\n| defaultValue          | 初始的默认值                                                                                                                                                                                                                                                    | any                                    | -                                  |\n| placeholder           | 没有值的时候的占位符                                                                                                                                                                                                                                                | String                                 | -                                  |\n| autoWidth             | 下拉菜单是否与选择器对齐                                                                                                                                                                                                                                              | Boolean                                | true                               |\n| label                 | 自定义内联 label                                                                                                                                                                                                                                               | ReactNode                              | -                                  |\n| hasClear              | 是否有清除按钮                                                                                                                                                                                                                                                   | Boolean                                | -                                  |\n| state                 | 校验状态<br><br>**可选值**:<br>'error', 'loading'                                                                                                                                                                                                                | Enum                                   | -                                  |\n| readOnly              | 是否只读，只读模式下可以展开弹层但不能选                                                                                                                                                                                                                                      | Boolean                                | -                                  |\n| disabled              | 是否禁用选择器                                                                                                                                                                                                                                                   | Boolean                                | -                                  |\n| visible               | 当前弹层是否显示                                                                                                                                                                                                                                                  | Boolean                                | -                                  |\n| defaultVisible        | 弹层初始化是否显示                                                                                                                                                                                                                                                 | Boolean                                | -                                  |\n| onVisibleChange       | 弹层显示或隐藏时触发的回调<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示                                                                                                                                              | Function                               | func.noop                          |\n| popupContainer        | 弹层挂载的容器节点                                                                                                                                                                                                                                                 | String/Function                        | -                                  |\n| popupClassName        | 弹层的 className                                                                                                                                                                                                                                             | any                                    | -                                  |\n| popupStyle            | 弹层的内联样式                                                                                                                                                                                                                                                   | Object                                 | -                                  |\n| popupProps            | 添加到弹层上的属性                                                                                                                                                                                                                                                 | Object                                 | {}                                 |\n| popupContent          | 自定义弹层的内容                                                                                                                                                                                                                                                  | ReactNode                              | -                                  |\n| filterLocal           | 是否使用本地过滤，在数据源为远程的时候需要关闭此项                                                                                                                                                                                                                                 | Boolean                                | true                               |\n| filter                | 本地过滤方法，返回一个 Boolean 值确定是否保留<br><br>**签名**:<br>Function() => void                                                                                                                                                                                          | Function                               | filter                             |\n| onToggleHighlightItem | 键盘上下键切换菜单高亮选项的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                     | Function                               | func.noop                          |\n| useVirtual            | 是否开启虚拟滚动模式                                                                                                                                                                                                                                                | Boolean                                | -                                  |\n| dataSource            | 传入的数据源，可以动态渲染子项，详见 [dataSource的使用](#dataSource的使用)                                                                                                                                                                                                        | Array&lt;Object/Boolean/Number/String> | -                                  |\n| itemRender            | 渲染 MenuItem 内容的方法<br><br>**签名**:<br>Function(item: Object, searchValue: String) => ReactNode<br>**参数**:<br>_item_: {Object} 渲染节点的item<br>_searchValue_: {String} 搜索关键字（如果开启搜索）<br>**返回值**:<br>{ReactNode} item node<br>                                   | Function                               | -                                  |\n| mode                  | 选择器模式<br><br>**可选值**:<br>'single', 'multiple', 'tag'                                                                                                                                                                                                      | Enum                                   | 'single'                           |\n| notFoundContent       | 弹层内容为空的文案                                                                                                                                                                                                                                                 | ReactNode                              | -                                  |\n| onChange              | Select发生改变时触发的回调<br><br>**签名**:<br>Function(value: mixed, actionType: String, item: mixed) => void<br>**参数**:<br>_value_: {mixed} 选中的值<br>_actionType_: {String} 触发的方式, 'itemClick', 'enter', 'tag'<br>_item_: {mixed} 选中的值的对象数据 (useDetailValue=false有效) | Function                               | -                                  |\n| hasBorder             | 是否有边框                                                                                                                                                                                                                                                     | Boolean                                | -                                  |\n| hasArrow              | 是否有下拉箭头                                                                                                                                                                                                                                                   | Boolean                                | true                               |\n| showSearch            | 展开后是否能搜索（tag 模式下固定为true）                                                                                                                                                                                                                                  | Boolean                                | false                              |\n| onSearch              | 当搜索框值变化时回调<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>_value_: {String} 数据                                                                                                                                                           | Function                               | func.noop                          |\n| onSearchClear         | 当搜索框值被清空时候的回调<br><br>**签名**:<br>Function(actionType: String) => void<br>**参数**:<br>_actionType_: {String} 触发的方式, 'select'(选择清空), 'popupClose'(弹窗关闭清空)                                                                                                     | Function                               | func.noop                          |\n| hasSelectAll          | 多选模式下是否有全选功能                                                                                                                                                                                                                                              | Boolean/String                         | -                                  |\n| fillProps             | 填充到选择框里的值的 key\b\b                                                                                                                                                                                                                                          | String                                 | -                                  |\n| useDetailValue        | onChange 返回的 value 使用 dataSource 的对象                                                                                                                                                                                                                      | Boolean                                | -                                  |\n| cacheValue            | dataSource 变化的时是否保留已选的内容                                                                                                                                                                                                                                  | Boolean                                | true                               |\n| valueRender           | 渲染 Select 展现内容的方法<br><br>**签名**:<br>Function(item: Object) => ReactNode<br>**参数**:<br>_item_: {Object} 渲染节点的item<br>**返回值**:<br>{ReactNode} 展现内容<br>                                                                                                      | Function                               | item => item.label \\|\\| item.value |\n| searchValue           | 受控搜索值，一般不需要设置                                                                                                                                                                                                                                             | String                                 | -                                  |\n| hiddenSelected        | 选择后是否立即隐藏菜单 (mode=multiple/tag 模式生效)                                                                                                                                                                                                                      | Boolean                                | -                                  |\n| onRemove              | tag 删除回调<br><br>**签名**:<br>Function(item: object) => void<br>**参数**:<br>_item_: {object} 渲染节点的item                                                                                                                                                        | Function                               | func.noop                          |\n| onFocus               | 焦点事件<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                                 | Function                               | func.noop                          |\n| onBlur                | 失去焦点事件<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                               | Function                               | func.noop                          |\n\n### Select.AutoComplete\n\n| 参数                    | 说明                                                                                                                                                                                                                                  | 类型                      | 默认值       |\n| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------- | --------- |\n| size                  | 选择器尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                                                                                 | Enum                    | 'medium'  |\n| value                 | 当前值，用于受控模式                                                                                                                                                                                                                          | String/Number           | -         |\n| defaultValue          | 初始化的默认值                                                                                                                                                                                                                             | String/Number           | -         |\n| placeholder           | 没有值的时候的占位符                                                                                                                                                                                                                          | String                  | -         |\n| autoWidth             | 下拉菜单是否与选择器对齐                                                                                                                                                                                                                        | Boolean                 | true      |\n| label                 | 自定义内联 label                                                                                                                                                                                                                         | ReactNode               | -         |\n| hasClear              | 是否有清除按钮                                                                                                                                                                                                                             | Boolean                 | -         |\n| state                 | 校验状态<br><br>**可选值**:<br>'error', 'loading'                                                                                                                                                                                          | Enum                    | -         |\n| readOnly              | 是否只读，只读模式下可以展开弹层但不能选                                                                                                                                                                                                                | Boolean                 | -         |\n| disabled              | 是否禁用选择器                                                                                                                                                                                                                             | Boolean                 | -         |\n| visible               | 当前弹层是否显示                                                                                                                                                                                                                            | Boolean                 | -         |\n| defaultVisible        | 弹层初始化是否显示                                                                                                                                                                                                                           | Boolean                 | -         |\n| onVisibleChange       | 弹层显示或隐藏时触发的回调<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否显示                                                                                                                        | Function                | func.noop |\n| popupContainer        | 弹层挂载的容器节点                                                                                                                                                                                                                           | String/Function         | -         |\n| popupClassName        | 弹层的 className                                                                                                                                                                                                                       | any                     | -         |\n| popupStyle            | 弹层的内联样式                                                                                                                                                                                                                             | Object                  | -         |\n| popupProps            | 添加到弹层上的属性                                                                                                                                                                                                                           | Object                  | {}        |\n| popupContent          | 自定义弹层的内容                                                                                                                                                                                                                            | ReactNode               | -         |\n| filterLocal           | 是否使用本地过滤，在数据源为远程的时候需要关闭此项                                                                                                                                                                                                           | Boolean                 | true      |\n| filter                | 本地过滤方法，返回一个 Boolean 值确定是否保留<br><br>**签名**:<br>Function() => void                                                                                                                                                                    | Function                | filter    |\n| onToggleHighlightItem | 键盘上下键切换菜单高亮选项的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                               | Function                | func.noop |\n| useVirtual            | 是否开启虚拟滚动模式                                                                                                                                                                                                                          | Boolean                 | -         |\n| dataSource            | 传入的数据源，可以动态渲染子项                                                                                                                                                                                                                     | Array&lt;Object/String> | -         |\n| itemRender            | 渲染 MenuItem 内容的方法<br><br>**签名**:<br>Function(item: Object) => ReactNode<br>**参数**:<br>_item_: {Object} 渲染节点的 item<br>**返回值**:<br>{ReactNode} item node<br>                                                                          | Function                | -         |\n| onChange              | Select发生改变时触发的回调<br><br>**签名**:<br>Function(value: mixed, actionType: String, item: mixed) => void<br>**参数**:<br>_value_: {mixed} 选中的值<br>_actionType_: {String} 触发的方式, 'itemClick', 'enter', 'change'<br>_item_: {mixed} 选中的值的对象数据 | Function                | -         |\n| fillProps             | 填充到选择框里的值的 key\b\b，默认是 value                                                                                                                                                                                                          | String                  | 'value'   |\n\n### Select.OptionGroup\n\n| 参数    | 说明      | 类型        | 默认值 |\n| ----- | ------- | --------- | --- |\n| label | 设置分组的文案 | ReactNode | -   |\n\n### Select.Option\n\n| 参数       | 说明   | 类型      | 默认值 |\n| -------- | ---- | ------- | --- |\n| value    | 选项值  | any     | -   |\n| disabled | 是否禁用 | Boolean | -   |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本使用",
        "order": "0",
        "jsx": "import { Select } from '@alifd/next';\n\nconst Option = Select.Option;\n\nconst onChange = function (value) {\n    console.log(value);\n};\n\nconst onToggleHighlightItem = function (item, type) {\n    console.log(item, type);\n};\n\nReactDOM.render(<Select id=\"basic-demo\" onChange={onChange} onToggleHighlightItem={onToggleHighlightItem} defaultValue=\"jack\" aria-label=\"name is\" showSearch hasClear>\n    <Option value=\"jack\">Jack</Option>\n    <Option value=\"frank\">Frank</Option>\n    <Option value=\"hugo\">Hugo</Option>\n</Select>, mountNode);\n",
        "css": "",
        "body": "\n<p>简单</p>\n"
      },
      {
        "title": "自动完成大小",
        "order": "10",
        "jsx": "import { Select } from '@alifd/next';\n\nconst {AutoComplete} = Select;\nconst dataSource = [\n    'Lucy King',\n    'Lily King',\n    'Jim Green',\n    {\n        label: 'Chinese',\n        children: [\n            {value: 'Hang Meimei', label: 'Hang Meimei'},\n            'Li Lei',\n            {value: 'Gao Hui', label: 'Gao Hui', disabled: true},\n            'Zhang San',\n            'Li Si',\n            'Wang Wu',\n            {value: 'Zhao Benshan', label: 'Zhao Benshan', disabled: true},\n            'Sun Yang',\n            'Song Shuying'\n        ]\n    },\n    {\n        label: 'Pets',\n        children: [\n            'Poly',\n            'Kitty'\n        ]\n    }\n];\n\nconst ctrlDataSources = {\n    size: ['small', 'medium', 'large'],\n    disabled: [true, false],\n    hasClear: [true, false]\n};\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null,\n            size: undefined,\n            disabled: undefined,\n            hasClear: undefined,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleCtrlChange = this.handleCtrlChange.bind(this);\n    }\n\n    handleCtrlChange(key, value) {\n        this.setState({[key]: value});\n\n        if (key === 'mode') {\n            this.setState({value: null});\n        }\n    }\n\n    handleChange(value) {\n        console.log('handleChange: value: ', value);\n        this.setState({value});\n    }\n\n    renderCtrlNodes(state) {\n        const ctrlNodes = [];\n        let k;\n        for (k in ctrlDataSources) {\n            if (ctrlDataSources.hasOwnProperty(k)) {\n                ctrlNodes.push(\n                    <Select key={k}\n                        label={`${k}: `}\n                        value={state[k]}\n                        dataSource={ctrlDataSources[k]}\n                        onChange={this.handleCtrlChange.bind(this, k)} />\n                );\n            }\n        }\n\n        return ctrlNodes;\n    }\n\n    render() {\n\n        return (\n            <div className=\"demo-container\">\n                <div className=\"demo-controller\">{this.renderCtrlNodes(this.state)}</div>\n                <AutoComplete\n                    {...this.state}\n                    style={{maxWidth: 300}}\n                    onChange={this.handleChange}\n                    dataSource={dataSource} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".demo-container {\n    padding: 16px;\n    background-color: #F8F8F8;\n}\n\n.demo-controller {\n    padding: 12px 12px 4px;\n    margin-bottom: 16px;\n    border: 2px dashed #ddd;\n}\n\n.next-select {\n    margin-right: 8px;\n    margin-bottom: 8px;\n}\n",
        "body": "\n<p><code>AutoComplete</code> 大小、disabled、清除</p>\n"
      },
      {
        "title": "动态数据",
        "order": "11",
        "jsx": "import { Select } from '@alifd/next';\nimport jsonp from 'jsonp';\n\nconst {AutoComplete} = Select;\n\nclass Demo extends React.Component {\n    state = {\n        dataSource: []\n    };\n\n    handleChange = value => {\n        clearTimeout(this.searchTimeout);\n        this.searchTimeout = setTimeout(() => {\n            jsonp(`https://suggest.taobao.com/sug?code=utf-8&q=${value}`, (err, data) => {\n                const dataSource = data.result.map(item => item[0]);\n                this.setState({dataSource});\n            });\n        }, 100);\n    }\n\n    render() {\n        return (\n            <div className=\"demo-container\">\n                <AutoComplete\n                    filterLocal={false}\n                    placeholder=\"search from taobao\"\n                    onChange={this.handleChange}\n                    dataSource={this.state.dataSource}/>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo/>, mountNode);\n",
        "css": ".demo-container {\n    background-color: #F8F8F8;\n    padding: 16px;\n}\n",
        "body": "\n<p>使用动态数据填充 AutoComplete, 设置 <code>filterLocal</code> 为 false</p>\n"
      },
      {
        "title": "图文展示",
        "order": "12",
        "jsx": "import { Select, Icon } from '@alifd/next';\nimport jsonp from 'jsonp';\n\nconst {AutoComplete} = Select;\n\nclass Demo extends React.Component {\n    state = {\n        dataSource: []\n    }\n\n    handleChange = (value) => {\n        if (this.searchTimeout) {\n            clearTimeout(this.searchTimeout);\n        }\n        this.searchTimeout = setTimeout(() => {\n            jsonp(`https://suggest.taobao.com/sug?code=utf-8&q=${value}`, (err, data) => {\n                const dataSource = data.result.map(item => {\n                    return {\n                        label: <div><Icon type=\"picture\" size=\"small\"/>&nbsp;{item[0]}</div>,\n                        value: item[1],\n                        originLabel: item[0]\n                    };\n                });\n                this.setState({dataSource});\n            });\n        }, 100);\n    }\n\n    render() {\n        return (\n            <div className=\"demo-container\">\n                <AutoComplete onChange={this.handleChange}\n                    filterLocal={false}\n                    fillProps=\"originLabel\"\n                    placeholder=\"search from taobao\"\n                    dataSource={this.state.dataSource}/></div>\n        );\n    }\n}\nReactDOM.render(<Demo/>, mountNode);\n",
        "css": ".next-select {\n    margin-right:10px;\n    vertical-align: middle;\n}\n\n.demo-container {\n  background-color: #F8F8F8;\n  padding: 16px;\n}\n\n.demo-container p {\n    margin-top:0;\n}\n",
        "body": "\n<p>展示较为复杂的内容展示</p>\n"
      },
      {
        "title": "自动完成",
        "order": "9",
        "jsx": "import { Select } from '@alifd/next';\n\nconst dataSource = [\n    'Lucy King',\n    'Lily King',\n    'Jim Green',\n    {\n        label: 'Chinese',\n        children: [\n            {value: 'Hang Meimei', label: 'Hang Meimei'},\n            'Li Lei',\n            {value: 'Gao Hui', label: 'Gao Hui', disabled: true},\n            'Zhang San',\n            'Li Si',\n            'Wang Wu',\n            {value: 'Zhao Benshan', label: 'Zhao Benshan', disabled: true},\n            'Sun Yang',\n            'Song Shuying'\n        ]\n    },\n    {\n        label: 'Pets',\n        children: [\n            'Poly',\n            'Kitty'\n        ]\n    }\n];\n\nconst onChange = (v) => {\n    console.log(v);\n};\n\nReactDOM.render(<Select.AutoComplete style={{width: 300}} onChange={onChange}  dataSource={dataSource} />, mountNode);\n",
        "css": "",
        "body": "\n<p><code>AutoComplete</code> 继承了 <code>Input</code> 的能力，并在其基础上增加了 autoComplete 的功能。</p>\n"
      },
      {
        "title": "自定义渲染",
        "order": "13",
        "jsx": "import { Select, Icon } from '@alifd/next';\n\nconst dataSource = [\n    {value: '#FF0000', label: 'red', title: 'red'},\n    {value: '#00AA00', label: 'green', title: 'green'},\n    {value: '#B482DB', label: 'purple', title: 'purple'},\n    {value: '#F17334', label: 'orange', title: 'orange'},\n    {value: '#66CCFF', label: 'blue', title: 'blue'}\n];\n\nconst itemRender = item => {\n    return (\n        <span>\n            <Icon type=\"account\" size=\"xs\" style={{color: item.value}} />\n            <Icon type=\"account\" size=\"xs\" style={{color: item.value}} />\n            <Icon type=\"account\" size=\"xs\" style={{color: item.value}} />\n            <Icon type=\"account\" size=\"xs\" style={{color: item.value}} />\n            <Icon type=\"account\" size=\"xs\" style={{color: item.value}} />\n        </span>\n    );\n};\n\nconst valueRender = item => {\n    return <span><Icon type=\"account\" size=\"xs\" style={{color: item.value}} /> {item.label}</span>;\n};\n\nconst dataSource2 = [\n    'Lorem ipsum dolor sit amet',\n    'consectetur adipisicing elit',\n    'sed do eiusmod tempor incididunt',\n    'ut labore et dolore magna aliqua.',\n    'Ut enim ad minim veniam',\n    'quis nostrud exercitation',\n    'ullamco laboris nisi ut',\n    'aliquip ex ea commodo consequat',\n    'Duis aute irure dolor in',\n    'reprehenderit in voluptate',\n    'velit esse cillum dolore eu',\n    'Fugiat nulla pariatur excepteur sint',\n    'occaecat cupidatat non proident',\n    'sunt in culpa qui officia',\n    'deserunt mollit anim id est laborum',\n];\n\n// highlight keywords\nconst itemRender2 = (item, searchKey) => {\n    let label = item.label;\n    if (searchKey && searchKey.length) {\n        const key = searchKey.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n        const reg = new RegExp(`(${key})`, 'ig');\n        label = label.replace(reg, x => `<span class=\"next-select-highlight\">${x}</span>`);\n    }\n\n    return <span dangerouslySetInnerHTML={{__html: label}} />;\n};\n\nReactDOM.render(\n    <div className=\"demo-container\">\n        <Select dataSource={dataSource} itemRender={itemRender} valueRender={valueRender} placeholder=\"pick your color\" />\n        <Select showSearch dataSource={dataSource2} itemRender={itemRender2} placeholder=\"highlight keywords\" style={{minWidth: 200}} />\n    </div>,\n    mountNode\n);\n",
        "css": ".demo-container {\n    padding: 16px;\n    background-color: #F8F8F8;\n}\n\n.demo-container .next-select {\n    margin-right: 10px;\n}\n",
        "body": "\n<p>通过 <code>itemRender</code> 和 <code>valueRender</code> (仅 Select) 自定义渲染的节点内容。</p>\n"
      },
      {
        "title": "弹层定制",
        "order": "14",
        "jsx": "import { Select } from '@alifd/next';\nimport classNames from 'classnames';\n/* eslint-disable react/prop-types, react/no-multi-comp */\n\n// prevent onBlur\nfunction preventDefault(e) {\n    e.preventDefault();\n}\n\nclass Menu extends React.Component {\n    data = [{\n        label: 'value1',\n        value: 1\n    }, {\n        label: 'value2',\n        value: 2\n    }];\n\n    onClick(item) {\n        this.props.onChange(item);\n    }\n\n    renderItems() {\n        return this.data.map(item => <li onClick={this.onClick.bind(this, item)} key={item.value}>{item.label}</li>);\n    }\n\n    render() {\n        const {className, ...others} = this.props;\n        const cls = classNames('overlay-content', className);\n\n        return (\n            <ul className={cls} {...others}>\n                {this.renderItems()}\n            </ul>\n        );\n    }\n}\n\nclass Demo extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null\n        };\n    }\n\n    handleSelect = (value) => {\n        this.setState({\n            value,\n            visible: false\n        });\n    }\n\n    onVisibleChange = (visible) => {\n        this.setState({\n            visible\n        });\n    }\n\n    render() {\n        const popupContent = <Menu onChange={this.handleSelect} onMouseDown={preventDefault}/>;\n\n        return (\n            <div className=\"demo-container\">\n                <Select\n                    placeholder=\"custom popupContent\"\n                    visible={this.state.visible}\n                    onVisibleChange={this.onVisibleChange}\n                    value={this.state.value}\n                    popupContent={popupContent} />\n            </div>\n        );\n    }\n}\nReactDOM.render(<Demo/>, mountNode);\n",
        "css": ".demo-container {\n  background-color: #F8F8F8;\n  padding: 16px;\n}\n\n.demo-container p {\n    margin-top:0;\n}\n\n.overlay-content {\n    border:1px solid #DDDDDD;\n    padding:10px;\n    background: #FFFFFF;\n    margin:0;\n    font-size: 12px;\n    font-family: Arial;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n\n.overlay-content li {\n    list-style: none;\n    line-height:30px;\n    padding: 0 5px;\n    cursor: pointer;\n}\n\n.overlay-content li:hover {\n    background: #F8F8F8;\n}\n\n.overlay-content li:last-child {\n    border-width:0;\n}\n",
        "body": "\n<p>通过 popupContent 定制 select 弹层</p>\n"
      },
      {
        "title": "多选",
        "order": "2",
        "jsx": "import { Select } from '@alifd/next';\n\nconst dataSource = [\n    {value: '10001', label: 'Lucy King'},\n    {value: 10002, label: 'Lily King'},\n    {value: 10003, label: 'Tom Cat', disabled: true},\n    {label: 'Special Group', children: [\n        {value: new Date(), label: 'new Date()'},\n        {value: 'false', label: 'FALSE'},\n        {value: 0, label: 'ZERO'}\n    ]},\n];\n\nfunction handleChange(value) {\n    console.log(value);\n}\n\nReactDOM.render(<Select mode=\"multiple\" onChange={handleChange} dataSource={dataSource} style={{width: 300}} />, mountNode);\n",
        "css": "",
        "body": "\n<p>多选模式</p>\n"
      },
      {
        "title": "选择器",
        "order": "3",
        "jsx": "import { Select } from '@alifd/next';\n\nconst dataSource = [\n    {value: '10001', label: 'Lucy King'},\n    {value: 10002, label: 'Lily King'},\n    {value: 10003, label: 'Tom Cat', disabled: true},\n    {label: 'Special Group', children: [\n        {value: new Date(), label: 'new Date()'},\n        {value: false, label: 'FALSE'},\n        {value: 0, label: 'ZERO'}\n    ]},\n];\n\nconst ctrlDataSources = {\n    mode: ['single', 'multiple', 'tag'],\n    size: ['small', 'medium', 'large'],\n    showSearch: [true, false],\n    hasArrow: [true, false],\n    hasBorder: [true, false],\n    hasClear: [true, false],\n};\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null,\n            size: undefined,\n            mode: undefined,\n            hasArrow: undefined,\n            hasBorder: undefined,\n            showSearch: undefined,\n            hasClear: undefined,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleCtrlChange = this.handleCtrlChange.bind(this);\n    }\n\n    handleCtrlChange(key, value) {\n        this.setState({[key]: value});\n\n        if (key === 'mode') {\n            this.setState({value: null});\n        }\n    }\n\n    handleChange(value, item) {\n        console.log('handleChange: value: ', value, item);\n        this.setState({value});\n    }\n\n    renderCtrlNodes(state) {\n        const ctrlNodes = [];\n        let k;\n        for (k in ctrlDataSources) {\n            if (ctrlDataSources.hasOwnProperty(k)) {\n                ctrlNodes.push(\n                    <Select key={k}\n                        label={`${k}: `}\n                        value={state[k]}\n                        id={k}\n                        dataSource={ctrlDataSources[k]}\n                        onChange={this.handleCtrlChange.bind(this, k)} />\n                );\n            }\n        }\n\n        return ctrlNodes;\n    }\n\n    render() {\n\n        return (\n            <div className=\"demo-container\">\n                <div className=\"demo-controller\">{this.renderCtrlNodes(this.state)}</div>\n                <Select\n                    {...this.state}\n                    onChange={this.handleChange}\n                    dataSource={dataSource} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".demo-container {\n    padding: 16px;\n    background-color: #F8F8F8;\n}\n\n.demo-controller {\n    padding: 12px 12px 4px;\n    margin-bottom: 16px;\n    border: 2px dashed #ddd;\n}\n\n.next-select {\n    margin-right: 8px;\n    margin-bottom: 8px;\n}\n",
        "body": "\n<p>演示了 Select 的多种形态.</p>\n"
      },
      {
        "title": "级联选择",
        "order": "4",
        "jsx": "import { Select } from '@alifd/next';\n\nconst provinceData = ['Zhejiang', 'Hubei', 'Jiangsu'];\nconst cityData = {\n    Zhejiang: ['Hangzhou', 'Ningbo', 'Wenzhou'],\n    Hubei: ['Wuhan', 'Yichang', 'Jingzhou'],\n    Jiangsu: ['Nanjing', 'Suzhou', 'Zhenjiang']\n};\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            disabled: true\n        };\n\n        this.handleProvinceChange = this.handleProvinceChange.bind(this);\n        this.handleCityChange = this.handleCityChange.bind(this);\n    }\n\n    handleProvinceChange(value) {\n        const data = cityData[value];\n        this.setState({data, province: value, city: '', disabled: !data});\n    }\n\n    handleCityChange(value) {\n        this.setState({city: value});\n        console.log(this.state.province, value);\n    }\n\n    render() {\n        const {data, disabled, province, city} = this.state;\n\n        return (\n            <div className=\"demo-container\">\n                <Select placeholder=\"Select Province\" dataSource={provinceData} value={province} onChange={this.handleProvinceChange} />\n                <Select placeholder=\"Select City\" dataSource={data} value={city} onChange={this.handleCityChange} disabled={disabled}/>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo/>, mountNode);\n",
        "css": ".next-select {\n    margin-right:10px;\n}\n\n.demo-container {\n    background-color: #F8F8F8;\n    padding: 16px;\n}\n",
        "body": "\n<p>使用 Select 构建级联选择框</p>\n"
      },
      {
        "title": "自定义 value",
        "order": "6",
        "jsx": "import { Select } from '@alifd/next';\n\nconst dataSource = [\n    {value: 'Lilith', age: 22, gender: 'F'},\n    {value: 'Tom Cat', age: 28, gender: 'M'},\n    {value: 'Jim Green', age: 18, gender: 'M'},\n    {value: 'Monkey King', age: 999, gender: 'M'},\n];\n\nconst handleChange = value => {\n    console.log('handleChange: ', value);\n};\n\nconst valueRender = v => {\n    return `${v.value} / ${v.gender} / ${v.age}`;\n};\n\nReactDOM.render(\n    <div className=\"demo-container\">\n        <Select\n            mode=\"multiple\"\n            placeholder=\"custom value\"\n            valueRender={valueRender}\n            dataSource={dataSource}\n            onChange={handleChange} />\n    </div>,\n    mountNode\n);\n",
        "css": ".demo-container {\n    padding: 16px;\n    background-color: #F8F8F8;\n}\n",
        "body": "\n<p>Select 的 value 可以是任意非空类型的值，但是要保证 toString() 后是唯一的。</p>\n"
      },
      {
        "title": "分组",
        "order": "5",
        "jsx": "import { Select } from '@alifd/next';\n\nconst {Option, OptionGroup} = Select;\n\nconst dataSource = [{\n    label: 'label1',\n    children: [{\n        label: 'label1-1',\n        value: 'text1-1'\n    }]\n}, {\n    label: 'label2',\n    children: [{\n        label: 'label2-1',\n        value: 'text2-1'\n    }]\n}];\n\nReactDOM.render(\n    <div className=\"demo-container\">\n        <Select placeholder=\"OptionGroup\">\n            <OptionGroup label=\"group1\">\n                <Option value=\"small\">Small</Option>\n                <Option value=\"medium\">Medium</Option>\n                <Option value=\"large\">Large</Option>\n            </OptionGroup>\n            <OptionGroup label=\"group2\">\n                <Option value=\"small2\">Small2</Option>\n                <Option value=\"medium2\">Medium2</Option>\n                <Option value=\"large2\">Large2</Option>\n            </OptionGroup>\n        </Select>\n        <Select placeholder=\"optgroup\">\n            <option value=\"apple\">Apple</option>\n            <option value=\"orange\">Orange</option>\n            <option value=\"banana\">Banana</option>\n            <optgroup label=\"Pets Group\">\n                <option value=\"cat\">Cat</option>\n                <option value=\"rabbit\">Rabbit</option>\n                <option value=\"dog\" disabled>Dog</option>\n            </optgroup>\n        </Select>\n        <Select placeholder=\"item.children\" dataSource={dataSource}/>\n    </div>,\n    mountNode\n);\n",
        "css": ".next-select {\n    margin-right:10px;\n}\n\n.demo-container {\n    background-color: #F8F8F8;\n    padding: 16px;\n}\n",
        "body": "\n<p>使用 OptionGroup 针对选项进行分组，也可以使用原生的 html 标签 optgroup</p>\n"
      },
      {
        "title": "搜索框",
        "order": "7",
        "jsx": "import { Select } from '@alifd/next';\nimport jsonp from 'jsonp';\n\nlet timestamp = Date.now();\n\nclass Demo extends React.Component {\n    state = {\n        dataSource: []\n    }\n\n    handleSearch = (value) => {\n        if (this.searchTimeout) {\n            clearTimeout(this.searchTimeout);\n        }\n        this.searchTimeout = setTimeout(() => {\n            value ? jsonp(`https://suggest.taobao.com/sug?code=utf-8&q=${value}`, (err, data) => {\n                const dataSource = data.result.map(item => ({\n                    label: item[0], value: (timestamp++).toString(36)\n                }));\n                this.setState({dataSource});\n            }) : this.setState({dataSource: []});\n        }, 100);\n    }\n\n    render() {\n        return (\n            <div className=\"demo-container\">\n                <Select showSearch placeholder=\"select search\" filterLocal={false} dataSource={this.state.dataSource} onSearch={this.handleSearch} style={{width: 200}}/>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo/>, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>showSearch</code> 显示搜索框，如果需要动态更新 dataSource，需要关闭 filterLocal</p>\n"
      },
      {
        "title": "标签",
        "order": "1",
        "jsx": "import { Select } from '@alifd/next';\n\nconst dataSource = [\n    {value: '10001', label: 'Lucy King'},\n    {value: 10002, label: 'Lily King'},\n    {value: 10003, label: 'Tom Cat', disabled: true},\n    {label: 'Special Group', children: [\n        {value: -1, label: 'FALSE'},\n        {value: 0, label: 'ZERO'}\n    ]},\n];\n\nfunction handleChange(value) {\n    console.log(value);\n}\n\nReactDOM.render(<Select aria-label=\"tag mode\" mode=\"tag\" defaultValue={['10001']} onChange={handleChange} dataSource={dataSource} style={{width: 300}} />, mountNode);\n",
        "css": "",
        "body": "\n<p>标签模式，输入的内容可以作为选项</p>\n"
      },
      {
        "title": "对象数据",
        "order": "8",
        "jsx": "import { Select } from '@alifd/next';\n\nconst dataSource = [\n    {value: '10001', label: 'Lucy King'},\n    {value: 10002, label: 'Lily King'},\n    {value: 10003, label: 'Tom Cat', disabled: true},\n    {label: 'Special Group', children: [\n        {value: new Date(), label: 'new Date()'},\n        {value: false, label: 'FALSE'},\n        {value: 0, label: 'ZERO'}\n    ]},\n];\n\nfunction handleChange(value) {\n    console.log(value);\n}\n\nReactDOM.render(<Select useDetailValue defaultValue={{value: '10001', label: 'Lucy King'}} onChange={handleChange} dataSource={dataSource} style={{width: 150}} />, mountNode);\n",
        "css": "",
        "body": "\n<p><code>useDetailValue</code> 把 <code>value</code> 从字符串变成对象</p>\n"
      },
      {
        "title": "无限滚动",
        "order": "15",
        "jsx": "import { Select } from '@alifd/next';\n\nconst Option = Select.Option;\n\nconst onChange = function (value) {\n    console.log(value);\n};\n\nfunction generateItem(index) {\n    return {label: `option${index}`, value: `option${index}`};\n}\n\nfunction generateOption(index) {\n    return <Option key={`option${index}`} value={`option${index}`}>{`option${index}`}</Option>;\n}\n\nfunction generateData(len, isOption) {\n    const data = [];\n\n    for (let i = 0; i < len; i++) {\n        isOption ? data.push(generateOption(i)) :  data.push(generateItem(i));\n    }\n\n    return data;\n}\n\nReactDOM.render(\n    <div>\n        <Select dataSource={generateData(100)} useVirtual onChange={onChange} defaultValue=\"option0\" />\n        &nbsp;&nbsp;&nbsp;&nbsp;\n        <Select useVirtual onChange={onChange} defaultValue=\"option50\">\n            {generateData(100, true)}\n        </Select>\n    </div>\n    , mountNode);\n",
        "css": "",
        "body": "\n<p>select 配合无限滚动</p>\n"
      }
    ]
  },
  {
    "name": "Slider",
    "category": "Components",
    "title": "图片轮播",
    "type": "展示",
    "importStatement": "import { Slider } from '@alifd/next';",
    "body": "\n## Guide\n\n轮播组件，就是以幻灯片的方式，在页面中横向展示诸多内容的组件。\n轮播内容相互独立，前后在内容以及数据上都不存在逻辑关系。\n\n### 何时使用\n\n-   **单图轮播**：该样式通常用于承载运营banner，是一个位置相对固定的模块。\n-   **多图轮播**：单元信息浏览\n\n### 使用注意点\n\n1.  当轮播组件中只有一张图片的时候，轮播组件会隐藏导航锚点、禁止自动循环（即使上层设置了）、禁止拖拽播放（即使上层设置了）。\n2.  如果您要将 Slider 放到 Dialog 中，此时你需要关闭 Dialog 的动画，避免 Slider 在计算内部元素宽度时造成出错。\n3.  如果出现图片高度 1px 的问题，可以尝试在 `img` 标签的外部包裹一层 `div` 标签。\n\n API\n\n### Slider\n\n| 参数                 | 说明                                                                                                 | 类型             | 默认值      |\n| ------------------ | -------------------------------------------------------------------------------------------------- | -------------- | -------- |\n| adaptiveHeight     | 是否使用自适应高度                                                                                          | Boolean        | false    |\n| animation          | 动效类型，默认是'slide'                                                                                    | String/Boolean | 'slide'  |\n| arrows             | 是否显示箭头                                                                                             | Boolean        | true     |\n| arrowSize          | 导航箭头大小 可选值: 'medium', 'large'<br><br>**可选值**:<br>'medium', 'large'                                 | Enum           | 'medium' |\n| arrowPosition      | 导航箭头位置 可选值: 'inner', 'outer'<br><br>**可选值**:<br>'inner', 'outer'                                   | Enum           | 'inner'  |\n| arrowDirection     | 导航箭头的方向 可选值: 'hoz', 'ver'<br><br>**可选值**:<br>'hoz', 'ver'                                          | Enum           | 'hoz'    |\n| autoplay           | 是否自动播放                                                                                             | Boolean        | false    |\n| autoplaySpeed      | 自动播放的速度                                                                                            | Number         | 3000     |\n| nextArrow          | 向后箭头                                                                                               | ReactElement   | null     |\n| prevArrow          | 向前箭头                                                                                               | ReactElement   | null     |\n| centerMode         | 是否启用居中模式                                                                                           | Boolean        | false    |\n| dots               | 是否显示导航锚点                                                                                           | Boolean        | true     |\n| dotsDirection      | 导航锚点位置<br><br>**可选值**:<br>'hoz', 'ver'                                                             | Enum           | 'hoz'    |\n| dotRender          | 自定义导航锚点<br><br>**签名**:<br>Function() => void                                                       | Function       | -        |\n| draggable          | 是否可拖拽                                                                                              | Boolean        | true     |\n| infinite           | 是否使用无穷循环模式                                                                                         | Boolean        | true     |\n| defaultActiveIndex | 初始被激活的轮播图                                                                                          | Number         | 0        |\n| lazyLoad           | 是否启用懒加载                                                                                            | Boolean        | false    |\n| slideDirection     | 轮播方向<br><br>**可选值**:<br>'hoz', 'ver'                                                               | Enum           | 'hoz'    |\n| slidesToShow       | 同时展示的图片数量                                                                                          | Number         | 1        |\n| slidesToScroll     | 同时滑动的图片数量                                                                                          | Number         | 1        |\n| speed              | 轮播速度                                                                                               | Number         | 500      |\n| activeIndex        | 跳转到指定的轮播图（受控）                                                                                      | Number         | -        |\n| triggerType        | 锚点导航触发方式<br><br>**可选值**:<br>'click', 'hover'                                                       | Enum           | 'click'  |\n| onChange           | 轮播切换的回调函数<br><br>**签名**:<br>Function(index: Number) => void<br>**参数**:<br>_index_: {Number} 幻灯片的索引 | Function       | () => {} |\n| centerPadding      | Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览                              | String         | '50px'   |\n| cssEase            | CSS3 Animation Easing,默认‘ease’                                                                     | String         | 'ease'   |\n| focusOnSelect      | 多图轮播时，点击选中后自动居中                                                                                    | Boolean        | false    |\n\n## 说明\n\nnext-slider is forked from [react-slick](https://github.com/akiran/react-slick)\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "导航箭头位置",
        "order": "8",
        "jsx": "import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Slider slidesToShow={4} arrowPosition=\"outer\">\n            <div style={{width: '25%'}}><h4 className=\"h4\">1</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">2</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">3</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">4</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">5</h4></div>\n        </Slider>\n\n        <br />\n\n        <Slider>\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n    </div>\n    , mountNode);\n",
        "css": ".next-slick .h3, .h4 {\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.next-slick .h4 {\n    margin: 0 5px;\n    position: relative;\n}\n",
        "body": "\n<p>轮播组件的导航按钮在默认情况下为内置模式。在多图同时导航的情况下，如果想要使用外置按钮，\n可以通过指定<code>arrowPosition</code>的属性值为<code>outer</code>，使用外置按钮，其默认值为<code>inner</code>。</p>\n"
      },
      {
        "title": "自动播放",
        "order": "9",
        "jsx": "import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div style={{width: '600px'}}>\n        <Slider slidesToShow={4} arrowPosition=\"outer\" lazyLoad dots={false} autoplay autoplaySpeed={1000}>\n            <div style={{width: '25%'}}><h4 className=\"h4\">1</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">2</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">3</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">4</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">5</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">6</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">7</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">8</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">9</h4></div>\n        </Slider>\n        <br/>\n        <Slider speed={1000} autoplay autoplaySpeed={2000}>\n            <div style={{width: '25%'}}><h4 className=\"h4\">1</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">2</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">3</h4></div>\n        </Slider>\n    </div>\n    , mountNode);\n",
        "css": ".next-slick .h3, .h4 {\n    margin: 0 5px;\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n",
        "body": "\n<p>可以通过 <code>autoplay</code> 和 <code>autoplaySpeed</code> 属性来设置组件是否自动轮播 和 自动轮播的速度。</p>\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Slider } from '@alifd/next';\n\nconst slides = [\n    { url: 'https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png', text: 'Tape Player Skin Design Competition' },\n    { url: 'https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg', text: 'Mobile Phone Taobao Skin Call' },\n    { url: 'https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg', text: 'Design Enabling Public Welfare' },\n    { url: 'https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg', text: 'Amoy Doll Design Competition' },\n];\n\nconst itemNodes = slides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img src={item.url} alt={item.text} /></div>);\n\nReactDOM.render(<Slider>{itemNodes}</Slider>, mountNode);\n",
        "css": ".slider-img-wrapper img{\n    width: 100%;\n}\n",
        "body": "\n<p>轮播组件共有两种类型：单图轮播和多图同时轮播。\n在默认模式下（不指定任何属性值），轮播组件为单图轮播模式。</p>\n<p><strong>注意：</strong> 如果出现图片 1px 高度的问题，建议将图片的外部包括一层 <code>div</code> 来避免这个问题。</p>\n"
      },
      {
        "title": "导航按钮尺寸",
        "order": "3",
        "jsx": "import { Slider } from '@alifd/next';\n\nconst bigSlides = [\n    { url: 'https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png', text: 'Tape Player Skin Design Competition' },\n    { url: 'https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg', text: 'Mobile Phone Taobao Skin Call' },\n    { url: 'https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg', text: 'Design Enabling Public Welfare' },\n    { url: 'https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg', text: 'Amoy Doll Design Competition' },\n];\n\nReactDOM.render(<div>\n    <Slider>\n        {\n            bigSlides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img src={item.url} alt={item.text} /></div>)\n        }\n    </Slider>\n\n    <br />\n\n    <Slider arrowSize=\"large\">\n        {\n            bigSlides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img src={item.url} alt={item.text} /></div>)\n        }\n    </Slider>\n</div>, mountNode);\n",
        "css": ".slider-img-wrapper img {\n    width: 100%;\n}\n",
        "body": "\n<p>可以通过<code>arrowSize</code>属性来更改导航组件的按钮尺寸，默认值为<code>normal</code>，\n对特定场景，比如展示的图片较大的情况下，可以选择<code>large</code>，将导航按钮设置为大按钮。</p>\n"
      },
      {
        "title": "居中模式",
        "order": "13",
        "jsx": "import { Slider } from '@alifd/next';\n\nconst settings = {\n    className: 'custom-slide center',\n    centerMode: true,\n    infinite: true,\n    dots: false,\n    arrowPosition: 'outer',\n    centerPadding: '60px',\n    slidesToShow: 3,\n    speed: 500\n};\n\nReactDOM.render(\n    <Slider {...settings}>\n        <div><h3>1</h3></div>\n        <div><h3>2</h3></div>\n        <div><h3>3</h3></div>\n        <div><h3>4</h3></div>\n        <div><h3>5</h3></div>\n        <div><h3>6</h3></div>\n        <div><h3>7</h3></div>\n        <div><h3>8</h3></div>\n        <div><h3>9</h3></div>\n    </Slider>\n    , mountNode);\n",
        "css": ".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n\n.center h3 {\n    opacity: 0.8;\n    transition: all 300ms ease;\n}\n\n.center .next-slick-center h3 {\n  color: #e67e22;\n  opacity: 1;\n  transform: scale(1.08);\n}\n",
        "body": "\n<p>居中模式可以突出显示最核心区域的内容，您可以通过设置 <code>centerMode</code> 属性址为 <code>true</code> 开启该功能。</p>\n"
      },
      {
        "title": "自定义导航箭头",
        "order": "7",
        "jsx": "import { Slider, Icon } from '@alifd/next';\n\nconst slides = [\n    { url: 'https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png', text: 'Tape Player Skin Design Competition' },\n    { url: 'https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg', text: 'Mobile Phone Taobao Skin Call' },\n    { url: 'https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg', text: 'Design Enabling Public Welfare' },\n    { url: 'https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg', text: 'Amoy Doll Design Competition' },\n];\n\nconst arrowStyle = {\n    display: 'block',\n    background: 'red',\n    opacity: 1,\n    margin: '0 20px',\n};\n\nconst CustomNextArrow = (props) => {\n    return <div {...props} style={arrowStyle}><Icon type=\"arrow-double-right\" /></div>;\n};\n\nconst CustomPrevArrow = (props) => {\n    return <div {...props} style={arrowStyle}><Icon type=\"arrow-double-left\" /></div>;\n};\n\nReactDOM.render(\n    <Slider nextArrow={<CustomNextArrow />} prevArrow={<CustomPrevArrow />} lazyLoad>\n        {\n            slides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img src={item.url} alt={item.text} /></div>)\n        }\n    </Slider>\n    , mountNode);\n",
        "css": ".slider-img-wrapper img {\n    width: 100%;\n}\n",
        "body": "\n<p>开发者可以通过 <code>prevArrow</code> 和 <code>nextArrow</code> 两个属性传入自定义的导航箭头组件。</p>\n"
      },
      {
        "title": "使用自定义组件",
        "order": "16",
        "jsx": "import { Slider } from '@alifd/next';\nimport PropTypes from 'prop-types';\n\nconst pages = [1, 2, 3, 4];\n\nfunction Inner({ children, ...others }) {\n    // Note that to transparently pass other attributes to the lower node, the Slider needs to perform the element's clone operation.\n    return (\n        <div {...others}>\n            {children}\n        </div>\n    );\n}\n\nInner.propTypes = {\n    children: PropTypes.any,\n};\n\nconst slider = (<Slider>\n    {\n        pages.map((page, index) => {\n            return <Inner className=\"custom-inner\" key={index}>custom {page}</Inner>;\n        })\n    }\n</Slider>);\n\nReactDOM.render(<div>\n    {slider}\n</div>\n    , mountNode);\n",
        "css": ".custom-inner {\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n",
        "body": "\n<p>你可以为传递自定义组件到 Slider 组件中。前提是该组件一定要开放透传 props 到下层组件或元素，Slider 底层需要执行元素的 clone 操作。</p>\n"
      },
      {
        "title": "导航锚点方向",
        "order": "4",
        "jsx": "import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Slider dotsDirection=\"hoz\" arrows={false}>\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n\n        <br />\n\n        <Slider dotsDirection=\"ver\" arrows={false}>\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n    </div>\n    , mountNode);\n",
        "css": ".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin-right: 5px;\n        position: relative;\n}\n",
        "body": "\n<p>通过 <code>dotsDirection</code> 可以改变导航锚点的位置，默认为 <code>hoz</code> 即水平方向。\n当其值设为 <code>ver</code> 时为垂直方向展示。</p>\n"
      },
      {
        "title": "自定义导航锚点",
        "order": "6",
        "jsx": "import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Slider dotsClass=\"dots-cust\" dotsDirection=\"hoz\" arrows={false} dotsRender={(index, current) => {\n            console.log('current', current);\n            return <a>{index}</a>;\n        }}>\n            <div><h3 className=\"h3\">0</h3></div>\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n    </div>\n    , mountNode);\n",
        "css": ".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin-right: 5px;\n        position: relative;\n}\n\n.dots-cust {\n  color: #fff;\n}\n.dots-cust a{\n  dispaly: block;\n  background: rgba(200,200,200,.4);\n  padding: 0 4px;\n}\n.dots-cust .active a{\n  color: rgb(70, 188, 2);\n}\n",
        "body": "\n<p>通过 <code>dotsRender</code> 可以自定义修改dost，通过 <code>dotsClass</code> 可覆盖dots的样式。</p>\n"
      },
      {
        "title": "导航锚点触发方式",
        "order": "5",
        "jsx": "import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Slider triggerType=\"click\" arrows={false} >\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n        <br/>\n        <Slider triggerType=\"hover\" arrows={false} >\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n    </div>\n    , mountNode);\n",
        "css": ".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin-right: 5px;\n        position: relative;\n}\n\n",
        "body": "\n<p>通过 <code>triggerType</code> 可以定义dots触发方式，共有两种触发方式：[&#39;click&#39;, &#39;hover&#39;];\n当其值设为 <code>hover</code> 时为鼠标经过触发滚动。</p>\n"
      },
      {
        "title": "Fade",
        "order": "18",
        "jsx": "import { Slider } from '@alifd/next';\n\nconst settings = {\n    arrowPosition: 'outer',\n    dots: false,\n    animation: 'fade',\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    className: 'custom-slide',\n    onChange: function (index) {\n        console.log('change Slide index', index);\n    }\n};\n\nReactDOM.render(\n    <div>\n        <Slider {...settings}>\n            {[1, 2, 3, 4, 5, 6].map(function(d) {\n                return <div key={d}><h3 onClick={() => console.log(d)} >{d}</h3></div>;\n            })}\n        </Slider>\n        <Slider {...settings}>\n            {[1, 2, 3, 4, 5, 6].map(function(d) {\n                return <div key={d}><a href={`https://www.taobao.com/?some=${d}`} target=\"_blank\">{d}</a></div>;\n            })}\n        </Slider>\n    </div>\n    , mountNode\n);\n",
        "css": ".custom-slide h3, .custom-slide a {\n    display: block;\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n",
        "body": "\n<p>切换跑马灯时使用渐变效果。</p>\n"
      },
      {
        "title": "禁止循环",
        "order": "10",
        "jsx": "import { Slider } from '@alifd/next';\n\nReactDOM.render(\n    <div>\n        <Slider slidesToShow={4} arrowPosition=\"outer\" infinite={false} dots={false}>\n            <div style={{width: '25%'}}><h4 className=\"h4\">1</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">2</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">3</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">4</h4></div>\n            <div style={{width: '25%'}}><h4 className=\"h4\">5</h4></div>\n        </Slider>\n\n        <br />\n\n        <Slider infinite={false} lazyLoad>\n            <div><h3 className=\"h3\">1</h3></div>\n            <div><h3 className=\"h3\">2</h3></div>\n            <div><h3 className=\"h3\">3</h3></div>\n            <div><h3 className=\"h3\">4</h3></div>\n        </Slider>\n    </div>\n    , mountNode);\n",
        "css": ".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin: 0 5px;\n        position: relative;\n}\n",
        "body": "\n<p>默认情况下，轮播组件的表现为无穷循环模式。如果你不想无穷循环，\n可以通过设置 <code>infinite</code> 为 <code>false</code>，用来禁止循环模式。</p>\n<p>值得注意的是，由于组件的默认行为是无穷模式，所以默认情况下，自动将单张图片复制了两份，\n如果你不想启用这样的复制效果，只要关闭 <code>infinite</code> 属性即可。</p>\n"
      },
      {
        "title": "多图轮播",
        "order": "1",
        "jsx": "import { Slider } from '@alifd/next';\n\nconst slides = [1, 2, 3, 4, 5, 6, 7, 8, 9].map(item => <div style={{width: '25%'}} key={item}><h4 className=\"h4\">{item}</h4></div>);\n\nReactDOM.render(\n    <div style={{width: '600px'}}>\n        <div className=\"demo-item-title\">slide one picture one at a time</div>\n        <Slider slidesToShow={4} arrowPosition=\"outer\" dots={false} lazyLoad >\n            {slides}\n        </Slider>\n\n        <div className=\"demo-item-title\">slide multiple picture one at a time</div>\n        <Slider slidesToShow={4} slidesToScroll={4} arrowPosition=\"outer\" lazyLoad dots={false}>\n            {slides}\n        </Slider>\n    </div>\n    , mountNode);\n",
        "css": ".next-slick .h3, .h4 {\n    margin: 0 5px;\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n",
        "body": "\n<p>在单图轮播的基础上，通过指定<code>slidesToShow</code>属性值，可以同时进行多图轮播。\n可以通过 <code>slidesToScroll</code> 属性制定单次轮播图片的个数。</p>\n"
      },
      {
        "title": "悬浮时暂停",
        "order": "11",
        "jsx": "import { Slider } from '@alifd/next';\n\nconst settings = {\n    className: 'custom-slide',\n    arrowPosition: 'outer',\n    dots: false,\n    infinite: true,\n    slidesToShow: 3,\n    slidesToScroll: 1,\n    autoplay: true,\n    autoplaySpeed: 2000,\n    pauseOnHover: true\n};\n\nReactDOM.render(\n    <Slider {...settings}>\n        <div><h3>1</h3></div>\n        <div><h3>2</h3></div>\n        <div><h3>3</h3></div>\n        <div><h3>4</h3></div>\n        <div><h3>5</h3></div>\n        <div><h3>6</h3></div>\n        <div><h3>7</h3></div>\n        <div><h3>8</h3></div>\n        <div><h3>9</h3></div>\n    </Slider>\n    , mountNode);\n",
        "css": ".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n",
        "body": "\n<p>可以通过设置 <code>pauseOnHover</code> 属性为 <code>true</code> 使得 Slide 在鼠标悬浮时自动停止轮播。</p>\n"
      },
      {
        "title": "ActiveIndex",
        "order": "14",
        "jsx": "import { Slider } from '@alifd/next';\n\nconst slides = [\n    { url: 'https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png', text: 'Tape Player Skin Design Competition' },\n    { url: 'https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg', text: 'Mobile Phone Taobao Skin Call' },\n    { url: 'https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg', text: 'Design Enabling Public Welfare' },\n    { url: 'https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg', text: 'Amoy Doll Design Competition' },\n];\n\nclass SlickGoTo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: 0, // The initial value here need to be set to 0 for `activeIndex`. If you want the initial as 0 , you can use the `defaultIndex` property to set.\n        };\n        this.changeHandler = this.changeHandler.bind(this);\n    }\n    changeHandler(e) {\n        this.setState({\n            index: parseInt(e.target.value)\n        });\n    }\n    render() {\n        const settings = {\n            dots: false,\n            infinite: true,\n            activeIndex: this.state.index,\n        };\n        return (\n            <div>\n                <div className=\"demo-item-title\">Pull the scroll bar to switch:</div>\n                <input onChange={this.changeHandler} defaultValue={0} type=\"range\" min={0} max={3} />\n                <Slider {...settings}>\n                    {\n                        slides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img src={item.url} alt={item.text} /></div>)\n                    }\n                </Slider>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<SlickGoTo />, mountNode);\n",
        "css": ".slider-img-wrapper img {\n    width: 100%;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n",
        "body": "\n<p>通过 <code>index</code> 属性可以快速的定位到指定次序的 slider 。</p>\n"
      },
      {
        "title": "onChange 钩子",
        "order": "19",
        "jsx": "import { Slider } from '@alifd/next';\n\nconst settings = {\n    className: 'custom-slide',\n    arrowPosition: 'outer',\n    dots: false,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    onChange: function (index) {\n        console.log('change Slide index', index);\n    }\n};\n\nReactDOM.render(\n    <Slider {...settings}>\n        <div><h3>1</h3></div>\n        <div><h3>2</h3></div>\n        <div><h3>3</h3></div>\n        <div><h3>4</h3></div>\n        <div><h3>5</h3></div>\n        <div><h3>6</h3></div>\n        <div><h3>7</h3></div>\n        <div><h3>8</h3></div>\n        <div><h3>9</h3></div>\n    </Slider>\n    , mountNode);\n",
        "css": ".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n",
        "body": "\n<p>你可以利用 <code>onChange</code> 钩子函数处理一些额外的逻辑。</p>\n"
      },
      {
        "title": "垂直滑动",
        "order": "2",
        "jsx": "import { Slider } from '@alifd/next';\n\nReactDOM.render(<div style={{ width: '200px' }}>\n    <div className=\"demo-item-title\">Vertical multi-picture mode</div>\n    <Slider slideDirection=\"ver\" slidesToShow={3} slidesToScroll={1} dots={false} arrowPosition=\"inner\" arrowDirection=\"ver\" className=\"ver-slick\">\n        {\n            [1, 2, 3, 4, 5].map((item, index) => <div key={index} className=\"custom-slider\" style={{ border: '1px solid transparent'}}><h3 className=\"h3\">{item}</h3></div>)\n        }\n    </Slider>\n\n    <div className=\"demo-item-title\">Vertical single-picture mode</div>\n    <Slider slideDirection=\"ver\" dots={false} arrowPosition=\"inner\" arrowDirection=\"ver\" className=\"ver-slick\">\n        {\n            [1, 2, 3, 4, 5].map((item, index) => <div key={index} className=\"custom-slider\"><h3 className=\"h3\">{item}</h3></div>)\n        }\n    </Slider>\n</div>, mountNode);\n",
        "css": ".ver-slick .h3 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        font-size: 36px;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n",
        "body": "\n<p>轮播组件可以通过 <code>slideDirection</code> 属性设置两种轮播方向。当值为 <code>ver</code> 时轮播方向为垂直方向，\n默认为值为 <code>hoz</code> 。垂直模式也可以设置单图和多图轮播。</p>\n"
      },
      {
        "title": "弹出来的跑马灯",
        "order": "17",
        "jsx": "import { Slider, Dialog, Button } from '@alifd/next';\nimport PropTypes from 'prop-types';\n\nconst slides = [\n    { url: 'https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png', text: 'Tape Player Skin Design Competition' },\n    { url: 'https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg', text: 'Mobile Phone Taobao Skin Call' },\n    { url: 'https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg', text: 'Design Enabling Public Welfare' },\n    { url: 'https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg', text: 'Amoy Doll Design Competition' },\n];\n\nconst dialogStyle = {\n    width: '800px',\n};\n\nclass FlappySlider extends React.Component {\n    static propTypes = {\n        slides: PropTypes.array,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false,\n        };\n\n        this.setVisible = this.setVisible.bind(this);\n    }\n\n    setVisible() {\n        this.setState(prevState => {\n            return {\n                visible: !prevState.visible,\n            };\n        });\n    }\n\n    render() {\n        return (<div className=\"demo-wrapper\">\n            <Button type=\"primary\" onClick={this.setVisible}>Marquee Banner</Button>\n            <Dialog visible={this.state.visible} title=\"Alibaba.com\" footer={false} style={dialogStyle} animation={false} onClose={this.setVisible}>\n                <Slider>\n                    {\n                        this.props.slides.map((item, index) => <div key={index} className=\"slider-img-wrapper\"><img key={index} src={item.url} alt={item.text} /></div>)\n                    }\n                </Slider>\n            </Dialog>\n        </div>);\n    }\n}\n\nReactDOM.render(<FlappySlider slides={slides}/>, mountNode);\n",
        "css": ".slider-img-wrapper img {\n    width: 100%;\n}\n",
        "body": "\n<p>如果你要将 Slider 放到 Dialog 中，此时你需要关闭 Dialog 的动画，避免 Slider 在计算内部元素宽度时造成出错。</p>\n"
      },
      {
        "title": "外部控制",
        "order": "12",
        "jsx": "import { Slider, Select } from '@alifd/next';\n\nconst { Option } = Select;\n\nclass SliderWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            autoplay: false,\n            autoplaySpeed: 1000,\n        };\n    }\n\n    onSelectAutoplay(value) {\n        this.setState({ autoplay: value });\n    }\n\n    onSelectAutoplaySpeed(value) {\n        this.setState({ autoplaySpeed: value });\n    }\n\n    render() {\n        return (<div>\n            <Select placeholder=\"Autoplay\" onChange={this.onSelectAutoplay.bind(this)}>\n                <Option value>True</Option>\n                <Option value={false}>False</Option>\n            </Select>\n            &nbsp;&nbsp;\n            <Select placeholder=\"Autoplay Speed\" onChange={this.onSelectAutoplaySpeed.bind(this)}>\n                <Option value={1000}>1 second</Option>\n                <Option value={2000}>2 seconds</Option>\n                <Option value={3000}>3 seconds</Option>\n            </Select>\n            <br />\n            <br />\n            <Slider autoplay={this.state.autoplay} autoplaySpeed={this.state.autoplaySpeed}>\n                <div><h3 className=\"h3\">1</h3></div>\n                <div><h3 className=\"h3\">2</h3></div>\n                <div><h3 className=\"h3\">3</h3></div>\n                <div><h3 className=\"h3\">4</h3></div>\n            </Slider>\n        </div>);\n    }\n}\n\nReactDOM.render(<SliderWrapper />, mountNode);\n",
        "css": ".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n",
        "body": "\n<p>用户可以包装 Slider 组件，以便进行外部控制。例如通过包装组件实现外部对 Slider 组件 <code>autoplay</code> 和 <code>autoplaySpeed</code> 值的控制。</p>\n"
      },
      {
        "title": "不同的图片宽度",
        "order": "15",
        "jsx": "import { Slider } from '@alifd/next';\n\nconst settings = {\n    className: 'custom-slide variable-width',\n    arrowPosition: 'outer',\n    dots: true,\n    infinite: true,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    variableWidth: true\n};\n\nReactDOM.render(\n    <Slider {...settings}>\n        <div style={{width: 100}}><p>100</p></div>\n        <div style={{width: 200}}><p>200</p></div>\n        <div style={{width: 75}}><p>75</p></div>\n        <div style={{width: 300}}><p>300</p></div>\n        <div style={{width: 225}}><p>225</p></div>\n        <div style={{width: 175}}><p>175</p></div>\n    </Slider>\n    , mountNode);\n",
        "css": ".variable-width .next-slick-slide p {\n  background: #4F74B3;;\n  height: 100px;\n  color: #fff;\n  margin: 5px;\n  line-height: 100px;\n  text-align: center;\n}\n",
        "body": "\n<p>Slider 在默认情况下会认为所有的子元素是等宽的。\n通过设置 <code>variableWidth</code> 为 <code>true</code>，您可以在 Slider 中放置不同宽度的图片。</p>\n"
      }
    ]
  },
  {
    "name": "SplitButton",
    "category": "Components",
    "title": "分隔按钮",
    "type": "基本",
    "importStatement": "import { SplitButton } from '@alifd/next';",
    "body": "\n## 使用指南\n\nSplitButton 同样由 Button 和 Menu 组成，其在触发区域上可以分为两部分，其中 Icon 部分作为弹层菜单的触发区域。\n菜单只有在鼠标悬浮或点击右侧图标区域的时候才会展示。\n\n API\n\n### SplitButton\n\n| 参数                  | 说明                                                                                                                                                               | 类型        | 默认值       |\n| ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | --------- |\n| size                | 按钮组的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                             | Enum      | 'medium'  |\n| type                | 按钮的类型<br><br>**可选值**:<br>'normal', 'primary', 'secondary'                                                                                                        | Enum      | 'normal'  |\n| label               | 主按钮的文案                                                                                                                                                           | ReactNode | -         |\n| component           | 设置标签类型<br><br>**可选值**:<br>'button', 'a'                                                                                                                          | Enum      | -         |\n| ghost               | 是否为幽灵按钮<br><br>**可选值**:<br>'light', 'dark', false, true                                                                                                          | Enum      | -         |\n| defaultSelectedKeys | 默认激活的菜单项（用法同 Menu 非受控）                                                                                                                                           | Array     | \\[]       |\n| selectedKeys        | 激活的菜单项（用法同 Menu 受控）                                                                                                                                              | Array     | -         |\n| selectMode          | 菜单的选择模式<br><br>**可选值**:<br>'single', 'multiple'                                                                                                                  | Enum      | -         |\n| onSelect            | 选择菜单项时的回调，参考 Menu<br><br>**签名**:<br>Function() => void                                                                                                           | Function  | func.noop |\n| onItemClick         | 点击菜单项时的回调，参考 Menu<br><br>**签名**:<br>Function() => void                                                                                                           | Function  | func.noop |\n| triggerProps        | 触发按钮的属性（支持 Button 的所有属性透传）                                                                                                                                       | Object    | -         |\n| autoWidth           | 弹层菜单的宽度是否与按钮组一致                                                                                                                                                  | Boolean   | true      |\n| visible             | 弹层是否显示                                                                                                                                                           | Boolean   | -         |\n| defaultVisible      | 弹层默认是否显示                                                                                                                                                         | Boolean   | -         |\n| onVisibleChange     | 弹层显示状态变化时的回调函数<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层显示状态<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function  | func.noop |\n| popupTriggerType    | 弹层的触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                      | Enum      | 'click'   |\n| popupAlign          | 弹层对齐方式, 详情见Overlay align                                                                                                                                         | String    | -         |\n| popupStyle          | 弹层自定义样式                                                                                                                                                          | Object    | -         |\n| popupClassName      | 弹层自定义样式类                                                                                                                                                         | String    | -         |\n| popupProps          | 透传给弹层的属性                                                                                                                                                         | Object    | -         |\n| menuProps           | 透传给 Menu 的属性                                                                                                                                                     | Object    | {}        |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { SplitButton } from '@alifd/next';\n\nconst { Item } = SplitButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nReactDOM.render(<div>\n    <SplitButton label=\"Edit Document\">{menu}</SplitButton> &nbsp; &nbsp;\n    <SplitButton label=\"Edit Document\" type=\"primary\">{menu}</SplitButton>&nbsp;&nbsp;\n    <SplitButton label=\"Edit Document\" type=\"secondary\">{menu}</SplitButton><br /><br />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的用法。支持 Button 的 type, size, component, ghost 等属性透传。</p>\n"
      },
      {
        "title": "复合使用",
        "order": "3",
        "jsx": "import { SplitButton } from '@alifd/next';\n\nconst { Item } = SplitButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nclass CompositeSplitButton extends React.Component {\n    state = {\n        visible: false,\n        label: 'Choose Action',\n    }\n\n    onSelect = val => {\n        this.setState({\n            visible: false,\n            label: val,\n        });\n    }\n\n    changeVisible = visible => {\n        this.setState({\n            visible,\n        });\n    }\n\n    render() {\n        const { visible, label } = this.state;\n        return (<SplitButton label={label} visible={visible} onVisibleChange={this.changeVisible} onItemClick={this.onSelect}>{menu}</SplitButton>);\n    }\n}\n\nReactDOM.render(<CompositeSplitButton />, mountNode);\n",
        "css": "",
        "body": "\n<p>复合使用菜单，监听菜单行为。</p>\n"
      },
      {
        "title": "复杂菜单",
        "order": "3",
        "jsx": "import { SplitButton } from '@alifd/next';\n\nconst { Item, Group, Divider } = SplitButton;\n\nReactDOM.render(<SplitButton label=\"Edit Document\" onItemClick={key => console.log(key)}>\n    <Item>Undo</Item>\n    <Item>Redo</Item>\n    <Divider />\n    <Group>\n        <Item helper=\"CTRL + X\">Cut</Item>\n        <Item helper=\"CTRL + C\">Copy</Item>\n        <Item helper=\"CTRL + V\">Paste</Item>\n    </Group>\n</SplitButton>, mountNode);\n",
        "css": "",
        "body": "\n<p>支持菜单组和菜单分割线，使用方法同 <code>Menu.Group</code>, <code>Menu.Item</code>, <code>Menu.Divider</code>。</p>\n"
      },
      {
        "title": "尺寸",
        "order": "1",
        "jsx": "import { SplitButton } from '@alifd/next';\n\nconst { Item } = SplitButton;\nconst menu = ['Undo', 'Redo', 'Cut', 'Copy', 'Paste'].map(item => <Item key={item}>{item}</Item>);\n\nReactDOM.render(<div>\n    <SplitButton label=\"Edit Document\" size=\"small\">{menu}</SplitButton> &nbsp; &nbsp;\n    <SplitButton label=\"Edit Document\" size=\"medium\">{menu}</SplitButton> &nbsp; &nbsp;\n    <SplitButton label=\"Edit Document\" size=\"large\">{menu}</SplitButton>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>SplitButton 实际是上一个按钮组，通过 <code>size</code> 属性可以改变按钮组的大小。</p>\n"
      }
    ]
  },
  {
    "name": "Step",
    "category": "Components",
    "title": "步骤",
    "type": "展示",
    "importStatement": "import { Step } from '@alifd/next';",
    "body": "\n API\n\n### Step\n\n| 参数             | 说明                                                                                                                                                                                  | 类型       | 默认值          |\n| -------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ------------ |\n| current        | 当前步骤                                                                                                                                                                                | Number   | 0            |\n| shape          | 类型<br><br>**可选值**:<br>'circle', 'arrow', 'dot'                                                                                                                                      | Enum     | 'circle'     |\n| direction      | 展示方向<br><br>**可选值**:<br>'horizontal', 'vertical'                                                                                                                                    | Enum     | 'horizontal' |\n| labelPlacement | 横向布局时的内容排列<br><br>**可选值**:<br>'horizontal', 'vertical'                                                                                                                              | Enum     | 'vertical'   |\n| readOnly       | 是否只读模式                                                                                                                                                                              | Boolean  | -            |\n| animation      | 是否开启动效                                                                                                                                                                              | Boolean  | true         |\n| itemRender     | StepItem 的自定义渲染<br><br>**签名**:<br>Function(index: Number, status: String) => Node<br>**参数**:<br>_index_: {Number} 节点索引<br>_status_: {String} 节点状态<br>**返回值**:<br>{Node} 节点的渲染结果<br> | Function | null         |\n\n### Step.Item\n\n| 参数         | 说明                                                                                                                                                                                                       | 类型        | 默认值       |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | --------- |\n| status     | 步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`<br><br>**可选值**:<br>'wait', 'process', 'finish'                                                                                     | Enum      | -         |\n| title      | 标题                                                                                                                                                                                                       | ReactNode | -         |\n| icon       | 图标                                                                                                                                                                                                       | String    | -         |\n| content    | 内容，用于垂直状态下的内容填充                                                                                                                                                                                          | ReactNode | -         |\n| itemRender | StepItem 的自定义渲染, 会覆盖父节点设置的itemRender<br><br>**签名**:<br>Function(index: Number, status: String) => Node<br>**参数**:<br>_index_: {Number} 节点索引<br>_status_: {String} 节点状态<br>**返回值**:<br>{Node} 节点的渲染结果<br> | Function  | -         |\n| percent    | 百分比                                                                                                                                                                                                      | Number    | -         |\n| disabled   | 是否禁用                                                                                                                                                                                                     | Boolean   | -         |\n| onClick    | 点击步骤时的回调<br><br>**签名**:<br>Function(index: Number) => void<br>**参数**:<br>_index_: {Number} 节点索引                                                                                                          | Function  | () => { } |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Step } from '@alifd/next';\n\nconst steps = [['Step 1', 'Open the refrigerator door'], ['Step 2', 'Put the elephant in the refrigerator'], ['Step 3', 'Close the refrigerator door']].map((item, index) => <Step.Item key={index} title={item[0]} content={item[1]}/>);\n\nReactDOM.render(<div>\n    <h3>Arrow</h3>\n    <Step current={1} shape=\"arrow\">\n        {steps}\n    </Step>\n\n    <h3>Circle</h3>\n    <Step current={1} shape=\"circle\">\n        {steps}\n    </Step>\n\n    <h3>Circle(Horizontal content)</h3>\n    <Step current={1} shape=\"circle\" labelPlacement=\"horizontal\">\n        {steps}\n    </Step>\n\n    <h3>Dot</h3>\n    <Step current={1} shape=\"dot\">\n        {steps}\n    </Step>\n\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>在最简单的情况下，Step 有三种类型，可以通过 <code>shape</code> 属性进行切换。</p>\n<p><code>circle</code>类型可通过<code>labelPlacement</code>设置文本排列方向。</p>\n"
      },
      {
        "title": "受控模式",
        "order": "6",
        "jsx": "import { Step, Button, Select } from '@alifd/next';\n\nconst StepItem = Step.Item, ButtonGroup = Button.Group;\n\nclass Component extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentStep: 3,\n            stepType: 'circle',\n            stepAnimation: true,\n            labelPlacement: 'vertical'\n        };\n\n        this.onClick = this.onClick.bind(this);\n    }\n    next() {\n        const s = this.state.currentStep + 1;\n\n        this.setState({\n            currentStep: s > 6 ? 6 : s\n        });\n    }\n    prev() {\n        const s = this.state.currentStep - 1;\n\n        this.setState({\n            currentStep: s < 0 ? 0 : s\n        });\n    }\n    onClick(currentStep) {\n        console.log(currentStep);\n\n        this.setState({\n            currentStep: currentStep\n        });\n    }\n    onStepTypeChange(value) {\n        this.setState({ stepType: value });\n    }\n    onStepAnimation(value) {\n        this.setState({ stepAnimation: value });\n    }\n    onLabelPlacementChange(value) {\n        this.setState({ labelPlacement: value });\n    }\n    render() {\n        const {currentStep} = this.state;\n\n        return (\n            <div>\n                <div className=\"custom-step-option\">\n                    <Select placeholder=\"Choose the dispaly type\" onChange={this.onStepTypeChange.bind(this)} className=\"custom-select\" defaultValue=\"circle\">\n                        {\n                            ['circle', 'arrow', 'dot'].map(item => <Select.Option value={item} key={item}>{item}</Select.Option>)\n                        }\n                    </Select>\n\n                    <Select placeholder=\"Label placement\" onChange={this.onLabelPlacementChange.bind(this)} className=\"custom-select\" defaultValue=\"vertical\">\n                        {\n                            ['horizontal', 'vertical'].map(item => <Select.Option value={item} key={item}>{item}</Select.Option>)\n                        }\n                    </Select>\n\n\n                    <Select placeholder=\"Enable animation\" onChange={this.onStepAnimation.bind(this)} className=\"custom-select\" defaultValue>\n                        {\n                            [true, false].map((item, index) => <Select.Option value={item} key={index}>{item ? 'animation on' : 'animation off'}</Select.Option>)\n                        }\n                    </Select>\n                </div>\n\n                <Step current={currentStep} shape={this.state.stepType} animation={this.state.stepAnimation} labelPlacement={this.state.labelPlacement}>\n                    <StepItem title=\"Step 1\" onClick={this.onClick} content=\"Description\" />\n                    <StepItem title=\"Step 2\" onClick={this.onClick} content=\"Description\" />\n                    <StepItem title=\"Step 3\" onClick={this.onClick} content=\"Description\" />\n                    <StepItem title=\"Step 4\" onClick={this.onClick} content=\"Description\" />\n                    <StepItem title=\"Step 5\" onClick={this.onClick} content=\"Description\" />\n                    <StepItem title=\"Step 6\" onClick={this.onClick} content=\"Description\" />\n                </Step>\n                <br />\n                <br />\n                <ButtonGroup>\n                    <Button onClick={this.prev.bind(this)} type=\"primary\" disabled={currentStep === 0}>Backward</Button>\n                    <Button onClick={this.next.bind(this)} type=\"primary\" disabled={currentStep === 6}>Forward</Button>\n                </ButtonGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Component />, mountNode);\n",
        "css": ".custom-step-option {\n    margin-bottom: 20px;\n}\n\n.custom-select {\n    margin-right: 20px;\n}\n",
        "body": "\n<p>默认情况下，Step 定义为展示型组件，上层组件可以通过修改传入的 current 属性值来修改当前的步骤，同时可以设置每个节点的 click 事件，来自定义回调。</p>\n"
      },
      {
        "title": "Step.Item 自定义渲染",
        "order": "4",
        "jsx": "import { Step, Icon } from '@alifd/next';\n\nconst steps = ['one', 'two', 'three', 'four'];\n\nfunction itemRender(index) {\n    return <div className=\"custom-node1\"><span>{index + 1}</span></div>;\n}\n\nfunction itemRender2(index, status) {\n    return <div className=\"custom-node2\">{status === 'finish' ? <Icon type=\"success\" /> : <span>{index + 1}</span>} </div>;\n}\n\nReactDOM.render(<div className=\"fusion-demo\">\n    <div className=\"fusion-demo-item\">\n        <Step current={2} animation={false} itemRender={itemRender}>\n            {\n                steps.map(item => <Step.Item key={item} title={item}  />)\n            }\n        </Step>\n    </div>\n\n    <div className=\"fusion-demo-item\">\n        <Step current={2} animation={false} itemRender={itemRender2}>\n            {\n                steps.map(item => <Step.Item key={item} title={item}  />)\n            }\n        </Step>\n    </div>\n</div>, mountNode);\n",
        "css": ".fusion-demo-item {\n    margin: 15px 0;\n}\n.custom-node1 {\n    height: 100%;\n    width: 100%;\n    border-radius: 20%;\n    border: 1px dashed #3E71F1;\n    text-align: center;\n}\n.custom-node1 span {\n    font-size: 12px;\n\n    position: absolute;\n    top: 50%;\n    text-align: center;\n    width: 100%;\n    left: 0;\n    transform: translateY(-50%);\n}\n.custom-node2 {\n    height: 100%;\n    width: 100%;\n    border-radius: 20%;\n    border: 1px dashed #3E71F1;\n    text-align: center;\n    background: #3E71F1;\n    color: #fff;\n    position: relative;\n}\n\n.custom-node2 span, .custom-node2 i {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    left: 0;\n    width: 100%;\n    text-align: center;\n}\n",
        "body": "\n<p><code>Step.Item</code> 默认有三种状态，分别是 <code>wait</code>, <code>process</code>, <code>finish</code>。\n用户可以通过传递 <code>itemRender</code> 属性进行自定义的渲染。</p>\n"
      },
      {
        "title": "垂直模式",
        "order": "1",
        "jsx": "import { Step } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Step current={1} direction=\"vertical\" animation={false}>\n        <Step.Item title=\"Step 1\" content=\"Open the refrigerator door\" />\n        <Step.Item title=\"Step 2\" content=\"Put the elephant in the refrigerator\" />\n        <Step.Item title=\"Step 3\" content=\"Close the refrigerator door\" />\n    </Step>\n\n    <br /><br />\n    <Step current={1} direction=\"vertical\" shape=\"dot\" animation={false}>\n        <Step.Item title=\"Step 1\" content=\"Open the refrigerator door\" />\n        <Step.Item title=\"Step 2\" content=\"Put the elephant in the refrigerator\" />\n        <Step.Item title=\"Step 3\" content=\"Close the refrigerator door\" />\n    </Step>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>对于点型和圆圈型的 Step 组件而言，可以通过设置 <code>direction</code> 属性设置其展示方向为垂直。\n箭头形不支持垂直模式。</p>\n"
      },
      {
        "title": "禁用步骤项",
        "order": "3",
        "jsx": "import { Step } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Step current={1} shape=\"arrow\">\n        <Step.Item title=\"Step 1\" />\n        <Step.Item title=\"Step 2\" />\n        <Step.Item title=\"Step 3\" disabled />\n        <Step.Item title=\"Step 4\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} shape=\"dot\">\n        <Step.Item title=\"Step 1\" />\n        <Step.Item title=\"Step 2\" />\n        <Step.Item title=\"Step 3\" disabled />\n        <Step.Item title=\"Step 4\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} shape=\"circle\">\n        <Step.Item title=\"Step 1\" />\n        <Step.Item title=\"Step 2\" />\n        <Step.Item title=\"Step 3\" disabled />\n        <Step.Item title=\"Step 4\" />\n    </Step>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过在 <code>Step.Item</code> 上设置 <code>disabled</code> 属性来禁用某个步骤。</p>\n"
      },
      {
        "title": "图标和百分比",
        "order": "2",
        "jsx": "import { Step } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Step current={1} animation={false} shape=\"dot\">\n        <Step.Item title=\"Step 1\" content=\"Open the refrigerator door\" icon=\"calendar\" />\n        <Step.Item title=\"Step 2\" content=\"Put the elephant in the refrigerator\" percent={40}/>\n        <Step.Item title=\"Step 3\" content=\"Close the refrigerator door\" icon=\"smile\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} animation={false}>\n        <Step.Item title=\"Step 1\" content=\"Open the refrigerator door\" icon=\"calendar\" />\n        <Step.Item title=\"Step 2\" content=\"Put the elephant in the refrigerator\" percent={40}/>\n        <Step.Item title=\"Step 3\" content=\"Close the refrigerator door\" icon=\"smile\" />\n    </Step>\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以在点型和圆形步骤条中使用图标，圆形步骤条还支持使用百分比。</p>\n"
      },
      {
        "title": "只读模式",
        "order": "5",
        "jsx": "import { Step, Button } from '@alifd/next';\n\nconst StepItem = Step.Item, ButtonGroup = Button.Group;\nclass Component extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentStep: 3\n        };\n    }\n    next() {\n        const s = this.state.currentStep + 1;\n\n        this.setState({\n            currentStep: s > 6 ? 6 : s\n        });\n    }\n    prev() {\n        const s = this.state.currentStep - 1;\n\n        this.setState({\n            currentStep: s < 0 ? 0 : s\n        });\n    }\n    onClick(currentStep) {\n        console.log(currentStep);\n\n        this.setState({\n            currentStep: currentStep\n        });\n    }\n    render() {\n        const {currentStep} = this.state;\n\n        return (\n            <div>\n                <Step current={currentStep} readOnly>\n                    <StepItem title=\"Step 1\" onClick={this.onClick.bind(this)} />\n                    <StepItem title=\"Step 2\" onClick={this.onClick.bind(this)} />\n                    <StepItem title=\"Step 3\" onClick={this.onClick.bind(this)} />\n                    <StepItem title=\"Step 4\" onClick={this.onClick.bind(this)} />\n                    <StepItem title=\"Step 5\" onClick={this.onClick.bind(this)} />\n                    <StepItem title=\"Step 6\" onClick={this.onClick.bind(this)} />\n                </Step>\n                <br />\n                <br />\n                <ButtonGroup>\n                    <Button onClick={this.prev.bind(this)} type=\"primary\" disabled={currentStep === 0}>Backward</Button>\n                    <Button onClick={this.next.bind(this)} type=\"primary\" disabled={currentStep === 6}>Forward</Button>\n                </ButtonGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Component />, mountNode);\n",
        "css": "",
        "body": "\n<p>只读模式，不可触发回调。</p>\n"
      }
    ]
  },
  {
    "name": "Switch",
    "category": "Components",
    "title": "开关组件",
    "type": "表单",
    "importStatement": "import { Switch } from '@alifd/next';",
    "body": "\n## 开发指南\n\n开关组件\n\n### 何时使用\n\n开/关切换器切换单个设置选项的状态。开关控制器中的选项，以及它所在的状态，应该用伴随的内联标签显示清楚。开关选择器具有和单选按钮一样的视觉属性。使用文本“开”和“关”滑动切换已经过时了。使用这里显示的开关选择器代替。\n\n### 使用注意\n\n-   对于checkChildren和unCheckedChildren的自定义要考虑文字大小，因为switch的宽度有限，默认一个汉字大小。如果设置成多个字或者英文要注意宽度控制。\n\n API\n\n### Switch\n\n| 参数                | 说明                                                                                                                                             | 类型       | 默认值       |\n| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- | -------- | --------- |\n| checkedChildren   | 打开时的内容                                                                                                                                         | any      | -         |\n| size              | switch的尺寸<br><br>**可选值**:<br>'medium'(正常大小)<br>'small'(缩小版大小)                                                                                  | Enum     | 'medium'  |\n| unCheckedChildren | 关闭时的内容                                                                                                                                         | any      | -         |\n| onChange          | 开关状态改变是触发此事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>_checked_: {Boolean} 是否为打开状态<br>_e_: {Event} DOM事件对象 | Function | () => { } |\n| checked           | 开关当前的值(针对受控组件)                                                                                                                                 | Boolean  | -         |\n| defaultChecked    | 开关默认值 (针对非受控组件)                                                                                                                                | Boolean  | -         |\n| disabled          | 表示开关被禁用                                                                                                                                        | Boolean  | false     |\n| onClick           | 鼠标点击事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} DOM事件对象                                                         | Function | -         |\n| onKeyDown         | 键盘按键事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>_e_: {Event} DOM事件对象                                                         | Function | -         |\n\n## 键盘支持\n\n-   支持键盘控制，tab选中后按回车进行状态切换。\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "简单",
        "order": "0",
        "jsx": "import { Switch } from '@alifd/next';\n\n\nfunction onChange(checked) {\n    console.log(`switch to ${checked}`);\n}\n\nReactDOM.render(<div>\n    <Switch checkedChildren=\"on\" onChange={onChange} unCheckedChildren=\"off\" />\n    <br />\n    <Switch defaultChecked={false} onChange={onChange} size=\"small\" />\n    <br />\n    <Switch className=\"large-width\" checkedChildren=\"on\" onChange={onChange} unCheckedChildren=\"off please\" />\n</div>,\nmountNode);\n",
        "css": ".large-width {\n    width: 100px;\n}\n",
        "body": "\n<p>最简单的用法,size可设置大小。</p>\n"
      },
      {
        "title": "受控开关",
        "order": "1",
        "jsx": "import { Switch } from '@alifd/next';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: false\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(checked) {\n        this.setState({checked});\n    }\n\n    render() {\n        return (<div>\n            <div className=\"line\">value of switch: {this.state.checked ? 'true' : 'false'}</div>\n            <div className=\"line\">\n                <Switch checked={this.state.checked} onChange={this.onChange} />\n                <Switch checked={this.state.checked} onChange={this.onChange} disabled />\n            </div>\n        </div>);\n    }\n}\n\nReactDOM.render(\n    <App />,\n    mountNode\n);\n",
        "css": ".line {\n  margin-bottom: 10px;\n}\n.next-switch {\n  margin-right: 20px;\n}\n",
        "body": "\n<p>受控开关, 是指组件的值由上层组件决定, 如果开关定义了 <code>value</code> 属性, 就表示此开关是受控开关.</p>\n<p>对于受控开关, 每一次 React 数据渲染时, 都会使用传入的值来更新开关, 开关本身是不能更新自己的状态的.</p>\n"
      },
      {
        "title": "不可用",
        "order": "2",
        "jsx": "import { Button, Icon, Switch } from '@alifd/next';\n\n\n\nclass Test extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            disabled: true\n        };\n    }\n\n    toggle() {\n        this.setState(Object.assign({}, this.state, {\n            disabled: !this.state.disabled\n        }));\n    }\n\n    render() {\n        return (<div>\n            <Switch checkedChildren={<Icon type=\"select\" size=\"small\" />}\n                unCheckedChildren={<Icon type=\"close\" size=\"small\" />} disabled={this.state.disabled} />\n            <Switch checkedChildren=\"on\" unCheckedChildren=\"off\" disabled={this.state.disabled} />\n            <br />\n            <br />\n            <Button type=\"primary\" onClick={this.toggle.bind(this)}>Toggle disabled</Button>\n        </div>);\n    }\n}\n\nReactDOM.render(<Test />, mountNode);\n",
        "css": "",
        "body": "\n<p>Switch 失效状态。</p>\n"
      }
    ]
  },
  {
    "name": "Tab",
    "category": "Components",
    "title": "选项卡",
    "type": "导航",
    "importStatement": "import { Tab } from '@alifd/next';",
    "body": "\n## Guide\n\nTAB 让用户可以在不同子任务、视图、模式之间切换，它具有全局导航的作用，\n是全局功能的主要展示和切换区域，一个TAB标记一个核心功能，TAB之间可以快速点击切换。\n该窗口包含2个以上的选项卡，所有选项卡可以排列在一行中，即使该用户界面被本地化后也是如此。\n提供平级的区域将大块内容进行收纳和展现，保持界面整洁。\n\n### 何时使用\n\nFusion 提供了三级选项卡，分别用于不同的场景。\n\n-   普通选项卡，引领整页面的内容，起导航的作用。\n-   文本型选项卡。\n-   包裹型选项卡，在页面结构中，只是局部展示，需要和其他内容结合出现。\n-   胶囊型选项卡。\n\n### 关于动效\n\n如果您不想开启动效，可以通过设置 `animation` 属性值为 `false` 来关闭。\n\n API\n\n### Tab\n\n| 参数                  | 说明                                                                                                                                                                                                                  | 类型            | 默认值      |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | -------- |\n| activeKey           | 被激活的选项卡的 key                                                                                                                                                                                                        | Number/String | -        |\n| size                | 尺寸<br><br>**可选值**:<br>'small', 'medium'                                                                                                                                                                             | Enum          | 'medium' |\n| shape               | 外观形态<br><br>**可选值**:<br>'pure', 'wrapped', 'text', 'capsule'                                                                                                                                                        | Enum          | 'pure'   |\n| defaultActiveKey    | 初始化时被激活的选项卡的 key                                                                                                                                                                                                    | Number/String | -        |\n| animation           | 是否开启动效                                                                                                                                                                                                              | Boolean       | true     |\n| excessMode          | 选项卡过多时的滑动模式<br><br>**可选值**:<br>'slide', 'dropdown'                                                                                                                                                                  | Enum          | 'slide'  |\n| tabPosition         | 导航选项卡的位置，只适用于包裹型（wrapped）选项卡<br><br>**可选值**:<br>'top', 'bottom', 'left', 'right'                                                                                                                                    | Enum          | 'top'    |\n| triggerType         | 激活选项卡的触发方式<br><br>**可选值**:<br>'hover', 'click'                                                                                                                                                                      | Enum          | 'click'  |\n| lazyLoad            | 是否提前渲染好所有 TabPane 的内容                                                                                                                                                                                               | Boolean       | true     |\n| unmountInactiveTabs | 是否自动卸载未处于激活状态的选项卡                                                                                                                                                                                                   | Boolean       | false    |\n| navStyle            | 导航条的自定义样式                                                                                                                                                                                                           | Object        | -        |\n| navClassName        | 导航条的自定义样式类                                                                                                                                                                                                          | String        | -        |\n| contentStyle        | 内容区容器的自定义样式                                                                                                                                                                                                         | Object        | -        |\n| contentClassName    | 内容区容器的自定义样式类                                                                                                                                                                                                        | String        | -        |\n| extra               | 导航栏附加内容                                                                                                                                                                                                             | ReactNode     | -        |\n| onClick             | 点击单个选项卡时触发的回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                  | Function      | () => {} |\n| onChange            | 选项卡发生切换时的事件回调<br><br>**签名**:<br>Function(key: String/Number) => void<br>**参数**:<br>_key_: {String/Number} 改变后的 key                                                                                                  | Function      | () => {} |\n| onClose             | 选项卡被关闭时的事件回调<br><br>**签名**:<br>Function(key: String/Number) => void<br>**参数**:<br>_key_: {String/Number} 关闭的选项卡的 key                                                                                                | Function      | () => {} |\n| tabRender           | 自定义选项卡模板渲染函数<br><br>**签名**:<br>Function(key: String, props: Object) => ReactNode<br>**参数**:<br>_key_: {String} 当前 Tab.Item 的 key 值<br>_props_: {Object} 传给 Tab.Item 的所有属性键值对<br>**返回值**:<br>{ReactNode} 返回自定义组件<br> | Function      | -        |\n\n### Tab.Item\n\n| 参数        | 说明         | 类型        | 默认值   |\n| --------- | ---------- | --------- | ----- |\n| title     | 选项卡标题      | ReactNode | -     |\n| closeable | 单个选项卡是否可关闭 | Boolean   | false |\n| disabled  | 选项卡是否被禁用   | Boolean   | -     |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "简单用法",
        "order": "0",
        "jsx": "import { Tab } from '@alifd/next';\n\nReactDOM.render(\n    <Tab>\n        <Tab.Item title=\"Home\">Home content</Tab.Item>\n        <Tab.Item title=\"Documentation\">Doc content</Tab.Item>\n        <Tab.Item title=\"Help\">Help Content</Tab.Item>\n    </Tab>\n    , mountNode);\n",
        "css": ".next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>使用 Tab 最简单的例子。</p>\n"
      },
      {
        "title": "可关闭选项卡",
        "order": "6",
        "jsx": "import { Tab, Button, Icon } from '@alifd/next';\n\nconst panes = [\n    { tab: 'Mail', key: 1, closeable: false },\n    { tab: 'Message', key: 2, closeable: true },\n    { tab: 'Setting', key: 3, closeable: true },\n    { tab: 'Unread', key: 4, closeable: true },\n];\n\nclass CloseableTab extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            panes: panes,\n            activeKey: panes[0].key,\n        };\n    }\n\n    /*eslint-disable eqeqeq */\n    remove(targetKey) {\n        let activeKey = this.state.activeKey;\n        const panes = [];\n        this.state.panes.forEach(pane => {\n            if (pane.key != targetKey) {\n                panes.push(pane);\n            }\n        });\n\n        if (targetKey == activeKey) {\n            activeKey = panes[0].key;\n        }\n        this.setState({ panes, activeKey });\n    }\n\n    onClose = (targetKey) => {\n        this.remove(targetKey);\n    }\n\n    onChange = (activeKey) => {\n        this.setState({ activeKey });\n    }\n\n    addTabpane = () => {\n        this.setState(prevState => {\n            const { panes } = prevState;\n            panes.push({ tab: 'new tab', key: Math.random(), closeable: true });\n            return { panes };\n        });\n    }\n\n    render() {\n        const state = this.state;\n        return (\n            <div>\n                <Button onClick={this.addTabpane} size=\"large\" type=\"primary\"><Icon type=\"add\"/> New Tab</Button>\n\n                <Tab\n                    shape=\"wrapped\"\n                    activeKey={state.activeKey}\n                    onChange={this.onChange}\n                    onClose={this.onClose}\n                    className=\"custom-tab\">\n                    {state.panes.map(item => <Tab.Item title={item.tab} key={item.key}  closeable={item.closeable}>{item.tab} content</Tab.Item>)}\n                </Tab>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<CloseableTab />, mountNode);\n",
        "css": ".custom-tab {\n    margin-top: 14px;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>可关闭选项卡，可以通过在 <code>Tab.Item</code> 上设置 <code>closeable</code> 属性设置该选项卡是否可关闭。</p>\n"
      },
      {
        "title": "自定义样式",
        "order": "9",
        "jsx": "import { Tab } from '@alifd/next';\n\nconst panes = [\n    {\n        tab: 'Todo Tasks',\n        key: 0\n    },\n    {\n        tab: 'Finished Tasks',\n        key: 1\n    },\n    {\n        tab: 'Unread Messages',\n        key: 2\n    },\n    {\n        tab: 'Past Messages',\n        key: 3\n    },\n    {\n        tab: 'All Messages',\n        key: 4\n    }\n];\n\nconst detachedContentStyle = {\n    border: '1px solid #DCDEE3',\n    padding: '20px',\n};\n\nReactDOM.render(<div className=\"fusion-demo\">\n    <div className=\"demo-item-title\">Customize with contentStyle or contentClassName</div>\n    <Tab shape=\"wrapped\" contentStyle={detachedContentStyle}>\n        {\n            panes.map(pane => <Tab.Item title={pane.tab} key={pane.key}>{pane.tab}</Tab.Item>)\n        }\n    </Tab>\n\n    <div className=\"demo-item-title\">Setting className and style in Tab.Item</div>\n    <Tab shape=\"wrapped\" navStyle={{ background: '#DEE8FF' }}>\n        {\n            panes.map(pane => {\n                return (<Tab.Item\n                    title={pane.tab}\n                    key={pane.key}\n                    className=\"custom-tab-item\"\n                    style={{background: '#FFF'}}>{pane.tab}</Tab.Item>\n                );\n            })\n        }\n    </Tab>\n\n    <div className=\"demo-item-title\">Tabs with equal width</div>\n    <Tab shape=\"capsule\">\n        {\n            panes.map(pane => <Tab.Item title={pane.tab} key={pane.key} className=\"justify-tabs-tab\">{pane.tab}</Tab.Item>)\n        }\n    </Tab>\n</div>\n    , mountNode);\n",
        "css": ".fusion-demo .demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n}\n\n.custom-content {\n    padding: 15px;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n\n.custom-tab-item {\n    margin-right: -1px !important;\n}\n\n.justify-tabs-tab {\n    width: 140px;\n    text-align: center;\n}\n",
        "body": "\n<p>在 Tab 已有样式的基础上，可以通过 <code>contentStyle</code>, <code>contentClassName</code> 等属性自由的进行样式自定义。</p>\n"
      },
      {
        "title": "自定义选项卡",
        "order": "10",
        "jsx": "import { Tab } from '@alifd/next';\n\nfunction CustomTabItem({ title, desc }) {\n    return (<div className=\"custom-tab-item\">\n        <div className=\"tab-title\">{title}</div>\n        <div className=\"tab-desc\">{desc}</div>\n    </div>);\n}\n\nconst panes = [\n    { key: 'e-checking', title: 'Alipay', desc: 'The fee to be paid is $15' },\n    { key: 'brand-card', title: 'Bank Card', desc: 'The fee to be paid is $17' },\n];\n\nReactDOM.render(\n    <Tab shape=\"wrapped\" tabRender={(key, props) => <CustomTabItem key={key} {...props} />}>\n        {\n            panes.map(pane => <Tab.Item key={pane.key} {...pane} tabStyle={{ height: '60px' }}>{pane.desc}</Tab.Item>)\n        }\n    </Tab>\n    , mountNode);\n",
        "css": ".custom-tab-item {\n    padding: 10px;\n}\n\n.tab-title {\n    font-size: 20px;\n}\n.tab-desc {\n    margin: 10px 0 0 0;\n    font-size: 12px;\n}\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>Tab 支持使用 <code>tabRender</code> 属性返回自定义组件作为选项卡内容，注意该属性接收函数作为属性值。</p>\n"
      },
      {
        "title": "禁用",
        "order": "8",
        "jsx": "import { Tab } from '@alifd/next';\n\nReactDOM.render(\n    <Tab>\n        <Tab.Item title=\"Tab 1\" disabled>Tab 1 content</Tab.Item>\n        <Tab.Item title=\"Tab 2\">Tab 2 content</Tab.Item>\n        <Tab.Item title=\"Tab 3\">Tab 3 content</Tab.Item>\n    </Tab>\n    , mountNode);\n",
        "css": ".next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>可以通过 <code>disabled</code> 属性禁用某一个选型卡。</p>\n"
      },
      {
        "title": "可编辑的 Tab",
        "order": "12",
        "jsx": "import { Tab, Input } from '@alifd/next';\n\nclass EditableTabPane extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabTitle: props.defaultTitle,\n            editable: false,\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.defaultTitle !== this.state.tabTitle) {\n            this.setState({\n                tabTitle: nextProps.defaultTitle\n            });\n        }\n    }\n\n    onKeyDown = (e) => {\n        const { keyCode } = e;\n        // Stop bubble up the events of keyUp, keyDown, keyLeft, and keyRight\n        if (keyCode > 36 && keyCode < 41) {\n            e.stopPropagation();\n        }\n    }\n\n    onBlur = (e) => {\n        this.setState({\n            editable: false,\n            tabTitle: e.target.value\n        });\n    }\n\n    onDblClick = () => {\n        this.setState({\n            editable: true\n        });\n    }\n\n    render() {\n        const { tabTitle, editable } = this.state;\n        if (editable) {\n            return <Input defaultValue={tabTitle} onKeyDown={this.onKeyDown} onBlur={this.onBlur} />;\n        }\n        return <span onDoubleClick={this.onDblClick}>{tabTitle}</span>;\n    }\n}\n\nconst tabRender = (key, { title }) => (<div key={key} className=\"editable-tab-wrapper\">\n    <EditableTabPane defaultTitle={title} />\n</div>);\n\nReactDOM.render(<Tab defaultActiveKey=\"1\" tabRender={tabRender}>\n    <Tab.Item title=\"Double Click To Edit Me\" key=\"1\">Editable tab</Tab.Item>\n    <Tab.Item title=\"Double Click To Edit Me\" key=\"2\">Editable tab</Tab.Item>\n</Tab>, mountNode);\n",
        "css": ".editable-tab-wrapper {\n    padding: 10px;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n\n",
        "body": "\n<p>Tab 允许开发者在上层进行自由的行为控制，例如用户可以基于 Tab 开发一个标题部分双击可编辑的 Tab ，\n此时用户只要传入自定义组件给 TabPane 即可，Tab 可以将底层事件对象传递给用户的自定义组件。</p>\n"
      },
      {
        "title": "超出时滑动",
        "order": "5",
        "jsx": "import { Tab } from '@alifd/next';\n\nconst tabs = [\n    { tab: 'Home', key: 1 },\n    { tab: 'Documnet', key: 2 },\n    { tab: 'Setting', key: 3 },\n    { tab: 'Help', key: 4 },\n    { tab: 'Admin', key: 5 },\n    { tab: 'More 1', key: 6 },\n    { tab: 'More 2', key: 7 },\n    { tab: 'More 3', key: 8 },\n    { tab: 'More 4', key: 9 },\n    { tab: 'More 5', key: 10 },\n    { tab: 'More 6', key: 11 },\n    { tab: 'More 7', key: 12 },\n    { tab: 'More 8', key: 13 },\n    { tab: 'More 9', key: 14 },\n    { tab: 'More 10', key: 15 },\n    { tab: 'More 11', key: 16 },\n];\n\nfunction onClick(key) {\n    console.log(key);\n}\n\nReactDOM.render(<div className=\"fusion-demo\" style={{ maxWidth: '520px' }}>\n    <div className=\"demo-item-title\">Dropdown mode</div>\n    <Tab excessMode=\"dropdown\">\n        {\n            tabs.map(item => <Tab.Item key={item.key} title={item.tab} onClick={onClick}>{item.tab} content, content, content</Tab.Item>)\n        }\n    </Tab>\n\n    <div className=\"demo-item-title\">Slide mode</div>\n    <Tab excessMode=\"slide\">\n        {\n            tabs.map(item => <Tab.Item key={item.key} title={item.tab} onClick={onClick}>{item.tab} content, content, content</Tab.Item>)\n        }\n    </Tab>\n</div>\n    , mountNode);\n",
        "css": ".fusion-demo .demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>当 Tab 标签非常多时，组件会自动增加滑动支持。可以用过 <code>excessMode</code> 属性切换滑动模式，该属性仅在<code>tabPosition</code>为<code>top</code>或者<code>bottom</code>时生效。</p>\n"
      },
      {
        "title": "附加额外内容",
        "order": "11",
        "jsx": "import { Tab, Button } from '@alifd/next';\n\nfunction handleChange(key) {\n    console.log(key);\n}\n\nfunction handleClick() {\n    console.log('hello world');\n}\n\nconst extraContent = <Button type=\"primary\" onClick={handleClick}>Hello world</Button>;\n\nReactDOM.render(\n    <div className=\"fusion-demo\">\n        <div className=\"demo-item-title\">Extra in Horizontal</div>\n        <Tab shape=\"wrapped\" onChange={handleChange} extra={extraContent}>\n            <Tab.Item title=\"Tab 1\" key=\"1\">Tab 1 Content</Tab.Item>\n            <Tab.Item title=\"Tab 2\" key=\"2\">Tab 2 Content</Tab.Item>\n            <Tab.Item title=\"Tab 3\" key=\"3\">Tab 3 Content</Tab.Item>\n        </Tab>\n\n        <div className=\"demo-item-title\">Extra in Vertical</div>\n        <Tab shape=\"wrapped\" tabPosition=\"left\" onChange={handleChange} extra={extraContent} contentClassName=\"custom-tab-content\">\n            <Tab.Item title=\"Tab 1\" key=\"1\">Tab 1 Content</Tab.Item>\n            <Tab.Item title=\"Tab 2\" key=\"2\">Tab 2 Content</Tab.Item>\n            <Tab.Item title=\"Tab 3\" key=\"3\">Tab 3 Content</Tab.Item>\n        </Tab>\n    </div>\n    , mountNode);\n",
        "css": ".fusion-demo .demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n}\n\n.custom-tab-content {\n    min-height: 150px;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n\n\n",
        "body": "\n<p>通过 <code>extra</code> 属性添加附加内容，请确保只在有限选项卡的情况下才使用附加内容。</p>\n"
      },
      {
        "title": "按需加载和自动卸载",
        "order": "3",
        "jsx": "import { Tab } from '@alifd/next';\n\nconst tabs = [\n    { tab: 'Home', key: 0, content: 'This is home page' },\n    { tab: 'Document', key: 1, content: 'This is document page' },\n    { tab: 'API', key: 2, content: 'This is api page' },\n];\n\nReactDOM.render(\n    <div>\n        <div>Render all tab contents</div>\n        <Tab lazyLoad={false}>\n            {\n                tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)\n            }\n        </Tab>\n\n        <div>Unmount inactive tabs</div>\n        <Tab unmountInactiveTabs>\n            {\n                tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)\n            }\n        </Tab>\n    </div>\n    , mountNode);\n",
        "css": ".next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>默认情况 Tab 不会提前渲染好所有的内容，而是根据 Tab 的激活情况依次进行渲染。某些时候，如果你想一次渲染好所有内容，可以设置 <code>lazyLoad={false}</code> 进行关闭。此外，某些时候，如果你想每次切换选项卡时自动卸载未激活的 Tab，可以设置 <code>unmountInactiveTabs</code> 开启。</p>\n"
      },
      {
        "title": "选项卡嵌套",
        "order": "14",
        "jsx": "import { Tab } from '@alifd/next';\n\nfunction callback(key) {\n    console.log(key);\n}\n\nReactDOM.render(\n    <Tab onChange={callback} shape=\"wrapped\">\n        <Tab.Item title=\"Tab 1\" key=\"1\">\n            <Tab shape=\"wrapped\">\n                <Tab.Item title=\"1-1\" key=\"11\">1-1</Tab.Item>\n                <Tab.Item title=\"1-2\" key=\"12\">1-2</Tab.Item>\n                <Tab.Item title=\"1-3\" key=\"13\">1-3</Tab.Item>\n            </Tab>\n        </Tab.Item>\n        <Tab.Item title=\"Tab 2\" key=\"2\">\n            <Tab shape=\"pure\">\n                <Tab.Item title=\"2-1\" key=\"21\">2-1</Tab.Item>\n                <Tab.Item title=\"2-2\" key=\"22\">2-2</Tab.Item>\n                <Tab.Item title=\"3-3\" key=\"23\">2-3</Tab.Item>\n            </Tab>\n        </Tab.Item>\n        <Tab.Item title=\"Tab 3\" key=\"3\">\n            <Tab shape=\"capsule\">\n                <Tab.Item title=\"3-1\" key=\"31\">3-1</Tab.Item>\n                <Tab.Item title=\"3-2\" key=\"32\">3-2</Tab.Item>\n                <Tab.Item title=\"3-3\" key=\"33\">3-3</Tab.Item>\n            </Tab>\n        </Tab.Item>\n        <Tab.Item title=\"Tab 4\" key=\"4\">\n            <Tab shape=\"text\">\n                <Tab.Item title=\"4-1\" key=\"41\">4-1</Tab.Item>\n                <Tab.Item title=\"4-2\" key=\"42\">4-2</Tab.Item>\n                <Tab.Item title=\"4-3\" key=\"43\">4-3</Tab.Item>\n            </Tab>\n        </Tab.Item>\n    </Tab>\n    , mountNode);\n",
        "css": ".next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>可以将不同类型的选项卡进行嵌套</p>\n"
      },
      {
        "title": "位置",
        "order": "4",
        "jsx": "import { Tab, Select } from '@alifd/next';\n\nclass Demo extends React.Component {\n\n    state = {\n        position: 'top',\n    }\n\n    changePosition = (val) => {\n        this.setState({\n            position: val,\n        });\n    }\n\n    render() {\n        return (<div>\n            <Select onChange={this.changePosition} placeholder=\"Choose Positon of Tab\">\n                {\n                    ['top', 'bottom', 'left', 'right'].map(item => <Select.Option value={item} key={item}>{item}</Select.Option>)\n                }\n            </Select><br /><br />\n            <Tab tabPosition={this.state.position} shape=\"wrapped\" contentClassName=\"custom-tab-content\">\n                <Tab.Item title=\"Tab 1\" key=\"1\">Tab 1 Content</Tab.Item>\n                <Tab.Item title=\"Tab 2\" key=\"2\">Tab 2 Content</Tab.Item>\n                <Tab.Item title=\"Tab 3\" key=\"3\">Tab 3 Content</Tab.Item>\n            </Tab>\n        </div>);\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".custom-tab-content {\n    min-height: 50px;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>包裹型选项卡支持通过 <code>tabPosition</code> 属性设置选项卡的位置，支持 <code>top | right | bottom | left</code> 四个方向。</p>\n"
      },
      {
        "title": "形态",
        "order": "1",
        "jsx": "import { Tab } from '@alifd/next';\n\nfunction onChange(key) {\n    console.log(key);\n}\n\nconst tabs = [\n    { tab: 'Home', key: 'home', content: 'This is home page' },\n    { tab: 'Document', key: 'doc', content: 'This is document page' },\n    { tab: 'API', key: 'api', content: 'This is api page' },\n    { tab: 'Repo', key: 'repo', content: 'This ia repo link' },\n];\n\nconst shapes = ['pure', 'wrapped', 'text', 'capsule'];\n\nReactDOM.render(\n    <div className=\"fusion-demo\">\n        {\n            shapes.map(shape => (<div key={shape} className=\"fusion-demo-item\">\n                <Tab shape={shape} onChange={onChange}>\n                    {\n                        tabs.map(tab => <Tab.Item title={tab.tab} key={tab.key}>{tab.content}</Tab.Item>)\n                    }\n                </Tab>\n            </div>))\n        }\n    </div>\n    , mountNode);\n",
        "css": ".fusion-demo-item {\n    margin: 14px 0;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>根据使用场景及触发控件的类型，可以通过 <code>shape</code> 属性配置选项卡的类型，主要包括：</p>\n<ul>\n<li><code>pure</code> 普通选项卡（默认）</li>\n<li><code>wrapped</code>  包裹型选项卡</li>\n<li><code>text</code> 文本型选项卡</li>\n<li><code>capsule</code> 胶囊型选项卡</li>\n</ul>\n"
      },
      {
        "title": "尺寸",
        "order": "2",
        "jsx": "import { Tab } from '@alifd/next';\n\nconst tabs = [\n    { tab: 'Home', key: 'home', content: 'This is home page' },\n    { tab: 'Document', key: 'doc', content: 'This is document page' },\n    { tab: 'API', key: 'api', content: 'This is api page' },\n];\n\nReactDOM.render(\n    <div>\n        <Tab size=\"small\">\n            {tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)}\n        </Tab>\n        <br />\n        <Tab size=\"small\" shape=\"wrapped\">\n            {tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)}\n        </Tab>\n        <br />\n        <Tab size=\"small\" shape=\"text\">\n            {tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)}\n        </Tab>\n        <br />\n        <Tab size=\"small\" shape=\"capsule\">\n            {tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)}\n        </Tab>\n\n    </div>, mountNode);\n",
        "css": ".next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>组件尺寸，可以通过<code>size</code>属性设置，提供<code>medium</code>(默认)和<code>small</code>两种尺寸，\n<code>small</code>尺寸的选项卡组件可以用在弹出框等较狭窄的容器内。</p>\n"
      },
      {
        "title": "在 Grid 中使用 Tab",
        "order": "13",
        "jsx": "import { Tab, Grid } from '@alifd/next';\n\nconst { Row, Col } = Grid;\n\nconst tabs = function(length) {\n    const arr = [];\n    for (let i = 1; i < length; i++) {\n        arr.push({ tab: `tab ${i}`, key: i, content: `tab ${i} content` });\n    }\n    return arr;\n}(15);\n\nReactDOM.render(\n    <div className=\"custom-wrapper\">\n        <Row className=\"custom-row\">\n            <Col fixedSpan=\"12\" className=\"custom-col-sidebar\">Sidebar</Col>\n            <Col className=\"custom-col-content\">\n                <Tab>\n                    {\n                        tabs.map(item => <Tab.Item key={item.key} title={item.tab}>{item.content}</Tab.Item>)\n                    }\n                </Tab>\n            </Col>\n        </Row>\n    </div>\n    , mountNode);\n",
        "css": ".custom-row {\n    border: 1px solid #ccc;\n}\n\n.custom-col-sidebar {\n    border-right: 1px solid #ccc;\n    height: 130px;\n    line-height: 130px;\n    text-align: center;\n}\n\n.custom-col-content {\n    overflow: hidden;\n}\n",
        "body": "\n<p>当 Tab 位于 Grid 组件的布局中时，由于 Grid 默认使用 <code>flex</code> 布局方式，当选项卡数量过多时，会导致内层元素撑起整个 <code>flex</code> 容器，此时需要给容器添加自定义样式 <code>overflow: hidden</code>。</p>\n"
      },
      {
        "title": "触发类型",
        "order": "7",
        "jsx": "import { Tab } from '@alifd/next';\n\nconst tabs = [\n    { tab: 'Home', key: 0, content: 'This is home page' },\n    { tab: 'Document', key: 1, content: 'This is document page' },\n    { tab: 'API', key: 2, content: 'This is api page' },\n];\n\nfunction onChange(key) {\n    console.log('change', key);\n}\n\nfunction handleClick(key) {\n    console.log('click', key);\n}\n\nfunction onMouseEnter(key, e) {\n    console.log('enter', e.target, key);\n}\n\nfunction onMouseLeave(key, e) {\n    console.log('leave', e.target, key);\n}\n\nReactDOM.render(\n    <div className=\"fusion-demo\">\n        <div className=\"demo-item-title\">Click to trigger change</div>\n        <Tab triggerType=\"click\" onChange={onChange}>\n            {\n                tabs.map(item => <Tab.Item key={item.key} title={item.tab} onClick={handleClick}>{item.content}</Tab.Item>)\n            }\n        </Tab>\n        <div className=\"demo-item-title\">Hover to trigger change</div>\n        <Tab triggerType=\"hover\" onChange={onChange}>\n            {\n                tabs.map(item => (<Tab.Item\n                    key={item.key}\n                    title={item.tab}\n                    onClick={handleClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}>\n                    {item.content}\n                </Tab.Item>))\n            }\n        </Tab>\n    </div>\n    , mountNode);\n",
        "css": ".fusion-demo .demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n}\n\n.next-tabs-content {\n    color: #333;\n    font-size: 12px;\n    padding: 12px;\n}\n",
        "body": "\n<p>Tab 支持 <code>click</code> 切换和 <code>hover</code> 切换两种触发类型，默认为 <code>click</code> 触发，您可以使用 <code>triggerType</code> 属性修改默认的触发类型。</p>\n"
      }
    ]
  },
  {
    "name": "Table",
    "category": "Components",
    "title": "表格",
    "type": "展示",
    "importStatement": "import { Table } from '@alifd/next';",
    "body": "\n## 开发指南\n\nTable 负责将数据呈现为高度可定制和具备可访问性的 HTML 表格，其核心功能为将结构化的数据使用表格的方式展现，然后可以使用各种参数来向表格中加入一些特性，比如排序，过滤，滚动，锁列等。\n\n### 基本使用\n\n基本的 Table 包含行和列，使用 Table.Column 来定义列的信息，使用传入的 dataSource 属性数据来创建行。\n\n下面的代码将会创建一行两列的数据表：\n\n```js\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    </Table>, mountNode);\n```\n\n### 常见问题\n\n-   Q: 通过 `rowSelection` 开启了选择模式，为什么选择任意一个都是全选？<br/>\n      A: 给定的数据源中的属性需要有一个唯一标示该条数据的主键，默认值为id，可通过 `primaryKey` 更改 e.g.`<Table primaryKey='myId'></Table>`\n-   Q: 还是 `rowSelection` 选择模式，如何设置默认选中/禁用呢？<br/>\n      A: 通过受控模式，设置 `rowSelection` 属性的 `selectedRowKeys` 具体可搜索demo`选择可控`\n-   Q: 能用什么样的方式支持行的双击事件/设置每一行的样式？处理整行点击呢？<br/>\n      A: 通过 `getRowProps` 属性，重写行支持的原生属性，比如`className style onDoubleClick`等；通过 `onRowClick` 处理整行点击\n\n#### 列配置\n\n API。\n\n下面的代码会让`cell`根据值渲染不同的视图：\n\n```js\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nconst renderTime = value => {\n    if (value === '2016') {\n        return '今年';\n    }\n    return value;\n};\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Time\" dataIndex=\"time\" cell={renderTime}/>\n    </Table>, mountNode);\n```\n\n#### 多表头\n\n使用 Table.ColumnGroup 包裹 Table.Column 来创建有多个表头的表格。\n\n```js\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.ColumnGroup>\n            <Table.Column title=\"Id\" dataIndex=\"id\"/>\n            <Table.Column title=\"Time\" dataIndex=\"time\"/>\n        </Table.ColumnGroup>\n        <Table.ColumnGroup>\n            <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        </Table.ColumnGroup>\n    </Table>, mountNode);\n```\n\n### 已知问题\n\n#### 分组 Table 不支持在 Hover 状态和选中状态下显示背景色，无法合并单元格\n\n#### Table 锁列特性下面无法使用合并单元格功能\n\n## API\n\n### Table\n\n| 参数                  | 说明| 类型              | 默认值      |\n| ------------------- || --------------- | -------- |\n| dataSource          | 表格展示的数据源| Array           | \\[]      |\n| onRowClick          | 点击表格每一行触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>_e_: {Event} DOM事件对象                                                                                                                                                                                                                                                                                                                                                                                                                               | Function        | () => {} |\n| onRowMouseEnter     | 悬浮在表格每一行的时候触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>_e_: {Event} DOM事件对象                                                                                                                                                                                                                                                                                                                                                                                                                           | Function        | () => {} |\n| onRowMouseLeave     | 离开表格每一行的时候触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>_e_: {Event} DOM事件对象                                                                                                                                                                                                                                                                                                                                                                                                                            | Function        | () => {} |\n| onSort              | 点击列排序触发的事件<br><br>**签名**:<br>Function(dataIndex: String, order: String) => void<br>**参数**:<br>_dataIndex_: {String} 指定的排序的字段<br>_order_: {String} 排序对应的顺序, 有`desc`和`asc`两种                                                                                                                                                                                                                                                                                                                                                                                                                                             | Function        | () => {} |\n| onFilter            | 点击过滤确认按钮触发的事件<br><br>**签名**:<br>Function(filterParams: Object) => void<br>**参数**:<br>_filterParams_: {Object} 过滤的字段信息                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | Function        | () => {} |\n| onResizeChange      | 重设列尺寸的时候触发的事件<br><br>**签名**:<br>Function(dataIndex: String, value: Number) => void<br>**参数**:<br>_dataIndex_: {String} 指定重设的字段<br>_value_: {Number} 列宽变动的数值                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Function        | () => {} |\n| getRowProps         | 设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。<br><br>**签名**:<br>Function(record: Object, index: Number) => Object<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>**返回值**:<br>{Object} 需要设置的行属性<br>                                                                                                                                                                                                                                                                                                                                                                                                       | Function        | () => {} |\n| getCellProps        | 设置单元格的属性，通过该属性可以进行合并单元格<br><br>**签名**:<br>Function(rowIndex: Number, colIndex: Number, dataIndex: String, record: Object) => Object<br>**参数**:<br>_rowIndex_: {Number} 该行所对应的序列<br>_colIndex_: {Number} 该列所对应的序列<br>_dataIndex_: {String} 该列所对应的字段名称<br>_record_: {Object} 该行对应的记录<br>**返回值**:<br>{Object} 返回td元素的所支持的属性对象<br>                                                                                                                                                                                                                                                                                         | Function        | () => {} |\n| hasBorder           | 表格是否具有边框| Boolean         | true     |\n| hasHeader           | 表格是否具有头部| Boolean         | true     |\n| isZebra             | 表格是否是斑马线| Boolean         | false    |\n| loading             | 表格是否在加载中| Boolean         | false    |\n| loadingComponent    | 自定义 Loading 组件<br><br>**签名**:<br>Function() => void| Function        | -        |\n| filterParams        | 当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:\\[]}}<br>示例:<br>假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中<br>`<Table filterParams={{id: {selectedKeys: ['one']}}}/>`                                                                                                                                                                                                                                                                                                                                                                                                                                 | Object          | -        |\n| sort                | 当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'}| Object          | -        |\n| emptyContent        | 设置数据为空的时候的表格内容展现| ReactNode       | -        |\n| primaryKey          | dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | String          | 'id'     |\n| expandedRowRender   | 额外渲染行的渲染函数<br><br>**签名**:<br>Function(record: Object, index: Number) => Element<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>**返回值**:<br>{Element} 渲染内容<br>                                                                                                                                                                                                                                                                                                                                                                                                                              | Function        | -        |\n| expandedRowIndent   | 额外渲染行的缩进| Array           | -        |\n| openRowKeys         | 默认情况下展开的渲染行或者Tree, 传入此属性为受控状态| Array           | -        |\n| hasExpandedRowCtrl  | 是否显示点击展开额外渲染行的+号按钮| Boolean         | -        |\n| getExpandedColProps | 设置额外渲染行的属性<br><br>**签名**:<br>Function() => void| Function        | -        |\n| onRowOpen           | 在额外渲染行或者Tree展开或者收起的时候触发的事件<br><br>**签名**:<br>Function(openRowKeys: Array, currentRowKey: String, expanded: Boolean, currentRecord: Object) => void<br>**参数**:<br>_openRowKeys_: {Array} 展开的渲染行的key<br>_currentRowKey_: {String} 当前点击的渲染行的key<br>_expanded_: {Boolean} 当前点击是展开还是收起<br>_currentRecord_: {Object} 当前点击额外渲染行的记录                                                                                                                                                                                                                                                                                            | Function        | -        |\n| onExpandedRowClick  | 点击额外渲染行触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>_record_: {Object} 该行所对应的数据<br>_index_: {Number} 该行所对应的序列<br>_e_: {Event} DOM事件对象                                                                                                                                                                                                                                                                                                                                                                                                                               | Function        | -        |\n| fixedHeader         | 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条| Boolean         | -        |\n| maxBodyHeight       | 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条| Number/String   | -        |\n| rowSelection        | 是否启用选择模式<br><br>**属性**:<br>_getProps_: {Function} `Function(record, index)=>Object` 获取selection的默认属性<br>_onChange_: {Function} `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。<br>_onSelect_: {Function} `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调<br>_onSelectAll_: {Function} `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调<br>_selectedRowKeys_: {Array} 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值<br>_mode_: {String} 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple` | Object          | -        |\n| stickyHeader        | 表头是否是sticky| Boolean         | -        |\n| offsetTop           | 距离窗口顶部达到指定偏移量后触发| Number          | -        |\n| affixProps          | affix组件的的属性                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Object          | -        |\n| indent              | 在tree模式下的缩进尺寸， 仅在isTree为true时候有效| Number          | -        |\n| isTree              | 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table| Boolean         | -        |\n| useVirtual          | 是否开启虚拟滚动| Boolean         | -        |\n| rowHeight           | 设置行高| Number/Function | -        |\n| onBodyScroll        | 在内容区域滚动的时候触发的函数<br><br>**签名**:<br>Function() => void| Function        | -        |\n\n### Table.Column\n\n| 参数         | 说明                                                                                                  | 类型                              | 默认值              |\n| ---------- | --------------------------------------------------------------------------------------------------- | ------------------------------- | ---------------- |\n| dataIndex  | 指定列对应的字段，支持`a.b`形式的快速取值                                                                             | String                          | -                |\n| cell       | 行渲染的逻辑<br>value, rowIndex, record, context四个属性只可读不可被更改<br>Function(value, index, record) => Element | ReactElement/ReactNode/Function | (value) => value |\n| title      | 表头显示的内容<br>value, rowIndex, record, context四个属性只可读不可被更改                                             | ReactElement/ReactNode/Function | -                |\n| sortable   | 是否支持排序                                                                                              | Boolean                         | -                |\n| width      | 列宽，注意在锁列的情况下一定需要配置宽度                                                                                | Number/String                   | -                |\n| align      | 单元格的对齐方式<br><br>**可选值**:<br>'left', 'center', 'right'                                               | Enum                            | -                |\n| filters    | 生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`                                                        | Array&lt;Object>                | -                |\n| filterMode | 过滤的模式是单选还是多选<br><br>**可选值**:<br>'single', 'multiple'                                                | Enum                            | 'multiple'       |\n| lock       | 是否支持锁列,可选值为`left`,`right`, `true`                                                                   | Boolean/String                  | -                |\n| resizable  | 是否支持列宽调整, 当该值设为true，table的布局方式会修改为fixed.                                                            | Boolean                         | false            |\n\n### Table.ColumnGroup\n\n| 参数    | 说明      | 类型                              | 默认值            |\n| ----- | ------- | ------------------------------- | -------------- |\n| title | 表头显示的内容 | ReactElement/ReactNode/Function | 'column-group' |\n\n### Table.GroupHeader\n\n| 参数                   | 说明                          | 类型                              | 默认值      |\n| -------------------- | --------------------------- | ------------------------------- | -------- |\n| cell                 | 行渲染的逻辑                      | ReactElement/ReactNode/Function | () => '' |\n| hasChildrenSelection | 是否在Children上面渲染selection    | Boolean                         | false    |\n| hasSelection         | 是否在GroupHeader上面渲染selection | Boolean                         | true     |\n\n### Table.GroupFooter\n\n| 参数   | 说明     | 类型                              | 默认值      |\n| ---- | ------ | ------------------------------- | -------- |\n| cell | 行渲染的逻辑 | ReactElement/ReactNode/Function | () => '' |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "扩展",
        "order": "17",
        "jsx": "import { Table } from '@alifd/next';\nimport PropTypes from 'prop-types';\n/* eslint-disable react/no-multi-comp,react/prop-types */\nconst {Header, Cell} = Table;\nconst dataSource = () => {\n    const result = [];\n    for (let i = 0; i < 5; i++) {\n        result.push({\n            title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\n\nconst AppHeader = (props, context) => {\n    const {columns} = props;\n    const {onChange} = context;\n    const length = columns[columns.length - 1].length;\n    return (<Header {...props}>\n        <tr>\n            <Cell colSpan={length}>\n                <a onClick={() => onChange(true)} href=\"javascript:;\">Select all</a>&nbsp;\n                <a onClick={() => onChange(false)} href=\"javascript:;\">Unselect all</a>\n            </Cell>\n        </tr>\n    </Header>);\n};\n\nAppHeader.contextTypes = {\n    onChange: PropTypes.func\n};\n\nclass App extends React.Component {\n    static childContextTypes = {\n        onChange: PropTypes.func\n    }\n    state = {\n        selectedKeys: []\n    }\n    getChildContext() {\n        return {\n            onChange: this.onChange\n        };\n    }\n    dataSource = dataSource()\n    onChange = (checked) => {\n        let selectedKeys = [];\n        if (checked) {\n            selectedKeys = this.dataSource.map(item => item.id);\n        }\n        this.onRowChange(selectedKeys);\n    }\n    onRowChange = (selectedKeys) => {\n        this.setState({\n            selectedKeys\n        });\n    }\n    render() {\n        return (<span>\n            <Table dataSource={this.dataSource}\n                components={{\n                    Header: AppHeader\n                }}\n                rowSelection={{\n                    selectedRowKeys: this.state.selectedKeys,\n                    onChange: this.onRowChange\n                }}>\n                <Table.Column title=\"Id\" dataIndex=\"id\" />\n                <Table.Column title=\"Title\" dataIndex=\"title\"/>\n                <Table.Column title=\"Time\" dataIndex=\"time\"/>\n            </Table>\n        </span>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过Table暴露的子组件进行扩展</p>\n"
      },
      {
        "title": "简单",
        "order": "0",
        "jsx": "import { Table } from '@alifd/next';\n\nconst dataSource = () => {\n    const result = [];\n    for (let i = 0; i < 5; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\nconst render = (value, index, record) => {\n    return <a href=\"javascript:;\">Remove({record.id})</a>;\n};\nReactDOM.render(<Table dataSource={dataSource()}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    <Table.Column cell={render}/>\n</Table>, mountNode);\n",
        "css": "",
        "body": "\n<p>简单的表格渲染</p>\n"
      },
      {
        "title": "选择可控",
        "order": "2",
        "jsx": "import { Table, Button } from '@alifd/next';\n\nconst dataSource = (i, j) => {\n        const result = [];\n        for (let a = i; a < j; a++) {\n            result.push({\n                title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n                id: 100306660940 + a,\n                time: 2000 + a\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a href=\"javascript:;\">Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rowSelection: {\n                onChange: this.onChange.bind(this),\n                onSelect: function(selected, record, records) {\n                    console.log('onSelect', selected, record, records);\n                },\n                onSelectAll: function(selected, records) {\n                    console.log('onSelectAll', selected, records);\n                },\n                selectedRowKeys: [100306660940, 100306660941],\n                getProps: (record) => {\n                    return {\n                        disabled: record.id === 100306660941\n                    };\n                }\n            },\n            dataSource: dataSource(0, 5)\n        };\n    }\n    onChange(ids, records) {\n        const {rowSelection} = this.state;\n        rowSelection.selectedRowKeys = ids;\n        console.log('onChange', ids, records);\n        this.setState({ rowSelection });\n    }\n    clear() {\n        const {rowSelection} = this.state;\n        rowSelection.selectedRowKeys = [];\n        this.setState({ rowSelection });\n    }\n    toggleLoading() {\n        this.setState({loading: !this.state.loading});\n    }\n    changeMode() {\n        const {rowSelection} = this.state;\n        const mode = rowSelection.mode;\n        const selectedRowKeys = rowSelection.selectedRowKeys;\n        rowSelection.mode = mode === 'single' ? 'multiple' : 'single';\n        rowSelection.selectedRowKeys = selectedRowKeys.length === 1 ? selectedRowKeys : [];\n        this.setState({ rowSelection });\n    }\n    modifyDataSource() {\n        this.setState({\n            dataSource: dataSource(9, 14)\n        });\n    }\n    render () {\n        return (\n            <div>\n                <p>\n                    <Button onClick={this.clear.bind(this)}>Clear Selection</Button>&nbsp;\n                    <Button onClick={this.changeMode.bind(this)}>Change mode</Button>&nbsp;\n                    <Button onClick={this.toggleLoading.bind(this)}>Toggle loading</Button>&nbsp;\n                    <Button onClick={this.modifyDataSource.bind(this)}>Modify dataSource</Button>\n                </p>\n                <Table dataSource={this.state.dataSource}\n                    loading={this.state.loading}\n                    rowSelection={this.state.rowSelection}>\n                    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n                    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n                    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n                    <Table.Column cell={render} width={200}/>\n                </Table>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>演示全选和单选受控的功能</p>\n"
      },
      {
        "title": "行列合并",
        "order": "7",
        "jsx": "import { Table } from '@alifd/next';\n\nconst onRowClick = function (record, index, e) {\n        console.log(record, index, e);\n    },\n    dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    },\n    getCellProps = (rowIndex, colIndex) => {\n        if (rowIndex === 2 && colIndex === 1) {\n            return {\n                colSpan: 2,\n                rowSpan: 3\n            };\n        }\n        if (rowIndex === 1 && colIndex === 2) {\n            return {\n                colSpan: 2,\n                rowSpan: 1\n            };\n        }\n    };\n\nReactDOM.render(<Table dataSource={dataSource()} onRowClick={onRowClick} getCellProps={getCellProps}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    <Table.Column cell={render} width={200}/>\n</Table>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过getCellProps进行列合并。</p>\n"
      },
      {
        "title": "定制列",
        "order": "15",
        "jsx": "import { Table, Button, Dialog, Checkbox } from '@alifd/next';\n\nconst {Group} = Checkbox;\nconst dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    cols = [{\n        title: 'id',\n        dataIndex: 'id'\n    }, {\n        title: 'Title',\n        dataIndex: 'title'\n    }, {\n        title: 'Time',\n        dataIndex: 'time'\n    }];\n\nclass App extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource(),\n            cols: cols\n        };\n    }\n    openDialog = () => {\n        Dialog.alert({\n            content: this.renderControlContent(),\n            title: 'Select columns',\n            onOk: () => {\n                this.setState({\n                    cols: this.changedCols || this.state.cols\n                });\n                return true;\n            }\n        });\n    }\n\n    renderControlContent() {\n        const groupSource = cols.map(col => {\n                return {\n                    label: col.title,\n                    value: col.dataIndex\n                };\n            }), defaultValue = this.state.cols.map(col => col.dataIndex);\n        return <Group dataSource={groupSource} onChange={this.onChange} defaultValue={defaultValue}/>;\n    }\n\n    onChange = (value) => {\n        this.changedCols = cols.filter(col => value.indexOf(col.dataIndex) > -1);\n    }\n\n    renderCols() {\n        const {cols} = this.state;\n        return cols.map(col => {\n            return <Table.Column title={col.title} dataIndex={col.dataIndex} key={col.dataIndex} />;\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <p><Button onClick={this.openDialog}> Select columns </Button></p>\n                <Table dataSource={this.state.dataSource}>\n                    {this.renderCols()}\n                </Table>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>定制显示的表格列数</p>\n"
      },
      {
        "title": "增删改查",
        "order": "8",
        "jsx": "import { Table, Button } from '@alifd/next';\n\nconst onRowClick = function(record, index, e) {\n        console.log(record, index, e);\n    },\n    dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    };\n\nclass App extends React.Component {\n    state = {\n        dataSource: dataSource()\n    }\n    onAdd = () => {\n        const {dataSource} = this.state;\n        dataSource.push({\n            title: {\n                name: 'Quotation for 1PCS Nano controller compatible',\n            },\n            id: Date.now(),\n            time: 2000\n        });\n        this.setState({\n            dataSource\n        });\n    }\n\n    onRemove = (id) => {\n        const {dataSource} = this.state;\n        let index = -1;\n        dataSource.forEach((item, i) => {\n            if (item.id === id) {\n                index = i;\n            }\n        });\n        if (index !== -1) {\n            dataSource.splice(index, 1);\n            this.setState({\n                dataSource\n            });\n        }\n    }\n\n    render() {\n        const renderOper = (value, index, record) => {\n            return <a onClick={this.onRemove.bind(this, record.id)}>Remove({record.id})</a>;\n        };\n        return (<div>\n            <p><Button onClick={this.onAdd}>Add Item</Button></p>\n            <Table dataSource={this.state.dataSource} onRowClick={onRowClick}>\n                <Table.Column title=\"Id\" dataIndex=\"id\"/>\n                <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n                <Table.Column title=\"Time\" dataIndex=\"time\"/>\n                <Table.Column cell={renderOper} width=\"20%\"/>\n            </Table>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>演示对表格的增删改查</p>\n"
      },
      {
        "title": "自定义 Loading 组件",
        "order": "20",
        "jsx": "import { Table, Loading, Icon } from '@alifd/next';\n\nconst dataSource = () => {\n    const result = [];\n    for (let i = 0; i < 5; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\n\nconst render = (value, index, record) => {\n    return <a href=\"javascript:;\">Remove({record.id})</a>;\n};\n\nconst indicator = (\n    <div>\n        <Icon type=\"loading\" />\n    </div>\n);\n\nconst CustomLoading = (props) => (\n    <Loading\n        indicator={indicator}\n        {...props}\n    />\n);\n\nReactDOM.render(\n    <Table\n        dataSource={dataSource()}\n        loading\n        loadingComponent={CustomLoading}\n    >\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n        <Table.Column title=\"Time\" dataIndex=\"time\"/>\n        <Table.Column cell={render}/>\n    </Table>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "可展开-复杂",
        "order": "6",
        "jsx": "import { Table, Button } from '@alifd/next';\n/*eslint-disable react/prop-types, react/no-multi-comp*/\nclass ExpandedApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: this.props.dataSource\n        };\n    }\n    load() {\n        let {dataSource} = this.state;\n        dataSource = dataSource.concat(dataSource);\n        this.setState({dataSource});\n    }\n    render() {\n        const style = {\n            borderTop: '1px solid #eee',\n            textAlign: 'center',\n            background: '#f8f8f8',\n            lineHeight: '28px'\n        };\n        return (\n            <div style={{marginTop: 10}}>\n                <Table dataSource={this.state.dataSource} hasHeader={false} hasBorder={false}>\n                    <Table.Column title=\"Title\" dataIndex=\"title\"/>\n                    <Table.Column title=\"Time\" dataIndex=\"time\" width={200}/>\n                </Table>\n                <p style={style}\n                    onClick={this.load.bind(this)}>Load more data.</p>\n            </div>\n        );\n    }\n}\n\nconst dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                id: 100306660940 + i,\n                time: 2000 + i,\n                children: [{\n                    title: `Sub title for Quotation ${3 + i}`,\n                    time: 2000 + i,\n                }, {\n                    title: `Sub2 title for Quotation ${3 + i}`,\n                    time: 2000 + i,\n                }]\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    },\n    expandedRowRender = (record) => {\n        const children = record.children;\n        return <ExpandedApp dataSource={children}/>;\n    };\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource(),\n            hasBorder: false,\n            openRowKeys: []\n        };\n    }\n    onSort(dataIndex, order) {\n        const dataSource = this.state.dataSource.sort(function(a, b) {\n            const result = a[dataIndex] - b[dataIndex];\n            return  (order === 'asc') ? (result > 0 ? 1 : -1) : (result > 0 ? -1 : 1);\n        });\n        this.setState({\n            dataSource\n        });\n    }\n    disabledExpandedCol() {\n        this.setState({\n            getExpandedColProps: (record, index) => {\n                if (index === 3) {\n                    return {\n                        disabled: true\n                    };\n                }\n            }\n        });\n    }\n    toggleCol() {\n        this.setState({\n            hasExpandedRowCtrl: false\n        });\n    }\n    onRowOpen(openRowKeys) {\n        this.setState({ openRowKeys});\n    }\n    toggleExpand(record) {\n        const key = record.id,\n            { openRowKeys } = this.state,\n            index = openRowKeys.indexOf(key);\n        if (index > -1) {\n            openRowKeys.splice(index, 1);\n        } else {\n            openRowKeys.push(key);\n        }\n        this.setState({\n            openRowKeys: openRowKeys\n        });\n    }\n    render() {\n        const renderTitle = (value, index, record) => {\n            return <div>{value}<span onClick={this.toggleExpand.bind(this, record)}>+++++</span></div>;\n        };\n        return (\n            <span>\n                <p> <Button onClick={this.disabledExpandedCol.bind(this)}> disable fourth row </Button> &nbsp;\n                    <Button onClick={this.toggleCol.bind(this)}> hide + </Button></p>\n                <Table dataSource={this.state.dataSource}\n                    isZebra={this.state.isZebra}\n                    hasBorder={this.state.hasBorder}\n                    onSort={this.onSort.bind(this)}\n                    expandedRowRender={expandedRowRender}\n                    expandedRowIndent={[1, 1]}\n                    openRowKeys={this.state.openRowKeys}\n                    getExpandedColProps={this.state.getExpandedColProps}\n                    hasExpandedRowCtrl={this.state.hasExpandedRowCtrl}\n                    onRowOpen={this.onRowOpen.bind(this)}\n                >\n                    <Table.Column title=\"Id\" dataIndex=\"id\" sortable/>\n                    <Table.Column title=\"Title\" dataIndex=\"title\" cell={renderTitle}/>\n                    <Table.Column title=\"Time\" dataIndex=\"time\" width={200}/>\n                    <Table.Column cell={render} width={200}/>\n                </Table>\n            </span>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 <code>expandedRowRender</code> 额外渲染行，但是会包含复杂的组件</p>\n"
      },
      {
        "title": "可展开",
        "order": "5",
        "jsx": "import { Table, Button } from '@alifd/next';\n\nconst dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource()\n        };\n    }\n    onSort(dataIndex, order) {\n        const dataSource = this.state.dataSource.sort(function(a, b) {\n            const result = a[dataIndex] - b[dataIndex];\n            return  (order === 'asc') ? (result > 0 ? 1 : -1) : (result > 0 ? -1 : 1);\n        });\n        this.setState({\n            dataSource\n        });\n    }\n    toggleIndent() {\n        this.setState({\n            expandedRowIndent: [2, 1]\n        });\n    }\n    toggleCol() {\n        this.setState({\n            hasExpandedRowCtrl: false\n        });\n    }\n    render() {\n        return (<div>\n            <p>\n                <Button onClick={this.toggleIndent.bind(this)}> Update indent </Button>\n            </p>\n            <Table dataSource={this.state.dataSource}\n                isZebra={this.state.isZebra}\n                hasBorder={false}\n                onSort={this.onSort.bind(this)}\n                expandedRowRender={(record) => record.title}\n                onRowClick={() => console.log('rowClick')}\n                onExpandedRowClick={() => console.log('expandedRowClick')}\n                expandedRowIndent={this.state.expandedRowIndent}\n            >\n                <Table.Column title=\"Id\" dataIndex=\"id\" sortable/>\n                <Table.Column title=\"Title\" dataIndex=\"title\"/>\n                <Table.Column title=\"Time\" dataIndex=\"time\"/>\n                <Table.Column cell={render} width={200}/>\n            </Table>\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 <code>expandedRowRender</code> 额外渲染行</p>\n"
      },
      {
        "title": "排序与过滤",
        "order": "3",
        "jsx": "import { Table, Button } from '@alifd/next';\n\nconst dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a href=\"javascript:;\">Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource(),\n            filterMode: 'multiple'\n        };\n    }\n    onSort(dataIndex, order) {\n        const dataSource = this.state.dataSource.sort(function(a, b) {\n            const result = a[dataIndex] - b[dataIndex];\n            return  (order === 'asc') ? (result > 0 ? 1 : -1) : (result > 0 ? -1 : 1);\n        });\n        this.setState({\n            dataSource,\n            sort: {id: order}\n        });\n    }\n    onFilter(filterParams) {\n        let ds = dataSource();\n        Object.keys(filterParams).forEach(key => {\n            const selectedKeys = filterParams[key].selectedKeys;\n            if (selectedKeys.length) {\n                ds = ds.filter(record => {\n                    return selectedKeys.some(value => {\n                        return record[key].indexOf(value) > -1;\n                    });\n                });\n            }\n        });\n        this.setState({dataSource: ds});\n    }\n    changeMode() {\n        this.setState({\n            filterMode: 'single'\n        });\n    }\n    clearSort() {\n        // your code to reset dataSource\n        const newDataSource = this.state.dataSource;\n\n        this.setState({\n            dataSource: newDataSource,\n            sort: {id: ''}\n        });\n    }\n    render() {\n        const filters = [{\n            label: 'Nano 3',\n            value: 3\n        }, {\n            label: 'Nano 678',\n            value: 678,\n            children: [{\n                label: 'Nano 67',\n                value: 67,\n                children: [{\n                    label: 'Nano 6',\n                    value: 6\n                }, {\n                    label: 'Nano 7',\n                    value: 7\n                }]\n            }, {\n                label: 'Nano 8',\n                value: 8\n            }]\n        }, {\n            label: 'Other',\n            value: 'other',\n            children: [{\n                label: 'Nano 4',\n                value: 4\n            }, {\n                label: 'Nano 5',\n                value: 5\n            }]\n        }];\n        return (\n            <div>\n                <p><Button onClick={this.changeMode.bind(this)}>Change filter menu to single select</Button></p>\n                <p><Button onClick={this.clearSort.bind(this)}>clearSort</Button></p>\n                <Table dataSource={this.state.dataSource}\n                    onSort={this.onSort.bind(this)}\n                    onFilter={this.onFilter.bind(this)}>\n                    <Table.Column title=\"Id\" dataIndex=\"id\" sortable/>\n                    <Table.Column title=\"Title\" dataIndex=\"title\" filters={filters} filterMode={this.state.filterMode}/>\n                    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n                    <Table.Column cell={render} width={200}/>\n                </Table>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>示例演示了排序和过滤的特性</p>\n"
      },
      {
        "title": "固定表头",
        "order": "9",
        "jsx": "import { Table, Button } from '@alifd/next';\n\nconst dataSource = (length) => {\n    const result = [];\n    for (let i = 0; i < length; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\n\nclass App extends React.Component {\n    state = {\n        sticky: false\n    }\n    onSwitch() {\n        this.setState({\n            sticky: true\n        });\n    }\n    render() {\n        return (<div>\n            <p><Button onClick={this.onSwitch.bind(this)}>enable sticky</Button></p>\n            <Table dataSource={dataSource(50)} fixedHeader stickyHeader={this.state.sticky}>\n                <Table.Column title=\"Id\" dataIndex=\"id\"/>\n                <Table.Column title=\"Title\" dataIndex=\"title.name\"/>\n                <Table.Column title=\"Time\" dataIndex=\"time\"/>\n            </Table>\n        </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>表格可以固定表头,支持sticky方式</p>\n"
      },
      {
        "title": "自定义Row/Cell",
        "order": "21",
        "jsx": "import { Table } from '@alifd/next';\n\nconst dataSource = () => {\n    const result = [];\n    for (let i = 0; i < 5; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\n\nconst propsConf = {\n    className: 'next-myclass',\n    style: {background: 'black', color: 'white'},\n    onDoubleClick: () => {\n        console.log('doubleClicked');\n    }\n};\n\nconst setRowProps = (record, index) => {\n    if (index === 2) {\n        return propsConf;\n    }\n};\n\nconst setCellProps = (rowIndex, colIndex, dataIndex, record) => {\n    if (rowIndex === 0 && colIndex === 0) {\n        console.log(record);\n        return propsConf;\n    }\n};\n\nReactDOM.render(<Table dataSource={dataSource()} getRowProps={setRowProps} getCellProps={setCellProps}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n</Table>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以重写部分原生属性，比如className style onDoubleClick等。</p>\n"
      },
      {
        "title": "分组列表",
        "order": "10",
        "jsx": "import { Table, Button } from '@alifd/next';\n\nconst dataSource = [{\n        price: 'US $2.45',\n        status: 0,\n        id: 1,\n        product: [{\n            title: '2014 New Fashion Novelty Tank Slim Women\\'s Fashion Dresses With Lace',\n            avatar: 'https://sc01.alicdn.com/kf/HTB1ravHKXXXXXccXVXXq6xXFXXXJ/Chinese-Style-Fashion-Custom-Digital-Print-Silk.jpg_220x220.jpg'\n        }],\n        children: [{\n            price: 'US $2.5',\n            status: 1,\n            id: 2,\n            product: [{\n                title: 'Free shipping women Casual dresses lady dress plus size 2014',\n                avatar: 'https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg'\n            }]\n        }, {\n            price: 'US $2.5',\n            status: 1,\n            id: 3,\n            product: [{\n                title: 'Free shipping women Casual dresses lady dress plus size 2014',\n                avatar: 'https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg'\n            }]\n        }]\n    }, {\n        price: 'US $2.5',\n        status: 1,\n        id: 4,\n        product: [{\n            title: 'Free shipping women Casual dresses lady dress plus size 2014',\n            avatar: 'https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg'\n        }],\n        children: [{\n            price: 'US $2.5',\n            status: 1,\n            id: 5,\n            product: [{\n                title: 'Free shipping women Casual dresses lady dress plus size 2014',\n                avatar: 'https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg'\n            }]\n        }]\n    }],\n    productRender = function(product) {\n        return (<div className=\"media\">\n            <img src={product[0].avatar} className=\"media-side\"/>\n            <div className=\"media-content\">{product[0].title}</div>\n        </div>);\n    },\n    priceRender = function(price) {\n        return <b>{price}</b>;\n    },\n    statusRender = function(status) {\n        if (status) {\n            return 'Already Priced';\n        } else {\n            return 'No Priced';\n        }\n    },\n    operRender = function() {\n        return <a href=\"javascript:;\">View</a>;\n    },\n    groupHeaderRender = function(record) {\n        return <div>{record.product[0].title}</div>;\n    },\n    rowSelection = {\n        onChange: function(selectedKeys) {\n            console.log(selectedKeys);\n        }\n    };\n\nclass App extends React.Component {\n    state = {\n        hasSelection: false\n    }\n\n    toggleGroupSelection = () => {\n        this.setState({\n            hasSelection: !this.state.hasSelection\n        });\n    }\n    render() {\n        return (\n            <div>\n                <p><Button onClick={this.toggleGroupSelection}>Toggle GroupHeader Selection</Button></p>\n                <Table dataSource={dataSource} rowSelection={rowSelection}>\n                    <Table.GroupHeader cell={groupHeaderRender} hasChildrenSelection={this.state.hasSelection}/>\n                    <Table.GroupFooter cell={groupHeaderRender}/>\n                    <Table.Column cell={productRender} title=\"Product Details\" dataIndex=\"product\"/>\n                    <Table.Column cell={priceRender} title=\"Price\" dataIndex=\"price\"  width={120}/>\n                    <Table.Column cell={statusRender} title=\"Status\" dataIndex=\"status\" width={100}/>\n                    <Table.Column cell={operRender} title=\"\" width={100}/>\n                </Table>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": ".media-side{\n    width:48px;\n    height:48px;\n    float:left;\n    margin-right:10px;\n}\n.media-content{\n    overflow: hidden;\n    vertical-align: top;\n}\n.media{\n    overflow: hidden;\n}\n",
        "body": "\n<p>分组列表展现</p>\n"
      },
      {
        "title": "锁列",
        "order": "14",
        "jsx": "import { Table, Button } from '@alifd/next';\n\nconst onRowClick = function(record, index, e) {\n        console.log(record, index, e);\n    },\n    dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 100; i++) {\n            result.push({\n                title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n    state = {\n        dataSource: [],\n        cols: [\n            <Table.Column title=\"Title\" dataIndex=\"title.name\" width={400} key=\"name1\" lock/>,\n            <Table.ColumnGroup title=\"abc\" key=\"name-group\">\n                <Table.Column title=\"Title\" dataIndex=\"title.name\" width={100} key=\"name2\"/>\n                <Table.Column title=\"Title\" dataIndex=\"title.name\" width={400} key=\"name3\"/>\n            </Table.ColumnGroup>,\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={500} key=\"time\"/>\n        ],\n        loading: true\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({\n                dataSource: dataSource(),\n                loading: false\n            });\n        }, 200);\n    }\n    reduceCol = () => {\n        this.setState({\n            cols: [ <Table.Column title=\"Title\" dataIndex=\"title.name\" width={400} key=\"name1\" lock/>,\n                <Table.Column title=\"Time\" dataIndex=\"time\" width={100} key=\"time\"/> ]\n        });\n    }\n    render() {\n        return (\n            <div>\n                <p><Button onClick={this.reduceCol}>Reduce Cols</Button></p>\n                <Table dataSource={this.state.dataSource} onRowClick={onRowClick} fixedHeader loading={this.state.loading}>\n                    <Table.Column title=\"Id-Id-Id-Id-Id-Id-Id-Id-Id-Id-Id-Id\" dataIndex=\"id\" lock width={140}/>\n                    {this.state.cols}\n                    <Table.Column cell={render} width={200}/>\n                </Table>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>演示表格锁列的功能</p>\n"
      },
      {
        "title": "混合模式",
        "order": "19",
        "jsx": "import { Table } from '@alifd/next';\n\nconst data = [{\n    key: 1,\n    name: 'a',\n    age: 32,\n    address: 'aa',\n    children: [{\n        key: 11,\n        name: 'b',\n        age: 33,\n        address: 'bb',\n    }, {\n        key: 12,\n        name: 'c',\n        age: 33,\n        address: 'cc',\n        children: [{\n            key: 121,\n            name: 'd',\n            age: 33,\n            address: 'dd',\n        }],\n    }, {\n        key: 13,\n        name: 'e',\n        age: 33,\n        address: 'ee',\n        children: [{\n            key: 131,\n            name: 'f',\n            age: 33,\n            address: 'ff',\n            children: [{\n                key: 1311,\n                name: 'g',\n                age: 33,\n                address: 'gg',\n            }, {\n                key: 1312,\n                name: 'h',\n                age: 33,\n                address: 'hh',\n            }],\n        }],\n    }],\n}, {\n    key: 2,\n    name: 'i',\n    age: 32,\n    address: 'ii',\n    children: []\n}];\n\nconst tableMixTree = (<Table dataSource={data} primaryKey=\"key\" isTree rowSelection={{onChange: () => {}}}>\n    <Table.Column title=\"Key\" dataIndex=\"key\"/>\n    <Table.Column title=\"Name\" dataIndex=\"name\"/>\n    <Table.Column title=\"Age\" dataIndex=\"age\" />\n    <Table.Column title=\"Address\" dataIndex=\"address\"/>\n</Table>);\n\nconst tableMixExpanded = (<Table dataSource={data}\n    primaryKey=\"key\"\n    expandedRowRender={(record) => record.address}\n    rowSelection={{onChange: () => {}}}>\n    <Table.Column title=\"Key\" dataIndex=\"key\"/>\n    <Table.Column title=\"Name\" dataIndex=\"name\"/>\n    <Table.Column title=\"Age\" dataIndex=\"age\" />\n    <Table.Column title=\"Address\" dataIndex=\"address\"/>\n</Table>);\n\nconst tableMixSelectionTreeLock = (<div style={{width: '500px'}}>\n    <Table dataSource={data} primaryKey=\"key\" rowSelection={{onChange: () => {}}} isTree>\n        <Table.Column title=\"Key\" dataIndex=\"key\" width={100}/>\n        <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100}/>\n        <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\"/>\n        <Table.Column title=\"Address\" dataIndex=\"address\" width={200}/>\n    </Table>\n</div>);\n\nconst tableMixLock = (<div style={{width: '500px'}}>\n    <Table dataSource={data} primaryKey=\"key\" rowSelection={{onChange: () => {}}}>\n        <Table.Column title=\"Key\" dataIndex=\"key\" width={100}/>\n        <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100}/>\n        <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\"/>\n        <Table.Column title=\"Address\" dataIndex=\"address\" width={200}/>\n    </Table>\n</div>);\n\nconst tableMixExpandedLock = (<div style={{width: '500px'}}>\n    <Table dataSource={data} primaryKey=\"key\" rowSelection={{onChange: () => {}}} expandedRowRender={(record) => record.address} expandedRowIndent={[3, 1]}>\n        <Table.Column title=\"Key\" dataIndex=\"key\" width={100}/>\n        <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100}/>\n        <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\"/>\n        <Table.Column title=\"Address\" dataIndex=\"address\" width={200}/>\n    </Table>\n</div>);\n\nconst tableMixTreeLock = (<div style={{width: '500px'}}>\n    <Table dataSource={data} primaryKey=\"key\" isTree>\n        <Table.Column title=\"Key\" dataIndex=\"key\" width={100}/>\n        <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100}/>\n        <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\"/>\n        <Table.Column title=\"Address\" dataIndex=\"address\" width={200}/>\n    </Table>\n</div>);\n\nReactDOM.render(<div className=\"mix-demo\">\n    <div className=\"row\">\n        <h4>tree & select</h4>\n        {tableMixTree}\n    </div>\n    <div className=\"row\">\n        <h4>extra & select</h4>\n        {tableMixExpanded}\n    </div>\n    <div className=\"row\">\n        <h4>tree & lock column & select</h4>\n        {tableMixSelectionTreeLock}\n    </div>\n    <div className=\"row\">\n        <h4>extra & lock column & select</h4>\n        {tableMixExpandedLock}\n    </div>\n    <div className=\"row\">\n        <h4>lock column & select</h4>\n        {tableMixLock}\n    </div>\n    <div className=\"row\">\n        <h4>tree & lock column</h4>\n        {tableMixTreeLock}\n    </div>\n</div>, mountNode);\n",
        "css": ".mix-demo .row {\n  margin-top:10px;\n}\n",
        "body": "\n<p>演示了tree模式和rowSelection模式混合</p>\n"
      },
      {
        "title": "多表头",
        "order": "12",
        "jsx": "import { Table, Button } from '@alifd/next';\n\nconst onRowClick = function(record, index, e) {\n        console.log(record, index, e);\n    },\n    dataSource = (j) => {\n        const result = [];\n        for (let i = 0; i < j; i++) {\n            result.push({\n                title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n\n    state = {\n        dataSource: dataSource(200)\n    }\n    onClick = () => {\n        this.setState({\n            dataSource: dataSource(4)\n        });\n    }\n    render() {\n        return (\n            <div>\n                <p><Button onClick={this.onClick}>Reduce count</Button></p>\n                <Table dataSource={this.state.dataSource} onRowClick={onRowClick} fixedHeader maxBodyHeight={400}>\n                    <Table.Column title=\"Title1\" dataIndex=\"id\" width={140}/>\n                    <Table.ColumnGroup title=\"Group2-7\">\n                        <Table.Column title=\"Title2\" dataIndex=\"id\" lock width={140}/>\n                        <Table.Column title=\"Title3\" dataIndex=\"title.name\" width={200}/>\n                        <Table.ColumnGroup title=\"Group4-7\">\n                            <Table.Column title=\"Title4\" dataIndex=\"title.name\" width={400}/>\n                            <Table.Column title=\"Title5\" dataIndex=\"title.name\" width={200}/>\n                            <Table.ColumnGroup title=\"Group6-7\">\n                                <Table.Column title=\"Title6\" dataIndex=\"title.name\" width={400}/>\n                                <Table.Column title=\"Title7\" dataIndex=\"title.name\" width={200}/>\n                            </Table.ColumnGroup>\n                        </Table.ColumnGroup>\n                    </Table.ColumnGroup>\n                    <Table.ColumnGroup>\n                        <Table.Column title=\"Time\" dataIndex=\"time\" width={500}/>\n                        <Table.Column cell={render} width={200} lock=\"right\"/>\n                    </Table.ColumnGroup>\n                </Table>\n            </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>多个表头</p>\n"
      },
      {
        "title": "分页",
        "order": "11",
        "jsx": "import { Table, Pagination } from '@alifd/next';\n\nconst dataSource = (j) => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: { name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible` },\n                id: 100306660940 + i + j,\n                time: 2000 + j\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a href=\"javascript:;\">Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource(5)\n        };\n    }\n\n    onChange = (currentPage) => {\n        this.setState({\n            loading: true\n        });\n        setTimeout(() => {\n            this.setState({\n                dataSource: dataSource(currentPage * 5),\n                loading: false\n            });\n        }, 200);\n    }\n    render() {\n        return (\n            <div>\n                <Table dataSource={this.state.dataSource}\n                    loading={this.state.loading}>\n                    <Table.Column title=\"Id1\" dataIndex=\"id\" width={140} />\n                    <Table.Column title=\"Time\" dataIndex=\"time\" width={500} />\n                    <Table.Column cell={render} width={200} />\n                </Table>\n                <Pagination onChange={this.onChange} className=\"page-demo\" />\n            </div>);\n    }\n}\nReactDOM.render(<App />, mountNode);\n",
        "css": ".page-demo {\n    margin-top:10px;\n}\n",
        "body": "\n<p>与分页结合</p>\n"
      },
      {
        "title": "重设列的尺寸",
        "order": "18",
        "jsx": "import { Table } from '@alifd/next';\n\nconst onChange = function(...args) {\n        console.log(...args);\n    },\n    dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: {\n                    name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                },\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    },\n    rowSelection = {\n        onChange: onChange,\n        getProps: (record) => {\n            return {\n                disabled: record.id === 100306660942\n            };\n        }\n    };\n\nclass App extends React.Component {\n    state = {\n        widths: {\n            id: 100,\n        }\n    }\n    onResizeChange = (dataIndex, value) => {\n        const {widths} = this.state;\n        widths[dataIndex] = widths[dataIndex] + value;\n        this.setState({\n            widths\n        });\n    }\n    render() {\n        return (<Table dataSource={dataSource()}\n            rowSelection={rowSelection} onResizeChange={this.onResizeChange}>\n            <Table.Column title=\"Id\" dataIndex=\"id\" resizable width={this.state.widths.id}/>\n            <Table.Column title=\"Title\" dataIndex=\"title.name\" width={400}/>\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={600}/>\n            <Table.Column cell={render} width={200}/>\n        </Table>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过onResizeChange来让列宽可以调整</p>\n"
      },
      {
        "title": "选择框属性",
        "order": "4",
        "jsx": "import { Table } from '@alifd/next';\n\nconst onChange = function(...args) {\n        console.log(...args);\n    },\n    dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: {\n                    name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                },\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    },\n    rowSelection = {\n        onChange: onChange,\n        getProps: (record) => {\n            return {\n                disabled: record.id === 100306660942\n            };\n        }\n    };\n\nReactDOM.render(<Table dataSource={dataSource()}\n    rowSelection={rowSelection}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Title\" dataIndex=\"title.name\"/>\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    <Table.Column cell={render} width={200}/>\n</Table>, mountNode);\n",
        "css": "",
        "body": "\n<p>通过 rowSelection.getProps 来控制选择框属性</p>\n"
      },
      {
        "title": "可选择",
        "order": "1",
        "jsx": "import { Table } from '@alifd/next';\n\nconst dataSource = () => {\n    const result = [];\n    for (let i = 0; i < 5; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: 100306660940 + i,\n            time: 2000 + i\n        });\n    }\n    return result;\n};\nconst render = (value, index, record) => {\n    return <a href=\"javascript:;\">Remove({record.id})</a>;\n};\nconst onChange = function(...args) {\n    console.log(args);\n};\n\nReactDOM.render(<Table dataSource={dataSource()} rowSelection={{onChange: onChange}}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    <Table.Column cell={render}/>\n</Table>, mountNode);\n",
        "css": "",
        "body": "\n<p>表格可选择功能</p>\n"
      },
      {
        "title": "样式",
        "order": "16",
        "jsx": "import { Table, Button } from '@alifd/next';\n\nconst dataSource = () => {\n        const result = [];\n        for (let i = 0; i < 5; i++) {\n            result.push({\n                title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n                id: 100306660940 + i,\n                time: 2000 + i\n            });\n        }\n        return result;\n    },\n    render = (value, index, record) => {\n        return <a>Remove({record.id})</a>;\n    };\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: dataSource(),\n            className: '',\n            align: 'left'\n        };\n    }\n    toggleZebra() {\n        this.setState({\n            isZebra: !this.state.isZebra\n        });\n    }\n    toggleBorder() {\n        this.setState({\n            hasBorder: !this.state.hasBorder\n        });\n    }\n    makeBeauty() {\n        this.setState({\n            className: 'beauty'\n        });\n    }\n    makeAlign() {\n        this.setState({\n            align: 'right'\n        });\n    }\n    render() {\n        return (<span>\n            <p>\n                <Button onClick={this.toggleZebra.bind(this)}> Toggle zebra </Button> &nbsp;\n                <Button onClick={this.toggleBorder.bind(this)}> Toggle border</Button> &nbsp;\n                <Button onClick={this.makeBeauty.bind(this)}> Make second column beauty </Button> &nbsp;\n                <Button onClick={this.makeAlign.bind(this)}> Make first column align right </Button> &nbsp;\n            </p>\n            <Table dataSource={this.state.dataSource}\n                isZebra={this.state.isZebra}\n                hasBorder={this.state.hasBorder}>\n                <Table.Column title=\"Id\" dataIndex=\"id\"  align={this.state.align}/>\n                <Table.Column title=\"Title\" dataIndex=\"title\" className={this.state.className}/>\n                <Table.Column title=\"Time\" dataIndex=\"time\"/>\n                <Table.Column cell={render} width={200}/>\n            </Table>\n        </span>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": ".beauty{\n  background: #f7f7f7;\n}\n",
        "body": "\n<p>自定义表格边框</p>\n"
      },
      {
        "title": "虚拟滚动",
        "order": "13",
        "jsx": "import { Table } from '@alifd/next';\n\nconst dataSource = (j) => {\n    const result = [];\n    for (let i = 0; i < j; i++) {\n        result.push({\n            title: {name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`},\n            id: `100306660940${i}`,\n            time: 2000 + i,\n            index: i\n        });\n    }\n    return result;\n};\nconst render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n};\n\nclass App extends React.Component {\n    state = {\n        scrollToRow: 20\n    }\n    onBodyScroll = (start) => {\n        this.setState({\n            scrollToRow: start\n        });\n    }\n    render() {\n        return (<Table dataSource={dataSource(1000)} maxBodyHeight={400} useVirtual scrollToRow={this.state.scrollToRow} onBodyScroll={this.onBodyScroll}>\n            <Table.Column title=\"Id1\" dataIndex=\"id\" width={100}/>\n            <Table.Column title=\"Index\" dataIndex=\"index\" width={200}/>\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={200}/>\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={200}/>\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={200} lock=\"right\"/>\n            <Table.Column cell={render} width={200} lock/>\n        </Table>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>useVirtual</code> 开启虚拟滚动，<code>scrollToRow</code> 滚动到指定列</p>\n"
      }
    ]
  },
  {
    "name": "Tag",
    "category": "Components",
    "title": "标签",
    "type": "展示",
    "importStatement": "import { Tag } from '@alifd/next';",
    "body": "\n## Guide\n\n标签用于标记事物的属性和维度，或者可以使用标签来对一组事物分类。\n\n### 何时使用\n\n-   用于标记事物的属性和维度。\n-   进行分类。\n\n### 使用注意点\n\n1.  虽然可以设置 `size` 属性取值 `large`，但该值只是为了兼容表单场景，实际取值时 `large` 等同于 `medium`。\n2.  不建议在 Tag 中使用大段文本。\n\n API\n\n### Tag\n\n| 参数          | 说明                                                                                  | 类型       | 默认值       |\n| ----------- | ----------------------------------------------------------------------------------- | -------- | --------- |\n| size        | 标签的尺寸（large 尺寸为兼容表单场景 large = medium）<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum     | 'medium'  |\n| type        | 标签的类型<br><br>**可选值**:<br>'normal', 'primary'                                        | Enum     | 'normal'  |\n| animation   | 是否开启动效                                                                              | Boolean  | false     |\n| afterAppear | 标签出现动画结束后执行的回调<br><br>**签名**:<br>Function() => void                                 | Function | func.noop |\n| onClick     | 点击回调<br><br>**签名**:<br>Function() => void                                           | Function | func.noop |\n\n### Tag.Closeable\n\n| 参数         | 说明                                                                                                                                                                           | 类型       | 默认值 |\n| ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | --- |\n| closeArea  | closeable 标签的 onClose 响应区域, tag: 标签体, tail(默认): 关闭按钮<br><br>**可选值**:<br>'tag', 'tail'                                                                                        | Enum     | -   |\n| size       | 标签的尺寸（large 尺寸为兼容表单场景 large = medium）<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                          | Enum     | -   |\n| onClose    | 点击关闭按钮时的回调<br><br>**签名**:<br>Function(from: String) => Boolean<br>**参数**:<br>_from_: {String} 事件来源, tag: 标签体点击, tail: 关闭按钮点击<br>**返回值**:<br>{Boolean} true则关闭, false阻止关闭<br> | Function | -   |\n| afterClose | 标签关闭后执行的回调<br><br>**签名**:<br>Function() => void                                                                                                                              | Function | -   |\n| onClick    | 点击回调<br><br>**签名**:<br>Function() => void                                                                                                                                    | Function | -   |\n\n### Tag.Selectable\n\n| 参数             | 说明                                                                                                                                           | 类型       | 默认值       |\n| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------- | -------- | --------- |\n| checked        | 标签是否被选中，受控用法<br>tag checked or not, a controlled way                                                                                         | Boolean  | -         |\n| defaultChecked | 标签是否默认被选中，非受控用法<br>tag checked or not by default, a uncontrolled way                                                                         | Boolean  | -         |\n| onChange       | 选中状态变化时触发的事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>_checked_: {Boolean} 是否选中<br>_e_: {Event} Dom 事件对象 | Function | func.noop |\n| disabled       | 标签是否被禁用                                                                                                                                      | Boolean  | -         |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本用法",
        "order": "0",
        "jsx": "import { Tag, Icon } from '@alifd/next';\n\nconst {Group: TagGroup} = Tag;\n\nReactDOM.render(<div className=\"tag-list\">\n    <h4>large size</h4>\n    <TagGroup>\n        <Tag type=\"normal\" size=\"large\">Normal large Tag</Tag>\n        <Tag type=\"primary\" size=\"large\">Primary large Tag</Tag>\n        <Tag size=\"large\"><Icon type=\"smile\" /> Tag With Icon</Tag>\n    </TagGroup>\n\n    <h4>medium(default) size</h4>\n    <TagGroup>\n        <Tag type=\"normal\" size=\"medium\">Normal Tag</Tag>\n        <Tag type=\"primary\">Primary Tag</Tag>\n        <Tag><Icon type=\"smile\" /> Tag With Icon</Tag>\n    </TagGroup>\n\n    <h4>small size</h4>\n    <TagGroup>\n        <Tag type=\"normal\" size=\"small\">Normal Small Tag</Tag>\n        <Tag type=\"primary\" size=\"small\">Primary Small Tag</Tag>\n        <Tag size=\"small\"><Icon type=\"smile\" /> Tag With Icon</Tag>\n    </TagGroup>\n\n    <h4>link tag</h4>\n    <TagGroup>\n        <Tag type=\"normal\"><a href=\"//www.alibaba.com\" target=\"_blank\">normal Link Tag</a></Tag>\n        <Tag type=\"primary\"><a href=\"//www.alibaba.com\" target=\"_blank\">primary Link Tag</a></Tag>\n        <Tag size=\"small\"><a href=\"//www.alibaba.com\" target=\"_blank\"><Icon type=\"smile\" /> Link Tag With Icon</a></Tag>\n    </TagGroup>\n</div>,\nmountNode);\n",
        "css": "",
        "body": "\n<p>通过设置 <code>type</code> 属性来控制标签的展示类型，可选值包括：<code>normal</code>, <code>primary</code></p>\n<p>建议不要在标签中使用过长的文本，超出宽度的文本会使用 <code>...</code> 表示。</p>\n"
      },
      {
        "title": "可关闭标签",
        "order": "2",
        "jsx": "import { Tag } from '@alifd/next';\n\nconst {Group: TagGroup, Closeable: CloseableTag} = Tag;\n\nconst handler = from => {\n    console.log(`close from ${from}`);\n    return false;\n};\n\nclass Demo extends React.Component {\n    renderTagList (option) {\n        return [\n            <CloseableTag key={'tag-1'} type={option.type}>{option.type}</CloseableTag>,\n            <CloseableTag key={'tag-2'} type={option.type} disabled>{option.type} {' disabled '}</CloseableTag>\n        ];\n    }\n\n    renderCloseAreaTags () {\n        return ['tag', 'tail'].reduce((prev, curr) => prev.concat([\n            <CloseableTag key={`tag-${curr}-1`} closeArea={curr}>closeArea {curr}</CloseableTag>,\n            <CloseableTag key={`tag-${curr}-2`} type=\"primary\" closeArea={curr}>closeArea {curr}</CloseableTag>,\n        ]), []);\n    }\n    render() {\n        return (\n            <div className=\"tag-list\">\n                <h4>type: 'normal'</h4>\n                <TagGroup>{this.renderTagList({type: 'normal'})}</TagGroup>\n                <h4>type: 'primary'</h4>\n                <TagGroup>{this.renderTagList({type: 'primary'})}</TagGroup>\n                <h4>closeArea: ['tag', 'tail']</h4>\n                <TagGroup>\n                    {this.renderCloseAreaTags()}\n                </TagGroup>\n                <h4>close handler</h4>\n                <TagGroup>\n                    <CloseableTag onClose={() => true}> onClose allow close</CloseableTag>\n                    <CloseableTag onClose={() => false}> onClose prevent close</CloseableTag>\n                    <CloseableTag onClose={handler}> onClose from </CloseableTag>\n                    <CloseableTag afterClose={() => console.log('after close')}>after Close</CloseableTag>\n                </TagGroup>\n                <h4>closeable link tag</h4>\n                <TagGroup>\n                    <CloseableTag type=\"primary\"><a href=\"//www.alibaba.com\" target=\"_blank\">Primary Link Tag</a></CloseableTag>\n                    <CloseableTag type=\"normal\"><a href=\"//www.alibaba.com\" target=\"_blank\">normal Link Tag</a></CloseableTag>\n                </TagGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p><code>Tag.Closeable</code> 可以用于一些轻量的需要选中状态的场景。\n特别注意: closeArea=tail 以及在<code>Tag.Closeable</code>中放入a标签 都与无障碍要求不符,请谨慎使用</p>\n"
      },
      {
        "title": "可选中标签",
        "order": "1",
        "jsx": "import { Tag } from '@alifd/next';\n\nconst {Group: TagGroup, Selectable: SelectableTag} = Tag;\nconst dataSource = ['selectable tag', 'I like orange', 'small tag', 'disabled', 'disabled & checked'];\n\nclass Demo extends React.Component {\n    state = {\n        value: ['I like orange', 'disabled & checked']\n    };\n\n    handleChange(name, checked) {\n        const {value} = this.state;\n        const next = checked ? [...value, name] : value.filter(n => n !== name);\n\n        this.setState({value: next});\n    }\n\n    renderTagList(props) {\n        const {value} = this.state;\n\n        return dataSource.map((name, i) => (\n            <SelectableTag key={name}\n                checked={value.indexOf(name) > -1}\n                disabled={i > 2}\n                size={i === 2 ? 'small' : undefined}\n                onChange={this.handleChange.bind(this, name)}\n                {...props}>{name}</SelectableTag>\n        ));\n    }\n\n    render() {\n        return (\n            <div className=\"tag-list\">\n                <h4>type: 'default'</h4>\n                <TagGroup>{this.renderTagList({type: 'normal'})}</TagGroup>\n                <h4>type: 'primary'</h4>\n                <TagGroup>{this.renderTagList({type: 'primary'})}</TagGroup>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p><code>Tag.Selectable</code> 可以用于一些轻量的需要选中状态的场景，可作为 checkbox 使用。</p>\n<p>该组件提供了受控和非受控两种用法，但强烈建议以受控方式使用。</p>\n<p>SelectableTag 继承自 Tag，所以类型(type)、大小(size)、动效(animation)等参数的用法与 Tag 保持一致。</p>\n"
      }
    ]
  },
  {
    "name": "TimePicker",
    "category": "Components",
    "title": "时间选择框",
    "type": "表单",
    "importStatement": "import { TimePicker } from '@alifd/next';",
    "body": "\n## Guide\n\n### 何时使用\n\n当用户需要输入一个时间，可以点击输入框，在弹出的时间选择面板上操作。时间选择面板仅支持 24 小时制。`format` 支持的时间格式如下：\n\n| 格式     | 例子      | 说明       |\n| ------ | ------- | -------- |\n| `H HH` | `0..23` | 时，24 小时制 |\n| `m mm` | `0..59` | 分        |\n| `s ss` | `0..59` | 秒        |\n\n组件默认使用 moment 实例作为输入输出值，推荐使用结合 moment 的方式使用组件。此外，组件也支持传入时间字符串的方式，例如直接传入 \"12:00:00\"。用户传入什么类型的 value/defaultValue 值，就会在 onChange 中返回相应的类型。\n\n API\n\n### TimePicker\n\n| 参数               | 说明                                                                                                                                                                | 类型        | 默认值        |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ---------- |\n| label            | 按钮的文案                                                                                                                                                             | ReactNode | -          |\n| size             | 时间选择框的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                            | Enum      | 'medium'   |\n| state            | 输入框状态<br><br>**可选值**:<br>'error', 'success'                                                                                                                       | Enum      | -          |\n| placeholder      | 输入框提示                                                                                                                                                             | String    | -          |\n| value            | 时间值（moment 对象或时间字符串，受控状态使用）                                                                                                                                       | custom    | -          |\n| defaultValue     | 时间初值（moment 对象或时间字符串，非受控状态使用）                                                                                                                                     | custom    | -          |\n| hasClear         | 是否允许清空时间                                                                                                                                                          | Boolean   | true       |\n| format           | 时间的格式<br><https://momentjs.com/docs/#/parsing/string-format/>                                                                                                     | String    | 'HH:mm:ss' |\n| hourStep         | 小时选项步长                                                                                                                                                            | Number    | -          |\n| minuteStep       | 分钟选项步长                                                                                                                                                            | Number    | -          |\n| secondStep       | 秒钟选项步长                                                                                                                                                            | Number    | -          |\n| disabledHours    | 禁用小时函数<br><br>**签名**:<br>Function(index: Number) => Boolean<br>**参数**:<br>_index_: {Number} 时 0 - 23<br>**返回值**:<br>{Boolean} 是否禁用<br>                            | Function  | -          |\n| disabledMinutes  | 禁用分钟函数<br><br>**签名**:<br>Function(index: Number) => Boolean<br>**参数**:<br>_index_: {Number} 分 0 - 59<br>**返回值**:<br>{Boolean} 是否禁用<br>                            | Function  | -          |\n| disabledSeconds  | 禁用秒钟函数<br><br>**签名**:<br>Function(index: Number) => Boolean<br>**参数**:<br>_index_: {Number} 秒 0 - 59<br>**返回值**:<br>{Boolean} 是否禁用<br>                            | Function  | -          |\n| visible          | 弹层是否显示（受控）                                                                                                                                                        | Boolean   | -          |\n| defaultVisible   | 弹层默认是否显示（非受控）                                                                                                                                                     | Boolean   | -          |\n| popupContainer   | 弹层容器<br><br>**签名**:<br>Function(target: Object) => ReactNode<br>**参数**:<br>_target_: {Object} 目标节点<br>**返回值**:<br>{ReactNode} 容器节点<br>                            | Function  | -          |\n| popupAlign       | 弹层对齐方式, 详情见Overlay 文档                                                                                                                                             | String    | 'tl tl'    |\n| popupTriggerType | 弹层触发方式<br><br>**可选值**:<br>'click', 'hover'                                                                                                                        | Enum      | 'click'    |\n| onVisibleChange  | 弹层展示状态变化时的回调<br><br>**签名**:<br>Function(visible: Boolean, reason: String) => void<br>**参数**:<br>_visible_: {Boolean} 弹层是否隐藏和显示<br>_reason_: {String} 触发弹层显示和隐藏的来源 | Function  | func.noop  |\n| popupStyle       | 弹层自定义样式                                                                                                                                                           | Object    | -          |\n| popupClassName   | 弹层自定义样式类                                                                                                                                                          | String    | -          |\n| popupProps       | 弹层属性                                                                                                                                                              | Object    | -          |\n| disabled         | 是否禁用                                                                                                                                                              | Boolean   | false      |\n| onChange         | 时间值改变时的回调<br><br>**签名**:<br>Function(value: Object/String) => void<br>**参数**:<br>_value_: {Object/String} 时间对象或时间字符串                                              | Function  | func.noop  |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { TimePicker } from '@alifd/next';\n\nReactDOM.render(<TimePicker onChange={(val) => console.log(val)} />, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的用法。</p>\n"
      },
      {
        "title": "默认值",
        "order": "1",
        "jsx": "import { TimePicker } from '@alifd/next';\nimport moment from 'moment';\n\nconst defaultVal = moment('12:00:00', 'HH:mm:ss', true);\n\nReactDOM.render(<div>\n    <TimePicker defaultValue={defaultVal} onChange={(val) => console.log(val)} /><br /><br />\n    <TimePicker defaultValue=\"12:00:00\" onChange={(val) => console.log(val)} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 <code>defaultValue</code> 传入默认时间值，并且可以通过选择改变该值。<code>onChange</code> 回调参数的值的类型取决于 <code>defaultValue</code> 的类型。</p>\n"
      },
      {
        "title": "禁用时分秒",
        "order": "3",
        "jsx": "import { TimePicker } from '@alifd/next';\n\nconst disabledHours = [1, 2, 3, 4, 5];\nconst disabledMinutes = [10, 20, 30, 40, 50];\nconst disabledSeconds = [10, 20, 30, 40, 50];\n\nconst disabledItems = (list) => (index) => {\n    return list.indexOf(index) >= 0;\n};\n\nReactDOM.render(<div>\n    <p>Disable TimePicker</p>\n    <TimePicker disabled />\n    <p>Disable Hours/Minutes/Seconds</p>\n    <TimePicker disabledHours={disabledItems(disabledHours)} disabledMinutes={disabledItems(disabledMinutes)} disabledSeconds={disabledItems(disabledSeconds)} />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>禁用全部和禁用部分选择项</p>\n"
      },
      {
        "title": "结合 Field 使用",
        "order": "6",
        "jsx": "import { TimePicker, Field, Button } from '@alifd/next';\nimport moment from 'moment';\n\nclass Demo  extends React.Component {\n    field = new Field(this);\n\n    onClick = () => {\n        const value = this.field.getValue('time-picker');\n        console.log(value.format('HH:mm:ss'));\n    }\n\n    render() {\n        const { init } = this.field;\n\n        const props = init('time-picker', {\n            rules: [\n                { required: true, message: 'Time Required' }\n            ],\n            initValue: moment('00:00:00', 'HH:mm:ss', true),\n        });\n\n        return (<div>\n            <TimePicker {...props} /> <br /><br />\n            <Button onClick={this.onClick}>Print Value in Console</Button>\n        </div>);\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>配合 Field 使用</p>\n"
      },
      {
        "title": "时间格式",
        "order": "4",
        "jsx": "import { TimePicker } from '@alifd/next';\n\nReactDOM.render(<div>\n    <p>Hide seconds</p>\n    <TimePicker format=\"HH:mm\" />\n    <p>Hide hours</p>\n    <TimePicker format=\"mm:ss\" />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 <code>format</code> 属性格式化时间值，此外该属性还会影响到时间列的展示。</p>\n"
      },
      {
        "title": "尺寸",
        "order": "1",
        "jsx": "import { TimePicker } from '@alifd/next';\n\n\nReactDOM.render(<div>\n    <TimePicker size=\"large\" />&nbsp;&nbsp;\n    <TimePicker />&nbsp;&nbsp;\n    <TimePicker size=\"small\" />\n</div>, mountNode);\n",
        "css": "",
        "body": "\n<p>TimePicker 使用和 Input 组件相同的输入框尺寸，可以通过 <code>size</code> 属性进行设置。</p>\n"
      },
      {
        "title": "步长",
        "order": "5",
        "jsx": "import { TimePicker } from '@alifd/next';\n\nReactDOM.render(<TimePicker onChange={(val) => console.log(val.format('HH:mm:ss'))} hourStep={2} minuteStep={5} secondStep={5} />, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过 <code>hourStep</code>, <code>minuteStep</code>, <code>secondStep</code> 分别设置时分秒的选项间隔。</p>\n"
      },
      {
        "title": "受控",
        "order": "2",
        "jsx": "import { TimePicker } from '@alifd/next';\nimport moment from 'moment';\n\nclass ControlledTimePicker extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            value: moment('12:00:00', 'HH:mm:ss', true),\n        };\n    }\n\n    onSelect = (value) => {\n        this.setState({ value });\n        this.props.onChange(value);\n    }\n\n    render() {\n        return <TimePicker value={this.state.value} onChange={this.onSelect} />;\n    }\n}\n\nReactDOM.render(<ControlledTimePicker onChange={(val) => console.log(val.format('HH:mm:ss'))} />, mountNode);\n",
        "css": "",
        "body": "\n<p>通过 <code>value</code> 和 <code>onChange</code> 实现受控，仅支持通过选择实现受控。</p>\n"
      }
    ]
  },
  {
    "name": "Timeline",
    "category": "Components",
    "title": "时间轴",
    "type": "展示",
    "importStatement": "import { Timeline } from '@alifd/next';",
    "body": "\n## Guide\n\n垂直展示的时间流信息。\n\n### 何时使用\n\n-   当有一系列信息需要从上至下按时间排列时。\n-   需要有一条时间轴进行视觉上的串联时。\n\n API\n\n### Timeline\n\n| 参数   | 说明                                                                  | 类型    | 默认值 |\n| ---- | ------------------------------------------------------------------- | ----- | --- |\n| fold | 自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]` | Array | \\[] |\n\n### Timeline.Item\n\n| 参数        | 说明                                                            | 类型        | 默认值    |\n| --------- | ------------------------------------------------------------- | --------- | ------ |\n| state     | 节点状态<br><br>**可选值**:<br>'done', 'process', 'error', 'success' | Enum      | 'done' |\n| icon      | 图标                                                            | String    | -      |\n| dot       | 自定义时间轴节点                                                      | ReactNode | -      |\n| time      | 格式化后的时间                                                       | ReactNode | -      |\n| title     | 标题                                                            | ReactNode | -      |\n| timeLeft  | 左侧时间                                                          | ReactNode | -      |\n| content   | 右侧内容                                                          | ReactNode | -      |\n| animation | 动画                                                            | Boolean   | true   |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Timeline } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\nReactDOM.render(<Timeline>\n    <TimelineItem title=\"Receipt\" state=\"process\"/>\n    <TimelineItem title=\"Ship\" />\n    <TimelineItem title=\"Order\" />\n</Timeline>, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的用法。</p>\n"
      },
      {
        "title": "内容",
        "order": "2",
        "jsx": "import { Timeline } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\nReactDOM.render(<Timeline>\n    <TimelineItem title=\"Sign\" content=\"[Hangzhou] has received the sign, the signer is Alibaba Post Office, thank you for using STO, looking forward to serving you again\" time={'2016-06-10 10:30:00'} state=\"process\" />\n    <TimelineItem title=\"Delivery\" content=\"[Hangzhou]Express has reached Hangzhou Hangzhou Binjiang Company\" time={'2016-06-10 09:30:00'} />\n    <TimelineItem title=\"Delivery\" content=\"[Hangzhou] Zhejiang Hangzhou Binjiang Company dispatches members for you\" time={'2016-06-10 09:03:00'} />\n    <TimelineItem title=\"Transport\" content=\"[Hangzhou] Zhejiang Hangzhou Transshipment Center has been issued\" time={'2016-06-10 06:10:00'} />\n    <TimelineItem title=\"Transport\" content=\"[Dongguan City] Guangdong Dongguan Transshipment Center has been issued\" time={'2016-06-09 18:00:00'} />\n    <TimelineItem title=\"Processing\" content=\"[Dongguan City] Shentong Express Guangdong Fenggang Branch of Guangdong Province\" time={'2016-06-09 16:12:00'} />\n    <TimelineItem title=\"Processing\" content=\"[Dongguan City] The merchant is informing the express company to insert\" time={'2016-06-09 14:00:00'} />\n    <TimelineItem title=\"Processing\" content=\"[Dongguan City] Your order to be picked\" time={'2016-06-09 10:12:19'} />\n    <TimelineItem title=\"Processing\" content=\"[Dongguan] Your order starts processing\" time={'2016-06-09 10:01:09'} icon=\"atm\"/>\n</Timeline>, mountNode);\n",
        "css": "",
        "body": "\n<p>带内容的用法，分别添加title，content，icon的效果。</p>\n"
      },
      {
        "title": "自定义时间轴节点",
        "order": "4",
        "jsx": "import { Timeline, Icon } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\nReactDOM.render(<Timeline>\n    <TimelineItem title=\"Receipt\" state=\"process\" icon=\"smile\"  time=\"2017-10-21\"/>\n    <TimelineItem title=\"Ship\" dot={<span  className=\"custom-node\"> 😂 </span>} state=\"success\" time=\"2017-10-22\"/>\n    <TimelineItem title=\"Order\" dot={<Icon type=\"success\" size=\"xl\" style={{ color: '#1DC11D' }}/>} content=\"Congratulations, successful orders!\" time=\"2017-10-23\"/>\n</Timeline>, mountNode);\n",
        "css": ".custom-node {\n    color: #1DC11D;\n    position: relative;\n    left: 3px;\n    font-size: 14px;\n}\n",
        "body": "\n<p>自定义时间轴节点。</p>\n"
      },
      {
        "title": "折叠",
        "order": "5",
        "jsx": "import { Timeline, Select } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            timelineAnimation: true\n        };\n    }\n\n    onTimelineAnimation = (value) => {\n        this.setState({ timelineAnimation: value });\n    }\n\n    render() {\n        return (<div>\n            <div className=\"custom-step-option\">\n                <Select placeholder=\"Whether to start animation\" onChange={this.onTimelineAnimation} className=\"custom-select\" defaultValue>\n                    {\n                        [true, false].map((item, index) => <Select.Option value={item} key={index}>{item ? 'Animation on' : 'Animation off'}</Select.Option>)\n                    }\n                </Select>\n            </div>\n            <Timeline animation={this.state.timelineAnimation} fold={[{ foldArea: [1, 2], foldShow: false }, { foldArea: [5], foldShow: false }]}>\n                <TimelineItem title=\"Sign\" content=\"[Hangzhou] has received the sign, the signer is Alibaba Post Office, thank you for using STO, looking forward to serving you again\" time={'2016-06-10 10:30:00'} state=\"process\" />\n                <TimelineItem title=\"Delivery\" content=\"[Hangzhou]Express has reached Hangzhou Hangzhou Binjiang Company\" time={'2016-06-10 09:30:00'} />\n                <TimelineItem title=\"Delivery\" content=\"[Hangzhou] Zhejiang Hangzhou Binjiang Company dispatches members for you\" time={'2016-06-10 09:03:00'} />\n                <TimelineItem title=\"Transport\" content=\"[Hangzhou] Zhejiang Hangzhou Transshipment Center has been issued\" time={'2016-06-10 06:10:00'} />\n                <TimelineItem title=\"Transport\" content=\"[Dongguan City] Guangdong Dongguan Transshipment Center has been issued\" time={'2016-06-09 18:00:00'} />\n                <TimelineItem title=\"Processing\" content=\"[Dongguan City] Shentong Express Guangdong Fenggang Branch of Guangdong Province\" time={'2016-06-09 16:12:00'} />\n                <TimelineItem title=\"Processing\" content=\"[Dongguan City] The merchant is informing the express company to insert\" time={'2016-06-09 14:00:00'} />\n                <TimelineItem title=\"Processing\" content=\"[Dongguan City] Your order to be picked\" time={'2016-06-09 10:12:19'} />\n                <TimelineItem title=\"Processing\" content=\"[Dongguan] Your order starts processing\" time={'2016-06-09 10:01:09'} />\n            </Timeline>\n        </div>);\n    }\n}\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".custom-step-option {\n    margin-bottom: 20px;\n}\n\n",
        "body": "\n<p>自定义折叠区域。</p>\n"
      },
      {
        "title": "状态",
        "order": "1",
        "jsx": "import { Timeline } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\nReactDOM.render(<Timeline>\n    <TimelineItem title=\"Cloudy\" time={'2016-06-10 10:30:00'} state=\"process\"/>\n    <TimelineItem title=\"Sunny\" time={'2016-06-11'} state=\"success\"/>\n    <TimelineItem title=\"Rainy\" time={'2016-06-09'} state=\"error\"/>\n</Timeline>, mountNode);\n",
        "css": "",
        "body": "\n<p>设置每个节点不同的状态。</p>\n"
      },
      {
        "title": "时间在左",
        "order": "3",
        "jsx": "import { Timeline } from '@alifd/next';\n\nconst TimelineItem = Timeline.Item;\nReactDOM.render(<Timeline>\n    <TimelineItem title=\"Sign\" state=\"process\" timeLeft=\"2016-10-03\" />\n    <TimelineItem title=\"Ship\" timeLeft=\"2016-10-02\" />\n    <TimelineItem title=\"Order\" timeLeft=\"2016-10-01\" />\n</Timeline>, mountNode);\n",
        "css": "",
        "body": "\n<p>设置时间轴左边的内容。</p>\n"
      }
    ]
  },
  {
    "name": "Transfer",
    "category": "Components",
    "title": "穿梭框",
    "type": "基本",
    "importStatement": "import { Transfer } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n用直观的方式在两栏中移动元素，完成选择行为。\n\n API\n\n### Transfer\n\n| 参数                  | 说明                                                                                                                                                                                                                                                                                                                                                                                           | 类型                  | 默认值                                                                   |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- | --------------------------------------------------------------------- |\n| mode                | 移动选项模式<br><br>**可选值**:<br>'normal', 'simple'                                                                                                                                                                                                                                                                                                                                                 | Enum                | 'normal'                                                              |\n| dataSource          | 数据源                                                                                                                                                                                                                                                                                                                                                                                          | Array&lt;Object>    | \\[]                                                                   |\n| value               | （用于受控）当前值                                                                                                                                                                                                                                                                                                                                                                                    | Array&lt;String>    | -                                                                     |\n| defaultValue        | （用于非受控）初始值                                                                                                                                                                                                                                                                                                                                                                                   | Array&lt;String>    | \\[]                                                                   |\n| onChange            | 值发生改变的时候触发的回调函数<br><br>**签名**:<br>Function(value: Array, data: Array, extra: Object) => void<br>**参数**:<br>_value_: {Array} 右面板值<br>_data_: {Array} 右面板数据<br>_extra_: {Object} 额外参数<br>_extra.leftValue_: {Array} 左面板值<br>_extra.leftData_: {Array} 左面板数据<br>_extra.movedValue_: {Array} 发生移动的值<br>_extra.movedData_: {Object} 发生移动的数据<br>_extra.direction_: {String} 移动的方向，值为'left'或'right' | Function            | -                                                                     |\n| disabled            | 是否禁用                                                                                                                                                                                                                                                                                                                                                                                         | Boolean             | false                                                                 |\n| leftDisabled        | 是否禁用左侧面板                                                                                                                                                                                                                                                                                                                                                                                     | Boolean             | false                                                                 |\n| rightDisabled       | 是否禁用右侧面板                                                                                                                                                                                                                                                                                                                                                                                     | Boolean             | false                                                                 |\n| itemRender          | 列表项渲染函数<br><br>**签名**:<br>Function(data: Object) => ReactNode<br>**参数**:<br>_data_: {Object} 数据<br>**返回值**:<br>{ReactNode} 列表项内容<br>                                                                                                                                                                                                                                                         | Function            | data => data.label                                                    |\n| showSearch          | 是否显示搜索框                                                                                                                                                                                                                                                                                                                                                                                      | Boolean             | false                                                                 |\n| filter              | 自定义搜索函数<br><br>**签名**:<br>Function(searchedValue: String, data: Object) => Boolean<br>**参数**:<br>_searchedValue_: {String} 搜索的内容<br>_data_: {Object} 数据<br>**返回值**:<br>{Boolean} 是否匹配到<br>                                                                                                                                                                                                   | Function            | 根据 label 属性匹配                                                         |\n| onSearch            | 搜索框输入时触发的回调函数<br><br>**签名**:<br>Function(searchedValue: String, position: String) => void<br>**参数**:<br>_searchedValue_: {String} 搜索的内容<br>_position_: {String} 搜索面板的位置                                                                                                                                                                                                                      | Function            | () => {}                                                              |\n| searchPlaceholder   | 搜索框占位符                                                                                                                                                                                                                                                                                                                                                                                       | String              | -                                                                     |\n| notFoundContent     | 列表为空显示内容                                                                                                                                                                                                                                                                                                                                                                                     | ReactNode           | 'Not Found'                                                           |\n| titles              | 左右面板标题                                                                                                                                                                                                                                                                                                                                                                                       | Array&lt;ReactNode> | \\[]                                                                   |\n| operations          | 向右向左移动按钮显示内容                                                                                                                                                                                                                                                                                                                                                                                 | Array&lt;ReactNode> | [&lt;Icon type=\"arrow-right\" /&gt;, &lt;Icon type=\"arrow-left\" /&gt;] |\n| defaultLeftChecked  | 左面板默认选中值                                                                                                                                                                                                                                                                                                                                                                                     | Array&lt;String>    | \\[]                                                                   |\n| defaultRightChecked | 右面板默认选中值                                                                                                                                                                                                                                                                                                                                                                                     | Array&lt;String>    | \\[]                                                                   |\n| listClassName       | 左右面板列表自定义样式类名                                                                                                                                                                                                                                                                                                                                                                                | String              | -                                                                     |\n| listStyle           | 左右面板列表自定义样式对象                                                                                                                                                                                                                                                                                                                                                                                | Object              | -                                                                     |\n| sortable            | 是否允许拖拽排序                                                                                                                                                                                                                                                                                                                                                                                     | Boolean             | false                                                                 |\n| onSort              | 拖拽排序时触发的回调函数<br><br>**签名**:<br>Function(value: Array, position: String) => void<br>**参数**:<br>_value_: {Array} 排序后的值<br>_position_: {String} 拖拽的面板位置，值为：left 或 right                                                                                                                                                                                                                         | Function            | () => {}                                                              |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return (\n            <Transfer defaultValue={['3']} dataSource={dataSource} defaultLeftChecked={['1']} onChange={this.handleChange} titles={['Title', 'Title']} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的用法。</p>\n"
      },
      {
        "title": "受控",
        "order": "1",
        "jsx": "import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ['3']\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return <Transfer value={this.state.value} dataSource={dataSource} defaultLeftChecked={['1']} onChange={this.handleChange} titles={['Title', 'Title']} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示受控的用法。</p>\n"
      },
      {
        "title": "自定义",
        "order": "5",
        "jsx": "import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: i % 3 === 0 ? `content${i}contentcontentcontentcontentcontent` : `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return <Transfer defaultValue={['3']} dataSource={dataSource} listStyle={{ width: '200px', height: '192px' }} defaultLeftChecked={['1']} onChange={this.handleChange} titles={['Source', 'Target']} operations={['>>', '<<']} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示自定义样式的用法。</p>\n"
      },
      {
        "title": "搜索",
        "order": "3",
        "jsx": "import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return <Transfer showSearch defaultValue={['3']} dataSource={dataSource} defaultLeftChecked={['1']} onChange={this.handleChange} titles={['Searchable', 'Searchable']} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示搜索的用法。</p>\n"
      },
      {
        "title": "简单模式",
        "order": "2",
        "jsx": "import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data, extra) {\n        console.log(value, data, extra);\n    }\n\n    render() {\n        return <Transfer mode=\"simple\" defaultValue={['3']} dataSource={dataSource} defaultLeftChecked={['1']} onChange={this.handleChange} titles={['Simple Mode', 'Simple Mode']} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>通过设置 mode 为 &#39;simple&#39;，可以开启简单模式，点击选项即移动。</p>\n"
      },
      {
        "title": "拖拽排序",
        "order": "4",
        "jsx": "import { Transfer } from '@alifd/next';\n\nconst dataSource = (() => {\n    const dataSource = [];\n\n    for (let i = 0; i < 10; i++) {\n        dataSource.push({\n            label: `content${i}`,\n            value: `${i}`,\n            disabled: i % 4 === 0\n        });\n    }\n\n    return dataSource;\n})();\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSort = this.handleSort.bind(this);\n    }\n\n    handleSort(value, position) {\n        console.log(value, position);\n    }\n\n    render() {\n        return <Transfer sortable defaultValue={['3']} dataSource={dataSource} onSort={this.handleSort} titles={['Sortable', 'Sortable']} />;\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>设置 \bsortable 属性为 true 后，可拖拽排序左右面板。</p>\n"
      }
    ]
  },
  {
    "name": "TreeSelect",
    "category": "Components",
    "title": "树型选择控件",
    "type": "基本",
    "importStatement": "import { TreeSelect } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n类似 Select 的选择控件，可选择的数据结构是一个树形结构时，可以使用 TreeSelect，例如公司层级、学科系统、分类目录等等。\n\n API\n\n### TreeSelect\n\n| 参数                      | 说明                                                                                                                                                                                                                                                       | 类型                      | 默认值         |\n| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------- | ----------- |\n| children                | 树节点                                                                                                                                                                                                                                                      | ReactNode               | -           |\n| size                    | 选择框大小<br><br>**可选值**:<br>'small', 'medium', 'large'                                                                                                                                                                                                      | Enum                    | 'medium'    |\n| placeholder             | 选择框占位符                                                                                                                                                                                                                                                   | String                  | -           |\n| disabled                | 是否禁用                                                                                                                                                                                                                                                     | Boolean                 | false       |\n| hasArrow                | 是否有下拉箭头                                                                                                                                                                                                                                                  | Boolean                 | true        |\n| hasBorder               | 是否有边框                                                                                                                                                                                                                                                    | Boolean                 | true        |\n| hasClear                | 是否有清空按钮                                                                                                                                                                                                                                                  | Boolean                 | false       |\n| label                   | 自定义内联 label                                                                                                                                                                                                                                              | ReactNode               | -           |\n| readOnly                | 是否只读，只读模式下可以展开弹层但不能选择                                                                                                                                                                                                                                    | Boolean                 | -           |\n| autoWidth               | 下拉框是否与选择器对齐                                                                                                                                                                                                                                              | Boolean                 | true        |\n| dataSource              | 数据源，该属性优先级高于 children                                                                                                                                                                                                                                    | Array&lt;Object>        | -           |\n| value                   | （受控）当前值                                                                                                                                                                                                                                                  | String/Array&lt;String> | -           |\n| defaultValue            | （非受控）默认值                                                                                                                                                                                                                                                 | String/Array&lt;String> | null        |\n| onChange                | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array) => void<br>**参数**:<br>_value_: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>_data_: {Object/Array} 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点 | Function                | () => {}    |\n| showSearch              | 是否显示搜索框                                                                                                                                                                                                                                                  | Boolean                 | false       |\n| onSearch                | 在搜索框中输入时触发的回调函数<br><br>**签名**:<br>Function(keyword: String) => void<br>**参数**:<br>_keyword_: {String} 输入的关键字                                                                                                                                             | Function                | () => {}    |\n| notFoundContent         | 无数据时显示内容                                                                                                                                                                                                                                                 | ReactNode               | 'Not Found' |\n| multiple                | 是否支持多选                                                                                                                                                                                                                                                   | Boolean                 | false       |\n| treeCheckable           | 下拉框中的树是否支持勾选节点的复选框                                                                                                                                                                                                                                       | Boolean                 | false       |\n| treeCheckStrictly       | 下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）                                                                                                                                                                                                                        | Boolean                 | false       |\n| treeCheckedStrategy     | 定义选中时回填的方式<br><br>**可选值**:<br>'all'(返回所有选中的节点)<br>'parent'(父子节点都选中时只返回父节点)<br>'child'(父子节点都选中时只返回子节点)                                                                                                                                                    | Enum                    | 'parent'    |\n| treeDefaultExpandAll    | 下拉框中的树是否默认展开所有节点                                                                                                                                                                                                                                         | Boolean                 | false       |\n| treeDefaultExpandedKeys | 下拉框中的树默认展开节点key的数组                                                                                                                                                                                                                                       | Array&lt;String>        | \\[]         |\n| treeLoadData            | 下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](https://fusion.design/component/tree)<br><br>**签名**:<br>Function(node: ReactElement) => void<br>**参数**:<br>_node_: {ReactElement} 被点击展开的节点                                                                        | Function                | -           |\n| treeProps               | 透传到 Tree 的属性对象                                                                                                                                                                                                                                           | Object                  | {}          |\n| defaultVisible          | 初始下拉框是否显示                                                                                                                                                                                                                                                | Boolean                 | false       |\n| visible                 | 当前下拉框是否显示                                                                                                                                                                                                                                                | Boolean                 | -           |\n| onVisibleChange         | 下拉框显示或关闭时触发事件的回调函数<br><br>**签名**:<br>Function(visible: Boolean, type: String) => void<br>**参数**:<br>_visible_: {Boolean} 是否显示<br>_type_: {String} 触发显示关闭的操作类型                                                                                            | Function                | () => {}    |\n| popupStyle              | 下拉框自定义样式对象                                                                                                                                                                                                                                               | Object                  | -           |\n| popupClassName          | 下拉框样式自定义类名                                                                                                                                                                                                                                               | String                  | -           |\n| popupContainer          | 下拉框挂载的容器节点                                                                                                                                                                                                                                               | String/Function         | -           |\n| popupProps              | 透传到 Popup 的属性对象                                                                                                                                                                                                                                          | Object                  | -           |\n\n<!-- api-extra-start -->\n\n### TreeSelect.Node\n\n| 参数               | 说明                              | 类型        | 默认值   |\n| ---------------- | ------------------------------- | --------- | ----- |\n| children         | 树节点                             | ReactNode | -     |\n| label            | 节点文本内容                          | ReactNode | '---' |\n| selectable       | 单独设置是否支持选中，覆盖 Tree 的 selectable | Boolean   | -     |\n| checkable        | 单独设置是否出现复选框，覆盖 Tree 的 checkable | Boolean   | -     |\n| editable         | 单独设置是否支持编辑，覆盖 Tree 的 editable   | Boolean   | -     |\n| draggable        | 单独设置是否支持拖拽，覆盖 Tree 的 draggable  | Boolean   | -     |\n| disabled         | 是否禁止节点响应                        | Boolean   | false |\n| checkboxDisabled | 是否禁止勾选节点复选框                     | Boolean   | false |\n| isLeaf           | 是否是叶子节点，设置loadData时生效           | Boolean   | false |\n\n### dataSource 数据结构\n\n```js\nconst dataSource = [{\n    label: '服装',\n    value: '1',\n    key: '1',\n    selectable: false,\n    children: [{\n        label: '男装',\n        value: '2',\n        key: '2',\n        children: [{\n            label: '外套',\n            value: '4',\n            key: '4',\n            disableCheckbox: true\n        }, {\n            label: '夹克',\n            value: '5',\n            key: '5',\n            disabled: true\n        }]\n    }, {\n        label: '女装',\n        value: '3',\n        key: '3',\n        children: [{\n            label: '裙子',\n            value: '6',\n            key: '6'\n        }]\n    }]\n}];\n```\n\n如果不传入 key，TreeSelect 会使用内部计算出来的位置字符串作为 key 值，如果你想指定诸如 treeDefaultExpandedKeys 这样的属性，请传入自定义的 key 值，让它和 value 是一个值，是一个很好的办法。\n\n<!-- api-extra-end -->\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { TreeSelect } from '@alifd/next';\n\nconst TreeNode = TreeSelect.Node;\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data) {\n        console.log(value, data);\n    }\n\n    render() {\n        return (\n            <TreeSelect treeDefaultExpandAll onChange={this.handleChange} style={{ width: 200 }}>\n                <TreeNode key=\"1\" value=\"1\" label=\"Component\">\n                    <TreeNode key=\"2\" value=\"2\" label=\"Form\">\n                        <TreeNode key=\"4\" value=\"4\" label=\"Input\" />\n                        <TreeNode key=\"5\" value=\"5\" label=\"Select\" disabled />\n                    </TreeNode>\n                    <TreeNode key=\"3\" value=\"3\" label=\"Display\">\n                        <TreeNode key=\"6\" value=\"6\" label=\"Table\" />\n                    </TreeNode>\n                </TreeNode>\n            </TreeSelect>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的单选用法。</p>\n"
      },
      {
        "title": "复选框多选",
        "order": "2",
        "jsx": "import { TreeSelect } from '@alifd/next';\n\nconst treeData = [{\n    label: 'Component',\n    value: '1',\n    children: [{\n        label: 'Form',\n        value: '2',\n        children: [{\n            label: 'Input',\n            value: '4'\n        }, {\n            label: 'Select',\n            value: '5'\n        }]\n    }, {\n        label: 'Display',\n        value: '3',\n        children: [{\n            label: 'Table',\n            value: '6'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data) {\n        console.log(value, data);\n    }\n\n    render() {\n        return (\n            <TreeSelect treeDefaultExpandAll treeCheckable dataSource={treeData} onChange={this.handleChange} style={{ width: 200 }} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示复选框多选的功能。</p>\n"
      },
      {
        "title": "受控",
        "order": "3",
        "jsx": "import { TreeSelect } from '@alifd/next';\n\nconst treeData = [{\n    label: 'Component',\n    value: '1',\n    children: [{\n        label: 'Form',\n        value: '2',\n        children: [{\n            label: 'Input',\n            value: '4'\n        }, {\n            label: 'Select',\n            value: '5'\n        }]\n    }, {\n        label: 'Display',\n        value: '3',\n        children: [{\n            label: 'Table',\n            value: '6'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ['4', '6']\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data) {\n        console.log(value, data);\n        this.setState({\n            value\n        });\n    }\n\n    render() {\n        return (\n            <TreeSelect treeDefaultExpandAll treeCheckable dataSource={treeData} value={this.state.value} onChange={this.handleChange} style={{ width: 200 }} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示树选择受控的用法。</p>\n"
      },
      {
        "title": "使用数据直接生成",
        "order": "1",
        "jsx": "import { TreeSelect } from '@alifd/next';\n\nconst treeData = [{\n    label: 'Component',\n    value: '1',\n    children: [{\n        label: 'Form',\n        value: '2',\n        children: [{\n            label: 'Input',\n            value: '4'\n        }, {\n            label: 'Select',\n            value: '5',\n            disabled: true\n        }]\n    }, {\n        label: 'Display',\n        value: '3',\n        children: [{\n            label: 'Table',\n            value: '6'\n        }]\n    }]\n}];\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data) {\n        console.log(value, data);\n    }\n\n    render() {\n        return (\n            <TreeSelect treeDefaultExpandAll dataSource={treeData} onChange={this.handleChange} style={{ width: 200 }} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 <code>dataSource</code> 生成树结构，除设置 label, value, key, children 属性外，还可传入 TreeNode 的其他属性，包括 selectable, disabled, checkboxDisabled, isLeaf，推荐使用 <code>dataSource</code> 而不是手动生成 <code>TreeNode</code> 的方式生成树，这样使用更简单，性能更好。</p>\n"
      },
      {
        "title": "搜索用法",
        "order": "4",
        "jsx": "import { TreeSelect } from '@alifd/next';\n\nconst treeData = [{\n    label: 'Component',\n    value: '1',\n    selectable: false,\n    children: [{\n        label: 'Form',\n        value: '2',\n        children: [{\n            label: 'Input',\n            value: '4'\n        }, {\n            label: 'Select',\n            value: '5',\n            disabled: true\n        }]\n    }, {\n        label: 'Display',\n        value: '3',\n        children: [{\n            label: 'Table',\n            value: '6'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ['4', '6']\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value, data) {\n        console.log(value, data);\n    }\n\n    render() {\n        return (\n            <TreeSelect treeDefaultExpandAll showSearch dataSource={treeData} onChange={this.handleChange} style={{ width: 200 }} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示树选择的搜索用法。</p>\n"
      }
    ]
  },
  {
    "name": "Tree",
    "category": "Components",
    "title": "树形控件",
    "type": "基本",
    "importStatement": "import { Tree } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用`树控件`可以完整展现其中的层级关系，并具有展开收起选择等交互功能。\n\n API\n\n### Tree\n\n| 参数                  | 说明                                                                                                                                                                                                                                                                                                                                                                                                               | 类型                      | 默认值        |\n| ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------- | ---------- |\n| children            | 树节点                                                                                                                                                                                                                                                                                                                                                                                                              | ReactNode               | -          |\n| dataSource          | 数据源，该属性优先级高于 children                                                                                                                                                                                                                                                                                                                                                                                            | Array                   | -          |\n| showLine            | 是否显示树的线                                                                                                                                                                                                                                                                                                                                                                                                          | Boolean                 | false      |\n| selectable          | 是否支持选中节点                                                                                                                                                                                                                                                                                                                                                                                                         | Boolean                 | true       |\n| selectedKeys        | （用于受控）当前选中节点 key 的数组                                                                                                                                                                                                                                                                                                                                                                                             | Array&lt;String>        | -          |\n| defaultSelectedKeys | （用于非受控）默认选中节点 key 的数组                                                                                                                                                                                                                                                                                                                                                                                            | Array&lt;String>        | \\[]        |\n| onSelect            | 选中或取消选中节点时触发的回调函数<br><br>**签名**:<br>Function(selectedKeys: Array, extra: Object) => void<br>**参数**:<br>_selectedKeys_: {Array} 选中节点key的数组<br>_extra_: {Object} 额外参数<br>_extra.selectedNodes_: {Array} 选中节点的数组<br>_extra.node_: {Object} 当前操作的节点<br>_extra.selected_: {Boolean} 当前操作是否是选中                                                                                                                         | Function                | () => {}   |\n| multiple            | 是否支持多选                                                                                                                                                                                                                                                                                                                                                                                                           | Boolean                 | false      |\n| checkable           | 是否支持勾选节点的复选框                                                                                                                                                                                                                                                                                                                                                                                                     | Boolean                 | false      |\n| checkedKeys         | （用于受控）当前勾选复选框节点 key 的数组或 `{checked: Array, indeterminate: Array}` 的对象                                                                                                                                                                                                                                                                                                                                            | Array&lt;String>/Object | -          |\n| defaultCheckedKeys  | （用于非受控）默认勾选复选框节点 key 的数组                                                                                                                                                                                                                                                                                                                                                                                         | Array&lt;String>        | \\[]        |\n| checkStrictly       | 勾选节点复选框是否完全受控（父子节点选中状态不再关联）                                                                                                                                                                                                                                                                                                                                                                                      | Boolean                 | false      |\n| checkedStrategy     | 定义选中时回填的方式<br><br>**可选值**:<br>'all'(返回所有选中的节点)<br>'parent'(父子节点都选中时只返回父节点)<br>'child'(父子节点都选中时只返回子节点)                                                                                                                                                                                                                                                                                                            | Enum                    | 'all'      |\n| onCheck             | 勾选或取消勾选复选框时触发的回调函数<br><br>**签名**:<br>Function(checkedKeys: Array, extra: Object) => void<br>**参数**:<br>_checkedKeys_: {Array} 勾选复选框节点key的数组<br>_extra_: {Object} 额外参数<br>_extra.checkedNodes_: {Array} 勾选复选框节点的数组<br>_extra.checkedNodesPositions_: {Array} 包含有勾选复选框节点和其位置的对象的数组<br>_extra.indeterminateKeys_: {Array} 半选复选框节点 key 的数组<br>_extra.node_: {Object} 当前操作的节点<br>_extra.checked_: {Boolean} 当前操作是否是勾选 | Function                | () => {}   |\n| expandedKeys        | （用于受控）当前展开的节点 key 的数组                                                                                                                                                                                                                                                                                                                                                                                            | Array&lt;String>        | -          |\n| defaultExpandedKeys | （用于非受控）默认展开的节点 key 的数组                                                                                                                                                                                                                                                                                                                                                                                           | Array&lt;String>        | \\[]        |\n| defaultExpandAll    | 是否默认展开所有节点                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean                 | false      |\n| autoExpandParent    | 是否自动展开父节点                                                                                                                                                                                                                                                                                                                                                                                                        | Boolean                 | true       |\n| onExpand            | 展开或收起节点时触发的回调函数<br><br>**签名**:<br>Function(expandedKeys: Array, extra: Object) => void<br>**参数**:<br>_expandedKeys_: {Array} 展开的节点key的数组<br>_extra_: {Object} 额外参数<br>_extra.node_: {Object} 当前操作的节点<br>_extra.expanded_: {Boolean} 当前操作是否是展开                                                                                                                                                                    | Function                | () => {}   |\n| editable            | 是否支持编辑节点内容                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean                 | false      |\n| onEditFinish        | 编辑节点内容完成时触发的回调函数<br><br>**签名**:<br>Function(key: String, label: String, node: Object) => void<br>**参数**:<br>_key_: {String} 编辑节点的 key<br>_label_: {String} 编辑节点完成时节点的文本<br>_node_: {Object} 当前编辑的节点                                                                                                                                                                                                              | Function                | () => {}   |\n| draggable           | 是否支持拖拽节点                                                                                                                                                                                                                                                                                                                                                                                                         | Boolean                 | false      |\n| onDragStart         | 开始拖拽节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 拖拽的节点                                                                                                                                                                                                                                                | Function                | () => {}   |\n| onDragEnter         | 拖拽节点进入目标节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 目标节点<br>_info.expandedKeys_: {Array} 当前展开的节点key的数组                                                                                                                                                                                               | Function                | () => {}   |\n| onDragOver          | 拖拽节点在目标节点上移动的时候触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 目标节点                                                                                                                                                                                                                                         | Function                | () => {}   |\n| onDragLeave         | 拖拽节点离开目标节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 目标节点                                                                                                                                                                                                                                             | Function                | () => {}   |\n| onDragEnd           | 拖拽节点拖拽结束时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 目标节点                                                                                                                                                                                                                                               | Function                | () => {}   |\n| onDrop              | 拖拽节点放入目标节点内或前后触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 目标节点<br>_info.dragNode_: {Object} 拖拽的节点<br>_info.dragNodesKeys_: {Array} 拖拽的节点和其子节点 key 的数组<br>_info.dropPosition_: {Number} 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后                                                                                 | Function                | () => {}   |\n| canDrop             | 节点是否可被作为拖拽的目标节点<br><br>**签名**:<br>Function(info: Object) => Boolean<br>**参数**:<br>_info_: {Object} 拖拽信息<br>_info.node_: {Object} 目标节点<br>_info.dragNode_: {Object} 拖拽的节点<br>_info.dragNodesKeys_: {Array} 拖拽的节点和其子节点 key 的数组<br>_info.dropPosition_: {Number} 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后<br>**返回值**:<br>{Boolean} 是否可以被当作目标节点<br>                                                                          | Function                | () => true |\n| loadData            | 异步加载数据的函数<br><br>**签名**:<br>Function(node: Object) => void<br>**参数**:<br>_node_: {Object} 被点击展开的节点                                                                                                                                                                                                                                                                                                               | Function                | -          |\n| filterTreeNode      | 按需筛选高亮节点<br><br>**签名**:<br>Function(node: Object) => Boolean<br>**参数**:<br>_node_: {Object} 待筛选的节点<br>**返回值**:<br>{Boolean} 是否被筛选中<br>                                                                                                                                                                                                                                                                           | Function                | -          |\n| onRightClick        | 右键点击节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 信息对象<br>_info.event_: {Object} 事件对象<br>_info.node_: {Object} 点击的节点                                                                                                                                                                                                                                                | Function                | () => {}   |\n| isLabelBlock        | 设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助 flex 实现，暂时只支持 ie10+)                                                                                                                                                                                                                                                                                                                                                            | Boolean                 | false      |\n| isNodeBlock         | 设置节点是否占满一行                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean/Object          | false      |\n| animation           | 是否开启展开收起动画                                                                                                                                                                                                                                                                                                                                                                                                       | Boolean                 | true       |\n\n### Tree.Node\n\n| 参数               | 说明                              | 类型        | 默认值   |\n| ---------------- | ------------------------------- | --------- | ----- |\n| children         | 树节点                             | ReactNode | -     |\n| label            | 节点文本内容                          | ReactNode | '---' |\n| selectable       | 单独设置是否支持选中，覆盖 Tree 的 selectable | Boolean   | -     |\n| checkable        | 单独设置是否出现复选框，覆盖 Tree 的 checkable | Boolean   | -     |\n| editable         | 单独设置是否支持编辑，覆盖 Tree 的 editable   | Boolean   | -     |\n| draggable        | 单独设置是否支持拖拽，覆盖 Tree 的 draggable  | Boolean   | -     |\n| disabled         | 是否禁止节点响应                        | Boolean   | false |\n| checkboxDisabled | 是否禁止勾选节点复选框                     | Boolean   | false |\n| isLeaf           | 是否是叶子节点，设置loadData时生效           | Boolean   | false |\n\n<!-- api-extra-start -->\n\n可以为 Tree.Node 设置 `key` 值：`<TreeNode key=\"102894\" label=\"女装\" />`，一般为数据的 id 值，但必需保证其全局唯一性，`key` 的默认值为 Tree 内部计算出的位置字符串。\n\n<!-- api-extra-end -->\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Tree } from '@alifd/next';\n\nconst TreeNode = Tree.Node;\n\nclass Demo extends React.Component {\n    onSelect(keys, info) {\n        console.log('onSelect', keys, info);\n    }\n\n    onCheck(keys, info) {\n        console.log('onCheck', keys, info);\n    }\n\n    onEditFinish(key, label, node) {\n        console.log('onEditFinish', key, label, node);\n    }\n\n    onRightClick(info) {\n        console.log('onRightClick', info);\n    }\n\n    render() {\n        return (\n            <Tree checkable editable\n                defaultExpandedKeys={['2']}\n                defaultCheckedKeys={['2', '4', '5']}\n                onSelect={this.onSelect}\n                onCheck={this.onCheck}\n                onEditFinish={this.onEditFinish}\n                onRightClick={this.onRightClick}>\n                <TreeNode key=\"1\" label=\"Component\">\n                    <TreeNode key=\"2\" label=\"Form\" selectable={false}>\n                        <TreeNode key=\"4\" label=\"Input\" />\n                        <TreeNode key=\"5\" label=\"Select\" disabled />\n                    </TreeNode>\n                    <TreeNode key=\"3\" label=\"Display\">\n                        <TreeNode key=\"6\" label=\"Table\" />\n                    </TreeNode>\n                </TreeNode>\n            </Tree>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>最简单的用法，展示可展开，可选中，可勾选，可编辑，可右键，禁用，禁用勾选，默认展开，默认选中，默认勾选等功能。</p>\n"
      },
      {
        "title": "父子节点选中是否关联",
        "order": "5",
        "jsx": "import { Checkbox, Tree } from '@alifd/next';\n\nconst data = [{\n    key: '0-0',\n    label: '0-0',\n    children: [{\n        key: '0-0-0',\n        label: '0-0-0',\n        children: [{\n            key: '0-0-0-0',\n            label: '0-0-0-0',\n            children: [{\n                key: '0-0-0-0-0',\n                label: '0-0-0-0-0'\n            }]\n        }, {\n            key: '0-0-0-1',\n            label: '0-0-0-1'\n        }]\n    }, {\n        key: '0-0-1',\n        label: '0-0-1',\n        children: [{\n            key: '0-0-1-0',\n            label: '0-0-1-0'\n        }, {\n            key: '0-0-1-1',\n            label: '0-0-1-1'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checkedKeys: [],\n            checkStrictly: false\n        };\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleCheckStrictly = this.handleCheckStrictly.bind(this);\n    }\n\n    handleCheck(keys, info) {\n        console.log(keys, info);\n\n        this.setState({\n            checkedKeys: keys\n        });\n    }\n\n    handleCheckStrictly() {\n        this.setState({\n            checkStrictly: !this.state.checkStrictly,\n            checkedKeys: []\n        });\n    }\n\n    render() {\n        const { checkedKeys, checkStrictly } = this.state;\n\n        return (\n            <div className=\"control-check-demo\">\n                <label className=\"strictly-check\">\n                    <Checkbox value={checkStrictly} onChange={this.handleCheckStrictly} />\n                    <span className=\"strictly-text\">Enable checkStrictly</span>\n                </label>\n                <Tree defaultExpandAll checkable checkStrictly={checkStrictly} checkedKeys={checkedKeys} onCheck={this.handleCheck} dataSource={data} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".control-check-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-check-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n<p>展示父子节点选中是否关联的用法。</p>\n"
      },
      {
        "title": "单选与多选",
        "order": "4",
        "jsx": "import { Checkbox, Tree } from '@alifd/next';\n\nconst data = [{\n    key: '0-0',\n    label: '0-0',\n    children: [{\n        key: '0-0-0',\n        label: '0-0-0',\n        children: [{\n            key: '0-0-0-0',\n            label: '0-0-0-0',\n            children: [{\n                key: '0-0-0-0-0',\n                label: '0-0-0-0-0'\n            }]\n        }, {\n            key: '0-0-0-1',\n            label: '0-0-0-1'\n        }]\n    }, {\n        key: '0-0-1',\n        label: '0-0-1',\n        children: [{\n            key: '0-0-1-0',\n            label: '0-0-1-0'\n        }, {\n            key: '0-0-1-1',\n            label: '0-0-1-1'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedKeys: [],\n            multiple: false\n        };\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleCheck = this.handleCheck.bind(this);\n    }\n\n    handleSelect(keys, info) {\n        console.log(keys, info);\n\n        this.setState({\n            selectedKeys: keys\n        });\n    }\n\n    handleCheck() {\n        this.setState({\n            multiple: !this.state.multiple,\n            selectedKeys: []\n        });\n    }\n\n    render() {\n        const { multiple, selectedKeys } = this.state;\n\n        return (\n            <div className=\"control-select-demo\">\n                <label className=\"multiple-check\">\n                    <Checkbox value={multiple} onChange={this.handleCheck} />\n                    <span className=\"multiple-text\">Enable multiple</span>\n                </label>\n                <Tree defaultExpandAll multiple={multiple} selectedKeys={selectedKeys} onSelect={this.handleSelect} dataSource={data} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": ".control-select-demo .multiple-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-select-demo .multiple-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n<p>展示单选与多选的用法。</p>\n"
      },
      {
        "title": "使用数据直接生成",
        "order": "1",
        "jsx": "import { Tree } from '@alifd/next';\n\nconst data = [{\n    label: 'Component',\n    key: '1',\n    children: [{\n        label: 'Form',\n        key: '2',\n        selectable: false,\n        children: [{\n            label: 'Input',\n            key: '4'\n        }, {\n            label: 'Select',\n            key: '5',\n            disabled: true\n        }]\n    }, {\n        label: 'Display',\n        key: '3',\n        children: [{\n            label: 'Table',\n            key: '6'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    onSelect(keys, info) {\n        console.log('onSelect', keys, info);\n    }\n\n    onCheck(keys, info) {\n        console.log('onCheck', keys, info);\n    }\n\n    onEditFinish(key, label, node) {\n        console.log('onEditFinish', key, label, node);\n    }\n\n    onRightClick(info) {\n        console.log('onRightClick', info);\n    }\n\n    render() {\n        return (\n            <Tree checkable editable\n                defaultExpandedKeys={['2']}\n                defaultCheckedKeys={['2', '4', '5']}\n                onSelect={this.onSelect}\n                onCheck={this.onCheck}\n                onEditFinish={this.onEditFinish}\n                onRightClick={this.onRightClick}\n                dataSource={data} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>使用 dataSource 生成树结构，除设置 key, label, children 属性外，还可传入 TreeNode 的其他属性，包括 selectable，disabled，checkable, checkboxDisabled, isLeaf 等。</p>\n"
      },
      {
        "title": "拖动",
        "order": "8",
        "jsx": "import { Tree } from '@alifd/next';\n\nconst TreeNode = Tree.Node;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n    const preKey = _preKey || '0';\n    const tns = _tns || gData;\n\n    const children = [];\n    for (let i = 0; i < x; i++) {\n        const key = `${preKey}-${i}`;\n        tns.push({ label: key, key });\n        if (i < y) {\n            children.push(key);\n        }\n    }\n    if (_level < 0) {\n        return tns;\n    }\n    const level = _level - 1;\n    children.forEach((key, index) => {\n        tns[index].children = [];\n        return generateData(level, key, tns[index].children);\n    });\n};\ngenerateData(z);\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gData\n        };\n    }\n\n    onDrop(info) {\n        const dragKey = info.dragNode.props.eventKey;\n        const dropKey = info.node.props.eventKey;\n        const dropPosition = info.dropPosition;\n        const loop = (data, key, callback) => {\n            data.forEach((item, index, arr) => {\n                if (item.key === key) {\n                    return callback(item, index, arr);\n                }\n                if (item.children) {\n                    return loop(item.children, key, callback);\n                }\n            });\n        };\n        const data = [...this.state.gData];\n        let dragObj;\n        loop(data, dragKey, (item, index, arr) => {\n            arr.splice(index, 1);\n            dragObj = item;\n        });\n        if (info.dropPosition === 0) {\n            loop(data, dropKey, (item) => {\n                item.children = item.children || [];\n                item.children.push(dragObj);\n            });\n        } else {\n            let ar;\n            let i;\n            loop(data, dropKey, (item, index, arr) => {\n                ar = arr;\n                i = index;\n            });\n            if (dropPosition === -1) {\n                ar.splice(i, 0, dragObj);\n            } else {\n                ar.splice(i + 1, 0, dragObj);\n            }\n        }\n        this.setState({\n            gData: data,\n        });\n    }\n    render() {\n        const loop = data => data.map(item => {\n            if (item.children) {\n                return <TreeNode key={item.key} label={item.key}>{loop(item.children)}</TreeNode>;\n            }\n            return <TreeNode key={item.key} label={item.key} />;\n        });\n\n        return (\n            <Tree draggable selectable={false} isLabelBlock defaultExpandedKeys={['0-0', '0-0-0', '0-0-0-0']} onDrop={this.onDrop.bind(this)}>\n                {loop(this.state.gData)}\n            </Tree>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>将节点拖拽到其他节点内部或前后。</p>\n"
      },
      {
        "title": "异步加载数据",
        "order": "7",
        "jsx": "import { Tree } from '@alifd/next';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [\n                { label: 'Expand to load', key: '0', },\n                { label: 'Expand to load', key: '1' },\n                { label: 'Leaf', key: '2', isLeaf: true }\n            ]\n        };\n\n        this.onLoadData = this.onLoadData.bind(this);\n    }\n\n    onLoadData(node) {\n        return new Promise(resolve => {\n            if (node.props.children) {\n                return resolve();\n            }\n\n            const { eventKey, pos } = node.props;\n            const item = this.getItemByPos(pos);\n            setTimeout(() => {\n                item.children = [\n                    { label: 'Child Tree', key: `${eventKey}-0` },\n                    { label: 'Child Tree', key: `${eventKey}-1` }\n                ];\n                this.setState({\n                    data: [...this.state.data]\n                });\n                resolve();\n            }, 1000);\n        });\n    }\n\n    getItemByPos(pos) {\n        return pos.split('-').slice(1).reduce((ret, num) => ret.children[num], { children: this.state.data });\n    }\n\n    render() {\n        return (\n            <Tree dataSource={this.state.data} loadData={this.onLoadData} />\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>点击展开节点，动态加载数据。</p>\n"
      },
      {
        "title": "带线样式",
        "order": "2",
        "jsx": "import { Tree } from '@alifd/next';\n\nconst TreeNode = Tree.Node;\n\nReactDOM.render(\n    <Tree defaultExpandAll showLine>\n        <TreeNode label=\"Trunk\">\n            <TreeNode label=\"Branch\">\n                <TreeNode label=\"Branch\">\n                    <TreeNode label=\"Leaf\" />\n                </TreeNode>\n                <TreeNode label=\"Leaf\" />\n            </TreeNode>\n            <TreeNode label=\"Branch\">\n                <TreeNode label=\"Leaf\" />\n                <TreeNode label=\"Leaf\" />\n            </TreeNode>\n        </TreeNode>\n    </Tree>, mountNode);\n",
        "css": "",
        "body": "\n<p>展示Tree组件带线的样式外观。</p>\n"
      },
      {
        "title": "树节点占满一行",
        "order": "3",
        "jsx": "import { Tree } from '@alifd/next';\n\nconst TreeNode = Tree.Node;\n\nReactDOM.render(\n    <Tree defaultExpandAll isNodeBlock={{ defaultPaddingLeft: 50 }} defaultSelectedKeys={['1']} style={{ width: '300px' }}>\n        <TreeNode label=\"Component\" key=\"0\">\n            <TreeNode label=\"Form\" key=\"1\" disabled>\n                <TreeNode label=\"Select\" key=\"2\">\n                    <TreeNode label=\"TreeSelect\" key=\"3\" />\n                </TreeNode>\n                <TreeNode label=\"Input\" key=\"4\" />\n            </TreeNode>\n            <TreeNode label=\"Display\" key=\"5\">\n                <TreeNode label=\"Card\" key=\"6\" />\n                <TreeNode label=\"Table\" key=\"7\" />\n            </TreeNode>\n        </TreeNode>\n    </Tree>, mountNode);\n",
        "css": "",
        "body": "\n<p>可以通过设置 isNodeBlock 为 true，来让树节点占满一行，isNodeBlock 也可传入一个对象，支持设置 defaultPaddingLeft（默认的左内边距）和 indent （缩进距离），另外注意 showLine \b在开启 isNodeBlock 时失效。</p>\n"
      },
      {
        "title": "可搜索的树",
        "order": "6",
        "jsx": "import { Search, Tree } from '@alifd/next';\n\nconst data = [{\n    label: 'Component',\n    key: '1',\n    children: [{\n        label: 'Form',\n        key: '2',\n        children: [{\n            label: 'Input',\n            key: '4'\n        }, {\n            label: 'Select',\n            key: '5'\n        }]\n    }, {\n        label: 'Display',\n        key: '3',\n        children: [{\n            label: 'Table',\n            key: '6'\n        }]\n    }]\n}];\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            expandedKeys: ['2'],\n            autoExpandParent: true\n        };\n        this.matchedKeys = [];\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleExpand = this.handleExpand.bind(this);\n    }\n\n    handleSearch(value) {\n        value = value.trim();\n        if (!value) {\n            this.matchedKeys = null;\n            return;\n        }\n\n        const matchedKeys = [];\n        const loop = data => data.forEach(item => {\n            if (item.label.indexOf(value) > -1) {\n                matchedKeys.push(item.key);\n            }\n            if (item.children && item.children.length) {\n                loop(item.children);\n            }\n        });\n        loop(data);\n\n        this.setState({\n            expandedKeys: [...matchedKeys],\n            autoExpandParent: true\n        });\n        this.matchedKeys = matchedKeys;\n    }\n\n    handleExpand(keys) {\n        this.setState({\n            expandedKeys: keys,\n            autoExpandParent: false\n        });\n    }\n\n    render() {\n        const { expandedKeys, autoExpandParent } = this.state;\n        const filterTreeNode = node => {\n            return this.matchedKeys && this.matchedKeys.indexOf(node.props.eventKey) > -1;\n        };\n\n        return (\n            <div>\n                <Search shape=\"simple\" size=\"medium\" style={{ width: '200px', marginBottom: '10px' }} onChange={this.handleSearch} />\n                <Tree expandedKeys={expandedKeys} autoExpandParent={autoExpandParent} filterTreeNode={filterTreeNode} onExpand={this.handleExpand} dataSource={data} />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Demo />, mountNode);\n",
        "css": "",
        "body": "\n<p>展示可搜索的树。</p>\n"
      }
    ]
  },
  {
    "name": "Upload",
    "category": "Components",
    "title": "上传组件",
    "type": "表单",
    "importStatement": "import { Upload } from '@alifd/next';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n用户根据提示将自己本地的相应信息(包含本地和云储存)上传到网站，上传组件可以帮助用户对上传过程和上传结果有预期，并可以更改或撤销上传行为。\n\n API\n\n### Upload\n\n| 参数              | 说明                                                                                                                                                                                                                                            | 类型              | 默认值       |\n| --------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- | --------- |\n| listType        | 上传列表的样式<br><br>**可选值**:<br>'text'(文字)<br>'image'(图文)<br>'card'(卡片)                                                                                                                                                                            | Enum            | -         |\n| shape           | 上传按钮形状<br><br>**可选值**:<br>'card'                                                                                                                                                                                                              | Enum            | -         |\n| value           | 文件列表                                                                                                                                                                                                                                          | Array           | -         |\n| onRemove        | 移除文件回调函数，详见 [onRemove](#onRemove)<br><br>**签名**:<br>Function() => void                                                                                                                                                                        | Function        | func.noop |\n| onCancel        | 取消上传回调(支持Promise)<br><br>**签名**:<br>Function() => void                                                                                                                                                                                        | Function        | func.noop |\n| onImageError    | 头像加载出错回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                 | Function        | func.noop |\n| onPreview       | listType=card时点击图片回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                                     | Function        | func.noop |\n| extraRender     | 自定义额外渲染<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                  | Function        | func.noop |\n| children        | 子元素                                                                                                                                                                                                                                           | ReactNode       | -         |\n| action          | 上传的地址                                                                                                                                                                                                                                         | String          | -         |\n| accept          | 接受上传的文件类型 (image/png, image/jpg, .doc, .ppt) 详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)                                                                                         | String          | -         |\n| data            | 上传额外传参                                                                                                                                                                                                                                        | Object/Function | -         |\n| headers         | 设置上传的请求头部                                                                                                                                                                                                                                     | Object          | -         |\n| withCredentials | 是否允许请求携带 cookie                                                                                                                                                                                                                               | Boolean         | true      |\n| beforeUpload    | 可选参数, 详见 [beforeUpload](#beforeUpload)<br><br>**签名**:<br>Function(files: Object, options: Object) => Boolean/Object/Promise<br>**参数**:<br>_files_: {Object} null<br>_options_: {Object} null<br>**返回值**:<br>{Boolean/Object/Promise} null<br> | Function        | func.noop |\n| onProgress      | 上传中<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                      | Function        | func.noop |\n| onSuccess       | 可选参数，上传成功回调函数，参数为请求下响应信息以及文件<br><br>**签名**:<br>Function() => void                                                                                                                                                                             | Function        | func.noop |\n| onError         | 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件<br><br>**签名**:<br>Function() => void                                                                                                                                                                        | Function        | func.noop |\n| timeout         | 设置上传超时,单位ms                                                                                                                                                                                                                                   | Number          | -         |\n| method          | 上传方法<br><br>**可选值**:<br>'post', 'put'                                                                                                                                                                                                         | Enum            | 'post'    |\n| onSelect        | 选择文件回调<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                   | Function        | func.noop |\n| onDrop          | 放文件<br><br>**签名**:<br>Function() => void                                                                                                                                                                                                      | Function        | func.noop |\n| defaultValue    | 默认文件列表                                                                                                                                                                                                                                        | Array           | -         |\n| formatter       | 数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)<br><br>**签名**:<br>Function(response: Object, file: File) => void<br>**参数**:<br>_response_: {Object} 返回<br>_file_: {File} 文件对象                                                   | Function        | -         |\n| limit           | 最大文件上传个数                                                                                                                                                                                                                                      | Number          | Infinity  |\n| dragable        | 可选参数，是否支持拖拽上传，`ie10+` 支持。                                                                                                                                                                                                                     | Boolean         | -         |\n| disabled        | 可选参数，是否禁用上传功能                                                                                                                                                                                                                                 | Boolean         | -         |\n| onChange        | 上传文件改变时的状态<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>_info_: {Object} 文件事件对象                                                                                                                                             | Function        | func.noop |\n| autoUpload      | 自动上传                                                                                                                                                                                                                                          | Boolean         | true      |\n| afterSelect     | 可选参数, 用于校验文件,afterSelect仅在 autoUpload=false 的时候生效,autoUpload=true时,可以使用beforeUpload完全可以替代该功能.<br><br>**签名**:<br>Function(file: Object) => Boolean<br>**参数**:<br>_file_: {Object} null<br>**返回值**:<br>{Boolean} 返回false会阻止上传,其他则表示正常<br>       | Function        | func.noop |\n\n### Upload.Card\n\n> 继承 Upload 的 API，除非特别说明\n\n| 参数        | 说明                                           | 类型       | 默认值       |\n| --------- | -------------------------------------------- | -------- | --------- |\n| onPreview | 点击图片回调<br><br>**签名**:<br>Function() => void  | Function | func.noop |\n| onChange  | 改变时候的回调<br><br>**签名**:<br>Function() => void | Function | func.noop |\n| onRemove  | 点击移除的回调<br><br>**签名**:<br>Function() => void | Function | -         |\n| onCancel  | 取消上传的回调<br><br>**签名**:<br>Function() => void | Function | -         |\n\n### Upload.Drager\n\n> IE10+ 支持。继承 Upload 的 API，除非特别说明\n\n### Upload.Selecter\n\n> [底层能力] 可自定义样式的文件选择器\n\n| 参数          | 说明                                                                                                                                                    | 类型       | 默认值       |\n| ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | --------- |\n| disabled    | 是否禁用上传功能                                                                                                                                              | Boolean  | -         |\n| multiple    | 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件                                                                                                                | Boolean  | false     |\n| dragable    | 是否支持拖拽上传，`ie10+` 支持。                                                                                                                                  | Boolean  | -         |\n| accept      | 接受上传的文件类型 (image/png, image/jpg, .doc, .ppt) 详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept) | String   | -         |\n| onSelect    | 文件选择回调<br><br>**签名**:<br>Function() => void                                                                                                           | Function | func.noop |\n| onDragOver  | 拖拽经过回调<br><br>**签名**:<br>Function() => void                                                                                                           | Function | func.noop |\n| onDragLeave | 拖拽离开回调<br><br>**签名**:<br>Function() => void                                                                                                           | Function | func.noop |\n| onDrop      | 拖拽完成回调<br><br>**签名**:<br>Function() => void                                                                                                           | Function | func.noop |\n\n## Method\n\n### Upload.Uploader\n\n> [底层能力] 文件上传核心功能\n> let uploader = new Upload.Uploader([options]);\n\n#### options\n\n| 参数              | 说明                                                                     | 类型              | 默认值   |\n| --------------- | ---------------------------------------------------------------------- | --------------- | ----- |\n| action          | 上传的地址                                                                  | String          | -     |\n| data            | 上传额外传参                                                                 | Object/Function | -     |\n| headers         | 设置上传的请求头部                                                              | Object          | -     |\n| withCredentials | 是否允许请求携带 cookie                                                        | Boolean         | false |\n| onProgress      | 上传中<br><br>**签名**:<br>Function() => void                               | Function        | noop  |\n| onSuccess       | 上传成功回调函数，参数为请求下响应信息以及文件<br><br>**签名**:<br>Function() => void           | Function        | noop  |\n| onError         | 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件<br><br>**签名**:<br>Function() => void | Function        | noop  |\n\n### onChange 返回结构\n\n        {\n          uid: 'uid',       // 文件唯一标识\n          name: 'xx.png'    // 文件名\n          state: 'done',    // 状态有：selected uploading done error\n          response: {\"success\":true}  // 服务端响应内容\n          url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n          imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg', // 头像(可选)\n          downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'   // 下载(可选)\n        }\n\n### 接口 response 返回数据格式要求\n\n        {\n          \"success\": true,\n          \"message\": \"上传成功\",                                  // success=false 时候可以展示错误\n          \"url\": \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"             // 返回结果\n          \"imgURL\": \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",         // 图片预览地址 (非必须)\n          \"downloadURL\": \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",    // 文件下载地址 (非必须)\n        }\n\n### 后端数据格式化\n\n通过 `formatter` 将来自后端的不规则数据转换为符合组件要求的数据格式\n\n-   `假设` 服务器的响应数据如下\n\n\n        {\n          \"status\": \"success\",                              // 上传成功返回码\n          \"img_src\": \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",   // 图片链接\n        }\n\n-   转换方法\n\n\n        <Upload\n          action=\"http://127.0.0.1:3001/upload\"\n          formatter={(res, file) => {\n            // 函数里面根据当前服务器返回的响应数据\n            // 重新拼装符合组件要求的数据格式\n            return {\n              success: res.status === 'success',\n              url: res.img_src,\n            }\n          }}\n        />\n\n## Upload 服务端代码样例\n\nNext Upload组件上传文件使用的`multipart/form-data`方式上传文件,具体实现是在支持`FormData`对象的浏览器中使用xhr对象发送formdata。在不支持`FormData`对象的浏览器如IE9, 使用iframe原生表单实现。\n\n各个语言的服务端框架,必然是可以处理`multipart/form-data`类型的请求,并解析出文件。一下给出两种语言的样例代码\n\n-   [Java Springboot 样例](https://github.com/alibaba-fusion/next-upload-java-server)\n-   [Node Eggjs 样例](https://github.com/alibaba-fusion/next-upload-node-server)\n\n## IE9兼容性\n\n-   ie9 下用因为使用 iframe 作为无刷新上传方案，必须保证表单页面的域名和上传的服务器端的域名相同。\n-   ie9 下服务器端返回数据需要设置头部 `context-type` 为 `text/html`，不要设置为 `application/json`\n-   如果只是一级域名相同（`taobao.com` 为一级域名  `shop.taobao.com` 为二级域名），可以通过降域的方式实现跨域上传。\n\n假设你表单页面的域是：shop.taobao.com，而上传的服务器端路径却是 upload.taobao.com。服务端返回必须带额外script标签\n\n        <script>document.domain=\"taobao.com\";</script>\n        {\"status\":1,\"type\":\"ajax\",\"name\":\"54.png\",\"url\":\".\\/files\\/54.png\"}\n\niframe上传会额外传递参数 `_documentDomain` 方便你设置域名\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "文件上传",
        "order": "0",
        "jsx": "import { Upload, Button, Icon } from '@alifd/next';\n\nReactDOM.render(<div>\n    <Upload\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        onSuccess={onSuccess}\n        multiple\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 1024,\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            fileURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n    <br/>\n    <Upload shape=\"card\" style={{display: 'inline-block'}}>\n        Upload File\n    </Upload>\n    <Upload style={{display: 'inline-block', marginLeft: '5px'}}>\n        <div className=\"next-upload-card\">\n            <Icon type=\"attachment\" size=\"large\"/>\n            <div className=\"next-upload-text\">\n                Attachment\n            </div>\n        </div>\n    </Upload>\n</div>, mountNode);\n\nfunction beforeUpload(info) {\n    console.log('beforeUpload : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange : ', info);\n}\n\nfunction onSuccess(info) {\n    console.log('onSuccess : ', info);\n}\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "上传前预处理",
        "order": "8",
        "jsx": "import { Upload, Button } from '@alifd/next';\n\nReactDOM.render([\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        key=\"1\"\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>,\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={asyncBeforeUpload}\n        onChange={onChange}\n        key=\"2\"\n    >\n        <Button type=\"secondary\" style={{margin: '0 0 10px'}}>Async Call before Upload File</Button>\n    </Upload>,\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={() => false}\n        onChange={onChange}\n        key=\"3\"\n    >\n        <Button type=\"normal\" style={{margin: '0 0 10px'}}>Prevent Upload</Button>\n    </Upload>,\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={() => new Promise(resl => setTimeout(() => resl(false)))}\n        onChange={onChange}\n        key=\"4\"\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Async Prevent Upload</Button>\n    </Upload>,\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={() => {}}\n        onChange={onChange}\n        key=\"5\"\n    >\n        <Button type=\"secondary\" style={{margin: '0 0 10px'}}>Do nothing</Button>\n    </Upload>\n], mountNode);\n\nconst requestOpts = {\n    action: 'https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload',\n    data: {osstoken: 1234},\n    headers: {'X-Requested-With': 12345},\n};\n\nasync function ajax() {\n    return await new Promise(resolve => {\n        setTimeout(() => {\n            resolve(requestOpts);\n        }, 1e3);\n    });\n}\n\nfunction beforeUpload(info, options) {\n    console.log('beforeUpload callback : ', info, options);\n    return requestOpts;\n}\n\nasync function asyncBeforeUpload(info, options) {\n    console.log('beforeUpload callback : ', info, options);\n    return await ajax();\n}\n\nfunction onChange(info) {\n    console.log('onChange callback : ', info);\n}\n\n\n",
        "css": "",
        "body": "\n<p>使用beforeUpload去控制上传行为</p>\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "卡片",
        "order": "3",
        "jsx": "import { Upload } from '@alifd/next';\n\nReactDOM.render((\n    <Upload.Card\n        listType=\"card\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        onPreview={onPreview}\n        onChange={onChange}\n        onSuccess={onSuccess}\n        onError={onError}\n        defaultValue={[{\n            uid: '0',\n            name: 'IMG.png',\n            state: 'done',\n            url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }, {\n            uid: '1',\n            name: 'IMG.png',\n            percent: 50,\n            state: 'uploading',\n            url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }, {\n            uid: '2',\n            name: 'IMG.png',\n            state: 'error',\n            url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }]}\n    />\n), mountNode);\n\nfunction onPreview(info) {\n    console.log('onPreview callback : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange callback : ', info);\n}\n\nfunction onSuccess(res, file) {\n    console.log('onSuccess callback : ', res, file);\n}\n\nfunction onError(file) {\n    console.log('onError callback : ', file);\n}\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "裁剪上传",
        "order": "10",
        "jsx": "import { Upload, Button, Dialog } from '@alifd/next';\nimport Cropper from 'react-cropper';\n\n\nfunction convertBase64UrlToFile(urlData) {\n\n    const bytes = window.atob(urlData.split(',')[1]);\n\n    const ab = new ArrayBuffer(bytes.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < bytes.length; i++) {\n        ia[i] = bytes.charCodeAt(i);\n    }\n\n    const blob = new Blob([ab], {type: 'image/png'});\n\n    return new File([blob], 'test.png', {type: 'image/png'});\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.uploader = new Upload.Uploader({\n            action: 'https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload',\n            onSuccess: this.onSuccess,\n            name: 'file'\n        });\n    }\n\n    state = {\n        src: null,\n        visible: false,\n        img: null,\n    };\n\n    onSuccess = (value) => {\n        console.log(value);\n        this.setState({\n            img: value.url\n        });\n    };\n\n    onSelect = (files) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            this.setState({\n                src: reader.result,\n                visible: true,\n            });\n        };\n        reader.readAsDataURL(files[0]);\n    };\n\n    onCancel = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n    onOk = () => {\n\n        const data = this.cropperRef.getCroppedCanvas().toDataURL();\n\n        const blob = convertBase64UrlToFile(data);\n        const file = new File([blob], 'test.png', {type: 'image/png'});\n\n        // start upload\n        this.uploader.startUpload(file);\n\n        this.setState({\n            visible: false,\n        });\n    };\n\n    saveCropperrRef = (ref) => {\n        this.cropperRef = ref;\n    };\n\n    render() {\n        return (\n            <div>\n                <Upload.Selecter onSelect={this.onSelect}\n                >\n                    <Button>Select file</Button>\n                </Upload.Selecter>\n                <Dialog visible={this.state.visible} onCancel={this.onCancel} onOk={this.onOk} isFullScreen>\n                    <Cropper\n                        ref={this.saveCropperrRef}\n                        src={this.state.src}\n                        style={{height: 300, width: 400}}\n                    />\n                </Dialog>\n                <div><img src={this.state.img} style={{width: 100}}/></div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "自定义上传参数",
        "order": "4",
        "jsx": "import { Upload, Button } from '@alifd/next';\n\nReactDOM.render((\n    <Upload\n        listType=\"text\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        data={{token: 'abcd'}}\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 1024,\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n), mountNode);\n\nfunction beforeUpload(info) {\n    console.log('beforeUpload callback : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange callback : ', info);\n}\n",
        "css": "",
        "body": "\n<p>通过 data 控制自定义参数</p>\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "拖拽上传",
        "order": "4",
        "jsx": "import { Upload } from '@alifd/next';\n\nReactDOM.render((\n    <Upload.Dragger\n        listType=\"image\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        onDragOver={onDragOver}\n        onDrop={onDrop}\n    />\n), mountNode);\n\nfunction onDragOver() {\n    console.log('dragover callback');\n}\n\nfunction onDrop(fileList) {\n    console.log('drop callback : ', fileList);\n}\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n<p>提醒: 拖拽上传不适合视障人士使用,有无障碍需求的项目慎用</p>\n"
      },
      {
        "title": "上传失败",
        "order": "12",
        "jsx": "import { Upload, Button } from '@alifd/next';\n\n\nconst value = [\n    {\n        uid: '2',\n        name: 'IMG.png',\n        state: 'error',\n        url:\n            'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n        downloadURL:\n            'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n        imgURL:\n            'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n    }\n];\n\nReactDOM.render(\n    <div>\n        <Upload value={value} listType=\"text\"> <Button>Upload</Button></Upload>\n\n        <br />\n        <Upload value={value} listType=\"card\"> <Button>Upload</Button></Upload>\n\n        <br />\n        <Upload value={value} listType=\"image\"> <Button>Upload</Button></Upload>\n    </div>,\n    mountNode\n);\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "额外内容",
        "order": "8",
        "jsx": "import { Upload, Button } from '@alifd/next';\n\nconst extraRender = (file) => {\n    console.log(file);\n    return (<Button style={{marginLeft: 4}}>extra</Button>);\n};\n\nReactDOM.render((\n    <Upload\n        listType=\"image\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        extraRender={extraRender}\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 100,\n            url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n), mountNode);\n\nfunction beforeUpload(info) {\n    console.log('beforeUpload callback : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange callback : ', info);\n}\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "图片列表",
        "order": "2",
        "jsx": "import { Upload, Button } from '@alifd/next';\n\nReactDOM.render((\n    <Upload\n        listType=\"image\"\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 100,\n            url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n), mountNode);\n\nfunction beforeUpload(info) {\n    console.log('beforeUpload callback : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange callback : ', info);\n}\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "个数限制",
        "order": "6",
        "jsx": "import { Upload, Button } from '@alifd/next';\n\nReactDOM.render((\n    <Upload\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        limit={3}\n        multiple\n        listType=\"text\"\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 1024,\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            fileURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n), mountNode);\n\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "大小限制",
        "order": "6",
        "jsx": "import { Upload, Dialog, Button } from '@alifd/next';\n\nconst beforeUpload = (file) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            const img = new Image();\n            img.onload = () => {\n                if (img.width <= 1200) {\n                    resolve();\n                } else {\n                    Dialog.alert({\n                        content: `Image width ${img.width}px, Exceed limits！`,\n                        closable: false,\n                        title: 'Warning'\n                    });\n                    reject();\n                }\n            };\n            img.src = reader.result;\n        };\n        reader.readAsDataURL(file);\n    });\n};\n\nReactDOM.render((\n    <Upload\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        limit={3}\n        multiple\n        beforeUpload={beforeUpload}\n        listType=\"text\"\n        defaultValue={[{\n            name: 'IMG.png',\n            state: 'done',\n            size: 1024,\n            downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            fileURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n            imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n        }]}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload file</Button>\n    </Upload>\n), mountNode);\n\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "粘贴上传",
        "order": "5",
        "jsx": "import { Upload, Input } from '@alifd/next';\n\nclass App extends React.Component {\n    onPaste = (e) => {\n        e.preventDefault();\n        const files = e.clipboardData.files;\n        files.length && this.uploaderRef.selectFiles(files);\n    };\n\n    saveUploaderRef = (ref) => {\n        this.uploaderRef = ref.getInstance();\n    };\n\n    onChange = (value) => {\n        console.log(value);\n    };\n\n    render() {\n        return (<div>\n            <Input.TextArea style={{width: '100%', marginBottom: 10}} autoHeight={{minRows: 4}} onPaste={this.onPaste} />\n            <Upload\n                action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n                listType=\"image\"\n                onChange={this.onChange}\n                ref={this.saveUploaderRef}\n            />\n        </div>);\n    }\n}\n\nReactDOM.render(<App/>, mountNode);\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "提交上传",
        "order": "5",
        "jsx": "import { Upload, Button } from '@alifd/next';\n\n\nclass App extends React.Component {\n\n    saveUploaderRef = (ref) => {\n        this.uploaderRef = ref.getInstance();\n    };\n\n    onSubmit = () => {\n        this.uploaderRef.startUpload();\n    }\n    beforeUpload(info, options) {\n        console.log('beforeUpload callback : ', info, options);\n        return options;\n    }\n    render() {\n        return (\n            <div>\n                <Upload\n                    action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n                    autoUpload={false}\n                    ref={this.saveUploaderRef}\n                    listType=\"text\"\n                    beforeUpload={this.beforeUpload}\n                >\n                    <Button>Upload</Button>\n                </Upload>\n                <br />\n                <Button type=\"primary\" onClick={this.onSubmit}>Submit</Button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": "",
        "body": "\n<p>通过按钮点击提交上传</p>\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "文字列表",
        "order": "1",
        "jsx": "import { Upload, Button } from '@alifd/next';\n\nconst defaultValue = [{\n    name: 'IMG.png',\n    state: 'done',\n    size: 1024,\n    downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n    fileURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n    url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n}];\n\nReactDOM.render((\n    <Upload\n        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n        beforeUpload={beforeUpload}\n        onChange={onChange}\n        onSuccess={onSuccess}\n        listType=\"text\"\n        defaultValue={defaultValue}\n    >\n        <Button type=\"primary\" style={{margin: '0 0 10px'}}>Upload File</Button>\n    </Upload>\n), mountNode);\n\nfunction beforeUpload(info) {\n    console.log('beforeUpload : ', info);\n}\n\nfunction onChange(info) {\n    console.log('onChange : ', info);\n}\n\nfunction onSuccess(info) {\n    console.log('onSuccess : ', info);\n}\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "文件校验",
        "order": "12",
        "jsx": "import { Upload, Button } from '@alifd/next';\n\n\nclass App extends React.Component {\n\n    saveUploaderRef = (ref) => {\n        this.uploaderRef = ref.getInstance();\n    };\n\n    onSubmit = () => {\n        this.uploaderRef.startUpload();\n    }\n    afterSelect(file) {\n        console.log(file);\n        return true; // return false will trigger onError warning & prevent upload\n    }\n    render() {\n        return (\n            <div>\n                <Upload\n                    action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n                    autoUpload={false}\n                    ref={this.saveUploaderRef}\n                    listType=\"text\"\n                    afterSelect={this.afterSelect}\n                >\n                    <Button>Upload</Button>\n                </Upload>\n                <br />\n                <Button type=\"primary\" onClick={this.onSubmit}>Submit</Button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": "",
        "body": "\n<p>afterSelect仅在 autoUpload=false 的时候生效\nautoUpload=true时,可以使用beforeUpload完全可以替代该功能.</p>\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      },
      {
        "title": "内容回填",
        "order": "6",
        "jsx": "import { Upload, Button, Field, Form } from '@alifd/next';\n\nconst FormItem = Form.Item;\n\nconst value = [{\n    name: 'pic.png',\n    fileName: 'pic.png',\n    state: 'done',\n    size: 1000,\n    downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n    fileURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n    imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'\n}];\n\nclass App extends React.Component {\n\n    field = new Field(this);\n\n    setValues = () => {\n        this.field.setValues({\n            upload: [...value]\n        });\n    };\n\n    getValues = () => {\n        const values = this.field.getValues();\n        console.log(values);\n    };\n\n    render() {\n\n        return (\n            <Form field={this.field}>\n                <FormItem required>\n                    <Upload\n                        listType=\"text\"\n                        name=\"upload\"\n                        action=\"https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload\"\n                        defaultValue={value}\n                    >\n                        <Button>Upload</Button>\n                    </Upload>\n                </FormItem>\n                <div>\n                    <Button onClick={this.setValues} type=\"primary\" style={{margin: '0 0 10px'}}>Set Data</Button>&nbsp;&nbsp;\n                    <Button onClick={this.getValues} type=\"primary\" style={{margin: '0 0 10px'}}>Get Data</Button>&nbsp;&nbsp;\n                    <Button onClick={() => this.field.reset()} type=\"primary\" style={{margin: '0 0 10px'}}>Reset</Button>&nbsp;&nbsp;\n                    <Button onClick={() => this.field.validate()} type=\"primary\" style={{margin: '0 0 10px'}}>Validate</Button>\n                </div>\n            </Form>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": "",
        "body": "\n<p>提醒: <code>https://www.easy-mock.com/mock/5b713974309d0d7d107a74a3/alifd/upload</code>接口:</p>\n<blockquote>\n<ol>\n<li>该接口仅作为测试使用,业务请勿使用</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>该接口仅支持图片上传,其他文件类型接口请自备</li>\n</ol>\n</blockquote>\n"
      }
    ]
  },
  {
    "name": "VirtualList",
    "category": "Components",
    "title": "虚拟滚动列表",
    "importStatement": "import { VirtualList } from '@alifd/next';",
    "body": "\n API\n\n### VirtualList\n\n| 参数             | 说明                                                                                        | 类型       | 默认值                                              |\n| -------------- | ----------------------------------------------------------------------------------------- | -------- | ------------------------------------------------ |\n| children       | 渲染的子节点                                                                                    | any      | -                                                |\n| minSize        | 最小加载数量                                                                                    | Number   | 1                                                |\n| pageSize       | 一屏数量                                                                                      | Number   | 10                                               |\n| itemsRenderer  | 父渲染函数，默认为 (items, ref) => <ul ref={ref}>{items}</ul><br><br>**签名**:<br>Function() => void | Function | (items, ref) => &lt;ul ref={ref}>{items}&lt;/ul> |\n| threshold      | 缓冲区高度                                                                                     | Number   | 100                                              |\n| itemSizeGetter | 获取item高度的函数<br><br>**签名**:<br>Function() => void                                          | Function | -                                                |\n| jumpIndex      | 设置跳转位置，需要设置 itemSizeGetter 才能生效, 不设置认为元素等高并取第一个元素高度作为默认高                                  | Number   | 0                                                |\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "简单用法",
        "order": "0",
        "jsx": "import { VirtualList } from '@alifd/next';\n\nconst dataSource = [];\n\nconst generateLi = (index = 'index') => {\n    const data = [];\n    if (index % 3 === 0) {\n        return <li key={`key-${index}`} style={{lineHeight: '30px', background: '#5f83ff', color: '#fff'}}>key-{index}</li>;\n    } else {\n        return <li key={`key-${index}`}  style={{lineHeight: '20px'}}>key-{index}</li>;\n    }\n};\n\nfor (let i = 0; i < 1000; i++) {\n    dataSource.push(generateLi(i));\n}\n\nconst demo = (\n    <div className={'virtual-box'}>\n        <VirtualList>\n            {dataSource}\n        </VirtualList>\n    </div>\n);\n\n\nReactDOM.render(demo, mountNode);\n",
        "css": ".virtual-box {\n    height: 200px;\n    width: 200px;\n    border: 1px solid #ddd;\n    overflow: auto;\n}\n.virtual-box ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n}\n.virtual-box li {\n    padding-left: 10px;\n    border-bottom: 1px solid #333;\n}\n",
        "body": "\n<p>使用 VirtualList 最简单的例子。</p>\n"
      },
      {
        "title": "设置初始位置",
        "order": "1",
        "jsx": "import { VirtualList } from '@alifd/next';\n\nconst dataSource = [];\n\nfunction generateLi(index) {\n    return (<li key={`key-${index}`}  style={{lineHeight: '20px'}}>key-{index}</li>);\n}\nfunction generateData(len) {\n    for (let i = 0; i < len; i++) {\n        dataSource.push(generateLi(i));\n    }\n}\n\nclass App extends React.Component  {\n    state = {\n        initial: 50,\n        dataSource: generateData(1000)\n    }\n    onClick() {\n        this.setState({\n            initial: this.state.initial + 20\n        });\n    }\n    render() {\n        return (\n            <div>\n                <button onClick={this.onClick.bind(this)}>jump to {this.state.initial + 20}</button>\n                <br/>\n                <br/>\n                <div className={'virtual-box'}>\n                    <VirtualList ref=\"virtual\" jumpIndex={this.state.initial}>\n                        {dataSource}\n                    </VirtualList>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": ".virtual-box {\n    height: 200px;\n    width: 200px;\n    border: 1px solid #ddd;\n    overflow: auto;\n}\n.virtual-box ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n}\n.virtual-box li {\n    padding-left: 10px;\n    border-bottom: 1px solid #333;\n}\n",
        "body": "\n<p>使用 jumpIndex 设置初始位置</p>\n"
      },
      {
        "title": "不等高的item",
        "order": "2",
        "jsx": "import { VirtualList } from '@alifd/next';\n\nconst dataSource = [];\n\nfunction generateLi(index) {\n    if (index % 3 === 0) {\n        return (<li key={`key-${index}`} style={{lineHeight: '30px', background: '#5f83ff', color: '#fff'}}>key-{index}</li>);\n    } else {\n        return (<li key={`key-${index}`}  style={{lineHeight: '20px'}}>key-{index}</li>);\n    }\n}\nfunction generateData(len) {\n    for (let i = 0; i < len; i++) {\n        dataSource.push(generateLi(i));\n    }\n}\n\nclass App extends React.Component  {\n    state = {\n        initial: 20,\n        dataSource: generateData(1000)\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            const instance = this.refs.virtual.getInstance();\n            instance.scrollTo(50);\n        }, 200);\n\n    }\n\n    getHeight(index) {\n        return index % 3 === 0 ? 30 : 20;\n    }\n\n    onClick() {\n        this.setState({\n            initial: this.state.initial + 20\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.onClick.bind(this)}>jump to {this.state.initial + 20}</button>\n                <br/>\n                <br/>\n                <div className={'virtual-box'}>\n                    <VirtualList ref=\"virtual\" jumpIndex={this.state.initial} itemSizeGetter={this.getHeight.bind(this)}>\n                        {dataSource}\n                    </VirtualList>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n",
        "css": ".virtual-box {\n    height: 200px;\n    width: 200px;\n    border: 1px solid #ddd;\n    overflow: auto;\n}\n.virtual-box ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n}\n.virtual-box li {\n    padding-left: 10px;\n    border-bottom: 1px solid #333;\n}\n",
        "body": "\n<p>使用 jumpIndex 设置初始位置, 并设置 itemSizeGetter</p>\n"
      }
    ]
  }
]