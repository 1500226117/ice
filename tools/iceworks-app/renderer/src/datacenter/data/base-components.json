[
  {
    "name": "Accordion",
    "category": "Components",
    "title": "手风琴",
    "type": "布局",
    "importStatement": "import { Accordion } from '@icedesign/base';",
    "body": "\n\n## 开发指南\n\n### 何时使用\n\n可以折叠/展开的内容区域。\n\n",
    "propsSchema": {
      "name": "Accordion",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "组件接受行内样式",
          "docblock": "组件接受行内样式",
          "properties": []
        },
        "dataSource": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "使用数据模型构建",
          "docblock": "使用数据模型构建"
        },
        "singleShrink": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "如果这个属性为true, 在single为true时, 组件可以收起全部子元素",
          "docblock": "如果这个属性为true, 在single为true时, 组件可以收起全部子元素"
        },
        "single": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否只能展开1个",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否只能展开1个"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "接收一个回调函数传递改变状态, 在使用dataSource时改回调需要产生改变组件才能生效",
          "docblock": "接收一个回调函数传递改变状态, 在使用dataSource时改回调需要产生改变组件才能生效",
          "params": [],
          "returns": null
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "扩展class",
          "docblock": "扩展class"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Panel",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "docblock": "样式类名的品牌前缀"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "子组件接受行内样式",
              "docblock": "子组件接受行内样式",
              "properties": []
            },
            "expanded": {
              "type": {
                "name": "bool"
              },
              "required": true,
              "description": "是否展开",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否展开"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": true,
              "description": "是否禁止用户操作",
              "docblock": "是否禁止用户操作"
            },
            "title": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "标题",
              "defaultValue": {
                "value": "''",
                "computed": false
              },
              "docblock": "标题"
            },
            "multiTitle": {
              "type": {
                "name": "bool"
              },
              "required": true,
              "description": "标题是否多行显示",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "标题是否多行显示"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "扩展class",
              "docblock": "扩展class"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nstyle | 组件接受行内样式 | Object | -\ndataSource | 使用数据模型构建 | Array | -\nsingleShrink | 如果这个属性为true, 在single为true时, 组件可以收起全部子元素 | Boolean | -\nsingle | 是否只能展开1个 | Boolean | false\nonChange | 接收一个回调函数传递改变状态, 在使用dataSource时改回调需要产生改变组件才能生效<br><br>**签名**:<br>Function() => void | Function | -\nclassName | 扩展class | String | -\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Panel",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | -\nstyle | 子组件接受行内样式 | Object | -\nexpanded | 是否展开 | Boolean | false\ndisabled | 是否禁止用户操作 | Boolean | -\ntitle | 标题 | ReactNode | ''\nmultiTitle | 标题是否多行显示 | Boolean | false\nclassName | 扩展class | String | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Accordion } from \"@icedesign/base\";\n\nconst { Panel } = Accordion;\n\nReactDOM.render(\n  <Accordion>\n    <Panel\n      multiTitle\n      title=\"There is a long title, you can set the multiTitle to multi line display, the associated configuration properties and a single height is not the same, the specific configuration platform configuration can be configured.\"\n    >\n      <ul>\n        <li>Promotions are marketing campaigns ran by Marketplace</li>\n        <li>\n          Participate to sale your products during that promotion and make a\n          profit\n        </li>\n      </ul>\n    </Panel>\n    <Panel title=\"What are Promotion Products?\">\n      <ul>\n        <li>\n          Promotion Products is a service that helps you to promote products you\n          list on Marketplace during a certain time range\n        </li>\n        <li>\n          You can choose which products should be available for the promotion\n        </li>\n        <li>\n          Not all Products of you will be available, because Promotions will\n          only attract certain Product areas\n        </li>\n      </ul>\n    </Panel>\n    <Panel title=\"Why can i not submit a higher price?\">\n      <ul>\n        <li>\n          The Promotion requires a certain price to make sure that our customers\n          are attracted\n        </li>\n      </ul>\n    </Panel>\n    <Panel title=\"What is Promo Stock?\">\n      Promo Stock is the criteria needed to be followed to be able to join\n      Promotion. With setting particular Promo Stock value you commit to have\n      this amount of stock available while Promotion is active.\n    </Panel>\n  </Accordion>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\nAccordion接受子组件Panel展示信息。Panel可设置：title(标题)、disable(是否可操作)等属性，其中title、content值可为字符串或<strong>Component组件</strong>，expand、disable接受布尔值。\n\n"
      },
      {
        "title": "外部综合操作",
        "order": "4",
        "jsx": "import { Accordion, Button } from \"@icedesign/base\";\n\nconst list = [\n  {\n    title: \"Well, hello there\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Gigantomaniac Monster Text, very long, much width, wow\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Generic Title\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Login Infomation\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      list: list,\n      single: false\n    };\n  }\n\n  onChange(status, list) {\n    console.log(status);\n\n    //重新拼装list, 使改变生效\n    this.setState({\n      list\n    });\n  }\n\n  showAll() {\n    this.setState({\n      list: this.state.list.map(e => {\n        return Object.assign({}, e, { expanded: true });\n      })\n    });\n  }\n\n  closeAll() {\n    this.setState({\n      list: this.state.list.map(e => {\n        return Object.assign({}, e, { expanded: false });\n      })\n    });\n  }\n\n  setSingle() {\n    this.setState({\n      single: true\n    });\n  }\n\n  cancelSingle() {\n    this.setState({\n      single: false\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"demo\">\n        <p>\n          外部控制：\n          <Button onClick={this.showAll.bind(this)}>展开全部</Button>\n          <Button onClick={this.closeAll.bind(this)}>收起全部</Button>\n          <Button onClick={this.setSingle.bind(this)}>单例模式</Button>\n          <Button onClick={this.cancelSingle.bind(this)}>多例模式</Button>\n        </p>\n        <br />\n        <Accordion\n          single={this.state.single}\n          onChange={this.onChange.bind(this)}\n          dataSource={this.state.list}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".demo button {\n    margin-right: 5px;\n}\n",
        "body": "\nAccordion的onChange属性接受一个事件, 事件返回点击后的状态, 外部接收这个值传递给dataSource让Accordion发生改变\ndataSource接受一个数组, 数组元素为一个对象, 包含属性：title(标题)、content(内容)、disable(是否可操作)等属性，其中title、content值可为字符串或<strong>Component组件</strong>，expanded、disable接受布尔值。\nAccordion的dataSource属性接受一个状态数组与外部state对应。\n\n"
      },
      {
        "title": "disabled 禁止操作",
        "order": "2",
        "jsx": "import { Accordion } from \"@icedesign/base\";\n\nconst list = [\n  {\n    title: \"Well, hello there\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\",\n    disabled: true\n  },\n  {\n    title: \"Gigantomaniac Monster Text, very long, much width, wow\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\",\n    disabled: true\n  },\n  {\n    title: \"Generic Title\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\",\n    disabled: true\n  },\n  {\n    title: \"Login Infomation\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\",\n    disabled: true\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      list: list\n    };\n  }\n\n  onChange(status) {\n    //点击后的status : [true, false, false, false]\n\n    //重新拼装list, 使改变生效\n    this.setState({\n      list: this.state.list.map((e, k) => {\n        return Object.assign({}, e, { expanded: status[k] });\n      })\n    });\n  }\n\n  render() {\n    return (\n      <Accordion\n        onChange={this.onChange.bind(this)}\n        dataSource={this.state.list}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n若dataSource属性内对disable为true, 鼠标点击将无效。\n\n"
      },
      {
        "title": "单例模式",
        "order": "3",
        "jsx": "import { Accordion } from \"@icedesign/base\";\n\nconst list = [\n  {\n    title: \"Well, hello there\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Gigantomaniac Monster Text, very long, much width, wow\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Generic Title\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  },\n  {\n    title: \"Login Infomation\",\n    content:\n      \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      list: list\n    };\n  }\n\n  onChange(status) {\n    //点击后的status : [true, false, false, false]\n\n    //重新拼装list, 使改变生效\n    this.setState({\n      list: this.state.list.map((e, k) => {\n        return Object.assign({}, e, { expanded: status[k] });\n      })\n    });\n  }\n\n  render() {\n    return (\n      <Accordion\n        single\n        onChange={this.onChange.bind(this)}\n        dataSource={this.state.list}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\nAccordion的single属性接受一个布尔值, 若为true, 最多只能有一个组件展开。\n\n"
      }
    ]
  },
  {
    "name": "Affix",
    "category": "Components",
    "title": "固钉",
    "type": "基本",
    "importStatement": "import { Affix } from '@icedesign/base';",
    "body": "\n## Guide\n\n### 何时使用\n\n当用户需要将某个组件固定在页面的某个位置时，可以使用 Affix 组件进行固定。\n\n",
    "propsSchema": {
      "name": "Affix",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "品牌样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "品牌样式前缀"
        },
        "container": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "设置 Affix 需要监听滚动事件的容器元素",
          "defaultValue": {
            "value": "() => window",
            "computed": false
          },
          "docblock": "设置 Affix 需要监听滚动事件的容器元素\n@return {ReactElement} 目标容器元素的实例",
          "params": [],
          "returns": {
            "description": "目标容器元素的实例",
            "type": {
              "name": "ReactElement"
            }
          }
        },
        "offsetTop": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "距离窗口顶部达到指定偏移量后触发",
          "docblock": "距离窗口顶部达到指定偏移量后触发"
        },
        "offsetBottom": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "距离窗口底部达到制定偏移量后触发",
          "docblock": "距离窗口底部达到制定偏移量后触发"
        },
        "onAffix": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "当元素的样式发生固钉样式变化时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "当元素的样式发生固钉样式变化时触发的回调函数\n@param {Boolean} affixed 元素是否被固钉",
          "params": [
            {
              "name": "affixed",
              "description": "元素是否被固钉",
              "type": {
                "name": "Boolean"
              }
            }
          ],
          "returns": null
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义样式类名",
          "docblock": "自定义样式类名"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 品牌样式前缀 | String | 'next-'\ncontainer | 设置 Affix 需要监听滚动事件的容器元素<br><br>**签名**:<br>Function() => ReactElement<br>**返回值**:<br>{ReactElement} 目标容器元素的实例<br> | Function | () =&gt; window\noffsetTop | 距离窗口顶部达到指定偏移量后触发 | Number | -\noffsetBottom | 距离窗口底部达到制定偏移量后触发 | Number | -\nonAffix | 当元素的样式发生固钉样式变化时触发的回调函数<br><br>**签名**:<br>Function(affixed: Boolean) => void<br>**参数**:<br>*affixed*: {Boolean} 元素是否被固钉 | Function | () =&gt; {}\nclassName | 自定义样式类名 | String | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Affix, Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div className=\"custom-affix-wrapper\">\n    <Affix>\n      <Button type=\"secondary\">Affixed Button</Button>\n    </Affix>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".custom-affix-wrapper {\n    padding: 40px 0;\n}\n",
        "body": "\n也就意味着当页面往下滚动时，当 Affix 元素接触到浏览器边框时，此时会将 Affix 钉住。\n最简单的用法。默认情况下，Affix 的默认目标容器元素是整个 `window`，并且 `offsetTop = 0`，\n\n"
      },
      {
        "title": "自定义目标容器",
        "order": "2",
        "jsx": "import { Affix, Button } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  _containerRefHandler(ref) {\n    this.container = ref;\n  }\n\n  render() {\n    return (\n      <div\n        className=\"custom-affix-container\"\n        ref={this._containerRefHandler.bind(this)}\n      >\n        <div className=\"a-wrapper\">\n          <Affix\n            container={() => this.container}\n            offsetTop={0}\n            onAffix={affixed => console.log(affixed)}\n          >\n            <Button type=\"secondary\">Affixed Button</Button>\n          </Affix>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".custom-affix-container {\n    height: 150px;\n    overflow-y: scroll;\n    background: url(https://img.alicdn.com/tfs/TB1AbJXSpXXXXXJXpXXXXXXXXXX-32-32.jpg) repeat 50% 50%;\n}\n\n.custom-affix-container .a-wrapper {\n    padding-top: 50px;\n    height: 500px;\n}\n",
        "body": "\n可以通过 `container` 属性设置 Affix 组件需要监听其滚动事件的元素，该属性接收一个函数作为参数，默认为 `() => window`。\n\n"
      },
      {
        "title": "自定义偏移量",
        "order": "1",
        "jsx": "import { Affix, Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div className=\"custom-affix-wrapper\">\n    <Affix offsetBottom={0}>\n      <Button type=\"secondary\">Affixed Button</Button>\n    </Affix>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".custom-affix-wrapper {\n    padding: 40px 0;\n}\n",
        "body": "\n可以通过 `offsetTop` 或 `offsetBottom` 自定义偏移量。\n\n"
      }
    ]
  },
  {
    "name": "Animate",
    "category": "Utility",
    "title": "动画",
    "importStatement": "import { Animate } from '@icedesign/base';",
    "body": "\n\n## 开发指南\n\n### 何时使用\n\n需要自定义动效\n\n",
    "propsSchema": {
      "name": "Animate",
      "props": {
        "animation": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false,
          "description": "配置动画的播放方式, 详见[animation](#animation)",
          "defaultValue": {
            "value": "{\n    appear: noop,\n    enter: noop,\n    leave: noop\n}",
            "computed": false
          },
          "docblock": "配置动画的播放方式, 详见[animation](#animation)"
        },
        "afterAppear": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "在初始动画播放完毕触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "在初始动画播放完毕触发的事件",
          "params": [],
          "returns": null
        },
        "afterEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "在进场动画播放完毕触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "在进场动画播放完毕触发的事件",
          "params": [],
          "returns": null
        },
        "afterLeave": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "在离开动画播放完毕触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "在离开动画播放完毕触发的事件",
          "params": [],
          "returns": null
        },
        "component": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "在针对多个子节点播放动画的时候包裹的标签",
          "docblock": "在针对多个子节点播放动画的时候包裹的标签"
        },
        "singleMode": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否是有单个节点，如果有多个动画的孩子节点，设置该选项为false",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否是有单个节点，如果有多个动画的孩子节点，设置该选项为false"
        },
        "animationAppear": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否在初始的时候播放动画",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否在初始的时候播放动画"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nanimation | 配置动画的播放方式, 详见[animation](#animation) | String/Object | {     appear: noop,     enter: noop,     leave: noop }\nafterAppear | 在初始动画播放完毕触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterEnter | 在进场动画播放完毕触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterLeave | 在离开动画播放完毕触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\ncomponent | 在针对多个子节点播放动画的时候包裹的标签 | any | -\nsingleMode | 是否是有单个节点，如果有多个动画的孩子节点，设置该选项为false | Boolean | true\nanimationAppear | 是否在初始的时候播放动画 | Boolean | true\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Animate, Button, Select } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    enter: \"fadeInLeft\",\n    leave: \"fadeOutRight\",\n    visible: false\n  };\n  componentDidMount() {\n    this.onClick();\n  }\n  render() {\n    const animation = {\n      enter: this.state.enter,\n      leave: this.state.leave\n    };\n\n    return (\n      <div>\n        <Animate\n          singleMode={false}\n          animation={animation}\n          afterEnter={this.afterEnter}\n          afterLeave={this.afterLeave}\n          className=\"demo\"\n        >\n          {this.state.visible ? <div>Animate</div> : null}\n        </Animate>\n\n        <Selecter\n          defaultValue={{ in: this.state.enter, out: this.state.leave }}\n          onChange={this.onChange}\n        />\n\n        <Button onClick={this.onClick}>触发</Button>\n      </div>\n    );\n  }\n  onClick = () => {\n    this.setState({\n      visible: true\n    });\n\n    setTimeout(() => {\n      this.setState({\n        visible: false\n      });\n    }, 600);\n  };\n  onChange = animation => {\n    this.setState({\n      enter: animation.in,\n      leave: animation.out\n    });\n    this.onClick();\n  };\n  afterEnter() {\n    console.log(\"afterEnter\");\n  }\n  afterLeave() {\n    console.log(\"afterLeave\");\n  }\n}\n\n/* eslint-disable react/no-multi-comp */\nclass Selecter extends React.Component {\n  constructor(props) {\n    super(props);\n    if (props.defaultValue) {\n      this.state = {\n        in: props.defaultValue.in,\n        out: props.defaultValue.out\n      };\n    } else {\n      this.state = {\n        in: \"fadeInLeft\",\n        out: \"fadeOutRight\"\n      };\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"selecter\">\n        <br />\n        <span>入场动画: </span>\n        <Select value={this.state.in} onChange={this.onChangeIn}>\n          {Animate.names.enter.map(i => {\n            return (\n              <option key={i} value={i}>\n                {i}\n              </option>\n            );\n          })}\n        </Select>\n\n        <span> 出场动画: </span>\n        <Select value={this.state.out} onChange={this.onChangeOut}>\n          {Animate.names.leave.map(i => {\n            return (\n              <option key={i} value={i}>\n                {i}\n              </option>\n            );\n          })}\n        </Select>\n        <br />\n        <br />\n      </div>\n    );\n  }\n\n  onChangeIn = v => {\n    let animation = { ...this.state, in: v };\n    this.setState(animation);\n    this.props.onChange && this.props.onChange(animation);\n  };\n  onChangeOut = v => {\n    let animation = { ...this.state, out: v };\n    this.setState(animation);\n    this.props.onChange && this.props.onChange(animation);\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo {\n    color: #00BCD4;\n    display: block;\n    height: 100px;\n    line-height: 100px;\n    text-align: center;\n    font-size: 36px;\n    background-color: #ddd;\n}\n.selecter .next-select {\n    vertical-align: middle;\n}\n",
        "body": "\n动效API使用\n\n"
      },
      {
        "title": "class控制动画",
        "order": "1",
        "jsx": "import { Animate, Button, Select } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    enter: \"fadeInLeftBig\",\n    leave: \"fadeOutRightBig\",\n    className: \"\"\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"demo\">\n          <div className={this.state.className}>Aniamte</div>\n        </div>\n\n        <Selecter\n          defaultValue={{ in: this.state.enter, out: this.state.leave }}\n          onChange={this.onChange}\n        />\n\n        <Button onClick={this.onClick}>触发</Button>\n      </div>\n    );\n  }\n  onClick = () => {\n    this.setState({\n      className: this.state.enter\n    });\n\n    setTimeout(() => {\n      this.setState({\n        className: this.state.leave\n      });\n      setTimeout(() => {\n        this.setState({\n          className: \"\"\n        });\n      }, 300);\n    }, 300);\n  };\n  onChange = animation => {\n    this.setState({\n      enter: animation.in,\n      leave: animation.out,\n      className: animation.in\n    });\n\n    setTimeout(() => {\n      this.onClick();\n    }, 0);\n  };\n}\n\n/* eslint-disable react/no-multi-comp */\nclass Selecter extends React.Component {\n  constructor(props) {\n    super(props);\n    if (props.defaultValue) {\n      this.state = {\n        in: props.defaultValue.in,\n        out: props.defaultValue.out\n      };\n    } else {\n      this.state = {\n        in: \"fadeInLeft\",\n        out: \"fadeOutRight\"\n      };\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"selecter\">\n        <br />\n        <span>入场动画: </span>\n        <Select value={this.state.in} onChange={this.onChangeIn}>\n          {Animate.names.enter.map(i => {\n            return (\n              <option key={i} value={i}>\n                {i}\n              </option>\n            );\n          })}\n        </Select>\n\n        <span> 出场动画: </span>\n        <Select value={this.state.out} onChange={this.onChangeOut}>\n          {Animate.names.leave.map(i => {\n            return (\n              <option key={i} value={i}>\n                {i}\n              </option>\n            );\n          })}\n        </Select>\n        <br />\n        <br />\n      </div>\n    );\n  }\n\n  onChangeIn = v => {\n    let animation = { ...this.state, in: v };\n    this.setState(animation);\n    this.props.onChange && this.props.onChange(animation);\n  };\n  onChangeOut = v => {\n    let animation = { ...this.state, out: v };\n    this.setState(animation);\n    this.props.onChange && this.props.onChange(animation);\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo {\n    color: #00BCD4;\n    display: block;\n    height: 100px;\n    line-height: 100px;\n    text-align: center;\n    font-size: 36px;\n    background-color: #ddd;\n}\n.selecter .next-select {\n    vertical-align: middle;\n}\n",
        "body": "\nclassName 用法\n\n"
      },
      {
        "title": "入场出场",
        "order": "2",
        "jsx": "import { Animate } from \"@icedesign/base\";\n\nconst animation = {\n  enter: \"expandInDown\",\n  leave: \"expandOutUp\"\n};\n\nclass App extends React.Component {\n  state = {\n    items: []\n  };\n  render() {\n    return (\n      <div className=\"demo2\">\n        <div className=\"element\">\n          <div className=\"addbtn\" onClick={this.addItem.bind(this)}>\n            Add item\n          </div>\n          <Animate\n            singleMode={false}\n            animation={animation}\n            afterEnter={this.afterEnter}\n            afterLeave={this.afterLeave}\n          >\n            {this.state.items}\n          </Animate>\n        </div>\n      </div>\n    );\n  }\n  addItem() {\n    let { items } = this.state,\n      key = Date.now(),\n      item = (\n        <div key={key}>\n          {\" \"}\n          <a href=\"javascript:;\" onClick={this.removeItem.bind(this, key)}>\n            Remove\n          </a>\n        </div>\n      );\n\n    items.push(item);\n    this.setState({ items });\n  }\n  removeItem(key) {\n    let { items } = this.state,\n      i,\n      list = items.slice();\n\n    list.forEach((item, index) => {\n      if (item.key == key) {\n        i = index;\n      }\n    });\n    if (i > -1) {\n      list.splice(i, 1);\n      this.setState({ items: list });\n    }\n  }\n  afterEnter() {\n    console.log(\"afterEnter\");\n  }\n  afterLeave() {\n    console.log(\"afterLeave\");\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo2 {\n    color: #4C4C4C;\n    height: 400px;\n    background-color: #eee;\n    margin: 0 auto;\n    padding-top: 30px;\n}\n.element{\n    width: 300px;\n    margin: 70px auto;\n    color: #000;\n    text-align: center;\n}\n.element span div{\n    height: 30px;\n    background-color: #4C4C4C;\n    border-bottom: 1px solid #eee;\n    cursor: pointer;\n    transition: all 1s;\n\n}\n.addbtn{\n   cursor: pointer;\n   background-color: #2196F3;\n   height: 40px;\n   line-height: 40px;\n}\n.element a {\n    color: white;\n    line-height: 30px;\n}\n",
        "body": "\n入场出场\n\n"
      }
    ]
  },
  {
    "name": "Badge",
    "category": "Components",
    "title": "徽标数",
    "type": "展示",
    "importStatement": "import { Badge } from '@icedesign/base';",
    "body": "\n\n## 开发指南\n\n### 何时使用\n在有新消息，讯息时，或者是app/插件/功能模块可以更新，升级时使用这个组件。\n\n",
    "propsSchema": {
      "name": "Badge",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内连样式",
          "docblock": "自定义内连样式",
          "properties": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "徽章依托的内容",
          "docblock": "徽章依托的内容"
        },
        "count": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "展示的数字，大于 overflowCount 时显示为 ${overflowCount}+，为 0 时隐藏",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "docblock": "展示的数字，大于 overflowCount 时显示为 ${overflowCount}+，为 0 时隐藏"
        },
        "overflowCount": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "展示的封顶的数字",
          "defaultValue": {
            "value": "99",
            "computed": false
          },
          "docblock": "展示的封顶的数字"
        },
        "dot": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "不展示数字，只展示一个小红点",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "不展示数字，只展示一个小红点"
        },
        "align": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'left'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "徽章显示的位置",
          "docblock": "徽章显示的位置"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内连样式 | Object | -\nchildren | 徽章依托的内容 | ReactNode | -\ncount | 展示的数字，大于 overflowCount 时显示为 ${overflowCount}+，为 0 时隐藏 | Number/String | 0\noverflowCount | 展示的封顶的数字 | Number/String | 99\ndot | 不展示数字，只展示一个小红点 | Boolean | false\nalign | 徽章显示的位置<br><br>**可选值**:<br>'left' | Enum | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Badge } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Badge count={5}>\n    <a href=\"#\" className=\"basic-example\" />\n  </Badge>,\n  mountNode\n);\n\n",
        "css": ".basic-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 50%;\n    background: #eee;\n}\n",
        "body": "\n简单的徽章展示。\n\n"
      },
      {
        "title": "动态",
        "order": "5",
        "jsx": "import { Badge, Button, Icon } from \"@icedesign/base\";\n\nconst ButtonGroup = Button.Group;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 5,\n      show: true\n    };\n\n    this.increase = this.increase.bind(this);\n    this.decrease = this.decrease.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  increase() {\n    const count = this.state.count + 1;\n    this.setState({ count });\n  }\n\n  decrease() {\n    let count = this.state.count - 1;\n    if (count < 0) {\n      count = 0;\n    }\n    this.setState({ count });\n  }\n\n  onClick() {\n    this.setState({\n      show: !this.state.show\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"change-count\">\n          <Badge count={this.state.count}>\n            <a href=\"#\" className=\"head-example\" />\n          </Badge>\n          <ButtonGroup>\n            <Button onClick={this.increase}>\n              <Icon type=\"add\" />\n            </Button>\n            <Button onClick={this.decrease}>\n              <Icon type=\"subtract\" />\n            </Button>\n          </ButtonGroup>\n        </div>\n        <div>\n          <Badge dot={this.state.show}>\n            <a href=\"#\" className=\"head-example\" />\n          </Badge>\n          <Button onClick={this.onClick}>切换红点显隐</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".next-badge {\n    margin-right: 16px;\n}\n.change-count {\n    margin-bottom: 16px;\n}\n.head-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 50%;\n    background: #eee;\n}\n",
        "body": "\n展示动态变化的效果。\n\n"
      },
      {
        "title": "小红点展示在左侧",
        "order": "4",
        "jsx": "import { Badge } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <ul className=\"next-badge-list-wrapper\">\n      <li>\n        <Badge dot align=\"left\">\n          列表前面的小圆点\n        </Badge>\n      </li>\n      <li>\n        <Badge dot align=\"left\">\n          列表前面的小圆点\n        </Badge>\n      </li>\n      <li>\n        <Badge dot align=\"left\">\n          列表前面的小圆点\n        </Badge>\n      </li>\n    </ul>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n放在列表前面的小红点。\n\n"
      },
      {
        "title": "讨嫌的小红点",
        "order": "3",
        "jsx": "import { Badge, Icon } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Badge dot>\n      <Icon type=\"email\" />\n    </Badge>\n    <Badge dot>\n      <a href=\"#\">一个链接</a>\n    </Badge>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-badge {\n    margin-right: 16px;\n}\n",
        "body": "\n没有具体的数字。\n\n"
      },
      {
        "title": "独立使用",
        "order": "2",
        "jsx": "import { Badge } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Badge count={25} />\n    <Badge\n      count={4}\n      style={{\n        backgroundColor: \"#fff\",\n        color: \"#999\",\n        border: \"1px solid #d9d9d9\"\n      }}\n    />\n    <Badge count={109} style={{ backgroundColor: \"#87d068\" }} />\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-badge {\n    margin-right: 16px;\n}\n",
        "body": "\n不包裹任何元素即独立使用，可自定样式展示。\n\n"
      },
      {
        "title": "大数字",
        "order": "1",
        "jsx": "import { Badge } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Badge count={100}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n    <Badge count={200} overflowCount={199}>\n      <a href=\"#\" className=\"head-example\" />\n    </Badge>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-badge {\n    margin-right: 16px;\n}\n.head-example {\n    display: inline-block;\n    width: 42px;\n    height: 42px;\n    border-radius: 50%;\n    background: #eee;\n}\n",
        "body": "\n超过overflow的数值，会显示`${overflow}+`，overflow默认值为`99`。\n\n"
      }
    ]
  },
  {
    "name": "Balloon",
    "category": "Components",
    "title": "气泡提示",
    "type": "弹层",
    "importStatement": "import { Balloon } from '@icedesign/base';",
    "body": "\n\n## 开发指南\n\n气泡组件\n\n### 何时使用\n\n-   当用户与被说明对象（文字，图片，输入框等）发生交互行为的action开始时, 即刻跟随动作出现一种辅助或帮助的提示信息。\n-   其中Balloon.Tooltip是简化版本，主要用于hover时显示简单文案。\n\n### 使用注意\n\n-   对于trigger是自定义的React Component的情况，自定义的React Component 需要透传onMouseEnter/onMouseLeave/onClick 事件。\n\n",
    "propsSchema": {
      "name": "Balloon",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内敛样式",
          "docblock": "自定义内敛样式",
          "properties": []
        },
        "children": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "浮层的内容",
          "docblock": "浮层的内容"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "样式类型",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "样式类型"
        },
        "visible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "弹层当前显示的状态",
          "docblock": "弹层当前显示的状态"
        },
        "defaultVisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "弹层默认显示的状态",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "弹层默认显示的状态"
        },
        "onVisibleChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "弹层在显示和隐藏触发的事件",
          "docblock": "弹层在显示和隐藏触发的事件\n@param {Boolean} visible 弹层是否隐藏和显示",
          "params": [
            {
              "name": "visible",
              "description": "弹层是否隐藏和显示",
              "type": {
                "name": "Boolean"
              }
            }
          ],
          "returns": null
        },
        "alignment": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false,
                "description": "普通对齐 箭头居中"
              },
              {
                "value": "'edge'",
                "computed": false,
                "description": "边缘对齐 箭头可在trigger的边缘"
              }
            ]
          },
          "required": false,
          "description": "弹出层对齐方式",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "弹出层对齐方式\n@enumdesc 普通对齐 箭头居中, 边缘对齐 箭头可在trigger的边缘",
          "value": [
            {
              "value": "'normal'",
              "computed": false,
              "description": "普通对齐 箭头居中"
            },
            {
              "value": "'edge'",
              "computed": false,
              "description": "边缘对齐 箭头可在trigger的边缘"
            }
          ]
        },
        "closable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示关闭按钮",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示关闭按钮"
        },
        "align": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'t'",
                "computed": false,
                "description": "上"
              },
              {
                "value": "'r'",
                "computed": false,
                "description": "右"
              },
              {
                "value": "'b'",
                "computed": false,
                "description": "下"
              },
              {
                "value": "'l'",
                "computed": false,
                "description": "左"
              },
              {
                "value": "'tl'",
                "computed": false,
                "description": "上左"
              },
              {
                "value": "'tr'",
                "computed": false,
                "description": "上右"
              },
              {
                "value": "'bl'",
                "computed": false,
                "description": "下左"
              },
              {
                "value": "'br'",
                "computed": false,
                "description": "下右"
              },
              {
                "value": "'lt'",
                "computed": false,
                "description": "左上"
              },
              {
                "value": "'lb'",
                "computed": false,
                "description": "左下"
              },
              {
                "value": "'rt'",
                "computed": false,
                "description": "右上"
              },
              {
                "value": "'rb'",
                "computed": false,
                "description": "右下"
              }
            ]
          },
          "required": false,
          "description": "弹出层位置",
          "defaultValue": {
            "value": "'b'",
            "computed": false
          },
          "docblock": "弹出层位置\n@enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下",
          "value": [
            {
              "value": "'t'",
              "computed": false,
              "description": "上"
            },
            {
              "value": "'r'",
              "computed": false,
              "description": "右"
            },
            {
              "value": "'b'",
              "computed": false,
              "description": "下"
            },
            {
              "value": "'l'",
              "computed": false,
              "description": "左"
            },
            {
              "value": "'tl'",
              "computed": false,
              "description": "上左"
            },
            {
              "value": "'tr'",
              "computed": false,
              "description": "上右"
            },
            {
              "value": "'bl'",
              "computed": false,
              "description": "下左"
            },
            {
              "value": "'br'",
              "computed": false,
              "description": "下右"
            },
            {
              "value": "'lt'",
              "computed": false,
              "description": "左上"
            },
            {
              "value": "'lb'",
              "computed": false,
              "description": "左下"
            },
            {
              "value": "'rt'",
              "computed": false,
              "description": "右上"
            },
            {
              "value": "'rb'",
              "computed": false,
              "description": "右下"
            }
          ]
        },
        "offset": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "弹层相对于trigger的定位的微调",
          "defaultValue": {
            "value": "[0, 0]",
            "computed": false
          },
          "docblock": "弹层相对于trigger的定位的微调"
        },
        "trigger": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "触发元素",
          "defaultValue": {
            "value": "<span></span>",
            "computed": false
          },
          "docblock": "触发元素"
        },
        "triggerType": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'hover'",
                "computed": false,
                "description": "鼠标悬浮"
              },
              {
                "value": "'focus'",
                "computed": false,
                "description": "获取到焦点"
              },
              {
                "value": "'click'",
                "computed": false,
                "description": "鼠标点击"
              }
            ]
          },
          "required": false,
          "description": "触发行为",
          "defaultValue": {
            "value": "'hover'",
            "computed": false
          },
          "docblock": "触发行为\n@enumdesc 鼠标悬浮, 获取到焦点, 鼠标点击",
          "value": [
            {
              "value": "'hover'",
              "computed": false,
              "description": "鼠标悬浮"
            },
            {
              "value": "'focus'",
              "computed": false,
              "description": "获取到焦点"
            },
            {
              "value": "'click'",
              "computed": false,
              "description": "鼠标点击"
            }
          ]
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "任何visible为false时会触发的事件",
          "defaultValue": {
            "value": "() => {\n}",
            "computed": false
          },
          "docblock": "任何visible为false时会触发的事件",
          "params": [],
          "returns": null
        },
        "onCloseClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "点击关闭按钮的click事件",
          "defaultValue": {
            "value": "() => {\n}",
            "computed": false
          },
          "docblock": "点击关闭按钮的click事件",
          "params": [],
          "returns": null
        },
        "needAdjust": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否进行自动位置调整",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否进行自动位置调整"
        },
        "delay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "弹层在触发以后的延时显示",
          "docblock": "弹层在触发以后的延时显示"
        },
        "afterClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层关闭后触发的事件, 如果有动画，则在动画结束后触发",
          "defaultValue": {
            "value": "() => {\n}",
            "computed": false
          },
          "docblock": "浮层关闭后触发的事件, 如果有动画，则在动画结束后触发",
          "params": [],
          "returns": null
        },
        "shouldUpdatePosition": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "强制更新定位信息",
          "docblock": "强制更新定位信息"
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "弹层出现后是否自动focus到内部第一个元素",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "弹层出现后是否自动focus到内部第一个元素"
        },
        "safeNode": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "docblock": "安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象"
        },
        "safeId": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "用来指定safeNode节点的id，和safeNode配合使用",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "用来指定safeNode节点的id，和safeNode配合使用"
        },
        "animation": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "配置动画的播放方式",
          "defaultValue": {
            "value": "{\n    in: 'zoomIn',\n    out: 'zoomOut'\n}",
            "computed": false
          },
          "docblock": "配置动画的播放方式\n@param {String} in 进场动画\n@param {String} out 出场动画"
        },
        "cache": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "弹层的dom节点关闭时是否删除",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "弹层的dom节点关闭时是否删除"
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。",
          "docblock": "指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Tooltip",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内敛样式",
              "docblock": "自定义内敛样式",
              "properties": []
            },
            "align": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'t'",
                    "computed": false,
                    "description": "上"
                  },
                  {
                    "value": "'r'",
                    "computed": false,
                    "description": "右"
                  },
                  {
                    "value": "'b'",
                    "computed": false,
                    "description": "下"
                  },
                  {
                    "value": "'l'",
                    "computed": false,
                    "description": "左"
                  },
                  {
                    "value": "'tl'",
                    "computed": false,
                    "description": "上左"
                  },
                  {
                    "value": "'tr'",
                    "computed": false,
                    "description": "上右"
                  },
                  {
                    "value": "'bl'",
                    "computed": false,
                    "description": "下左"
                  },
                  {
                    "value": "'br'",
                    "computed": false,
                    "description": "下右"
                  },
                  {
                    "value": "'lt'",
                    "computed": false,
                    "description": "左上"
                  },
                  {
                    "value": "'lb'",
                    "computed": false,
                    "description": "左下"
                  },
                  {
                    "value": "'rt'",
                    "computed": false,
                    "description": "右上"
                  },
                  {
                    "value": "'rb'",
                    "computed": false,
                    "description": "右下"
                  }
                ]
              },
              "required": false,
              "description": "弹出层位置",
              "defaultValue": {
                "value": "'b'",
                "computed": false
              },
              "docblock": "弹出层位置\n@enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下",
              "value": [
                {
                  "value": "'t'",
                  "computed": false,
                  "description": "上"
                },
                {
                  "value": "'r'",
                  "computed": false,
                  "description": "右"
                },
                {
                  "value": "'b'",
                  "computed": false,
                  "description": "下"
                },
                {
                  "value": "'l'",
                  "computed": false,
                  "description": "左"
                },
                {
                  "value": "'tl'",
                  "computed": false,
                  "description": "上左"
                },
                {
                  "value": "'tr'",
                  "computed": false,
                  "description": "上右"
                },
                {
                  "value": "'bl'",
                  "computed": false,
                  "description": "下左"
                },
                {
                  "value": "'br'",
                  "computed": false,
                  "description": "下右"
                },
                {
                  "value": "'lt'",
                  "computed": false,
                  "description": "左上"
                },
                {
                  "value": "'lb'",
                  "computed": false,
                  "description": "左下"
                },
                {
                  "value": "'rt'",
                  "computed": false,
                  "description": "右上"
                },
                {
                  "value": "'rb'",
                  "computed": false,
                  "description": "右下"
                }
              ]
            },
            "text": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "tooltip 内部内容文案",
              "defaultValue": {
                "value": "''",
                "computed": false
              },
              "docblock": "tooltip 内部内容文案"
            },
            "trigger": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "触发元素",
              "defaultValue": {
                "value": "<span></span>",
                "computed": false
              },
              "docblock": "触发元素"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nchildren | 浮层的内容 | any | -\ntype | 样式类型<br><br>**可选值**:<br>'normal', 'primary' | Enum | 'normal'\nvisible | 弹层当前显示的状态 | Boolean | -\ndefaultVisible | 弹层默认显示的状态 | Boolean | false\nonVisibleChange | 弹层在显示和隐藏触发的事件<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>*visible*: {Boolean} 弹层是否隐藏和显示 | Function | -\nalignment | 弹出层对齐方式<br><br>**可选值**:<br>'normal'(普通对齐 箭头居中)<br>'edge'(边缘对齐 箭头可在trigger的边缘) | Enum | 'normal'\nclosable | 是否显示关闭按钮 | Boolean | true\nalign | 弹出层位置<br><br>**可选值**:<br>'t'(上)<br>'r'(右)<br>'b'(下)<br>'l'(左)<br>'tl'(上左)<br>'tr'(上右)<br>'bl'(下左)<br>'br'(下右)<br>'lt'(左上)<br>'lb'(左下)<br>'rt'(右上)<br>'rb'(右下) | Enum | 'b'\noffset | 弹层相对于trigger的定位的微调 | Array | [0, 0]\ntrigger | 触发元素 | any | &lt;span&gt;&lt;/span&gt;\ntriggerType | 触发行为<br><br>**可选值**:<br>'hover'(鼠标悬浮)<br>'focus'(获取到焦点)<br>'click'(鼠标点击) | Enum | 'hover'\nonClose | 任何visible为false时会触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonCloseClick | 点击关闭按钮的click事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nneedAdjust | 是否进行自动位置调整 | Boolean | false\ndelay | 弹层在触发以后的延时显示 | Number | -\nafterClose | 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nshouldUpdatePosition | 强制更新定位信息 | Boolean | -\nautoFocus | 弹层出现后是否自动focus到内部第一个元素 | Boolean | false\nsafeNode | 安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象 | String | undefined\nsafeId | 用来指定safeNode节点的id，和safeNode配合使用 | String | null\nanimation | 配置动画的播放方式 | Object/Boolean | {     in: 'zoomIn',     out: 'zoomOut' }\ncache | 弹层的dom节点关闭时是否删除 | Boolean | false\ncontainer | 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。 | String/Function | -\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Tooltip",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | -\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nalign | 弹出层位置<br><br>**可选值**:<br>'t'(上)<br>'r'(右)<br>'b'(下)<br>'l'(左)<br>'tl'(上左)<br>'tr'(上右)<br>'bl'(下左)<br>'br'(下右)<br>'lt'(左上)<br>'lb'(左下)<br>'rt'(右上)<br>'rb'(右下) | Enum | 'b'\ntext | tooltip 内部内容文案 | ReactNode | ''\ntrigger | 触发元素 | any | &lt;span&gt;&lt;/span&gt;\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "边缘对齐设置",
        "order": "3",
        "jsx": "import { Button, Balloon } from \"@icedesign/base\";\n\nconst top = (\n  <Button id=\"top\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上边\n  </Button>\n);\nconst right = (\n  <Button id=\"right\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右边\n  </Button>\n);\nconst bottom = (\n  <Button id=\"bottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下边\n  </Button>\n);\nconst left = (\n  <Button id=\"left\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左边\n  </Button>\n);\nconst topLeft = (\n  <Button id=\"topLeft\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上左\n  </Button>\n);\nconst topRight = (\n  <Button id=\"topRight\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上右\n  </Button>\n);\nconst rightTop = (\n  <Button id=\"rightTop\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右上\n  </Button>\n);\nconst rightBottom = (\n  <Button id=\"rightBottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右下\n  </Button>\n);\nconst bottomLeft = (\n  <Button id=\"bottomLeft\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下左\n  </Button>\n);\nconst bottomRight = (\n  <Button id=\"bottomRight\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下右\n  </Button>\n);\nconst leftTop = (\n  <Button id=\"leftTop\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左上\n  </Button>\n);\nconst leftBottom = (\n  <Button id=\"leftBottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左下\n  </Button>\n);\n\nconst Content = () => (\n  <div>\n    <h4 style={{ marginTop: 0 }}>balloon title</h4>\n    <hr />\n    <p>balloon content</p>\n  </div>\n);\n\nconst App = () => (\n  <div style={{ paddingLeft: 320, paddingTop: 100 }}>\n    <div style={{ marginLeft: 75 }}>\n      <Balloon\n        trigger={topLeft}\n        align=\"tl\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={top}\n        align=\"t\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={topRight}\n        align=\"tr\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ width: 80, float: \"left\" }}>\n      <Balloon\n        trigger={leftTop}\n        align=\"lt\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={left}\n        align=\"l\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={leftBottom}\n        align=\"lb\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ width: 80, marginLeft: 290 }}>\n      <Balloon\n        trigger={rightTop}\n        align=\"rt\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={right}\n        align=\"r\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={rightBottom}\n        align=\"rb\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ marginLeft: 80, clear: \"both\" }}>\n      <Balloon\n        trigger={bottomLeft}\n        align=\"bl\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={bottom}\n        align=\"b\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={bottomRight}\n        align=\"br\"\n        alignment=\"edge\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n  </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n位置有十二个方向。\n\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Button, Balloon } from \"@icedesign/base\";\n\nconst defaultTrigger = (\n  <Button className=\"btrigger\" style={{ margin: \"5px\" }}>\n    默认样式\n  </Button>\n);\nconst primary = (\n  <Button className=\"btrigger\" style={{ margin: \"5px\" }}>\n    强调样式\n  </Button>\n);\n\nconst Demo = () => (\n  <div className=\"container\">\n    <Balloon trigger={defaultTrigger} closable={false}>\n      default\n    </Balloon>\n    <Balloon type=\"primary\" trigger={primary} triggerType=\"click\">\n      primary\n    </Balloon>\n  </div>\n);\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n最简单的用法。\n\n"
      },
      {
        "title": "从浮层内关闭, 事件回调",
        "order": "4",
        "jsx": "import { Button, Balloon } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  hide() {\n    this.setState({\n      visible: false\n    });\n  }\n\n  // onVisibleChange事件会在所有visible属性被改变的时候触发;\n  // 比如对于click类型,会在点击button的时候触发和点击空白区域的时候触发;\n  // 对于hover类型,会在mouseentter,mouseleave的时候触发;\n  handleVisibleChange(visible) {\n    this.setState({ visible });\n  }\n\n  onClose() {\n    console.log(\"onClose doing!\");\n  }\n\n  afterClose() {\n    console.log(\"afterClose doing!\");\n  }\n  render() {\n    const visibleTrigger = (\n      <Button type=\"primary\" style={{ margin: \"5px\" }}>\n        点击弹出卡片\n      </Button>\n    );\n    const clickTrigger = (\n      <Button type=\"primary\" style={{ margin: \"5px\" }}>\n        hover弹出卡片\n      </Button>\n    );\n\n    const content = (\n      <div>\n        点击按钮操作<br />\n        <a style={{ right: 0 }} id=\"confirmBtn\" onClick={this.hide.bind(this)}>\n          确认\n        </a>\n        <a\n          style={{ marginLeft: \"4px\" }}\n          id=\"cancelBtn\"\n          onClick={this.hide.bind(this)}\n        >\n          关闭\n        </a>\n      </div>\n    );\n    return (\n      <div>\n        <Balloon\n          trigger={visibleTrigger}\n          triggerType=\"click\"\n          visible={this.state.visible}\n          onVisibleChange={this.handleVisibleChange.bind(this)}\n        >\n          {content}\n        </Balloon>\n        <Balloon\n          trigger={clickTrigger}\n          triggerType=\"hover\"\n          onClose={this.onClose.bind(this)}\n          afterClose={this.afterClose.bind(this)}\n        >\n          内容区域\n        </Balloon>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n使用 `visible` ,属性控制浮层显示, 使 balloon 变为受限组件。\n\n"
      },
      {
        "title": "嵌套浮层问题",
        "order": "6",
        "jsx": "import { Button, Balloon, DatePicker } from \"@icedesign/base\";\n\nconst primary = <Button className=\"btrigger\">primary</Button>;\nconst innerButton = <Button className=\"btrigger\">innerButton</Button>;\nconst App = () => (\n  <div className=\"container nested\">\n    <Balloon\n      type=\"primary\"\n      trigger={primary}\n      closable={false}\n      triggerType=\"click\"\n    >\n      <DatePicker\n        defaultValue=\"2016-10-10\"\n        container={trigger => trigger.parentNode}\n      />\n    </Balloon>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n    <Balloon\n      type=\"primary\"\n      trigger={innerButton}\n      closable={false}\n      triggerType=\"click\"\n    >\n      <Balloon\n        trigger={<Button type=\"primary\">please click</Button>}\n        container={trigger => trigger.parentNode}\n        triggerType=\"click\"\n      >\n        nesting balloon content\n      </Balloon>\n    </Balloon>\n  </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "\n.container.nested {\n    margin-left: 100px;\n    margin-bottom: 50px;\n}\n\n",
        "body": "\n浮层中如果又有浮层,比如在Balloon中有DatePicker的浮层,需要用safeNode解决datePicker选择时,balloon浮层关闭的问题.\n\n"
      },
      {
        "title": "close按钮事件，手动控制visible",
        "order": "5",
        "jsx": "import { Button, Balloon } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  // 一切改变visible为false的行为都会触发此事件\n  onClose() {\n    console.log(\"onClose doing!\");\n  }\n\n  // close按钮的click事件\n  onCloseClick() {\n    this.setState({ visible: false });\n  }\n\n  onClick() {\n    this.setState({ visible: true });\n  }\n\n  render() {\n    const visibleTrigger = (\n      <Button onClick={this.onClick.bind(this)} type=\"primary\">\n        点击弹出卡片\n      </Button>\n    );\n    const content = <div>content</div>;\n\n    return (\n      <div style={{ marginBottom: \"100px\" }}>\n        <Balloon\n          trigger={visibleTrigger}\n          triggerType=\"click\"\n          visible={this.state.visible}\n          onCloseClick={this.onCloseClick.bind(this)}\n          onClose={this.onClose.bind(this)}\n        >\n          {content}\n        </Balloon>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n使用 `visible`,属性控制浮层显示, 使balloon变为受限组件。\n\n"
      },
      {
        "title": "位置",
        "order": "2",
        "jsx": "import { Button, Balloon } from \"@icedesign/base\";\n\nconst top = (\n  <Button id=\"top\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上边\n  </Button>\n);\nconst right = (\n  <Button id=\"right\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右边\n  </Button>\n);\nconst bottom = (\n  <Button id=\"bottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下边\n  </Button>\n);\nconst left = (\n  <Button id=\"left\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左边\n  </Button>\n);\nconst topLeft = (\n  <Button id=\"topLeft\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上左\n  </Button>\n);\nconst topRight = (\n  <Button id=\"topRight\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    上右\n  </Button>\n);\nconst rightTop = (\n  <Button id=\"rightTop\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右上\n  </Button>\n);\nconst rightBottom = (\n  <Button id=\"rightBottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    右下\n  </Button>\n);\nconst bottomLeft = (\n  <Button id=\"bottomLeft\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下左\n  </Button>\n);\nconst bottomRight = (\n  <Button id=\"bottomRight\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    下右\n  </Button>\n);\nconst leftTop = (\n  <Button id=\"leftTop\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左上\n  </Button>\n);\nconst leftBottom = (\n  <Button id=\"leftBottom\" style={{ margin: \"5px\" }} className=\"btrigger\">\n    左下\n  </Button>\n);\n\nconst Content = () => (\n  <div>\n    <h4 style={{ marginTop: 0 }}>balloon title</h4>\n    <hr />\n    <p>balloon content</p>\n  </div>\n);\n\nconst App = () => (\n  <div style={{ paddingLeft: 320, paddingTop: 100 }}>\n    <div style={{ marginLeft: 75 }}>\n      <Balloon\n        trigger={topLeft}\n        align=\"tl\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={top}\n        align=\"t\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={topRight}\n        align=\"tr\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ width: 80, float: \"left\" }}>\n      <Balloon\n        trigger={leftTop}\n        align=\"lt\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={left}\n        align=\"l\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={leftBottom}\n        align=\"lb\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ width: 80, marginLeft: 290 }}>\n      <Balloon\n        trigger={rightTop}\n        align=\"rt\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={right}\n        align=\"r\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={rightBottom}\n        align=\"rb\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n    <div style={{ marginLeft: 80, clear: \"both\" }}>\n      <Balloon\n        trigger={bottomLeft}\n        align=\"bl\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={bottom}\n        align=\"b\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n      <Balloon\n        trigger={bottomRight}\n        align=\"br\"\n        triggerType=\"click\"\n        style={{ width: 300 }}\n      >\n        <Content />\n      </Balloon>\n    </div>\n  </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n位置有十二个方向。\n\n"
      },
      {
        "title": "tooltip",
        "order": "7",
        "jsx": "import { Button, Balloon } from \"@icedesign/base\";\n\nconst Tooltip = Balloon.Tooltip;\n\nconst top = (\n  <Button style={{ margin: \"5px\" }} id=\"top\" className=\"btrigger\">\n    上边\n  </Button>\n);\nconst right = (\n  <Button style={{ margin: \"5px\" }} id=\"right\" className=\"btrigger\">\n    右边\n  </Button>\n);\nconst bottom = (\n  <Button style={{ margin: \"5px\" }} id=\"bottom\" className=\"btrigger\">\n    下边\n  </Button>\n);\nconst left = (\n  <Button style={{ margin: \"5px\" }} id=\"left\" className=\"btrigger\">\n    左边\n  </Button>\n);\nconst topLeft = (\n  <Button style={{ margin: \"5px\" }} id=\"topLeft\" className=\"btrigger\">\n    上左\n  </Button>\n);\nconst topRight = (\n  <Button style={{ margin: \"5px\" }} id=\"topRight\" className=\"btrigger\">\n    上右\n  </Button>\n);\nconst rightTop = (\n  <Button style={{ margin: \"5px\" }} id=\"rightTop\" className=\"btrigger\">\n    右上\n  </Button>\n);\nconst rightBottom = (\n  <Button style={{ margin: \"5px\" }} id=\"rightBottom\" className=\"btrigger\">\n    右下\n  </Button>\n);\nconst bottomLeft = (\n  <Button style={{ margin: \"5px\" }} id=\"bottomLeft\" className=\"btrigger\">\n    下左\n  </Button>\n);\nconst bottomRight = (\n  <Button style={{ margin: \"5px\" }} id=\"bottomRight\" className=\"btrigger\">\n    下右\n  </Button>\n);\nconst leftTop = (\n  <Button style={{ margin: \"5px\" }} id=\"leftTop\" className=\"btrigger\">\n    左上\n  </Button>\n);\nconst leftBottom = (\n  <Button style={{ margin: \"5px\" }} id=\"leftBottom\" className=\"btrigger\">\n    左下\n  </Button>\n);\n\nconst App = () => (\n  <div style={{ paddingLeft: 220, paddingTop: 100 }}>\n    <div style={{ marginLeft: 75 }}>\n      <Tooltip trigger={topLeft} align=\"tl\" text=\"text text\" />\n      <Tooltip trigger={top} align=\"t\" text=\"text text\" />\n      <Tooltip trigger={topRight} align=\"tr\" text=\"text text\" />\n    </div>\n    <div style={{ width: 80, float: \"left\" }}>\n      <Tooltip trigger={leftTop} align=\"lt\" text=\"text text\" />\n      <Tooltip trigger={left} align=\"l\" text=\"text text\" />\n      <Tooltip trigger={leftBottom} align=\"lb\" text=\"text text\" />\n    </div>\n    <div style={{ width: 80, marginLeft: 290 }}>\n      <Tooltip trigger={rightTop} align=\"rt\" text=\"text text\" />\n      <Tooltip trigger={right} align=\"r\" text=\"text text\" />\n      <Tooltip trigger={rightBottom} align=\"rb\" text=\"text text\" />\n    </div>\n    <div style={{ marginLeft: 80, clear: \"both\" }}>\n      <Tooltip trigger={bottomLeft} align=\"bl\" text=\"text text\" />\n      <Tooltip trigger={bottom} align=\"b\" text=\"text text\" />\n      <Tooltip trigger={bottomRight} align=\"br\" text=\"text text\" />\n    </div>\n  </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".code-box-demo .sui-btn {\n    margin-right: 1em;\n    margin-bottom: 1em;\n}\n",
        "body": "\n简化的popup, 只能设置align, trigger和text。tooltip里的只能是文本, 通过text设置, 触发条件是hover.\n\n"
      },
      {
        "title": "三种触发方式",
        "order": "1",
        "jsx": "import { Button, Balloon } from \"@icedesign/base\";\n\nconst content = (\n  <div>\n    <p>内容</p>\n  </div>\n);\nconst MoveTarget = <Button style={{ margin: \"5px\" }}>移入</Button>;\nconst ClickTarget = <Button style={{ margin: \"5px\" }}>点击</Button>;\nconst FocusTarget = <Button style={{ margin: \"5px\" }}>获取焦点</Button>;\n\nconst App = () => (\n  <div>\n    <Balloon trigger={MoveTarget} triggerType=\"hover\">\n      {content}\n    </Balloon>\n\n    <Balloon trigger={ClickTarget} triggerType=\"click\">\n      {content}\n    </Balloon>\n\n    <Balloon trigger={FocusTarget} triggerType=\"focus\">\n      {content}\n    </Balloon>\n  </div>\n);\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n鼠标移入、聚集、点击。\n\n"
      }
    ]
  },
  {
    "name": "Breadcrumb",
    "category": "Components",
    "title": "面包屑",
    "type": "导航",
    "importStatement": "import { Breadcrumb } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n用来告知用户当前的位置，以及当前页面在整个网站中的位置，属于一种辅助的导航方式，适用于清晰且具多层次结构的网站，每一层内容为层级归属关系，方便用户返回上一级或各个层级的页面。\n\n",
    "propsSchema": {
      "name": "Breadcrumb",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "children": {
          "type": {
            "name": "custom",
            "raw": "(props, propName) => {\n    React.Children.forEach(props[propName], child => {\n        if (!(child && typeof child.type === 'function' && child.type._typeMark === 'breadcrumb_item')) {\n            throw new Error('Breadcrumb\\'s children must be Breadcrumb.Item!');\n        }\n    });\n}"
          },
          "required": false,
          "description": "面包屑子节点 ，需传入 Breadcrumb.Item",
          "docblock": "面包屑子节点 ，需传入 Breadcrumb.Item"
        },
        "maxNode": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "面包屑显示的最多个数，超出的部分会被隐藏",
          "docblock": "面包屑显示的最多个数，超出的部分会被隐藏"
        },
        "separator": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "分隔符，可以是文本，也可以是 Icon",
          "defaultValue": {
            "value": "<Icon size=\"xs\" type=\"arrow-right\" />",
            "computed": false
          },
          "docblock": "分隔符，可以是文本，也可以是 Icon"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Item",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "面包屑节点内容",
              "docblock": "面包屑节点内容"
            },
            "link": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />`",
              "docblock": "面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />`"
            }
          },
          "methods": [],
          "order": 1
        },
        {
          "name": "Keyword",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "关键字内容",
              "docblock": "关键字内容"
            }
          },
          "methods": [],
          "order": 2
        },
        {
          "name": "Number",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "数字内容",
              "docblock": "数字内容"
            }
          },
          "methods": [],
          "order": 3
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 面包屑子节点 ，需传入 Breadcrumb.Item | custom | -\nmaxNode | 面包屑显示的最多个数，超出的部分会被隐藏 | Number | -\nseparator | 分隔符，可以是文本，也可以是 Icon | ReactNode | &lt;Icon size=\"xs\" type=\"arrow-right\" /&gt;\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Item",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 面包屑节点内容 | ReactNode | -\nlink | 面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />` | String | -\n",
        "methodREADME": []
      },
      {
        "name": "Keyword",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 关键字内容 | ReactNode | -\n",
        "methodREADME": []
      },
      {
        "name": "Number",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 数字内容 | ReactNode | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "基本用法",
        "order": "0",
        "jsx": "import { Breadcrumb } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Breadcrumb>\n    <Breadcrumb.Item link=\"javascript:void(0);\">Home</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">All Categories</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Women’s Clothing\n    </Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Blouses & Shirts\n    </Breadcrumb.Item>\n    <Breadcrumb.Item>\n      <Breadcrumb.Keyword>T-shirts&nbsp;</Breadcrumb.Keyword>\n      <Breadcrumb.Number>78,999</Breadcrumb.Number> Results\n    </Breadcrumb.Item>\n  </Breadcrumb>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n使用 `Breadcrumb.Item` 来设置面包屑子节点，如果设置其 `link` 属性就是 `<a />` 节点，否则为 `<span />` 节点，另外可以使用 `Breadcrumb.Keyword` 来强调文本，`Breadcrumb.Number` 来为数字设置特殊样式。\n\n"
      },
      {
        "title": "显示省略",
        "order": "1",
        "jsx": "import { Breadcrumb } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Breadcrumb maxNode={5}>\n    <Breadcrumb.Item link=\"javascript:void(0);\">Home 1</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">Whatever 2</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      All Categories 3\n    </Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Women’s Clothing 4\n    </Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Blouses & Shirts 5\n    </Breadcrumb.Item>\n    <Breadcrumb.Item>T-shirts 6</Breadcrumb.Item>\n  </Breadcrumb>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n当超过设置的最大个数的时候，显示省略号。\n\n"
      },
      {
        "title": "设置分隔符",
        "order": "2",
        "jsx": "import { Breadcrumb } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Breadcrumb separator=\"/\">\n    <Breadcrumb.Item link=\"javascript:void(0);\">Home</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">All Categories</Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Women’s Clothing\n    </Breadcrumb.Item>\n    <Breadcrumb.Item link=\"javascript:void(0);\">\n      Blouses & Shirts\n    </Breadcrumb.Item>\n    <Breadcrumb.Item>T-shirts</Breadcrumb.Item>\n  </Breadcrumb>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n也可以设置不同的分隔符。\n\n"
      }
    ]
  },
  {
    "name": "Button",
    "category": "Components",
    "title": "按钮",
    "type": "表单",
    "importStatement": "import { Button } from '@icedesign/base';",
    "body": "\n\n按钮用于开始一个即时操作。\n\n## Guide\n\n### 何时使用\n\n标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。\n\n",
    "propsSchema": {
      "name": "Button",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "组件样式的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "组件样式的品牌前缀"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "'dark'",
                "computed": false
              },
              {
                "value": "'light'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "按钮的类型",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "按钮的类型"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "按钮的尺寸",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "按钮的尺寸"
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'ghost'",
                "computed": false
              },
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'warning'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "按钮的形态",
          "docblock": "按钮的形态"
        },
        "htmlType": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "设置 `button` 标签的原生 `type` 值",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "docblock": "设置 `button` 标签的原生 `type` 值"
        },
        "component": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'button'",
                "computed": false
              },
              {
                "value": "'span'",
                "computed": false
              },
              {
                "value": "'a'",
                "computed": false
              },
              {
                "value": "'div'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "设置标签类型",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "docblock": "设置标签类型"
        },
        "loading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "设置按钮的载入状态",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "设置按钮的载入状态"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否禁用",
          "docblock": "是否禁用"
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "点击按钮的回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "点击按钮的回调\n@param {Object} e Event Object",
          "params": [
            {
              "name": "e",
              "description": "Event Object",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义样式",
          "docblock": "自定义样式"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Group",
          "props": {
            "size": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "统一设置 Button 组件的按钮大小",
              "defaultValue": {
                "value": "'medium'",
                "computed": false
              },
              "docblock": "统一设置 Button 组件的按钮大小"
            }
          },
          "methods": []
        },
        {
          "name": "Split",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式品牌前缀"
            },
            "align": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "Dropdown 的对齐方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)",
              "defaultValue": {
                "value": "'tr br'",
                "computed": false
              },
              "docblock": "Dropdown 的对齐方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)"
            },
            "offset": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "Dropdown 的位置偏移，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)",
              "defaultValue": {
                "value": "[0, 4]",
                "computed": false
              },
              "docblock": "Dropdown 的位置偏移，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)"
            },
            "type": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'primary'",
                    "computed": false
                  },
                  {
                    "value": "'secondary'",
                    "computed": false
                  },
                  {
                    "value": "'normal'",
                    "computed": false
                  },
                  {
                    "value": "'dark'",
                    "computed": false
                  },
                  {
                    "value": "'light'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "类型，同 Button",
              "defaultValue": {
                "value": "'normal'",
                "computed": false
              },
              "docblock": "类型，同 Button"
            },
            "shape": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'ghost'",
                    "computed": false
                  },
                  {
                    "value": "'text'",
                    "computed": false
                  },
                  {
                    "value": "'warning'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "外观，同 Button",
              "docblock": "外观，同 Button"
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'small'",
                    "computed": false
                  },
                  {
                    "value": "'medium'",
                    "computed": false
                  },
                  {
                    "value": "'large'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "尺寸，同 Button",
              "defaultValue": {
                "value": "'medium'",
                "computed": false
              },
              "docblock": "尺寸，同 Button"
            },
            "trigger": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'click'",
                    "computed": false
                  },
                  {
                    "value": "'hover'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "Dropdown 触发方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)",
              "defaultValue": {
                "value": "'click'",
                "computed": false
              },
              "docblock": "Dropdown 触发方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)"
            },
            "menu": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "弹出的内容，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)",
              "docblock": "弹出的内容，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)"
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "点击按钮的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "点击按钮的回调\n@param {Object} e Event Object",
              "params": [
                {
                  "name": "e",
                  "description": "Event Object",
                  "type": {
                    "name": "Object"
                  }
                }
              ],
              "returns": null
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 组件样式的品牌前缀 | String | 'next-'\ntype | 按钮的类型<br><br>**可选值**:<br>'primary', 'secondary', 'normal', 'dark', 'light' | Enum | 'normal'\nsize | 按钮的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nshape | 按钮的形态<br><br>**可选值**:<br>'ghost', 'text', 'warning' | Enum | -\nhtmlType | 设置 `button` 标签的原生 `type` 值 | String | 'button'\ncomponent | 设置标签类型<br><br>**可选值**:<br>'button', 'span', 'a', 'div' | Enum | 'button'\nloading | 设置按钮的载入状态 | Boolean | false\ndisabled | 是否禁用 | Boolean | -\nonClick | 点击按钮的回调<br><br>**签名**:<br>Function(e: Object) => void<br>**参数**:<br>*e*: {Object} Event Object | Function | () =&gt; {}\nclassName | 自定义样式 | String | -\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Group",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nsize | 统一设置 Button 组件的按钮大小 | String | 'medium'\n",
        "methodREADME": []
      },
      {
        "name": "Split",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式品牌前缀 | String | 'next-'\nalign | Dropdown 的对齐方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown) | String | 'tr br'\noffset | Dropdown 的位置偏移，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown) | Array | [0, 4]\ntype | 类型，同 Button<br><br>**可选值**:<br>'primary', 'secondary', 'normal', 'dark', 'light' | Enum | 'normal'\nshape | 外观，同 Button<br><br>**可选值**:<br>'ghost', 'text', 'warning' | Enum | -\nsize | 尺寸，同 Button<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\ntrigger | Dropdown 触发方式，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown)<br><br>**可选值**:<br>'click', 'hover' | Enum | 'click'\nmenu | 弹出的内容，参考 [Dropdown](http://gitlab.alibaba-inc.com/next/dropdown) | ReactNode | -\nonClick | 点击按钮的回调<br><br>**签名**:<br>Function(e: Object) => void<br>**参数**:<br>*e*: {Object} Event Object | Function | () =&gt; {}\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "按钮类型",
        "order": "0",
        "jsx": "import { Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Button type=\"normal\">普通按钮</Button> &nbsp;&nbsp;\n    <Button type=\"primary\">主要按钮</Button> &nbsp;&nbsp;\n    <Button type=\"secondary\">次要按钮</Button>\n    <br />\n    <br />\n    <Button type=\"normal\" shape=\"text\">\n      普通文本按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button type=\"primary\" shape=\"text\">\n      主要文本按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button type=\"secondary\" shape=\"text\">\n      次要文本按钮\n    </Button>\n    <br />\n    <br />\n    <Button type=\"normal\" shape=\"warning\">\n      普通警告按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button type=\"primary\" shape=\"warning\">\n      主要警告按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button type=\"secondary\" shape=\"warning\">\n      次要警告按钮\n    </Button>\n    <br />\n    <br />\n    <div style={{ clear: \"both\" }}>\n      <div className=\"ghost-light-background\">\n        <Button type=\"light\" shape=\"ghost\">\n          幽灵按钮（浅色）\n        </Button>\n      </div>\n      <div className=\"ghost-dark-background\">\n        <Button type=\"dark\" shape=\"ghost\">\n          幽灵按钮（深色）\n        </Button>\n      </div>\n    </div>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".ghost-light-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #EBECF0;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n.ghost-dark-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #333;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n",
        "body": "\n值得注意的是，对于幽灵按钮而言，通常用在有色背景下。针对浅色背景和深色背景的使用场景，幽灵按钮提供了两个特殊的类型，分别是 `light`, `dark`。\n正常情况下通过设置 `type` 为 `primary` `secondary` 可分别创建主按钮、次按钮，若不设置 `type` 值则为普通按钮。不同的样式可以用来区别其重要程度。\n通过 `shape` 属性可以更改按钮的默认形态，包括幽灵按钮、文本按钮、警告按钮。按钮有三种视觉层次：主按钮、次按钮、普通按钮。\n\n"
      },
      {
        "title": "自定义标签类型",
        "order": "7",
        "jsx": "import { Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Button\n      type=\"primary\"\n      component=\"a\"\n      href=\"http://www.alibaba.com\"\n      target=\"_blank\"\n    >\n      <span>确定</span>\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button\n      type=\"secondary\"\n      component=\"a\"\n      href=\"http://www.alibaba.com\"\n      target=\"_blank\"\n    >\n      次要按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button\n      type=\"normal\"\n      component=\"a\"\n      href=\"http://www.alibaba.com\"\n      target=\"_blank\"\n    >\n      普通按钮\n    </Button>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可选值包括 `button`, `span`, `a`, `div`。\n默认情况下 Button 组件使用 `<button>` 标签来渲染按钮，通过 `component` 属性可以自定义 Button 的标签类型。\n\n"
      },
      {
        "title": "不可用状态",
        "order": "5",
        "jsx": "import { Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Button type=\"primary\">主按钮</Button>&nbsp;&nbsp;\n    <Button type=\"primary\" disabled>\n      主按钮(失效)\n    </Button>\n    <br />\n    <br />\n    <Button type=\"secondary\">次按钮</Button>&nbsp;&nbsp;\n    <Button type=\"secondary\" disabled>\n      次按钮(失效)\n    </Button>\n    <br />\n    <br />\n    <Button type=\"normal\">普通按钮</Button>&nbsp;&nbsp;\n    <Button type=\"normal\" disabled>\n      普通按钮(失效)\n    </Button>\n    <br />\n    <br />\n    <div>\n      <div className=\"ghost-light-background\">\n        <Button type=\"light\" shape=\"ghost\" disabled>\n          幽灵按钮（浅色）\n        </Button>\n      </div>\n      <div className=\"ghost-dark-background\">\n        <Button type=\"dark\" shape=\"ghost\" disabled>\n          幽灵按钮（深色）\n        </Button>\n      </div>\n    </div>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".ghost-light-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #EBECF0;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n.ghost-dark-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #333;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n",
        "body": "\n添加 `disabled` 属性即可让按钮处于不可用状态，同时按钮样式也会改变。\n\n"
      },
      {
        "title": "按钮组",
        "order": "1",
        "jsx": "import { Button, Icon } from \"@icedesign/base\";\n\nconst ButtonGroup = Button.Group;\n\nReactDOM.render(\n  <div>\n    <h4>基本组合</h4>\n    <ButtonGroup>\n      <Button type=\"primary\">确定</Button>\n      <Button type=\"primary\">取消</Button>\n    </ButtonGroup>\n    <br />\n    <br />\n    <ButtonGroup>\n      <Button disabled>左</Button>\n      <Button disabled>中</Button>\n      <Button disabled>右</Button>\n    </ButtonGroup>\n    <br />\n    <br />\n    <ButtonGroup>\n      <Button type=\"secondary\">左</Button>\n      <Button type=\"secondary\">中</Button>\n      <Button type=\"secondary\">右</Button>\n    </ButtonGroup>\n\n    <h4>带图标按钮组合</h4>\n    <ButtonGroup>\n      <Button type=\"primary\">\n        <Icon type=\"arrow-left\" />\n        <span>后退</span>\n      </Button>\n      <Button type=\"primary\">\n        前进<Icon type=\"arrow-right\" />\n      </Button>\n    </ButtonGroup>\n    <br />\n    <br />\n    <ButtonGroup>\n      <Button type=\"primary\">\n        <Icon type=\"arrow-left\" />\n      </Button>\n      <Button type=\"primary\">\n        <Icon type=\"arrow-right\" />\n      </Button>\n    </ButtonGroup>\n\n    <h4>多个组合</h4>\n    <ButtonGroup>\n      <Button>1</Button>\n      <Button>2</Button>\n      <Button>3</Button>\n      <Button>4</Button>\n      <Button>\n        <span>前进</span>\n        <Icon type=\"arrow-right\" />\n      </Button>\n    </ButtonGroup>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以将多个 `Button` 放入 `Button.Group` 的容器中形成一个按钮组。\n\n"
      },
      {
        "title": "图标按钮",
        "order": "3",
        "jsx": "import { Button, Icon } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Button>\n      <Icon type=\"atm\" />按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button shape=\"text\">\n      <Icon type=\"atm\" />文字按钮\n    </Button>{\" \"}\n    &nbsp;&nbsp;\n    <Button shape=\"warning\">\n      <Icon type=\"atm\" />文字按钮\n    </Button>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\nButton 可以嵌入 Icon，此时无需自定义 Icon 的大小，Icon 会跟随 Button 组件的大小。\n\n"
      },
      {
        "title": "加载中",
        "order": "4",
        "jsx": "import { Button } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      loading: false,\n      iconLoading: false\n    };\n  }\n  enterLoading() {\n    this.setState({ loading: true });\n  }\n  enterIconLoading() {\n    this.setState({ iconLoading: true });\n  }\n  render() {\n    return (\n      <div>\n        <Button type=\"secondary\" loading>\n          加载中\n        </Button>&nbsp;&nbsp;\n        <Button\n          type=\"primary\"\n          loading={this.state.loading}\n          onClick={this.enterLoading.bind(this)}\n        >\n          点击变加载\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n添加 `loading` 属性即可让按钮处于加载状态，最后两个按钮演示点击后进入加载状态。\n\n"
      },
      {
        "title": "按钮尺寸",
        "order": "2",
        "jsx": "import { Button, Icon } from \"@icedesign/base\";\n\nconst ButtonGroup = Button.Group;\n\nReactDOM.render(\n  <div>\n    <Button type=\"primary\" size=\"large\">\n      <Icon type=\"atm\" />大号按钮\n    </Button>&nbsp;&nbsp;\n    <Button type=\"primary\">\n      <Icon type=\"atm\" />中号按钮(默认)\n    </Button>&nbsp;&nbsp;\n    <Button type=\"primary\" size=\"small\">\n      <Icon type=\"atm\" />小号按钮\n    </Button>\n    <br />\n    <br />\n    <ButtonGroup size=\"large\">\n      <Button>大</Button>\n      <Button>大</Button>\n      <Button>大</Button>\n    </ButtonGroup>&nbsp;&nbsp;\n    <ButtonGroup>\n      <Button>默认</Button>\n      <Button>默认</Button>\n      <Button>默认</Button>\n    </ButtonGroup>&nbsp;&nbsp;\n    <ButtonGroup size=\"small\">\n      <Button>小</Button>\n      <Button>小</Button>\n      <Button>小</Button>\n    </ButtonGroup>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n对于按钮组而言，可以通过在 `Button.Group` 上统一设置整个组按钮的大小。\n通过设置 `size` 为 `large` `medium` `small` 分别把按钮设为大、中、小尺寸。若不设置 `size`，则尺寸为中。\n按钮有大、中、小三种尺寸。\n\n"
      },
      {
        "title": "Split Button",
        "order": "6",
        "jsx": "import { Button, Menu } from \"@icedesign/base\";\n\nconst SplitButton = Button.Split;\nconst menu = (\n  <Menu>\n    <Menu.Item disabled>abc</Menu.Item>\n    <Menu.Item key=\"abc\">abc</Menu.Item>\n    <Menu.Divider key=\"5\" />\n    <Menu.Item key=\"1\">abc</Menu.Item>\n    <Menu.Item key=\"2\">abc</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <div>\n    <h3>普通按钮</h3>\n    <SplitButton menu={menu} type=\"primary\" onClick={e => console.log(e)}>\n      Upload\n    </SplitButton>&nbsp;&nbsp;\n    <SplitButton menu={menu} type=\"secondary\">\n      Upload\n    </SplitButton>&nbsp;&nbsp;\n    <SplitButton menu={menu} type=\"normal\" disabled>\n      Upload\n    </SplitButton>\n    <h3>文字按钮</h3>\n    <SplitButton menu={menu} type=\"primary\" shape=\"text\">\n      Upload\n    </SplitButton>&nbsp;&nbsp;\n    <SplitButton menu={menu} type=\"secondary\" shape=\"text\">\n      Upload\n    </SplitButton>&nbsp;&nbsp;\n    <SplitButton menu={menu} type=\"normal\" shape=\"text\" disabled>\n      Upload\n    </SplitButton>\n    <h3>幽灵按钮</h3>\n    <div>\n      <div className=\"ghost-light-background\">\n        <SplitButton type=\"light\" shape=\"ghost\" menu={menu}>\n          Ghost Light\n        </SplitButton>\n      </div>\n      <div className=\"ghost-dark-background\">\n        <SplitButton type=\"dark\" shape=\"ghost\" menu={menu}>\n          Ghost Dark\n        </SplitButton>\n      </div>\n    </div>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".ghost-light-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #EBECF0;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n.ghost-dark-background {\n    display: inline-block;\n    height: 100px;\n    line-height: 100px;\n    width: 50%;\n    background: #333;\n    margin-bottom: 20px;\n    padding-left:10px;\n    box-sizing: border-box;\n}\n",
        "body": "\nSplitButton\n\n"
      }
    ]
  },
  {
    "name": "Calendar",
    "category": "Components",
    "title": "日历",
    "type": "展示",
    "importStatement": "import { Calendar } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n按照日历形式展示数据的容器。\n\n### 何时使用\n\n日历组件是一个偏向于展示与受控的基础组件，例如日程、课表、价格日历、农历等，如果您在使用上偏向于主动交互，请使用 DatePicker 组件。\n\n### 类型说明\n\n组件回调函数返回的数据格式为组件内自定义 `CalendarDate` 对象格式，请注意使用：\n\n```js\nCalendarDate = {\n\ttimestamp: Number,  // 时间戳\n    year: Number,       // 年\n    month: Number,      // 月 0~11\n    date: Number,       // 日 1~31\n    week: Number        // 周几 1~7\n};\n```\n\n### 注意点\n\n1.  如果要使用该组件，请直接使用直接导出的 `Calendar` 组件。\n2.  Calendar 私有的 `DatePickerPanel` 和 `RangePickerPanel` 为组件的私有属性，不对外暴露，建议不要使用。\n\n",
    "propsSchema": {
      "name": "Calendar",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式品牌前缀"
        },
        "base": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "基准日期",
          "docblock": "基准日期"
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "选中的日期值",
          "docblock": "选中的日期值"
        },
        "mode": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'month'",
                "computed": false
              },
              {
                "value": "'year'",
                "computed": false
              },
              {
                "value": "'decade'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "面板选择模式",
          "defaultValue": {
            "value": "'month'",
            "computed": false
          },
          "docblock": "面板选择模式"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'fullscreen'",
                "computed": false
              },
              {
                "value": "'card'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "类型",
          "defaultValue": {
            "value": "'fullscreen'",
            "computed": false
          },
          "docblock": "类型"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "日期改变时的回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "日期改变时的回调\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象",
          "params": [
            {
              "name": "calendarDate",
              "description": "对应 Calendar 返回的自定义日期对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义样式类",
          "docblock": "自定义样式类"
        },
        "dateCellRender": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "自定义日期渲染函数",
          "docblock": "自定义日期渲染函数\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Function}",
          "params": [
            {
              "name": "calendarDate",
              "description": "对应 Calendar 返回的自定义日期对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "Function"
            }
          }
        },
        "monthCellRender": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "自定义月份渲染函数",
          "docblock": "自定义月份渲染函数\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Function}",
          "params": [
            {
              "name": "calendarDate",
              "description": "对应 Calendar 返回的自定义日期对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "Function"
            }
          }
        },
        "yearCellRender": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "自定义年份渲染函数",
          "docblock": "自定义年份渲染函数\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Function}",
          "params": [
            {
              "name": "calendarDate",
              "description": "对应 Calendar 返回的自定义日期对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "Function"
            }
          }
        },
        "disabledDate": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "不可选择的日期",
          "docblock": "不可选择的日期\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Boolean}",
          "params": [
            {
              "name": "calendarDate",
              "description": "对应 Calendar 返回的自定义日期对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "Boolean"
            }
          }
        },
        "disabledMonth": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "不可选择的月份",
          "docblock": "不可选择的月份\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Boolean}",
          "params": [
            {
              "name": "calendarDate",
              "description": "对应 Calendar 返回的自定义日期对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "Boolean"
            }
          }
        },
        "disabledYear": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "不可选择的年份",
          "docblock": "不可选择的年份\n@param {Object} calendarDate 对应 Calendar 返回的自定义日期对象\n@returns {Boolean}",
          "params": [
            {
              "name": "calendarDate",
              "description": "对应 Calendar 返回的自定义日期对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "Boolean"
            }
          }
        },
        "language": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'en-us'",
                "computed": false
              },
              {
                "value": "'ar'",
                "computed": false
              },
              {
                "value": "'de'",
                "computed": false
              },
              {
                "value": "'es'",
                "computed": false
              },
              {
                "value": "'fr'",
                "computed": false
              },
              {
                "value": "'hi'",
                "computed": false
              },
              {
                "value": "'it'",
                "computed": false
              },
              {
                "value": "'ja'",
                "computed": false
              },
              {
                "value": "'ko'",
                "computed": false
              },
              {
                "value": "'pt'",
                "computed": false
              },
              {
                "value": "'ru'",
                "computed": false
              },
              {
                "value": "'zh-cn'",
                "computed": false
              },
              {
                "value": "'zh-hk'",
                "computed": false
              },
              {
                "value": "'zh-tw'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "多语言选择",
          "docblock": "多语言选择"
        },
        "locale": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "国际化配置",
          "docblock": "国际化配置",
          "properties": []
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式品牌前缀 | String | 'next-'\nbase | 基准日期 | any | -\nvalue | 选中的日期值 | any | -\nmode | 面板选择模式<br><br>**可选值**:<br>'month', 'year', 'decade' | Enum | 'month'\ntype | 类型<br><br>**可选值**:<br>'fullscreen', 'card' | Enum | 'fullscreen'\nonChange | 日期改变时的回调<br><br>**签名**:<br>Function(calendarDate: Object) => void<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象 | Function | () =&gt; {}\nclassName | 自定义样式类 | String | -\ndateCellRender | 自定义日期渲染函数<br><br>**签名**:<br>Function(calendarDate: Object) => Function<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Function} null<br> | Function | -\nmonthCellRender | 自定义月份渲染函数<br><br>**签名**:<br>Function(calendarDate: Object) => Function<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Function} null<br> | Function | -\nyearCellRender | 自定义年份渲染函数<br><br>**签名**:<br>Function(calendarDate: Object) => Function<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Function} null<br> | Function | -\ndisabledDate | 不可选择的日期<br><br>**签名**:<br>Function(calendarDate: Object) => Boolean<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Boolean} null<br> | Function | -\ndisabledMonth | 不可选择的月份<br><br>**签名**:<br>Function(calendarDate: Object) => Boolean<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Boolean} null<br> | Function | -\ndisabledYear | 不可选择的年份<br><br>**签名**:<br>Function(calendarDate: Object) => Boolean<br>**参数**:<br>*calendarDate*: {Object} 对应 Calendar 返回的自定义日期对象<br>**返回值**:<br>{Boolean} null<br> | Function | -\nlanguage | 多语言选择<br><br>**可选值**:<br>'en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw' | Enum | -\nlocale | 国际化配置 | Object | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Calendar } from \"@icedesign/base\";\n\nfunction dateCellRender(calendarDate) {\n  const style = {\n    position: \"absolute\",\n    width: \"calc(100% - 8px)\",\n    height: \"2px\",\n    textAlign: \"center\",\n    background: \"#ff0000\",\n    top: 0,\n    left: 4\n  };\n\n  return calendarDate.week > 5 ? (\n    <div>\n      <span style={style} />\n      {calendarDate.date}\n    </div>\n  ) : (\n    <div>{calendarDate.date}</div>\n  );\n}\n\nReactDOM.render(<Calendar dateCellRender={dateCellRender} />, mountNode);\n\n",
        "css": "",
        "body": "\n一个最简单的日历面板，用户可以切换年/月。\n\n"
      },
      {
        "title": "卡片模式",
        "order": "1",
        "jsx": "import { Calendar, Select } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lang: \"zh-cn\",\n      date: \"2017-06-07\"\n    };\n    this.langs = [\n      \"en-us\",\n      \"ar\",\n      \"de\",\n      \"es\",\n      \"fr\",\n      \"hi\",\n      \"it\",\n      \"ja\",\n      \"ko\",\n      \"pt\",\n      \"ru\",\n      \"zh-cn\",\n      \"zh-hk\",\n      \"zh-tw\"\n    ];\n  }\n  onChangeLang(val) {\n    this.setState({\n      lang: val\n    });\n  }\n  render() {\n    const { lang, date } = this.state;\n\n    return (\n      <div>\n        <Select defaultValue={lang} onChange={this.onChangeLang.bind(this)}>\n          {this.langs.map(item => (\n            <Select.Option value={item} key={item}>\n              {item}\n            </Select.Option>\n          ))}\n        </Select>\n\n        <div className=\"custom-calendar-guide\">\n          <Calendar type=\"card\" language={lang} value={date} />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".custom-calendar-guide {\n    width: 270px;\n    border: 1px solid #C4C6CF;\n    border-radius: 3px;\n    overflow: hidden;\n    margin-top: 20px;\n}\n",
        "body": "\n包装在有限的容器内\n\n"
      },
      {
        "title": "受控的日历组件",
        "order": "2",
        "jsx": "import { Calendar, Select } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lang: \"zh-cn\",\n      base: \"\",\n      value: \"\",\n      mode: \"month\"\n    };\n    this.langs = [\n      \"en-us\",\n      \"ar\",\n      \"de\",\n      \"es\",\n      \"fr\",\n      \"hi\",\n      \"it\",\n      \"ja\",\n      \"ko\",\n      \"pt\",\n      \"ru\",\n      \"zh-cn\",\n      \"zh-hk\",\n      \"zh-tw\"\n    ];\n  }\n\n  onChangeLang(val) {\n    this.setState({\n      lang: val\n    });\n  }\n\n  onDateChange(nextState) {\n    nextState.mode = nextState.mode === \"date\" ? \"month\" : nextState.mode;\n    this.setState(nextState);\n  }\n\n  render() {\n    const { lang, base, value, mode } = this.state;\n\n    return (\n      <div>\n        <Select defaultValue={lang} onChange={this.onChangeLang.bind(this)}>\n          {this.langs.map(item => (\n            <Select.Option value={item} key={item}>\n              {item}\n            </Select.Option>\n          ))}\n        </Select>\n\n        <div className=\"custom-calendar-guide\">\n          <Calendar\n            type=\"card\"\n            language={lang}\n            value={value}\n            mode={mode}\n            base={base}\n            onChange={this.onDateChange.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".custom-calendar-guide {\n    width: 270px;\n    border: 1px solid #C4C6CF;\n    border-radius: 3px;\n    overflow: hidden;\n    margin-top: 20px;\n}\n",
        "body": "\n用于日历组件中的日期选择面板\n\n"
      },
      {
        "title": "禁用日期",
        "order": "3",
        "jsx": "import { Calendar, moment } from \"@icedesign/base\";\n\nconst disabledDate = function(calendarDate) {\n  let current = moment()\n    .year(calendarDate.year)\n    .month(calendarDate.month)\n    .date(calendarDate.date);\n  return current.valueOf() > moment().valueOf();\n};\n\nconst wrapperStyle = {\n  width: \"270px\",\n  border: \"1px solid #C4C6CF\",\n  borderRadius: \"4px\",\n  overflow: \"hidden\"\n};\n\nReactDOM.render(\n  <div style={wrapperStyle}>\n    <Calendar type=\"card\" disabledDate={disabledDate} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n禁用某些日期\n\n"
      },
      {
        "title": "自定义语言",
        "order": "4",
        "jsx": "import { Calendar } from \"@icedesign/base\";\n\nconst locale = {\n  format: {\n    months: [\n      \"一月\",\n      \"二月\",\n      \"三月\",\n      \"四月\",\n      \"五月\",\n      \"六月\",\n      \"七月\",\n      \"八月\",\n      \"九月\",\n      \"十月\",\n      \"十一月\",\n      \"十二月\"\n    ],\n    shortMonths: [\n      \"一月\",\n      \"二月\",\n      \"三月\",\n      \"四月\",\n      \"五月\",\n      \"六月\",\n      \"七月\",\n      \"八月\",\n      \"九月\",\n      \"十月\",\n      \"十一月\",\n      \"十二月\"\n    ],\n    weekdays: [\n      \"星期天\",\n      \"星期一\",\n      \"星期二\",\n      \"星期三\",\n      \"星期四\",\n      \"星期五\",\n      \"星期六\"\n    ],\n    shortWeekdays: [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"],\n    veryShortWeekdays: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"],\n    ampms: [\"上午\", \"下午\"]\n  }\n};\nconst wrapperStyle = {\n  width: \"270px\",\n  border: \"1px solid #C4C6CF\",\n  borderRadius: \"3px\",\n  overflow: \"hidden\"\n};\n\nReactDOM.render(\n  <div>\n    <div style={wrapperStyle}>\n      <Calendar type=\"card\" language={\"en-us\"} locale={locale} />\n    </div>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n用于日历组件中的日期选择面板\n\n"
      }
    ]
  },
  {
    "name": "Card",
    "category": "Components",
    "title": "卡片",
    "type": "基本",
    "importStatement": "import { Card } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n一个通用的卡片组件。\n\n### 何时使用\n\n当一个模块的同类信息不能自然形成区块感，可借助 Card 组件将信息整合，帮助界面信息模块感更强。\n\n",
    "propsSchema": {
      "name": "Card",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式的品牌前缀"
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "卡片的标题",
          "docblock": "卡片的标题"
        },
        "subTitle": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "卡片的副标题",
          "docblock": "卡片的副标题"
        },
        "titlePrefixLine": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示标题的前缀线",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示标题的前缀线"
        },
        "titleBottomLine": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示标题栏的下划线",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示标题栏的下划线"
        },
        "bodyHeight": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "内容区域的固定高度",
          "defaultValue": {
            "value": "120",
            "computed": false
          },
          "docblock": "内容区域的固定高度"
        },
        "extra": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "标题区域的用户自定义内容",
          "docblock": "标题区域的用户自定义内容"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义样式",
          "docblock": "自定义样式"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\ntitle | 卡片的标题 | ReactNode | -\nsubTitle | 卡片的副标题 | ReactNode | -\ntitlePrefixLine | 是否显示标题的前缀线 | Boolean | true\ntitleBottomLine | 是否显示标题栏的下划线 | Boolean | true\nbodyHeight | 内容区域的固定高度 | String/Number | 120\nextra | 标题区域的用户自定义内容 | ReactNode | -\nclassName | 自定义样式 | String | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Card } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Card\n    style={{ width: 300 }}\n    title=\"阿里老黄历\"\n    subTitle=\"没品位\"\n    extra=\"Link\"\n    language=\"en-us\"\n  >\n    <h3>Card title</h3>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n  </Card>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n最简单的用法。\n\n"
      },
      {
        "title": "自定义内容高度",
        "order": "1",
        "jsx": "import { Card } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Card\n      style={{ width: 300 }}\n      title=\"阿里老黄历\"\n      subTitle=\"没品位\"\n      bodyHeight=\"auto\"\n    >\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n    </Card>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过 `bodyHeight` 属性自定义内容区的高度。例如取值为 `auto` 的时候会默认关闭卡片的收缩效果。\n\n"
      },
      {
        "title": "自定义卡片样式",
        "order": "2",
        "jsx": "import { Card } from \"@icedesign/base\";\n\nconst cardStyle = {\n  padding: 0,\n  boxShadow: \"none\"\n};\n\nReactDOM.render(\n  <Card style={cardStyle} bodyHeight=\"auto\">\n    <img\n      src=\"https://img.alicdn.com/tfs/TB1FNIOSFXXXXaWXXXXXXXXXXXX-260-188.png\"\n      alt=\"father day\"\n    />\n    <div className=\"custom-card\">\n      <h3>父亲节</h3>\n      <p>Father's Day</p>\n    </div>\n  </Card>,\n  mountNode\n);\n\n",
        "css": ".custom-card {\n    text-align: center;\n    padding: 10px 16px;\n}\n\n.custom-card p {\n    color: #999;\n}\n",
        "body": "\n如果 `title` 属性不传入任何值，则默认会去除整个头部区域。\n如果默认的卡片样式不能满足您的需求，除了通过 Fusion 配置平台修改，还可以通过传入自定义样式修改。\n\n"
      },
      {
        "title": "自定义标题样式",
        "order": "3",
        "jsx": "import { Card } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Card\n      style={{ width: 300 }}\n      title=\"Title\"\n      subTitle=\"Here is added words\"\n      titlePrefixLine={false}\n      extra={<a href=\"#\">Link &gt;</a>}\n    >\n      Custom Content\n    </Card>\n    <br />\n    <br />\n    <Card\n      style={{ width: 300 }}\n      title=\"Title\"\n      subTitle=\"Here is added words\"\n      titleBottomLine={false}\n      extra={<a href=\"#\">Link &gt;</a>}\n    >\n      Custom Content\n    </Card>\n    <br />\n    <br />\n    <Card\n      style={{ width: 300 }}\n      title={<i>Title</i>}\n      subTitle={<i>Sub</i>}\n      titlePrefixLine={false}\n      titleBottomLine={false}\n      extra={<a href=\"#\">Link &gt;</a>}\n    >\n      Custom Content\n    </Card>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过设置 `titleBottomLine` 属性为 `false` 关闭显示头部区域的底部边框线。\n可以通过设置 `titlePrefixLine` 属性为 `false` 关闭显示标题前的前缀线。\n\n"
      }
    ]
  },
  {
    "name": "CascaderSelect",
    "category": "Components",
    "title": "级联选择",
    "type": "基本",
    "importStatement": "import { CascaderSelect } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n级联选择由[选择器](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=select)和[级联](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=cascader)组成。把级联组件以弹层的方式隐藏，多用于表单场景。\n\n",
    "propsSchema": {
      "name": "CascaderSelect",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "选择框大小",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "选择框大小"
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "'arrow-only'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "选择框形状",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "选择框形状"
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "选择框占位符",
          "docblock": "选择框占位符"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否禁用",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否禁用"
        },
        "hasArrow": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示右侧的箭头",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示右侧的箭头"
        },
        "hasClear": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效"
        },
        "dataSource": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "object"
            }
          },
          "required": false,
          "description": "数据源，结构可参考下方说明",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "数据源，结构可参考下方说明"
        },
        "defaultValue": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              }
            ]
          },
          "required": false,
          "description": "（非受控）默认值",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "（非受控）默认值"
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              }
            ]
          },
          "required": false,
          "description": "（受控）当前值",
          "docblock": "（受控）当前值"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "选中值改变时触发的回调函数",
          "docblock": "选中值改变时触发的回调函数\n@param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n@param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n@param {Object} extra 额外参数\n@param {Array} extra.selectedPath 单选时选中的数据的路径\n@param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中\n@param {Object} extra.currentData 多选时当前操作的数据\n@param {Array} extra.checkedData 多选时所有被选中的数据\n@param {Array} extra.indeterminateData 多选时半选的数据",
          "params": [
            {
              "name": "value",
              "description": "选中的值，单选时返回单个值，多选时返回数组",
              "type": {
                "name": "union",
                "value": [
                  "String",
                  "Array"
                ]
              }
            },
            {
              "name": "data",
              "description": "选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点",
              "type": {
                "name": "union",
                "value": [
                  "Object",
                  "Array"
                ]
              }
            },
            {
              "name": "extra",
              "description": "额外参数",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "extra.selectedPath",
              "description": "单选时选中的数据的路径",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.checked",
              "description": "多选时当前的操作是选中还是取消选中",
              "type": {
                "name": "Boolean"
              }
            },
            {
              "name": "extra.currentData",
              "description": "多选时当前操作的数据",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "extra.checkedData",
              "description": "多选时所有被选中的数据",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.indeterminateData",
              "description": "多选时半选的数据",
              "type": {
                "name": "Array"
              }
            }
          ],
          "returns": null
        },
        "defaultVisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "初始下拉框是否显示",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "初始下拉框是否显示"
        },
        "defaultExpandedValue": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置",
          "docblock": "默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置"
        },
        "expandTrigger": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'click'",
                "computed": false
              },
              {
                "value": "'hover'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "展开触发的方式",
          "defaultValue": {
            "value": "'click'",
            "computed": false
          },
          "docblock": "展开触发的方式"
        },
        "multiple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否多选",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否多选"
        },
        "changeOnSelect": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否选中即发生改变, 该属性仅在单选模式下有效",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否选中即发生改变, 该属性仅在单选模式下有效"
        },
        "canOnlyCheckLeaf": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效"
        },
        "checkStrictly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "父子节点是否选中不关联",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "父子节点是否选中不关联"
        },
        "labelWidth": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度",
          "docblock": "文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度"
        },
        "showItemCount": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "每一列展示的个数",
          "defaultValue": {
            "value": "6",
            "computed": false
          },
          "docblock": "每一列展示的个数"
        },
        "displayRender": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "选择框单选时展示结果的函数",
          "defaultValue": {
            "value": "label => label.join(' / ')",
            "computed": false
          },
          "docblock": "选择框单选时展示结果的函数\n@param {Array} label 选中路径的文本数组\n@return {ReactNode} 渲染在选择框中的内容",
          "params": [
            {
              "name": "label",
              "description": "选中路径的文本数组",
              "type": {
                "name": "Array"
              }
            }
          ],
          "returns": {
            "description": "渲染在选择框中的内容",
            "type": {
              "name": "ReactNode"
            }
          }
        },
        "popupClassName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "下拉框样式自定义类名",
          "docblock": "下拉框样式自定义类名"
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "下拉框挂载的容器节点",
          "docblock": "下拉框挂载的容器节点"
        },
        "loadData": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "异步加载数据函数",
          "docblock": "异步加载数据函数\n@param {Object} data 当前点击异步加载的数据",
          "params": [
            {
              "name": "data",
              "description": "当前点击异步加载的数据",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nsize | 选择框大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nshape | 选择框形状<br><br>**可选值**:<br>'normal', 'arrow-only' | Enum | 'normal'\nplaceholder | 选择框占位符 | String | -\ndisabled | 是否禁用 | Boolean | false\nhasArrow | 是否显示右侧的箭头 | Boolean | true\nhasClear | 是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效 | Boolean | false\ndataSource | 数据源，结构可参考下方说明 | Array&lt;Object&gt; | []\ndefaultValue | （非受控）默认值 | String/Array&lt;String&gt; | null\nvalue | （受控）当前值 | String/Array&lt;String&gt; | -\nonChange | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array, extra: Object) => void<br>**参数**:<br>*value*: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>*data*: {Object/Array} 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点<br>*extra*: {Object} 额外参数<br>*extra.selectedPath*: {Array} 单选时选中的数据的路径<br>*extra.checked*: {Boolean} 多选时当前的操作是选中还是取消选中<br>*extra.currentData*: {Object} 多选时当前操作的数据<br>*extra.checkedData*: {Array} 多选时所有被选中的数据<br>*extra.indeterminateData*: {Array} 多选时半选的数据 | Function | -\ndefaultVisible | 初始下拉框是否显示 | Boolean | false\ndefaultExpandedValue | 默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置 | Array&lt;String&gt; | -\nexpandTrigger | 展开触发的方式<br><br>**可选值**:<br>'click', 'hover' | Enum | 'click'\nmultiple | 是否多选 | Boolean | false\nchangeOnSelect | 是否选中即发生改变, 该属性仅在单选模式下有效 | Boolean | false\ncanOnlyCheckLeaf | 是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效 | Boolean | false\ncheckStrictly | 父子节点是否选中不关联 | Boolean | false\nlabelWidth | 文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度 | String/Number | -\nshowItemCount | 每一列展示的个数 | String/Number | 6\ndisplayRender | 选择框单选时展示结果的函数<br><br>**签名**:<br>Function(label: Array) => ReactNode<br>**参数**:<br>*label*: {Array} 选中路径的文本数组<br>**返回值**:<br>{ReactNode} 渲染在选择框中的内容<br> | Function | label =&gt; label.join(' / ')\npopupClassName | 下拉框样式自定义类名 | String | -\ncontainer | 下拉框挂载的容器节点 | String/Function | -\nloadData | 异步加载数据函数<br><br>**签名**:<br>Function(data: Object) => void<br>**参数**:<br>*data*: {Object} 当前点击异步加载的数据 | Function | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本使用",
        "order": "0",
        "jsx": "import { CascaderSelect } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => {\n        data[1].disabled = true;\n        this.setState({ data });\n      })\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  render() {\n    return (\n      <CascaderSelect\n        dataSource={this.state.data}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n展示基本的单选用法。\n\n"
      },
      {
        "title": "自定义样式",
        "order": "5",
        "jsx": "import { CascaderSelect } from \"@icedesign/base\";\n\nconst dataSource = [\n  {\n    value: \"2973\",\n    label: \"陕西\",\n    children: [\n      {\n        value: \"2974\",\n        label: \"西安\",\n        children: [\n          { value: \"2975\", label: \"西安市\" },\n          { value: \"2976\", label: \"高陵县\" }\n        ]\n      },\n      {\n        value: \"2980\",\n        label: \"铜川\",\n        children: [\n          { value: \"2981\", label: \"铜川市\" },\n          { value: \"2982\", label: \"宜君县\" }\n        ]\n      }\n    ]\n  },\n  {\n    value: \"3371\",\n    label: \"新疆\",\n    children: [\n      {\n        value: \"3430\",\n        label: \"巴音郭楞蒙古自治州\",\n        children: [\n          { value: \"3431\", label: \"库尔勒市\" },\n          { value: \"3432\", label: \"和静县\" }\n        ]\n      }\n    ]\n  }\n];\n\nconst displayRender = labels => {\n  return labels.reduce((ret, label, index) => {\n    ret.push(\n      <span className=\"label-ellipsis\" title={label}>\n        {label}\n      </span>\n    );\n    if (index < labels.length - 1) {\n      ret.push(<span className=\"label-separator\"> / </span>);\n    }\n    return ret;\n  }, []);\n};\n\nReactDOM.render(\n  <CascaderSelect\n    style={{ width: \"240px\" }}\n    displayRender={displayRender}\n    showItemCount=\"5\"\n    labelWidth=\"80\"\n    defaultValue=\"3431\"\n    dataSource={dataSource}\n  />,\n  mountNode\n);\n\n",
        "css": ".label-ellipsis {\n    display: inline-block;\n    max-width: 80px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-wrap: normal;\n}\n.label-separator {\n    display: inline-block;\n    vertical-align: top;\n    margin: 0 5px;\n}\n",
        "body": "\n可以通过`displayRender`来定制单选时展示的结果，可以通过`labelWidth`, `showItemCount`来定制组件宽高，其中通过`labelWidth`可设置文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度，通过`showItemCount`可设置展示的菜单项个数。\n\n"
      },
      {
        "title": "异步加载数据",
        "order": "6",
        "jsx": "import { CascaderSelect } from \"@icedesign/base\";\n\nconst dataSource = [\n  {\n    value: \"2973\",\n    label: \"陕西\"\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataSource\n    };\n\n    this.onLoadData = this.onLoadData.bind(this);\n  }\n\n  onLoadData(data) {\n    console.log(data);\n\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this.setState(\n          {\n            dataSource: [\n              {\n                value: \"2973\",\n                label: \"陕西\",\n                children: [\n                  {\n                    value: \"2974\",\n                    label: \"西安\",\n                    children: [\n                      { value: \"2975\", label: \"西安市\", isLeaf: true },\n                      { value: \"2976\", label: \"高陵县\", isLeaf: true }\n                    ]\n                  },\n                  {\n                    value: \"2980\",\n                    label: \"铜川\",\n                    children: [\n                      { value: \"2981\", label: \"铜川市\", isLeaf: true },\n                      { value: \"2982\", label: \"宜君县\", isLeaf: true }\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          resolve\n        );\n      }, 500);\n    });\n  }\n\n  render() {\n    return (\n      <CascaderSelect\n        dataSource={this.state.dataSource}\n        loadData={this.onLoadData}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n展示动态获取数据的用法。\n\n"
      },
      {
        "title": "展开触发行为",
        "order": "1",
        "jsx": "import { Radio, CascaderSelect } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      trigger: \"click\",\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeTrigger = this.handleChangeTrigger.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data }))\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  handleChangeTrigger(trigger) {\n    this.setState({\n      trigger\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"trigger-check\">\n          展开触发行为：\n          <RadioGroup\n            dataSource={[\"click\", \"hover\"]}\n            value={this.state.trigger}\n            onChange={this.handleChangeTrigger}\n          />\n        </div>\n\n        <CascaderSelect\n          expandTrigger={this.state.trigger}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".trigger-check {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n展示可通过`expandTrigger`来设置不同的展开触发行为，支持`click`和`hover`，默认值为`click`。\n\n"
      },
      {
        "title": "设置父子节点选中是否关联",
        "order": "4",
        "jsx": "import { Checkbox, CascaderSelect } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: [],\n      data: [],\n      checkStrictly: false\n    };\n\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data, value: [\"2975\"] }))\n      .catch(e => console.log(e));\n  }\n\n  handleCheck() {\n    this.setState({\n      checkStrictly: !this.state.checkStrictly,\n      value: []\n    });\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"control-multiple-demo\">\n        <label className=\"strictly-check\">\n          <Checkbox\n            value={this.state.checkStrictly}\n            onChange={this.handleCheck}\n          />\n          <span className=\"strictly-text\">\n            开启严格受控，父子节点选中不再关联\n          </span>\n        </label>\n        <CascaderSelect\n          multiple\n          checkStrictly={this.state.checkStrictly}\n          value={this.state.value}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".control-multiple-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-multiple-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n展示受控多选以及是否开启严格受控父子节点选中不再关联的用法。\n\n"
      },
      {
        "title": "多选",
        "order": "2",
        "jsx": "import { CascaderSelect } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => {\n        data[1].disabled = true;\n        data[2].checkboxDisabled = true;\n        this.setState({ data });\n      })\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  render() {\n    return (\n      <CascaderSelect\n        multiple\n        dataSource={this.state.data}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".cascader-value {\n    width: 500px;\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n展示基本的多选用法。\n\n"
      },
      {
        "title": "设置是否只能选择叶子项",
        "order": "3",
        "jsx": "import { Checkbox, CascaderSelect } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: null,\n      changeOnSelect: false,\n      data: []\n    };\n\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data, value: \"2975\" }))\n      .catch(e => console.log(e));\n  }\n\n  handleCheck() {\n    this.setState({\n      changeOnSelect: !this.state.changeOnSelect,\n      value: null\n    });\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"control-single-demo\">\n        <label className=\"change-check\">\n          <Checkbox\n            value={this.state.changeOnSelect}\n            onChange={this.handleCheck}\n          />\n          <span className=\"change-text\">开启选择即改变</span>\n        </label>\n        <CascaderSelect\n          hasClear\n          changeOnSelect={this.state.changeOnSelect}\n          value={this.state.value}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".control-single-demo .change-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-single-demo .change-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n展示受控单选以及是否选择即改变。\n\n"
      }
    ]
  },
  {
    "name": "Cascader",
    "category": "Components",
    "title": "级联",
    "type": "基本",
    "importStatement": "import { Cascader } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n-   适用于从一组具有关联性的数据集合中进行选择的交互方式。\n-   由于子集目录隐藏，级联是一种节约屏幕空间的有效方法。\n-   级别数因业务需求而定，建议不超过5级。\n-   级联多用于表单场景，可以独立在页面中使用，也可以与其他元素组合使用，如级联选择。\n\n",
    "propsSchema": {
      "name": "Cascader",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "dataSource": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "object"
            }
          },
          "required": false,
          "description": "数据源，结构可参考下方说明",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "数据源，结构可参考下方说明"
        },
        "defaultValue": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              }
            ]
          },
          "required": false,
          "description": "（非受控）默认值",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "（非受控）默认值"
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              }
            ]
          },
          "required": false,
          "description": "（受控）当前值",
          "docblock": "（受控）当前值"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "选中值改变时触发的回调函数",
          "docblock": "选中值改变时触发的回调函数\n@param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n@param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点\n@param {Object} extra 额外参数\n@param {Array} extra.selectedPath 单选时选中的数据的路径\n@param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中\n@param {Object} extra.currentData 多选时当前操作的数据\n@param {Array} extra.checkedData 多选时所有被选中的数据\n@param {Array} extra.indeterminateData 多选时半选的数据",
          "params": [
            {
              "name": "value",
              "description": "选中的值，单选时返回单个值，多选时返回数组",
              "type": {
                "name": "union",
                "value": [
                  "String",
                  "Array"
                ]
              }
            },
            {
              "name": "data",
              "description": "选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点",
              "type": {
                "name": "union",
                "value": [
                  "Object",
                  "Array"
                ]
              }
            },
            {
              "name": "extra",
              "description": "额外参数",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "extra.selectedPath",
              "description": "单选时选中的数据的路径",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.checked",
              "description": "多选时当前的操作是选中还是取消选中",
              "type": {
                "name": "Boolean"
              }
            },
            {
              "name": "extra.currentData",
              "description": "多选时当前操作的数据",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "extra.checkedData",
              "description": "多选时所有被选中的数据",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.indeterminateData",
              "description": "多选时半选的数据",
              "type": {
                "name": "Array"
              }
            }
          ],
          "returns": null
        },
        "defaultExpandedValue": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "（非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置",
          "docblock": "（非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置"
        },
        "expandedValue": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "（受控）当前展开值",
          "docblock": "（受控）当前展开值"
        },
        "expandTrigger": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'click'",
                "computed": false
              },
              {
                "value": "'hover'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "展开触发的方式",
          "defaultValue": {
            "value": "'click'",
            "computed": false
          },
          "docblock": "展开触发的方式"
        },
        "onExpand": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "展开时触发的回调函数",
          "docblock": "展开时触发的回调函数\n@param {Array} expandedValue 各列展开值的数组",
          "params": [
            {
              "name": "expandedValue",
              "description": "各列展开值的数组",
              "type": {
                "name": "Array"
              }
            }
          ],
          "returns": null
        },
        "multiple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否多选",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否多选"
        },
        "canOnlySelectLeaf": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "单选时是否只能选中叶子节点",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "单选时是否只能选中叶子节点"
        },
        "canOnlyCheckLeaf": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "多选时是否只能选中叶子节点",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "多选时是否只能选中叶子节点"
        },
        "checkStrictly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "父子节点是否选中不关联",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "父子节点是否选中不关联"
        },
        "labelWidth": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度",
          "docblock": "文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度"
        },
        "showItemCount": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "每一列展示的个数",
          "defaultValue": {
            "value": "6",
            "computed": false
          },
          "docblock": "每一列展示的个数"
        },
        "loadData": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "异步加载数据函数",
          "docblock": "异步加载数据函数\n@param {Object} data 当前点击异步加载的数据",
          "params": [
            {
              "name": "data",
              "description": "当前点击异步加载的数据",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ndataSource | 数据源，结构可参考下方说明 | Array&lt;Object&gt; | []\ndefaultValue | （非受控）默认值 | String/Array&lt;String&gt; | null\nvalue | （受控）当前值 | String/Array&lt;String&gt; | -\nonChange | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array, extra: Object) => void<br>**参数**:<br>*value*: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>*data*: {Object/Array} 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点<br>*extra*: {Object} 额外参数<br>*extra.selectedPath*: {Array} 单选时选中的数据的路径<br>*extra.checked*: {Boolean} 多选时当前的操作是选中还是取消选中<br>*extra.currentData*: {Object} 多选时当前操作的数据<br>*extra.checkedData*: {Array} 多选时所有被选中的数据<br>*extra.indeterminateData*: {Array} 多选时半选的数据 | Function | -\ndefaultExpandedValue | （非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置 | Array&lt;String&gt; | -\nexpandedValue | （受控）当前展开值 | Array&lt;String&gt; | -\nexpandTrigger | 展开触发的方式<br><br>**可选值**:<br>'click', 'hover' | Enum | 'click'\nonExpand | 展开时触发的回调函数<br><br>**签名**:<br>Function(expandedValue: Array) => void<br>**参数**:<br>*expandedValue*: {Array} 各列展开值的数组 | Function | -\nmultiple | 是否多选 | Boolean | false\ncanOnlySelectLeaf | 单选时是否只能选中叶子节点 | Boolean | false\ncanOnlyCheckLeaf | 多选时是否只能选中叶子节点 | Boolean | false\ncheckStrictly | 父子节点是否选中不关联 | Boolean | false\nlabelWidth | 文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度 | String/Number | -\nshowItemCount | 每一列展示的个数 | String/Number | 6\nloadData | 异步加载数据函数<br><br>**签名**:<br>Function(data: Object) => void<br>**参数**:<br>*data*: {Object} 当前点击异步加载的数据 | Function | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本使用",
        "order": "0",
        "jsx": "import { Cascader } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      label: \"\",\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => {\n        data[1].disabled = true;\n        this.setState({ data });\n      })\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      label: extra.selectedPath.map(d => d.label).join(\" / \")\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"cascader-value\">选择：{this.state.label}</div>\n        <Cascader\n          dataSource={this.state.data}\n          defaultValue=\"2975\"\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".cascader-value {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n展示基本的单选用法。\n\n"
      },
      {
        "title": "自定义样式",
        "order": "5",
        "jsx": "import { Cascader } from \"@icedesign/base\";\n\nconst dataSource = [\n  {\n    value: \"2973\",\n    label: \"陕西\",\n    children: [\n      {\n        value: \"2974\",\n        label: \"西安\",\n        children: [\n          { value: \"2975\", label: \"西安市\" },\n          { value: \"2976\", label: \"高陵县\" }\n        ]\n      },\n      {\n        value: \"2980\",\n        label: \"铜川\",\n        children: [\n          { value: \"2981\", label: \"铜川市\" },\n          { value: \"2982\", label: \"宜君县\" }\n        ]\n      }\n    ]\n  },\n  {\n    value: \"3371\",\n    label: \"新疆\",\n    children: [\n      {\n        value: \"3430\",\n        label: \"巴音郭楞蒙古自治州\",\n        children: [\n          { value: \"3431\", label: \"库尔勒市\" },\n          { value: \"3432\", label: \"和静县\" }\n        ]\n      }\n    ]\n  }\n];\n\nReactDOM.render(\n  <Cascader\n    defaultValue=\"3439\"\n    defaultExpandedValue={[\"3371\", \"3430\"]}\n    showItemCount=\"5\"\n    labelWidth=\"100\"\n    dataSource={dataSource}\n  />,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过`labelWidth`, `showItemCount`来定制组件宽高，其中通过`labelWidth`可设置文字区域宽度，当文字超过宽度时，结尾会以省略号显示，默认值为文字实际宽度，通过`showItemCount`可设置展示的菜单项个数。\n\n"
      },
      {
        "title": "异步加载数据",
        "order": "6",
        "jsx": "import { Cascader } from \"@icedesign/base\";\n\nconst dataSource = [\n  {\n    value: \"2973\",\n    label: \"陕西\"\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataSource\n    };\n\n    this.onLoadData = this.onLoadData.bind(this);\n  }\n\n  onLoadData(data) {\n    console.log(data);\n\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this.setState(\n          {\n            dataSource: [\n              {\n                value: \"2973\",\n                label: \"陕西\",\n                children: [\n                  {\n                    value: \"2974\",\n                    label: \"西安\",\n                    children: [\n                      { value: \"2975\", label: \"西安市\", isLeaf: true },\n                      { value: \"2976\", label: \"高陵县\", isLeaf: true }\n                    ]\n                  },\n                  {\n                    value: \"2980\",\n                    label: \"铜川\",\n                    children: [\n                      { value: \"2981\", label: \"铜川市\", isLeaf: true },\n                      { value: \"2982\", label: \"宜君县\", isLeaf: true }\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          resolve\n        );\n      }, 500);\n    });\n  }\n\n  render() {\n    return (\n      <Cascader\n        canOnlySelectLeaf\n        dataSource={this.state.dataSource}\n        loadData={this.onLoadData}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".cascader-value {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n展示动态获取数据的用法。\n\n"
      },
      {
        "title": "展开触发行为",
        "order": "1",
        "jsx": "import { Radio, Cascader } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      trigger: \"click\",\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeTrigger = this.handleChangeTrigger.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data }))\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  handleChangeTrigger(trigger) {\n    this.setState({\n      trigger\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"trigger-check\">\n          展开触发行为：\n          <RadioGroup\n            dataSource={[\"click\", \"hover\"]}\n            value={this.state.trigger}\n            onChange={this.handleChangeTrigger}\n          />\n        </div>\n\n        <Cascader\n          expandTrigger={this.state.trigger}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".trigger-check {\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n展示可通过`expandTrigger`来设置不同的展开触发行为，支持`click`和`hover`，默认值为`click`。\n\n"
      },
      {
        "title": "设置父子节点选中是否关联",
        "order": "4",
        "jsx": "import { Checkbox, Cascader } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: [],\n      data: [],\n      checkStrictly: false\n    };\n\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data, value: [\"2975\"] }))\n      .catch(e => console.log(e));\n  }\n\n  handleCheck() {\n    this.setState({\n      checkStrictly: !this.state.checkStrictly,\n      value: []\n    });\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"control-multiple-demo\">\n        <label className=\"strictly-check\">\n          <Checkbox\n            value={this.state.checkStrictly}\n            onChange={this.handleCheck}\n          />\n          <span className=\"strictly-text\">\n            开启严格受控，父子节点选中不再关联\n          </span>\n        </label>\n        <Cascader\n          multiple\n          checkStrictly={this.state.checkStrictly}\n          value={this.state.value}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".control-multiple-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-multiple-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n展示受控多选以及是否开启严格受控父子节点选中不再关联的用法。\n\n"
      },
      {
        "title": "多选",
        "order": "2",
        "jsx": "import { Cascader } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      label: \"\",\n      data: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => {\n        data[1].disabled = true;\n        data[2].checkboxDisabled = true;\n        this.setState({ data });\n      })\n      .catch(e => console.log(e));\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      label: data.map(d => d.label).join(\", \")\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"cascader-value\">选择：{this.state.label}</div>\n        <Cascader\n          multiple\n          defaultValue={[\"2975\"]}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".cascader-value {\n    width: 500px;\n    margin-bottom: 10px;\n    font-size: 14px;\n    color: #666;\n}\n",
        "body": "\n展示基本的多选用法。\n\n"
      },
      {
        "title": "设置是否只能选择叶子项",
        "order": "3",
        "jsx": "import { Checkbox, Cascader } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: null,\n      canOnlySelectLeaf: false,\n      data: []\n    };\n\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data, value: \"2975\" }))\n      .catch(e => console.log(e));\n  }\n\n  handleCheck() {\n    this.setState({\n      canOnlySelectLeaf: !this.state.canOnlySelectLeaf,\n      value: null\n    });\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"control-single-demo\">\n        <label className=\"leaf-check\">\n          <Checkbox\n            value={this.state.canOnlySelectLeaf}\n            onChange={this.handleCheck}\n          />\n          <span className=\"leaf-text\">开启只能选择叶子项</span>\n        </label>\n        <Cascader\n          canOnlySelectLeaf={this.state.canOnlySelectLeaf}\n          value={this.state.value}\n          dataSource={this.state.data}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".control-single-demo .leaf-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-single-demo .leaf-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n展示受控单选以及是否只能选择叶子项的用法。\n\n"
      }
    ]
  },
  {
    "name": "Checkbox",
    "category": "Components",
    "title": "复选按钮",
    "type": "表单",
    "importStatement": "import { Checkbox } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n多选框\n\n### 何时使用\n\n复选框允许用户从一个数据集中选择多个选项。如果在一个列表中有多个选项，你可以通过使用复选框而不是开/关切换来节省空间。如果你有一个单选项，不要用复选框，使用开/关切换。\n\n",
    "propsSchema": {
      "name": "Checkbox",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内敛样式",
          "docblock": "自定义内敛样式",
          "properties": []
        },
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "选中状态",
          "docblock": "选中状态"
        },
        "defaultChecked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "默认选中状态",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "默认选中状态"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "禁用",
          "docblock": "禁用"
        },
        "indeterminate": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性",
          "docblock": "Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性"
        },
        "defaultIndeterminate": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "状态变化时触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "状态变化时触发的事件\n@param {Boolean} checked 是否选中\n@param {Event} e Dom 事件对象",
          "params": [
            {
              "name": "checked",
              "description": "是否选中",
              "type": {
                "name": "Boolean"
              }
            },
            {
              "name": "e",
              "description": "Dom 事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Group",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内敛样式",
              "docblock": "自定义内敛样式",
              "properties": []
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "整体禁用",
              "docblock": "整体禁用"
            },
            "dataSource": {
              "type": {
                "name": "arrayOf",
                "value": {
                  "name": "any"
                }
              },
              "required": false,
              "description": "可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]`",
              "defaultValue": {
                "value": "[]",
                "computed": false
              },
              "docblock": "可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]`"
            },
            "value": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "被选中的值列表",
              "docblock": "被选中的值列表"
            },
            "defaultValue": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "默认被选中的值列表",
              "docblock": "默认被选中的值列表"
            },
            "children": {
              "type": {
                "name": "arrayOf",
                "value": {
                  "name": "element"
                }
              },
              "required": false,
              "description": "通过子元素方式设置内部 checkbox",
              "docblock": "通过子元素方式设置内部 checkbox"
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "选中值改变时的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "选中值改变时的事件\n@param {Array} value 选中项列表\n@param {Event} e Dom 事件对象",
              "params": [
                {
                  "name": "value",
                  "description": "选中项列表",
                  "type": {
                    "name": "Array"
                  }
                },
                {
                  "name": "e",
                  "description": "Dom 事件对象",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "returns": null
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nchecked | 选中状态 | Boolean | -\ndefaultChecked | 默认选中状态 | Boolean | false\ndisabled | 禁用 | Boolean | -\nindeterminate | Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性 | Boolean | -\ndefaultIndeterminate | Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性 | Boolean | false\nonChange | 状态变化时触发的事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>*checked*: {Boolean} 是否选中<br>*e*: {Event} Dom 事件对象 | Function | () =&gt; {}\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Group",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\ndisabled | 整体禁用 | Boolean | -\ndataSource | 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]` | Array&lt;any&gt; | []\nvalue | 被选中的值列表 | Array | -\ndefaultValue | 默认被选中的值列表 | Array | -\nchildren | 通过子元素方式设置内部 checkbox | Array&lt;ReactElement&gt; | -\nonChange | 选中值改变时的事件<br><br>**签名**:<br>Function(value: Array, e: Event) => void<br>**参数**:<br>*value*: {Array} 选中项列表<br>*e*: {Event} Dom 事件对象 | Function | () =&gt; {}\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Checkbox } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h6>无标签不同状态的样子</h6>\n    未选中：<Checkbox />&nbsp; 默认选中：<Checkbox defaultChecked />&nbsp;\n    半选：<Checkbox defaultIndeterminate />&nbsp; 禁用：<Checkbox disabled />&nbsp;\n    选中时禁用：<Checkbox disabled checked />&nbsp; 选中：<Checkbox checked />\n    <h6>带有label标签的样子</h6>\n    <Checkbox>香蕉</Checkbox>\n    <Checkbox id=\"apple\" />\n    <label htmlFor=\"apple\" className=\"next-checkbox-label\">\n      苹果\n    </label>\n    <label>\n      <Checkbox id=\"pear\" />\n      <span className=\"next-checkbox-label\">雪梨</span>\n    </label>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n使用 `Checkbox` 渲染的基本组件。\n\n"
      },
      {
        "title": "受限组件",
        "order": "2",
        "jsx": "import { Checkbox } from \"@icedesign/base\";\n\nconst { Group: CheckboxGroup } = Checkbox;\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\"\n  },\n  {\n    value: \"pear\",\n    label: \"梨\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\"\n  }\n];\n\nclass ControlApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: [\"orange\"]\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(selectedItems) {\n    console.log(\"onChange callback\", selectedItems);\n    this.setState({\n      value: selectedItems\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ padding: \"20px\" }}>\n        <CheckboxGroup\n          value={this.state.value}\n          dataSource={list}\n          onChange={this.onChange}\n        />\n        <br />\n        <CheckboxGroup\n          value={this.state.value}\n          dataSource={list}\n          onChange={this.onChange}\n          disabled\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n\n",
        "css": "",
        "body": "\n使用 `CheckboxGroup` 渲染的组，通过设置 `value` 属性可以让组件变成[受限组件](https://facebook.github.io/react/docs/forms.html#controlled-components)。\n\n"
      },
      {
        "title": "中间状态组件",
        "order": "1",
        "jsx": "import { Checkbox, Button } from \"@icedesign/base\";\n\nclass IndeterminateApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checked: false,\n      indeterminate: true,\n      disabled: false\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Checkbox\n          checked={this.state.checked}\n          indeterminate={this.state.indeterminate}\n          disabled={this.state.disabled}\n          onChange={checked => {\n            this.setState({ checked: checked, indeterminate: false });\n          }}\n        />\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.setState({ checked: true, indeterminate: false });\n          }}\n        >\n          checked = true\n        </Button>\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.setState({ checked: false });\n          }}\n        >\n          checked = false\n        </Button>\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.setState({ checked: false, indeterminate: true });\n          }}\n        >\n          indeterminate = true\n        </Button>\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.setState({ indeterminate: false });\n          }}\n        >\n          indeterminate = false\n        </Button>\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.setState({ disabled: !this.state.disabled });\n          }}\n        >\n          toggle disabled\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<IndeterminateApp />, mountNode);\n\n",
        "css": "",
        "body": "\n通过使用 `indeterminate` 来渲染[中间状态](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox)的组件。\n\n"
      },
      {
        "title": "Checkbox嵌套使用",
        "order": "4",
        "jsx": "import { Checkbox } from \"@icedesign/base\";\n\nconst { Group: CheckboxGroup } = Checkbox;\n\nclass NestApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: [\"orange\", \"orange2\"]\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(selectedItems) {\n    this.setState({\n      value: selectedItems\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <CheckboxGroup value={this.state.value} onChange={this.onChange}>\n          <Checkbox id=\"apple\" value=\"apple\" disabled>\n            苹果\n          </Checkbox>\n          <Checkbox id=\"watermelon\" value=\"watermelon\">\n            西瓜\n          </Checkbox>\n          <Checkbox id=\"orange\" value=\"orange\">\n            橙子\n          </Checkbox>\n        </CheckboxGroup>\n        <br />\n        <br />\n        <CheckboxGroup\n          value={this.state.value}\n          onChange={this.onChange}\n          disabled\n        >\n          <Checkbox id=\"apple2\" value=\"apple2\" disabled>\n            苹果\n          </Checkbox>\n          <Checkbox id=\"watermelon2\" value=\"watermelon2\">\n            西瓜\n          </Checkbox>\n          <Checkbox id=\"orange2\" value=\"orange2\">\n            橙子\n          </Checkbox>\n        </CheckboxGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<NestApp />, mountNode);\n\n",
        "css": "",
        "body": "\n使用 `CheckboxGroup`，通过直接嵌套 `Checkbox` 组件来渲染的组。\n\n"
      },
      {
        "title": "非受限组件",
        "order": "3",
        "jsx": "import { Checkbox } from \"@icedesign/base\";\n\nconst { Group: CheckboxGroup } = Checkbox;\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\",\n    disabled: false\n  },\n  {\n    value: \"pear\",\n    label: \"梨\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\",\n    disabled: true\n  }\n];\n\nclass UnControlApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(selectedItems) {\n    console.log(\"onChange callback\", selectedItems);\n  }\n\n  render() {\n    return (\n      <div style={{ padding: \"20px\" }}>\n        <h4>dataSource</h4>\n        <CheckboxGroup\n          defaultValue={[\"apple\"]}\n          dataSource={list}\n          onChange={this.onChange}\n        />\n        <br />\n        <br />\n        <CheckboxGroup\n          defaultValue={[\"apple\"]}\n          dataSource={list}\n          onChange={this.onChange}\n          disabled\n        />\n        <br />\n        <h4>嵌套使用</h4>\n        <CheckboxGroup\n          disabled\n          defaultValue={[\"apple\"]}\n          onChange={this.onChange}\n        >\n          <Checkbox id=\"apple\" value=\"apple\" disabled>\n            苹果\n          </Checkbox>\n          <Checkbox id=\"watermelon\" value=\"watermelon\">\n            西瓜\n          </Checkbox>\n          <Checkbox id=\"orange\" value=\"orange\">\n            橙子\n          </Checkbox>\n        </CheckboxGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<UnControlApp />, mountNode);\n\n",
        "css": "",
        "body": "\n使用 `CheckboxGroup` 渲染的组，通过设置 `defaultValue` 属性可以让组件变成[非受限组件](https://facebook.github.io/react/docs/forms.html#uncontrolled-components)。\n\n"
      }
    ]
  },
  {
    "name": "ConfigProvider",
    "category": "Components",
    "title": "通过Context配置Next组件通用的前缀",
    "type": "基本",
    "importStatement": "import { ConfigProvider } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\nNext 组件 className 的默认前缀都是 'next-' ，如 'next-btn'，你可能在以下两种情况下想改变这个默认前缀：\n\n-   自定义组件品牌，如 'my-btn'，'my-select'\n-   一个页面中同时引入两个主题，防止相同类名样式互相覆盖\n\n### 基本使用\n\n#### 在应用中使用\n\n1.  为你的应用包裹 ConfigProvider，并设置相应的 prefix\n\n    entry.jsx\n\n    ```js\n    class App extends React.Component {\n        render() {\n            return (\n                <ConfigProvider prefix=\"my-\">\n                    <div>\n                        <Input />\n                        <Button>Submit</Button>\n                    </div>\n                </ConfigProvider>\n            );\n        }\n    }\n    ```\n\n2.  scss入口文件中在引入主题scss文件前，设置`$css-prefix`\n\n    entry.scss\n\n    ```css\n    $css-prefix: \"my-\";\n    @import \"~@alife/dpl-xxx/index.scss\";\n    ```\n\n#### 如何让组件支持 ConfigProvider ？\n\n组件的 prefix 支持从 context 中获取：\n\n```js\nclass App extends React.Component {\n    static contextTypes = {\n        prefix: React.PropTypes.string\n    };\n\n    render() {\n        const prefix = this.context.prefix;\n        return (\n            <span className={`${prefix}app`}>\n                <a className={`${prefix}app-link`}>link</a>\n            </span>\n        );\n    }\n}\n```\n\n",
    "propsSchema": {
      "name": "ConfigProvider",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "子Element",
          "docblock": "子Element"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nchildren | 子Element | ReactNode | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { ConfigProvider } from \"@icedesign/base\";\n\n/* eslint-disable react/no-multi-comp */\n/* eslint-disable react/prefer-stateless-function */\n\nclass Demo extends React.Component {\n  static contextTypes = {\n    prefix: React.PropTypes.string\n  };\n\n  static propTypes = {\n    prefix: React.PropTypes.string\n  };\n\n  render() {\n    const prefix = this.context.prefix || this.props.prefix;\n    return <span className={`${prefix}btn`}>{prefix}</span>;\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    prefix: \"a-\"\n  };\n\n  handleToggle() {\n    this.setState({\n      prefix: this.state.prefix === \"a-\" ? \"b-\" : \"a-\"\n    });\n  }\n\n  render() {\n    return (\n      <ConfigProvider prefix={this.state.prefix}>\n        <div>\n          <button\n            className=\"toggle-prefix\"\n            type=\"primary\"\n            style={{ marginRight: \"10px\" }}\n            onClick={this.handleToggle.bind(this)}\n          >\n            切换前缀\n          </button>\n          <Demo />\n        </div>\n      </ConfigProvider>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".toggle-prefix {\n    width: 100px;\n    height: 40px;\n    border: 1px solid #999;\n    border-radius: 3px;\n    background: #FFF;\n    font-size: 14px;\n    outline: none;\n    cursor: pointer;\n}\n.a-btn {\n    display: inline-block;\n    width: 40px;\n    height: 40px;\n    line-height: 40px;\n    text-align: center;\n    font-size: 14px;\n    border-radius: 3px;\n    background: red;\n}\n.b-btn {\n    display: inline-block;\n    width: 40px;\n    height: 40px;\n    line-height: 40px;\n    text-align: center;\n    font-size: 14px;\n    border-radius: 3px;\n    background: blue;\n}\n",
        "body": "\n最简单的用法。\n\n"
      }
    ]
  },
  {
    "name": "DatePicker",
    "category": "Components",
    "title": "日期选择框",
    "type": "表单",
    "importStatement": "import { DatePicker } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n输入或选择日期的控件。当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。\n\n",
    "propsSchema": {
      "name": "DatePicker",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "品牌样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "品牌样式前缀"
        },
        "defaultBase": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "默认的基准日期",
          "docblock": "默认的基准日期"
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "默认日期",
          "docblock": "默认日期"
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "日期值",
          "docblock": "日期值"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "时间发生改变时的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "时间发生改变时的回调函数\n@param {String} date       改变后的日期\n@param {String} formatDate 改变后的格式化日期",
          "params": [
            {
              "name": "date",
              "description": "改变后的日期",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "formatDate",
              "description": "改变后的格式化日期",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "defaultOpen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否默认展开",
          "docblock": "是否默认展开"
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否展开",
          "docblock": "是否展开"
        },
        "onOpenChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "当面板展开状态改变时的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "当面板展开状态改变时的回调函数\n@param {Boolean} open 面板的展开状态",
          "params": [
            {
              "name": "open",
              "description": "面板的展开状态",
              "type": {
                "name": "Boolean"
              }
            }
          ],
          "returns": null
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "输入框大小",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "输入框大小"
        },
        "language": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'en-us'",
                "computed": false
              },
              {
                "value": "'ar'",
                "computed": false
              },
              {
                "value": "'de'",
                "computed": false
              },
              {
                "value": "'es'",
                "computed": false
              },
              {
                "value": "'fr'",
                "computed": false
              },
              {
                "value": "'hi'",
                "computed": false
              },
              {
                "value": "'it'",
                "computed": false
              },
              {
                "value": "'ja'",
                "computed": false
              },
              {
                "value": "'ko'",
                "computed": false
              },
              {
                "value": "'pt'",
                "computed": false
              },
              {
                "value": "'ru'",
                "computed": false
              },
              {
                "value": "'zh-cn'",
                "computed": false
              },
              {
                "value": "'zh-hk'",
                "computed": false
              },
              {
                "value": "'zh-tw'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "语言",
          "docblock": "语言"
        },
        "locale": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)",
          "docblock": "国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)",
          "properties": []
        },
        "popupStyle": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "弹层面板样式",
          "docblock": "弹层面板样式",
          "properties": []
        },
        "popupAlign": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "弹层对齐方式",
          "defaultValue": {
            "value": "'tl tl'",
            "computed": false
          },
          "docblock": "弹层对齐方式"
        },
        "popupOffset": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "弹层偏移",
          "defaultValue": {
            "value": "[0, 0]",
            "computed": false
          },
          "docblock": "弹层偏移"
        },
        "format": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "输出日期值格式化",
          "docblock": "输出日期值格式化"
        },
        "formater": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "日期格式化（可替代 format)",
          "defaultValue": {
            "value": "['YYYY-MM-DD', 'HH:mm:ss']",
            "computed": false
          },
          "docblock": "日期格式化（可替代 format)"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否禁用",
          "docblock": "是否禁用"
        },
        "hasClear": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否展示清空按钮",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否展示清空按钮"
        },
        "showTime": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false,
          "description": "是否展示时间选择或传入 { defaultValue } 设置时间初值",
          "docblock": "是否展示时间选择或传入 { defaultValue } 设置时间初值"
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "输入框是否只读",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "输入框是否只读"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义组件样式",
          "docblock": "自定义组件样式"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "MonthPicker",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "品牌样式前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "品牌样式前缀"
            },
            "defaultBase": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "默认的基准日期",
              "docblock": "默认的基准日期"
            },
            "defaultValue": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "默认日期",
              "docblock": "默认日期"
            },
            "value": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "日期值",
              "docblock": "日期值"
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "日期发生改变时的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "日期发生改变时的回调\n@param {String} date       改变后的日期\n@param {String} formatDate 格式化的日期",
              "params": [
                {
                  "name": "date",
                  "description": "改变后的日期",
                  "type": {
                    "name": "String"
                  }
                },
                {
                  "name": "formatDate",
                  "description": "格式化的日期",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": null
            },
            "defaultOpen": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否默认展开",
              "docblock": "是否默认展开"
            },
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否展开",
              "docblock": "是否展开"
            },
            "onOpenChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "当面板展开变化时的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "当面板展开变化时的回调\n@param {Boolean} open 面板的展开状态",
              "params": [
                {
                  "name": "open",
                  "description": "面板的展开状态",
                  "type": {
                    "name": "Boolean"
                  }
                }
              ],
              "returns": null
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'small'",
                    "computed": false
                  },
                  {
                    "value": "'medium'",
                    "computed": false
                  },
                  {
                    "value": "'large'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "输入框大小",
              "defaultValue": {
                "value": "'medium'",
                "computed": false
              },
              "docblock": "输入框大小"
            },
            "language": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'en-us'",
                    "computed": false
                  },
                  {
                    "value": "'ar'",
                    "computed": false
                  },
                  {
                    "value": "'de'",
                    "computed": false
                  },
                  {
                    "value": "'es'",
                    "computed": false
                  },
                  {
                    "value": "'fr'",
                    "computed": false
                  },
                  {
                    "value": "'hi'",
                    "computed": false
                  },
                  {
                    "value": "'it'",
                    "computed": false
                  },
                  {
                    "value": "'ja'",
                    "computed": false
                  },
                  {
                    "value": "'ko'",
                    "computed": false
                  },
                  {
                    "value": "'pt'",
                    "computed": false
                  },
                  {
                    "value": "'ru'",
                    "computed": false
                  },
                  {
                    "value": "'zh-cn'",
                    "computed": false
                  },
                  {
                    "value": "'zh-hk'",
                    "computed": false
                  },
                  {
                    "value": "'zh-tw'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "语言",
              "docblock": "语言"
            },
            "locale": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)",
              "docblock": "国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)",
              "properties": []
            },
            "popupStyle": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "弹层样式",
              "docblock": "弹层样式",
              "properties": []
            },
            "popupAlign": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "弹层对齐方式",
              "defaultValue": {
                "value": "'tl tl'",
                "computed": false
              },
              "docblock": "弹层对齐方式"
            },
            "popupOffset": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "弹层偏移",
              "defaultValue": {
                "value": "[0, 0]",
                "computed": false
              },
              "docblock": "弹层偏移"
            },
            "format": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "展开日期的格式",
              "defaultValue": {
                "value": "'YYYY-MM'",
                "computed": false
              },
              "docblock": "展开日期的格式"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否禁用",
              "docblock": "是否禁用"
            },
            "hasClear": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否有清空按钮",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否有清空按钮"
            },
            "readOnly": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "输入框是否只读",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "输入框是否只读"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义组件样式",
              "docblock": "自定义组件样式"
            }
          },
          "methods": []
        },
        {
          "name": "RangePicker",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "品牌样式前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "品牌样式前缀"
            },
            "defaultBase": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "默认的基准日期",
              "docblock": "默认的基准日期"
            },
            "defaultValue": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "默认日期值",
              "docblock": "默认日期值"
            },
            "value": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "日期值",
              "docblock": "日期值"
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "时间发生改变的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "时间发生改变的回调\n@param {Array} dateRange        选中的日期区间数组\n@param {Array} formatDateRnage  格式化后的选中的日期区间数组",
              "params": [
                {
                  "name": "dateRange",
                  "description": "选中的日期区间数组",
                  "type": {
                    "name": "Array"
                  }
                },
                {
                  "name": "formatDateRnage",
                  "description": "格式化后的选中的日期区间数组",
                  "type": {
                    "name": "Array"
                  }
                }
              ],
              "returns": null
            },
            "onStartChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "开始日期变化时的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "开始日期变化时的回调\n@param {String} date 开始日期",
              "params": [
                {
                  "name": "date",
                  "description": "开始日期",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": null
            },
            "onEndChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "结束日期变化时的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "结束日期变化时的回调\n@param {String} date 结束日期",
              "params": [
                {
                  "name": "date",
                  "description": "结束日期",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": null
            },
            "defaultOpen": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "默认是否展开",
              "docblock": "默认是否展开"
            },
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否展开",
              "docblock": "是否展开"
            },
            "onOpenChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "当面板展开状态改变时的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "当面板展开状态改变时的回调\n@param {Boolean} 面板的 open 状态",
              "params": [
                {
                  "name": "面板的",
                  "description": "open 状态",
                  "type": {
                    "name": "Boolean"
                  }
                }
              ],
              "returns": null
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'small'",
                    "computed": false
                  },
                  {
                    "value": "'medium'",
                    "computed": false
                  },
                  {
                    "value": "'large'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "输入框大小",
              "defaultValue": {
                "value": "'medium'",
                "computed": false
              },
              "docblock": "输入框大小"
            },
            "language": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'en-us'",
                    "computed": false
                  },
                  {
                    "value": "'ar'",
                    "computed": false
                  },
                  {
                    "value": "'de'",
                    "computed": false
                  },
                  {
                    "value": "'es'",
                    "computed": false
                  },
                  {
                    "value": "'fr'",
                    "computed": false
                  },
                  {
                    "value": "'hi'",
                    "computed": false
                  },
                  {
                    "value": "'it'",
                    "computed": false
                  },
                  {
                    "value": "'ja'",
                    "computed": false
                  },
                  {
                    "value": "'ko'",
                    "computed": false
                  },
                  {
                    "value": "'pt'",
                    "computed": false
                  },
                  {
                    "value": "'ru'",
                    "computed": false
                  },
                  {
                    "value": "'zh-cn'",
                    "computed": false
                  },
                  {
                    "value": "'zh-hk'",
                    "computed": false
                  },
                  {
                    "value": "'zh-tw'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "语言",
              "docblock": "语言"
            },
            "locale": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)",
              "docblock": "国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)",
              "properties": []
            },
            "popupStyle": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "弹层样式",
              "docblock": "弹层样式",
              "properties": []
            },
            "popupAlign": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "弹层对其方式",
              "defaultValue": {
                "value": "'tl tl'",
                "computed": false
              },
              "docblock": "弹层对其方式"
            },
            "popupOffset": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "弹层偏移",
              "defaultValue": {
                "value": "[0, 0]",
                "computed": false
              },
              "docblock": "弹层偏移"
            },
            "format": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": false,
              "description": "输出日期的格式",
              "docblock": "输出日期的格式"
            },
            "formater": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "日期值格式化（可替代 format）",
              "defaultValue": {
                "value": "['YYYY-MM-DD', 'HH:mm:ss']",
                "computed": false
              },
              "docblock": "日期值格式化（可替代 format）"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否禁用",
              "docblock": "是否禁用"
            },
            "hasClear": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否有清空按钮",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否有清空按钮"
            },
            "showTime": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "bool"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "是否显示时间或传入 { defaultValue } 设置时间初值",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否显示时间或传入 { defaultValue } 设置时间初值"
            },
            "resetTime": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "重新选择时是否重置时间",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "重新选择时是否重置时间"
            },
            "ranges": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "用户预设的快捷选择的日期范围",
              "defaultValue": {
                "value": "{}",
                "computed": false
              },
              "docblock": "用户预设的快捷选择的日期范围",
              "properties": []
            },
            "readOnly": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "输入框是否只读",
              "docblock": "输入框是否只读"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义组件样式",
              "docblock": "自定义组件样式"
            }
          },
          "methods": [
            {
              "name": "normalizeValue",
              "docblock": "规格化输入日期值\n@param {Array} value 输入日期值数组\n@return {Array} 返回 moment 包裹后的日期数组",
              "modifiers": [],
              "params": [
                {
                  "name": "value",
                  "description": "输入日期值数组",
                  "type": {
                    "name": "Array"
                  }
                },
                {
                  "name": "checkDisabled"
                }
              ],
              "returns": {
                "description": "返回 moment 包裹后的日期数组",
                "type": {
                  "name": "Array"
                }
              },
              "description": "规格化输入日期值"
            },
            {
              "name": "parseValue",
              "docblock": "从日期值中解析出日期范围对象\n@param {Array} value 规格化后的日期值\n@return {Object} { startDate, startTime, endDate, endTime, all }",
              "modifiers": [],
              "params": [
                {
                  "name": "value",
                  "description": "规格化后的日期值",
                  "type": {
                    "name": "Array"
                  }
                }
              ],
              "returns": {
                "description": "{ startDate, startTime, endDate, endTime, all }",
                "type": {
                  "name": "Object"
                }
              },
              "description": "从日期值中解析出日期范围对象"
            }
          ]
        },
        {
          "name": "YearPicker",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "品牌的样式前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "品牌的样式前缀"
            },
            "defaultBase": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "默认的基准日期",
              "docblock": "默认的基准日期"
            },
            "defaultValue": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "默认日期",
              "docblock": "默认日期"
            },
            "value": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "日期",
              "docblock": "日期"
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "时间发生变化的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "时间发生变化的回调\n@param {String} date         改变后的日期\n@param {String} formateDate  格式化的日期",
              "params": [
                {
                  "name": "date",
                  "description": "改变后的日期",
                  "type": {
                    "name": "String"
                  }
                },
                {
                  "name": "formateDate",
                  "description": "格式化的日期",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": null
            },
            "defaultOpen": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "默认是否展开",
              "docblock": "默认是否展开"
            },
            "open": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否展开",
              "docblock": "是否展开"
            },
            "onOpenChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "当面板展开状态改变时的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "当面板展开状态改变时的回调\n@param {Boolean} open  面板的展开状态",
              "params": [
                {
                  "name": "open",
                  "description": "面板的展开状态",
                  "type": {
                    "name": "Boolean"
                  }
                }
              ],
              "returns": null
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'small'",
                    "computed": false
                  },
                  {
                    "value": "'medium'",
                    "computed": false
                  },
                  {
                    "value": "'large'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "输入框尺寸",
              "defaultValue": {
                "value": "'medium'",
                "computed": false
              },
              "docblock": "输入框尺寸"
            },
            "language": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'en-us'",
                    "computed": false
                  },
                  {
                    "value": "'ar'",
                    "computed": false
                  },
                  {
                    "value": "'de'",
                    "computed": false
                  },
                  {
                    "value": "'es'",
                    "computed": false
                  },
                  {
                    "value": "'fr'",
                    "computed": false
                  },
                  {
                    "value": "'hi'",
                    "computed": false
                  },
                  {
                    "value": "'it'",
                    "computed": false
                  },
                  {
                    "value": "'ja'",
                    "computed": false
                  },
                  {
                    "value": "'ko'",
                    "computed": false
                  },
                  {
                    "value": "'pt'",
                    "computed": false
                  },
                  {
                    "value": "'ru'",
                    "computed": false
                  },
                  {
                    "value": "'zh-cn'",
                    "computed": false
                  },
                  {
                    "value": "'zh-hk'",
                    "computed": false
                  },
                  {
                    "value": "'zh-tw'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "语言",
              "docblock": "语言"
            },
            "locale": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)",
              "docblock": "国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js)",
              "properties": []
            },
            "popupStyle": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "弹层样式",
              "docblock": "弹层样式",
              "properties": []
            },
            "popupAlign": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "弹层对齐方式",
              "defaultValue": {
                "value": "'tl tl'",
                "computed": false
              },
              "docblock": "弹层对齐方式"
            },
            "popupOffset": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "弹层偏移",
              "defaultValue": {
                "value": "[0, 0]",
                "computed": false
              },
              "docblock": "弹层偏移"
            },
            "format": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "日期格式",
              "defaultValue": {
                "value": "'YYYY'",
                "computed": false
              },
              "docblock": "日期格式"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否禁用",
              "docblock": "是否禁用"
            },
            "hasClear": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否展示清空按钮",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否展示清空按钮"
            },
            "readOnly": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "输入框是否只读",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "输入框是否只读"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义组件样式",
              "docblock": "自定义组件样式"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 品牌样式前缀 | String | 'next-'\ndefaultBase | 默认的基准日期 | String | -\ndefaultValue | 默认日期 | any | -\nvalue | 日期值 | any | -\nonChange | 时间发生改变时的回调函数<br><br>**签名**:<br>Function(date: String, formatDate: String) => void<br>**参数**:<br>*date*: {String} 改变后的日期<br>*formatDate*: {String} 改变后的格式化日期 | Function | () =&gt; {}\ndefaultOpen | 是否默认展开 | Boolean | -\nopen | 是否展开 | Boolean | -\nonOpenChange | 当面板展开状态改变时的回调函数<br><br>**签名**:<br>Function(open: Boolean) => void<br>**参数**:<br>*open*: {Boolean} 面板的展开状态 | Function | () =&gt; {}\nsize | 输入框大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nlanguage | 语言<br><br>**可选值**:<br>'en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw' | Enum | -\nlocale | 国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js) | Object | -\npopupStyle | 弹层面板样式 | Object | -\npopupAlign | 弹层对齐方式 | String | 'tl tl'\npopupOffset | 弹层偏移 | Array | [0, 0]\nformat | 输出日期值格式化 | String/Function | -\nformater | 日期格式化（可替代 format) | Array | ['YYYY-MM-DD', 'HH:mm:ss']\ndisabled | 是否禁用 | Boolean | -\nhasClear | 是否展示清空按钮 | Boolean | true\nshowTime | 是否展示时间选择或传入 { defaultValue } 设置时间初值 | Boolean/Object | -\nreadOnly | 输入框是否只读 | Boolean | false\nclassName | 自定义组件样式 | String | -\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "MonthPicker",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 品牌样式前缀 | String | 'next-'\ndefaultBase | 默认的基准日期 | String | -\ndefaultValue | 默认日期 | any | -\nvalue | 日期值 | any | -\nonChange | 日期发生改变时的回调<br><br>**签名**:<br>Function(date: String, formatDate: String) => void<br>**参数**:<br>*date*: {String} 改变后的日期<br>*formatDate*: {String} 格式化的日期 | Function | () =&gt; {}\ndefaultOpen | 是否默认展开 | Boolean | -\nopen | 是否展开 | Boolean | -\nonOpenChange | 当面板展开变化时的回调<br><br>**签名**:<br>Function(open: Boolean) => void<br>**参数**:<br>*open*: {Boolean} 面板的展开状态 | Function | () =&gt; {}\nsize | 输入框大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nlanguage | 语言<br><br>**可选值**:<br>'en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw' | Enum | -\nlocale | 国际化配置, [参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js) | Object | -\npopupStyle | 弹层样式 | Object | -\npopupAlign | 弹层对齐方式 | String | 'tl tl'\npopupOffset | 弹层偏移 | Array | [0, 0]\nformat | 展开日期的格式 | String | 'YYYY-MM'\ndisabled | 是否禁用 | Boolean | -\nhasClear | 是否有清空按钮 | Boolean | true\nreadOnly | 输入框是否只读 | Boolean | false\nclassName | 自定义组件样式 | String | -\n",
        "methodREADME": []
      },
      {
        "name": "RangePicker",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 品牌样式前缀 | String | 'next-'\ndefaultBase | 默认的基准日期 | String | -\ndefaultValue | 默认日期值 | Array | -\nvalue | 日期值 | Array | -\nonChange | 时间发生改变的回调<br><br>**签名**:<br>Function(dateRange: Array, formatDateRnage: Array) => void<br>**参数**:<br>*dateRange*: {Array} 选中的日期区间数组<br>*formatDateRnage*: {Array} 格式化后的选中的日期区间数组 | Function | () =&gt; {}\nonStartChange | 开始日期变化时的回调<br><br>**签名**:<br>Function(date: String) => void<br>**参数**:<br>*date*: {String} 开始日期 | Function | () =&gt; {}\nonEndChange | 结束日期变化时的回调<br><br>**签名**:<br>Function(date: String) => void<br>**参数**:<br>*date*: {String} 结束日期 | Function | () =&gt; {}\ndefaultOpen | 默认是否展开 | Boolean | -\nopen | 是否展开 | Boolean | -\nonOpenChange | 当面板展开状态改变时的回调<br><br>**签名**:<br>Function(面板的: Boolean) => void<br>**参数**:<br>*面板的*: {Boolean} open 状态 | Function | () =&gt; {}\nsize | 输入框大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nlanguage | 语言<br><br>**可选值**:<br>'en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw' | Enum | -\nlocale | 国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js) | Object | -\npopupStyle | 弹层样式 | Object | -\npopupAlign | 弹层对其方式 | String | 'tl tl'\npopupOffset | 弹层偏移 | Array | [0, 0]\nformat | 输出日期的格式 | String/Function | -\nformater | 日期值格式化（可替代 format） | Array | ['YYYY-MM-DD', 'HH:mm:ss']\ndisabled | 是否禁用 | Boolean | -\nhasClear | 是否有清空按钮 | Boolean | true\nshowTime | 是否显示时间或传入 { defaultValue } 设置时间初值 | Boolean/Object | false\nresetTime | 重新选择时是否重置时间 | Boolean | true\nranges | 用户预设的快捷选择的日期范围 | Object | {}\nreadOnly | 输入框是否只读 | Boolean | -\nclassName | 自定义组件样式 | String | -\n",
        "methodREADME": [
          "**签名**:<br>Function(value: Array, checkDisabled: unknown) => Array<br>**参数**:<br>*value*: {Array} 输入日期值数组<br>*checkDisabled*: {unknown} undefined<br>**返回值**:<br>{Array} 返回 moment 包裹后的日期数组<br>",
          "**签名**:<br>Function(value: Array) => Object<br>**参数**:<br>*value*: {Array} 规格化后的日期值<br>**返回值**:<br>{Object} { startDate, startTime, endDate, endTime, all }<br>"
        ]
      },
      {
        "name": "YearPicker",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 品牌的样式前缀 | String | 'next-'\ndefaultBase | 默认的基准日期 | String | -\ndefaultValue | 默认日期 | any | -\nvalue | 日期 | any | -\nonChange | 时间发生变化的回调<br><br>**签名**:<br>Function(date: String, formateDate: String) => void<br>**参数**:<br>*date*: {String} 改变后的日期<br>*formateDate*: {String} 格式化的日期 | Function | () =&gt; {}\ndefaultOpen | 默认是否展开 | Boolean | -\nopen | 是否展开 | Boolean | -\nonOpenChange | 当面板展开状态改变时的回调<br><br>**签名**:<br>Function(open: Boolean) => void<br>**参数**:<br>*open*: {Boolean} 面板的展开状态 | Function | () =&gt; {}\nsize | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nlanguage | 语言<br><br>**可选值**:<br>'en-us', 'ar', 'de', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'pt', 'ru', 'zh-cn', 'zh-hk', 'zh-tw' | Enum | -\nlocale | 国际化配置，[参考](http://gitlab.alibaba-inc.com/next/date-picker/blob/master/src/locale/index.js) | Object | -\npopupStyle | 弹层样式 | Object | -\npopupAlign | 弹层对齐方式 | String | 'tl tl'\npopupOffset | 弹层偏移 | Array | [0, 0]\nformat | 日期格式 | String | 'YYYY'\ndisabled | 是否禁用 | Boolean | -\nhasClear | 是否展示清空按钮 | Boolean | true\nreadOnly | 输入框是否只读 | Boolean | false\nclassName | 自定义组件样式 | String | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "基本用法",
        "order": "0",
        "jsx": "import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker onChange={(val, str) => console.log(val, str)} />\n    <h3>月份选择</h3>\n    <MonthPicker onChange={(val, str) => console.log(val, str)} />\n    <h3>年份选择</h3>\n    <YearPicker onChange={(val, str) => console.log(val, str)} />\n    <h3>区间选择</h3>\n    <RangePicker\n      onChange={(val, str) => console.log(val, str)}\n      onStartChange={(val, str) => console.log(val, str)}\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n最基本的用法。监听了 `change` 事件, 输入框值改变时控制台有日志显示。\n\n"
      },
      {
        "title": "自定义日期范围选择",
        "order": "6",
        "jsx": "import { DatePicker } from \"@icedesign/base\";\n\nclass CustomRangePicker extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      startValue: null,\n      endValue: null,\n      endOpen: false\n    };\n  }\n\n  disabledStartDate(startValue) {\n    const { endValue } = this.state;\n    if (!startValue || !endValue) {\n      return false;\n    }\n    return startValue.valueOf() > endValue.valueOf();\n  }\n\n  disabledEndDate(endValue) {\n    const { startValue } = this.state;\n    if (!endValue || !startValue) {\n      return false;\n    }\n    return endValue.valueOf() <= startValue.valueOf();\n  }\n\n  onChange(field, value) {\n    this.setState({\n      [field]: value\n    });\n  }\n\n  onStartChange(value) {\n    this.onChange(\"startValue\", value);\n  }\n\n  onEndChange(value) {\n    this.onChange(\"endValue\", value);\n  }\n\n  handleStartOpenChange(open) {\n    if (!open) {\n      this.setState({ endOpen: true });\n    }\n  }\n\n  handleEndOpenChange(open) {\n    this.setState({ endOpen: open });\n  }\n\n  render() {\n    const { startValue, endValue, endOpen } = this.state;\n    return (\n      <div>\n        <DatePicker\n          disabledDate={this.disabledStartDate.bind(this)}\n          showTime\n          value={startValue}\n          placeholder=\"Start\"\n          onChange={this.onStartChange.bind(this)}\n          onOpenChange={this.handleStartOpenChange.bind(this)}\n        />\n        &nbsp;\n        <DatePicker\n          disabledDate={this.disabledEndDate.bind(this)}\n          showTime\n          value={endValue}\n          placeholder=\"End\"\n          onChange={this.onEndChange.bind(this)}\n          open={endOpen}\n          onOpenChange={this.handleEndOpenChange.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <div>\n    <CustomRangePicker />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n例如，示例中的日期选择可以自由的更改开始或结束日期，而不必每次选择时重置日期。\n如果默认的 RangePicker 在交互上无法满足您的使用需求，您还可以基于 DatePicker 封装实现类似的功能。\n\n"
      },
      {
        "title": "提供默认值",
        "order": "1",
        "jsx": "import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker defaultValue={\"2017年02月14日\"} formater={[\"YYYY年MM月DD日\"]} />\n    <h3>月份选择</h3>\n    <MonthPicker defaultValue={\"2017-02\"} />\n    <h3>年份选择</h3>\n    <YearPicker defaultValue={\"2017\"} />\n    <h3>区间选择</h3>\n    <RangePicker defaultValue={[\"2017-02-14\", \"2017-03-24\"]} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n为选择器设置默认值。\n\n"
      },
      {
        "title": "禁用日期、月份、年份",
        "order": "3",
        "jsx": "import { moment, DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\n// 2018不可选\nconst disabledYear = function(calendarDate) {\n  return calendarDate.year === 2018;\n};\n\n// 五月份不可选\nconst disabledMonth = function(calendarDate) {\n  return calendarDate.month === 4;\n};\n\n// 选择今天以后的时间\nconst disabledDate = function(calendarDate) {\n  const { year, month, date } = calendarDate;\n  const theDate = moment(`${year}-${month + 1}-${date}`, \"YYYY-M-D\");\n\n  return theDate < new Date().getTime();\n};\n\n// 选择本周\nconst disabledRange = function(calendarDate) {\n  let ret = false;\n  const now = moment();\n  const nowWeek = now.isoWeekday();\n  const { year, month, date } = calendarDate;\n  const theDate = moment(`${year}-${month + 1}-${date}`, \"YYYY-M-D\");\n\n  if (!theDate) {\n    return ret;\n  }\n\n  if (theDate > (7 - nowWeek) * 24 * 60 * 60 * 1000 + now.valueOf()) {\n    ret = true;\n  }\n\n  if (theDate < now.valueOf() - nowWeek * 24 * 60 * 60 * 1000) {\n    ret = true;\n  }\n\n  return ret;\n};\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker disabledDate={disabledDate} />\n    <h3>月份选择</h3>\n    <MonthPicker disabledMonth={disabledMonth} />\n    <h3>年份选择</h3>\n    <YearPicker disabledYear={disabledYear} />\n    <h3>区间选择</h3>\n    <RangePicker disabledDate={disabledRange} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n设置 `disabledYear` 方法，来确定不可选年份。\n设置 `disabledMonth` 方法，来确定不可选月份。\n设置 `disabledDate` 方法，来确定不可选日期。\n\n"
      },
      {
        "title": "禁用选择框",
        "order": "4",
        "jsx": "import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker defaultValue={\"2017-02-14\"} disabled />\n    <h3>月份选择</h3>\n    <MonthPicker defaultValue={\"2017-02\"} disabled />\n    <h3>年份选择</h3>\n    <YearPicker defaultValue={\"2017\"} disabled />\n    <h3>区间选择</h3>\n    <RangePicker defaultValue={[\"2017-02-14\", \"2017-03-24\"]} disabled />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n选择框的不可用状态。\n\n"
      },
      {
        "title": "与 field 结合",
        "order": "10",
        "jsx": "import { DatePicker, Field, Button } from \"@icedesign/base\";\n\nconst { RangePicker } = DatePicker;\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  normDate(date, dateStr) {\n    console.log(\"normDate:\", date, dateStr);\n    return date.getTime();\n  }\n\n  normRange(date, dateStr) {\n    console.log(date, dateStr);\n    return date;\n  }\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <div>\n        <DatePicker\n          format=\"YYYY年MM月DD日 \"\n          {...init(\"datepicker\", {\n            getValueFromEvent: this.normDate\n          })}\n        />\n        <br />\n        <br />\n        <RangePicker\n          {...init(\"rangepicker\", {\n            getValueFromEvent: this.normRange,\n            initValue: [\"2017-05-01\", \"2017-05-10\"]\n          })}\n        />\n        <br />\n        <br />\n        <Button\n          onClick={() => {\n            return console.log(this.field.getValues());\n          }}\n        >\n          Console中展示数据\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n与field结合使用，简单示范自定义返回值\n\n"
      },
      {
        "title": "日期格式化",
        "order": "5",
        "jsx": "import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker format={\"YYYY/MM/DD\"} />\n    <br />\n    <br />\n    <DatePicker format={\"YYYY年MM月DD日\"} />\n    <h3>月份选择</h3>\n    <MonthPicker format={\"YYYY/MM\"} />\n    <h3>年份选择</h3>\n    <YearPicker format={\"YYYY\"} />\n    <h3>区间选择</h3>\n    <RangePicker format={\"YYYY/MM/DD\"} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n使用 `format` 属性，可以自定义你需要的日期显示格式，如 `YYYY/MM/DD`。\n\n"
      },
      {
        "title": "多语言",
        "order": "8",
        "jsx": "import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nconst locale = {\n  datePlaceholder: \"请选择日期-测试\",\n  monthPlaceholder: \"请选择月份-测试\",\n  yearPlaceholder: \"请选择年份-测试\",\n  rangeStartPlaceholder: \"起始时间-测试\",\n  rangeEndPlaceholder: \"结束时间-测试\",\n  now: \"此刻-测试\",\n  selectTime: \"选择时间-测试\",\n  selectDate: \"选择日期-测试\",\n  ok: \"确定-测试\",\n  clear: \"清除-测试\"\n};\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker locale={locale} />\n    <h3>月份选择</h3>\n    <MonthPicker locale={locale} />\n    <h3>年份选择</h3>\n    <YearPicker locale={locale} />\n    <h3>区间选择</h3>\n    <RangePicker locale={locale} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n自定义传入多语言文案，可用于组件中所有文案的自定义。\n\n"
      },
      {
        "title": "关于弹出层的自定义配置",
        "order": "9",
        "jsx": "import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>日期选择</h3>\n    <DatePicker popupAlign={\"bl tl\"} />\n    <h3>月份选择</h3>\n    <MonthPicker popupAlign={\"bl tl\"} />\n    <h3>年份选择</h3>\n    <YearPicker popupAlign={\"bl tl\"} />\n    <h3>区间选择</h3>\n    <RangePicker popupAlign={\"bl tl\"} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n关于弹出层的自定义配置\n\n"
      },
      {
        "title": "用户预设日期范围",
        "order": "7",
        "jsx": "import { DatePicker } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nconst now = new Date();\nconst start = new Date().setDate(1);\nconst end = new Date().setDate(7);\n\nconst quickRanges = {\n  Today: [now, now],\n  \"First Week\": [start, end]\n};\n\nReactDOM.render(\n  <div>\n    <RangePicker\n      ranges={quickRanges}\n      onChange={(val, str) => console.log(val, str)}\n      onStartChange={(val, str) => console.log(val, str)}\n    />\n    <br />\n    <br />\n    <RangePicker\n      ranges={quickRanges}\n      onChange={(val, str) => console.log(val, str)}\n      onStartChange={(val, str) => console.log(val, str)}\n      showTime\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过 ranges 属性自定义快捷日期选择。\n\n"
      },
      {
        "title": "与时间选择联动",
        "order": "3",
        "jsx": "import { DatePicker, moment } from \"@icedesign/base\";\n\nconst { MonthPicker, YearPicker, RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <h3>普通的日期时间选择</h3>\n    <DatePicker showTime onChange={(a, b) => console.log(a, b)} />\n    <h3>设置时间初值的日期时间选择</h3>\n    <DatePicker\n      showTime={{ defaultValue: moment(\"12:12:12\", \"HH:mm:ss\") }}\n      onChange={(a, b) => console.log(a, b)}\n    />\n    <h3>普通的区间选择（每次选择会重置时间为 00:00:00 ）</h3>\n    <RangePicker showTime onChange={(a, b) => console.log(a, b)} />\n    <h3>设置时间初值的区间选择（每次选择重置时间为用户预设的日期初值 ）</h3>\n    <RangePicker\n      showTime={{\n        defaultValue: [\n          moment(\"00:00:00\", \"HH:mm:ss\"),\n          moment(\"23:59:59\", \"HH:mm:ss\")\n        ]\n      }}\n      onChange={(a, b) => console.log(a, b)}\n    />\n    <h3>每次记住上次选择时间的区间选择（每次选择不重置时间）</h3>\n    <RangePicker\n      showTime\n      onChange={(a, b) => console.log(a, b)}\n      resetTime={false}\n    />\n    <h3>设置时间初值的区间选择（每次选择会记住上次选择的时间 ）</h3>\n    <RangePicker\n      showTime={{\n        defaultValue: [\n          moment(\"00:00:00\", \"HH:mm:ss\"),\n          moment(\"23:59:59\", \"HH:mm:ss\")\n        ]\n      }}\n      onChange={(a, b) => console.log(a, b)}\n      resetTime={false}\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n通过设置 `showTime` 属性，可以设置包含时间选择控件的日期组件。`showTime` 属性支持两种设置方式，通常可以传入 bool 值表示是否启动时间选择控件。如果用户有预设时间初值的需求，`showTime` 属性支持传入对象的方式设置时间初值，设置方式为设置 `showTime.defaultValue` ，推荐使用 moment 对时间值进行格式化。\n\n"
      },
      {
        "title": "不同尺寸",
        "order": "2",
        "jsx": "import { DatePicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>大号</h3>\n    <DatePicker size=\"large\" />\n    <h3>中号</h3>\n    <DatePicker />\n    <h3>小号</h3>\n    <DatePicker size=\"small\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n三种大小的输入框，大的用在表单中，中的为默认。\n\n"
      }
    ]
  },
  {
    "name": "Dialog",
    "category": "Components",
    "title": "弹窗",
    "type": "弹层",
    "importStatement": "import { Dialog } from '@icedesign/base';",
    "body": "\n\n## 使用指南\n\n对话框\n\n### 何时使用\n\n对话框是用于在不离开主路径的情况下，提供用户快速执行简单的操作、确认用户信息或反馈提示的辅助窗口。\n\n",
    "propsSchema": {
      "name": "Dialog",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "title": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "对话框的标题",
          "docblock": "对话框的标题"
        },
        "footer": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": "传入底部的内容",
          "docblock": "传入底部的内容"
        },
        "footerAlign": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'center'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "底部按钮的对齐方式",
          "defaultValue": {
            "value": "'right'",
            "computed": false
          },
          "docblock": "底部按钮的对齐方式"
        },
        "visible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "控制对话框是否可见",
          "docblock": "控制对话框是否可见"
        },
        "hasMask": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否需要mask",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否需要mask"
        },
        "closable": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "'esc, mask, close', 详见[closable](#closable)",
          "defaultValue": {
            "value": "'esc,close'",
            "computed": false
          },
          "docblock": "'esc, mask, close', 详见[closable](#closable)"
        },
        "shouldUpdatePosition": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否强制更新dialog的位置，在`isFullScreen`为true且align为`cc cc`的时候无效",
          "docblock": "是否强制更新dialog的位置，在`isFullScreen`为true且align为`cc cc`的时候无效"
        },
        "align": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "浮层自定义位置",
          "defaultValue": {
            "value": "'cc cc'",
            "computed": false
          },
          "docblock": "浮层自定义位置"
        },
        "animation": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "配置动画的播放方式",
          "defaultValue": {
            "value": "{\n    in: 'fadeInDown',\n    out: 'fadeOutUp'\n}",
            "computed": false
          },
          "docblock": "配置动画的播放方式\n@param {String} in 进场动画\n@param {String} out 出场动画"
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "在点击关闭按钮的时候触发的函数",
          "docblock": "在点击关闭按钮的时候触发的函数",
          "params": [],
          "returns": null
        },
        "afterClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层关闭后触发的事件, 如果有动画，则在动画结束后触发",
          "docblock": "浮层关闭后触发的事件, 如果有动画，则在动画结束后触发",
          "params": [],
          "returns": null
        },
        "onOk": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "在点击Ok按钮的时候触发的函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "在点击Ok按钮的时候触发的函数",
          "params": [],
          "returns": null
        },
        "onCancel": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "在点击Cancel按钮的时候触发的函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "在点击Cancel按钮的时候触发的函数",
          "params": [],
          "returns": null
        },
        "minMargin": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "当dialog过高的时候距离viewport的最小边距,在`isFullScreen`下无效。",
          "defaultValue": {
            "value": "40",
            "computed": false
          },
          "docblock": "当dialog过高的时候距离viewport的最小边距,在`isFullScreen`下无效。"
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "当dialog弹出的时候是否自动获取焦点",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "当dialog弹出的时候是否自动获取焦点"
        },
        "locale": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义国际化文案对象",
          "docblock": "自定义国际化文案对象\n@property {String} ok 确认按钮文案\n@property {String} cancel 取消按钮文案",
          "properties": [
            {
              "name": "ok",
              "description": "确认按钮文案",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "cancel",
              "description": "取消按钮文案",
              "type": {
                "name": "String"
              }
            }
          ]
        },
        "language": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'en-us'",
                "computed": false
              },
              {
                "value": "'zh-cn'",
                "computed": false
              },
              {
                "value": "'zh-tw'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "自定义国际化语言",
          "docblock": "自定义国际化语言"
        },
        "isFullScreen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否是启用使用CSS定位模式的对话框, 在该模式下面无需通过`shouldUpdatePosition`来进行重新定位。",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否是启用使用CSS定位模式的对话框, 在该模式下面无需通过`shouldUpdatePosition`来进行重新定位。"
        }
      },
      "methods": [],
      "description": "继承 Overlay 的 API，除非特别说明",
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ntitle | 对话框的标题 | any | -\nfooter | 传入底部的内容 | Boolean/String/ReactNode | -\nfooterAlign | 底部按钮的对齐方式<br><br>**可选值**:<br>'left', 'center', 'right' | Enum | 'right'\nvisible | 控制对话框是否可见 | Boolean | -\nhasMask | 是否需要mask | Boolean | true\nclosable | 'esc, mask, close', 详见[closable](#closable) | String/Boolean | 'esc,close'\nshouldUpdatePosition | 是否强制更新dialog的位置，在`isFullScreen`为true且align为`cc cc`的时候无效 | Boolean | -\nalign | 浮层自定义位置 | String/Number | 'cc cc'\nanimation | 配置动画的播放方式 | Object/Boolean | {     in: 'fadeInDown',     out: 'fadeOutUp' }\nonClose | 在点击关闭按钮的时候触发的函数<br><br>**签名**:<br>Function() => void | Function | -\nafterClose | 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void | Function | -\nonOk | 在点击Ok按钮的时候触发的函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonCancel | 在点击Cancel按钮的时候触发的函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nminMargin | 当dialog过高的时候距离viewport的最小边距,在`isFullScreen`下无效。 | Number | 40\nautoFocus | 当dialog弹出的时候是否自动获取焦点 | Boolean | true\nlocale | 自定义国际化文案对象<br><br>**属性**:<br>*ok*: {String} 确认按钮文案<br>*cancel*: {String} 取消按钮文案 | Object | -\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'en-us', 'zh-cn', 'zh-tw' | Enum | -\nisFullScreen | 是否是启用使用CSS定位模式的对话框, 在该模式下面无需通过`shouldUpdatePosition`来进行重新定位。 | Boolean | false\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "对齐方式",
        "order": "2",
        "jsx": "import { Dialog, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    footerAlign: \"left\",\n    visible: false\n  };\n  map = [\"left\", \"right\", \"center\"];\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n\n  onClick = () => {\n    let { footerAlign } = this.state,\n      index = this.map.indexOf(footerAlign),\n      next = index + 1;\n\n    if (next >= this.map.length) {\n      next = 0;\n    }\n    this.setState({\n      footerAlign: this.map[next]\n    });\n  };\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          onClose={this.onClose}\n          title=\"Welcome to Alibaba.com\"\n          footerAlign={this.state.footerAlign}\n        >\n          <Button onClick={this.onClick} type=\"primary\">\n            Modify footerAlign\n          </Button>\n\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n        </Dialog>\n      </span>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n通过`footerAlign`调整底部按钮的对齐方式\n\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Dialog, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          closable=\"esc,mask,close\"\n          onCancel={this.onClose}\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n第一个对话框\n\n"
      },
      {
        "title": "自定义底部",
        "order": "1",
        "jsx": "import { Dialog, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  render() {\n    const footer = (\n      <a onClick={this.onClose} href=\"javascript:;\">\n        Close\n      </a>\n    );\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          footer={footer}\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n默认的footer为两个按钮，你可以自定义footer的内容\n\n"
      },
      {
        "title": "FullScreen模式",
        "order": "4",
        "jsx": "import { Dialog, Button } from \"@icedesign/base\";\n\nconst content = <p>View messages from buyers & suppliers</p>;\n\nconst largeContent = [];\n\nfor (let i = 0; i < 10; i++) {\n  largeContent.push(\n    <span key={i}>\n      <h3>Your one-stop communication tool!</h3>\n      <ul>\n        <li>View messages from buyers & suppliers</li>\n        <li>Negotiate the details of your order</li>\n      </ul>\n    </span>\n  );\n}\n\nclass App extends React.Component {\n  state = {\n    visible: false,\n    content\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open Dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          isFullScreen\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <Button type=\"primary\" onClick={this.modifyContent}>\n            Modify content.\n          </Button>\n          {this.state.content}\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n      content\n    });\n  };\n\n  modifyContent = () => {\n    this.setState({\n      content: largeContent\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n设置isFullScreen为true的时候，无需通过shouldUpdatePosition进行重新定位。\n\n"
      },
      {
        "title": "内容较多的dialog",
        "order": "5",
        "jsx": "import { Dialog, Button } from \"@icedesign/base\";\n\nconst content = [];\n\nfor (let i = 0; i < 10; i++) {\n  content.push(\n    <span key={i}>\n      <h3>Your one-stop communication tool!</h3>\n      <ul>\n        <li>View messages from buyers & suppliers</li>\n        <li>Negotiate the details of your order</li>\n      </ul>\n    </span>\n  );\n}\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          shouldUpdatePosition\n          minMargin={50}\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          {content}\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n      content\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n内容很多的情况，可以通过minMargin控制边距\n\n"
      },
      {
        "title": "语言",
        "order": "8",
        "jsx": "import { Dialog, Button, LocaleProvider } from \"@icedesign/base\";\n\nconst popupConfirm = () => {\n  Dialog.confirm({\n    content: \"confirm\",\n    locale: {\n      ok: \"确认\",\n      cancel: \"取消\"\n    }\n  });\n};\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  render() {\n    return (\n      <span>\n        <Button type=\"primary\" onClick={this.onOpen}>\n          Use en-us Open\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    LocaleProvider.set(\"en-us\");\n    this.setState({\n      visible: true\n    });\n  };\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(\n  <span>\n    <Button onClick={popupConfirm}>Confirm</Button>\n    &nbsp;\n    <App />\n  </span>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n示例演示了在便捷调用和JSX模式下的语言切换方式\n\n"
      },
      {
        "title": "层叠对话框",
        "order": "4",
        "jsx": "import { Dialog, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open Dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n          <App />\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n多个对话框展示。\n\n"
      },
      {
        "title": "延迟关闭",
        "order": "7",
        "jsx": "import { Button, Dialog } from \"@icedesign/base\";\n\nconst popupConfirm = () => {\n  Dialog.confirm({\n    content: \"confirm\",\n    onOk: () => {\n      return new Promise(resolve => {\n        setTimeout(resolve, 2000);\n      });\n    }\n  });\n};\n\nReactDOM.render(\n  <span>\n    <Button onClick={popupConfirm} type=\"primary\">\n      confirm\n    </Button>\n  </span>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n在使用`alert`和`confirm`的时候，返回promise,可以延迟执行函数\n\n"
      },
      {
        "title": "简单确认框",
        "order": "6",
        "jsx": "import { Dialog, Button, LocaleProvider } from \"@icedesign/base\";\n\nconst popupAlert = () => {\n  Dialog.alert({\n    content: \"Alert content\",\n    closable: false,\n    title: \"Alert\",\n    onOk: () => {\n      Dialog.alert({ content: \"alert content\" });\n    }\n  });\n};\n\nconst popupConfirm = () => {\n  Dialog.confirm({\n    content: \"Confirm content\",\n    title: \"Confirm\"\n  });\n};\n\nconst setLocale = () => {\n  LocaleProvider.set(\"en-us\");\n};\n\nconst popupCustomize = () => {\n  const dialog = Dialog.alert({\n    needWrapper: false,\n    content: \"Alert content\",\n    title: \"Alert\",\n    footer: (\n      <Button type=\"primary\" onClick={() => dialog.hide()}>\n        Another button\n      </Button>\n    )\n  });\n};\n\nReactDOM.render(\n  <span>\n    <Button onClick={setLocale}>Set Locale</Button> &nbsp;\n    <Button onClick={popupAlert}>Alert</Button> &nbsp;\n    <Button onClick={popupConfirm}>Confirm</Button> &nbsp;\n    <Button onClick={popupCustomize}>Customize content & button</Button>\n  </span>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\nDialog提供`alert`和`confirm`两种方式进行便捷调用\n\n"
      },
      {
        "title": "简单确认框",
        "order": "3",
        "jsx": "import { Dialog, Button } from \"@icedesign/base\";\n\nconst content = <p>View messages from buyers & suppliers</p>;\n\nclass App extends React.Component {\n  state = {\n    visible: false,\n    content\n  };\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.onOpen} type=\"primary\">\n          Open Dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose}\n          onCancel={this.onClose}\n          shouldUpdatePosition\n          onClose={this.onClose}\n          title=\"Alibaba.com\"\n        >\n          <Button type=\"primary\" onClick={this.modifyContent}>\n            Modify content.\n          </Button>\n          {this.state.content}\n        </Dialog>\n      </span>\n    );\n  }\n\n  onOpen = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n      content\n    });\n  };\n\n  modifyContent = () => {\n    this.setState({\n      content: (\n        <div>\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n        </div>\n      )\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n通过shouldUpdatePosition更新对话框的位置\n\n"
      },
      {
        "title": "设置宽度等样式",
        "order": "6",
        "jsx": "import { Dialog, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      align: \"cc cc\",\n      style: {\n        width: \"80%\"\n      }\n    };\n  }\n\n  render() {\n    return (\n      <span>\n        <Button onClick={this.open.bind(this)} type=\"primary\">\n          Open dialog\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          onOk={this.onClose.bind(this)}\n          onCancel={this.onClose.bind(this)}\n          onClose={this.onClose.bind(this)}\n          title=\"Welcome to Alibaba.com\"\n          style={this.state.style}\n          align={this.state.align}\n        >\n          <h3>Your one-stop communication tool!</h3>\n          <ul>\n            <li>View messages from buyers & suppliers</li>\n            <li>Negotiate the details of your order</li>\n          </ul>\n          <Button onClick={this.setPosition.bind(this)}>Set position</Button>\n        </Dialog>\n      </span>\n    );\n  }\n\n  onClose() {\n    this.setState({\n      visible: false\n    });\n  }\n\n  open() {\n    this.setState({\n      visible: true\n    });\n  }\n\n  setPosition() {\n    this.setState({\n      align: false,\n      style: {\n        top: \"10px\"\n      }\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n通过style设置dialog的宽度或者top等样式\n\n"
      }
    ]
  },
  {
    "name": "DOM",
    "category": "Utility",
    "title": "DOM",
    "importStatement": "import { DOM } from '@icedesign/base';",
    "body": "\n\n## 使用指南\n\nDOM\n\n### 何时使用\n\n提供静态方法对 DOM 元素进行样式、事件、定位等类型的处理。\n\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本定位",
        "order": "0",
        "jsx": "import { dom } from \"@icedesign/base\";\n\nconst { position } = dom;\n\nclass App extends React.Component {\n  state = {\n    pinElementAlign: \"tl\",\n    baseElementAlign: \"tl\"\n  };\n\n  render() {\n    return (\n      <div className=\"basic-demo\">\n        <div className=\"cell\">\n          <div id=\"b1\" className=\"elem2\">\n            基准元素 b1\n          </div>\n          <div id=\"a1\" className=\"elem1\">\n            目标元素 a1\n          </div>\n        </div>\n        <div>\n          <h3>pinElement(目标元素 a1)</h3>\n          {this.renderRadio(\"pin\")}\n        </div>\n        <div>\n          <h3>baseElement(基准元素 b1)</h3>\n          {this.renderRadio(\"base\")}\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    position.place(\n      document.getElementById(\"a1\"),\n      document.getElementById(\"b1\"),\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  componentDidUpdate() {\n    position.place(\n      document.getElementById(\"a1\"),\n      document.getElementById(\"b1\"),\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  onPinElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      pinElementAlign: value\n    });\n  }\n\n  onBaseElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      baseElementAlign: value\n    });\n  }\n\n  renderRadio(type) {\n    const typeUpperCase = type.charAt(0).toUpperCase() + type.substring(1);\n    const onChange = this[`on${typeUpperCase}ElementAlignChange`].bind(this);\n    return [\"tl\", \"tc\", \"tr\", \"cl\", \"cc\", \"cr\", \"bl\", \"bc\", \"br\"].map(value => {\n      return (\n        <label key={value}>\n          <input\n            type=\"radio\"\n            value={value}\n            onChange={onChange}\n            checked={value == this.state[`${type}ElementAlign`]}\n          />{\" \"}\n          {value}{\" \"}\n        </label>\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".basic-demo .elem1 {\n    z-index: 99;\n    background-color: #7FBF4D;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#7FBF4D), to(#63A62F));\n    background-image: -webkit-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -moz-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -ms-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -o-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: linear-gradient(top, #7FBF4D, #63A62F);\n    border: 1px solid #63A62F;\n    border-bottom: 1px solid #5B992B;\n    box-shadow: inset 0 1px 0 0 #96CA6D;\n    color: white;\n    padding: 7px 3px 8px;\n    text-align: center;\n    text-shadow: 0 -1px 0 #4C9021;\n    opacity: 0.8;\n    width: 100px;\n}\n.basic-demo .elem2 {\n    box-sizing: border-box;\n    border: 20px solid #999;\n    background-color: #eee;\n    width: 340px;\n    height: 240px;\n    margin: 50px 0 0 100px;\n    line-height: 200px;\n    text-align: center;\n}\n",
        "body": "\n目标元素相对基准元素的基本定位。\n\n"
      },
      {
        "title": "事件封装",
        "order": "5",
        "jsx": "import { dom } from \"@icedesign/base\";\n\nconst { events } = dom;\nconst { on, off } = events;\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { btn, inner, outter, link, btnOnce, btnOrder, btnOff } = this.refs;\n    on(btn, \"click\", function(e) {\n      console.log(this, e.target, e.currentTarget);\n    });\n\n    on(inner, \"click\", function(e) {\n      alert(\"Stop propagation!\");\n      e.stopPropagation();\n    });\n    on(outter, \"click\", function() {\n      alert(\"Stop propagation failed!\");\n    });\n\n    on(link, \"click\", function(e) {\n      alert(\"Prevent default!\");\n      e.preventDefault();\n    });\n\n    const onceHandler = function() {\n      alert(\"trigger\");\n    };\n    on(btnOnce, \"click\", onceHandler);\n    on(btnOnce, \"click\", onceHandler);\n\n    on(btnOrder, \"click\", function() {\n      alert(\"1\");\n    });\n    on(btnOrder, \"click\", function() {\n      alert(\"2\");\n    });\n\n    const removeHandler = function() {\n      alert(\"Remove event listener failed!\");\n    };\n    on(btnOff, \"click\", removeHandler).off();\n  }\n  render() {\n    return (\n      <div className=\"events-demo\">\n        <h2>Add event listener</h2>\n        <button ref=\"btn\">Click me!</button>\n        <h2>Stop propagation</h2>\n        <div ref=\"outter\" className=\"outter\">\n          Click me!\n          <div ref=\"inner\" className=\"inner\">\n            Click me!\n          </div>\n        </div>\n        <h2>Prevent default</h2>\n        <a ref=\"link\" href=\"http://www.taobao.com\">\n          Taobao\n        </a>\n        <h2>Same handler trigger once</h2>\n        <button ref=\"btnOnce\">Click me!</button>\n        <h2>Triggering order follows the registration order</h2>\n        <button ref=\"btnOrder\">Click me!</button>\n        <h2>Remove event listener</h2>\n        <button ref=\"btnOff\">Click me!</button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".events-demo .outter {\n    box-sizing: border-box;\n    color: #fff;\n    width: 200px;\n    height: 200px;\n    line-height: 50px;\n    padding: 0 50px 50px;\n    background: #999;\n    text-align: center;\n}\n\n.events-demo .inner {\n    color: #333;\n    width: 100px;\n    height: 100px;\n    line-height: 100px;\n    background: #eee;\n    text-align: center;\n}\n",
        "body": "\n"
      },
      {
        "title": "fixed 类型的定位",
        "order": "3",
        "jsx": "import { dom } from \"@icedesign/base\";\n\nconst { position } = dom;\nclass App extends React.Component {\n  state = {\n    pinElementAlign: \"tl\",\n    baseElementAlign: \"tl\"\n  };\n\n  render() {\n    return (\n      <div className=\"fixed-demo\">\n        <div id=\"a4\" className=\"elem1\">\n          目标元素 a4\n        </div>\n        <div>\n          <h3>pinElement(目标元素 a4)</h3>\n          {this.renderRadio(\"pin\")}\n        </div>\n        <div>\n          <h3>baseElement(window)</h3>\n          {this.renderRadio(\"base\")}\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    position.place(\n      document.getElementById(\"a4\"),\n      position.VIEWPORT,\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  componentDidUpdate() {\n    position.place(\n      document.getElementById(\"a4\"),\n      position.VIEWPORT,\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  onPinElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      pinElementAlign: value\n    });\n  }\n\n  onBaseElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      baseElementAlign: value\n    });\n  }\n\n  renderRadio(type) {\n    const typeUpperCase = type.charAt(0).toUpperCase() + type.substring(1);\n    const onChange = this[`on${typeUpperCase}ElementAlignChange`].bind(this);\n    return [\"tl\", \"tc\", \"tr\", \"cl\", \"cc\", \"cr\", \"bl\", \"bc\", \"br\"].map(value => {\n      return (\n        <label key={value}>\n          <input\n            type=\"radio\"\n            value={value}\n            onChange={onChange}\n            checked={value == this.state[`${type}ElementAlign`]}\n          />{\" \"}\n          {value}{\" \"}\n        </label>\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".fixed-demo .elem1 {\n    z-index: 99;\n    background-color: #7FBF4D;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#7FBF4D), to(#63A62F));\n    background-image: -webkit-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -moz-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -ms-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -o-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: linear-gradient(top, #7FBF4D, #63A62F);\n    border: 1px solid #63A62F;\n    border-bottom: 1px solid #5B992B;\n    box-shadow: inset 0 1px 0 0 #96CA6D;\n    color: white;\n    padding: 7px 3px 8px;\n    text-align: center;\n    text-shadow: 0 -1px 0 #4C9021;\n    opacity: 0.8;\n    width: 100px;\n    position: fixed;\n}\n",
        "body": "\n目标元素为 fixed 时的定位。\n\n"
      },
      {
        "title": "自动调整定位",
        "order": "2",
        "jsx": "import { dom } from \"@icedesign/base\";\n\nconst { position } = dom;\nclass App extends React.Component {\n  state = {\n    pinElementAlign: \"tl\",\n    baseElementAlign: \"tl\"\n  };\n\n  render() {\n    return (\n      <div className=\"adjust-demo\">\n        <div className=\"cell\">\n          <div className=\"ele-wrapper\">\n            <div id=\"a3\" className=\"elem1\">\n              目标元素 a3\n            </div>\n            <div id=\"b3\" className=\"elem2\">\n              基准元素 b3\n            </div>\n          </div>\n        </div>\n        <div>\n          <h3>pinElement(目标元素 a3)</h3>\n          {this.renderRadio(\"pin\")}\n        </div>\n        <div>\n          <h3>baseElement(基准元素 b3)</h3>\n          {this.renderRadio(\"base\")}\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    console.log(\n      position.place(\n        document.getElementById(\"a3\"),\n        document.getElementById(\"b3\"),\n        this.state.pinElementAlign + \" \" + this.state.baseElementAlign,\n        [0, 0],\n        true\n      )\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(\n      position.place(\n        document.getElementById(\"a3\"),\n        document.getElementById(\"b3\"),\n        this.state.pinElementAlign + \" \" + this.state.baseElementAlign,\n        [0, 0],\n        true\n      )\n    );\n  }\n\n  onPinElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      pinElementAlign: value\n    });\n  }\n\n  onBaseElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      baseElementAlign: value\n    });\n  }\n\n  renderRadio(type) {\n    const typeUpperCase = type.charAt(0).toUpperCase() + type.substring(1);\n    const onChange = this[`on${typeUpperCase}ElementAlignChange`].bind(this);\n    return [\"tl\", \"tc\", \"tr\", \"cl\", \"cc\", \"cr\", \"bl\", \"bc\", \"br\"].map(value => {\n      return (\n        <label key={value}>\n          <input\n            type=\"radio\"\n            value={value}\n            onChange={onChange}\n            checked={value == this.state[`${type}ElementAlign`]}\n          />{\" \"}\n          {value}{\" \"}\n        </label>\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".adjust-demo .elem1 {\n    z-index: 99;\n    background-color: #7FBF4D;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#7FBF4D), to(#63A62F));\n    background-image: -webkit-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -moz-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -ms-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -o-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: linear-gradient(top, #7FBF4D, #63A62F);\n    border: 1px solid #63A62F;\n    border-bottom: 1px solid #5B992B;\n    box-shadow: inset 0 1px 0 0 #96CA6D;\n    color: white;\n    padding: 7px 3px 8px;\n    text-align: center;\n    text-shadow: 0 -1px 0 #4C9021;\n    opacity: 0.8;\n    width: 100px;\n    height: 200px;\n}\n.adjust-demo .elem2 {\n    border: 1px solid #999;\n    background-color: #eee;\n    width: 300px;\n    height: 30px;\n    margin: 50px 0 0 100px;\n    line-height: 200px;\n    text-align: center;\n}\n.adjust-demo .ele-wrapper {\n    position: relative;\n    margin: 20px 20px 60px;\n    border: 2px red solid;\n    padding: 10px;\n}\n",
        "body": "\n为不让目标元素超出当前可视区域，可设置 needAdjust 参数为 true ，定位时会自动调整目标元素的定位方向。\n\n"
      },
      {
        "title": "offsetParent",
        "order": "1",
        "jsx": "import { dom } from \"@icedesign/base\";\n\nconst { position } = dom;\nclass App extends React.Component {\n  state = {\n    pinElementAlign: \"tl\",\n    baseElementAlign: \"tl\"\n  };\n\n  render() {\n    return (\n      <div className=\"offset-demo\">\n        <div className=\"cell\">\n          <div className=\"ele-wrapper\">\n            <div id=\"a2\" className=\"elem1\">\n              目标元素 a2\n            </div>\n          </div>\n          <div id=\"b2\" className=\"elem2\">\n            基准元素 b2\n          </div>\n        </div>\n        <div>\n          <h3>pinElement(目标元素 a2)</h3>\n          {this.renderRadio(\"pin\")}\n        </div>\n        <div>\n          <h3>baseElement(基准元素 b2)</h3>\n          {this.renderRadio(\"base\")}\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    position.place(\n      document.getElementById(\"a2\"),\n      document.getElementById(\"b2\"),\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  componentDidUpdate() {\n    position.place(\n      document.getElementById(\"a2\"),\n      document.getElementById(\"b2\"),\n      this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n    );\n  }\n\n  onPinElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      pinElementAlign: value\n    });\n  }\n\n  onBaseElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      baseElementAlign: value\n    });\n  }\n\n  renderRadio(type) {\n    const typeUpperCase = type.charAt(0).toUpperCase() + type.substring(1);\n    const onChange = this[`on${typeUpperCase}ElementAlignChange`].bind(this);\n    return [\"tl\", \"tc\", \"tr\", \"cl\", \"cc\", \"cr\", \"bl\", \"bc\", \"br\"].map(value => {\n      return (\n        <label key={value}>\n          <input\n            type=\"radio\"\n            value={value}\n            onChange={onChange}\n            checked={value == this.state[`${type}ElementAlign`]}\n          />{\" \"}\n          {value}{\" \"}\n        </label>\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".offset-demo .elem1 {\n    z-index: 99;\n    background-color: #7FBF4D;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#7FBF4D), to(#63A62F));\n    background-image: -webkit-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -moz-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -ms-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -o-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: linear-gradient(top, #7FBF4D, #63A62F);\n    border: 1px solid #63A62F;\n    border-bottom: 1px solid #5B992B;\n    box-shadow: inset 0 1px 0 0 #96CA6D;\n    color: white;\n    padding: 7px 3px 8px;\n    text-align: center;\n    text-shadow: 0 -1px 0 #4C9021;\n    opacity: 0.8;\n    width: 100px;\n}\n.offset-demo .elem2 {\n    box-sizing: border-box;\n    border: 20px solid #999;\n    background-color: #eee;\n    width: 340px;\n    height: 240px;\n    margin: 50px 0 0 100px;\n    line-height: 200px;\n    text-align: center;\n}\n.offset-demo .ele-wrapper {\n    position: relative;\n    margin: 20px;\n    border: 2px red solid;\n    padding: 20px;\n}\n",
        "body": "\n当目标元素的 offsetParent 不为 body 时的定位。\n\n"
      },
      {
        "title": "相对 Viewport 的定位",
        "order": "4",
        "jsx": "import { dom } from \"@icedesign/base\";\n\nconst { position } = dom;\nclass App extends React.Component {\n  state = {\n    pinElementAlign: \"tl\",\n    baseElementAlign: \"tl\"\n  };\n\n  render() {\n    return (\n      <div className=\"viewport-demo\">\n        <div className=\"cell\">\n          <div className=\"ele-wrapper\">\n            <div id=\"a5\" className=\"elem1\">\n              目标元素 a5\n            </div>\n          </div>\n        </div>\n        <div>\n          <h3>pinElement(目标元素 a5)</h3>\n          {this.renderRadio(\"pin\")}\n        </div>\n        <div>\n          <h3>baseElement(viewport)</h3>\n          {this.renderRadio(\"base\")}\n        </div>\n      </div>\n    );\n  }\n  componentDidMount() {\n    console.log(\n      position.place(\n        document.getElementById(\"a5\"),\n        position.VIEWPORT,\n        this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n      )\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(\n      position.place(\n        document.getElementById(\"a5\"),\n        position.VIEWPORT,\n        this.state.pinElementAlign + \" \" + this.state.baseElementAlign\n      )\n    );\n  }\n\n  onPinElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      pinElementAlign: value\n    });\n  }\n\n  onBaseElementAlignChange(e) {\n    const value = e.target.value;\n    this.setState({\n      baseElementAlign: value\n    });\n  }\n\n  renderRadio(type) {\n    const typeUpperCase = type.charAt(0).toUpperCase() + type.substring(1);\n    const onChange = this[`on${typeUpperCase}ElementAlignChange`].bind(this);\n    return [\"tl\", \"tc\", \"tr\", \"cl\", \"cc\", \"cr\", \"bl\", \"bc\", \"br\"].map(value => {\n      return (\n        <label key={value}>\n          <input\n            type=\"radio\"\n            value={value}\n            onChange={onChange}\n            checked={value == this.state[`${type}ElementAlign`]}\n          />{\" \"}\n          {value}{\" \"}\n        </label>\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".viewport-demo .elem1 {\n    z-index: 99;\n    background-color: #7FBF4D;\n    background-image: -webkit-gradient(linear, left top, left bottom, from(#7FBF4D), to(#63A62F));\n    background-image: -webkit-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -moz-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -ms-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: -o-linear-gradient(top, #7FBF4D, #63A62F);\n    background-image: linear-gradient(top, #7FBF4D, #63A62F);\n    border: 1px solid #63A62F;\n    border-bottom: 1px solid #5B992B;\n    box-shadow: inset 0 1px 0 0 #96CA6D;\n    color: white;\n    padding: 7px 3px 8px;\n    text-align: center;\n    text-shadow: 0 -1px 0 #4C9021;\n    opacity: 0.8;\n    width: 100px;\n}\n.viewport-demo .ele-wrapper {\n    position: relative;\n    margin: 20px 20px 60px;\n    border: 2px red solid;\n    padding: 20px;\n}\n",
        "body": "\n目标元素相对 viewport 的定位。\n\n"
      }
    ]
  },
  {
    "name": "Dropdown",
    "category": "Components",
    "title": "下拉菜单",
    "type": "弹层",
    "importStatement": "import { Dropdown } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。\n\n",
    "propsSchema": {
      "name": "Dropdown",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "弹层内容",
          "docblock": "弹层内容"
        },
        "visible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "弹层当前是否可见",
          "docblock": "弹层当前是否可见"
        },
        "defaultVisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "弹层默认是否可见",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "弹层默认是否可见"
        },
        "onVisibleChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "弹层在显示和隐藏时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "弹层在显示和隐藏时触发的回调函数\n@param {Boolean} visible 弹层是否显示\n@param {String} type 触发弹层显示和隐藏的来源\n@param {Object} event 事件对象",
          "params": [
            {
              "name": "visible",
              "description": "弹层是否显示",
              "type": {
                "name": "Boolean"
              }
            },
            {
              "name": "type",
              "description": "触发弹层显示和隐藏的来源",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "event",
              "description": "事件对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "trigger": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "触发弹层显示或者隐藏的元素",
          "docblock": "触发弹层显示或者隐藏的元素"
        },
        "triggerType": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'hover'",
                "computed": false
              },
              {
                "value": "'click'",
                "computed": false
              },
              {
                "value": "'focus'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "触发弹层显示或者隐藏的事件",
          "defaultValue": {
            "value": "'hover'",
            "computed": false
          },
          "docblock": "触发弹层显示或者隐藏的事件"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否禁用，如果设置为true，那么trigger不能触发弹层的显示或隐藏",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否禁用，如果设置为true，那么trigger不能触发弹层的显示或隐藏"
        },
        "align": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "弹层相对于trigger的定位, 详见[Overlay的定位部分](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=overlay#demo-guide)",
          "defaultValue": {
            "value": "'tl bl'",
            "computed": false
          },
          "docblock": "弹层相对于trigger的定位, 详见[Overlay的定位部分](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=overlay#demo-guide)"
        },
        "offset": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "弹层相对于trigger的定位的微调",
          "defaultValue": {
            "value": "[0, 0]",
            "computed": false
          },
          "docblock": "弹层相对于trigger的定位的微调"
        },
        "delay": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "悬浮状态下延时时间",
          "defaultValue": {
            "value": "200",
            "computed": false
          },
          "docblock": "悬浮状态下延时时间"
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "弹层弹出后是否自动获取焦点",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "弹层弹出后是否自动获取焦点"
        },
        "hasMask": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否带有遮罩",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否带有遮罩\n@type {Boolean}"
        },
        "cache": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "在弹层隐藏后是否保留当前的DOM",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "在弹层隐藏后是否保留当前的DOM"
        },
        "beforeOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "弹层显示前触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "弹层显示前触发的回调函数",
          "params": [],
          "returns": null
        },
        "afterOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "弹层显示后触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "弹层显示后触发的回调函数",
          "params": [],
          "returns": null
        },
        "beforeClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "弹层关闭前触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "弹层关闭前触发的回调函数",
          "params": [],
          "returns": null
        },
        "afterClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "弹层关闭后触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "弹层关闭后触发的回调函数",
          "params": [],
          "returns": null
        },
        "onPosition": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "弹层定位完成后触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "弹层定位完成后触发的回调函数\n@param {Object} config 定位的参数\n@param {Object} node 定位的元素",
          "params": [
            {
              "name": "config",
              "description": "定位的参数",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "node",
              "description": "定位的元素",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "animation": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false,
          "description": "动画的配置，如果设置为false，将关闭动画",
          "defaultValue": {
            "value": "{\n    in: 'expandInDown',\n    out: 'expandOutUp'\n}",
            "computed": false
          },
          "docblock": "动画的配置，如果设置为false，将关闭动画"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 弹层内容 | ReactNode | -\nvisible | 弹层当前是否可见 | Boolean | -\ndefaultVisible | 弹层默认是否可见 | Boolean | false\nonVisibleChange | 弹层在显示和隐藏时触发的回调函数<br><br>**签名**:<br>Function(visible: Boolean, type: String, event: Object) => void<br>**参数**:<br>*visible*: {Boolean} 弹层是否显示<br>*type*: {String} 触发弹层显示和隐藏的来源<br>*event*: {Object} 事件对象 | Function | () =&gt; {}\ntrigger | 触发弹层显示或者隐藏的元素 | ReactNode | -\ntriggerType | 触发弹层显示或者隐藏的事件<br><br>**可选值**:<br>'hover', 'click', 'focus' | Enum | 'hover'\ndisabled | 是否禁用，如果设置为true，那么trigger不能触发弹层的显示或隐藏 | Boolean | false\nalign | 弹层相对于trigger的定位, 详见[Overlay的定位部分](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=overlay#demo-guide) | String | 'tl bl'\noffset | 弹层相对于trigger的定位的微调 | Array | [0, 0]\ndelay | 悬浮状态下延时时间 | Number | 200\nautoFocus | 弹层弹出后是否自动获取焦点 | Boolean | true\nhasMask | 是否带有遮罩 | Boolean | false\ncache | 在弹层隐藏后是否保留当前的DOM | Boolean | false\nbeforeOpen | 弹层显示前触发的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterOpen | 弹层显示后触发的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nbeforeClose | 弹层关闭前触发的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterClose | 弹层关闭后触发的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonPosition | 弹层定位完成后触发的回调函数<br><br>**签名**:<br>Function(config: Object, node: Object) => void<br>**参数**:<br>*config*: {Object} 定位的参数<br>*node*: {Object} 定位的元素 | Function | () =&gt; {}\nanimation | 动画的配置，如果设置为false，将关闭动画 | Boolean/Object | {     in: 'expandInDown',     out: 'expandOutUp' }\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Dropdown, Menu } from \"@icedesign/base\";\n\nconst menu = (\n  <Menu>\n    <Menu.Item>Option 1</Menu.Item>\n    <Menu.Item>Option 2</Menu.Item>\n    <Menu.Item>Option 3</Menu.Item>\n    <Menu.Item>Option 4</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <Dropdown\n    trigger={<a>Hello dropdown</a>}\n    afterOpen={() => console.log(\"after open\")}\n  >\n    {menu}\n  </Dropdown>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n最简单的用法。\n\n"
      },
      {
        "title": "从弹层外关闭",
        "order": "2",
        "jsx": "import { Dropdown, Menu, Button } from \"@icedesign/base\";\n\nconst menu = (\n  <Menu>\n    <Menu.Item>Option 1</Menu.Item>\n    <Menu.Item>Option 2</Menu.Item>\n    <Menu.Item>Option 3</Menu.Item>\n    <Menu.Item>Option 4</Menu.Item>\n  </Menu>\n);\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n\n  toggleVisible = () => {\n    this.setState({\n      visible: !this.state.visible\n    });\n  };\n\n  onVisibleChange = visible => {\n    this.setState({\n      visible\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={{ marginBottom: \"20px\" }}>\n          <Button onClick={this.toggleVisible} ref=\"button\">\n            切换弹层的显示隐藏\n          </Button>\n        </div>\n        <Dropdown\n          trigger={<span>Hello dropdown</span>}\n          triggerType=\"click\"\n          visible={this.state.visible}\n          onVisibleChange={this.onVisibleChange}\n          safeNode={() => this.refs.button}\n        >\n          {menu}\n        </Dropdown>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n使用 visible 属性控制弹层显示或者隐藏，需要使用 safeNode 将其控制的元素告诉 dropdown 组件。\n\n"
      },
      {
        "title": "触发的事件类型",
        "order": "1",
        "jsx": "import { Dropdown, Menu } from \"@icedesign/base\";\n\nconst menu = (\n  <Menu>\n    <Menu.Item>Option 1</Menu.Item>\n    <Menu.Item>Option 2</Menu.Item>\n    <Menu.Item>Option 3</Menu.Item>\n    <Menu.Item>Option 4</Menu.Item>\n  </Menu>\n);\n\nReactDOM.render(\n  <Dropdown trigger={<a>Click me</a>} triggerType=\"click\">\n    {menu}\n  </Dropdown>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n使用 triggerType 设置触发的事件类型。\n\n"
      }
    ]
  },
  {
    "name": "Feedback",
    "category": "Components",
    "title": "反馈",
    "type": "展示",
    "importStatement": "import { Feedback } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n用户在进行操作行为后（例如：输入、提交），系统对该操作行为内容作出的判断和校验反馈。\n\n-   成功：用户操作已成功。例如：宝贝发布成功。\n-   提示：需要用户知道采取行动的事件。例如：宝贝即将过期。\n-   错误：用户操作已失效或是需要马上采取行动的问题。例如：宝贝已经失效，提交失败。\n\n",
    "propsSchema": {
      "name": "Feedback",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'success'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'prompt'",
                "computed": false
              },
              {
                "value": "'help'",
                "computed": false
              },
              {
                "value": "'loading'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "反馈类型",
          "defaultValue": {
            "value": "'success'",
            "computed": false
          },
          "docblock": "反馈类型"
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'inline'",
                "computed": false
              },
              {
                "value": "'addon'",
                "computed": false
              },
              {
                "value": "'toast'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "反馈外观",
          "defaultValue": {
            "value": "'inline'",
            "computed": false
          },
          "docblock": "反馈外观"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "反馈大小",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "反馈大小"
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "标题",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "docblock": "标题"
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "内容",
          "docblock": "内容"
        },
        "visible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ntype | 反馈类型<br><br>**可选值**:<br>'success', 'error', 'prompt', 'help', 'loading' | Enum | 'success'\nshape | 反馈外观<br><br>**可选值**:<br>'inline', 'addon', 'toast' | Enum | 'inline'\nsize | 反馈大小<br><br>**可选值**:<br>'medium', 'large' | Enum | 'medium'\ntitle | 标题 | ReactNode | ''\nchildren | 内容 | ReactNode | -\nvisible | 是否显示 | Boolean | true\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "反馈外观",
        "order": "1",
        "jsx": "import { Feedback, Select } from \"@icedesign/base\";\n\nconst Option = Select.Option;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shape: \"inline\"\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleSelect(shape) {\n    this.setState({ shape });\n  }\n\n  render() {\n    const { shape } = this.state;\n\n    let types;\n    if (shape === \"toast\") {\n      types = [\"success\", \"prompt\", \"error\", \"help\", \"loading\"];\n    } else {\n      types = [\"success\", \"prompt\", \"error\"];\n    }\n\n    return (\n      <div className=\"feedback-shape-demo\">\n        <span className=\"demo-label\">请选择Shape：</span>\n        <Select defaultValue=\"inline\" onChange={this.handleSelect}>\n          <Option value=\"inline\">Inline</Option>\n          <Option value=\"addon\">Addon</Option>\n          <Option value=\"toast\">Toast</Option>\n        </Select>\n\n        {types.map(type => (\n          <Feedback key={type} title=\"title\" type={type} shape={shape}>\n            Content Content Content Content\n          </Feedback>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".feedback-shape-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 28px;\n    line-height: 28px;\n}\n\n.feedback-shape-demo .next-feedback {\n    margin-top: 10px;\n}\n\n.feedback-shape-demo .next-feedback.next-feedback-toast {\n    position: relative !important;\n}\n",
        "body": "\n反馈组件通过设置`shape`为`inline`、`addon`、`toast`，可分别创建有背景，无背景以及弹出的反馈组件，`shape`默认值为`inline`。\n\n"
      },
      {
        "title": "反馈尺寸",
        "order": "2",
        "jsx": "import { Feedback, Select } from \"@icedesign/base\";\n\nconst Option = Select.Option;\n\nconst types = [\"success\", \"prompt\", \"error\"];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: \"medium\"\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleSelect(size) {\n    this.setState({ size });\n  }\n\n  render() {\n    const { size } = this.state;\n\n    return (\n      <div className=\"feedback-size-demo\">\n        <span className=\"demo-label\">请选择Size：</span>\n        <Select defaultValue=\"medium\" onChange={this.handleSelect}>\n          <Option value=\"medium\">Medium</Option>\n          <Option value=\"large\">Large</Option>\n        </Select>\n\n        {types.map(type => (\n          <Feedback key={type} title=\"title\" type={type} size={size}>\n            Content Content Content Content\n          </Feedback>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".feedback-size-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 28px;\n    line-height: 28px;\n}\n\n.feedback-size-demo .next-feedback {\n    margin-top: 10px;\n}\n",
        "body": "\n反馈组件通过设置`size`为`medium`、`large`，可以分别创建中等尺寸以及大尺寸的反馈组件。\n\n"
      },
      {
        "title": "弹窗便捷方法",
        "order": "4",
        "jsx": "import { Feedback, Button } from \"@icedesign/base\";\n\nconst Toast = Feedback.toast;\n\nconst showSuccess = () => Toast.success(\"success 快捷调用\");\nconst showPrompt = () => Toast.prompt(\"prompt 快捷调用\");\nconst showError = () => Toast.error(\"error 快捷调用\");\nconst showHelp = () => Toast.help(\"help 快捷调用\");\nconst showLoading = () => Toast.loading(\"loading 快捷调用\");\n\nReactDOM.render(\n  <div className=\"feedback-toast-quick-demo\">\n    <Button onClick={showSuccess}>success 快捷调用</Button>\n    <Button onClick={showPrompt}>prompt 快捷调用</Button>\n    <Button onClick={showError}>error 快捷调用</Button>\n    <Button onClick={showHelp}>help 快捷调用</Button>\n    <Button onClick={showLoading}>loading 快捷调用</Button>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".feedback-toast-quick-demo .next-btn.next-btn-medium {\n    margin-right: 10px;\n    margin-bottom: 10px;\n}\n",
        "body": "\n可以通过`Feedback.toast.success`、`Feedback.toast.prompt`、`Feedback.toast.error`方法来方便的显示指定类型的反馈弹窗。\n\n"
      },
      {
        "title": "弹窗用法",
        "order": "3",
        "jsx": "import { Feedback, Button } from \"@icedesign/base\";\n\nconst Toast = Feedback.toast;\n\nconst show = () => {\n  Toast.show({\n    type: \"loading\",\n    content: \"将在3秒后关闭或手动点击关闭按钮\",\n    afterClose: () => console.log(\"Closed the toast\")\n  });\n};\nconst hide = () => Toast.hide();\n\nReactDOM.render(\n  <div className=\"feedback-toast-demo\">\n    <Button onClick={show}>显示</Button>\n    <Button onClick={hide}>关闭</Button>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".feedback-toast-demo .next-btn.next-btn-medium {\n    margin-right: 10px;\n}\n",
        "body": "\n可以通过`Feedback.toast.show`和`Feedback.toast.hide`方法来方便的显示或隐藏反馈弹窗。\n\n"
      },
      {
        "title": "反馈类型",
        "order": "0",
        "jsx": "import { Feedback } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div className=\"feedback-type-demo\">\n    <Feedback title=\"title\">Content Content Content Content</Feedback>\n    <Feedback title=\"title\" type=\"prompt\">\n      Content Content Content Content\n    </Feedback>\n    <Feedback title=\"title\" type=\"error\">\n      Content Content Content Content\n    </Feedback>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".feedback-type-demo .next-feedback {\n    margin-bottom: 10px;\n}\n",
        "body": "\n反馈组件通过设置`type`为`success`、`prompt`、`error`、`help`、`loading`，可分别创建类型为成功、提示、错误、帮助以及加载中的反馈组件，`type`默认值为`success`。\n\n"
      }
    ]
  },
  {
    "name": "Field",
    "category": "Components",
    "title": "表单数据获取、校验工具",
    "type": "表单",
    "importStatement": "import { Field } from '@icedesign/base';",
    "body": "\n\n## 开发指南\n\n### 何时使用\n\n涉及到表单数据操作、校验的地方都可以用Field来管理数据。和组件关联后可以自动对表单数据进行回写、读取、校验。\n\n### 使用注意\n\n- 使用Field `init` 过的组件，请勿再定义 `ref` `value` `onChange` 事件, 有可能被 init 覆盖。\n- `Form`已经和`Field` 在`数据获取`和`自动校验提示`方面做了深度优化，建议在`Form`中使用`Field`, 请查看 Form demo。\n- initValue 只有在组件第一次render的时候才生效(ajax异步调用设置initValue可能已经错过了第一次render)，这点类似于defauValue\n\n### 基本使用\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);    // 实例创建\n\n    onClick = ()=>{\n        console.log(this.field.getValue('name'));\n    }\n    render() {\n        const init = this.field.init;\n\n        // 注意：initVaue只会在组件第一次初始化的时候被赋值，如果你是异步赋值请用setValue\n        return <div>\n            <Input {...init('name',{initValue:'first value'})} />\n            <button onClick={this.onClick>获取数据</button>\n        </div>\n    }\n}\n```\n\n### 更新数据\n#### 事件更新\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    onClick = ()=>{\n        this.field.setValue('name', 'newvalue');    // 赋值会自动触发render\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n            <button onClick={this.onClick}>设置数据</button>\n        </div>\n    }\n}\n```\n\n#### props更新\n\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    // 在组件挂载之前把数据设置进去(可以用initValue替代这种用法)\n    componentWillMount() {\n        this.field.setValue('name', 'init Name')\n    }\n    // 接收来自props的数据\n    componentWillReceiveProps(nextProps) {\n        this.field.setValue('name', nextProps.name)\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n        </div>\n    }\n}\n```\n\n#### ajax更新\n```\nclass Demo extends React.Component {\n    field = new Field(this);\n\n    onClick = ()=>{\n        Ajax({\n            url:'/demo.json',\n            success:(json)=>{\n                // 回调事件中赋值更新\n                this.field.setValue('name',json.name);\n            }\n        });\n    }\n    render() {\n        const init = this.field.init;\n\n        return <div>\n            <Input {...init('name')} />\n            <button onClick={this.onClick}>设置数据</button>\n        </div>\n    }\n}\n```\n\n#### onChange更新监控\n两种用法：\n1. 统一管理\n\n```\nclass Demo extends React.Component {\n    field = new Field(this,{\n        onChange:(name, value) => {\n          switch(name) {\n            case 'name1':\n              this.field.setValue('name2','value set by name1');\n              break;\n            case 'name2':\n              this.field.setValue('name1','value set by name2');\n              break;\n          }\n        }\n    });\n    render() {\n        const init = this.field.init;\n\n        return <div>\n          <Input {...init('name1')} />\n          <Input {...init('name2')} />\n        </div>\n    }\n}\n```\n\n2. 各自管理\n\n```\nclass Demo extends React.Component {\n    render() {\n        const init = this.field.init;\n\n        return <div>\n          <Input {...init('name1',{\n              props:{\n                onChange:(v)=>{\n                  this.field.setValue('name2','value set by name1');\n                }\n              }\n            })} />\n          <Input {...init('name2',{\n              props:{\n                onChange:(v)=>{\n                  this.field.setValue('name1','value set by name2');\n                }\n              }\n            })} />\n        </div>\n    }\n}\n```\n\n详细请查看demo演示 `关联控制`\n\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [
      "### 初始化\n\n```js\nlet myfield = new Field(this [,options]);\n```\n\n| 参数    | 说明                       | 类型            | 可选值   | 默认值 |\n| ------- | -------------------------- | --------------- | -------- | ------ |\n| this    | 传入调用 class 的 this     | React.Component | 必须设置 |        |\n| options | 一些事件配置, 详细参数如下 | React.Component | 非必须   |        |\n\n`options` 配置项\n\n| 参数               | 说明                                                                                                                                    | 类型                 | 默认值                      |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------- | -------------------- | --------------------------- |\n| onChange           | 所有组件的 change 都会到达这里[setValue 不会触发该函数]                                                                                 | Function(name,value) |                             |\n| parseName          | 是否翻译`init(name)`中的`name`(getValues 会把带`.`的字符串转换成对象)                                                                   | Boolean              | false                       |\n| forceUpdate        | 仅建议 PureComponent 的组件打开此强制刷新功能，会带来性能问题(500 个组件为例：打开的时候 render 花费 700ms, 关闭时候 render 花费 400ms) | Boolean              | false                       |\n| scrollToFirstError | field.validate 的时候滚动到第一个出错的组件                                                                                             | Boolean              | false (1.0 版本会改成 true) |\n| autoUnmount        | 自动删除(remove) Unmout 元素, getValues 不会出现冗余数据                                                                                | Boolean              | false (1.0 版本会改成 true) |\n| deepReset          | 强制重置数据(设置所有数据为 undefined，业务组件需要自己支持 value=undefined 情况清空数据)(版本要求>next@0.15)                           | Boolean              | false (1.0 版本会改成 true) |\n\n#### API 接口\n\n`new`之后的对象提供的 api 接口 （例：`myfield.getValues()`）(`set` 开头的 api 函数不要在 render 里面操作, 可能会触发死循环)\n\n| 参数      | 说明                                                                     | 类型                                                                               | 可选值                            | 默认值              |\n| --------- | ------------------------------------------------------------------------ | ---------------------------------------------------------------------------------- | --------------------------------- | ------------------- |\n| init      | 初始化每个组件，[详细参数如下](#init)）                                  | Function(name:String, option:Object)                                               |                                   |                     |\n| getValues | 获取一组输入控件的值，如不传入参数，则获取全部组件的值                   | Function([names: String[]])                                                        |                                   |                     |\n| getValue  | 获取单个输入控件的值                                                     | Function(name: String)                                                             |                                   |                     |\n| setValues | 设置一组输入控件的值（会触发 render，请遵循 react 时机使用)              | Function(obj: Object)                                                              |                                   |                     |\n| setValue  | 设置单个输入控件的值 （会触发 render，请遵循 react 时机使用)             | Function(name: String, value)                                                      |                                   |                     |\n| validate  | 校验并获取一组输入域的值与 Error                                         | Function([names: String[]], [options: Object], callback: Function(errors, values)) |                                   |                     |\n| getError  | 获取单个输入控件的 Error                                                 | Function(name: String)                                                             |                                   |                     |\n| getErrors | 获取一组输入控件的 Error                                                 | Function([name: String])                                                           |                                   |                     |\n| setError  | 设置单个输入控件的 Error                                                 | Function(name: String, errors:String/Array[String])                                |                                   |                     |\n| setErrors | 设置一组输入控件的 Error                                                 | Function(obj: Object)                                                              |                                   |                     |\n| reset     | 重置一组输入控件的值、清空校验, 第二个参数控制是否回到 defaultValue      | Function([names: String[]], backToDefault:Boolean)                                 |                                   | backToDefault=false |\n| getState  | 判断校验状态                                                             | Function(name: String)                                                             | 'error' 'success' 'validating' '' | ''                  |\n| getNames  | 获取所有组件的 key                                                       | Function()                                                                         |                                   |                     |\n| remove    | 删除某一个或者一组控件的数据，删除后与之相关的 validate/value 都会被清空 | Function(name: String/String[])                                                    |                                   |                     |\n\n#### init\n\n```js\ninit(name, options);\n```\n\n| 参数                      | 说明                                                                                          | 类型                                               | 可选值 | 默认值     |\n| ------------------------- | --------------------------------------------------------------------------------------------- | -------------------------------------------------- | ------ | ---------- |\n| name                      | 必填输入控件唯一标志                                                                          | String                                             |        |            |\n| options.valueName         | 组件值的属性名称，如 Checkbox 的是 `checked`，Input 是 `value`                                | String                                             |        | 'value'    |\n| options.initValue         | 组件初始值(组件第一次 render 的时候才会读取，后面再修改此值无效),类似 defaultValue            | any                                                |        |            |\n| options.trigger           | 触发数据变化的事件名称                                                                        | String                                             |        | 'onChange' |\n| options.rules             | 校验规则                                                                                      | Array/Object                                       |        |            |  |\n| options.props             | 组件自定义的事件可以写在这里，其他会透传(小包版本^0.3.0 支持，大包^0.7.0 支持)                | Object                                             |        |            |  |\n| options.getValueFromEvent | 自定义从`onChange`事件中获取 value 的方式，一般不需要设置. 详细用法查看 demo `自定义数据获取` | Function(value,...args) 参数顺序和组件是完全一致的 |        |            |  |\n\n返回值\n\n```js\n{\n  id, value, onChange;\n}\n```\n\n#### rules\n\n```js\n{\n  rules: [{ required: true }];\n}\n```\n\n多个 rule\n\n```js\n{\n  rules: [\n    { required: true, trigger: 'onBlur' },\n    { pattern: /abcd/, message: 'abcd不能缺' },\n    {\n      validator: (rule, value, callback) => {\n        callback('出错了');\n      }\n    }\n  ];\n}\n```\n\n| 参数       | 说明                                                                                                                                                                                                                   | 类型                                                    | 可选值                     | 默认值   |\n| ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------- | -------------------------- | -------- |\n| required   | 不能为空 (不能和`pattern`同时使用)                                                                                                                                                                                     | Boolean                                                 | true                       |          |\n| message    | 出错时候信息                                                                                                                                                                                                           | String                                                  |                            |          |\n| type       | 被校验数据类型(注意 `type:'number'` 表示数据类型为`Number`,而不是字符串形式的数字,字符串形式的数字请用`pattern:/^[0-9]*$/`) <a href=\"https://github.com/yiminghe/async-validator#rules\" target=\"_blank\">详细文档见</a> | String                                                  | String/Array/url/email/... | String   |\n| pattern    | 校验正则表达式                                                                                                                                                                                                         | 正则表达式（例如：`/^[0-9]*$/`表示字符串形式的 number） |                            |          |\n| len        | 长度校验，如果 max、mix 混合配置，len 的优先级最高                                                                                                                                                                     | Number                                                  |                            |          |\n| min        | 字符最小长度                                                                                                                                                                                                           | Number                                                  |                            |          |\n| max        | 字符最大长度                                                                                                                                                                                                           | Number                                                  |                            |          |\n| whitespace | 是否进行空白字符校验（true 进行校验)                                                                                                                                                                                   | Boolean                                                 |                            |          |\n| validator  | 自定义校验,(校验成功的时候不要忘记执行 `callback()`,否则会校验不返回)                                                                                                                                                  | Function(rule,value,callback)                           |                            |          |\n| trigger    | 触发校验的事件名称                                                                                                                                                                                                     | String/Array                                            | onChange/onBlur/...        | onChange |\n\n更加详细的 rules 建议规则见<a href=\"https://github.com/yiminghe/async-validator#rules\" target=\"_blank\">async-validator</a>的 rules 项\n\n* 支持受控模式(value+onChange) `必须`\n\n  * value 控制组件数据展现\n  * onChange 组件发生变化时候的回调函数（第一个参数可以给到 value)\n\n* 一次完整操作抛一次 onChange 事件 `建议`\n  比如有 Process 表示进展中的状态，建议增加 API `onProcess`；如果有 Start 表示启动状态，建议增加 API `onStart`\n\n* `value={undefined}`的时候清空数据, field 的 reset 函数会给所有组件下发 undefined 数据 `建议`\n\n```js\ncomponentWillReceiveProps(nextProps) {\n  if ('value' in nextProps ) {\n    this.setState({\n      value: nextProps.value === undefined? []: nextProps.value   //  设置组件的被清空后的数值\n    });\n  }\n}\n```\n\n## 已知问题\n\n* 为何手动调用 `this.field.validate` 的时候进不了回调函数？ 答: 是不是自定义了 validator 方法,确保`callback`在任何分支下都能被执行到。\n"
    ],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "自动卸载",
        "order": "11",
        "jsx": "import { Input, Select, Button, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this, {\n    autoUnmount: true\n  });\n\n  onGetValue() {\n    console.log(this.field.getValues());\n  }\n\n  render() {\n    const { init, getValue } = this.field;\n\n    return (\n      <div className=\"demo\">\n        <Select {...init(\"select\", { initValue: \"yes\" })}>\n          <li value=\"yes\">yes</li>\n          <li value=\"no\">no</li>\n        </Select>\n        <br />\n\n        {getValue(\"select\") === \"yes\" ? <Input {...init(\"input\")} /> : null}\n        <br />\n        <br />\n        <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>\n          getValue\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\nautoUnmount 会自动把Unmout的元素删除。getValues里面也会自动remove组件数据\n\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Input, Button, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  onGetValue() {\n    console.log(this.field.getValue(\"input\"));\n  }\n\n  render() {\n    const { init, setValue, reset } = this.field;\n\n    return (\n      <div className=\"demo\">\n        <Input {...init(\"input\", { initValue: \"test\" })} />\n        <br />\n        <br />\n        <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>\n          getValue\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => setValue(\"input\", \"set me by click\")}\n        >\n          setValue\n        </Button>\n        <Button onClick={() => reset()}>reset</Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n`getValue` `setValue` `reset` 的使用\n\n"
      },
      {
        "title": "自定义组件使用Field",
        "order": "7",
        "jsx": "import { Button, Field } from \"@icedesign/base\";\n\n// 最简单的组件\nclass Custom extends React.Component {\n  static propTypes = {\n    onChange: React.PropTypes.func, // Field 从组件拿最新值\n    value: React.PropTypes.array // Feild 给组件设置新值\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: typeof props.value === \"undefined\" ? [] : props.value\n    };\n  }\n\n  // 用到了state的需要接受props传过来的value，以更新组件\n  componentWillReceiveProps(nextProps) {\n    if (\"value\" in nextProps) {\n      this.setState({\n        value: typeof nextProps.value === \"undefined\" ? [] : nextProps.value\n      });\n    }\n  }\n\n  onAdd = () => {\n    let value = this.state.value.concat([]);\n    value.push(\"new\");\n\n    this.setState({\n      value\n    });\n    this.props.onChange(value);\n  };\n\n  render() {\n    return (\n      <div className=\"custom\">\n        {this.state.value.map((v, i) => {\n          return <Button key={i}>{v}</Button>;\n        })}\n        <Button type=\"primary\" onClick={this.onAdd.bind(this)}>\n          Add ＋{\" \"}\n        </Button>\n      </div>\n    );\n  }\n}\n\n/* eslint-disable react/no-multi-comp */\nclass App extends React.Component {\n  field = new Field(this, {\n    deepReset: true\n  });\n\n  onGetValue() {\n    console.log(this.field.getValue(\"custom\"));\n  }\n\n  render() {\n    const { init, setValue, reset } = this.field;\n\n    return (\n      <div className=\"demo\">\n        <Custom {...init(\"custom\", { initValue: [\"test\"] })} />\n\n        <br />\n        <br />\n\n        <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>\n          getValue\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => setValue(\"custom\", [\"test\", \"setValue\"])}\n        >\n          setValue\n        </Button>\n        <Button onClick={() => reset()}>reset</Button>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n.custom {\n    border: 1px dashed;\n    padding: 4px;\n    display: inline-block;\n}\n.custom span {\n    border: 1px solid green;\n    padding: 0px 5px;\n    height: 24px;\n    display: inline-block;\n    margin-right: 2px;\n}\n",
        "body": "\n`达到效果`：Field可以getValue从onChange获取数据，可以setValue通过value控制组件数据切换\n`完全支持`: 组件支持[受控](https://facebook.github.io/react/docs/forms.html#controlled-components)， 也就是支持两个api：`value` `onChange`. value: 设置组件的数据; onChange: 在组件修改的时候在第一个数暴露数据\n`最低标准`: 组件有`onChange`事件可以读取组件数据。`达到效果`：Field可以getValue，但是setValue无效\n自己的组件如何接入Field。\n\n"
      },
      {
        "title": "组合使用",
        "order": "6",
        "jsx": "import {\n  Button,\n  Checkbox,\n  Radio,\n  Select,\n  Range,\n  DatePicker,\n  TimePicker,\n  Field\n} from \"@icedesign/base\";\n\nconst { Group: CheckboxGroup } = Checkbox;\nconst { Group: RadioGroup } = Radio;\n\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\"\n  },\n  {\n    value: \"pear\",\n    label: \"梨\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\"\n  }\n];\nconst layout = {\n  marginBottom: 10,\n  width: 400\n};\n\nclass App extends React.Component {\n  field = new Field(this, {\n    deepReset: true\n  });\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <div className=\"demo\">\n        <Select {...init(\"select\", { initValue: \"lucy\" })} style={layout}>\n          <li value=\"jack\">jack</li>\n          <li value=\"lucy\">lucy</li>\n          <li value=\"disabled\" disabled>\n            disabled\n          </li>\n          <li value=\"hugohua\">hugohua</li>\n        </Select>\n        <br />\n\n        <Range\n          style={{ ...layout, marginTop: 30 }}\n          slider={\"double\"}\n          scales={10}\n          marks={10}\n          {...init(\"range\", { initValue: [20, 40] })}\n        />\n\n        <div style={{ marginBottom: 10 }}>\n          <CheckboxGroup\n            dataSource={list}\n            {...init(\"checkboxgroup\", { initValue: [\"apple\"] })}\n          />\n        </div>\n\n        <div style={{ marginBottom: 10 }}>\n          <RadioGroup {...init(\"radiogroup\", { initValue: \"b\" })}>\n            <Radio value=\"a\">A</Radio>\n            <Radio value=\"b\">B</Radio>\n            <Radio value=\"c\">C</Radio>\n            <Radio value=\"d\">D</Radio>\n          </RadioGroup>\n        </div>\n        <div style={{ marginBottom: 10 }}>\n          <DatePicker />\n        </div>\n        <div style={{ marginBottom: 10 }}>\n          <DatePicker.RangePicker />\n        </div>\n        <div style={{ marginBottom: 10 }}>\n          <TimePicker />\n        </div>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            console.log(this.field.getValues());\n          }}\n        >\n          getValues\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.setValues({\n              select: \"hugohua\",\n              range: [30, 50],\n              checkboxgroup: [\"orange\"],\n              radiogroup: \"d\"\n            });\n          }}\n        >\n          setValues\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.reset();\n          }}\n        >\n          reset\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n很多组件\n\n"
      },
      {
        "title": "自定义数据获取",
        "order": "1",
        "jsx": "import { Button, DatePicker, Upload, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  normFile(list) {\n    if (Array.isArray(list)) {\n      return list;\n    }\n    return list && list.fileList;\n  }\n\n  normDate(date, strdate) {\n    console.log(\"normDate:\", date, strdate);\n    return strdate;\n  }\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <div>\n        <DatePicker\n          {...init(\"datepicker\", {\n            getValueFromEvent: this.normDate\n          })}\n        />\n        <br />\n        <br />\n\n        <Upload\n          listType=\"text\"\n          {...init(\"upload\", {\n            getValueFromEvent: this.normFile\n          })}\n        />\n        <br />\n        <br />\n\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            console.log(this.field.getValues());\n          }}\n        >\n          getValues\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n通过 `getValueFromEvent` 自定义从组件的 `Event` 获取 `value` 的方式\n\n"
      },
      {
        "title": "关联控制",
        "order": "2",
        "jsx": "import { Input, Select, Range, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this, {\n    onChange: (name, value) => {\n      switch (name) {\n        case \"input\":\n          this.field.setValue(\"sync\", `被改成了: ${value}`);\n          break;\n        case \"select\":\n          this.field.setValue(\"sync\", `${value} 来了`);\n          break;\n        case \"range\":\n          this.field.setValue(\"sync\", `坐标 (${value.join(\",\")}) ready`);\n          break;\n      }\n    }\n  });\n\n  render() {\n    const init = this.field.init;\n    const layout = {\n      marginBottom: 10,\n      width: 400\n    };\n\n    return (\n      <div>\n        <Input\n          placeholder=\"我在Field的onChange里面做了控制\"\n          {...init(\"input\")}\n          style={layout}\n        />\n        <br />\n        <Input placeholder=\"受控同步\" {...init(\"input\")} style={layout} />\n        <br />\n\n        <Select style={layout} {...init(\"select\", { initValue: \"lucy\" })}>\n          <li value=\"jack\">jack</li>\n          <li value=\"lucy\">lucy</li>\n          <li value=\"disabled\" disabled>\n            disabled\n          </li>\n          <li value=\"hugo\">hugo</li>\n        </Select>\n        <br />\n\n        <Range\n          style={{ ...layout, marginTop: 30 }}\n          slider={\"double\"}\n          scales={10}\n          marks={10}\n          {...init(\"range\", { initValue: [20, 40] })}\n        />\n        <br />\n\n        <hr style={{ marginBottom: 10 }} />\n        <Input\n          placeholder=\"我就是被人打的波波, 谁都能控制我\"\n          {...init(\"sync\")}\n          style={layout}\n        />\n        <br />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n组件之间的关联控制. `onChange` 统一管理。\n\n"
      },
      {
        "title": "redux中使用",
        "order": "4",
        "jsx": "import { Input, Button, Field } from \"@icedesign/base\";\nimport { combineReducers, createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\n\nfunction formReducer(state = { email: \"frankqian@qq.com\" }, action) {\n  switch (action.type) {\n    case \"save_fields\":\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n}\n\nclass Demo extends React.Component {\n  static propTypes = {\n    email: React.PropTypes.string,\n    dispatch: React.PropTypes.func\n  };\n\n  componentWillReceiveProps(nextProps) {\n    this.field.setValues({\n      email: nextProps.email,\n      newlen: nextProps.email.length\n    });\n  }\n\n  field = new Field(this, {\n    onChange: (name, value) => {\n      console.log(\"onChange\", name, value);\n      this.field.setValue(\"newlen\", value.length);\n      this.props.dispatch({\n        type: \"save_fields\",\n        payload: {\n          [name]: value\n        }\n      });\n    }\n  });\n\n  setEmail() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      payload: {\n        email: \"qq@gmail.com\"\n      }\n    });\n  }\n\n  render() {\n    const init = this.field.init;\n\n    const newLen = init(\"newlen\", { initValue: this.props.email.length });\n\n    return (\n      <div>\n        <Input\n          {...init(\"email\", {\n            initValue: this.props.email,\n            rules: [\n              {\n                required: true,\n                type: \"email\",\n                message: \"用户名至少为 5 个字符\"\n              }\n            ]\n          })}\n        />\n        现在的长度是:{newLen.value}\n        <p>email: {this.props.email}</p>\n        <Button onClick={this.setEmail.bind(this)}>set</Button>\n      </div>\n    );\n  }\n}\n\nconst ReduxDemo = connect(state => {\n  return {\n    email: state.formReducer.email\n  };\n})(Demo);\n\nconst store = createStore(\n  combineReducers({\n    formReducer\n  })\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      <ReduxDemo />\n    </div>\n  </Provider>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n在redux中使用, 在componentWillReceiveProps更新\n\n"
      },
      {
        "title": "自定义错误",
        "order": "3",
        "jsx": "import { Input, Button, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  render() {\n    const { init, getError, setError, setErrors } = this.field;\n    return (\n      <div className=\"demo\">\n        <Input\n          {...init(\"input\", {\n            rules: {\n              required: true,\n              pattern: /hello/,\n              message: \"我是真正的错误信息，必须填写hello\"\n            }\n          })}\n        />\n        <br />\n        <span style={{ color: \"red\" }}>{getError(\"input\")}</span>\n\n        <br />\n        <Button\n          onClick={() => {\n            setError(\"input\", \"设置的错误信息\");\n          }}\n        >\n          setError\n        </Button>\n\n        <Button\n          onClick={() => {\n            setErrors({ input: \"设置的错误信息2\" });\n          }}\n        >\n          setErrors\n        </Button>\n\n        <Button\n          onClick={() => {\n            setErrors({ input: \"\" });\n          }}\n        >\n          clear\n        </Button>\n\n        <br />\n        <br />\n        <Input {...init(\"input2\")} />\n        <br />\n        <span style={{ color: \"red\" }}>{getError(\"input2\")}</span>\n        <br />\n\n        <Button\n          onClick={() => {\n            setError(\"input2\", \"设置的错误信息onChange后会被去除\");\n          }}\n        >\n          setError\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n自己控制组件的errors\n\n"
      },
      {
        "title": "获取对象或数组",
        "order": "10",
        "jsx": "import { Input, Button, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this, {\n    parseName: true // 这里打开开关\n  });\n\n  onGetValue() {\n    console.log(this.field.getValues());\n  }\n\n  onSetValue() {\n    this.field.setValues({\n      a: {\n        b: \"b\",\n        c: \"c\"\n      },\n      arr: [\"first\", \"second\"]\n    });\n  }\n\n  render() {\n    const { init, reset } = this.field;\n\n    return (\n      <div className=\"demo\">\n        <h2>对象转换</h2>\n        <Input {...init(\"a.b\", { initValue: \"test1\" })} /> &nbsp;\n        <Input {...init(\"a.c\", { initValue: \"test2\" })} />\n        <br />\n        <h2>数组转换</h2>\n        <Input {...init(\"arr.0\", { initValue: \"0\" })} /> &nbsp;\n        <Input {...init(\"arr.1\", { initValue: \"1\" })} />\n        <br />\n        <br />\n        结构化数据:\n        <pre>{JSON.stringify(this.field.getValues(), null, 2)}</pre>\n        <br />\n        <br />\n        <Button type=\"primary\" onClick={this.onGetValue.bind(this)}>\n          getValues\n        </Button>\n        <Button onClick={this.onSetValue.bind(this)}>setValues</Button>\n        <Button onClick={() => reset()}>reset</Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n把 `init('arr.0')` 的数据转换成 `obj={arr:['']}`；\n把 `init('a.b')` 的数据转换成 `obj={a:{b:'value'}}`；\n\n"
      },
      {
        "title": "校验",
        "order": "3",
        "jsx": "import { Input, Button, Checkbox, Field } from \"@icedesign/base\";\n\nconst CheckboxGroup = Checkbox.Group;\n\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\"\n  },\n  {\n    value: \"pear\",\n    label: \"梨\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\"\n  }\n];\n\nclass App extends React.Component {\n  state = {\n    checkboxStatus: true\n  };\n  field = new Field(this, { scrollToFirstError: true });\n\n  isChecked(rule, value, callback) {\n    if (!value) {\n      callback(\"没有勾选同意协议\");\n    } else {\n      callback();\n    }\n  }\n\n  userName(rule, value, callback) {\n    if (value === \"frank\") {\n      setTimeout(() => callback(\"名称已经存在\"), 200);\n    } else {\n      setTimeout(() => callback(), 200);\n    }\n  }\n\n  render() {\n    const init = this.field.init;\n    return (\n      <div className=\"demo\">\n        <Input\n          {...init(\"input\", {\n            initValue: \"删除试试\",\n            rules: { required: true }\n          })}\n        />\n        {this.field.getError(\"input\") ? (\n          <span style={{ color: \"red\" }}>\n            {this.field.getError(\"input\").join(\",\")}\n          </span>\n        ) : (\n          \"\"\n        )}\n        <br />\n        <br />\n        <Input\n          placeholder=\"离开焦点onBlur\"\n          {...init(\"input1\", {\n            rules: {\n              required: true,\n              message: \"不能为空\",\n              trigger: [\"onBlur\", \"onChange\"]\n            }\n          })}\n        />\n        {this.field.getError(\"input1\") ? (\n          <span style={{ color: \"red\" }}>\n            {this.field.getError(\"input1\").join(\",\")}\n          </span>\n        ) : (\n          \"\"\n        )}\n        <br />\n        <br />\n        <Input\n          defaultValue=\"\"\n          placeholder=\"填写frank\"\n          {...init(\"username\", {\n            rules: {\n              validator: this.userName,\n              trigger: [\"onBlur\", \"onChange\"]\n            }\n          })}\n        />\n        {this.field.isValidating(\"username\") ? \"正在校验中...\" : \"\"}\n        {this.field.getError(\"username\") ? (\n          <span style={{ color: \"red\" }}>\n            {this.field.getError(\"username\").join(\",\")}\n          </span>\n        ) : (\n          \"\"\n        )}\n        <br />\n        <br />\n        是否同意以上协议:\n        <Checkbox\n          {...init(\"checkbox\", {\n            valueName: \"checked\",\n            rules: { validator: this.isChecked }\n          })}\n        />\n        {this.field.getError(\"checkbox\") ? (\n          <span style={{ color: \"red\" }}>\n            {this.field.getError(\"checkbox\").join(\",\")}\n          </span>\n        ) : (\n          \"\"\n        )}\n        <br />\n        <br />\n        <Input\n          multiple\n          maxLength={10}\n          defaultValue=\"字符串长度在3-10之间\"\n          {...init(\"textarea\", {\n            rules: [\n              {\n                required: true,\n                min: 3,\n                max: 10\n              }\n            ]\n          })}\n        />\n        {this.field.getError(\"textarea\") ? (\n          <span style={{ color: \"red\" }}>\n            {this.field.getError(\"textarea\").join(\",\")}\n          </span>\n        ) : (\n          \"\"\n        )}\n        <br />\n        <br />\n        {this.state.checkboxStatus ? (\n          <div>\n            数组类型的数据校验：\n            <CheckboxGroup\n              dataSource={list}\n              {...init(\"checkboxgroup\", {\n                rules: {\n                  required: true,\n                  type: \"array\",\n                  message: \"必须勾选一个吧\"\n                }\n              })}\n              style={{ marginBottom: 10 }}\n            />\n            {this.field.getError(\"checkboxgroup\") ? (\n              <span style={{ color: \"red\" }}>\n                {this.field.getError(\"checkboxgroup\").join(\",\")}\n              </span>\n            ) : (\n              \"\"\n            )}\n          </div>\n        ) : null}\n        <br />\n        <br />\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            this.field.validate((errors, values) => {\n              console.log(errors, values);\n            });\n          }}\n        >\n          validate\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.reset();\n          }}\n        >\n          reset\n        </Button>\n        <Button\n          onClick={() => {\n            if (this.state.checkboxStatus) {\n              this.setState({ checkboxStatus: false });\n              this.field.remove(\"checkboxgroup\");\n            } else {\n              this.setState({ checkboxStatus: true });\n            }\n          }}\n        >\n          {this.state.checkboxStatus ? \"delete\" : \"restore\"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\n`注意`：Form和Field做了深度结合，在Form中使用Field，错误信息不需`getError`获取会自动展现。\n校验的错误信息需要用`getError`获取\n\n"
      },
      {
        "title": "自定义受控字段",
        "order": "6",
        "jsx": "import { Button, Checkbox, Radio, Switch, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <div className=\"demo\">\n        <Radio {...init(\"radio\", { initValue: false, valueName: \"checked\" })}>\n          {\" \"}\n          checked\n        </Radio>\n        <br />\n        <Checkbox\n          {...init(\"checkbox\", { initValue: true, valueName: \"checked\" })}\n        >\n          defaultChecked\n        </Checkbox>\n        <br />\n        <Switch\n          {...init(\"switch\", { initValue: false, valueName: \"checked\" })}\n          style={{ marginTop: 10, marginBottom: 10 }}\n        />\n        <br />\n\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            console.log(this.field.getValues());\n          }}\n        >\n          getValues\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.setValues({\n              radio: true,\n              switch: true,\n              checkbox: false\n            });\n          }}\n        >\n          {\" \"}\n          setValues{\" \"}\n        </Button>\n        <Button\n          onClick={() => {\n            this.field.reset();\n          }}\n        >\n          reset\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo .next-btn {\n    margin-right: 5px;\n}\n",
        "body": "\nvalueName的默认值为value，如果为其他需要用valueName指定\n\n"
      }
    ]
  },
  {
    "name": "Form",
    "category": "Components",
    "title": "表单",
    "type": "表单",
    "importStatement": "import { Form } from '@icedesign/base';",
    "body": "\n\n## 开发指南\n\n### 何时使用\n\n表单校验、数据提交操作是用到。 Form表单包含了布局、数据获取、校验功能等功能， 其中 `数据获取`、`校验功能` 需要配合 `Field` 使用才能发挥。\n\n### 注意事项\n\n-   组件不要使用关键字 `nodeName` 作为 name、id \n-   使用了 Field `init` 过的组件，请勿在组件上面直接定义 `ref` `value` `onChange` 事件。\n-   Form 默认使用 `size=medium`, 并且会控制FormItem内所有组件的size。 如果想修改组件的size `<FormItem size=\"small\" >`\n-   在垂直表单中如果文字（一般 `<p>` 标签）或者组件向上偏离，可以通过 `className=\"next-form-text-align\"` 辅助调整\n\n",
    "propsSchema": {
      "name": "Form",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'hoz'",
                "computed": false,
                "description": "水平"
              },
              {
                "value": "'ver'",
                "computed": false,
                "description": "垂直"
              }
            ]
          },
          "required": false,
          "description": "表单展示方向",
          "defaultValue": {
            "value": "'ver'",
            "computed": false
          },
          "docblock": "表单展示方向\n@enumdesc 水平, 垂直",
          "value": [
            {
              "value": "'hoz'",
              "computed": false,
              "description": "水平"
            },
            {
              "value": "'ver'",
              "computed": false,
              "description": "垂直"
            }
          ]
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'large'",
                "computed": false,
                "description": "大"
              },
              {
                "value": "'medium'",
                "computed": false,
                "description": "中"
              },
              {
                "value": "'small'",
                "computed": false,
                "description": "小"
              }
            ]
          },
          "required": false,
          "description": "单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。\n@enumdesc 大, 中, 小",
          "value": [
            {
              "value": "'large'",
              "computed": false,
              "description": "大"
            },
            {
              "value": "'medium'",
              "computed": false,
              "description": "中"
            },
            {
              "value": "'small'",
              "computed": false,
              "description": "小"
            }
          ]
        },
        "labelAlign": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'top'",
                "computed": false,
                "description": "上"
              },
              {
                "value": "'left'",
                "computed": false,
                "description": "左"
              },
              {
                "value": "'inset'",
                "computed": false,
                "description": "内"
              }
            ]
          },
          "required": false,
          "description": "标签的位置",
          "defaultValue": {
            "value": "'left'",
            "computed": false
          },
          "docblock": "标签的位置\n@enumdesc 上, 左, 内",
          "value": [
            {
              "value": "'top'",
              "computed": false,
              "description": "上"
            },
            {
              "value": "'left'",
              "computed": false,
              "description": "左"
            },
            {
              "value": "'inset'",
              "computed": false,
              "description": "内"
            }
          ]
        },
        "labelTextAlign": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "''",
                "computed": false,
                "description": ""
              },
              {
                "value": "'left'",
                "computed": false,
                "description": "左"
              },
              {
                "value": "'right'",
                "computed": false,
                "description": "右"
              }
            ]
          },
          "required": false,
          "description": "标签的左右对齐方式",
          "docblock": "标签的左右对齐方式\n@enumdesc , 左, 右",
          "value": [
            {
              "value": "''",
              "computed": false,
              "description": ""
            },
            {
              "value": "'left'",
              "computed": false,
              "description": "左"
            },
            {
              "value": "'right'",
              "computed": false,
              "description": "右"
            }
          ]
        },
        "field": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项",
          "docblock": "经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项"
        },
        "onSubmit": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "form内有 `htmlType=\"submit\"` 的元素的时候会触发",
          "defaultValue": {
            "value": "function(e) {\n    e.preventDefault();\n}",
            "computed": false
          },
          "docblock": "form内有 `htmlType=\"submit\"` 的元素的时候会触发",
          "params": [],
          "returns": null
        },
        "children": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "子元素",
          "docblock": "子元素"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "扩展class",
          "docblock": "扩展class"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Item",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式前缀"
            },
            "label": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "label 标签的文本",
              "docblock": "label 标签的文本"
            },
            "labelCol": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效",
              "docblock": "label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效",
              "properties": []
            },
            "help": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "提示信息，如不设置，则会根据校验规则自动生成. 如果设置会受控（ps: 可以利用这点自定义错误位置,详细看demo自定义错误)",
              "docblock": "提示信息，如不设置，则会根据校验规则自动生成. 如果设置会受控（ps: 可以利用这点自定义错误位置,详细看demo自定义错误)"
            },
            "validateStatus": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "''",
                    "computed": false,
                    "description": ""
                  },
                  {
                    "value": "'success'",
                    "computed": false,
                    "description": "成功"
                  },
                  {
                    "value": "'error'",
                    "computed": false,
                    "description": "失败"
                  },
                  {
                    "value": "'loading'",
                    "computed": false,
                    "description": "校验中"
                  }
                ]
              },
              "required": false,
              "description": "校验状态，如不设置，则会根据校验规则自动生成",
              "docblock": "校验状态，如不设置，则会根据校验规则自动生成\n@enumdesc , 成功, 失败, 校验中",
              "value": [
                {
                  "value": "''",
                  "computed": false,
                  "description": ""
                },
                {
                  "value": "'success'",
                  "computed": false,
                  "description": "成功"
                },
                {
                  "value": "'error'",
                  "computed": false,
                  "description": "失败"
                },
                {
                  "value": "'loading'",
                  "computed": false,
                  "description": "校验中"
                }
              ]
            },
            "hasFeedback": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "配合 validateStatus 属性使用，是否展示校验状态图标, 目前只有Input支持",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "配合 validateStatus 属性使用，是否展示校验状态图标, 目前只有Input支持"
            },
            "wrapperCol": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "需要为输入控件设置布局样式时，使用该属性，用法同 labelCol",
              "docblock": "需要为输入控件设置布局样式时，使用该属性，用法同 labelCol",
              "properties": []
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "extra": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面",
              "docblock": "额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面"
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "''",
                    "computed": false
                  },
                  {
                    "value": "'large'",
                    "computed": false
                  },
                  {
                    "value": "'small'",
                    "computed": false
                  },
                  {
                    "value": "'medium'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。",
              "docblock": "单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "扩展class",
              "docblock": "扩展class"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\ndirection | 表单展示方向<br><br>**可选值**:<br>'hoz'(水平)<br>'ver'(垂直) | Enum | 'ver'\nsize | 单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。<br><br>**可选值**:<br>'large'(大)<br>'medium'(中)<br>'small'(小) | Enum | 'medium'\nlabelAlign | 标签的位置<br><br>**可选值**:<br>'top'(上)<br>'left'(左)<br>'inset'(内) | Enum | 'left'\nlabelTextAlign | 标签的左右对齐方式<br><br>**可选值**:<br>''<br>'left'(左)<br>'right'(右) | Enum | -\nfield | 经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项 | any | -\nonSubmit | form内有 `htmlType=\"submit\"` 的元素的时候会触发<br><br>**签名**:<br>Function() => void | Function | function(e) {     e.preventDefault(); }\nchildren | 子元素 | any | -\nclassName | 扩展class | String | -\nstyle | 自定义内联样式 | Object | -\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Item",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nlabel | label 标签的文本 | ReactNode | -\nlabelCol | label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效 | Object | -\nhelp | 提示信息，如不设置，则会根据校验规则自动生成. 如果设置会受控（ps: 可以利用这点自定义错误位置,详细看demo自定义错误) | ReactNode | -\nvalidateStatus | 校验状态，如不设置，则会根据校验规则自动生成<br><br>**可选值**:<br>''<br>'success'(成功)<br>'error'(失败)<br>'loading'(校验中) | Enum | -\nhasFeedback | 配合 validateStatus 属性使用，是否展示校验状态图标, 目前只有Input支持 | Boolean | false\nwrapperCol | 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol | Object | -\nstyle | 自定义内联样式 | Object | -\nextra | 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面 | ReactNode | -\nsize | 单个FormItem的size自定义，优先级高于Form的size, 并且当组件与 FormItem 一起使用时，组件自身设置 size 属性无效。<br><br>**可选值**:<br>'', 'large', 'small', 'medium' | Enum | -\nclassName | 扩展class | String | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "自定义布局",
        "order": "6",
        "jsx": "import {\n  Form,\n  Input,\n  Switch,\n  Grid,\n  Button,\n  Icon,\n  Balloon,\n  Field\n} from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nconst FormItem = Form.Item;\nconst style = {\n  padding: \"20px\",\n  background: \"#F7F8FA\",\n  margin: \"20px\"\n};\nconst formItemLayout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 }\n};\nconst label = (\n  <span>\n    名称：<Balloon\n      type=\"primary\"\n      trigger={<Icon type=\"prompt\" size=\"small\" />}\n      closable={false}\n    >\n      blablablablablablablabla\n    </Balloon>\n  </span>\n);\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.field = new Field(this);\n  }\n\n  render() {\n    const { init, getValue } = this.field;\n\n    return (\n      <div>\n        <h3>标签位置</h3>\n        <Switch\n          checkedChildren=\"左\"\n          unCheckedChildren=\"上\"\n          {...init(\"labelAlign\", { initValue: false })}\n        />\n\n        <Form\n          labelAlign={!getValue(\"labelAlign\") ? \"top\" : \"left\"}\n          style={style}\n        >\n          <Row>\n            <Col>\n              <FormItem {...formItemLayout} label={label} required>\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"较长搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem {...formItemLayout} label=\"搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"较长搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem {...formItemLayout} label=\"搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"较长搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n              <FormItem {...formItemLayout} label=\"搜索名称：\">\n                <Input placeholder=\"请输入搜索名称\" />\n              </FormItem>\n            </Col>\n          </Row>\n          <Row>\n            <Col style={{ textAlign: \"right\" }}>\n              <Button type=\"primary\" style={{ marginRight: \"5px\" }}>\n                搜索\n              </Button>\n              <Button>清除条件</Button>\n            </Col>\n          </Row>\n        </Form>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n配合 `Row` `Col` 控制表单内元素布局\n标签位置：上、左\n\n"
      },
      {
        "title": "固定宽度",
        "order": "1",
        "jsx": "import { Form, Input, Button, Checkbox, Field } from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.field = new Field(this);\n  }\n\n  handleSubmit() {\n    console.log(\"收到表单值：\", this.field.getValues());\n  }\n\n  render() {\n    const init = this.field.init;\n    const formItemLayout = {\n      labelCol: {\n        fixedSpan: 10\n      },\n      wrapperCol: {\n        span: 14\n      }\n    };\n\n    return (\n      <Form direction=\"ver\" field={this.field}>\n        <FormItem label=\"用户名：\" {...formItemLayout}>\n          <p className=\"next-form-text-align\">固定名称</p>\n        </FormItem>\n        <FormItem label=\"密码：\" required {...formItemLayout}>\n          <Input\n            htmlType=\"password\"\n            {...init(\"pass\")}\n            placeholder=\"请输入密码\"\n          />\n        </FormItem>\n\n        <FormItem label=\"备注：\" {...formItemLayout} help=\"随便写点什么\">\n          <Input multiple placeholder=\"随便写\" {...init(\"remark\")} />\n        </FormItem>\n        <FormItem label=\" \" {...formItemLayout}>\n          <Checkbox {...init(\"agreement\")}>同意</Checkbox>\n        </FormItem>\n        <FormItem label=\" \" {...formItemLayout}>\n          <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>\n            确定\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n如果组件比较靠上，可以用 `class=next-form-text-align` 做调整\n拉伸浏览器的时候label宽度不变。\n\n"
      },
      {
        "title": "标签inset模式",
        "order": "4",
        "jsx": "import { Form, Input, Select } from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 20 }\n};\n\nReactDOM.render(\n  <div>\n    <h3>垂直</h3>\n\n    <Form labelAlign=\"inset\" style={{ maxWidth: \"500px\" }}>\n      <FormItem {...formItemLayout} label=\"账户：\">\n        <Input placeholder=\"请输入账户名\" id=\"userName\" name=\"userName\" />\n      </FormItem>\n\n      <FormItem {...formItemLayout} label=\"密码：\">\n        <Input\n          htmlType=\"password\"\n          placeholder=\"请输入密码\"\n          id=\"password\"\n          name=\"password\"\n        />\n      </FormItem>\n      <FormItem {...formItemLayout} label=\"密码：\" validateStatus=\"error\">\n        <Input\n          htmlType=\"password\"\n          placeholder=\"请输入密码\"\n          id=\"password\"\n          name=\"password\"\n        />\n      </FormItem>\n\n      <FormItem {...formItemLayout} label=\"大小：\">\n        <Select>\n          <div value=\"small\">small</div>\n          <div value=\"medium\">medium</div>\n          <div value=\"large\">large</div>\n        </Select>\n      </FormItem>\n    </Form>\n\n    <h2>水平</h2>\n\n    <Form labelAlign=\"inset\" direction=\"hoz\">\n      <FormItem label=\"账户：\">\n        <Input placeholder=\"请输入账户名\" id=\"userName\" name=\"userName\" />\n      </FormItem>\n\n      <FormItem label=\"密码：\">\n        <Input\n          htmlType=\"password\"\n          placeholder=\"请输入密码\"\n          id=\"password\"\n          name=\"password\"\n        />\n      </FormItem>\n      <FormItem label=\"密码：\" validateStatus=\"error\" help=\"密码不能为空\">\n        <Input\n          htmlType=\"password\"\n          placeholder=\"请输入密码\"\n          id=\"password\"\n          name=\"password\"\n        />\n      </FormItem>\n\n      <FormItem label=\"大小：\">\n        <Select style={{ width: 150 }}>\n          <div value=\"small\">small</div>\n          <div value=\"medium\">medium</div>\n          <div value=\"large\">large</div>\n        </Select>\n      </FormItem>\n    </Form>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n通过设置`labelAlign=\"inset\"` (只适用于Input、Select组件，其他组件不适用)\n\n"
      },
      {
        "title": "表单组合",
        "order": "5",
        "jsx": "import {\n  Form,\n  Input,\n  Button,\n  Checkbox,\n  Select,\n  Range,\n  Balloon,\n  DatePicker,\n  TimePicker,\n  NumberPicker,\n  Field,\n  Switch,\n  Upload,\n  Grid\n} from \"@icedesign/base\";\n\nconst { RangePicker } = DatePicker;\nconst { Row, Col } = Grid;\n\nconst FormItem = Form.Item;\n\nclass Demo extends React.Component {\n  field = new Field(this);\n\n  handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"收到表单值：\", this.field.getValues());\n    this.field.validate();\n  }\n\n  getValueFromFile(e) {\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  }\n\n  render() {\n    const init = this.field.init;\n    const formItemLayout = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 14 }\n    };\n\n    return (\n      <Form field={this.field}>\n        <FormItem label=\"密码：\" {...formItemLayout}>\n          <Balloon\n            trigger={<Input htmlType=\"password\" />}\n            align=\"r\"\n            closable={false}\n            triggerType=\"hover\"\n          >\n            input password\n          </Balloon>\n        </FormItem>\n\n        <FormItem label=\"我是标题：\" {...formItemLayout}>\n          <p className=\"next-form-text-align\">唧唧复唧唧木兰当户织呀</p>\n\n          <p className=\"next-form-text-align\">\n            <a href=\"#\">链接文字</a>\n          </p>\n        </FormItem>\n\n        <FormItem label=\"NumberPicker 数字输入框：\" {...formItemLayout}>\n          <NumberPicker\n            min={1}\n            max={10}\n            {...init(\"numberPicker\", { initValue: 3 })}\n          />\n          <span> 台机器</span>\n        </FormItem>\n\n        <FormItem label=\"Switch 开关：\" {...formItemLayout} required>\n          <Switch\n            {...init(\"switch\", { valueName: \"checked\", initValue: true })}\n          />\n        </FormItem>\n\n        <FormItem label=\"Range 滑动输入条：\" {...formItemLayout} required>\n          <Range\n            defaultValue={30}\n            scales={[0, 100]}\n            style={{ marginTop: \"10px\" }}\n            marks={[0, 100]}\n            {...init(\"range\")}\n          />\n        </FormItem>\n\n        <FormItem label=\"Select 选择器：\" {...formItemLayout} required>\n          <Select style={{ width: 200 }} {...init(\"select\")}>\n            <Option value=\"jack\">jack</Option>\n            <Option value=\"lucy\">lucy</Option>\n            <Option value=\"disabled\" disabled>\n              disabled\n            </Option>\n            <Option value=\"hugohua\">hugohua</Option>\n          </Select>\n        </FormItem>\n\n        <FormItem\n          label=\"DatePicker 日期选择框：\"\n          labelCol={{ span: 6 }}\n          required\n        >\n          <Row>\n            <FormItem style={{ marginRight: 10 }}>\n              <DatePicker {...init(\"startDate\")} />\n            </FormItem>\n            <FormItem>\n              <DatePicker {...init(\"endDate\")} />\n            </FormItem>\n          </Row>\n        </FormItem>\n\n        <FormItem\n          label=\"RangePicker 范围选择框：\"\n          labelCol={{ span: 6 }}\n          required\n        >\n          <RangePicker {...init(\"rangeDate\")} />\n        </FormItem>\n\n        <FormItem label=\"TimePicker 时间选择器：\" {...formItemLayout} required>\n          <TimePicker\n            {...init(\"time\", {\n              getValueFromEvent: time => {\n                time =\n                  time &&\n                  time.toLocaleTimeString(\"zh-CN\", {\n                    hour12: false\n                  });\n\n                return time;\n              }\n            })}\n          />\n        </FormItem>\n\n        <FormItem\n          className=\"next-form-text-align\"\n          label=\"Checkbox 多选框：\"\n          {...formItemLayout}\n        >\n          <Checkbox {...init(\"checkbox1\")}>选项一 </Checkbox>\n          <Checkbox {...init(\"checkbox2\")}>选项二 </Checkbox>\n          <Checkbox disabled {...init(\"checkbox3\")}>\n            选项三（不可选）\n          </Checkbox>\n        </FormItem>\n\n        <FormItem label=\"logo图：\" {...formItemLayout}>\n          <Upload\n            action=\"/upload.do\"\n            listType=\"text\"\n            onChange={this.handleUpload}\n            {...init(\"upload\", {\n              valueName: \"fileList\",\n              getValueFromEvent: this.getValueFromFile\n            })}\n          >\n            <Button type=\"primary\" style={{ margin: \"0 0 10px\" }}>\n              上传文件\n            </Button>\n          </Upload>\n        </FormItem>\n        <Row style={{ marginTop: 24 }}>\n          <Col offset=\"6\">\n            <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>\n              确定\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n展示和表单相关的其他组件。\n\n"
      },
      {
        "title": "Item 嵌套",
        "order": "5",
        "jsx": "import { Form, Input, Button, Field, Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nconst FormItem = Form.Item;\n\nclass Demo extends React.Component {\n  field = new Field(this);\n\n  handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"收到表单值：\", this.field.getValues());\n  }\n\n  normFile(e) {\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  }\n\n  render() {\n    const init = this.field.init;\n    const formItemLayout = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 14 }\n    };\n\n    const insetLayout = {\n      labelCol: { fixedSpan: 4 }\n    };\n\n    return (\n      <Form field={this.field}>\n        <FormItem id=\"control-input\" label=\"输入框：\" {...formItemLayout}>\n          <Row>\n            <Col>\n              <FormItem\n                label=\"内嵌模式\"\n                required={false}\n                labelAlign=\"inset\"\n                {...insetLayout}\n              >\n                <Input\n                  placeholder=\"Please enter...\"\n                  style={{ width: \"100%\" }}\n                  {...init(\"firstname\", {\n                    rules: [{ required: true, trigger: \"onBlur\" }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem\n                label=\"内嵌模式\"\n                required={false}\n                labelAlign=\"inset\"\n                {...insetLayout}\n              >\n                <Input\n                  placeholder=\"need onChange\"\n                  style={{ width: \"100%\" }}\n                  {...init(\"secondname\", {\n                    rules: [{ required: true }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n          </Row>\n        </FormItem>\n        <FormItem label=\"银行账户：\" {...formItemLayout}>\n          <Row>\n            <Col>\n              <FormItem>\n                <Input\n                  {...init(\"A\", {\n                    rules: [{ required: true, trigger: \"onBlur\" }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem>\n                <Input\n                  {...init(\"B\", {\n                    rules: [{ required: true, trigger: \"onBlur\" }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem>\n                <Input\n                  {...init(\"C\", {\n                    rules: [{ required: true, trigger: \"onBlur\" }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n            <Col>\n              <FormItem>\n                <Input\n                  {...init(\"D\", {\n                    rules: [{ required: true, trigger: \"onBlur\" }]\n                  })}\n                />\n              </FormItem>\n            </Col>\n          </Row>\n        </FormItem>\n\n        <Row style={{ marginTop: 24 }}>\n          <Col offset=\"6\">\n            <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>\n              确定\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\nFormItem嵌套\n\n"
      },
      {
        "title": "回车提交",
        "order": "7",
        "jsx": "import { Form, Input, Button } from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\n\nclass Demo extends React.Component {\n  onSubmit(e) {\n    e.preventDefault();\n    console.log(\"onsubmit\");\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.onSubmit.bind(this)}>\n        <FormItem>\n          <Input placeholder=\"回车也能触发onSubmit\" />\n        </FormItem>\n        <Button htmlType=\"submit\">submit</Button>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n需要Form里面有 htmlType=\"submit\" 的元素\n\n"
      },
      {
        "title": "手动设置错误",
        "order": "21",
        "jsx": "import { Form, Input, Button, Field } from \"@icedesign/base\";\nimport { combineReducers, createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\n\nconst initState = {\n  values: { email: \"\", username: \"xiachi\" },\n  errors: {}\n};\n\nfunction formReducer(state = initState, action) {\n  switch (action.type) {\n    case \"save_fields\":\n      return {\n        ...state,\n        values: {\n          ...state.values,\n          ...action.values\n        }\n      };\n    case \"set_errors\":\n      return {\n        ...state,\n        errors: {\n          ...state.errors,\n          ...action.errors\n        }\n      };\n    default:\n      return state;\n  }\n}\n\nclass FormDemo extends React.Component {\n  static propTypes = {\n    formData: React.PropTypes.object,\n    email: React.PropTypes.object,\n    dispatch: React.PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.field = new Field(this, {\n      onChange: (name, value) => {\n        console.log(\"onChange\", name, value, this.field.getError(name));\n        this.props.dispatch({\n          type: \"save_fields\",\n          values: {\n            [name]: value\n          }\n        });\n        this.props.dispatch({\n          type: \"set_errors\",\n          errors: {\n            [name]: this.field.getError(name)\n          }\n        });\n      }\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.field.setValues(nextProps.formData.values);\n    this.field.setErrors(nextProps.formData.errors);\n  }\n\n  setEmail() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      values: {\n        email: \"qq@gmail.com\"\n      }\n    });\n  }\n\n  setName() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      values: {\n        username: \"frank\"\n      }\n    });\n  }\n\n  setError() {\n    this.props.dispatch({\n      type: \"set_errors\",\n      errors: {\n        email: \"来自远程的错误消息\"\n      }\n    });\n  }\n\n  setErrors() {\n    this.props.dispatch({\n      type: \"set_errors\",\n      errors: {\n        email: \"来自远程的错误消息A\",\n        username: \"来自远程的错误消息B\"\n      }\n    });\n  }\n\n  render() {\n    const init = this.field.init;\n    return (\n      <Form field={this.field}>\n        <Form.Item>\n          <Input\n            {...init(\"email\", {\n              initValue: this.props.formData.values.email,\n              rules: [{ required: true, type: \"email\" }]\n            })}\n          />\n        </Form.Item>\n        <Form.Item help=\"\">\n          <Input\n            {...init(\"username\", {\n              initValue: this.props.formData.values.username,\n              rules: [{ required: true, message: \"不能为空\" }]\n            })}\n          />\n          <p style={{ color: \"blue\" }}>{this.field.getError(\"username\")}</p>\n        </Form.Item>\n\n        <p>email: {this.props.email && this.props.email.value}</p>\n        <Button onClick={this.setEmail.bind(this)}>setEmail</Button>\n        <Button onClick={this.setName.bind(this)}>setName</Button>\n        <Button onClick={this.setError.bind(this)}>setError</Button>\n        <Button onClick={this.setErrors.bind(this)}>setErrors</Button>\n        <Button onClick={() => this.field.reset()}>reset</Button>\n      </Form>\n    );\n  }\n}\n\nconst ReduxFormDemo = connect(state => {\n  return {\n    formData: state.formReducer\n  };\n})(FormDemo);\n\nconst store = createStore(\n  combineReducers({\n    formReducer\n  })\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      <ReduxFormDemo />\n    </div>\n  </Provider>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n如果需要自己控制错误位置，可以让`help=\"\"` 然后自己放置展示错误的地方\n在`redux`中结合 `componentWillReceiveProps` `setErrors` 使用\n\n"
      },
      {
        "title": "配合redux使用",
        "order": "20",
        "jsx": "import { Form, Input, Button, Checkbox, Field } from \"@icedesign/base\";\nimport { combineReducers, createStore } from \"redux\";\nimport { Provider, connect } from \"react-redux\";\n\nconst CheckboxGroup = Checkbox.Group;\nfunction formReducer(\n  state = { email: \"\", username: \"xiachi\", fruit: [\"apple\"] },\n  action\n) {\n  switch (action.type) {\n    case \"save_fields\":\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n}\n\nclass FormDemo extends React.Component {\n  static propTypes = {\n    formData: React.PropTypes.object,\n    email: React.PropTypes.object,\n    dispatch: React.PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    this.field = new Field(this, {\n      onChange: (name, value) => {\n        console.log(\"onChange\", name, value, this.field.getValues());\n        this.props.dispatch({\n          type: \"save_fields\",\n          payload: {\n            [name]: value\n          }\n        });\n        /* 方法2, 所有值全部更新\n                 this.props.dispatch({\n                 type: 'save_fields',\n                 payload: this.field.getValues()\n                 });\n                 */\n      }\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.field.setValues(nextProps.formData);\n  }\n\n  setEmail() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      payload: {\n        email: \"qq@gmail.com\"\n      }\n    });\n  }\n\n  setName() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      payload: {\n        username: \"frank\"\n      }\n    });\n  }\n\n  setGroup() {\n    this.props.dispatch({\n      type: \"save_fields\",\n      payload: {\n        fruit: [\"pear\"]\n      }\n    });\n  }\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <Form field={this.field}>\n        <Form.Item>\n          <Input\n            {...init(\"email\", {\n              rules: [{ required: true, message: \"不能为空!\" }]\n            })}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Input\n            defaultValue={this.props.formData.username}\n            {...init(\"username\", {\n              rules: [{ required: true, message: \"不能为空\" }]\n            })}\n          />\n        </Form.Item>\n        <Form.Item>\n          <CheckboxGroup\n            dataSource={[\n              { label: \"苹果\", value: \"apple\" },\n              { label: \"梨\", value: \"pear\" }\n            ]}\n            defaultValue={this.props.formData.fruit}\n            {...init(\"fruit\", {\n              rules: [{ required: true, type: \"array\", message: \"不能为空\" }]\n            })}\n          />\n        </Form.Item>\n\n        <p>email: {this.props.email && this.props.email.value}</p>\n        <Button onClick={this.setEmail.bind(this)}>setEmail</Button>\n        <Button onClick={this.setName.bind(this)}>setName</Button>\n        <Button onClick={this.setGroup.bind(this)}>setGroup</Button>\n      </Form>\n    );\n  }\n}\n\nconst ReduxFormDemo = connect(state => {\n  return {\n    formData: state.formReducer\n  };\n})(FormDemo);\n\nconst store = createStore(\n  combineReducers({\n    formReducer\n  })\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      <ReduxFormDemo />\n    </div>\n  </Provider>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n在`redux`中结合 `componentWillReceiveProps` `setValues` 使用\n\n"
      },
      {
        "title": "尺寸+标签",
        "order": "2",
        "jsx": "import { Form, Input, Select, Field } from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\nconst formItemLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 20 }\n};\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.field = new Field(this);\n  }\n\n  render() {\n    const { init, getValue } = this.field;\n\n    return (\n      <div>\n        <Form direction=\"hoz\" className=\"demo-ctl\" field={this.field}>\n          <FormItem label=\"大小:\">\n            <Select {...init(\"size\", { initValue: \"medium\" })}>\n              <div value=\"small\">small</div>\n              <div value=\"medium\">medium</div>\n              <div value=\"large\">large</div>\n            </Select>\n          </FormItem>\n          <FormItem label=\"标签对齐方式:\" help=\"inset只能用于 Input、Select\">\n            <Select {...init(\"labelAlign\", { initValue: \"left\" })}>\n              <div value=\"top\">标签在上 top</div>\n              <div value=\"left\">标签在左 left</div>\n              <div value=\"inset\">标签在内 inset</div>\n            </Select>\n          </FormItem>\n          <FormItem label=\"标签左右对齐方式:\">\n            <Select {...init(\"labelTextAlign\")}>\n              <div value=\"\">系统自动</div>\n              <div value=\"left\">left</div>\n              <div value=\"right\">right</div>\n            </Select>\n          </FormItem>\n        </Form>\n\n        <h3>垂直</h3>\n\n        <Form\n          field={this.field}\n          size={getValue(\"size\")}\n          labelAlign={getValue(\"labelAlign\")}\n          labelTextAlign={getValue(\"labelTextAlign\")}\n          style={{ maxWidth: \"500px\" }}\n        >\n          <FormItem {...formItemLayout} label=\"账户：\">\n            <Input placeholder=\"请输入账户名\" id=\"userName\" name=\"userName\" />\n          </FormItem>\n\n          <FormItem {...formItemLayout} required label=\"密码：\">\n            <Input\n              htmlType=\"password\"\n              placeholder=\"请输入密码\"\n              id=\"password\"\n              name=\"password\"\n            />\n          </FormItem>\n\n          <FormItem {...formItemLayout} label=\"密码：\" validateStatus=\"error\">\n            <Input\n              htmlType=\"password\"\n              placeholder=\"请输入密码\"\n              id=\"password\"\n              name=\"password\"\n            />\n          </FormItem>\n\n          <FormItem {...formItemLayout} label=\"大小：\">\n            <Select style={{ width: \"100%\" }} {...init(\"size\")}>\n              <div value=\"small\">small</div>\n              <div value=\"medium\">medium</div>\n              <div value=\"large\">large</div>\n            </Select>\n          </FormItem>\n        </Form>\n\n        <h3>水平</h3>\n\n        <Form\n          size={getValue(\"size\")}\n          direction=\"hoz\"\n          labelAlign={getValue(\"labelAlign\")}\n        >\n          <FormItem label=\"账户：\">\n            <Input placeholder=\"请输入账户名\" id=\"userName\" name=\"userName\" />\n          </FormItem>\n\n          <FormItem label=\"密码：\">\n            <Input\n              htmlType=\"password\"\n              placeholder=\"请输入密码\"\n              id=\"password\"\n              name=\"password\"\n            />\n          </FormItem>\n          <FormItem label=\"密码：\" validateStatus=\"error\">\n            <Input\n              htmlType=\"password\"\n              placeholder=\"请输入密码\"\n              id=\"password\"\n              name=\"password\"\n            />\n          </FormItem>\n\n          <FormItem label=\"大小：\">\n            <Select style={{ width: \"100%\" }} {...init(\"size\")}>\n              <div value=\"small\">small</div>\n              <div value=\"medium\">medium</div>\n              <div value=\"large\">large</div>\n            </Select>\n          </FormItem>\n        </Form>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".demo-ctl {\n  background-color: #f1f1f1;\n  padding: 10.0px;\n  color: #0a7ac3;\n  border-left: 4.0px solid #0d599a;\n}\n",
        "body": "\n`labelTextAlign` 文字左右对齐方式\n`labelAlign` label方位\n`size` 会强制设置 `FormItem` 下的所有组件的size\n\n"
      },
      {
        "title": "校验",
        "order": "11",
        "jsx": "import { Form, Input, Button, Radio, Field } from \"@icedesign/base\";\n\nconst { Item: FormItem } = Form;\nconst { Group: RadioGroup } = Radio;\n\nclass BasicDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.field = new Field(this);\n  }\n\n  handleReset(e) {\n    e.preventDefault();\n    this.field.reset();\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.field.validate((errors, values) => {\n      if (errors) {\n        console.log(\"Errors in form!!!\");\n        return;\n      }\n      console.log(\"Submit!!!\");\n      console.log(values);\n    });\n  }\n\n  userExists(rule, value, callback) {\n    if (!value) {\n      callback();\n    } else {\n      setTimeout(() => {\n        if (value === \"frank\") {\n          callback([new Error(\"抱歉，该用户名已被占用。\")]);\n        } else {\n          callback();\n        }\n      }, 1000);\n    }\n  }\n\n  checkPass(rule, value, callback) {\n    const { validate } = this.field;\n    if (value) {\n      validate([\"rePasswd\"]);\n    }\n    callback();\n  }\n\n  checkPass2(rule, value, callback) {\n    const { getValue } = this.field;\n    if (value && value !== getValue(\"passwd\")) {\n      callback(\"两次输入密码不一致！\");\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { init, getError, getState } = this.field;\n    const formItemLayout = {\n      labelCol: {\n        span: 6\n      },\n      wrapperCol: {\n        span: 14\n      }\n    };\n    return (\n      <Form field={this.field}>\n        <FormItem\n          label=\"用户名：\"\n          {...formItemLayout}\n          hasFeedback\n          help={\n            getState(\"name\") === \"validating\"\n              ? \"校验中...\"\n              : (getError(\"name\") || []).join(\", \")\n          }\n        >\n          <Input\n            maxLength={20}\n            hasLimitHint\n            placeholder=\"实时校验，输入 frank 看看\"\n            {...init(\"name\", {\n              rules: [\n                { required: true, min: 5, message: \"用户名至少为 5 个字符\" },\n                { validator: this.userExists }\n              ]\n            })}\n          />\n        </FormItem>\n\n        <FormItem label=\"邮箱：\" {...formItemLayout} hasFeedback>\n          <Input\n            type=\"email\"\n            placeholder=\"onBlur 与 onChange 相结合\"\n            {...init(\"email\", {\n              rules: [\n                { required: true, trigger: \"onBlur\" },\n                {\n                  type: \"email\",\n                  message: <span>请输入正确的邮箱地址</span>,\n                  trigger: [\"onBlur\", \"onChange\"]\n                }\n              ]\n            })}\n          />\n        </FormItem>\n\n        <FormItem label=\"密码：\" {...formItemLayout} hasFeedback>\n          <Input\n            htmlType=\"password\"\n            {...init(\"passwd\", {\n              rules: [\n                { required: true, whitespace: true, message: \"请填写密码\" },\n                { validator: this.checkPass.bind(this) }\n              ]\n            })}\n          />\n        </FormItem>\n\n        <FormItem label=\"确认密码：\" {...formItemLayout} hasFeedback>\n          <Input\n            htmlType=\"password\"\n            placeholder=\"两次输入密码保持一致\"\n            {...init(\"rePasswd\", {\n              rules: [\n                {\n                  required: true,\n                  whitespace: true,\n                  message: \"请再次输入密码\"\n                },\n                {\n                  validator: this.checkPass2.bind(this)\n                }\n              ]\n            })}\n          />\n        </FormItem>\n\n        <FormItem label=\"性别：\" hasFeedback {...formItemLayout}>\n          <RadioGroup\n            {...init(\"radio\", {\n              rules: [{ required: true, message: \"请选择您的性别\" }]\n            })}\n          >\n            <Radio value=\"male\">男</Radio>\n            <Radio value=\"female\">女</Radio>\n          </RadioGroup>\n        </FormItem>\n\n        <FormItem label=\"备注：\" {...formItemLayout}>\n          <Input\n            multiple\n            maxLength={20}\n            hasLimitHint\n            placeholder=\"随便写\"\n            {...init(\"textarea\", {\n              rules: [{ required: true, message: \"真的不打算写点什么吗？\" }]\n            })}\n          />\n        </FormItem>\n\n        <FormItem wrapperCol={{ offset: 6 }}>\n          <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>\n            确定\n          </Button>\n          &nbsp;&nbsp;&nbsp;\n          <Button onClick={this.handleReset.bind(this)}>重置</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<BasicDemo />, mountNode);\n\n",
        "css": "",
        "body": "\n基本的表单校验例子。\n\n"
      },
      {
        "title": "自定义校验规则",
        "order": "13",
        "jsx": "import { Form, Input, Button, Dialog, Field, Grid } from \"@icedesign/base\";\nimport classNames from \"classnames\";\n\nconst { Row, Col } = Grid;\n\nconst FormItem = Form.Item;\n\nfunction noop() {\n  return false;\n}\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.field = new Field(this);\n    this.state = {\n      passBarShow: false, // 是否显示密码强度提示条\n      rePassBarShow: false,\n      passStrength: \"L\", // 密码强度\n      rePassStrength: \"L\",\n      visible: false\n    };\n  }\n\n  handleSubmit() {\n    this.field.validate((errors, values) => {\n      if (errors) {\n        console.log(\"Errors in form!!!\");\n        return;\n      }\n      console.log(\"Submit!!!\");\n      console.log(values);\n      this.setState({ visible: false });\n    });\n  }\n\n  getPassStrenth(value, type) {\n    if (value) {\n      let strength;\n      // 密码强度的校验规则自定义，这里只是做个简单的示例\n      if (value.length < 6) {\n        strength = \"L\";\n      } else if (value.length <= 9) {\n        strength = \"M\";\n      } else {\n        strength = \"H\";\n      }\n      if (type === \"pass\") {\n        this.setState({ passBarShow: true, passStrength: strength });\n      } else {\n        this.setState({ rePassBarShow: true, rePassStrength: strength });\n      }\n    } else if (type === \"pass\") {\n      this.setState({ passBarShow: false });\n    } else {\n      this.setState({ rePassBarShow: false });\n    }\n  }\n\n  showDialog() {\n    this.setState({ visible: true });\n  }\n\n  hideDialog() {\n    this.setState({ visible: false });\n  }\n\n  checkPass(rule, value, callback) {\n    const field = this.field;\n    this.getPassStrenth(value, \"pass\");\n\n    if (field.getValue(\"pass\")) {\n      field.validate([\"rePass\"], { force: true });\n    }\n\n    callback();\n  }\n\n  checkPass2(rule, value, callback) {\n    const field = this.field;\n    this.getPassStrenth(value, \"rePass\");\n\n    if (value && value !== field.getValue(\"pass\")) {\n      callback(\"两次输入密码不一致！\");\n    } else {\n      callback();\n    }\n  }\n\n  renderPassStrengthBar(type) {\n    const strength =\n      type === \"pass\" ? this.state.passStrength : this.state.rePassStrength;\n    const classSet = classNames({\n      \"pwd-strength\": true,\n      \"pwd-strength-low\": strength === \"L\",\n      \"pwd-strength-medium\": strength === \"M\",\n      \"pwd-strength-high\": strength === \"H\"\n    });\n    const level = {\n      L: \"低\",\n      M: \"中\",\n      H: \"高\"\n    };\n\n    return (\n      <div>\n        <ul className={classSet}>\n          <li className=\"pwd-strength-item pwd-strength-item-1\" />\n          <li className=\"pwd-strength-item pwd-strength-item-2\" />\n          <li className=\"pwd-strength-item pwd-strength-item-3\" />\n          <span>{level[strength]}</span>\n        </ul>\n      </div>\n    );\n  }\n\n  render() {\n    const init = this.field.init;\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showDialog.bind(this)}>\n          修改密码\n        </Button>\n        <Dialog\n          title=\"修改密码\"\n          visible={this.state.visible}\n          onOk={this.handleSubmit.bind(this)}\n          onCancel={this.hideDialog.bind(this)}\n          onClose={this.hideDialog.bind(this)}\n        >\n          <Form field={this.field} style={{ width: 500 }}>\n            <Row>\n              <Col span=\"16\">\n                <FormItem\n                  label=\"密码：\"\n                  labelCol={{ span: 10 }}\n                  wrapperCol={{ span: 14 }}\n                >\n                  <Input\n                    htmlType=\"password\"\n                    {...init(\"pass\", {\n                      rules: [\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"请填写密码\"\n                        },\n                        { validator: this.checkPass.bind(this) }\n                      ]\n                    })}\n                    onContextMenu={noop}\n                    onPaste={noop}\n                    onCopy={noop}\n                    onCut={noop}\n                    autoComplete=\"off\"\n                    id=\"pass\"\n                  />\n                </FormItem>\n              </Col>\n              <Col span=\"8\">\n                {this.state.passBarShow\n                  ? this.renderPassStrengthBar(\"pass\")\n                  : null}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col span=\"16\">\n                <FormItem\n                  label=\"确认密码：\"\n                  labelCol={{ span: 10 }}\n                  wrapperCol={{ span: 14 }}\n                >\n                  <Input\n                    htmlType=\"password\"\n                    {...init(\"rePass\", {\n                      rules: [\n                        {\n                          required: true,\n                          whitespace: true,\n                          message: \"请再次输入密码\"\n                        },\n                        {\n                          validator: this.checkPass2.bind(this)\n                        }\n                      ]\n                    })}\n                    onContextMenu={noop}\n                    onPaste={noop}\n                    onCopy={noop}\n                    onCut={noop}\n                    autoComplete=\"off\"\n                    id=\"rePass\"\n                  />\n                </FormItem>\n              </Col>\n              <Col span=\"8\">\n                {this.state.rePassBarShow\n                  ? this.renderPassStrengthBar(\"rePass\")\n                  : null}\n              </Col>\n            </Row>\n          </Form>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".pwd-strength {\n  display: inline-block;\n  margin-left: 8px;\n  margin-top: 0;\n  line-height: 32px;\n  height: 32px;\n  vertical-align: middle;\n}\n\n.pwd-strength-item {\n  float: left;\n  margin-right: 1px;\n  margin-top: 12px;\n  width: 19px;\n  height: 8px;\n  line-height: 8px;\n  list-style: none;\n  background-color: #f3f3f3;\n  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n}\n\n.pwd-strength-item-1 {\n  border-top-left-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n\n.pwd-strength-item-2 {\n  width: 20px;\n}\n\n.pwd-strength-item-3 {\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n  margin-right: 8px;\n}\n\n.pwd-strength-low .pwd-strength-item-1, .pwd-strength-medium .pwd-strength-item-1, .pwd-strength-high .pwd-strength-item-1 {\n  background-color: #FAC450;\n}\n\n.pwd-strength-medium .pwd-strength-item-2, .pwd-strength-high .pwd-strength-item-2 {\n  background-color: rgba(135, 208, 104, .6);\n  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#9987D068,endColorstr=#9987D068);\n}\n\n.pwd-strength-high .pwd-strength-item-3 {\n  background-color: #87D068;\n}\n",
        "body": "\n这里使用了 validation 的 `validate(fields, callback)`  方法，在对第一次输入的密码进行校验时会触发二次密码的校验。\n密码校验实例。\n\n"
      },
      {
        "title": "校验其他组件",
        "order": "12",
        "jsx": "import {\n  Form,\n  Button,\n  Radio,\n  Select,\n  DatePicker,\n  NumberPicker,\n  Field\n} from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.field = new Field(this);\n  }\n\n  handleReset(e) {\n    e.preventDefault();\n    this.field.reset();\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.field.validate((errors, values) => {\n      if (errors) {\n        console.log(\"Errors in form!!!\");\n        return;\n      }\n      console.log(\"Submit!!!\");\n      console.log(values);\n    });\n  }\n\n  checkBirthday(rule, value, callback) {\n    console.log(value);\n    if (value && value.getTime() >= Date.now()) {\n      callback(new Error(\"你不可能在未来出生吧!\"));\n    } else {\n      callback();\n    }\n  }\n\n  checkPrime(rule, value, callback) {\n    if (value !== 11) {\n      callback(new Error(\"8~12之间的质数明明是11啊!\"));\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const init = this.field.init;\n\n    const formItemLayout = {\n      labelCol: {\n        span: 6\n      },\n      wrapperCol: {\n        span: 14\n      }\n    };\n\n    return (\n      <Form field={this.field}>\n        <FormItem label=\"国籍：\" {...formItemLayout}>\n          <Select\n            placeholder=\"请选择国家\"\n            style={{ width: 200 }}\n            {...init(\"select\", {\n              rules: [{ required: true, message: \"请选择您的国籍\" }]\n            })}\n          >\n            <li value=\"china\">中国</li>\n            <li value=\"use\">美国</li>\n            <li value=\"japan\">日本</li>\n            <li value=\"korean\">韩国</li>\n            <li value=\"Thailand\">泰国</li>\n          </Select>\n        </FormItem>\n\n        <FormItem label=\"喜欢的颜色：\" {...formItemLayout}>\n          <Select\n            multiple\n            placeholder=\"请选择颜色\"\n            style={{ width: 200 }}\n            {...init(\"multiSelect\", {\n              rules: [{ required: true, message: \"请选择您喜欢的颜色\" }]\n            })}\n          >\n            <li value=\"red\">红色</li>\n            <li value=\"orange\">橙色</li>\n            <li value=\"yellow\">黄色</li>\n            <li value=\"green\">绿色</li>\n            <li value=\"blue\">蓝色</li>\n          </Select>\n        </FormItem>\n\n        <FormItem label=\"性别：\" hasFeedback {...formItemLayout}>\n          <RadioGroup\n            {...init(\"radio\", {\n              rules: [{ required: true, message: \"请选择您的性别\" }]\n            })}\n          >\n            <Radio value=\"male\">男</Radio>\n            <Radio value=\"female\">女</Radio>\n          </RadioGroup>\n        </FormItem>\n\n        <FormItem label=\"生日：\" {...formItemLayout}>\n          <DatePicker\n            {...init(\"birthday\", {\n              rules: [\n                {\n                  required: true,\n                  type: \"date\",\n                  message: \"你的生日是什么呢?\"\n                },\n                {\n                  validator: this.checkBirthday\n                }\n              ]\n            })}\n          />\n        </FormItem>\n\n        <FormItem label=\"8~12间的质数：\" {...formItemLayout}>\n          <NumberPicker\n            min={8}\n            max={12}\n            {...init(\"primeNumber\", {\n              rules: [{ validator: this.checkPrime }]\n            })}\n          />\n        </FormItem>\n\n        <FormItem wrapperCol={{ span: 16, offset: 6 }}>\n          <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>\n            确定\n          </Button>\n          &nbsp;&nbsp;&nbsp;\n          <Button onClick={this.handleReset.bind(this)}>重置</Button>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n`Select` `Radio` `DatePicker` `NumberPicker` 。\n提供以下组件表单域的校验。\n\n"
      },
      {
        "title": "校验提示",
        "order": "10",
        "jsx": "import {\n  Form,\n  Input,\n  DatePicker,\n  Radio,\n  NumberPicker,\n  Select\n} from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nconst formItemLayout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 14\n  }\n};\n\nReactDOM.render(\n  <Form>\n    <FormItem\n      label=\"失败校验：\"\n      {...formItemLayout}\n      validateStatus=\"error\"\n      help=\"请输入数字和字母组合\"\n    >\n      <Input defaultValue=\"无效选择\" id=\"error\" />\n    </FormItem>\n\n    <FormItem\n      label=\"校验中：\"\n      {...formItemLayout}\n      hasFeedback\n      validateStatus=\"loading\"\n      help=\"信息审核中...\"\n    >\n      <Input defaultValue=\"我是被校验的内容\" id=\"loading\" />\n    </FormItem>\n\n    <FormItem\n      label=\"成功校验：\"\n      {...formItemLayout}\n      hasFeedback\n      validateStatus=\"success\"\n    >\n      <Input defaultValue=\"我是正文\" id=\"success\" />\n    </FormItem>\n\n    <FormItem\n      label=\"失败校验：\"\n      {...formItemLayout}\n      hasFeedback\n      validateStatus=\"error\"\n      help=\"请输入数字和字母组合\"\n    >\n      <Input defaultValue=\"无效选择\" id=\"error\" />\n    </FormItem>\n\n    <FormItem\n      label=\"Datepicker：\"\n      {...formItemLayout}\n      validateStatus=\"error\"\n      help=\"请选择正确日期\"\n    >\n      <DatePicker />\n    </FormItem>\n\n    <FormItem label=\"性别：\" validateStatus=\"success\" {...formItemLayout}>\n      <RadioGroup>\n        <Radio value=\"male\">男</Radio>\n        <Radio value=\"female\">女</Radio>\n      </RadioGroup>\n    </FormItem>\n\n    <FormItem\n      label=\"年龄：\"\n      validateStatus=\"error\"\n      {...formItemLayout}\n      help=\"请选择国家\"\n    >\n      <Select placeholder=\"请选择国家\">\n        <li value=\"china\">中国</li>\n        <li value=\"use\">美国</li>\n        <li value=\"japan\">日本</li>\n        <li value=\"korean\">韩国</li>\n        <li value=\"Thailand\">泰国</li>\n      </Select>\n    </FormItem>\n\n    <FormItem label=\"国家：\" validateStatus=\"error\" {...formItemLayout}>\n      <NumberPicker />\n    </FormItem>\n  </Form>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n**注意**: 反馈图标只对 `<Input />` 有效。\n如果是  `<Input>` 组件, 可在`<FormItem>`上面添加 `hasFeedback` 控制图标的展示\n为 `<FormItem>` 定义 `validateStatus` 属性控制三种校验状态。\n\n"
      }
    ]
  },
  {
    "name": "Grid",
    "category": "Components",
    "title": "栅格",
    "type": "布局",
    "importStatement": "import { Grid } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 基本使用\n\n此栅格系统提供了320，480，720, 990，1200，1500等几乎所有主流分辨率场景的响应规则。<br>\n响应式栅格采用24列栅格体系和5分比实现，以满足2，3，4，5，6分比布局等多种情况。<br>\n固定栅格采用20px宽度作为单位栅格， 推荐使用9，10，12，14，16，18，24，但同时也提供了从1到30的所有栅格，也可根据需求定制固定栅格列。<br>\n响应式断点阈值为：xss(320px), xs(480px), s(720px), m(990px), l(1200px), xl(1500px)。<br />\n主要使用Flex实现，对IE9-的兼容通过`display:table;`实现，但IE9-下仅支持基本的响应式布局（详情请参考API和DEMO的说明）。\n\n",
    "propsSchema": {
      "name": "Grid",
      "subComponents": [
        {
          "name": "Row",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "行内容",
              "docblock": "行内容"
            },
            "type": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "string"
                    }
                  }
                ]
              },
              "required": false,
              "description": "布局方式 <br><br>**可选值**:<br>'fluid'(流体布局，仅设置最大宽度，宽度为各断点值，两侧根据分辨率情况自动留白)<br>'fixed'(固定宽度布局)<br>'wrap'(单行模式，列在行中宽度溢出后换行)<br>'no-wrap'(单行模式，列在行中宽度溢出后不换行)<br>'no-padding'(行边距以及所有列间距都为0)<br>'across'(通栏模式, 行边距为0)<br>'fixed'/'fluid', 'wrap'/'no-wrap', 'no-padding', 'across'可组合使用，例如: ['fixed', 'wrap', 'no-padding', 'across']",
              "docblock": "布局方式 <br><br>**可选值**:<br>'fluid'(流体布局，仅设置最大宽度，宽度为各断点值，两侧根据分辨率情况自动留白)<br>'fixed'(固定宽度布局)<br>'wrap'(单行模式，列在行中宽度溢出后换行)<br>'no-wrap'(单行模式，列在行中宽度溢出后不换行)<br>'no-padding'(行边距以及所有列间距都为0)<br>'across'(通栏模式, 行边距为0)<br>'fixed'/'fluid', 'wrap'/'no-wrap', 'no-padding', 'across'可组合使用，例如: ['fixed', 'wrap', 'no-padding', 'across']\n@default 默认布局方式为 display:flex;width:100%;，两侧有边距留白。",
              "defaultValue": {
                "value": "默认布局方式为 display:flex;width:100%;，两侧有边距留白。",
                "computed": false
              }
            },
            "fixedWidth": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'xxs'",
                    "computed": false,
                    "description": "320px"
                  },
                  {
                    "value": "'xs'",
                    "computed": false,
                    "description": "480px"
                  },
                  {
                    "value": "'s'",
                    "computed": false,
                    "description": "720px"
                  },
                  {
                    "value": "'m'",
                    "computed": false,
                    "description": "990px"
                  },
                  {
                    "value": "'l'",
                    "computed": false,
                    "description": "1200px"
                  },
                  {
                    "value": "'xl'",
                    "computed": false,
                    "description": "1500px"
                  }
                ]
              },
              "required": false,
              "description": "固定宽度布局，指定固定宽度值后不再受断点值影响而变动",
              "docblock": "固定宽度布局，指定固定宽度值后不再受断点值影响而变动\n@enumdesc 320px, 480px, 720px, 990px, 1200px, 1500px",
              "value": [
                {
                  "value": "'xxs'",
                  "computed": false,
                  "description": "320px"
                },
                {
                  "value": "'xs'",
                  "computed": false,
                  "description": "480px"
                },
                {
                  "value": "'s'",
                  "computed": false,
                  "description": "720px"
                },
                {
                  "value": "'m'",
                  "computed": false,
                  "description": "990px"
                },
                {
                  "value": "'l'",
                  "computed": false,
                  "description": "1200px"
                },
                {
                  "value": "'xl'",
                  "computed": false,
                  "description": "1500px"
                }
              ]
            },
            "align": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'top'",
                    "computed": false,
                    "description": "顶部对齐"
                  },
                  {
                    "value": "'center'",
                    "computed": false,
                    "description": "居中对齐"
                  },
                  {
                    "value": "'bottom'",
                    "computed": false,
                    "description": "底部对齐"
                  },
                  {
                    "value": "'baseline'",
                    "computed": false,
                    "description": "第一行文字基线对齐"
                  },
                  {
                    "value": "'stretch'",
                    "computed": false,
                    "description": "未设置高度或设为auto，将占满整个容器的高度，另还需手动设置 width:100%"
                  }
                ]
              },
              "required": false,
              "description": "(不支持IE9及以下浏览器)多列垂直方向对齐方式",
              "docblock": "(不支持IE9及以下浏览器)多列垂直方向对齐方式\n@enumdesc 顶部对齐, 居中对齐, 底部对齐, 第一行文字基线对齐, 未设置高度或设为auto，将占满整个容器的高度，另还需手动设置 width:100%\n@default 'stretch'",
              "value": [
                {
                  "value": "'top'",
                  "computed": false,
                  "description": "顶部对齐"
                },
                {
                  "value": "'center'",
                  "computed": false,
                  "description": "居中对齐"
                },
                {
                  "value": "'bottom'",
                  "computed": false,
                  "description": "底部对齐"
                },
                {
                  "value": "'baseline'",
                  "computed": false,
                  "description": "第一行文字基线对齐"
                },
                {
                  "value": "'stretch'",
                  "computed": false,
                  "description": "未设置高度或设为auto，将占满整个容器的高度，另还需手动设置 width:100%"
                }
              ],
              "defaultValue": {
                "value": "'stretch'",
                "computed": false
              }
            },
            "justify": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'start'",
                    "computed": false,
                    "description": "左对齐"
                  },
                  {
                    "value": "'center'",
                    "computed": false,
                    "description": "居中对齐"
                  },
                  {
                    "value": "'end'",
                    "computed": false,
                    "description": "右对齐"
                  },
                  {
                    "value": "'space-between'",
                    "computed": false,
                    "description": "两端对齐，列之间间距相等"
                  },
                  {
                    "value": "'space-around'",
                    "computed": false,
                    "description": "每列具有相同的左右间距，行两端间距是列间距的二分之一"
                  }
                ]
              },
              "required": false,
              "description": "(不支持IE9及以下浏览器)行内具有多余空间时的布局方式",
              "docblock": "(不支持IE9及以下浏览器)行内具有多余空间时的布局方式\n@enumdesc 左对齐, 居中对齐, 右对齐, 两端对齐，列之间间距相等, 每列具有相同的左右间距，行两端间距是列间距的二分之一\n@default 'start'",
              "value": [
                {
                  "value": "'start'",
                  "computed": false,
                  "description": "左对齐"
                },
                {
                  "value": "'center'",
                  "computed": false,
                  "description": "居中对齐"
                },
                {
                  "value": "'end'",
                  "computed": false,
                  "description": "右对齐"
                },
                {
                  "value": "'space-between'",
                  "computed": false,
                  "description": "两端对齐，列之间间距相等"
                },
                {
                  "value": "'space-around'",
                  "computed": false,
                  "description": "每列具有相同的左右间距，行两端间距是列间距的二分之一"
                }
              ],
              "defaultValue": {
                "value": "'start'",
                "computed": false
              }
            }
          },
          "methods": [],
          "order": 1
        },
        {
          "name": "Col",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "列内容",
              "docblock": "列内容"
            },
            "span": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24",
              "docblock": "列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24"
            },
            "fixedSpan": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "固定列宽度，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30",
              "docblock": "固定列宽度，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30"
            },
            "offset": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "（不支持IE9及以下浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24",
              "docblock": "（不支持IE9及以下浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24"
            },
            "fixedOffset": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              },
              "required": false,
              "description": "（不支持IE9及以下浏览器）固定列偏移，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30",
              "docblock": "（不支持IE9及以下浏览器）固定列偏移，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30"
            },
            "align": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'top'",
                    "computed": false
                  },
                  {
                    "value": "'center'",
                    "computed": false
                  },
                  {
                    "value": "'bottom'",
                    "computed": false
                  },
                  {
                    "value": "'baseline'",
                    "computed": false
                  },
                  {
                    "value": "'stretch'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "(不支持IE9及以下浏览器)多列垂直方向对齐方式，可覆盖Row的align属性",
              "docblock": "(不支持IE9及以下浏览器)多列垂直方向对齐方式，可覆盖Row的align属性"
            },
            "hidden": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "bool"
                  },
                  {
                    "name": "string"
                  },
                  {
                    "name": "array"
                  }
                ]
              },
              "required": false,
              "description": "列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏）",
              "docblock": "列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏）"
            },
            "xxs": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": ">=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
              "docblock": ">=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"
            },
            "xs": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": ">=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
              "docblock": ">=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"
            },
            "s": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": ">=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
              "docblock": ">=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"
            },
            "m": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": ">=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
              "docblock": ">=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"
            },
            "l": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": ">=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
              "docblock": ">=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"
            },
            "xl": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": ">=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象",
              "docblock": ">=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象"
            }
          },
          "methods": [],
          "order": 2
        }
      ]
    },
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Row",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 行内容 | ReactNode | -\ntype | 布局方式 <br><br>**可选值**:<br>'fluid'(流体布局，仅设置最大宽度，宽度为各断点值，两侧根据分辨率情况自动留白)<br>'fixed'(固定宽度布局)<br>'wrap'(单行模式，列在行中宽度溢出后换行)<br>'no-wrap'(单行模式，列在行中宽度溢出后不换行)<br>'no-padding'(行边距以及所有列间距都为0)<br>'across'(通栏模式, 行边距为0)<br>'fixed'/'fluid', 'wrap'/'no-wrap', 'no-padding', 'across'可组合使用，例如: ['fixed', 'wrap', 'no-padding', 'across'] | String/Array&lt;String&gt; | 默认布局方式为 display:flex;width:100%;，两侧有边距留白。\nfixedWidth | 固定宽度布局，指定固定宽度值后不再受断点值影响而变动<br><br>**可选值**:<br>'xxs'(320px)<br>'xs'(480px)<br>'s'(720px)<br>'m'(990px)<br>'l'(1200px)<br>'xl'(1500px) | Enum | -\nalign | (不支持IE9及以下浏览器)多列垂直方向对齐方式<br><br>**可选值**:<br>'top'(顶部对齐)<br>'center'(居中对齐)<br>'bottom'(底部对齐)<br>'baseline'(第一行文字基线对齐)<br>'stretch'(未设置高度或设为auto，将占满整个容器的高度，另还需手动设置 width:100%) | Enum | 'stretch'\njustify | (不支持IE9及以下浏览器)行内具有多余空间时的布局方式<br><br>**可选值**:<br>'start'(左对齐)<br>'center'(居中对齐)<br>'end'(右对齐)<br>'space-between'(两端对齐，列之间间距相等)<br>'space-around'(每列具有相同的左右间距，行两端间距是列间距的二分之一) | Enum | 'start'\n",
        "methodREADME": []
      },
      {
        "name": "Col",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 列内容 | ReactNode | -\nspan | 列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24 | String/Number | -\nfixedSpan | 固定列宽度，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30 | String/Number | -\noffset | （不支持IE9及以下浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24 | String/Number | -\nfixedOffset | （不支持IE9及以下浏览器）固定列偏移，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30 | String/Number | -\nalign | (不支持IE9及以下浏览器)多列垂直方向对齐方式，可覆盖Row的align属性<br><br>**可选值**:<br>'top', 'center', 'bottom', 'baseline', 'stretch' | Enum | -\nhidden | 列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏） | Boolean/String/Array | -\nxxs | >=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\nxs | >=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\ns | >=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\nm | >=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\nl | >=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\nxl | >=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象 | String/Number/Object | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "多列垂直方向对齐方式",
        "order": "9",
        "jsx": "import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">顶部对齐</div>\n    <Row className=\"demo-row\" align=\"top\">\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"100px\", lineHeight: \"100px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"50px\", lineHeight: \"50px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"150px\", lineHeight: \"150px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">居中对齐</div>\n    <Row className=\"demo-row\" align=\"center\">\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"100px\", lineHeight: \"100px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"50px\", lineHeight: \"50px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"150px\", lineHeight: \"150px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">底部对齐</div>\n    <Row className=\"demo-row\" align=\"bottom\">\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"100px\", lineHeight: \"100px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"50px\", lineHeight: \"50px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"150px\", lineHeight: \"150px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">第一行文字基线对齐</div>\n    <Row className=\"demo-row\" align=\"baseline\">\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"100px\", paddingTop: \"20px\", fontSize: \"30px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"50px\", paddingTop: \"20px\", fontSize: \"20px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"150px\", paddingTop: \"20px\", fontSize: \"40px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      占满整个容器的高度（需要将width设置为100%）\n    </div>\n    <Row className=\"demo-row\" align=\"stretch\">\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" style={{ width: \"100%\" }}>\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" style={{ width: \"100%\" }}>\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" style={{ width: \"100%\" }}>\n          col-8\n        </div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">单独设置列对齐方式</div>\n    <Row className=\"demo-row\" align=\"top\">\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"100px\", lineHeight: \"100px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\" align=\"bottom\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"50px\", lineHeight: \"50px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n      <Col span=\"8\">\n        <div\n          className=\"demo-col-inset\"\n          style={{ height: \"150px\", lineHeight: \"150px\" }}\n        >\n          col-8\n        </div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n（不支持IE9及以下浏览器）使用Flex的`align-items`和`align-self`属性实现，在`Row`上设置`align`属性，可控制`Row`下面所有`Col`的垂直方向对齐方式：start（顶部对齐，默认），center（居中对齐），end（底部对齐），baseline（第一行文字的基线对齐），stretch（如果未设置高度或设为auto，将占满整个容器的高度）；在`Col`上设置`align`属性，可允许它与其它列不一样的对齐方式，可覆盖`Row`的`align`属性。\n\n"
      },
      {
        "title": "基础布局",
        "order": "0",
        "jsx": "import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">单列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"24\">\n        <div className=\"demo-col-inset\">col-24</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">两列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"12\">\n        <div className=\"demo-col-inset\">col-12</div>\n      </Col>\n      <Col span=\"12\">\n        <div className=\"demo-col-inset\">col-12</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">三列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">四列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">五列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"1p5\">\n        <div className=\"demo-col-inset\">col-1p5</div>\n      </Col>\n      <Col span=\"1p5\">\n        <div className=\"demo-col-inset\">col-1p5</div>\n      </Col>\n      <Col span=\"1p5\">\n        <div className=\"demo-col-inset\">col-1p5</div>\n      </Col>\n      <Col span=\"1p5\">\n        <div className=\"demo-col-inset\">col-1p5</div>\n      </Col>\n      <Col span=\"1p5\">\n        <div className=\"demo-col-inset\">col-1p5</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">六列</div>\n    <Row className=\"demo-row\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n默认使用`flex`实现，IE9及其以下版本使用`display:table;`实现。\n通过`Col`的`span`属性指定该列占24分之几的空间。<br>\n`Row`为栅格系统的最外层容器（行），里面包括多个`Col`（列）。<br>\n\n"
      },
      {
        "title": "响应式布局",
        "order": "7",
        "jsx": "import { Grid, dom } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nconst { events } = dom;\nconst spans = [\n  { xs: 12, s: 8, m: 6 },\n  { xs: 6, s: 8, m: 6 },\n  { xs: 6, s: 8, m: 12 }\n];\n\nconst breakpoints = {\n  xs: 480,\n  s: 720,\n  m: 990\n};\n\nclass Demo extends React.Component {\n  componentDidMount() {\n    const row = ReactDOM.findDOMNode(this.refs.row);\n    const cols = [];\n    for (let i = 0; i < row.children.length; i++) {\n      cols.push(row.children[i]);\n    }\n\n    this.handleResize = () => {\n      let point = \"\";\n      const innerWidth =\n        window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth;\n      const keys = Object.keys(breakpoints);\n      for (let i = 0; i < keys.length; i++) {\n        const width = breakpoints[keys[i]];\n        const nextWidth = breakpoints[keys[i + 1]];\n        if (innerWidth > width && (innerWidth < nextWidth || !nextWidth)) {\n          point = keys[i];\n          break;\n        }\n      }\n\n      if (point) {\n        cols.forEach((col, index) => {\n          const colInset = col.children[0];\n          colInset.innerHTML = `col-${spans[index][point]}`;\n        });\n      }\n    };\n    events.on(window, \"resize\", this.handleResize);\n\n    this.handleResize();\n  }\n\n  componentWillUnmount() {\n    events.off(window, \"resize\", this.handleResize);\n  }\n\n  render() {\n    return (\n      <div className=\"demo\">\n        <div className=\"demo-title\">调整浏览器宽度查看各列所占栅格数变化</div>\n        <Row ref=\"row\" className=\"demo-row\">\n          {spans.map((span, index) => (\n            <Col key={index} {...span}>\n              <div className=\"demo-col-inset\" />\n            </Col>\n          ))}\n        </Row>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n提示类似Bootstrap的响应式设计，预设6个响应尺寸：xxs(320px), xs(480px), s(720px), m(990px), l(1200px), xl(1500px)。\n\n"
      },
      {
        "title": "指定列宽(固定栅格)",
        "order": "4",
        "jsx": "import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <Row className=\"demo-row\">\n      <Col fixedSpan=\"10\">\n        <div className=\"demo-col-inset\">col-fixed-10</div>\n      </Col>\n      <Col fixedSpan=\"18\">\n        <div className=\"demo-col-inset\">col-fixed-18</div>\n      </Col>\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n基础栅格宽度为`20px`，可用栅格为1到30，其宽度值为20 * 栅格数。\n\n"
      },
      {
        "title": "显示与隐藏",
        "order": "8",
        "jsx": "import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">\n      在所有断点下隐藏列，调整浏览器宽度查看各列隐藏还是显示\n    </div>\n    <Row className=\"demo-row\">\n      <Col span=\"8\" hidden>\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"16\" hidden>\n        <div className=\"demo-col-inset\">col-16</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      在某断点下(m)隐藏列，调整浏览器宽度查看各列隐藏还是显示\n    </div>\n    <Row className=\"demo-row\">\n      <Col span=\"8\" hidden=\"m\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"16\" hidden=\"m\">\n        <div className=\"demo-col-inset\">col-16</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      在部分断点下(m, l, xl)隐藏列，调整浏览器宽度查看各列隐藏还是显示\n    </div>\n    <Row className=\"demo-row\">\n      <Col span=\"8\" hidden={[\"m\", \"l\", \"xl\"]}>\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"16\" hidden={[\"m\", \"l\", \"xl\"]}>\n        <div className=\"demo-col-inset\">col-16</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n提供了强大的响应式的显示与隐藏功能，支持在不同断点下的显示与隐藏。\n\n"
      },
      {
        "title": "多列水平方向对齐方式",
        "order": "10",
        "jsx": "import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">左对齐</div>\n    <Row className=\"demo-row\" justify=\"start\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">居中对齐</div>\n    <Row className=\"demo-row\" justify=\"center\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">右对齐</div>\n    <Row className=\"demo-row\" justify=\"end\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">两端对齐，列之间的间隔都相等</div>\n    <Row className=\"demo-row\" justify=\"space-between\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      列两侧的间隔相等，列之间的间隔比列与边框的间隔大一倍\n    </div>\n    <Row className=\"demo-row\" justify=\"space-around\">\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n      <Col span=\"4\">\n        <div className=\"demo-col-inset\">col-4</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n（不支持IE9及以下浏览器）使用Flex的`justify-content`属性实现行内多列水平方向对齐方式：start（左对齐，默认），center（居中对齐），end（右对齐），space-between（两端对齐，项目之间的间隔都相），space-around（两侧的间隔相等，列之间的间隔比列与边框的间隔大一倍）。\n\n"
      },
      {
        "title": "流式栅格和固定栅格混用",
        "order": "4",
        "jsx": "import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">两列布局，左列固定，右列自适应</div>\n    <Row className=\"demo-row\">\n      <Col fixedSpan=\"16\">\n        <div className=\"demo-col-inset\">col-fixed-16</div>\n      </Col>\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">两列布局，右列固定，左列自适应</div>\n    <Row className=\"demo-row\">\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n      <Col fixedSpan=\"16\">\n        <div className=\"demo-col-inset\">col-fixed-16</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">三列布局，左列右列固定，中间自适应</div>\n    <Row className=\"demo-row\">\n      <Col fixedSpan=\"8\">\n        <div className=\"demo-col-inset\">col-fixed-8</div>\n      </Col>\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n      <Col fixedSpan=\"8\">\n        <div className=\"demo-col-inset\">col-fixed-8</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n"
      },
      {
        "title": "嵌套布局",
        "order": "2",
        "jsx": "import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <Row className=\"demo-row\">\n      <Col span=\"10\">\n        <Row type=\"across\">\n          <Col span=\"6\">\n            <div className=\"demo-col-inset\">col-10-6</div>\n          </Col>\n          <Col span=\"18\">\n            <div className=\"demo-col-inset\">col-10-18</div>\n          </Col>\n        </Row>\n      </Col>\n      <Col span=\"14\">\n        <Row type=\"across\">\n          <Col span=\"18\">\n            <div className=\"demo-col-inset\">col-14-18</div>\n          </Col>\n          <Col span=\"6\">\n            <div className=\"demo-col-inset\">col-14-6</div>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n`Col`下也可嵌套`Row`，以完成更细致的布局，如果想保持不同嵌套的`Row`下的`Col`间间距相等，请设置`Row`的`type`为`across`，即通栏模式，或自己设置样式，将`Row`的左右padding设置为0。\n\n"
      },
      {
        "title": "偏移(固定栅格)",
        "order": "6",
        "jsx": "import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">常规偏移，可设置offset的值从0到23</div>\n    <Row className=\"demo-row\">\n      <Col fixedOffset=\"0\">\n        <div className=\"demo-col-inset\">offset-fixed-0</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col fixedOffset=\"4\">\n        <div className=\"demo-col-inset\">offset-fixed-4</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col fixedOffset=\"8\">\n        <div className=\"demo-col-inset\">offset-fixed-8</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col fixedOffset=\"12\">\n        <div className=\"demo-col-inset\">offset-fixed-12</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">自适应偏移</div>\n    <Row className=\"demo-row\">\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n      <Col fixedOffset=\"12\">\n        <div className=\"demo-col-inset\">offset-fixed-12</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n（不支持IE9及以下浏览器）列可以向右偏移一定的列数, 偏移的列数和固定栅格列数定义相同.\n\n"
      },
      {
        "title": "偏移(流式栅格)",
        "order": "5",
        "jsx": "import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">常规偏移，可设置offset的值从0到30</div>\n    <Row className=\"demo-row\">\n      <Col offset=\"0\">\n        <div className=\"demo-col-inset\">offset-fixed-0</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col offset=\"4\">\n        <div className=\"demo-col-inset\">offset-fixed-4</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col offset=\"8\">\n        <div className=\"demo-col-inset\">offset-fixed-8</div>\n      </Col>\n    </Row>\n    <Row className=\"demo-row\">\n      <Col offset=\"12\">\n        <div className=\"demo-col-inset\">offset-fixed-12</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">自适应偏移</div>\n    <Row className=\"demo-row\">\n      <Col>\n        <div className=\"demo-col-inset\">col</div>\n      </Col>\n      <Col offset=\"12\">\n        <div className=\"demo-col-inset\">offset-12</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n（不支持IE9及以下浏览器）列可以向右偏移一定的列数，偏移的列数和流式布局栅格列数定义相同。\n\n"
      },
      {
        "title": "布局方式",
        "order": "1",
        "jsx": "import { Grid } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nReactDOM.render(\n  <div className=\"demo\">\n    <div className=\"demo-title\">默认布局</div>\n    <Row className=\"demo-row\">\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">流式布局(fluid)</div>\n    <Row type=\"fluid\" className=\"demo-row\">\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">固定宽度布局(fixed)</div>\n    <Row type=\"fixed\" className=\"demo-row\">\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\" />\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">固定宽度布局(fixed)，指定固定宽度</div>\n    <Row type=\"fixed\" fixedWidth=\"s\" className=\"demo-row\">\n      <Col>\n        <div className=\"demo-col-inset\">720px</div>\n      </Col>\n      <Col>\n        <div className=\"demo-col-inset\">720px</div>\n      </Col>\n      <Col>\n        <div className=\"demo-col-inset\">720px</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">单行模式(wrap)，列在行中宽度溢出后换行</div>\n    <Row type=\"wrap\" className=\"demo-row\">\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      单行模式(no-wrap)，列在行中宽度溢出后不换行\n    </div>\n    <Row type=\"no-wrap\" className=\"demo-row\">\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">无间距布局(no-padding)</div>\n    <Row type=\"no-padding\" className=\"demo-row\">\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">通栏布局(across)</div>\n    <Row type=\"across\" className=\"demo-row\">\n      <Col span=\"10\">\n        <div className=\"demo-col-inset\">col-10</div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">多种布局模式组合使用(fixed, no-padding)</div>\n    <Row type={[\"fixed\", \"no-padding\"]} fixedWidth=\"s\" className=\"demo-row\">\n      <Col span=\"12\">\n        <div className=\"demo-col-inset\">col-12</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n\n    <div className=\"demo-title\">\n      多种布局模式组合使用(fluid, no-wrap, no-padding)\n    </div>\n    <Row type={[\"fluid\", \"no-wrap\", \"no-padding\"]} className=\"demo-row\">\n      <Col span=\"12\">\n        <div className=\"demo-col-inset\">col-12</div>\n      </Col>\n      <Col span=\"8\">\n        <div className=\"demo-col-inset\">col-8</div>\n      </Col>\n      <Col span=\"6\">\n        <div className=\"demo-col-inset\">col-6</div>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    padding-top: 10px;\n    border: 1px solid #e9e9e9;\n    border-radius: 6px;\n}\n\n.demo-title {\n    margin-left: 20px;\n}\n\n.demo-row {\n    margin: 10px 0;\n}\n\n.demo-col-inset {\n    min-height: 30px;\n    border:1px solid #CCC;\n    border-radius: 3px;\n    background-color:#ECECEC;\n    line-height: 30px;\n    text-align: center;\n}\n",
        "body": "\n**Note:** 未来的`@alife/grid@1.x`中的默认布局即是`fluid`布局，并且去除最大宽度为1500px的限制。\n`across`为通拦模式，行边距为0。\n`no-padding`行边距以及所有列间距都为0。<br>\n`no-wrap`为单行模式, 列在行中宽度溢出后不换行。（IE9及以下版本不支持）<br>\n`wrap`为单行模式, 列在行中宽度溢出后换行。（IE9及以下版本不支持）<br>\n`fixed`为固定宽度布局，宽度为各断点值，两侧根据分辨率情况自动留白。<br>\n`fluid`也为流式布局，行的最大宽度随浏览器宽度变化而变化，直到最大宽度1500px。<br>\n默认布局为流式布局，行的最大宽度随浏览器宽度变化而变化。<br>\n\n"
      }
    ]
  },
  {
    "name": "Icon",
    "category": "Components",
    "title": "图标",
    "type": "展示",
    "importStatement": "import { Icon } from '@icedesign/base';",
    "body": "\n",
    "propsSchema": {
      "name": "Icon",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "type": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "指定显示哪种图标",
          "docblock": "指定显示哪种图标"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'xxs'",
                "computed": false
              },
              {
                "value": "'xs'",
                "computed": false
              },
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              },
              {
                "value": "'xl'",
                "computed": false
              },
              {
                "value": "'xxl'",
                "computed": false
              },
              {
                "value": "'xxxl'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "指定图标大小",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "指定图标大小"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ntype | 指定显示哪种图标 | String | -\nsize | 指定图标大小<br><br>**可选值**:<br>'xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl' | Enum | 'medium'\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Icon } from \"@icedesign/base\";\n\nReactDOM.render(<Icon type=\"atm\" />, mountNode);\n\n",
        "css": "",
        "body": "\n展示图标基本使用方法。\n\n"
      },
      {
        "title": "尺寸",
        "order": "2",
        "jsx": "import { Icon } from \"@icedesign/base\";\n\nconst sizes = [\"xxs\", \"xs\", \"small\", \"medium\", \"large\", \"xl\", \"xxl\", \"xxxl\"];\n\nReactDOM.render(\n  <ul className=\"icon-sizes\">\n    {sizes.map((size, index) => (\n      <li key={index}>\n        <Icon type=\"smile\" size={size} />\n        <span>{size}</span>\n      </li>\n    ))}\n  </ul>,\n  mountNode\n);\n\n",
        "css": ".icon-sizes {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.icon-sizes li {\n    display: inline-block;\n    width: 80px;\n    height: 80px;\n}\n\n.icon-sizes i {\n    display: block;\n    margin: 12px auto 0 auto;\n    text-align: center;\n}\n\n.icon-sizes span {\n    display: block;\n    margin-top: 10px;\n    text-align: center;\n}\n",
        "body": "\nICON的尺寸包括：`xxs`，`xs`，`small`，`medium`，`large`，`xl`，`xxl`，`xxxl`。\n\n"
      },
      {
        "title": "自定义样式",
        "order": "3",
        "jsx": "import { Icon } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <div className=\"icon-style-demo\">\n      <Icon type=\"success\" style={{ color: \"#1DC11D\", marginRight: \"10px\" }} />\n      这是一个成功的消息\n    </div>\n    <div className=\"icon-style-demo\">\n      <Icon type=\"warning\" style={{ color: \"#FFA003\", marginRight: \"10px\" }} />\n      这是一个警告的消息\n    </div>\n    <div className=\"icon-style-demo\">\n      <Icon type=\"error\" style={{ color: \"#FF3333\", marginRight: \"10px\" }} />\n      这是一个失败的消息\n    </div>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".icon-style-demo {\n    margin-bottom: 10px;\n    color: #333;\n}\n",
        "body": "\n图标字体本质上还是文字，可以使用 style 和 className 设置图标的大小和颜色。\n\n"
      },
      {
        "title": "图标列表",
        "order": "1",
        "jsx": "import { Icon, Feedback } from \"@icedesign/base\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\nconst types = [\n  \"all\",\n  \"cart\",\n  \"comments\",\n  \"cry\",\n  \"email\",\n  \"favorite\",\n  \"folder\",\n  \"form\",\n  \"help\",\n  \"refresh\",\n  \"set\",\n  \"training\",\n  \"account\",\n  \"atm\",\n  \"clock\",\n  \"attachment\",\n  \"3column\",\n  \"4column\",\n  \"discount\",\n  \"service\",\n  \"print\",\n  \"box\",\n  \"process\",\n  \"bags\",\n  \"electronics\",\n  \"gifts\",\n  \"lights\",\n  \"auto\",\n  \"browse\",\n  \"atm-away\",\n  \"scanning\",\n  \"compare\",\n  \"filter\",\n  \"pin\",\n  \"history\",\n  \"similar-product\",\n  \"link\",\n  \"cut\",\n  \"table\",\n  \"nav-list\",\n  \"image-text\",\n  \"text\",\n  \"move\",\n  \"subtract\",\n  \"dollar\",\n  \"office\",\n  \"operation\",\n  \"download\",\n  \"map\",\n  \"bad\",\n  \"good\",\n  \"skip\",\n  \"play\",\n  \"stop\",\n  \"compass\",\n  \"security\",\n  \"share\",\n  \"store\",\n  \"phone\",\n  \"ellipsis\",\n  \"email-filling\",\n  \"favorites-filling\",\n  \"account-filling\",\n  \"credit-level\",\n  \"credit-level-filling\",\n  \"mobile-phone\",\n  \"smile\",\n  \"personal-center\",\n  \"arrow-up-filling\",\n  \"arrow-right\",\n  \"arrow-left\",\n  \"arrow-down\",\n  \"arrow-up\",\n  \"add\",\n  \"minus\",\n  \"delete-filling\",\n  \"edit\",\n  \"error\",\n  \"select\",\n  \"ashbin\",\n  \"calendar\",\n  \"time\",\n  \"success\",\n  \"warning\",\n  \"search\",\n  \"display\",\n  \"category\",\n  \"prompt\",\n  \"arrow-down-filling\",\n  \"sorting\",\n  \"ascending\",\n  \"descending\",\n  \"success-filling\",\n  \"picture\",\n  \"close\",\n  \"semi-select\",\n  \"tag-subscript\",\n  \"survey\",\n  \"loading\",\n  \"arrow-double-left\",\n  \"arrow-double-right\"\n];\n\nlet customTypes = [];\n\n// 此处代码仅用于 fusion dev 展示自定义组件用\nif (window.customIcons) {\n  customTypes = window.customIcons;\n}\n\nconst handleCopy = () => Feedback.toast.success(\"Copied!\");\n\nReactDOM.render(\n  <div>\n    <div className=\"icon-list-title\">点击图标复制代码到剪贴板</div>\n    <ul className=\"icon-list\">\n      {types.map((type, index) => (\n        <CopyToClipboard\n          key={index}\n          text={`<Icon type=\"${type}\" />`}\n          onCopy={handleCopy}\n        >\n          <li>\n            <Icon type={type} size=\"xl\" />\n            <span>{type}</span>\n          </li>\n        </CopyToClipboard>\n      ))}\n    </ul>\n    {customTypes.length ? (\n      <div>\n        <div className=\"icon-list-custom-title\">自定义图标</div>\n        <ul className=\"icon-list\">\n          {customTypes.map((type, index) => (\n            <CopyToClipboard\n              key={index}\n              text={`<Icon type=\"${type}\" />`}\n              onCopy={handleCopy}\n            >\n              <li>\n                <Icon type={type} size=\"xl\" />\n                <span>{type}</span>\n              </li>\n            </CopyToClipboard>\n          ))}\n        </ul>\n      </div>\n    ) : null}\n  </div>,\n  mountNode\n);\n\n",
        "css": ".icon-list-title {\n    margin-bottom: 20px;\n    font-size: 24px;\n    color: #333;\n}\n\n.icon-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.icon-list li {\n    display: inline-block;\n    width: 160px;\n    height: 80px;\n    color: #333;\n    cursor: pointer;\n}\n\n.icon-list li:hover {\n    background-color: #f7f7f7;\n}\n\n.icon-list i {\n    display: block;\n    margin: 12px auto 0 auto;\n    text-align: center;\n}\n\n.icon-list span {\n    display: block;\n    margin-top: 10px;\n    text-align: center;\n}\n\n.icon-list-custom-title {\n    margin: 20px 0 20px 10px;\n    font-size: 20px;\n    color: #333;\n}\n",
        "body": "\n点击图标复制代码。\n\n"
      }
    ]
  },
  {
    "name": "Input",
    "category": "Components",
    "title": "输入框",
    "type": "表单",
    "importStatement": "import { Input } from '@icedesign/base';",
    "body": "\n\n## 开发指南\n\n### 何时使用\n\n表单输入，一般配合Form使用\n\n",
    "propsSchema": {
      "name": "Input",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "当前值",
          "docblock": "当前值"
        },
        "defaultValue": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "初始化值",
          "docblock": "初始化值"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false,
                "description": "小"
              },
              {
                "value": "'medium'",
                "computed": false,
                "description": "中"
              },
              {
                "value": "'large'",
                "computed": false,
                "description": "大"
              }
            ]
          },
          "required": false,
          "description": "尺寸",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "尺寸\n@enumdesc 小, 中, 大",
          "value": [
            {
              "value": "'small'",
              "computed": false,
              "description": "小"
            },
            {
              "value": "'medium'",
              "computed": false,
              "description": "中"
            },
            {
              "value": "'large'",
              "computed": false,
              "description": "大"
            }
          ]
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "状态 设置文本域禁用状态",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "状态 设置文本域禁用状态"
        },
        "multiple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否为多行，不选则为单行",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否为多行，不选则为单行"
        },
        "maxLength": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "最大长度",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "最大长度"
        },
        "hasLimitHint": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否展现最大长度样式",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否展现最大长度样式"
        },
        "cutString": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否允许切割字符串",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否允许切割字符串"
        },
        "hasClear": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否出现clear按钮",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否出现clear按钮"
        },
        "state": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "''",
                "computed": false,
                "description": ""
              },
              {
                "value": "'error'",
                "computed": false,
                "description": "错误"
              },
              {
                "value": "'loading'",
                "computed": false,
                "description": "校验中"
              },
              {
                "value": "'success'",
                "computed": false,
                "description": "成功"
              }
            ]
          },
          "required": false,
          "description": "状态（multiple模式不支持 loading/success 状态)",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "docblock": "状态（multiple模式不支持 loading/success 状态)\n@enumdesc , 错误, 校验中, 成功",
          "value": [
            {
              "value": "''",
              "computed": false,
              "description": ""
            },
            {
              "value": "'error'",
              "computed": false,
              "description": "错误"
            },
            {
              "value": "'loading'",
              "computed": false,
              "description": "校验中"
            },
            {
              "value": "'success'",
              "computed": false,
              "description": "成功"
            }
          ]
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "htmlType": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "原生type",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "docblock": "原生type"
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "只读",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "只读"
        },
        "trim": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "onChange返回会自动去除头尾空字符",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "onChange返回会自动去除头尾空字符"
        },
        "addonBefore": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "文本域前附加内容",
          "docblock": "文本域前附加内容"
        },
        "addonAfter": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "文本域后附加内容",
          "docblock": "文本域后附加内容"
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "输入提示",
          "docblock": "输入提示"
        },
        "onPressEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "按下回车的回调",
          "defaultValue": {
            "value": "function() {\n}",
            "computed": false
          },
          "docblock": "按下回车的回调",
          "params": [],
          "returns": null
        },
        "onBlur": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "失去焦点时候触发的回调",
          "defaultValue": {
            "value": "function() {\n}",
            "computed": false
          },
          "docblock": "失去焦点时候触发的回调",
          "params": [],
          "returns": null
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "发生改变的时候触发的回调",
          "defaultValue": {
            "value": "function() {\n}",
            "computed": false
          },
          "docblock": "发生改变的时候触发的回调\n@param {String} value 数据\n@param {Event} e DOM事件对象",
          "params": [
            {
              "name": "value",
              "description": "数据",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "e",
              "description": "DOM事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "getValueLength": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "自定义字符串计算长度方式",
          "defaultValue": {
            "value": "function() {\n}",
            "computed": false
          },
          "docblock": "自定义字符串计算长度方式\n@param {String} value 数据\n@returns {Number} 自定义长度",
          "params": [
            {
              "name": "value",
              "description": "数据",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": {
            "description": "自定义长度",
            "type": {
              "name": "Number"
            }
          }
        },
        "rows": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "multiple多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)",
          "defaultValue": {
            "value": "4",
            "computed": false
          },
          "docblock": "multiple多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)"
        },
        "textIndent": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "文字缩进",
          "docblock": "文字缩进"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义class",
          "docblock": "自定义class"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nvalue | 当前值 | String/Number | -\ndefaultValue | 初始化值 | String/Number | -\nsize | 尺寸<br><br>**可选值**:<br>'small'(小)<br>'medium'(中)<br>'large'(大) | Enum | 'medium'\ndisabled | 状态 设置文本域禁用状态 | Boolean | false\nmultiple | 是否为多行，不选则为单行 | Boolean | false\nmaxLength | 最大长度 | Number | null\nhasLimitHint | 是否展现最大长度样式 | Boolean | false\ncutString | 是否允许切割字符串 | Boolean | true\nhasClear | 是否出现clear按钮 | Boolean | false\nstate | 状态（multiple模式不支持 loading/success 状态)<br><br>**可选值**:<br>''<br>'error'(错误)<br>'loading'(校验中)<br>'success'(成功) | Enum | ''\nstyle | 自定义内联样式 | Object | -\nhtmlType | 原生type | String | 'text'\nreadOnly | 只读 | Boolean | false\ntrim | onChange返回会自动去除头尾空字符 | Boolean | false\naddonBefore | 文本域前附加内容 | ReactNode | -\naddonAfter | 文本域后附加内容 | ReactNode | -\nplaceholder | 输入提示 | String | -\nonPressEnter | 按下回车的回调<br><br>**签名**:<br>Function() => void | Function | function() { }\nonBlur | 失去焦点时候触发的回调<br><br>**签名**:<br>Function() => void | Function | function() { }\nonChange | 发生改变的时候触发的回调<br><br>**签名**:<br>Function(value: String, e: Event) => void<br>**参数**:<br>*value*: {String} 数据<br>*e*: {Event} DOM事件对象 | Function | function() { }\ngetValueLength | 自定义字符串计算长度方式<br><br>**签名**:<br>Function(value: String) => Number<br>**参数**:<br>*value*: {String} 数据<br>**返回值**:<br>{Number} 自定义长度<br> | Function | function() { }\nrows | multiple多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题) | Number | 4\ntextIndent | 文字缩进 | Number | -\nclassName | 自定义class | String | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "Input 组合",
        "order": "4",
        "jsx": "import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input\n      addonBefore=\"http://\"\n      addonAfter=\".com\"\n      size=\"large\"\n      defaultValue=\"alibaba\"\n      maxLength={2}\n      hasLimitHint\n    />\n    <br />\n    <br />\n    <Input\n      addonBefore=\"http://\"\n      addonAfter=\".com\"\n      size=\"medium\"\n      value=\"alibaba\"\n    />\n    <br />\n    <br />\n    <Input\n      addonBefore=\"http://\"\n      addonAfter=\".com\"\n      size=\"small\"\n      value=\"alibaba\"\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n各类 `Input` 的组合展现。\n\n"
      },
      {
        "title": "Input 输入框",
        "order": "0",
        "jsx": "import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input size=\"large\" placeholder=\"Large\" />\n    <br />\n    <br />\n    <Input className=\"textClsName\" placeholder=\"Medium\" />\n    <br />\n    <br />\n    <Input placeholder=\"Small\" size=\"small\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n我们为 `<Input />` 输入框定义了三种尺寸（大、默认、小）\n\n"
      },
      {
        "title": "清除按钮",
        "order": "8",
        "jsx": "import { Input } from \"@icedesign/base\";\n\nconst onChange = value => {\n  console.log(value);\n};\nconst onBlur = e => {\n  console.log(e);\n};\n\nReactDOM.render(\n  <div>\n    <Input defaultValue=\"一键清除\" hasClear onChange={onChange} size=\"small\" />\n    <br />\n    <br />\n    <Input hasClear onChange={onChange} onBlur={onBlur} />\n    <br />\n    <br />\n    <Input defaultValue=\"一键清除\" hasClear onChange={onChange} size=\"large\" />\n    <br />\n    <br />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n通过设置 hasClear 添加清除按钮\n\n"
      },
      {
        "title": "禁用状态",
        "order": "7",
        "jsx": "import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input disabled placeholder=\"disabled\" size=\"small\" />\n\n    <br />\n    <br />\n\n    <Input\n      disabled\n      addonBefore=\"http://\"\n      addonAfter=\".com\"\n      size=\"medium\"\n      value=\"alibaba\"\n    />\n    <br />\n    <br />\n\n    <Input disabled placeholder=\"medium\" maxLength={10} hasLimitHint />\n    <br />\n    <br />\n\n    <Input multiple disabled placeholder=\"medium\" maxLength={10} hasLimitHint />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n为 `Input` 设置 `disabled` 状态；\n\n"
      },
      {
        "title": "最大长度",
        "order": "9",
        "jsx": "import { Input, NumberPicker } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      maxLen: 10,\n      control: \"maxLen control\"\n    };\n  }\n\n  onChange(v) {\n    console.log(v);\n    this.setState({\n      control: v\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Input\n          size=\"large\"\n          placeholder=\"Large\"\n          value={this.state.control}\n          maxLength={this.state.maxLen}\n          hasLimitHint\n          onChange={this.onChange.bind(this)}\n        />\n        <br />\n        <br />\n        <Input\n          placeholder=\"medium\"\n          maxLength={20}\n          hasLimitHint\n          cutString={false}\n          onChange={v => {\n            this.setState({ control: v });\n          }}\n        />\n        <br />\n        <br />\n        <Input size=\"small\" placeholder=\"small\" maxLength={100} hasLimitHint />\n        <br />\n        <br />\n        <Input multiple maxLength={100} rows=\"4\" hasLimitHint />\n        <br />\n        <br />\n        <Input maxLength={5} placeholder=\"原生maxLength=5\" />\n        <br />\n        <br />\n        maxLen受控：<NumberPicker\n          value={this.state.maxLen}\n          onChange={value => {\n            this.setState({ maxLen: parseInt(value) });\n          }}\n        />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n最大长度 hasLimitHint 会展现限制数字; cutString 可控制是否要切割字符串, 用于只展示最大长度\n\n"
      },
      {
        "title": "多行文本域",
        "order": "6",
        "jsx": "import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input multiple placeholder=\"multiple\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n设置 `Input` 为 多行文本域；\n\n"
      },
      {
        "title": "密码输入框",
        "order": "7",
        "jsx": "import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input htmlType=\"password\" size=\"small\" defaultValue=\"abcd\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n设置 `Input` 为 密码类型；\n\n"
      },
      {
        "title": "错误状态",
        "order": "8",
        "jsx": "import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input state=\"error\" placeholder=\"error\" size=\"small\" />\n    <br />\n    <br />\n    <Input\n      state=\"error\"\n      maxLength={100}\n      hasLimitHint\n      placeholder=\"error\"\n      size=\"medium\"\n    />\n    <br />\n    <br />\n\n    <Input state=\"error\" placeholder=\"error\" size=\"small\" multiple />\n\n    <br />\n    <br />\n    <Input state=\"success\" size=\"small\" value=\"success\" />\n    <br />\n    <br />\n    <Input\n      state=\"success\"\n      maxLength={100}\n      hasLimitHint\n      placeholder=\"success\"\n      size=\"medium\"\n    />\n    <br />\n    <br />\n    <Input state=\"success\" placeholder=\"success\" size=\"large\" />\n    <br />\n    <br />\n    <Input state=\"loading\" placeholder=\"loading\" size=\"small\" />\n    <br />\n    <br />\n    <Input state=\"loading\" placeholder=\"loading\" size=\"medium\" />\n    <br />\n    <br />\n    <Input state=\"loading\" placeholder=\"loading\" size=\"large\" />\n    <br />\n    <br />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n为 `Input` 设置 `error` 状态；\n\n"
      },
      {
        "title": "自定义style,className",
        "order": "10",
        "jsx": "import { Input } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Input placeholder=\"width:400\" style={{ width: 400 }} />\n    <br />\n    <br />\n\n    <Input\n      addonBefore=\"http://\"\n      addonAfter=\".com\"\n      size=\"medium\"\n      value=\"alibaba\"\n      style={{ width: 400 }}\n    />\n    <br />\n    <br />\n\n    <Input\n      placeholder=\"medium\"\n      maxLength={10}\n      hasLimitHint\n      style={{ width: 400 }}\n    />\n    <br />\n    <br />\n    <Input\n      placeholder=\"medium\"\n      maxLength={10}\n      hasLimitHint\n      style={{ width: 400 }}\n      className=\"my-input-class\"\n      state=\"success\"\n    />\n    <br />\n    <br />\n    <Input placeholder=\"className\" className=\"my-input-class\" />\n    <Input htmlType=\"hidden\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "body .my-input-class {\n    width:500px;\n}\n",
        "body": "\n通过style设置宽度\n\n"
      },
      {
        "title": "trim",
        "order": "9",
        "jsx": "import { Input } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  state = {\n    value: \"\"\n  };\n  onChange(value) {\n    console.log(value);\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Input\n          trim\n          value={this.state.value}\n          onChange={this.onChange.bind(this)}\n          placeholder=\"无法输入空格哦！\"\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\nonChange返回会自动去除头尾空字符\n\n"
      }
    ]
  },
  {
    "name": "Loading",
    "category": "Components",
    "title": "加载",
    "type": "基本",
    "importStatement": "import { Loading } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。\n\n### 注意事项\n\nLoading 默认使用 `display='inline-block'` 布局的方式包裹内部元素。\n\n如果希望 `通栏包裹` 可以修改 `<Loading style={{display: 'block'}} />`\n\n",
    "propsSchema": {
      "name": "Loading",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "tip": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "自定义内容",
          "docblock": "自定义内容"
        },
        "visible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "loading 状态, 默认 true",
          "docblock": "loading 状态, 默认 true"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义class",
          "docblock": "自定义class"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "''",
                "computed": false,
                "description": "无"
              },
              {
                "value": "'flower'",
                "computed": false,
                "description": "icon"
              },
              {
                "value": "'fusion-reactor'",
                "computed": false,
                "description": "fusion矢量"
              },
              {
                "value": "'dot-circle'",
                "computed": false,
                "description": "点圈"
              }
            ]
          },
          "required": false,
          "description": "动画类型",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "docblock": "动画类型\n@enumdesc 无, icon, fusion矢量, 点圈",
          "value": [
            {
              "value": "''",
              "computed": false,
              "description": "无"
            },
            {
              "value": "'flower'",
              "computed": false,
              "description": "icon"
            },
            {
              "value": "'fusion-reactor'",
              "computed": false,
              "description": "fusion矢量"
            },
            {
              "value": "'dot-circle'",
              "computed": false,
              "description": "点圈"
            }
          ]
        },
        "color": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "动画颜色",
          "docblock": "动画颜色"
        },
        "children": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "子元素",
          "docblock": "子元素"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\ntip | 自定义内容 | any | -\nvisible | loading 状态, 默认 true | Boolean | -\nclassName | 自定义class | String | -\nstyle | 自定义内联样式 | Object | -\nshape | 动画类型<br><br>**可选值**:<br>''(无)<br>'flower'(icon)<br>'fusion-reactor'(fusion矢量)<br>'dot-circle'(点圈) | Enum | ''\ncolor | 动画颜色 | String | -\nchildren | 子元素 | any | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Loading } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Loading tip=\"加载中...\">\n    <div className=\"demo\">test</div>\n  </Loading>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    width: 500px;\n    background-color: #0dcecb;\n    text-align: center;\n    padding:50px;\n}\n",
        "body": "\n最简单的用法。\n\n"
      },
      {
        "title": "加载动画",
        "order": "0",
        "jsx": "import { Loading } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Loading shape=\"flower\" tip=\"loading...\" color=\"#333\">\n      <div className=\"demo\">flower</div>\n    </Loading>\n    <br />\n    <Loading shape=\"fusion-reactor\" color=\"#fff\">\n      <div className=\"demo\">fusion-reactor</div>\n    </Loading>\n    <Loading shape=\"dot-circle\">\n      <div className=\"demo\">dot-circle</div>\n    </Loading>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    width: 500px;\n    background-color: #0dcecb;\n    text-align: center;\n    padding:50px;\n}\n.next-loading {\n    margin-bottom: 5px;\n}\n",
        "body": "\nshape 来区分多种加载动画\n\n"
      },
      {
        "title": "关闭加载",
        "order": "0",
        "jsx": "import { Loading, Form, Input, Button } from \"@icedesign/base\";\n\nconst FormItem = Form.Item;\n\nconst layout = {\n  labelCol: {\n    fixedSpan: 4\n  },\n  wrapperCol: {\n    span: 18\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  setVisible(visible) {\n    this.setState({\n      visible\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Loading visible={this.state.visible} shape=\"fusion-reactor\">\n          <Form style={{ width: 500 }}>\n            <FormItem label=\"用户名：\" {...layout}>\n              <Input />\n            </FormItem>\n            <FormItem label=\"密码：\" {...layout}>\n              <Input htmlType=\"password\" placeholder=\"请输入密码\" />\n            </FormItem>\n            <FormItem label=\"备注：\" {...layout}>\n              <Input multiple />\n            </FormItem>\n          </Form>\n        </Loading>\n        <div style={{ paddingLeft: 100 }}>\n          <Button onClick={this.setVisible.bind(this, true)} type=\"primary\">\n            提交\n          </Button>\n          <Button onClick={this.setVisible.bind(this, false)}>取消</Button>\n        </div>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n可切换加载状态。\n\n"
      },
      {
        "title": "自定义",
        "order": "0",
        "jsx": "import { Loading } from \"@icedesign/base\";\n\nconst tipLoader1 = (\n  <div className=\"load-container load1\">\n    <div className=\"loader\">loading...</div>\n  </div>\n);\nconst tipLoader7 = (\n  <div className=\"load-container load7\">\n    <div className=\"loader\">loading...</div>\n  </div>\n);\n\nReactDOM.render(\n  <div>\n    <Loading tip={tipLoader1}>\n      <div className=\"demo\">test</div>\n    </Loading>\n    <Loading tip={tipLoader7}>\n      <div className=\"demo\">test</div>\n    </Loading>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".demo {\n    width: 500px;\n    background-color: #0dcecb;\n    text-align: center;\n    padding:50px;\n}\n.next-loading {\n    margin-bottom: 5px;\n}\n\n/* css 从这里开始抄 */\n\n.load-container {\n  margin: 0 auto;\n  position: relative;\n}\n\n/* 第一个动画效果 */\n.load1 .loader,\n.load1 .loader:before,\n.load1 .loader:after {\n  background: #fff;\n  color: #fff;\n  -webkit-animation: load1 1s infinite ease-in-out;\n  animation: load1 1s infinite ease-in-out;\n  width: 1em;\n  height: 4em;\n}\n.load1 .loader:before,\n.load1 .loader:after {\n  position: absolute;\n  top: 0;\n  content: '';\n}\n.load1 .loader:before {\n  left: -1.5em;\n  -webkit-animation-delay: -0.32s;\n  animation-delay: -0.32s;\n}\n.load1 .loader {\n  text-indent: -9999em;\n  margin: 0 auto !important;\n  position: relative;\n  font-size: 11px;\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n}\n.load1 .loader:after {\n  left: 1.5em;\n}\n@-webkit-keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 ;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em ;\n    height: 5em;\n  }\n}\n@keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 ;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em ;\n    height: 5em;\n  }\n}\n\n/* 第二个动画效果 */\n.load7 .loader:before,\n.load7 .loader:after,\n.load7 .loader {\n  border-radius: 50%;\n  width: 2.5em;\n  height: 2.5em;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation: load7 1.8s infinite ease-in-out;\n  animation: load7 1.8s infinite ease-in-out;\n  top: -36px;\n}\n.load7 .loader {\n  margin: 0 auto !important;\n  font-size: 10px;\n  position: relative;\n  text-indent: -9999em;\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n}\n.load7 .loader:before {\n  left: -3.5em;\n  -webkit-animation-delay: -0.32s;\n  animation-delay: -0.32s;\n}\n.load7 .loader:after {\n  left: 3.5em;\n}\n.load7 .loader:before,\n.load7 .loader:after {\n  content: '';\n  position: absolute;\n  top: 0;\n}\n@-webkit-keyframes load7 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 2.5em 0 -1.3em #fff;\n  }\n  40% {\n    box-shadow: 0 2.5em 0 0 #fff;\n  }\n}\n@keyframes load7 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 2.5em 0 -1.3em #fff;\n  }\n  40% {\n    box-shadow: 0 2.5em 0 0 #fff;\n  }\n}\n",
        "body": "\n你可以自定义动画，把自己的动画元素传进去, 需要自己写动画样式\n\n"
      }
    ]
  },
  {
    "name": "LocaleProvider",
    "category": "Utility",
    "title": "国际化",
    "importStatement": "import { LocaleProvider } from '@icedesign/base';",
    "body": "\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { LocaleProvider, Select } from \"@icedesign/base\";\n\n/* eslint-disable react/no-multi-comp */\n\n// 组件\nclass MyComponent extends React.Component {\n  static propTypes = {\n    locale: React.PropTypes.object\n  };\n\n  render() {\n    const { locale } = this.props;\n\n    return <div ref=\"div\">{locale.content}</div>;\n  }\n}\nconst LocaleMyComponent = LocaleProvider(MyComponent);\nLocaleMyComponent.LOCALE = {\n  \"en-us\": {\n    content: \"en-us\"\n  },\n  \"zh-cn\": {\n    content: \"zh-cn\"\n  }\n};\n\n// 应用\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lang: \"zh-cn\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(lang) {\n    this.setState({\n      lang\n    });\n    // 获取被包裹组件的引用\n    console.log(this.refs[\"locale-my-component\"].getInstance());\n  }\n\n  render() {\n    const { lang } = this.state;\n\n    return (\n      <div>\n        <Select\n          style={{ marginBottom: \"20px\" }}\n          value={lang}\n          onChange={this.handleChange}\n        >\n          <Option value=\"zh-cn\">zh-cn</Option>\n          <Option value=\"en-us\">en-us</Option>\n        </Select>\n        <LocaleMyComponent language={lang} ref=\"locale-my-component\" />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n使用LocaleProvider包裹组件。\n\n"
      }
    ]
  },
  {
    "name": "Menu",
    "category": "Components",
    "title": "菜单",
    "type": "展示",
    "importStatement": "import { Menu } from '@icedesign/base';",
    "body": "\n\n",
    "propsSchema": {
      "name": "Menu",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "selectedKeys": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "array"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": "当前选中的菜单项, 设置此属性，组件的选中变为受控状态",
          "docblock": "当前选中的菜单项, 设置此属性，组件的选中变为受控状态"
        },
        "defaultSelectedKeys": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "array"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": "初始化选中的菜单项，只在组件初次render的时候生效",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "初始化选中的菜单项，只在组件初次render的时候生效"
        },
        "selectMode": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'single'",
                "computed": false
              },
              {
                "value": "'multiple'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "菜单选择的模式，支持单选和多选",
          "docblock": "菜单选择的模式，支持单选和多选"
        },
        "openKeys": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "array"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": "当前打开的菜单项，设置此属性，组件的打开变为受控状态",
          "docblock": "当前打开的菜单项，设置此属性，组件的打开变为受控状态"
        },
        "defaultOpenKeys": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "array"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": "初始化打开的菜单项，只在组件初次render的时候生效",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "初始化打开的菜单项，只在组件初次render的时候生效"
        },
        "openMode": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'single'",
                "computed": false
              },
              {
                "value": "'multiple'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "子菜单同时打开模式，是多个还是一个",
          "defaultValue": {
            "value": "'multiple'",
            "computed": false
          },
          "docblock": "子菜单同时打开模式，是多个还是一个"
        },
        "shallowSelect": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "如果此属性为true，表明只会选中第一级的菜单",
          "docblock": "如果此属性为true，表明只会选中第一级的菜单"
        },
        "onSelect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "选中/取消选中了任意MenuItem",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "选中/取消选中了任意MenuItem\n@param {Array} selectedKeys 选中的菜单的key\n@param {MenuItem} menuItem 当前点击的菜单项的实例\n@param {Object} meta 选中菜单项的上下级关系",
          "params": [
            {
              "name": "selectedKeys",
              "description": "选中的菜单的key",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "menuItem",
              "description": "当前点击的菜单项的实例",
              "type": {
                "name": "MenuItem"
              }
            },
            {
              "name": "meta",
              "description": "选中菜单项的上下级关系",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "onDeselect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "取消选中的菜单项",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "取消选中的菜单项\n@param {String} selectedKey 取消选中的菜单项的key",
          "params": [
            {
              "name": "selectedKey",
              "description": "取消选中的菜单项的key",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "点击菜单项触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "点击菜单项触发的事件\n@param {Array} selectedKeys 点击的菜单项的key\n@param {MenuItem} menuItem 当前点击的菜单项的实例\n@param {Object} meta 选中菜单项的上下级关系",
          "params": [
            {
              "name": "selectedKeys",
              "description": "点击的菜单项的key",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "menuItem",
              "description": "当前点击的菜单项的实例",
              "type": {
                "name": "MenuItem"
              }
            },
            {
              "name": "meta",
              "description": "选中菜单项的上下级关系",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "打开子菜单的时候触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "打开子菜单的时候触发的事件\n@param {Array} openKeys 打开的子菜单的key",
          "params": [
            {
              "name": "openKeys",
              "description": "打开的子菜单的key",
              "type": {
                "name": "Array"
              }
            }
          ],
          "returns": null
        },
        "hasIcon": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否带有菜单的图标",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否带有菜单的图标"
        },
        "indentSize": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "级联菜单下面缩进的尺寸",
          "defaultValue": {
            "value": "20",
            "computed": false
          },
          "docblock": "级联菜单下面缩进的尺寸"
        },
        "header": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "配置菜单的头部",
          "docblock": "配置菜单的头部"
        },
        "footer": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "配置菜单的底部",
          "docblock": "配置菜单的底部"
        },
        "multipleCol": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否启用多列模式",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否启用多列模式"
        },
        "autoFocusFirstItem": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否让第一个菜单自动获取焦点",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否让第一个菜单自动获取焦点"
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否启用设置焦点功能",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否启用设置焦点功能"
        },
        "focusedKey": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "焦点项索引值",
          "docblock": "焦点项索引值"
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'ver'",
                "computed": false
              },
              {
                "value": "'hoz'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "菜单的方向",
          "defaultValue": {
            "value": "'ver'",
            "computed": false
          },
          "docblock": "菜单的方向"
        }
      },
      "methods": [
        {
          "name": "_getLastChild",
          "docblock": "获取最后一个直系子级\n@returns {*}\n@private",
          "modifiers": [],
          "params": [],
          "returns": {
            "description": null,
            "type": {
              "name": "mixed"
            }
          },
          "description": "获取最后一个直系子级"
        },
        {
          "name": "_getNextChild",
          "docblock": "获取当前子级的下一个子级\n@returns {*}\n@private",
          "modifiers": [],
          "params": [],
          "returns": {
            "description": null,
            "type": {
              "name": "mixed"
            }
          },
          "description": "获取当前子级的下一个子级"
        },
        {
          "name": "_getPrevChild",
          "docblock": "获取当前子级的上一个子级\n@returns {*}\n@private",
          "modifiers": [],
          "params": [],
          "returns": {
            "description": null,
            "type": {
              "name": "mixed"
            }
          },
          "description": "获取当前子级的上一个子级"
        }
      ],
      "subComponents": [
        {
          "name": "CheckboxItem",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "helper": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "显示在菜单右侧的帮助文本，通常用于一些附加信息",
              "defaultValue": {
                "value": "null",
                "computed": false
              },
              "docblock": "显示在菜单右侧的帮助文本，通常用于一些附加信息"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio"
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "点击了菜单项触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "点击了菜单项触发的事件\n@param {String} key 当前菜单项的key值\n@param {Event} e DOM事件",
              "params": [
                {
                  "name": "key",
                  "description": "当前菜单项的key值",
                  "type": {
                    "name": "String"
                  }
                },
                {
                  "name": "e",
                  "description": "DOM事件",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "returns": null
            },
            "needIndent": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否显示缩进",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否显示缩进"
            },
            "checked": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高",
              "docblock": "当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高"
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "选择被改变的时候触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "选择被改变的时候触发的事件\n@param {Boolean} checked 是否选中",
              "params": [
                {
                  "name": "checked",
                  "description": "是否选中",
                  "type": {
                    "name": "Boolean"
                  }
                }
              ],
              "returns": null
            }
          },
          "methods": []
        },
        {
          "name": "Divider",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            }
          },
          "methods": []
        },
        {
          "name": "Group",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "label": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "分组的标签",
              "defaultValue": {
                "value": "'menu-group'",
                "computed": false
              },
              "docblock": "分组的标签"
            }
          },
          "methods": []
        },
        {
          "name": "Item",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "helper": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "显示在菜单右侧的帮助文本，通常用于一些附加信息",
              "defaultValue": {
                "value": "null",
                "computed": false
              },
              "docblock": "显示在菜单右侧的帮助文本，通常用于一些附加信息"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio"
            },
            "selected": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高",
              "docblock": "当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高"
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "点击了菜单项触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "点击了菜单项触发的事件\n@param {String} key 当前菜单项的key值\n@param {Event} e DOM事件",
              "params": [
                {
                  "name": "key",
                  "description": "当前菜单项的key值",
                  "type": {
                    "name": "String"
                  }
                },
                {
                  "name": "e",
                  "description": "DOM事件",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "returns": null
            },
            "hasSelectedIcon": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否显示选中图标",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否显示选中图标"
            },
            "needIndent": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否显示缩进",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否显示缩进"
            }
          },
          "methods": []
        },
        {
          "name": "PopupItem",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "禁用当前菜单项, 被禁用不会触发事件",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "禁用当前菜单项, 被禁用不会触发事件"
            },
            "label": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "菜单项的标签",
              "defaultValue": {
                "value": "'popup-item'",
                "computed": false
              },
              "docblock": "菜单项的标签"
            },
            "autoWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否自动让弹出层的宽度和菜单项保持一致，逻辑是如果弹出层的宽度比菜单项小的话和菜单项保持一致，如果宽度大于菜单项则不做处理",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否自动让弹出层的宽度和菜单项保持一致，逻辑是如果弹出层的宽度比菜单项小的话和菜单项保持一致，如果宽度大于菜单项则不做处理"
            }
          },
          "methods": []
        },
        {
          "name": "RadioItem",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "helper": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "显示在菜单右侧的帮助文本，通常用于一些附加信息",
              "defaultValue": {
                "value": "null",
                "computed": false
              },
              "docblock": "显示在菜单右侧的帮助文本，通常用于一些附加信息"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio"
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "点击了菜单项触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "点击了菜单项触发的事件\n@param {String} key 当前菜单项的key值\n@param {Event} e DOM事件",
              "params": [
                {
                  "name": "key",
                  "description": "当前菜单项的key值",
                  "type": {
                    "name": "String"
                  }
                },
                {
                  "name": "e",
                  "description": "DOM事件",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "returns": null
            },
            "needIndent": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否显示缩进",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否显示缩进"
            },
            "checked": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高",
              "docblock": "当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高"
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "选择被改变的时候触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "选择被改变的时候触发的事件\n@param {Boolean} checked 是否选中",
              "params": [
                {
                  "name": "checked",
                  "description": "是否选中",
                  "type": {
                    "name": "Boolean"
                  }
                }
              ],
              "returns": null
            }
          },
          "methods": []
        },
        {
          "name": "SubMenu",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "label": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "子菜单的标签",
              "defaultValue": {
                "value": "'sub-item'",
                "computed": false
              },
              "docblock": "子菜单的标签"
            },
            "visible": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "设置子菜单的显示状态",
              "docblock": "设置子菜单的显示状态"
            },
            "mode": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'inline'",
                    "computed": false
                  },
                  {
                    "value": "'popup'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "设置子菜单表现的形式",
              "defaultValue": {
                "value": "'inline'",
                "computed": false
              },
              "docblock": "设置子菜单表现的形式"
            },
            "triggerType": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'click'",
                    "computed": false
                  },
                  {
                    "value": "'hover'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "设置子菜单显示触发的类型",
              "defaultValue": {
                "value": "'click'",
                "computed": false
              },
              "docblock": "设置子菜单显示触发的类型"
            },
            "selectable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "设置子菜单的label是否可以被选中",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "设置子菜单的label是否可以被选中"
            },
            "align": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'outside'",
                    "computed": false
                  },
                  {
                    "value": "'follow'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "设置子菜单的跟随类型",
              "defaultValue": {
                "value": "'follow'",
                "computed": false
              },
              "docblock": "设置子菜单的跟随类型"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nselectedKeys | 当前选中的菜单项, 设置此属性，组件的选中变为受控状态 | Array/ReactNode | -\ndefaultSelectedKeys | 初始化选中的菜单项，只在组件初次render的时候生效 | Array/ReactNode | []\nselectMode | 菜单选择的模式，支持单选和多选<br><br>**可选值**:<br>'single', 'multiple' | Enum | -\nopenKeys | 当前打开的菜单项，设置此属性，组件的打开变为受控状态 | Array/ReactNode | -\ndefaultOpenKeys | 初始化打开的菜单项，只在组件初次render的时候生效 | Array/ReactNode | []\nopenMode | 子菜单同时打开模式，是多个还是一个<br><br>**可选值**:<br>'single', 'multiple' | Enum | 'multiple'\nshallowSelect | 如果此属性为true，表明只会选中第一级的菜单 | Boolean | -\nonSelect | 选中/取消选中了任意MenuItem<br><br>**签名**:<br>Function(selectedKeys: Array, menuItem: MenuItem, meta: Object) => void<br>**参数**:<br>*selectedKeys*: {Array} 选中的菜单的key<br>*menuItem*: {MenuItem} 当前点击的菜单项的实例<br>*meta*: {Object} 选中菜单项的上下级关系 | Function | () =&gt; {}\nonDeselect | 取消选中的菜单项<br><br>**签名**:<br>Function(selectedKey: String) => void<br>**参数**:<br>*selectedKey*: {String} 取消选中的菜单项的key | Function | () =&gt; {}\nonClick | 点击菜单项触发的事件<br><br>**签名**:<br>Function(selectedKeys: Array, menuItem: MenuItem, meta: Object) => void<br>**参数**:<br>*selectedKeys*: {Array} 点击的菜单项的key<br>*menuItem*: {MenuItem} 当前点击的菜单项的实例<br>*meta*: {Object} 选中菜单项的上下级关系 | Function | () =&gt; {}\nonOpen | 打开子菜单的时候触发的事件<br><br>**签名**:<br>Function(openKeys: Array) => void<br>**参数**:<br>*openKeys*: {Array} 打开的子菜单的key | Function | () =&gt; {}\nhasIcon | 是否带有菜单的图标 | Boolean | false\nindentSize | 级联菜单下面缩进的尺寸 | Number | 20\nheader | 配置菜单的头部 | any | -\nfooter | 配置菜单的底部 | any | -\nmultipleCol | 是否启用多列模式 | Boolean | false\nautoFocusFirstItem | 是否让第一个菜单自动获取焦点 | Boolean | false\nautoFocus | 是否启用设置焦点功能 | Boolean | true\nfocusedKey | 焦点项索引值 | String | -\ndirection | 菜单的方向<br><br>**可选值**:<br>'ver', 'hoz' | Enum | 'ver'\n",
    "methodREADME": [
      "**签名**:<br>Function() => mixed<br>**返回值**:<br>{mixed} null<br>",
      "**签名**:<br>Function() => mixed<br>**返回值**:<br>{mixed} null<br>",
      "**签名**:<br>Function() => mixed<br>**返回值**:<br>{mixed} null<br>"
    ],
    "subComponentsREADME": [
      {
        "name": "CheckboxItem",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nhelper | 显示在菜单右侧的帮助文本，通常用于一些附加信息 | String | null\ndisabled | 禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio | Boolean | false\nonClick | 点击了菜单项触发的事件<br><br>**签名**:<br>Function(key: String, e: Event) => void<br>**参数**:<br>*key*: {String} 当前菜单项的key值<br>*e*: {Event} DOM事件 | Function | () =&gt; {}\nneedIndent | 是否显示缩进 | Boolean | true\nchecked | 当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高 | Boolean | -\nonChange | 选择被改变的时候触发的事件<br><br>**签名**:<br>Function(checked: Boolean) => void<br>**参数**:<br>*checked*: {Boolean} 是否选中 | Function | () =&gt; {}\n",
        "methodREADME": []
      },
      {
        "name": "Divider",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\n",
        "methodREADME": []
      },
      {
        "name": "Group",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nlabel | 分组的标签 | any | 'menu-group'\n",
        "methodREADME": []
      },
      {
        "name": "Item",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nhelper | 显示在菜单右侧的帮助文本，通常用于一些附加信息 | String | null\ndisabled | 禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio | Boolean | false\nselected | 当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高 | Boolean | -\nonClick | 点击了菜单项触发的事件<br><br>**签名**:<br>Function(key: String, e: Event) => void<br>**参数**:<br>*key*: {String} 当前菜单项的key值<br>*e*: {Event} DOM事件 | Function | () =&gt; {}\nhasSelectedIcon | 是否显示选中图标 | Boolean | true\nneedIndent | 是否显示缩进 | Boolean | true\n",
        "methodREADME": []
      },
      {
        "name": "PopupItem",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ndisabled | 禁用当前菜单项, 被禁用不会触发事件 | Boolean | false\nlabel | 菜单项的标签 | any | 'popup-item'\nautoWidth | 是否自动让弹出层的宽度和菜单项保持一致，逻辑是如果弹出层的宽度比菜单项小的话和菜单项保持一致，如果宽度大于菜单项则不做处理 | Boolean | false\n",
        "methodREADME": []
      },
      {
        "name": "RadioItem",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nhelper | 显示在菜单右侧的帮助文本，通常用于一些附加信息 | String | null\ndisabled | 禁用当前菜单项, 被禁用不会触发事件, 也无法选中Checkbox/Radio | Boolean | false\nonClick | 点击了菜单项触发的事件<br><br>**签名**:<br>Function(key: String, e: Event) => void<br>**参数**:<br>*key*: {String} 当前菜单项的key值<br>*e*: {Event} DOM事件 | Function | () =&gt; {}\nneedIndent | 是否显示缩进 | Boolean | true\nchecked | 当前的菜单项是否被选中, 优先级比Menu传入的selectedKeys要高 | Boolean | -\nonChange | 选择被改变的时候触发的事件<br><br>**签名**:<br>Function(checked: Boolean) => void<br>**参数**:<br>*checked*: {Boolean} 是否选中 | Function | () =&gt; {}\n",
        "methodREADME": []
      },
      {
        "name": "SubMenu",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nlabel | 子菜单的标签 | any | 'sub-item'\nvisible | 设置子菜单的显示状态 | Boolean | -\nmode | 设置子菜单表现的形式<br><br>**可选值**:<br>'inline', 'popup' | Enum | 'inline'\ntriggerType | 设置子菜单显示触发的类型<br><br>**可选值**:<br>'click', 'hover' | Enum | 'click'\nselectable | 设置子菜单的label是否可以被选中 | Boolean | false\nalign | 设置子菜单的跟随类型<br><br>**可选值**:<br>'outside', 'follow' | Enum | 'follow'\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onClick={onClick} className=\"customize-limit\">\n    <Menu.Item key=\"1\">Option 1</Menu.Item>\n    <Menu.Item disabled key=\"2\">\n      Option 2\n    </Menu.Item>\n    <Menu.Divider key=\"d\" />\n    <Menu.SubMenu label=\"Sub Menu\">\n      <Menu.Item>Option 3</Menu.Item>\n    </Menu.SubMenu>\n    <Menu.Item>Option 4</Menu.Item>\n  </Menu>,\n  mountNode\n);\n\n",
        "css": ".customize-limit {\n    width: 200px;\n}\n",
        "body": "\n最简单的用法\n\n"
      },
      {
        "title": "分组",
        "order": "1",
        "jsx": "import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onClick={onClick} className=\"customize-limit\">\n    <Menu.Group label=\"Group 1\" key=\"xxx\">\n      <Menu.Item key=\"1\">Option 1</Menu.Item>\n      <Menu.Item key=\"2\">Option 2</Menu.Item>\n      <Menu.Item key=\"3\">Option 3</Menu.Item>\n    </Menu.Group>\n    <Menu.Group label=\"Group 2\" key=\"xyz\">\n      <Menu.Item key=\"12\">Option 1</Menu.Item>\n      <Menu.Item key=\"22\">Option 2</Menu.Item>\n      <Menu.Item key=\"32\">Option 3</Menu.Item>\n    </Menu.Group>\n  </Menu>,\n  mountNode\n);\n\n",
        "css": ".customize-limit {\n    width: 200px;\n}\n",
        "body": "\n分组菜单\n\n"
      },
      {
        "title": "头尾",
        "order": "2",
        "jsx": "import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu\n    onClick={onClick}\n    className=\"customize-limit\"\n    header={<h3>分组菜单</h3>}\n    footer={<h3>菜单尾部</h3>}\n  >\n    <Menu.Item key=\"1\" helper=\"CTRL+P\">\n      Option 1\n    </Menu.Item>\n    <Menu.Item key=\"2\">Option 2</Menu.Item>\n    <Menu.Item key=\"3\">Option 3</Menu.Item>\n    <Menu.Item key=\"4\">Option 4</Menu.Item>\n  </Menu>,\n  mountNode\n);\n\n",
        "css": ".customize-limit {\n    width: 200px;\n}\n.customize-limit h3 {\n    padding-left:10px;\n    font-size:14px;\n    color:#666;\n    margin:0;\n}\n",
        "body": "\n可以设置菜单的头尾\n\n"
      },
      {
        "title": "Checkbox模式",
        "order": "9",
        "jsx": "import { Menu } from \"@icedesign/base\";\n\nconst onSelect = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <div>\n    <Menu onSelect={onSelect} className=\"customize-limit\">\n      <Menu.CheckboxItem key=\"1\">Option 1</Menu.CheckboxItem>\n      <Menu.CheckboxItem disabled key=\"2\">\n        Option 2\n      </Menu.CheckboxItem>\n      <Menu.Divider key=\"5\" />\n      <Menu.CheckboxItem key=\"3\">Option 3</Menu.CheckboxItem>\n      <Menu.CheckboxItem key=\"4\">Option 4</Menu.CheckboxItem>\n    </Menu>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".customize-limit {\n    width: 200px;\n}\n",
        "body": "\n多选菜单 Checkbox 模式\n\n"
      },
      {
        "title": "普通多选",
        "order": "7",
        "jsx": "import { Menu } from \"@icedesign/base\";\n\nconst onSelect = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onSelect={onSelect} selectMode=\"multiple\" className=\"customize-limit\">\n    <Menu.Item key=\"1\">Option 1</Menu.Item>\n    <Menu.Item disabled key=\"2\">\n      Option 2\n    </Menu.Item>\n    <Menu.Divider key=\"5\" />\n    <Menu.Item key=\"3\">Option 3</Menu.Item>\n    <Menu.Item key=\"4\">Option 4</Menu.Item>\n  </Menu>,\n  mountNode\n);\n\n",
        "css": ".customize-limit {\n    width: 200px;\n}\n",
        "body": "\n多选菜单\n\n"
      },
      {
        "title": "外部弹出菜单",
        "order": "5",
        "jsx": "import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onClick={onClick} className=\"customize-limit\">\n    <Menu.PopupItem label=\"Popup Item 1\" key=\"xxx\">\n      <Menu>\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item key=\"2\">Option 2</Menu.Item>\n      </Menu>\n    </Menu.PopupItem>\n    <Menu.PopupItem label=\"Popup Item 2\" key=\"yyy\">\n      <Menu>\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n      </Menu>\n    </Menu.PopupItem>\n  </Menu>,\n  mountNode\n);\n\n",
        "css": ".customize-limit {\n    width: 200px;\n}\n",
        "body": "\n使用 PopupItem 弹出子菜单，与 SubMenu[mode=popup] 的区别是子菜单会渲染到追加到 body 尾部的外部节点中\n\n"
      },
      {
        "title": "Radio模式",
        "order": "8",
        "jsx": "import { Menu } from \"@icedesign/base\";\n\nconst onSelect = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onSelect={onSelect} className=\"customize-limit\">\n    <Menu.RadioItem key=\"1\">Option 1</Menu.RadioItem>\n    <Menu.RadioItem disabled key=\"2\">\n      Option 2\n    </Menu.RadioItem>\n    <Menu.Divider key=\"5\" />\n    <Menu.RadioItem key=\"3\">Option 3</Menu.RadioItem>\n    <Menu.RadioItem key=\"4\">Option 4</Menu.RadioItem>\n  </Menu>,\n  mountNode\n);\n\n",
        "css": ".customize-limit {\n    width: 200px;\n}\n",
        "body": "\n单选菜单 Radio 模式\n\n"
      },
      {
        "title": "单选",
        "order": "6",
        "jsx": "import { Menu } from \"@icedesign/base\";\n\nconst onSelect = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onSelect={onSelect} selectMode=\"single\" className=\"customize-limit\">\n    <Menu.Item key=\"1\">Option 1</Menu.Item>\n    <Menu.Item disabled key=\"2\">\n      Option 2\n    </Menu.Item>\n    <Menu.Divider key=\"5\" />\n    <Menu.Item key=\"3\">Option 3</Menu.Item>\n    <Menu.Item key=\"4\">Option 4</Menu.Item>\n  </Menu>,\n  mountNode\n);\n\n",
        "css": ".customize-limit {\n    width: 200px;\n}\n",
        "body": "\n单选菜单\n\n"
      },
      {
        "title": "内联菜单",
        "order": "3",
        "jsx": "import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onClick={onClick} openMode=\"single\" className=\"customize-limit\">\n    <Menu.SubMenu label=\"Sub Menu 1\" key=\"xxx\">\n      <Menu.Item key=\"1\">Option 1</Menu.Item>\n      <Menu.Item key=\"2\">Option 2</Menu.Item>\n    </Menu.SubMenu>\n    <Menu.SubMenu label=\"Sub Menu 2\" key=\"yyy\">\n      <Menu.Item key=\"3\">Option 3</Menu.Item>\n    </Menu.SubMenu>\n  </Menu>,\n  mountNode\n);\n\n",
        "css": ".customize-limit {\n    width: 200px;\n}\n",
        "body": "\nSubMenu 的内联模式\n\n"
      },
      {
        "title": "弹出菜单",
        "order": "4",
        "jsx": "import { Menu } from \"@icedesign/base\";\n\nconst onClick = (...args) => {\n  console.log(...args);\n};\n\nReactDOM.render(\n  <Menu onClick={onClick} openMode=\"single\" className=\"customize-limit\">\n    <Menu.SubMenu mode=\"popup\" label=\"Sub Menu 1\" key=\"xxx\">\n      <Menu.Item key=\"1\">Option 1</Menu.Item>\n      <Menu.Item key=\"2\">Option 2</Menu.Item>\n    </Menu.SubMenu>\n    <Menu.SubMenu mode=\"popup\" label=\"Sub Menu 2\" key=\"yyy\">\n      <Menu.Item key=\"3\">Option 3</Menu.Item>\n    </Menu.SubMenu>\n  </Menu>,\n  mountNode\n);\n\n",
        "css": ".customize-limit {\n    width: 200px;\n}\n",
        "body": "\nSubMenu 的弹出模式，与 PopupItem 的区别是子菜单会被渲染在内容区域里\n\n"
      },
      {
        "title": "子菜单标签可选",
        "order": "10",
        "jsx": "import { Radio, Menu } from \"@icedesign/base\";\n\nconst onSelect = (...args) => {\n  console.log(...args);\n};\n\nclass App extends React.Component {\n  state = {\n    subMenuSelectable: false\n  };\n\n  toggleSubMenuSelectable = value => {\n    this.setState({\n      subMenuSelectable: value === \"true\"\n    });\n  };\n\n  render() {\n    const { subMenuSelectable } = this.state;\n\n    return (\n      <div>\n        <div className=\"button-wraper\">\n          <Radio.Group\n            shape=\"button\"\n            size=\"large\"\n            value={subMenuSelectable ? \"true\" : \"false\"}\n            onChange={this.toggleSubMenuSelectable}\n          >\n            <Radio value=\"false\">子菜单标签不可选</Radio>\n            <Radio value=\"true\">子菜单标签可选</Radio>\n          </Radio.Group>\n        </div>\n        <Menu\n          selectMode=\"single\"\n          onSelect={onSelect}\n          defaultOpenKeys={[\"4\", \"5\"]}\n          openMode=\"multiple\"\n          className=\"customize-limit\"\n        >\n          <Menu.Item key=\"1\">Option 1</Menu.Item>\n          <Menu.Item key=\"2\">Option 2</Menu.Item>\n          <Menu.Item key=\"3\">Option 3</Menu.Item>\n          <Menu.SubMenu\n            key=\"4\"\n            label=\"Sub Menu 1\"\n            selectable={this.state.subMenuSelectable}\n          >\n            <Menu.Item key=\"4-1\">Option 1</Menu.Item>\n            <Menu.Item key=\"4-2\">Option 2</Menu.Item>\n          </Menu.SubMenu>\n          <Menu.SubMenu\n            key=\"5\"\n            label=\"Sub Menu 2\"\n            selectable={this.state.subMenuSelectable}\n          >\n            <Menu.Item key=\"5-1\">Option 1</Menu.Item>\n            <Menu.Item key=\"5-2\">Option 2</Menu.Item>\n          </Menu.SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".button-wraper {\n    margin: 0 0 20px 0;\n}\n.customize-limit{\n    width:200px;\n}\n",
        "body": "\n"
      }
    ]
  },
  {
    "name": "Moment",
    "category": "Components",
    "title": "时间处理",
    "type": "基本",
    "importStatement": "import { moment } from '@icedesign/base';",
    "body": "\n## Guide\n\nmoment.js 是一个 JavaScript 日期处理类库，用于解析、检验、操作、以及显示日期。\n本组件是 moment.js 的一个精简版，删掉了多余的 locale，留下主流的 locale 文案。\n具体用法参考 [moment.js](https://momentjs.com/docs/#/parsing/) 的官方文档。\n\n语言 | 缩写 | 备注\n----- | ----- | -----\n英语 | en-us | 默认\n阿拉伯语 | ar |\n德语 | de |\n西班牙语 | es |\n法语 | fr |\n印地语 | hi |\n意大利语 | it |\n日语 | ja |\n韩语 | ko |\n葡萄牙语 | pt |\n俄语 | ru |\n简体中文 | zh-cn |\n繁体中文 | zh-hk |\n繁体中文 | zh-tw |\n\n如果您不熟悉 moment.js ，强烈建议您先阅读官方的文档。\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { moment } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lang: \"zh-cn\"\n    };\n  }\n  onChangeLang(e) {\n    this.setState({\n      lang: e.target.value\n    });\n  }\n  render() {\n    const { lang } = this.state;\n\n    moment.locale(lang);\n\n    return (\n      <div>\n        <select value={lang} onChange={this.onChangeLang.bind(this)}>\n          <option value=\"none\">none</option>\n          <option value=\"en-us\">en-us</option>\n          <option value=\"ar\">ar</option>\n          <option value=\"de\">de</option>\n          <option value=\"es\">es</option>\n          <option value=\"fr\">fr</option>\n          <option value=\"hi\">hi</option>\n          <option value=\"it\">it</option>\n          <option value=\"ja\">ja</option>\n          <option value=\"ko\">ko</option>\n          <option value=\"pt\">pt</option>\n          <option value=\"ru\">ru</option>\n          <option value=\"zh-cn\">zh-cn</option>\n          <option value=\"zh-hk\">zh-hk</option>\n          <option value=\"zh-tw\">zh-tw</option>\n        </select>\n        <br />\n        <br />\n        <h3>Format Dates</h3>\n        <ul className=\"box\">\n          <li>\n            <span className=\"code\">\n              moment().format('MMMM Do YYYY, h:mm:ss a');\n            </span>\n            <span className=\"display\">\n              //{moment().format(\"MMMM Do YYYY, h:mm:ss a\")}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format('dddd');</span>\n            <span className=\"display\">//{moment().format(\"dddd\")}</span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format(\"MMM Do YY\");</span>\n            <span className=\"display\">//{moment().format(\"MMM Do YY\")}</span>\n          </li>\n          <li>\n            <span className=\"code\">\n              moment().format('YYYY [escaped] YYYY');\n            </span>\n            <span className=\"display\">\n              //{moment().format(\"YYYY [escaped] YYYY\")}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format();</span>\n            <span className=\"display\">//{moment().format()}</span>\n          </li>\n        </ul>\n        <h3>Relative Time</h3>\n        <ul className=\"box\">\n          <li>\n            <span className=\"code\">\n              moment(\"20111031\", \"YYYYMMDD\").fromNow();\n            </span>\n            <span className=\"display\">\n              //{moment(\"20111031\", \"YYYYMMDD\").fromNow()}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().startOf('day').fromNow();</span>\n            <span className=\"display\">\n              //{moment()\n                .startOf(\"day\")\n                .fromNow()}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().endOf('day').fromNow();</span>\n            <span className=\"display\">\n              //{moment()\n                .endOf(\"day\")\n                .fromNow()}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().startOf('hour').fromNow();</span>\n            <span className=\"display\">\n              //{moment()\n                .startOf(\"hour\")\n                .fromNow()}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format();</span>\n            <span className=\"display\">//{moment().format()}</span>\n          </li>\n        </ul>\n        <h3>Calendar Time</h3>\n        <ul className=\"box\">\n          <li>\n            <span className=\"code\">\n              moment().subtract(10, 'days').calendar();\n            </span>\n            <span className=\"display\">\n              //{moment()\n                .subtract(10, \"days\")\n                .calendar()}\n            </span>\n          </li>\n          <li>\n            <span className=\"code\">moment().calendar();</span>\n            <span className=\"display\">//{moment().calendar()}</span>\n          </li>\n          <li>\n            <span className=\"code\">moment().add(10, 'days').calendar();</span>\n            <span className=\"display\">\n              //{moment()\n                .add(10, \"days\")\n                .calendar()}\n            </span>\n          </li>\n        </ul>\n        <h3>Multiple Locale Support</h3>\n        <ul className=\"box\">\n          <li>\n            <span className=\"code\">moment.locale();</span>\n            <span className=\"display\">//{moment.locale()}</span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format('LT');</span>\n            <span className=\"display\">//{moment().format(\"LT\")}</span>\n          </li>\n          <li>\n            <span className=\"code\">moment().format('LLLL');</span>\n            <span className=\"display\">//{moment().format(\"LLLL\")}</span>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".box {\n    list-style: none;\n    border: 1px solid rgba(34,34,34,0.2);\n    border-radius: 4px;\n    color: #000;\n    font-size: 14px;\n    padding: 5px 8px;\n    margin: 0 0 20px;\n    line-height: 24px;\n    background: rgba(34,34,34,0.03);\n}\n.code {\n    display: inline-block;\n    width: 50%;\n}\n.display {\n    color: rgba(34,34,34,0.5);\n}\n",
        "body": "\n最简单的用法。\n\n"
      }
    ]
  },
  {
    "name": "Nav",
    "category": "Components",
    "title": "导航",
    "type": "导航",
    "importStatement": "import { Nav } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。\n\n可以替代原来的 Navigation 组件使用\n\n### 注意事项\n\n-   icononly 只适用垂直方向。\n\n-   Nav所有事件都继承自Menu，请参考Menu的API。\n\n",
    "propsSchema": {
      "name": "Nav",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false,
                "description": "正常"
              },
              {
                "value": "'primary'",
                "computed": false,
                "description": "主要"
              },
              {
                "value": "'secondary'",
                "computed": false,
                "description": "次要"
              },
              {
                "value": "'text'",
                "computed": false,
                "description": "文字"
              },
              {
                "value": "'line'",
                "computed": false,
                "description": "线形"
              }
            ]
          },
          "required": false,
          "description": "导航类型",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "导航类型\n@enumdesc 正常, 主要, 次要, 文字, 线形",
          "value": [
            {
              "value": "'normal'",
              "computed": false,
              "description": "正常"
            },
            {
              "value": "'primary'",
              "computed": false,
              "description": "主要"
            },
            {
              "value": "'secondary'",
              "computed": false,
              "description": "次要"
            },
            {
              "value": "'text'",
              "computed": false,
              "description": "文字"
            },
            {
              "value": "'line'",
              "computed": false,
              "description": "线形"
            }
          ]
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'hoz'",
                "computed": false,
                "description": "水平"
              },
              {
                "value": "'ver'",
                "computed": false,
                "description": "垂直"
              }
            ]
          },
          "required": false,
          "description": "导航方向",
          "defaultValue": {
            "value": "'ver'",
            "computed": false
          },
          "docblock": "导航方向\n@enumdesc 水平, 垂直",
          "value": [
            {
              "value": "'hoz'",
              "computed": false,
              "description": "水平"
            },
            {
              "value": "'ver'",
              "computed": false,
              "description": "垂直"
            }
          ]
        },
        "activeDirection": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "null",
                "computed": false,
                "description": "无"
              },
              {
                "value": "'top'",
                "computed": false,
                "description": "上"
              },
              {
                "value": "'bottom'",
                "computed": false,
                "description": "下"
              },
              {
                "value": "'left'",
                "computed": false,
                "description": "左"
              },
              {
                "value": "'right'",
                "computed": false,
                "description": "右"
              }
            ]
          },
          "required": false,
          "description": "设置组件选中状态的active边方向",
          "docblock": "设置组件选中状态的active边方向\n@enumdesc 无, 上, 下, 左, 右",
          "value": [
            {
              "value": "null",
              "computed": false,
              "description": "无"
            },
            {
              "value": "'top'",
              "computed": false,
              "description": "上"
            },
            {
              "value": "'bottom'",
              "computed": false,
              "description": "下"
            },
            {
              "value": "'left'",
              "computed": false,
              "description": "左"
            },
            {
              "value": "'right'",
              "computed": false,
              "description": "右"
            }
          ]
        },
        "popupAlign": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'follow'",
                "computed": false
              },
              {
                "value": "'outside'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Tree 展开时候右侧子item的对齐方式",
          "defaultValue": {
            "value": "'follow'",
            "computed": false
          },
          "docblock": "Tree 展开时候右侧子item的对齐方式"
        },
        "triggerType": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'click'",
                "computed": false
              },
              {
                "value": "'hover'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "PopupItem触发方式",
          "docblock": "PopupItem触发方式"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义class",
          "docblock": "自定义class"
        },
        "iconOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "控制icon是否展示",
          "docblock": "控制icon是否展示"
        },
        "hasTooltip": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否有ToolTIps(仅在iconOnly=true时生效)",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否有ToolTIps(仅在iconOnly=true时生效)"
        },
        "hasArrow": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示右侧的箭头(仅在iconOnly=true时生效)",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示右侧的箭头(仅在iconOnly=true时生效)"
        }
      },
      "methods": [],
      "description": "继承自`Menu`的能力请查看`Menu`文档",
      "subComponents": [
        {
          "name": "Group",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式前缀"
            }
          },
          "methods": [],
          "description": "继承自`Menu.Group`的能力请查看`Menu.Group`文档"
        },
        {
          "name": "Item",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式前缀"
            },
            "icon": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "node"
                  }
                ]
              },
              "required": false,
              "description": "自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`",
              "docblock": "自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`"
            }
          },
          "methods": [],
          "description": "继承自`Menu.Item`的能力请查看`Menu.Item`文档"
        },
        {
          "name": "PopupItem",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式前缀"
            },
            "icon": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "node"
                  }
                ]
              },
              "required": false,
              "description": "自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`",
              "docblock": "自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`"
            }
          },
          "methods": [],
          "description": "继承自`Menu.PopupItem`的能力请查看`Menu.PopupItem`文档"
        },
        {
          "name": "SubNav",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式前缀"
            },
            "icon": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "node"
                  }
                ]
              },
              "required": false,
              "description": "自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`",
              "docblock": "自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>`"
            }
          },
          "methods": [],
          "description": "继承自`Menu.SubMenu`的能力请查看`Menu.SubMenu`文档"
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\ntype | 导航类型<br><br>**可选值**:<br>'normal'(正常)<br>'primary'(主要)<br>'secondary'(次要)<br>'text'(文字)<br>'line'(线形) | Enum | 'normal'\ndirection | 导航方向<br><br>**可选值**:<br>'hoz'(水平)<br>'ver'(垂直) | Enum | 'ver'\nactiveDirection | 设置组件选中状态的active边方向<br><br>**可选值**:<br>null(无)<br>'top'(上)<br>'bottom'(下)<br>'left'(左)<br>'right'(右) | Enum | -\npopupAlign | Tree 展开时候右侧子item的对齐方式<br><br>**可选值**:<br>'follow', 'outside' | Enum | 'follow'\ntriggerType | PopupItem触发方式<br><br>**可选值**:<br>'click', 'hover' | Enum | -\nclassName | 自定义class | String | -\niconOnly | 控制icon是否展示 | Boolean | -\nhasTooltip | 是否有ToolTIps(仅在iconOnly=true时生效) | Boolean | false\nhasArrow | 是否显示右侧的箭头(仅在iconOnly=true时生效) | Boolean | true\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Group",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\n",
        "methodREADME": []
      },
      {
        "name": "Item",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nicon | 自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>` | String/ReactNode | -\n",
        "methodREADME": []
      },
      {
        "name": "PopupItem",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nicon | 自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>` | String/ReactNode | -\n",
        "methodREADME": []
      },
      {
        "name": "SubNav",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nicon | 自定义图标，可以使用Icon的type, 也可以使用组件`<Icon type=\"your type\"/>` | String/ReactNode | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "选中状态",
        "order": "2",
        "jsx": "import { Nav, Select, Switch, Field } from \"@icedesign/base\";\n\nconst { Item } = Nav;\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  render() {\n    const { init, getValue } = this.field;\n\n    return (\n      <div>\n        <div className=\"demo-ctl\">\n          <Switch\n            checkedChildren=\"横\"\n            unCheckedChildren=\"竖\"\n            {...init(\"direction\")}\n          />\n          <Select\n            placeholder=\"active 位置\"\n            {...init(\"activeDirection\", { initValue: \"left\" })}\n          >\n            <Option value=\"\">无</Option>\n            <Option value=\"top\">top</Option>\n            <Option value=\"bottom\">bottom</Option>\n            <Option value=\"left\">left</Option>\n            <Option value=\"right\">right</Option>\n          </Select>\n        </div>\n        <br />\n\n        <Nav\n          style={{ width: getValue(\"direction\") ? \"100%\" : \"240px\" }}\n          direction={getValue(\"direction\") ? \"hoz\" : \"ver\"}\n          activeDirection={getValue(\"activeDirection\")}\n          defaultSelectedKeys={[\"1\"]}\n        >\n          <Item key=\"1\" icon=\"service\" hasSelectedIcon={false}>\n            Value Added Service\n          </Item>\n          <Item key=\"2\" icon=\"training\">\n            Training\n          </Item>\n          <Item key=\"3\" icon=\"favorite\">\n            Favorite\n          </Item>\n          <Item key=\"4\" icon=\"history\">\n            History\n          </Item>\n          <Item key=\"5\" icon=\"attachment\">\n            Attachment\n          </Item>\n          <Item key=\"6\" icon=\"electronics\">\n            Electronics\n          </Item>\n        </Nav>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo-ctl {\n  background-color: #f1f1f1;\n  padding: 10.0px;\n  color: #0a7ac3;\n  border-left: 4.0px solid #0d599a;\n}\n.demo-ctl .next-switch {\n  margin-right: 20px;\n}\n",
        "body": "\ndirection水平方向只支持top/bottom，垂直方向只支持left/right。\nactiveDirection=top,bottom,left,right\n等待Menu支持\n\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Nav, Icon, Menu } from \"@icedesign/base\";\n\nconst { Item, PopupItem } = Nav;\n\nReactDOM.render(\n  <Nav direction=\"hoz\" activeDirection=\"bottom\">\n    <Item key=\"1\" icon=\"service\">\n      First\n    </Item>\n    <Item key=\"2\">Training</Item>\n    <Item key=\"3\" icon=\"favorite\">\n      Favorite\n    </Item>\n    <Item key=\"4\">\n      <a href=\"http://www.taobao.com\" target=\"_blank\">\n        <Icon type=\"attachment\" />Taobao\n      </a>\n    </Item>\n    <PopupItem key=\"5\" icon=\"history\" label=\"History\">\n      <Menu>\n        <Menu.Item key=\"51\">Option 1</Menu.Item>\n        <Menu.Item key=\"52\">Option 3</Menu.Item>\n        <Menu.Item disabled key=\"54\">\n          Option 2\n        </Menu.Item>\n        <Menu.Item key=\"53\">Option 4</Menu.Item>\n      </Menu>\n    </PopupItem>\n    <PopupItem key=\"6\" icon=\"electronics\" label=\"Sub Nav\">\n      <Menu>\n        <Menu.Item key=\"61\">Option 1</Menu.Item>\n        <Menu.Item key=\"62\">Option 3</Menu.Item>\n        <Menu.Item key=\"63\">Option 4</Menu.Item>\n        <Menu.PopupItem key=\"64\" label=\"popup\">\n          <Menu>\n            <Menu.Item key=\"640\">Option 1</Menu.Item>\n            <Menu.Item key=\"641\">Option 3</Menu.Item>\n            <Menu.Item key=\"642\">Option 4</Menu.Item>\n          </Menu>\n        </Menu.PopupItem>\n      </Menu>\n    </PopupItem>\n  </Nav>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n横向导航\n\n"
      },
      {
        "title": "分组",
        "order": "5",
        "jsx": "import { Nav } from \"@icedesign/base\";\n\nconst { Item, Group } = Nav;\n\nReactDOM.render(\n  <Nav style={{ width: 240 }}>\n    <Group label=\"Website List\">\n      <Item key=\"1\" icon=\"service\">\n        Value Added Service\n      </Item>\n      <Item key=\"2\" icon=\"training\" disabled>\n        Training\n      </Item>\n      <Item key=\"3\" icon=\"favorite\">\n        Favorite\n      </Item>\n      <Item key=\"4\" icon=\"history\">\n        History\n      </Item>\n      <Item key=\"5\" icon=\"attachment\">\n        Attachment\n      </Item>\n      <Item key=\"6\" icon=\"electronics\">\n        Electronics\n      </Item>\n    </Group>\n  </Nav>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\ngroup\n\n"
      },
      {
        "title": "图标",
        "order": "4",
        "jsx": "import { Nav, Switch, Field } from \"@icedesign/base\";\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  render() {\n    const { init, getValue } = this.field;\n    return (\n      <div>\n        <Switch\n          {...init(\"iconOnly\", { initValue: true, valueName: \"checked\" })}\n        />\n        <br />\n        <Nav\n          iconOnly={getValue(\"iconOnly\")}\n          hasTooltip\n          style={{ display: \"inline-block\" }}\n        >\n          <Item key=\"1\" icon=\"service\">\n            Value Added Service\n          </Item>\n          <Item key=\"2\" icon=\"training\">\n            Training\n          </Item>\n          <Item key=\"3\" icon=\"favorite\">\n            Favorite\n          </Item>\n          <Item key=\"4\" icon=\"history\">\n            History\n          </Item>\n          <Item key=\"5\" icon=\"attachment\">\n            Attachment\n          </Item>\n          <Item key=\"6\" icon=\"electronics\">\n            Electronics\n          </Item>\n          <SubNav key=\"sub4\" label=\" Nav Three\">\n            <Item key=\"9\" icon=\"favorite\">\n              Option 9\n            </Item>\n            <Item key=\"10\" icon=\"favorite\">\n              Option 10\n            </Item>\n            <Item key=\"11\" icon=\"favorite\">\n              Option 11\n            </Item>\n            <Item key=\"12\" icon=\"favorite\">\n              Option 12\n            </Item>\n          </SubNav>\n        </Nav>\n        <br />\n        无箭头(hover最后一个item)\n        <br />\n        <Nav\n          iconOnly={getValue(\"iconOnly\")}\n          hasArrow={false}\n          hasTooltip\n          triggerType=\"hover\"\n          style={{ display: \"inline-block\" }}\n        >\n          <Item key=\"1\" icon=\"service\">\n            Value Added Service\n          </Item>\n          <Item key=\"2\" icon=\"training\">\n            Training\n          </Item>\n          <Item key=\"3\" icon=\"favorite\">\n            Favorite\n          </Item>\n          <Item key=\"4\" icon=\"history\">\n            History\n          </Item>\n          <Item key=\"5\" icon=\"attachment\">\n            Attachment\n          </Item>\n          <SubNav mode=\"popup\" key=\"sub4\" icon=\"electronics\" label=\"Nav Three\">\n            <Item key=\"9\" icon=\"favorite\">\n              Option 9\n            </Item>\n            <Item key=\"10\" icon=\"favorite\">\n              Option 10\n            </Item>\n            <Item key=\"11\" icon=\"favorite\">\n              Option 11\n            </Item>\n            <Item key=\"12\" icon=\"favorite\">\n              Option 12\n            </Item>\n          </SubNav>\n        </Nav>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\niconOnly切换图标\n\n"
      },
      {
        "title": "自定义头尾",
        "order": "3",
        "jsx": "import { Nav, Icon, Switch } from \"@icedesign/base\";\n\nconst { Item } = Nav;\n\nclass App extends React.Component {\n  state = { direction: \"hoz\" };\n\n  onChange(v) {\n    this.setState({\n      direction: v ? \"hoz\" : \"ver\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Switch\n          checkedChildren=\"横\"\n          unCheckedChildren=\"竖\"\n          defaultChecked\n          onChange={this.onChange.bind(this)}\n        />\n        <br />\n        <br />\n\n        <div>\n          <Nav\n            direction={this.state.direction}\n            type=\"primary\"\n            header={\n              <img\n                style={{ margin: \"0 10px\" }}\n                src=\"http://c.sg.ali-lazada.com/lazada/lib/0.0.1/image/lsc-logo.png\"\n              />\n            }\n            footer={\n              <div style={{ margin: \"0 10px\", lineHeight: \"44px\" }}>\n                <a href=\"javascript:;\"> Login in</a>\n              </div>\n            }\n          >\n            <Item key=\"1\" icon=\"service\">\n              Value Added Service\n            </Item>\n            <Item key=\"2\" icon=\"training\">\n              Training\n            </Item>\n            <Item key=\"3\" icon=\"favorite\">\n              Favorite\n            </Item>\n            <Item key=\"4\" icon=\"history\">\n              History\n            </Item>\n            <Item key=\"5\">\n              <a href=\"http://www.taobao.com\" target=\"_blank\">\n                <Icon type=\"attachment\" />Link\n              </a>\n            </Item>\n            <Item key=\"6\" icon=\"electronics\">\n              Electronics\n            </Item>\n          </Nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n自定义导航头尾\n\n"
      },
      {
        "title": "弹出",
        "order": "7",
        "jsx": "import { Nav, Icon } from \"@icedesign/base\";\n\nconst { Item, SubNav } = Nav;\n\nReactDOM.render(\n  <div>\n    <Nav style={{ width: 240 }} popupAlign=\"outside\" defaultOpenKeys={[\"sub2\"]}>\n      <SubNav\n        key=\"sub1\"\n        mode=\"popup\"\n        label={\n          <span>\n            <Icon type=\"service\" size=\"small\" />\n            <span> Nav One</span>\n          </span>\n        }\n      >\n        <Item key=\"1\">Option 1</Item>\n        <Item key=\"2\">Option 2</Item>\n        <Item key=\"3\">Option 3</Item>\n        <Item key=\"4\">Option 4</Item>\n      </SubNav>\n      <SubNav\n        key=\"sub2\"\n        mode=\"popup\"\n        label={\n          <span>\n            <Icon type=\"training\" size=\"small\" />\n            <span> Nav Two</span>\n          </span>\n        }\n      >\n        <Item key=\"5\">Option 5</Item>\n        <Item key=\"6\">Option 6</Item>\n      </SubNav>\n      <SubNav\n        key=\"sub3\"\n        mode=\"popup\"\n        label={\n          <span>\n            <Icon type=\"favorite\" size=\"small\" />\n            <span> Nav Three</span>\n          </span>\n        }\n      >\n        <Item key=\"9\">Option 9</Item>\n        <Item key=\"10\">Option 10</Item>\n        <Item key=\"11\">Option 11</Item>\n        <Item key=\"12\">Option 12</Item>\n      </SubNav>\n      <SubNav\n        key=\"sub4\"\n        mode=\"popup\"\n        label={\n          <span>\n            <Icon type=\"favorite\" size=\"small\" />\n            <span> Nav Three</span>\n          </span>\n        }\n      >\n        <Item key=\"21\">Option 9</Item>\n        <Item key=\"22\">Option 10</Item>\n        <Item key=\"23\">Option 11</Item>\n        <Item key=\"24\">Option 12</Item>\n      </SubNav>\n    </Nav>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\noutside: Nav顶端对齐。follow: Item顶端对齐\n当SubNav的mode=popup的时候，popAlign控制弹出菜单对齐方式\n\n"
      },
      {
        "title": "子菜单",
        "order": "6",
        "jsx": "import { Nav, Icon, Switch } from \"@icedesign/base\";\n\nconst { Item, SubNav } = Nav;\n\nclass App extends React.Component {\n  state = {\n    openmode: \"single\"\n  };\n\n  onChange(v) {\n    this.setState({\n      openmode: v ? \"multiple\" : \"single\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Switch\n          checkedChildren=\"多\"\n          unCheckedChildren=\"单\"\n          onChange={this.onChange.bind(this)}\n        />\n        <br />\n        <br />\n        <Nav\n          style={{ width: 240 }}\n          direction=\"ver\"\n          openMode={this.state.openmode}\n        >\n          <SubNav\n            key=\"sub1\"\n            label={\n              <span>\n                <Icon type=\"service\" size=\"small\" />\n                <span>Nav One</span>\n              </span>\n            }\n          >\n            <Item key=\"1\">Option 1</Item>\n            <Item key=\"2\">Option 2</Item>\n            <Item key=\"3\">Option 3</Item>\n            <Item key=\"4\">Option 4</Item>\n          </SubNav>\n          <SubNav\n            key=\"sub2\"\n            label={\n              <span>\n                <Icon type=\"training\" size=\"small\" />\n                <a href=\"javascript:;\">Nav Two</a>\n              </span>\n            }\n          >\n            <Item key=\"5\">Option 5</Item>\n            <Item key=\"6\">Option 6</Item>\n            <SubNav key=\"sub3\" label=\"Submenu\">\n              <Item key=\"7\">\n                <a href=\"javascript:;\">Option 7</a>\n              </Item>\n              <Item key=\"8\">Option 8</Item>\n            </SubNav>\n          </SubNav>\n          <SubNav\n            key=\"sub4\"\n            label={\n              <span>\n                <Icon type=\"favorite\" size=\"small\" />\n                <span> Nav Three</span>\n              </span>\n            }\n          >\n            <Item key=\"9\">Option 9</Item>\n            <Item key=\"10\">Option 10</Item>\n            <Item key=\"11\">Option 11</Item>\n            <Item key=\"12\">Option 12</Item>\n          </SubNav>\n          <Item key=\"13\">Option 13</Item>\n        </Nav>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n单例、多例模式\n\n"
      },
      {
        "title": "类别",
        "order": "1",
        "jsx": "import { Nav, Switch } from \"@icedesign/base\";\n\nconst { Item } = Nav;\n\nfunction renderNav(type, direction) {\n  return (\n    <div className={`demo-${direction}`}>\n      <h2>{type}</h2>\n      <Nav type={type} direction={direction}>\n        <Item key=\"1\" icon=\"service\">\n          Value Added Service\n        </Item>\n        <Item key=\"2\" icon=\"training\">\n          Training\n        </Item>\n        <Item key=\"3\" icon=\"favorite\">\n          Favorite\n        </Item>\n        <Item key=\"4\" icon=\"history\">\n          History\n        </Item>\n        <Item key=\"5\" icon=\"attachment\">\n          Attachment\n        </Item>\n        <Item key=\"6\" icon=\"electronics\">\n          Electronics\n        </Item>\n      </Nav>\n    </div>\n  );\n}\n\nclass App extends React.Component {\n  state = { direction: \"hoz\" };\n\n  onChange(v) {\n    this.setState({\n      direction: v ? \"hoz\" : \"ver\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Switch\n          checkedChildren=\"横\"\n          unCheckedChildren=\"竖\"\n          defaultChecked\n          onChange={this.onChange.bind(this)}\n        />\n        <br />\n\n        <div style={{ display: \"inline-block\" }}>\n          {renderNav(\"primary\", this.state.direction)}\n          {renderNav(\"secondary\", this.state.direction)}\n          {renderNav(\"normal\", this.state.direction)}\n          {renderNav(\"line\", this.state.direction)}\n          {renderNav(\"text\", this.state.direction)}\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo-hoz {\n    width: 100%;\n}\n.demo-ver {\n    width: 200px;\n    display: inline-block;\n    float: left;\n}\n.demo-ver .next-nav{\n    margin-left: 5px;\n}\n",
        "body": "\ntype控制类别切换\n\n"
      }
    ]
  },
  {
    "name": "Navigation",
    "category": "Components",
    "title": "导航(废弃)",
    "type": "导航",
    "importStatement": "import { Navigation } from '@icedesign/base';",
    "body": "\n## 注意\n\nNavigation已经废弃, 会在1.0版本中去除, 建议切换到Nav。\n\n",
    "propsSchema": {},
    "propsREADME": "",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "选中状态位置",
        "order": "0",
        "jsx": "import { Navigation, Select } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeDirection: \"top\",\n      type: \"filling\"\n    };\n  }\n\n  changePosition(value) {\n    this.setState({\n      activeDirection: value,\n      type: value === \"top\" || value === \"bottom\" ? \"filling\" : \"normal\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Select\n          value={this.state.activeDirection}\n          onChange={::this.changePosition}\n          className=\"tab-select-demo\"\n        >\n          <div value=\"left\">left</div>\n          <div value=\"top\">top</div>\n          <div value=\"bottom\">bottom</div>\n          <div value=\"right\">right</div>\n        </Select>\n\n        <Navigation\n          type={this.state.type}\n          activeDirection={this.state.activeDirection}\n        >\n          <Item itemid=\"1\" text=\"Value Added Service\" icon=\"service\" />\n          <Item itemid=\"2\" text=\"Training\" icon=\"training\" />\n          <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" />\n          <Item itemid=\"4\" text=\"History\" icon=\"history\" />\n          <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\" />\n        </Navigation>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n设置选中状态的方向，建议横向导航设置为top或bottom，纵向设置为left或right\n\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Navigation, Menu } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onMouseEnter = () => {\n  console.log(\"onMouseEnter\");\n};\n\nlet onMouseLeave = () => {\n  console.log(\"onMouseLeave\");\n};\n\nlet onClick = (itemid, item) => {\n  console.log(\"Click:\" + item.props.text);\n};\n\nlet onSelect = (itemid, item) => {\n  console.log(\"Select:\" + item.props.text);\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      trigger: \"hover\"\n    };\n  }\n\n  onToggleTrigger() {\n    this.setState({\n      trigger: this.state.trigger === \"hover\" ? \"click\" : \"hover\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          id=\"changeTriggerType\"\n          onClick={this.onToggleTrigger.bind(this)}\n        >\n          点击切换trigger方式\n        </button>\n        <Navigation\n          onClick={onClick}\n          onSelect={onSelect}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n          trigger={this.state.trigger}\n        >\n          <Item itemid=\"1\" text={<i>Value Added Service</i>}>\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n          <Item itemid=\"2\" text=\"Training\">\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n          <Item itemid=\"3\" text=\"Favorite\">\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n          <Item itemid=\"4\" text=\"History\">\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n          <Item itemid=\"5\" text=\"Attachment\">\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n          <Item itemid=\"6\" text=\"electronics\">\n            <Menu>\n              <Menu.Item key=\"1\">Option 1</Menu.Item>\n              <Menu.Item disabled key=\"2\">\n                Option 2\n              </Menu.Item>\n              <Menu.Item key=\"3\">Option 3</Menu.Item>\n              <Menu.Item key=\"4\">Option 4</Menu.Item>\n            </Menu>\n          </Item>\n        </Navigation>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n最简单的用法.\n\n"
      },
      {
        "title": "填充背景",
        "order": "0",
        "jsx": "import { Navigation, Menu } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onMouseEnter = () => {\n  console.log(\"onMouseEnter\");\n};\n\nlet onMouseLeave = () => {\n  console.log(\"onMouseLeave\");\n};\n\nclass CustomItem extends React.Component {\n  render() {\n    const { link } = this.props;\n\n    return <Item content={link} />;\n  }\n}\n\nReactDOM.render(\n  <Navigation\n    onMouseEnter={onMouseEnter}\n    onMouseLeave={onMouseLeave}\n    type=\"filling\"\n    trigger=\"hover\"\n    activeDirection=\"left\"\n    morePositionKey=\"3\"\n    moreText=\"+ More\"\n    onSelect={id => console.log(id)}\n  >\n    <div>\n      <Item text=\"TestInnerItem\" />\n    </div>\n    <CustomItem link={<a href=\"#test\">test</a>} />\n    <Item itemid=\"2\" text=\"Training\" icon=\"training\" title=\"Training Long Long\">\n      <Menu>\n        <Menu.Item key=\"11\">OptionOptionOptionOptionOption 1</Menu.Item>\n        <Menu.Item disabled key=\"21\">\n          Option 2\n        </Menu.Item>\n        <Menu.Item key=\"31\">Option 3</Menu.Item>\n        <Menu.Item key=\"41\">Option 4</Menu.Item>\n        <Menu.SubMenu key=\"411\" label=\"xxx\" mode=\"popup\" triggerType=\"hover\">\n          <Menu.Item key=\"xxx\">Option2</Menu.Item>\n          <Menu.Item key=\"xxx2\">Option3</Menu.Item>\n        </Menu.SubMenu>\n      </Menu>\n    </Item>\n    <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" selected=\"true\">\n      <Menu>\n        <Menu.SubMenu label=\"xxx\" key=\"popup1\">\n          <Menu.Item disabled key=\"112\">\n            abc\n          </Menu.Item>\n          <Menu.Item key=\"222\">abc</Menu.Item>\n        </Menu.SubMenu>\n      </Menu>\n    </Item>\n    <Item itemid=\"4\" text=\"History\" icon=\"history\">\n      <Menu>\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item disabled key=\"2\">\n          Option 2\n        </Menu.Item>\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n        <Menu.Item key=\"4\">Option 4</Menu.Item>\n      </Menu>\n    </Item>\n    <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\">\n      <Menu>\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item disabled key=\"2\">\n          Option 2\n        </Menu.Item>\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n        <Menu.Item key=\"4\">Option 4</Menu.Item>\n      </Menu>\n    </Item>\n    <Item itemid=\"6\" text=\"electronics\" icon=\"Electronics\">\n      <Menu>\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item disabled key=\"2\">\n          Option 2\n        </Menu.Item>\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n        <Menu.Item key=\"4\">Option 4</Menu.Item>\n      </Menu>\n    </Item>\n  </Navigation>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n注意：onMouseLeave、onMouseEnter，如果子元素有注册以上事件，注意兼容；\n\n"
      },
      {
        "title": "图标型",
        "order": "0",
        "jsx": "import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onClick = (itemid, item) => {\n  console.log(\"Click:\" + item.props.icon);\n};\n\nlet style = {\n  padding: \"20px 0\",\n  display: \"block\",\n  cursor: \"pointer\"\n};\n\nclass Content extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      type: \"icononly\"\n    };\n  }\n\n  changeType() {\n    this.setState({\n      type: this.state.type === \"icononly\" ? \"tree\" : \"icononly\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <a style={style} id=\"spread\" onClick={this.changeType.bind(this)}>\n          点我试试\n        </a>\n        <Navigation\n          type={this.state.type}\n          onClick={onClick}\n          style={{ maxWidth: \"240px\" }}\n        >\n          <Item\n            itemid=\"1\"\n            text=\"Value Added Service\"\n            icon=\"service\"\n            link=\"#icon\"\n            opened={true}\n          >\n            <Navigation>\n              <Item itemid=\"1-1-1\" text=\"Apps2\" icon=\"service\" opened={true}>\n                <Navigation>\n                  <Item itemid=\"1-1-1-1\" text=\"Apps2\" icon=\"service\" />\n                  <Item itemid=\"1-1-1-2\" text=\"Apps3\" icon=\"service\" />\n                </Navigation>\n              </Item>\n              <Item itemid=\"1-1-2\" text=\"Apps3\" icon=\"service\" />\n            </Navigation>\n          </Item>\n          <Item itemid=\"2\" text=\"Training\" icon=\"training\" />\n          <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" />\n          <Item itemid=\"4\" text=\"History\" icon=\"history\" />\n          <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\" />\n          <Item itemid=\"6\" text=\"Electronics\" icon=\"electronics\" />\n        </Navigation>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Content />, mountNode);\n\n",
        "css": "",
        "body": "\n最简单的用法。\n\n"
      },
      {
        "title": "横向",
        "order": "0",
        "jsx": "import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nReactDOM.render(\n  <Navigation type=\"line\" activeDirection=\"left\">\n    <Item\n      itemid=\"1\"\n      key=\"1\"\n      text=\"Value Added Service\"\n      icon=\"service\"\n      container={<span />}\n    />\n    <Item itemid=\"2\" text=\"Training\" icon=\"training\" />\n    <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" />\n    <Item itemid=\"4\" text=\"History\" icon=\"history\" />\n    <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\" />\n    <Item itemid=\"6\" text=\"Electronics\" icon=\"electronics\" />\n  </Navigation>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n注意：onMouseLeave、onMouseEnter，如果子元素有注册以上事件，注意兼容；\n\n"
      },
      {
        "title": "Normal",
        "order": "0",
        "jsx": "import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nReactDOM.render(\n  <Navigation\n    type=\"normal\"\n    title=\"Website List\"\n    style={{ maxWidth: \"240px\" }}\n    activeDirection=\"left\"\n  >\n    <Item itemid=\"1\" text=\"Value Added Service\" icon=\"service\" />\n    <Item\n      itemid=\"2\"\n      text=\"Training\"\n      icon=\"training\"\n      link=\"http://taobao.com\"\n      target=\"_blank\"\n      selectedStyle={false}\n    />\n    <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" />\n    <Item itemid=\"4\" text=\"History\" icon=\"history\" />\n    <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\" />\n    <Item itemid=\"6\" text=\"Electronics\" icon=\"electronics\" />\n  </Navigation>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "横向",
        "order": "0",
        "jsx": "import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onMouseEnter = () => {\n  console.log(\"onMouseEnter\");\n};\n\nlet onMouseLeave = () => {\n  console.log(\"onMouseLeave\");\n};\n\nlet menus = [\n  { key: \"1\", text: \"下单\", icon: \"service\" },\n  {\n    key: \"2\",\n    text: \"购物车\",\n    icon: \"service\",\n    children: [\n      {\n        key: \"2-1\",\n        text: \"下单2\",\n        icon: \"service\",\n        children: [{ key: \"2-1-1\", text: \"下单\", icon: \"service\" }]\n      }\n    ]\n  },\n  {\n    key: \"3\",\n    text: \"订单\",\n    icon: \"service\",\n    children: (\n      <Navigation>\n        <Item text=\"子订单\" />\n      </Navigation>\n    )\n  }\n];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      current: []\n    };\n  }\n\n  onChange(e) {\n    let value = e.target.value;\n\n    this.setState({\n      current: value.split(\",\")\n    });\n  }\n\n  render() {\n    let render = menus => {\n      return menus.map((m, i) => (\n        <Item\n          key={m.key || i}\n          opened={this.state.current.indexOf(m.key) > -1}\n          text={m.text}\n          icon={m.icon}\n        >\n          {\"length\" in (m.children || {}) ? (\n            <Navigation>{render(m.children)}</Navigation>\n          ) : (\n            m.children\n          )}\n        </Item>\n      ));\n    };\n\n    let renderItem = render(menus);\n\n    console.log(renderItem);\n\n    return (\n      <div>\n        <div style={{ padding: \"10px\" }}>\n          <label>输入切换key/itemid(多个用半角,隔开):</label>\n          <input\n            id=\"myInput\"\n            value={this.state.value}\n            onChange={this.onChange.bind(this)}\n          />\n        </div>\n        <Navigation\n          type=\"tree\"\n          trigger=\"hover\"\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          {renderItem}\n        </Navigation>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n注意：onMouseLeave、onMouseEnter，如果子元素有注册以上事件，注意兼容；\n\n"
      },
      {
        "title": "横向",
        "order": "0",
        "jsx": "import { Navigation, Menu } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onMouseEnter = () => {\n  console.log(\"onMouseEnter\");\n};\n\nlet onMouseLeave = () => {\n  console.log(\"onMouseLeave\");\n};\n\nlet menus = [\n  { key: \"1\", text: \"Value\", icon: \"service\" },\n  { key: \"2\", text: \"Value\", icon: \"service\" },\n  {\n    key: \"3\",\n    text: \"Value\",\n    icon: \"service\",\n    children: (\n      <Menu>\n        <Menu.Item key=\"1\">Option 1</Menu.Item>\n        <Menu.Item key=\"2\">Option 2</Menu.Item>\n        <Menu.Item key=\"3\">Option 3</Menu.Item>\n        <Menu.Item key=\"4\">Option 4</Menu.Item>\n        <Menu.SubMenu key=\"41\" label=\"xxx\" mode=\"popup\" triggerType=\"hover\">\n          <Menu.Item key=\"5\">Option 5</Menu.Item>\n        </Menu.SubMenu>\n      </Menu>\n    )\n  }\n];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      current: null\n    };\n  }\n\n  onChange(e) {\n    let value = e.target.value;\n\n    this.setState({\n      current: value.trim()\n    });\n  }\n\n  render() {\n    let renderItem = menus.map(m => {\n      return (\n        <Item\n          key={m.key}\n          text={m.text}\n          icon={m.icon}\n          selected={m.key === this.state.current}\n        >\n          {m.children}\n        </Item>\n      );\n    });\n\n    return (\n      <div>\n        <div style={{ padding: \"10px\" }}>\n          <label>输入切换key/itemid:</label>\n          <input\n            id=\"selectInput\"\n            value={this.state.value}\n            onChange={this.onChange.bind(this)}\n          />\n        </div>\n        <Navigation\n          type=\"filling\"\n          trigger=\"hover\"\n          selectedKey={this.state.current}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          {renderItem}\n        </Navigation>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n注意：onMouseLeave、onMouseEnter，如果子元素有注册以上事件，注意兼容；\n\n"
      },
      {
        "title": "Slip",
        "order": "0",
        "jsx": "import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet timer, result, onSelect;\n\nonSelect = (id, item, nav) => {\n  //模拟异步\n  if (item.props.children) {\n    return clearTimeout(timer);\n  }\n\n  if (result) {\n    return nav.setContent(result);\n  }\n\n  nav.setContent(<div>请稍后</div>);\n\n  timer = setTimeout(() => {\n    nav.setContent((result = <div>加载完毕</div>));\n  }, 1000);\n};\n\nReactDOM.render(\n  <Navigation\n    type=\"slip\"\n    onSelect={onSelect}\n    style={{ maxWidth: \"240px\" }}\n    title=\"Web Sites\"\n    container={<div className=\"custom-container\" />}\n  >\n    <Item\n      itemid=\"1\"\n      text=\"Value Added Service\"\n      icon=\"service\"\n      link=\"http://www.taobao.com\"\n      target=\"_blank\"\n    />\n    <Item key=\"2\" text=\"Training\" icon=\"training\">\n      <i>Training</i>\n    </Item>\n    <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\">\n      <div>Favorite</div>\n    </Item>\n    <Item itemid=\"4\" text=\"History\" icon=\"history\">\n      <div>History</div>\n    </Item>\n    <Item itemid=\"5\" text=\"Attachment\" icon=\"attachment\">\n      <div>Attachment</div>\n    </Item>\n    <Item itemid=\"6\" text=\"Electronics\" icon=\"electronics\">\n      <div>Electronics</div>\n    </Item>\n  </Navigation>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "Text",
        "order": "0",
        "jsx": "import { Navigation, Menu } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nlet onMouseEnter = () => {\n  console.log(\"onMouseEnter\");\n};\n\nlet onMouseLeave = () => {\n  console.log(\"onMouseLeave\");\n};\n\nReactDOM.render(\n  <Navigation\n    type=\"text\"\n    onMouseEnter={onMouseEnter}\n    onMouseLeave={onMouseLeave}\n    trigger=\"hover\"\n    cententAlign=\"left\"\n    activeDirection=\"bottom\"\n    morePositionKey=\"5\"\n    moreText=\"+ More\"\n  >\n    <Item itemid=\"1\" text=\"淘宝，淘你喜欢\" icon=\"folder\" />\n    <Item itemid=\"2\" text=\"天猫，正品选择\" icon=\"account\" />\n    <Item itemid=\"3\" text=\"菜单一\" icon=\"cart\" menuAlign=\"left\" />\n    <Item\n      link=\"http://www.baidu.com\"\n      target=\"_blank\"\n      itemid=\"4\"\n      text=\"菜单一\"\n      icon=\"cart\"\n      menuAlign=\"left\"\n    />\n    <Item itemid=\"5\" text=\"菜单一\" icon=\"cart\" menuAlign=\"left\" />\n    <Item itemid=\"6\" text=\"菜单一\" icon=\"cart\" menuAlign=\"left\" />\n  </Navigation>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n注意：onMouseLeave、onMouseEnter，如果子元素有注册以上事件，注意兼容；\n\n"
      },
      {
        "title": "树型",
        "order": "0",
        "jsx": "import { Navigation } from \"@icedesign/base\";\n\nconst { Item } = Navigation;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      selectedKey: \"3\"\n    };\n  }\n\n  onSelect(id, itemid) {\n    this.setState({\n      selectedKey: id\n    });\n  }\n\n  onUnFold(id, item, tree, e) {\n    console.log(\"UnFold\");\n  }\n\n  render() {\n    return (\n      <Navigation\n        onSelect={this.onSelect.bind(this)}\n        selectedKey={this.state.selectedKey}\n        onUnFold={this.onUnFold.bind(this)}\n        style={{ maxWidth: \"240px\" }}\n        type=\"tree\"\n        title=\"Web Sites\"\n        accordion={true}\n        activeDirection=\"left\"\n        branchPadding=\"20\"\n      >\n        <Item\n          itemid=\"1\"\n          text=\"Value Added Service\"\n          icon=\"service\"\n          opened={false}\n          hasLeaf={false}\n        >\n          <Navigation>\n            <Item itemid=\"1-1\" text=\"Apps-One\" icon=\"service\" opened={true}>\n              <Navigation>\n                <Item itemid=\"1-1-1\" text=\"Apps-One-One\" icon=\"service\" />\n                <Item itemid=\"1-1-2\" text=\"Apps-one-Two\" icon=\"service\" />\n              </Navigation>\n            </Item>\n            <Item itemid=\"1-2\" text=\"Apps-Two\" icon=\"service\">\n              <Navigation>\n                <Item itemid=\"1-2-1\" text=\"Apps2\" icon=\"service\" />\n                <Item itemid=\"1-2-2\" text=\"Apps3\" icon=\"service\" />\n              </Navigation>\n            </Item>\n            <Item itemid=\"1-3\" text=\"Apps-Three\" icon=\"service\" />\n          </Navigation>\n        </Item>\n        <Item itemid=\"2\" text=\"Training\" icon=\"training\">\n          <Navigation>\n            <Item itemid=\"2-1\" text=\"Apps1\" icon=\"service\" opened={false}>\n              <Navigation>\n                <Item itemid=\"2-1-1\" text=\"Apps2\" icon=\"service\" />\n                <Item itemid=\"2-1-2\" text=\"Apps3\" icon=\"service\" />\n              </Navigation>\n            </Item>\n            <Item itemid=\"2-2\" text=\"Apps2\" icon=\"service\">\n              <Navigation>\n                <Item itemid=\"2-2-1\" text=\"Apps2\" icon=\"service\" />\n                <Item itemid=\"2-2-2\" text=\"Apps3\" icon=\"service\" />\n              </Navigation>\n            </Item>\n            <Item itemid=\"2-3\" text=\"Apps3\" icon=\"service\" />\n          </Navigation>\n        </Item>\n        <Item itemid=\"3\" text=\"Favorite\" icon=\"favorite\" />\n        <Item itemid=\"4\" text=\"History\" icon=\"history\" />\n        <Item\n          itemid=\"5\"\n          text=\"有链接\"\n          icon=\"attachment\"\n          link=\"https://www.taobao.com\"\n          target=\"_blank\"\n        />\n        <Item itemid=\"6\" text=\"Electronics\" icon=\"electronics\" />\n      </Navigation>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n最简单的用法。\n\n"
      }
    ]
  },
  {
    "name": "Notice",
    "category": "Components",
    "title": "消息提示",
    "type": "展示",
    "importStatement": "import { Notice } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n主动出现在页面上的非常态式信息，公告等。它具有一定的时效性，非功能性。\n\n",
    "propsSchema": {
      "name": "Notice",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'prompt'",
                "computed": false
              },
              {
                "value": "'warning'",
                "computed": false
              },
              {
                "value": "'system'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "提示类型",
          "defaultValue": {
            "value": "'prompt'",
            "computed": false
          },
          "docblock": "提示类型"
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'standalone'",
                "computed": false
              },
              {
                "value": "'addon'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "外观形状",
          "defaultValue": {
            "value": "'standalone'",
            "computed": false
          },
          "docblock": "外观形状"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "尺寸大小",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "尺寸大小"
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "标题",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "docblock": "标题"
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "内容",
          "docblock": "内容"
        },
        "defaultVisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "默认是否显示",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "默认是否显示"
        },
        "visible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "当前是否显示",
          "docblock": "当前是否显示"
        },
        "closable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否可关闭",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否可关闭"
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "关闭时的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "关闭时的回调函数",
          "params": [],
          "returns": null
        },
        "afterClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "关闭后（动画播放完毕）的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "关闭后（动画播放完毕）的回调函数",
          "params": [],
          "returns": null
        },
        "iconType": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义图标类型，支持Icon列表请参考[Icon组件](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=icon#Icon-0)",
          "docblock": "自定义图标类型，支持Icon列表请参考[Icon组件](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=icon#Icon-0)"
        },
        "animation": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否开启动画",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否开启动画"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ntype | 提示类型<br><br>**可选值**:<br>'prompt', 'warning', 'system' | Enum | 'prompt'\nshape | 外观形状<br><br>**可选值**:<br>'standalone', 'addon' | Enum | 'standalone'\nsize | 尺寸大小<br><br>**可选值**:<br>'medium', 'large' | Enum | 'medium'\ntitle | 标题 | ReactNode | ''\nchildren | 内容 | ReactNode | -\ndefaultVisible | 默认是否显示 | Boolean | true\nvisible | 当前是否显示 | Boolean | -\nclosable | 是否可关闭 | Boolean | false\nonClose | 关闭时的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterClose | 关闭后（动画播放完毕）的回调函数<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\niconType | 自定义图标类型，支持Icon列表请参考[Icon组件](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=icon#Icon-0) | String | -\nanimation | 是否开启动画 | Boolean | true\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "组件类型",
        "order": "0",
        "jsx": "import { Notice } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Notice title=\"title\">Content Content Content Content</Notice>\n    <Notice title=\"title\" type=\"warning\">\n      Content Content Content Content\n    </Notice>\n    <Notice title=\"title\" type=\"system\">\n      Content Content Content Content\n    </Notice>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-notice {\n    margin-bottom: 10px;\n}\n",
        "body": "\n通过设置`type`为`prompt`、`warning`、`system`可分别创建普通、警告、系统提示组件，`type`默认值为`prompt`。\n提示组件有三种类型：普通提示、警告提示、系统提示。\n\n"
      },
      {
        "title": "可关闭组件",
        "order": "3",
        "jsx": "import { Notice } from \"@icedesign/base\";\n\nconst onClose = () => console.log(\"onClose triggered!\");\nconst afterClose = () => console.log(\"afterClose triggered!\");\n\nReactDOM.render(\n  <div>\n    <Notice title=\"title\" closable onClose={onClose} afterClose={afterClose}>\n      Content Content Content Content\n    </Notice>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n通过增加`closable`属性可以控制提示框是否可关闭。\n\n"
      },
      {
        "title": "受控显示隐藏",
        "order": "4",
        "jsx": "import { Notice, Button } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: true\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleChange() {\n    this.setState({\n      visible: !this.state.visible\n    });\n  }\n\n  handleClose() {\n    this.setState({\n      visible: false\n    });\n  }\n\n  render() {\n    const { visible } = this.state;\n\n    return (\n      <div className=\"control-demo\">\n        <Button onClick={this.handleChange}>Toggle Visible</Button>\n        <Notice\n          type=\"warning\"\n          visible={visible}\n          title=\"警告\"\n          closable\n          onClose={this.handleClose}\n        >\n          现在不是一个买房的低点，建议慎重考虑。\n        </Notice>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".control-demo .next-btn-medium {\n    margin-bottom: 10px;\n}\n",
        "body": "\n"
      },
      {
        "title": "定制组件外观",
        "order": "5",
        "jsx": "import { Notice } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Notice\n    className=\"custom\"\n    closable\n    iconType=\"success\"\n    title={\n      <span>\n        您的 信用保障极速贷款服务申请 已通过，获得信用保障极速贷款总额度：<a\n          className=\"redit-lines\"\n          href=\"\"\n        >\n          300000\n        </a>{\" \"}\n        人民币\n      </span>\n    }\n  />,\n  mountNode\n);\n\n",
        "css": ".custom.next-notice.next-notice-prompt.next-notice-standalone {\n    border-color: #1DC11D;\n}\n\n.custom .next-icon-success:before {\n    color: #1DC11D;\n}\n\n.custom .redit-lines {\n    color: #FF6A00;\n}\n",
        "body": "\n"
      },
      {
        "title": "组件外观",
        "order": "1",
        "jsx": "import { Notice, Select } from \"@icedesign/base\";\n\nconst Option = Select.Option;\n\nconst types = [\"prompt\", \"warning\", \"system\"];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shape: \"standalone\"\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleSelect(shape) {\n    this.setState({ shape });\n  }\n\n  render() {\n    const { shape } = this.state;\n\n    return (\n      <div className=\"notice-shape-demo\">\n        <span className=\"demo-label\">请选择Shape：</span>\n        <Select defaultValue=\"standalone\" onChange={this.handleSelect}>\n          <Option value=\"standalone\">Standalone</Option>\n          <Option value=\"addon\">Addon</Option>\n        </Select>\n\n        {types.map(type => (\n          <Notice\n            key={type}\n            title=\"title\"\n            type={type}\n            shape={shape}\n            animation={false}\n          >\n            Content Content Content Content\n          </Notice>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".notice-shape-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 28px;\n    line-height: 28px;\n}\n\n.notice-shape-demo .next-notice {\n    margin-top: 10px;\n}\n",
        "body": "\n注意，当通知组件的`type`属性值为`system`时，无论是否设置组件的外观`shape`值，组件都表现为有外观。\n- `addon` 嵌入型，即通知组件会取消边框的显示，用于嵌入在某些内容区域中\n- `standalone` 默认外观，即提示组件会自带边框\n提示组件有三种外观，可以通过`shape`属性设置。\n\n"
      },
      {
        "title": "组件尺寸",
        "order": "2",
        "jsx": "import { Notice, Select } from \"@icedesign/base\";\n\nconst Option = Select.Option;\n\nconst types = [\"prompt\", \"warning\", \"system\"];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: \"medium\"\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  handleSelect(size) {\n    this.setState({ size });\n  }\n\n  render() {\n    const { size } = this.state;\n\n    return (\n      <div className=\"notice-size-demo\">\n        <span className=\"demo-label\">请选择Size：</span>\n        <Select defaultValue=\"medium\" onChange={this.handleSelect}>\n          <Option value=\"medium\">Medium</Option>\n          <Option value=\"large\">Large</Option>\n        </Select>\n\n        {types.map(type => (\n          <Notice\n            key={type}\n            title=\"title\"\n            type={type}\n            size={size}\n            animation={false}\n          >\n            Content Content Content Content\n          </Notice>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".notice-size-demo .demo-label {\n    display: inline-block;\n    vertical-align: top;\n    height: 28px;\n    line-height: 28px;\n}\n\n.notice-size-demo .next-notice {\n    margin-top: 10px;\n}\n",
        "body": "\n通过设置`size`属性为`medium`、`large`可分别创建普通尺寸、大尺寸的提示组件，`size`默认值为`medium`。\n提示组件共有两种尺寸：普通、大型。\n\n"
      }
    ]
  },
  {
    "name": "NumberPicker",
    "category": "Components",
    "title": "数字输入框",
    "type": "表单",
    "importStatement": "import { NumberPicker } from '@icedesign/base';",
    "body": "\n\n## 开发指南\n\n### 何时使用\n\n数字选择器，并对输入的数据做正确性检查、自动订正。\n\n### 注意事项\n\n1.  自动订正可能会导致onChange返回值和你输入的数据不一样。\n\n2.  其中有些中间输入状态无法触发onChange，主要考虑到自动订正可能永远无法到达想要的值了。例如：\n\n    -   `0`=>`0.`=>`0.0`=>`0.01`  中间两步不会触发onChange，因为如果订正会一直停留在0导致永远无法到达想要的值\n    -   min=10 的情况下, 输入 `1`=>`12`  第一步 `1` 不会触发onChange也不会订正数据，因为数字是一个一个输入的\n\n3.  如果输入时没触发onChange，会在onBlur检测数据正确性并触发onChange\n\n",
    "propsSchema": {
      "name": "NumberPicker",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false,
                "description": "普通"
              },
              {
                "value": "'inline'",
                "computed": false,
                "description": "内联"
              }
            ]
          },
          "required": false,
          "description": "设置类型",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "设置类型\n@enumdesc 普通, 内联",
          "value": [
            {
              "value": "'normal'",
              "computed": false,
              "description": "普通"
            },
            {
              "value": "'inline'",
              "computed": false,
              "description": "内联"
            }
          ]
        },
        "value": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "当前值",
          "docblock": "当前值"
        },
        "defaultValue": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "默认值",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "docblock": "默认值"
        },
        "step": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "步长",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "docblock": "步长"
        },
        "editable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "用户是否可以输入",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "用户是否可以输入"
        },
        "inputWidth": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "输入框的宽度",
          "docblock": "输入框的宽度"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "数值被改变的事件",
          "defaultValue": {
            "value": "function noop() {\n}",
            "computed": false
          },
          "docblock": "数值被改变的事件\n@param {Number} value 数据\n@param {Event} e DOM事件对象",
          "params": [
            {
              "name": "value",
              "description": "数据",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "e",
              "description": "DOM事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "onKeyDown": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "键盘按下",
          "defaultValue": {
            "value": "function noop() {\n}",
            "computed": false
          },
          "docblock": "键盘按下",
          "params": [],
          "returns": null
        },
        "onFocus": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "焦点获得",
          "defaultValue": {
            "value": "function noop() {\n}",
            "computed": false
          },
          "docblock": "焦点获得",
          "params": [],
          "returns": null
        },
        "onBlur": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "焦点失去",
          "defaultValue": {
            "value": "function noop() {\n}",
            "computed": false
          },
          "docblock": "焦点失去",
          "params": [],
          "returns": null
        },
        "onDisabled": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "按钮被禁用时候点击的回调",
          "defaultValue": {
            "value": "function noop() {\n}",
            "computed": false
          },
          "docblock": "按钮被禁用时候点击的回调\n@param {Event} e DOM事件对象",
          "params": [
            {
              "name": "e",
              "description": "DOM事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "onCorrect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "数值订正后的回调",
          "defaultValue": {
            "value": "function noop() {\n}",
            "computed": false
          },
          "docblock": "数值订正后的回调\n@param {Object} obj {currentValue,oldValue:String}",
          "params": [
            {
              "name": "obj",
              "description": "{currentValue,oldValue:String}",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "max": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "最大值",
          "defaultValue": {
            "value": "Infinity",
            "computed": true
          },
          "docblock": "最大值"
        },
        "min": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "最小值",
          "defaultValue": {
            "value": "-Infinity",
            "computed": false
          },
          "docblock": "最小值"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义class",
          "docblock": "自定义class"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "docblock": "自定义内联样式",
          "properties": []
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\ntype | 设置类型<br><br>**可选值**:<br>'normal'(普通)<br>'inline'(内联) | Enum | 'normal'\nvalue | 当前值 | Number | -\ndefaultValue | 默认值 | Number | 0\nstep | 步长 | Number/String | 1\neditable | 用户是否可以输入 | Boolean | true\ninputWidth | 输入框的宽度 | Number/String | -\nonChange | 数值被改变的事件<br><br>**签名**:<br>Function(value: Number, e: Event) => void<br>**参数**:<br>*value*: {Number} 数据<br>*e*: {Event} DOM事件对象 | Function | function noop() { }\nonKeyDown | 键盘按下<br><br>**签名**:<br>Function() => void | Function | function noop() { }\nonFocus | 焦点获得<br><br>**签名**:<br>Function() => void | Function | function noop() { }\nonBlur | 焦点失去<br><br>**签名**:<br>Function() => void | Function | function noop() { }\nonDisabled | 按钮被禁用时候点击的回调<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>*e*: {Event} DOM事件对象 | Function | function noop() { }\nonCorrect | 数值订正后的回调<br><br>**签名**:<br>Function(obj: Object) => void<br>**参数**:<br>*obj*: {Object} {currentValue,oldValue:String} | Function | function noop() { }\nmax | 最大值 | Number | Infinity\nmin | 最小值 | Number | -Infinity\nclassName | 自定义class | String | -\nstyle | 自定义内联样式 | Object | {}\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本用法",
        "order": "0",
        "jsx": "import { NumberPicker } from \"@icedesign/base\";\n\nfunction onChange(value, e) {\n  console.log(value, e.type, e.triggerType);\n}\n\nReactDOM.render(\n  <div>\n    <NumberPicker onChange={onChange} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n如果是点击`+` `-` 触发，可以通过 `e.triggerType` 获取\nonChange 第二个参数 e.type 可以获取事件类型。\n\n"
      },
      {
        "title": "不可用",
        "order": "2",
        "jsx": "import { NumberPicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <NumberPicker disabled />\n    <br />\n    <br />\n    <NumberPicker type=\"inline\" disabled />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n不可用的 number picker。\n\n"
      },
      {
        "title": "不可直接输入",
        "order": "0",
        "jsx": "import { NumberPicker, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editable: false,\n      value: 0\n    };\n  }\n\n  toogle() {\n    this.setState({\n      editable: !this.state.editable\n    });\n  }\n\n  onChange(value) {\n    console.log(\"changed\", value);\n    this.setState({\n      value: value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <NumberPicker\n          onChange={this.onChange.bind(this)}\n          value={this.state.value}\n          editable={this.state.editable}\n        />\n        <br />\n        <br />\n        <Button onClick={this.toogle.bind(this)}>\n          切换到 {!this.state.editable ? \"可编辑\" : \"不可编辑\"}\n        </Button>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n用户不可直接输入编辑数据\n\n"
      },
      {
        "title": "inline 的 number picker",
        "order": "1",
        "jsx": "import { NumberPicker } from \"@icedesign/base\";\n\nfunction onChange(value) {\n  console.log(\"changed\", value);\n}\n\nReactDOM.render(\n  <div>\n    <NumberPicker type=\"inline\" onChange={onChange} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\ntype 为 inline 的 number picker。\n\n"
      },
      {
        "title": "宽度自定义",
        "order": "0",
        "jsx": "import { NumberPicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <NumberPicker inputWidth={\"60px\"} defaultValue={100000} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\ninputWidth 控制input宽度\n\n"
      },
      {
        "title": "最大最小值",
        "order": "0",
        "jsx": "import { NumberPicker } from \"@icedesign/base\";\n\nfunction onChange(value, e) {\n  console.log(value, e);\n}\nfunction onDisabled(e) {\n  console.log(e);\n}\nfunction onCorrect(obj) {\n  console.log(obj);\n}\nReactDOM.render(\n  <div>\n    <NumberPicker\n      type=\"inline\"\n      step={3}\n      min={6}\n      max={30}\n      defaultValue={6}\n      onChange={onChange}\n      onDisabled={onDisabled}\n      onCorrect={onCorrect}\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n当数据自动订正会触发 onCorrect\nmin max 来限制value的最大最小值。\n\n"
      },
      {
        "title": "步长",
        "order": "0",
        "jsx": "import { NumberPicker } from \"@icedesign/base\";\n\nfunction onChange(value) {\n  console.log(\"changed\", value);\n}\nfunction onCorrect(obj) {\n  console.log(obj);\n}\nReactDOM.render(\n  <div>\n    <NumberPicker onChange={onChange} onCorrect={onCorrect} step={0.01} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n通过step控制每次加减步长\n\n"
      }
    ]
  },
  {
    "name": "Overlay",
    "category": "Utility",
    "title": "弹层",
    "importStatement": "import { Overlay } from '@icedesign/base';",
    "body": "\n用于弹层类的工具类集合.\n\n## 开发指南\n\nOverlay提供了一系列的组件的集合用于创建弹层组件。其中包含：\n\n### Gateway\n\nGateway的作用是将节点渲染到指定的容器中。正常情况下React使用当前节点所在的父节点作为容器，但是Gateway可以将其包含的节点渲染到另外的节点中。\n\nGateway只有一个配置项就是`container`, 它可以接受字符串和函数。\n\n```html\n// 将span渲染到id为container的节点中\n<Gateway container=\"container\">\n    <span>123</span>\n</Gateway>\n```\n\n实际上也可以传入container为函数，返回节点的ref.\n\n```html\n<div ref=\"container\"></div>\n<Gateway container={() => this.refs.container}>\n    <span>123</span>\n</Gateway>\n```\n\n### Overlay\n\nOverlay利用了Gateway提供的能力，可以在页面中弹出一个浮层，封装了动画和定位及一些可用性的功能。\n\nOverlay被设计为无状态的组件，其本身并不控制自己的显示和隐藏的状态。\n\n**注意:** 类似的canCloseby\\*的配置也需要配合onRequestClose才能关闭Overlay\n\n#### 安全节点\n\n弹层同时提供点击文档中的节点隐藏该弹层的功能，但是由于React内部维护了一个事件队列，且并未提供针对document的事件绑定方式，所以在点击任何一个节点\n都会触发document的click，即便手动阻止冒泡也不行， Overlay采用了一个安全节点的设置来避免这个问题.\n\n#### 定位\n\n1.  align由空格隔开的字符串表示，例如 `tl bl`. 其中`tl`代表目标元素的左上方，`bl`代表基准元素的左下方，所以`tl bl`的意思是目标元素的左上方对齐基准元素左下方。\n    其中定位的可选值有 `tl`, `tc`, `tr`, `cl`, `cc`, `cr`, `bl`, `bc`, `br`.\n\n2.  align支持的Boolean值仅为false，在设置为false的时候，不使用JS定位，这样你可以根据你的需要传入style或者className进行CSS定位。\n\n**说明**  `t`为`top`的缩写，`b`为`bottom`的缩写，`c`为`center`的缩写，`l`为`left`的缩写，`r`为`right`的缩写.\n\n下面的例子演示了如何将弹层定位到页面的右上角\n\n```html\n<Overlay visible align=\"tr tr\"><span>123</span></Overlay>\n```\n\n### Popup\n\n接收某个节点，弹出一个浮层, 这个浮层默认情况下使用这个节点作为定位的参照对象\n\n",
    "propsSchema": {
      "name": "Overlay",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义样式对象",
          "docblock": "自定义样式对象",
          "properties": []
        },
        "children": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "浮层内容",
          "docblock": "浮层内容"
        },
        "visible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示浮层, 如果此属性为false，浮层不会被渲染",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否显示浮层, 如果此属性为false，浮层不会被渲染"
        },
        "canCloseByEsc": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否支持esc按键关闭浮层",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否支持esc按键关闭浮层"
        },
        "canCloseByOutSideClick": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "点击浮层外的区域是否关闭浮层",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "点击浮层外的区域是否关闭浮层"
        },
        "canCloseByMask": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "点击遮罩区域是否关闭浮层",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "点击遮罩区域是否关闭浮层"
        },
        "animation": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "配置动画的播放方式",
          "defaultValue": {
            "value": "{\n    in: 'expandInDown',\n    out: 'expandOutUp'\n}",
            "computed": false
          },
          "docblock": "配置动画的播放方式\n@param {String} in 进场动画\n@param {String} out 出场动画"
        },
        "target": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "配置浮层定位的参照元素",
          "defaultValue": {
            "value": "Position.VIEWPORT",
            "computed": true
          },
          "docblock": "配置浮层定位的参照元素"
        },
        "align": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "浮层相对于target的定位, 详见开发指南的[定位部分](#定位)",
          "defaultValue": {
            "value": "'tl bl'",
            "computed": false
          },
          "docblock": "浮层相对于target的定位, 详见开发指南的[定位部分](#定位)"
        },
        "offset": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "浮层相对于target定位的微调",
          "defaultValue": {
            "value": "[0, 0]",
            "computed": false
          },
          "docblock": "浮层相对于target定位的微调"
        },
        "beforeClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层关闭前触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "浮层关闭前触发的事件",
          "params": [],
          "returns": null
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层关闭后触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "浮层关闭后触发的事件",
          "params": [],
          "returns": null
        },
        "afterClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层关闭后触发的事件, 如果有动画，则在动画结束后触发",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "浮层关闭后触发的事件, 如果有动画，则在动画结束后触发",
          "params": [],
          "returns": null
        },
        "beforeOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层打开前触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "浮层打开前触发的事件",
          "params": [],
          "returns": null
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层打开后触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "浮层打开后触发的事件",
          "params": [],
          "returns": null
        },
        "afterOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层打开后触发的事件, 如果有动画，则在动画结束后触发",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "浮层打开后触发的事件, 如果有动画，则在动画结束后触发",
          "params": [],
          "returns": null
        },
        "onRequestClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层请求关闭触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "浮层请求关闭触发的事件\n@param {String} reason 浮层关闭的来源\n@param {Event} e DOM事件",
          "params": [
            {
              "name": "reason",
              "description": "浮层关闭的来源",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "e",
              "description": "DOM事件",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "beforePosition": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层定位完成前触发的事件",
          "docblock": "浮层定位完成前触发的事件",
          "params": [],
          "returns": null
        },
        "onPosition": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "浮层定位完成后触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "浮层定位完成后触发的事件\n@param {Object} config 定位的参数\n@param {Object} node 定位的元素",
          "params": [
            {
              "name": "config",
              "description": "定位的参数",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "node",
              "description": "定位的元素",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "浮层打开的时候是否让里面的元素自动获取焦点",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "浮层打开的时候是否让里面的元素自动获取焦点"
        },
        "hasMask": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示遮罩",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否显示遮罩"
        },
        "cache": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "隐藏时是否保留子节点",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "隐藏时是否保留子节点"
        },
        "safeNode": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "安全节点,当点击document的时候, 如果包含该节点则不会关闭浮层, 如果是函数需要返回ref, 如果是字符串则是该DOM的id, 也可以直接传入DOM节点",
          "docblock": "安全节点,当点击document的时候, 如果包含该节点则不会关闭浮层, 如果是函数需要返回ref, 如果是字符串则是该DOM的id, 也可以直接传入DOM节点"
        },
        "wrapperClassName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "浮层的根节点的样式类",
          "docblock": "浮层的根节点的样式类"
        },
        "container": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "指定渲染组件的容器",
          "docblock": "指定渲染组件的容器"
        },
        "shouldUpdatePosition": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "强制更新定位信息",
          "docblock": "强制更新定位信息"
        },
        "needAdjust": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否自动调整定位的位置",
          "docblock": "是否自动调整定位的位置"
        },
        "disableScroll": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否禁用页面滚动",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否禁用页面滚动"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Gateway",
          "props": {
            "container": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "指定渲染children的容器",
              "defaultValue": {
                "value": "() => document.body",
                "computed": false
              },
              "docblock": "指定渲染children的容器"
            }
          },
          "methods": []
        },
        {
          "name": "Popup",
          "props": {
            "align": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "弹层相对于target的定位, 详见开发指南的[定位部分](#定位)",
              "defaultValue": {
                "value": "'tl bl'",
                "computed": false
              },
              "docblock": "弹层相对于target的定位, 详见开发指南的[定位部分](#定位)"
            },
            "offset": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "弹层相对于target定位的微调",
              "defaultValue": {
                "value": "[0, 0]",
                "computed": false
              },
              "docblock": "弹层相对于target定位的微调"
            },
            "trigger": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "触发弹层显示或者隐藏的元素",
              "defaultValue": {
                "value": "<div></div>",
                "computed": false
              },
              "docblock": "触发弹层显示或者隐藏的元素"
            },
            "triggerType": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "触发弹层显示的类型",
              "defaultValue": {
                "value": "'hover'",
                "computed": false
              },
              "docblock": "触发弹层显示的类型"
            },
            "visible": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "弹层当前显示的状态",
              "docblock": "弹层当前显示的状态"
            },
            "defaultVisible": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "弹层默认显示的状态",
              "docblock": "弹层默认显示的状态"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "设置此属性，弹层无法打开",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "设置此属性，弹层无法打开"
            },
            "delay": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "弹层在触发以后的延时显示",
              "defaultValue": {
                "value": "200",
                "computed": false
              },
              "docblock": "弹层在触发以后的延时显示"
            },
            "canCloseByOutSideClick": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "点击浮层外的区域是否关闭浮层",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "点击浮层外的区域是否关闭浮层"
            },
            "onVisibleChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "弹层在显示和隐藏触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "弹层在显示和隐藏触发的事件\n@param {Boolean} visible 弹层是否隐藏和显示\n@param {String} type 触发弹层显示和隐藏的来源\n@param {Event} e DOM事件",
              "params": [
                {
                  "name": "visible",
                  "description": "弹层是否隐藏和显示",
                  "type": {
                    "name": "Boolean"
                  }
                },
                {
                  "name": "type",
                  "description": "触发弹层显示和隐藏的来源",
                  "type": {
                    "name": "String"
                  }
                },
                {
                  "name": "e",
                  "description": "DOM事件",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "returns": null
            },
            "autoFocus": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "浮层打开的时候是否让里面的元素自动获取焦点",
              "docblock": "浮层打开的时候是否让里面的元素自动获取焦点"
            },
            "animation": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "object"
                  },
                  {
                    "name": "bool"
                  }
                ]
              },
              "required": false,
              "description": "配置动画的播放方式",
              "defaultValue": {
                "value": "{\n    in: 'expandInDown',\n    out: 'expandOutUp'\n}",
                "computed": false
              },
              "docblock": "配置动画的播放方式\n@param {String} in 进场动画\n@param {String} out 出场动画"
            },
            "target": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "配置弹层定位的参照元素",
              "docblock": "配置弹层定位的参照元素"
            }
          },
          "methods": []
        },
        {
          "name": "Position",
          "props": {
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "target": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "定位参照的元素",
              "docblock": "定位参照的元素"
            },
            "contentNode": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "定位的目标元素",
              "docblock": "定位的目标元素"
            },
            "align": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "bool"
                  }
                ]
              },
              "required": false,
              "description": "定位的方式, 详见开发指南的[定位部分](#定位)",
              "defaultValue": {
                "value": "'tl bl'",
                "computed": false
              },
              "docblock": "定位的方式, 详见开发指南的[定位部分](#定位)"
            },
            "offset": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "相对于target定位的微调",
              "defaultValue": {
                "value": "[0, 0]",
                "computed": false
              },
              "docblock": "相对于target定位的微调"
            },
            "beforePosition": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "定位完成前触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "定位完成前触发的事件",
              "params": [],
              "returns": null
            },
            "onPosition": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "定位完成后触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "定位完成后触发的事件\n@param {Object} config 定位的参数\n@param {Object} node 定位的元素",
              "params": [
                {
                  "name": "config",
                  "description": "定位的参数",
                  "type": {
                    "name": "Object"
                  }
                },
                {
                  "name": "node",
                  "description": "定位的元素",
                  "type": {
                    "name": "Object"
                  }
                }
              ],
              "returns": null
            },
            "needAdjust": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否自动调整定位的位置",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否自动调整定位的位置"
            },
            "needListenResize": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否监听Resize事件",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否监听Resize事件"
            },
            "shouldUpdatePosition": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "强制更新定位信息",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "强制更新定位信息"
            },
            "isRtl": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "对齐方式",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "对齐方式"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义样式对象 | Object | -\nchildren | 浮层内容 | any | -\nvisible | 是否显示浮层, 如果此属性为false，浮层不会被渲染 | Boolean | false\ncanCloseByEsc | 是否支持esc按键关闭浮层 | Boolean | true\ncanCloseByOutSideClick | 点击浮层外的区域是否关闭浮层 | Boolean | true\ncanCloseByMask | 点击遮罩区域是否关闭浮层 | Boolean | true\nanimation | 配置动画的播放方式 | Object/Boolean | {     in: 'expandInDown',     out: 'expandOutUp' }\ntarget | 配置浮层定位的参照元素 | any | Position.VIEWPORT\nalign | 浮层相对于target的定位, 详见开发指南的[定位部分](#定位) | String/Boolean | 'tl bl'\noffset | 浮层相对于target定位的微调 | Array | [0, 0]\nbeforeClose | 浮层关闭前触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonClose | 浮层关闭后触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterClose | 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nbeforeOpen | 浮层打开前触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonOpen | 浮层打开后触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterOpen | 浮层打开后触发的事件, 如果有动画，则在动画结束后触发<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonRequestClose | 浮层请求关闭触发的事件<br><br>**签名**:<br>Function(reason: String, e: Event) => void<br>**参数**:<br>*reason*: {String} 浮层关闭的来源<br>*e*: {Event} DOM事件 | Function | () =&gt; {}\nbeforePosition | 浮层定位完成前触发的事件<br><br>**签名**:<br>Function() => void | Function | -\nonPosition | 浮层定位完成后触发的事件<br><br>**签名**:<br>Function(config: Object, node: Object) => void<br>**参数**:<br>*config*: {Object} 定位的参数<br>*node*: {Object} 定位的元素 | Function | () =&gt; {}\nautoFocus | 浮层打开的时候是否让里面的元素自动获取焦点 | Boolean | false\nhasMask | 是否显示遮罩 | Boolean | false\ncache | 隐藏时是否保留子节点 | Boolean | false\nsafeNode | 安全节点,当点击document的时候, 如果包含该节点则不会关闭浮层, 如果是函数需要返回ref, 如果是字符串则是该DOM的id, 也可以直接传入DOM节点 | any | -\nwrapperClassName | 浮层的根节点的样式类 | String | -\ncontainer | 指定渲染组件的容器 | any | -\nshouldUpdatePosition | 强制更新定位信息 | Boolean | -\nneedAdjust | 是否自动调整定位的位置 | Boolean | -\ndisableScroll | 是否禁用页面滚动 | Boolean | false\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Gateway",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\ncontainer | 指定渲染children的容器 | any | () =&gt; document.body\n",
        "methodREADME": []
      },
      {
        "name": "Popup",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nalign | 弹层相对于target的定位, 详见开发指南的[定位部分](#定位) | String | 'tl bl'\noffset | 弹层相对于target定位的微调 | Array | [0, 0]\ntrigger | 触发弹层显示或者隐藏的元素 | any | &lt;div&gt;&lt;/div&gt;\ntriggerType | 触发弹层显示的类型 | String | 'hover'\nvisible | 弹层当前显示的状态 | Boolean | -\ndefaultVisible | 弹层默认显示的状态 | Boolean | -\ndisabled | 设置此属性，弹层无法打开 | Boolean | false\ndelay | 弹层在触发以后的延时显示 | Number | 200\ncanCloseByOutSideClick | 点击浮层外的区域是否关闭浮层 | Boolean | true\nonVisibleChange | 弹层在显示和隐藏触发的事件<br><br>**签名**:<br>Function(visible: Boolean, type: String, e: Event) => void<br>**参数**:<br>*visible*: {Boolean} 弹层是否隐藏和显示<br>*type*: {String} 触发弹层显示和隐藏的来源<br>*e*: {Event} DOM事件 | Function | () =&gt; {}\nautoFocus | 浮层打开的时候是否让里面的元素自动获取焦点 | Boolean | -\nanimation | 配置动画的播放方式 | Object/Boolean | {     in: 'expandInDown',     out: 'expandOutUp' }\ntarget | 配置弹层定位的参照元素 | any | -\n",
        "methodREADME": []
      },
      {
        "name": "Position",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nclassName | 自定义类名 | String | -\ntarget | 定位参照的元素 | any | -\ncontentNode | 定位的目标元素 | any | -\nalign | 定位的方式, 详见开发指南的[定位部分](#定位) | String/Boolean | 'tl bl'\noffset | 相对于target定位的微调 | Array | [0, 0]\nbeforePosition | 定位完成前触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonPosition | 定位完成后触发的事件<br><br>**签名**:<br>Function(config: Object, node: Object) => void<br>**参数**:<br>*config*: {Object} 定位的参数<br>*node*: {Object} 定位的元素 | Function | () =&gt; {}\nneedAdjust | 是否自动调整定位的位置 | Boolean | true\nneedListenResize | 是否监听Resize事件 | Boolean | true\nshouldUpdatePosition | 强制更新定位信息 | Boolean | false\nisRtl | 对齐方式 | Boolean | false\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "遮罩",
        "order": "2",
        "jsx": "import { Overlay } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      visible: false\n    };\n  }\n  render() {\n    return (\n      <span>\n        <button onClick={this.onClick.bind(this)} ref=\"target\">\n          Open\n        </button>\n        <Overlay\n          visible={this.state.visible}\n          hasMask\n          disableScroll\n          align=\"cc cc\"\n          safeNode={() => this.refs.target}\n          onRequestClose={this.onClose.bind(this)}\n        >\n          <span className=\"overlay-demo\">Hello World From Overlay!</span>\n        </Overlay>\n      </span>\n    );\n  }\n  onClick() {\n    this.setState({ visible: true });\n  }\n  onClose = reason => {\n    console.log(\"onRequestClose emit!, reason: \", reason);\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n",
        "body": "\n带有遮罩的弹出层\n\n"
      },
      {
        "title": "受控",
        "order": "3",
        "jsx": "import { Overlay } from \"@icedesign/base\";\n\nconst Popup = Overlay.Popup;\n\nclass App extends React.Component {\n  state = {\n    visible: false\n  };\n  render() {\n    return (\n      <Popup\n        trigger={<button>Open</button>}\n        visible={this.state.visible}\n        triggerType=\"click\"\n        onVisibleChange={this.onVisibleChange}\n      >\n        <div className=\"overlay-demo\">\n          <button onClick={this.onClose}>Close</button>\n          <p>Hello World From Popup!</p>\n        </div>\n      </Popup>\n    );\n  }\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n  onVisibleChange = visible => {\n    this.setState({\n      visible\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n",
        "body": "\n演示了Popup受控的示例,可以在内部控制Popup的显示和隐藏\n\n"
      },
      {
        "title": "Gateway",
        "order": "0",
        "jsx": "import { Overlay } from \"@icedesign/base\";\n\nconst { Gateway } = Overlay;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <span ref=\"container\" />\n        <Gateway container={() => this.refs.container}>\n          <span>Hello World from gateway.</span>\n        </Gateway>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\nGateway 的基本用法\n\n"
      },
      {
        "title": "弹层嵌套",
        "order": "4",
        "jsx": "import { Overlay } from \"@icedesign/base\";\n\nconst Popup = Overlay.Popup;\n\nclass App extends React.Component {\n  state = {\n    visible: false,\n    overlayVisible: false\n  };\n  render() {\n    return (\n      <Popup\n        trigger={<button>Open</button>}\n        triggerType=\"click\"\n        visible={this.state.visible}\n        onVisibleChange={this.onVisibleChange}\n      >\n        <div className=\"overlay-demo\">\n          <Popup\n            triggerType=\"click\"\n            trigger={<button>Open overlay</button>}\n            container={trigger => trigger && trigger.parentNode}\n            visible={this.state.overlayVisible}\n            onVisibleChange={this.onOverlayVisibleChange}\n          >\n            <div className=\"overlay-demo\" onClick={this.hideOverlay}>\n              Click me will close this overlay, but popup will not close.\n            </div>\n          </Popup>\n          <p>Hello World From Popup!</p>\n        </div>\n      </Popup>\n    );\n  }\n  hideOverlay = () => {\n    this.setState({\n      overlayVisible: false\n    });\n  };\n  showOverlay = () => {\n    this.setState({\n      overlayVisible: true\n    });\n  };\n  onVisibleChange = visible => {\n    this.setState({\n      visible\n    });\n  };\n  onOverlayVisibleChange = overlayVisible => {\n    this.setState({\n      overlayVisible\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n",
        "body": "\n弹层嵌套的时候，使用container属性将容器渲染到第一个弹层的节点内部。\n\n"
      },
      {
        "title": "弹出层",
        "order": "1",
        "jsx": "import { Overlay } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      visible: false\n    };\n  }\n  render() {\n    return (\n      <span>\n        <button onClick={this.onClick.bind(this)} ref=\"target\">\n          Toggle visible\n        </button>\n        <Overlay\n          visible={this.state.visible}\n          target={() => this.refs.target}\n          safeNode={() => this.refs.target}\n          onRequestClose={this.onClose.bind(this)}\n        >\n          <span className=\"overlay-demo\">Hello World From Overlay!</span>\n        </Overlay>\n      </span>\n    );\n  }\n  onClick() {\n    this.setState({ visible: !this.state.visible });\n  }\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n",
        "body": "\n弹出一个浮层\n\n"
      },
      {
        "title": "触发的弹层",
        "order": "3",
        "jsx": "import { Overlay } from \"@icedesign/base\";\n\nconst Popup = Overlay.Popup;\nconst afterClose = () => {\n  console.log(\"close\");\n};\nconst trigger = <button>Open</button>;\nReactDOM.render(\n  <Popup trigger={trigger} triggerType=\"click\" afterClose={afterClose}>\n    <div className=\"overlay-demo\">Hello World From Popup!</div>\n  </Popup>,\n  mountNode\n);\n\n",
        "css": ".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n",
        "body": "\n使用Popup弹出一个浮层\n\n"
      },
      {
        "title": "跟随滚动",
        "order": "4",
        "jsx": "import { Overlay } from \"@icedesign/base\";\n\nconst Popup = Overlay.Popup;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"scroll-container\" ref=\"scroll\">\n        <Popup\n          trigger={<button>Open</button>}\n          container={() => this.refs.scroll}\n          triggerType=\"click\"\n        >\n          <div className=\"overlay-demo\">\n            <p>Hello World From Popup!</p>\n          </div>\n        </Popup>\n        <div style={{ height: \"300px\" }} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".overlay-demo {\n    border: 1px solid #999;\n    padding: 10px;\n    width: 300px;\n    height: 100px;\n    background: #fff;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n.scroll-container {\n    position: relative;\n    height: 150px;\n    border: 1px solid #999;\n    padding: 10px;\n    overflow: auto;\n}\n",
        "body": "\n演示弹层如何跟随滚动\n\n"
      }
    ]
  },
  {
    "name": "Pagination",
    "category": "Components",
    "title": "翻页器",
    "type": "导航",
    "importStatement": "import { Pagination } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n在有大量内容展现需要进行分页加载处理的时候。\n\n",
    "propsSchema": {
      "name": "Pagination",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "'simple'",
                "computed": false
              },
              {
                "value": "'mini'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "分页组件类型",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "分页组件类型"
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "'arrow-only'",
                "computed": false
              },
              {
                "value": "'arrow-prev-only'",
                "computed": false
              },
              {
                "value": "'no-border'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "前进后退按钮样式",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "前进后退按钮样式"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "分页组件大小",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "分页组件大小"
        },
        "current": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "（受控）当前页码",
          "docblock": "（受控）当前页码"
        },
        "defaultCurrent": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "（非受控）初始页码",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "docblock": "（非受控）初始页码"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "页码发生改变时的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "页码发生改变时的回调函数\n@param {Number} current 改变后的页码数\n@param {Object} e 点击事件对象",
          "params": [
            {
              "name": "current",
              "description": "改变后的页码数",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "e",
              "description": "点击事件对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "total": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "总记录数",
          "defaultValue": {
            "value": "100",
            "computed": false
          },
          "docblock": "总记录数"
        },
        "pageShowCount": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "页码显示的数量，更多的使用...代替",
          "defaultValue": {
            "value": "5",
            "computed": false
          },
          "docblock": "页码显示的数量，更多的使用...代替"
        },
        "pageSize": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "一页中的记录数",
          "defaultValue": {
            "value": "10",
            "computed": false
          },
          "docblock": "一页中的记录数"
        },
        "pageSizeSelector": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'filter'",
                "computed": false
              },
              {
                "value": "'dropdown'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "每页显示记录数量选择器类型",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "每页显示记录数量选择器类型"
        },
        "pageSizeList": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "number"
            }
          },
          "required": false,
          "description": "每页显示记录数量选择器可选值",
          "defaultValue": {
            "value": "[5, 10, 20]",
            "computed": false
          },
          "docblock": "每页显示记录数量选择器可选值"
        },
        "pageSizePosition": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'start'",
                "computed": false
              },
              {
                "value": "'end'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "每页显示记录数量选择器在组件中的位置",
          "defaultValue": {
            "value": "'start'",
            "computed": false
          },
          "docblock": "每页显示记录数量选择器在组件中的位置"
        },
        "onPageSizeChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "每页显示记录数量改变时的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "每页显示记录数量改变时的回调函数\n@param {Number} pageSize 改变后的每页显示记录数",
          "params": [
            {
              "name": "pageSize",
              "description": "改变后的每页显示记录数",
              "type": {
                "name": "Number"
              }
            }
          ],
          "returns": null
        },
        "hideOnlyOnePage": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "当分页数为1时，是否隐藏分页器",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "当分页数为1时，是否隐藏分页器"
        },
        "showJump": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域"
        },
        "link": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：http://xxx.com/{page}",
          "docblock": "设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：http://xxx.com/{page}"
        },
        "locale": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义国际化文案对象",
          "docblock": "自定义国际化文案对象",
          "properties": []
        },
        "language": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'zh-cn'",
                "computed": false
              },
              {
                "value": "'en-us'",
                "computed": false
              },
              {
                "value": "'zh-tw'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "自定义国际化语言",
          "docblock": "自定义国际化语言"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ntype | 分页组件类型<br><br>**可选值**:<br>'normal', 'simple', 'mini' | Enum | 'normal'\nshape | 前进后退按钮样式<br><br>**可选值**:<br>'normal', 'arrow-only', 'arrow-prev-only', 'no-border' | Enum | 'normal'\nsize | 分页组件大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\ncurrent | （受控）当前页码 | Number | -\ndefaultCurrent | （非受控）初始页码 | Number | 1\nonChange | 页码发生改变时的回调函数<br><br>**签名**:<br>Function(current: Number, e: Object) => void<br>**参数**:<br>*current*: {Number} 改变后的页码数<br>*e*: {Object} 点击事件对象 | Function | () =&gt; {}\ntotal | 总记录数 | Number | 100\npageShowCount | 页码显示的数量，更多的使用...代替 | Number | 5\npageSize | 一页中的记录数 | Number | 10\npageSizeSelector | 每页显示记录数量选择器类型<br><br>**可选值**:<br>false, 'filter', 'dropdown' | Enum | false\npageSizeList | 每页显示记录数量选择器可选值 | Array&lt;Number&gt; | [5, 10, 20]\npageSizePosition | 每页显示记录数量选择器在组件中的位置<br><br>**可选值**:<br>'start', 'end' | Enum | 'start'\nonPageSizeChange | 每页显示记录数量改变时的回调函数<br><br>**签名**:<br>Function(pageSize: Number) => void<br>**参数**:<br>*pageSize*: {Number} 改变后的每页显示记录数 | Function | () =&gt; {}\nhideOnlyOnePage | 当分页数为1时，是否隐藏分页器 | Boolean | false\nshowJump | type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域 | Boolean | true\nlink | 设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：http://xxx.com/{page} | String | -\nlocale | 自定义国际化文案对象 | Object | -\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'zh-cn', 'en-us', 'zh-tw' | Enum | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "受控分页",
        "order": "1",
        "jsx": "import { Pagination } from \"@icedesign/base\";\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      current: 2\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(current) {\n    this.setState({\n      current\n    });\n  }\n\n  render() {\n    return (\n      <Pagination current={this.state.current} onChange={this.handleChange} />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n受控分页，是指分页组件的状态由父组件维护，组件自身只负责渲染其父组件传递的值，父组件通过 `current` 属性传递当前的值。\n\n"
      },
      {
        "title": "分页按钮链接",
        "order": "7",
        "jsx": "import { Pagination } from \"@icedesign/base\";\n\nconst format = window.location.href + \"#/{page}\";\n\nReactDOM.render(<Pagination defaultCurrent={2} link={format} />, mountNode);\n\n",
        "css": "",
        "body": "\n可以通过指定 `link` 属性来设置页码按钮的跳转链接，方便SEO，link属性的值为一个包含`{page}`的模板字符串，Pagination组件会将该占位符替换为具体的页码数字。\n\n"
      },
      {
        "title": "每页显示",
        "order": "5",
        "jsx": "import { Pagination } from \"@icedesign/base\";\n\nconst handlePageSizeChange = size => console.log(size);\n\nReactDOM.render(\n  <div>\n    <h3>无每页数量选择器</h3>\n    <Pagination pageSizeSelector={false} />\n    <h3>filter类型每页数量选择器</h3>\n    <Pagination\n      pageSizeSelector=\"filter\"\n      onPageSizeChange={handlePageSizeChange}\n    />\n    <h3>dropdown类型每页数量选择器，并且至于整个组件的尾部</h3>\n    <Pagination\n      pageSizeSelector=\"dropdown\"\n      pageSizePosition=\"end\"\n      onPageSizeChange={handlePageSizeChange}\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过设置 `onPageSizeChange` 属性来指定每页显示的数量变化时的回调函数。\n可以通过设置 `pageSizePosition` 属性来指定 每页显示数量选择 的部件显示在整个组件的开始位置还是结束位置。\n可以通过设置 `pageSizeList` 属性来指定 每页显示数量 可选的值。<br>\n可以通过设置 `pageSizeSelector` 属性来指定是否显示 每页数量选择 的部件以及部件形状。<br>\n可以通过设置 `pageSize` 属性来指定每页显示的数量。<br>\n\n"
      },
      {
        "title": "配合react-router使用",
        "order": "8",
        "jsx": "import { Pagination } from \"@icedesign/base\";\nimport { hashHistory } from \"react-router\";\n\nfunction handleChange(page) {\n  hashHistory.push(page.toString());\n}\n\nReactDOM.render(\n  <Pagination defaultCurrent={2} onChange={handleChange} />,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n单页应用场景下，Pagination组件可以使用外部跳转的方法来实现单页内部跳转。\n\n"
      },
      {
        "title": "前进后退按钮只显示箭头",
        "order": "4",
        "jsx": "import { Pagination } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>normal</h3>\n    <Pagination defaultCurrent={2} />\n    <h3>arrow-only</h3>\n    <Pagination defaultCurrent={2} shape=\"arrow-only\" />\n    <h3>arrow-prev-only</h3>\n    <Pagination defaultCurrent={2} shape=\"arrow-prev-only\" />\n    <h3>no-border</h3>\n    <Pagination defaultCurrent={2} shape=\"no-border\" type=\"simple\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-pagination + .next-pagination {\n    margin-top: 20px;\n}\n",
        "body": "\n可以通过指定 `shape` 属性来设置前进后退按钮箭头的显示方式。\n\n"
      },
      {
        "title": "显示总数",
        "order": "6",
        "jsx": "import { Pagination } from \"@icedesign/base\";\n\nconst total = 50;\n\nReactDOM.render(\n  <div>\n    <span>{`共 ${total} 项`}</span>\n    <Pagination className=\"custom-pagination\" total={total} />\n  </div>,\n  mountNode\n);\n\n",
        "css": ".custom-pagination {\n    display: inline-block;\n    margin-left: 10px;\n}\n",
        "body": "\n分页组件自身并未提供显示总数的功能，但是你可以像这个例子所展示的那样轻松实现该功能。\n\n"
      },
      {
        "title": "分页尺寸",
        "order": "2",
        "jsx": "import { Pagination } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>small</h3>\n    <Pagination defaultCurrent={2} size=\"small\" />\n    <h3>medium</h3>\n    <Pagination defaultCurrent={2} size=\"medium\" />\n    <h3>large</h3>\n    <Pagination defaultCurrent={2} size=\"large\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过指定 `size` 属性来设置分页的尺寸。\n\n"
      },
      {
        "title": "分页类型",
        "order": "3",
        "jsx": "import { Pagination } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>normal</h3>\n    <Pagination defaultCurrent={2} />\n    <h3>simple</h3>\n    <Pagination defaultCurrent={2} type=\"simple\" />\n    <h3>mini</h3>\n    <Pagination defaultCurrent={2} type=\"mini\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过指定 `type` 属性来设置分页的类型。\n\n"
      },
      {
        "title": "非受控分页",
        "order": "0",
        "jsx": "import { Pagination } from \"@icedesign/base\";\n\nconst change = function(value) {\n  console.log(value);\n};\n\nReactDOM.render(<Pagination defaultCurrent={2} onChange={change} />, mountNode);\n\n",
        "css": "",
        "body": "\n非受控分页，是指分页组件的状态由自己维护，组件值的改变可以通过 `onChange` 事件通知父组件，默认值由 `defaultCurrent` 初始化。\n\n"
      }
    ]
  },
  {
    "name": "Progress",
    "category": "Components",
    "title": "进度",
    "type": "展示",
    "importStatement": "import { Progress } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n展示操作的当前进度。\n\n### 何时使用\n\n在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。\n\n-   操作在后台运行，需要耗费一定的客户端等待时间。\n-   操作需要展示一个完成进度的百分比。\n\n",
    "propsSchema": {
      "name": "Progress",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式的品牌前缀"
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'circle'",
                "computed": false
              },
              {
                "value": "'line'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "形态",
          "defaultValue": {
            "value": "'line'",
            "computed": false
          },
          "docblock": "形态"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "'progressive'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "类型",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "类型"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "尺寸",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "尺寸"
        },
        "percent": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "所占百分比",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "docblock": "所占百分比"
        },
        "suffix": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "进度条上的说明内容",
          "docblock": "进度条上的说明内容"
        },
        "showInfo": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否展示内容",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否展示内容"
        },
        "state": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'success'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "状态",
          "docblock": "状态"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义样式名",
          "docblock": "自定义样式名"
        },
        "animation": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否开启动效",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否开启动效"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\nshape | 形态<br><br>**可选值**:<br>'circle', 'line' | Enum | 'line'\ntype | 类型<br><br>**可选值**:<br>'normal', 'progressive' | Enum | 'normal'\nsize | 尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\npercent | 所占百分比 | Number | 0\nsuffix | 进度条上的说明内容 | ReactNode | -\nshowInfo | 是否展示内容 | Boolean | true\nstate | 状态<br><br>**可选值**:<br>'success', 'error' | Enum | -\nclassName | 自定义样式名 | String | -\nanimation | 是否开启动效 | Boolean | true\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本进度条",
        "order": "0",
        "jsx": "import { Progress } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Progress percent={30} />\n    <Progress percent={50} />\n    <Progress percent={90} />\n    <Progress percent={40} showInfo={false} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n普通模式的进度条，通过 `showInfo` 属性控制是否显示右侧的文本信息。\n\n"
      },
      {
        "title": "圆形进度条",
        "order": "1",
        "jsx": "import { Progress } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Progress percent={30} shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={50} shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={90} shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={40} shape=\"circle\" showInfo={false} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\nState 目前支持两种不同类型的进度条，分别是条状进度条和圆形进度条。可以通过 `shape` 属性来控制。\n\n"
      },
      {
        "title": "动态展示",
        "order": "4",
        "jsx": "import { Progress, Button, Select } from \"@icedesign/base\";\n\nclass CustomProgress extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percent: 0,\n      shape: \"circle\",\n      type: \"progressive\",\n      size: \"medium\"\n    };\n  }\n  startProgress() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n    this.interval = setInterval(() => {\n      if (this.state.percent > 99) {\n        clearInterval(this.interval);\n      }\n      this.setState(prevState => {\n        const current =\n          prevState.percent + 15 > 100 ? 100 : prevState.percent + 15;\n        return { percent: current };\n      });\n    }, 500);\n  }\n  stopProgress() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n    this.setState({ percent: 0 });\n  }\n  onChangeShape(val) {\n    this.setState({\n      shape: val\n    });\n  }\n  onChangeType(val) {\n    this.setState({\n      type: val\n    });\n  }\n  onChangeSize(val) {\n    this.setState({\n      size: val\n    });\n  }\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <div className=\"progress-panel\">\n          <Select\n            onChange={this.onChangeShape.bind(this)}\n            className=\"custom-select\"\n            placeholder=\"选择进度条的外观\"\n          >\n            {[\"circle\", \"line\"].map((item, index) => (\n              <Select.Option key={index} value={item}>\n                {item}\n              </Select.Option>\n            ))}\n          </Select>\n\n          <Select\n            onChange={this.onChangeType.bind(this)}\n            className=\"custom-select\"\n            placeholder=\"请选择进度条的类型\"\n          >\n            {[\"normal\", \"progressive\"].map((item, index) => (\n              <Select.Option key={index} value={item}>\n                {item}\n              </Select.Option>\n            ))}\n          </Select>\n\n          <Select\n            onChange={this.onChangeSize.bind(this)}\n            className=\"custom-select\"\n            placeholder=\"请选择进度条的尺寸\"\n          >\n            {[\"small\", \"medium\", \"large\"].map((item, index) => (\n              <Select.Option key={index} value={item}>\n                {item}\n              </Select.Option>\n            ))}\n          </Select>\n\n          <Button.Group>\n            <Button\n              onClick={this.startProgress.bind(this)}\n              disabled={state.percent > 0}\n            >\n              开始\n            </Button>\n            <Button\n              onClick={this.stopProgress.bind(this)}\n              type=\"primary\"\n              disabled={state.percent === 0}\n            >\n              归零\n            </Button>\n          </Button.Group>\n        </div>\n\n        <Progress\n          percent={state.percent}\n          type={state.type}\n          shape={state.shape}\n          size={state.size}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<CustomProgress />, mountNode);\n\n",
        "css": ".progress-panel {\n    display: flex;\n    margin-bottom: 14px;\n}\n\n.custom-select {\n    margin-right: 20px;\n}\n",
        "body": "\n当 `type` 取值为 `progressive`，此时为增强模式的进度条，会根据当前进度展示不同的样式\n\n"
      },
      {
        "title": "自定义展示内容",
        "order": "5",
        "jsx": "import { Progress, Icon } from \"@icedesign/base\";\n\nconst successPrefix = (\n  <Icon type=\"select\" size=\"xl\" style={{ color: \"green\" }} />\n);\nconst errorPrefix = <Icon type=\"close\" size=\"xl\" style={{ color: \"red\" }} />;\n\nReactDOM.render(\n  <div>\n    <Progress percent={66} shape=\"circle\" state=\"error\" suffix={errorPrefix} />{\" \"}\n    &nbsp;&nbsp;\n    <Progress\n      percent={100}\n      shape=\"circle\"\n      state=\"success\"\n      suffix={successPrefix}\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过 `Suffix` 属性传入您想要的展示的文本内容。\n\n"
      },
      {
        "title": "尺寸",
        "order": "2",
        "jsx": "import { Progress } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>不同尺寸的进度条</h3>\n    <Progress percent={30} size=\"small\" />\n    <Progress percent={50} size=\"medium\" />\n    <Progress percent={90} size=\"large\" />\n    <br />\n    <h3>不同尺寸的圆形进度条</h3>\n    <Progress percent={30} size=\"small\" shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={50} size=\"medium\" shape=\"circle\" /> &nbsp;&nbsp;\n    <Progress percent={90} size=\"large\" shape=\"circle\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过 `size` 属性制定进度条的大小。\n\n"
      },
      {
        "title": "进度条不同状态",
        "order": "3",
        "jsx": "import { Progress } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div className=\"\">\n    <Progress percent={20} shape=\"circle\" className=\"custom-progress\" />\n    <Progress\n      percent={95}\n      state=\"success\"\n      shape=\"circle\"\n      className=\"custom-progress\"\n    />\n    <Progress\n      percent={95}\n      state=\"error\"\n      shape=\"circle\"\n      className=\"custom-progress\"\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": ".custom-progress {\n    margin: 0 20px;\n}\n",
        "body": "\n当您不设置 `state` 属性的值时，或者不提供 `state` 属性值时，Progress 处于常规状态。\nProgress 组件支持三种状态的展示，分别是常规状态、成功状态，和失败状态。您可以通过 `state` 属性展示流程的不同周期。\n\n"
      }
    ]
  },
  {
    "name": "Radio",
    "category": "Components",
    "title": "单按钮",
    "type": "表单",
    "importStatement": "import { Radio } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n单选框\n\n### 何时使用\n\n单选按钮允许用户从一个数据集中选择单个选项。如果你觉得用户需要并排看到所有的可选项，使用单选按钮进行排他操作。此外，考虑使用下拉列表，相对于显示所有的选项占用更少的空间。\n\n",
    "propsSchema": {
      "name": "Radio",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内敛样式",
          "docblock": "自定义内敛样式",
          "properties": []
        },
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "设置radio是否选中",
          "docblock": "设置radio是否选中"
        },
        "defaultChecked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "radio的默认选中",
          "docblock": "radio的默认选中"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "状态变化时触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "状态变化时触发的事件\n@param {Boolean} checked 是否选中\n@param {Event} e Dom 事件对象",
          "params": [
            {
              "name": "checked",
              "description": "是否选中",
              "type": {
                "name": "Boolean"
              }
            },
            {
              "name": "e",
              "description": "Dom 事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "表示radio被禁用",
          "docblock": "表示radio被禁用"
        }
      },
      "methods": [],
      "order": 1,
      "subComponents": [
        {
          "name": "Group",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内敛样式",
              "docblock": "自定义内敛样式",
              "properties": []
            },
            "value": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              },
              "required": false,
              "description": "radio group的选中项的值",
              "docblock": "radio group的选中项的值"
            },
            "defaultValue": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              },
              "required": false,
              "description": "radio group的默认值",
              "docblock": "radio group的默认值"
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "选中值改变时的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "选中值改变时的事件\n@param {String/Number} value 选中项的值\n@param {Event} e Dom 事件对象",
              "params": [
                {
                  "name": "value",
                  "description": "选中项的值",
                  "type": {
                    "name": "String/Number"
                  }
                },
                {
                  "name": "e",
                  "description": "Dom 事件对象",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "returns": null
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "表示radio被禁用",
              "docblock": "表示radio被禁用"
            },
            "shape": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'button'",
                    "computed": false,
                    "description": "按钮状"
                  }
                ]
              },
              "required": false,
              "description": "可以设置成 button 展示形状",
              "docblock": "可以设置成 button 展示形状\n@enumdesc 按钮状",
              "value": [
                {
                  "value": "'button'",
                  "computed": false,
                  "description": "按钮状"
                }
              ]
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'large'",
                    "computed": false,
                    "description": "大"
                  },
                  {
                    "value": "'medium'",
                    "computed": false,
                    "description": "中"
                  },
                  {
                    "value": "'small'",
                    "computed": false,
                    "description": "小"
                  }
                ]
              },
              "required": false,
              "description": "与 `shape` 属性配套使用，shape设为button时有效",
              "defaultValue": {
                "value": "'medium'",
                "computed": false
              },
              "docblock": "与 `shape` 属性配套使用，shape设为button时有效\n@enumdesc 大, 中, 小",
              "value": [
                {
                  "value": "'large'",
                  "computed": false,
                  "description": "大"
                },
                {
                  "value": "'medium'",
                  "computed": false,
                  "description": "中"
                },
                {
                  "value": "'small'",
                  "computed": false,
                  "description": "小"
                }
              ]
            },
            "dataSource": {
              "type": {
                "name": "arrayOf",
                "value": {
                  "name": "any"
                }
              },
              "required": false,
              "description": "可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']`",
              "defaultValue": {
                "value": "[]",
                "computed": false
              },
              "docblock": "可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']`"
            },
            "children": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "element"
                    }
                  },
                  {
                    "name": "element"
                  }
                ]
              },
              "required": false,
              "description": "通过子元素方式设置内部radio",
              "docblock": "通过子元素方式设置内部radio"
            }
          },
          "methods": [],
          "order": 2
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nchecked | 设置radio是否选中 | Boolean | -\ndefaultChecked | radio的默认选中 | Boolean | -\nonChange | 状态变化时触发的事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>*checked*: {Boolean} 是否选中<br>*e*: {Event} Dom 事件对象 | Function | () =&gt; {}\ndisabled | 表示radio被禁用 | Boolean | -\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Group",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nvalue | radio group的选中项的值 | String/Number/Boolean | -\ndefaultValue | radio group的默认值 | String/Number/Boolean | -\nonChange | 选中值改变时的事件<br><br>**签名**:<br>Function(value: String/Number, e: Event) => void<br>**参数**:<br>*value*: {String/Number} 选中项的值<br>*e*: {Event} Dom 事件对象 | Function | () =&gt; {}\ndisabled | 表示radio被禁用 | Boolean | -\nshape | 可以设置成 button 展示形状<br><br>**可选值**:<br>'button'(按钮状) | Enum | -\nsize | 与 `shape` 属性配套使用，shape设为button时有效<br><br>**可选值**:<br>'large'(大)<br>'medium'(中)<br>'small'(小) | Enum | 'medium'\ndataSource | 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` | Array&lt;any&gt; | []\nchildren | 通过子元素方式设置内部radio | Array&lt;ReactElement&gt;/ReactElement | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Radio } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h6>Without Label</h6>\n    <Radio defaultChecked />&nbsp;\n    <Radio checked />&nbsp;\n    <Radio disabled />&nbsp;\n    <Radio checked disabled />&nbsp;\n    <Radio />\n    <br />\n    <h6>With Label</h6>\n    <Radio id=\"apple\">苹果</Radio>\n    <Radio id=\"banana\" />\n    <label htmlFor=\"banana\" className=\"next-radio-label\">\n      香蕉\n    </label>\n    <label>\n      <Radio id=\"pear\" />\n      <span className=\"next-radio-label\">雪梨</span>\n    </label>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n使用 `Radio` 渲染的基本组件。\n\n"
      },
      {
        "title": "按钮样式组件",
        "order": "4",
        "jsx": "import { Radio } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\",\n    disabled: false\n  },\n  {\n    value: \"pear\",\n    label: \"梨子\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\",\n    disabled: true\n  }\n];\n\nclass ControlApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value1: \"apple\",\n      value2: \"\"\n    };\n\n    this.onNestChange = this.onNestChange.bind(this);\n    this.onNormalChange = this.onNormalChange.bind(this);\n  }\n\n  onNormalChange(value) {\n    this.setState({\n      value1: value\n    });\n  }\n\n  onNestChange(value) {\n    this.setState({\n      value2: value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>size 为 medium的正常状态</h4>\n        <RadioGroup\n          dataSource={list}\n          shape=\"button\"\n          size=\"medium\"\n          value={this.state.value1}\n          onChange={this.onNormalChange}\n        />\n        <br />\n        <br />\n        <h4>size 为large 的状态</h4>\n        <RadioGroup\n          shape=\"button\"\n          size=\"large\"\n          value={this.state.value2}\n          onChange={this.onNestChange}\n        >\n          <Radio id=\"banana\" value=\"banana\">\n            香蕉\n          </Radio>\n          <Radio id=\"watermelon\" value=\"watermelon\">\n            西瓜\n          </Radio>\n          <Radio id=\"peach\" value=\"peach\">\n            桃子\n          </Radio>\n        </RadioGroup>\n        <br />\n        <br />\n        <h4>disabled 和选中后disabled的样子</h4>\n        <RadioGroup\n          shape=\"button\"\n          size=\"medium\"\n          value=\"banana\"\n          onChange={this.onNestChange}\n        >\n          <Radio id=\"peach\" disabled value=\"peach\">\n            桃子\n          </Radio>\n          <Radio id=\"banana\" disabled value=\"banana\">\n            香蕉\n          </Radio>\n        </RadioGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n\n",
        "css": "",
        "body": "\n使用 `RadioGroup` 渲染的组，通过设置 `shape=\"button\"` 可以让组件以按钮形式展示，同时可以通过 `size` 来控制组件大小。\n\n"
      },
      {
        "title": "受限组件",
        "order": "1",
        "jsx": "import { Radio } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nconst list = [\n  {\n    value: 0,\n    label: \"苹果\"\n  },\n  {\n    value: \"pear\",\n    label: \"梨\"\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\"\n  }\n];\n\nclass ControlApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"orange\"\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(value) {\n    this.setState({\n      value: value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        normal:{\" \"}\n        <RadioGroup\n          dataSource={list}\n          value={this.state.value}\n          onChange={this.onChange}\n        />\n        <br />\n        <br />\n        <br />\n        disabled:{\" \"}\n        <RadioGroup\n          disabled\n          dataSource={list}\n          value={this.state.value}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<ControlApp />, mountNode);\n\n",
        "css": "",
        "body": "\n使用 `RadioGroup` 渲染的组，通过设置 `value` 属性可以让组件变成[受限组件](https://facebook.github.io/react/docs/forms.html#controlled-components)。\n\n"
      },
      {
        "title": "嵌套组件",
        "order": "3",
        "jsx": "import { Radio } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nclass NestApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"orange\"\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(value) {\n    this.setState({\n      value: value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <RadioGroup value={this.state.value} onChange={this.onChange}>\n          <Radio id=\"apple\" value=\"apple\">\n            苹果\n          </Radio>\n          <Radio id=\"watermelon\" value=\"watermelon\">\n            西瓜\n          </Radio>\n          <Radio id=\"orange\" value=\"orange\">\n            橙子\n          </Radio>\n        </RadioGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<NestApp />, mountNode);\n\n",
        "css": "",
        "body": "\n使用 `RadioGroup`，通过直接嵌套 `Radio` 组件来渲染的组。\n\n"
      },
      {
        "title": "非受限组件",
        "order": "2",
        "jsx": "import { Radio } from \"@icedesign/base\";\n\nconst { Group: RadioGroup } = Radio;\n\nconst list = [\n  {\n    value: \"apple\",\n    label: \"苹果\",\n    disabled: false\n  },\n  {\n    value: \"pear\",\n    label: \"梨\",\n    disabled: true\n  },\n  {\n    value: \"orange\",\n    label: \"橙子\"\n  }\n];\n\nconst UnControlApp = () => {\n  return (\n    <div>\n      <RadioGroup dataSource={list} defaultValue={\"apple\"} />\n    </div>\n  );\n};\n\nReactDOM.render(<UnControlApp />, mountNode);\n\n",
        "css": "",
        "body": "\n使用 `RadioGroup` 渲染的组，通过设置 `defaultValue` 属性可以让组件变成[非受限组件](https://facebook.github.io/react/docs/forms.html#uncontrolled-components)。\n\n"
      }
    ]
  },
  {
    "name": "Range",
    "category": "Components",
    "title": "区段选择器",
    "type": "表单",
    "importStatement": "import { Range } from '@icedesign/base';",
    "body": "\n\n## 开发指南\n\n区间选择\n\n### 何时使用\n\n滑块控件(Sliders，简称滑块)可以让我们通过在连续或间断的区间内滑动锚点来选择一个合适的数值。区间最小值放在左边，对应的，最大值放在右边。滑块(Sliders)可以在滑动条的左右两端设定图标来反映数值的强度。这种交互特性使得它在设置诸如音量、亮度、色彩饱和度等需要反映强度等级的选项时成为一种极好的选择。\n\n### 使用注意\n\n-   onChange是和value进行配置做受控处理的。onChange在滑动过程中不会触发，滑动停止后会触发。\n-   onProcess不建议内部做setState 进行受控，因为会频繁触发，整个滑动过程中会一直触发。\n\n",
    "propsSchema": {
      "name": "Range",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内敛样式",
          "docblock": "自定义内敛样式",
          "properties": []
        },
        "slider": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'single'",
                "computed": false,
                "description": "单个"
              },
              {
                "value": "'double'",
                "computed": false,
                "description": "两个"
              }
            ]
          },
          "required": false,
          "description": "滑块个数",
          "defaultValue": {
            "value": "'single'",
            "computed": false
          },
          "docblock": "滑块个数\n@enumdesc 单个, 两个",
          "value": [
            {
              "value": "'single'",
              "computed": false,
              "description": "单个"
            },
            {
              "value": "'double'",
              "computed": false,
              "description": "两个"
            }
          ]
        },
        "min": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "最小值",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "docblock": "最小值"
        },
        "max": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "最大值",
          "defaultValue": {
            "value": "100",
            "computed": false
          },
          "docblock": "最大值"
        },
        "step": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "步长，取值必须大于 0，并且可被 (max - min) 整除。",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "docblock": "步长，取值必须大于 0，并且可被 (max - min) 整除。"
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "number"
                }
              }
            ]
          },
          "required": false,
          "description": "设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`",
          "docblock": "设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`"
        },
        "defaultValue": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "number"
                }
              }
            ]
          },
          "required": false,
          "description": "设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`",
          "docblock": "设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`"
        },
        "marks": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "number"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "number"
                }
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false,
          "description": "刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示）",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示）"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "值为 `true` 时，滑块为禁用状态",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "值为 `true` 时，滑块为禁用状态"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用",
          "defaultValue": {
            "value": "() => {\n}",
            "computed": false
          },
          "docblock": "当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用\n@param {String/number} value",
          "params": [
            {
              "name": "value",
              "description": null,
              "type": {
                "name": "String/number"
              }
            }
          ],
          "returns": null
        },
        "onProcess": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用",
          "defaultValue": {
            "value": "() => {\n}",
            "computed": false
          },
          "docblock": "滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用\n@param {String/number} value",
          "params": [
            {
              "name": "value",
              "description": null,
              "type": {
                "name": "String/number"
              }
            }
          ],
          "returns": null
        },
        "hasTip": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示tip",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示tip"
        },
        "tipFormatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "tip文件自定义处理",
          "defaultValue": {
            "value": "(value) => {\n    return value;\n}",
            "computed": false
          },
          "docblock": "tip文件自定义处理",
          "params": [],
          "returns": null
        },
        "reverse": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "选中态反转",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "选中态反转"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\nslider | 滑块个数<br><br>**可选值**:<br>'single'(单个)<br>'double'(两个) | Enum | 'single'\nmin | 最小值 | Number | 0\nmax | 最大值 | Number | 100\nstep | 步长，取值必须大于 0，并且可被 (max - min) 整除。 | Number | 1\nvalue | 设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]` | Number/Array&lt;Number&gt; | -\ndefaultValue | 设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]` | Number/Array&lt;Number&gt; | -\nmarks | 刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示） | Boolean/Number/Array&lt;Number&gt;/Object | false\ndisabled | 值为 `true` 时，滑块为禁用状态 | Boolean | false\nonChange | 当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用<br><br>**签名**:<br>Function(value: String/number) => void<br>**参数**:<br>*value*: {String/number} null | Function | () =&gt; { }\nonProcess | 滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用<br><br>**签名**:<br>Function(value: String/number) => void<br>**参数**:<br>*value*: {String/number} null | Function | () =&gt; { }\nhasTip | 是否显示tip | Boolean | true\ntipFormatter | tip文件自定义处理<br><br>**签名**:<br>Function() => void | Function | (value) =&gt; {     return value; }\nreverse | 选中态反转 | Boolean | false\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Range } from \"@icedesign/base\";\n\nconst style = {\n  marginBottom: \"15px\"\n};\n\nReactDOM.render(\n  <div style={{ width: \"400px\", margin: \"50px\" }}>\n    <h4>单滑块-左向右</h4>\n    <Range defaultValue={30} style={style} hasTip={false} />\n    <h4>单滑块-右向左</h4>\n    <Range defaultValue={30} style={style} reverse hasTip={false} />\n    <h4>双滑块-从外到里</h4>\n    <Range slider={\"double\"} defaultValue={[20, 40]} style={style} />\n    <h4>双滑块-从里到外</h4>\n    <Range slider={\"double\"} defaultValue={[20, 40]} style={style} reverse />\n    <h4>Disabled</h4>\n    <Range defaultValue={30} disabled style={style} />\n    <h4>Disabled</h4>\n    <Range slider={\"double\"} defaultValue={[20, 40]} disabled style={style} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n基本滑块，当 `slider` 为 `double` 时，渲染为双滑块。当 `disabled` 为 `true` 时，滑块处于不可用状态。\n\n"
      },
      {
        "title": "事件",
        "order": "3",
        "jsx": "import { Range } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 128,\n      doubleValue: [10, 30]\n    };\n  }\n\n  //受控使用, onChange,移动结束时,如果startValue和endValue不等,会触发这个事件\n  onChange(value) {\n    console.log(\"onChange value:\", value);\n    this.setState({ value });\n  }\n\n  //mouseDown以及onMove的时候,如果startValue和endValue不等,会触发这个事件,不建议在这里做setState.\n  onProcess(value) {\n    this.setState({ value });\n    console.log(\"onProcess: \", value);\n  }\n\n  onChangeDouble(value) {\n    this.setState({\n      doubleValue: value\n    });\n  }\n  render() {\n    return (\n      <div style={{ width: \"400px\", margin: \"50px\" }}>\n        <p>范围 0 ~ 1024</p>\n        <div style={{ width: \"400px\", marginTop: \"50px\" }}>\n          <Range\n            value={this.state.value}\n            onChange={this.onChange.bind(this)}\n            onProcess={this.onProcess.bind(this)}\n            min={0}\n            max={1024}\n            marks={[0, 1024]}\n          />\n        </div>\n\n        <p>设了value受控后的,不设置onChange的状态</p>\n        <div style={{ width: \"400px\", marginTop: \"50px\" }}>\n          <Range\n            defaultValue={256}\n            value={300}\n            onProcess={this.onProcess.bind(this)}\n            min={0}\n            max={1024}\n            marks={[0, 1024]}\n          />\n        </div>\n\n        <p>double slider controlled</p>\n        <div style={{ width: \"400px\", marginTop: \"50px\" }}>\n          <Range\n            slider=\"double\"\n            value={this.state.doubleValue}\n            onChange={this.onChangeDouble.bind(this)}\n            onProcess={this.onProcess.bind(this)}\n            min={0}\n            max={1024}\n            marks={[0, 1024]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\nonChange,onProcess事件\n\n"
      },
      {
        "title": "范围与 step",
        "order": "5",
        "jsx": "import { Range, NumberPicker, Grid, Icon } from \"@icedesign/base\";\n\nconst { Row, Col } = Grid;\n\nclass Demo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      valueInt: 3,\n      valueDec: 0.05,\n      valueIcon: 1,\n      preIconClass: \"\",\n      afterIconClass: \"\"\n    };\n  }\n\n  onChangeInt(value) {\n    console.log(value);\n    this.setState(\n      Object.assign({}, this.state, {\n        valueInt: value\n      })\n    );\n  }\n\n  onChangeDec(value) {\n    this.setState(\n      Object.assign({}, this.state, {\n        valueDec: value\n      })\n    );\n  }\n\n  onIconRangeProcess(value) {\n    let mid = 50;\n    this.setState(\n      Object.assign({}, this.state, {\n        valueIcon: value,\n        preIconClass: value < mid ? \"myicon-highlight\" : \"\",\n        afterIconClass: value >= mid ? \"myicon-highlight\" : \"\"\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"400px\", margin: \"50px\" }}>\n        <h2>numberPicker联动</h2>\n        <Row>\n          <Col span=\"12\" style={{ marginTop: \"10px\" }}>\n            <Range\n              value={this.state.valueInt}\n              min={0}\n              max={20}\n              step={1}\n              onChange={this.onChangeInt.bind(this)}\n            />\n          </Col>\n          <Col span=\"12\">\n            <NumberPicker\n              value={this.state.valueInt}\n              min={0}\n              max={1024}\n              step={1}\n              onChange={this.onChangeInt.bind(this)}\n            />\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col span=\"12\" style={{ marginTop: \"10px\" }}>\n            <Range\n              value={this.state.valueDec}\n              min={0}\n              max={1}\n              step={0.01}\n              onChange={this.onChangeDec.bind(this)}\n            />\n          </Col>\n          <Col span=\"12\">\n            <NumberPicker\n              value={this.state.valueDec}\n              min={0}\n              max={1}\n              step={0.01}\n              onChange={this.onChangeDec.bind(this)}\n            />\n          </Col>\n        </Row>\n        <h2>与Icon结合使用</h2>\n\n        <div className=\"iconWrapper\">\n          <Icon className={\"myicon \" + this.state.preIconClass} type=\"cry\" />\n          <Range\n            min={1}\n            max={100}\n            onChange={this.onIconRangeProcess.bind(this)}\n            value={this.state.valueIcon}\n          />\n          <Icon\n            className={\"myicon \" + this.state.afterIconClass}\n            type=\"smile\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".iconWrapper {\n  position: relative;\n  padding: 0px 40px;\n}\n\n.iconWrapper .myicon {\n  position: absolute;\n  top: -3px;\n  width: 16px;\n  height: 16px;\n  line-height: 1;\n  font-size: 16px;\n  color: #ccc;\n}\n\n.iconWrapper .myicon:first-child {\n  left: 0;\n}\n\n.iconWrapper .myicon:last-child {\n  right: 0;\n}\n\n.myicon.myicon-highlight {\n  color: #666;\n}\n",
        "body": "\n与number-picker结合,外部控制,与Icon结合设置边界Icon\n\n"
      },
      {
        "title": "刻度及标识",
        "order": "1",
        "jsx": "import { Range } from \"@icedesign/base\";\n\nconst style = {\n  marginBottom: \"40px\",\n  marginTop: \"40px\"\n};\n\nReactDOM.render(\n  <div style={{ width: \"400px\", margin: \"50px\" }}>\n    <p>设置首尾</p>\n    <Range defaultValue={0} marks={[0, 100]} style={style} />\n    <Range\n      slider={\"double\"}\n      defaultValue={[20, 40]}\n      scales={[0, 100]}\n      marks={[0, 100]}\n      style={style}\n    />\n    <Range defaultValue={30} style={style} />\n    <p>平分</p>\n    <Range defaultValue={30} marks={5} style={style} />\n    <Range\n      slider={\"double\"}\n      defaultValue={[20, 40]}\n      scales={10}\n      marks={10}\n      style={style}\n    />\n    <Range\n      disabled\n      slider={\"double\"}\n      defaultValue={[20, 40]}\n      scales={10}\n      marks={10}\n      style={style}\n    />\n    <p>自由刻度</p>\n    <Range defaultValue={30} marks={[0, 26, 37, 100]} style={style} />\n    <Range\n      slider={\"double\"}\n      defaultValue={[20, 40]}\n      marks={[0, 26, 37, 100]}\n      style={style}\n      hasTip={false}\n    />\n    <Range\n      defaultValue={30}\n      marks={{ 0: \"0°C\", 26: \"26°C\", 37: \"37°C\", 100: \"100°C\" }}\n      style={style}\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n通过 `scales` 与 `marks` 属性设置刻度及标识。\n\n"
      },
      {
        "title": "min,max,step",
        "order": "2",
        "jsx": "import { Range } from \"@icedesign/base\";\n\nconst style = {\n  marginBottom: \"40px\",\n  marginTop: \"40px\"\n};\nReactDOM.render(\n  <div style={{ width: \"400px\", margin: \"50px\" }}>\n    <p>范围 0 ~ 1024</p>\n    <Range\n      defaultValue={128}\n      min={0}\n      max={1024}\n      marks={[0, 1024]}\n      style={style}\n    />\n    <p>范围 0 ~ 1024，一次移动 128</p>\n    <Range\n      defaultValue={512}\n      min={0}\n      max={1024}\n      step={128}\n      marks={[0, 1024]}\n      style={style}\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过 `min` 与 `max` 设置范围边界。通过 `step`(被 max - min 整除) 设置移动的最小步频。min默认为0,max默认为100.\n\n"
      },
      {
        "title": "选择态反转",
        "order": "7",
        "jsx": "import { Range } from \"@icedesign/base\";\n\nconst style = {\n  marginBottom: \"15px\"\n};\n\nReactDOM.render(\n  <div style={{ width: \"400px\", margin: \"50px\" }}>\n    <Range defaultValue={30} style={style} hasTip={false} />\n    <Range defaultValue={30} style={style} reverse hasTip={false} />\n    <Range slider={\"double\"} defaultValue={[20, 40]} style={style} />\n    <Range slider={\"double\"} defaultValue={[20, 40]} style={style} reverse />\n    <Range defaultValue={30} disabled style={style} />\n    <Range defaultValue={30} disabled style={style} reverse />\n    <Range slider={\"double\"} defaultValue={[20, 40]} disabled style={style} />\n    <Range\n      slider={\"double\"}\n      defaultValue={[20, 40]}\n      disabled\n      style={style}\n      reverse\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n设置reverse为true, 选中态会反转。\n\n"
      },
      {
        "title": "tipFormmater",
        "order": "5",
        "jsx": "import { Range } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 128\n    };\n  }\n\n  //onChange,移动结束时,如果startValue和endValue不等,会触发这个事件\n  onChange(value) {\n    console.log(\"onChange value:\", value);\n  }\n\n  //mouseDown以及onMove的时候,如果startValue和endValue不等,会触发这个事件.如果是受控组件,改变state要写在这个事件里\n  onProcess(value) {\n    console.log(\"onProcess\");\n    this.setState({ value });\n  }\n\n  formatter(value) {\n    return \"$\" + value;\n  }\n  render() {\n    return (\n      <div style={{ width: \"400px\", margin: \"50px\" }}>\n        <p>范围 0 ~ 1024</p>\n        <div style={{ width: \"400px\", marginTop: \"50px\" }}>\n          <Range\n            defaultValue={256}\n            tipFormatter={this.formatter.bind(this)}\n            value={this.state.value}\n            onChange={this.onChange.bind(this)}\n            onProcess={this.onProcess.bind(this)}\n            min={0}\n            max={1024}\n            marks={[0, 1024]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\ntipFormatter 示例\n\n"
      }
    ]
  },
  {
    "name": "Rating",
    "category": "Components",
    "title": "评分",
    "type": "基本",
    "importStatement": "import { Rating } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n评分组件通常用于用户反馈场景。\n\n",
    "propsSchema": {
      "name": "Rating",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式的品牌前缀"
        },
        "defaultValue": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "默认值",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "docblock": "默认值"
        },
        "value": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "值",
          "docblock": "值"
        },
        "count": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "评分的总数",
          "defaultValue": {
            "value": "5",
            "computed": false
          },
          "docblock": "评分的总数"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "'grade'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "类型",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "类型"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "尺寸",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "尺寸"
        },
        "allowHalf": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否允许半星评分",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否允许半星评分"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "用户点击评分时触发的回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "用户点击评分时触发的回调\n@param {String} value 评分值",
          "params": [
            {
              "name": "value",
              "description": "评分值",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否禁用",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否禁用"
        },
        "showInfo": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "是否展示文本信息",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否展示文本信息"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义样式名",
          "docblock": "自定义样式名"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\ndefaultValue | 默认值 | Number | 0\nvalue | 值 | Number | -\ncount | 评分的总数 | Number | 5\ntype | 类型<br><br>**可选值**:<br>'normal', 'grade' | Enum | 'normal'\nsize | 尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nallowHalf | 是否允许半星评分 | Boolean | false\nonChange | 用户点击评分时触发的回调<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>*value*: {String} 评分值 | Function | () =&gt; {}\ndisabled | 是否禁用 | Boolean | false\nshowInfo | 是否展示文本信息 | Boolean/Function | false\nclassName | 自定义样式名 | String | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Rating defaultValue={3.2} onChange={val => console.log(val)} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n最简单的用法。\n\n"
      },
      {
        "title": "只读模式",
        "order": "4",
        "jsx": "import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(<Rating defaultValue={3.2} disabled />, mountNode);\n\n",
        "css": "",
        "body": "\n设置 `disabled` 属性后，评分组件仅展示模式，不可选择。\n\n"
      },
      {
        "title": "等级提示",
        "order": "5",
        "jsx": "import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(<Rating defaultValue={2} type=\"grade\" />, mountNode);\n\n",
        "css": "",
        "body": "\n设置 `type` 属性取值为 `grade`，使评分组件具有等级提示信息。\n\n"
      },
      {
        "title": "半星评分",
        "order": "2",
        "jsx": "import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(<Rating defaultValue={3.2} allowHalf />, mountNode);\n\n",
        "css": "",
        "body": "\n默认情况下评分组件只支持整数评分，通过开启 `allowHalf` 属性可以支持半星评分。\n\n"
      },
      {
        "title": "显示文案",
        "order": "6",
        "jsx": "import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Rating\n      defaultValue={3.2}\n      onChange={val => console.log(val)}\n      showInfo={val => val}\n    />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n评分组件提供了 `showInfo` 属性，它支持传入一个函数来返回组件展示的文案信息。\n\n"
      },
      {
        "title": "尺寸",
        "order": "1",
        "jsx": "import { Rating } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Rating defaultValue={3.2} size=\"small\" />\n    <br />\n    <br />\n    <Rating defaultValue={3.2} />\n    <br />\n    <br />\n    <Rating defaultValue={3.2} size=\"large\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n默认尺寸为 `medium` 。\n通过 `size` 属性可以控制评分组件的大小，支持三种尺寸 `small`, `medium`, `large`。\n\n"
      }
    ]
  },
  {
    "name": "Search",
    "category": "Components",
    "title": "搜索",
    "type": "表单",
    "importStatement": "import { Search } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n页面、表单数据搜索时使用\n\n",
    "propsSchema": {
      "name": "Search",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "size": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "大小，可选 `primary/secondary` 可选择 `medium/large`; `normal` 可选择 `small/medium`",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "大小，可选 `primary/secondary` 可选择 `medium/large`; `normal` 可选择 `small/medium`"
        },
        "filter": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "前置下拉框,default为默认选中项 `[{text:'Products', value:'Products',default: true},{text:'Suppliers',valuse:'Suppliers'}]`",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "前置下拉框,default为默认选中项 `[{text:'Products', value:'Products',default: true},{text:'Suppliers',valuse:'Suppliers'}]`"
        },
        "hasIcon": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "搜索按钮图标",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "搜索按钮图标"
        },
        "searchText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "搜索按钮文案",
          "defaultValue": {
            "value": "'Search'",
            "computed": false
          },
          "docblock": "搜索按钮文案"
        },
        "combox": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "定制下拉框,适合业务特殊定制",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "定制下拉框,适合业务特殊定制"
        },
        "inputWidth": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "搜索框宽度",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          },
          "docblock": "搜索框宽度"
        },
        "overlayVisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "与combox配合使用,控制定制下拉框的展现",
          "docblock": "与combox配合使用,控制定制下拉框的展现"
        },
        "dataSource": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "下拉提示框:历史搜索/搜索建议 `[{label:'',value:'',disabled:true}]`",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "下拉提示框:历史搜索/搜索建议 `[{label:'',value:'',disabled:true}]`"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              },
              {
                "value": "'normal'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "类型",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          },
          "docblock": "类型"
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "数值",
          "docblock": "数值"
        },
        "defaultValue": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "搜索框默认值 (不适用于Combox)",
          "docblock": "搜索框默认值 (不适用于Combox)"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式名称",
          "docblock": "样式名称"
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "默认提示",
          "docblock": "默认提示"
        },
        "onInputFocus": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "input获取焦点的时候触发的回调",
          "defaultValue": {
            "value": "function() {\n}",
            "computed": false
          },
          "docblock": "input获取焦点的时候触发的回调",
          "params": [],
          "returns": null
        },
        "onInputBlur": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "input失去焦点的时候触发的回调",
          "defaultValue": {
            "value": "function() {\n}",
            "computed": false
          },
          "docblock": "input失去焦点的时候触发的回调",
          "params": [],
          "returns": null
        },
        "onSearch": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "点击搜索按钮触发的回调",
          "defaultValue": {
            "value": "function() {\n}",
            "computed": false
          },
          "docblock": "点击搜索按钮触发的回调\n@param {Object} object {filter:'',key:''}",
          "params": [
            {
              "name": "object",
              "description": "{filter:'',key:''}",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "输入关键字时的回掉",
          "defaultValue": {
            "value": "function() {\n}",
            "computed": false
          },
          "docblock": "输入关键字时的回掉",
          "params": [],
          "returns": null
        },
        "onFilterChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Filter改变时的回掉（filterValue）",
          "defaultValue": {
            "value": "function() {\n}",
            "computed": false
          },
          "docblock": "Filter改变时的回掉（filterValue）",
          "params": [],
          "returns": null
        },
        "autoWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "搜索框100%自适应父容器",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "搜索框100%自适应父容器"
        },
        "filterAutoWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "filter的下拉菜单是否与选择器对齐",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "filter的下拉菜单是否与选择器对齐"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义样式",
          "docblock": "自定义样式",
          "properties": []
        },
        "container": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "指定渲染combox的容器",
          "docblock": "指定渲染combox的容器"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nsize | 大小，可选 `primary/secondary` 可选择 `medium/large`; `normal` 可选择 `small/medium` | String | 'medium'\nfilter | 前置下拉框,default为默认选中项 `[{text:'Products', value:'Products',default: true},{text:'Suppliers',valuse:'Suppliers'}]` | Array | []\nhasIcon | 搜索按钮图标 | Boolean | true\nsearchText | 搜索按钮文案 | String | 'Search'\ncombox | 定制下拉框,适合业务特殊定制 | ReactNode | false\ninputWidth | 搜索框宽度 | String/Number | 'auto'\noverlayVisible | 与combox配合使用,控制定制下拉框的展现 | Boolean | -\ndataSource | 下拉提示框:历史搜索/搜索建议 `[{label:'',value:'',disabled:true}]` | Array | []\ntype | 类型<br><br>**可选值**:<br>'primary', 'secondary', 'normal' | Enum | 'primary'\nvalue | 数值 | String/Number | -\ndefaultValue | 搜索框默认值 (不适用于Combox) | String | -\nclassName | 样式名称 | String | -\nplaceholder | 默认提示 | String | -\nonInputFocus | input获取焦点的时候触发的回调<br><br>**签名**:<br>Function() => void | Function | function() { }\nonInputBlur | input失去焦点的时候触发的回调<br><br>**签名**:<br>Function() => void | Function | function() { }\nonSearch | 点击搜索按钮触发的回调<br><br>**签名**:<br>Function(object: Object) => void<br>**参数**:<br>*object*: {Object} {filter:'',key:''} | Function | function() { }\nonChange | 输入关键字时的回掉<br><br>**签名**:<br>Function() => void | Function | function() { }\nonFilterChange | Filter改变时的回掉（filterValue）<br><br>**签名**:<br>Function() => void | Function | function() { }\nautoWidth | 搜索框100%自适应父容器 | Boolean | false\nfilterAutoWidth | filter的下拉菜单是否与选择器对齐 | Boolean | true\nstyle | 自定义样式 | Object | -\ncontainer | 指定渲染combox的容器 | ReactNode | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "自适应宽度",
        "order": "5",
        "jsx": "import { Search } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: [\n        {\n          text: \"Products\",\n          value: \"Products\"\n        },\n        {\n          text: \"Products1\",\n          value: \"Products1\"\n        },\n        {\n          text: \"Products2\",\n          value: \"Products2\"\n        },\n        {\n          text: \"Products3\",\n          value: \"Products3\"\n        },\n        {\n          text: \"Products4\",\n          value: \"Products4\"\n        },\n        {\n          text: \"Products5\",\n          value: \"Products5\"\n        },\n        {\n          text: \"Products6\",\n          value: \"Products6\"\n        },\n        {\n          text: \"Products7\",\n          value: \"Products7\"\n        },\n        {\n          text: \"Products8\",\n          value: \"Products8\"\n        },\n        {\n          text: \"Products9\",\n          value: \"Products9\"\n        },\n        {\n          text: \"Products10\",\n          value: \"Products10\"\n        },\n        {\n          text: \"Suppliers\",\n          value: \"Suppliers\",\n          default: true\n        }\n      ],\n      value: \"\",\n      dataSource: []\n    };\n  }\n\n  onSearch(value) {\n    console.log(value);\n  }\n\n  onChange(value) {\n    console.log(\"input is:\", value);\n\n    this.setState({\n      value: value\n    });\n  }\n\n  onFilterChange(value) {\n    console.log(\"filter is:\", value);\n  }\n\n  render() {\n    return (\n      <div style={{ width: 700 }}>\n        <Search\n          onSearch={this.onSearch.bind(this)}\n          onChange={this.onChange.bind(this)}\n          dataSource={this.state.dataSource}\n          autoWidth\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n自适应宽度\n\n"
      },
      {
        "title": "自定义下拉框内容",
        "order": "4",
        "jsx": "import { Search, Menu } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      overlayVisible: false,\n      value: \"111222\",\n      menuData: [\n        {\n          text: \"Option 1\",\n          value: \"Option 1 Value\",\n          index: \"1\"\n        },\n        {\n          text: \"Option 2\",\n          value: \"Option 2 Value\",\n          index: \"2\"\n        },\n        {\n          text: \"Option 3\",\n          value: \"Option 3 Value\",\n          index: \"3\"\n        },\n        {\n          text: \"Option 4\",\n          value: \"Option 4 Value\",\n          index: \"4\"\n        }\n      ],\n      filter: [\n        {\n          text: \"Products\",\n          value: \"Products\"\n        },\n        {\n          text: \"Products1\",\n          value: \"Products1\"\n        },\n        {\n          text: \"Products2\",\n          value: \"Products2\"\n        },\n        {\n          text: \"Products3\",\n          value: \"Products3\"\n        },\n        {\n          text: \"Products4\",\n          value: \"Products4\"\n        },\n        {\n          text: \"Products5\",\n          value: \"Products5\"\n        },\n        {\n          text: \"Products6\",\n          value: \"Products6\"\n        },\n        {\n          text: \"Products7\",\n          value: \"Products7\"\n        },\n        {\n          text: \"Products8\",\n          value: \"Products8\"\n        },\n        {\n          text: \"Products9\",\n          value: \"Products9\"\n        },\n        {\n          text: \"Products10\",\n          value: \"Products10\"\n        },\n        {\n          text: \"Suppliers\",\n          value: \"Suppliers\",\n          default: true\n        }\n      ]\n    };\n  }\n\n  renderMenu() {\n    const menuData = this.state.menuData;\n\n    return (\n      <Menu onClick={this.onClick.bind(this)} className=\"diy-menu\">\n        <Menu.Group label=\"Recent\" key=\"xxx\">\n          {menuData.map(item => {\n            return (\n              <Menu.Item key={item.value}>\n                {\" \"}\n                {item.text}{\" \"}\n                <a\n                  onClick={this.onDelete.bind(this)}\n                  target=\"_self\"\n                  data-index={item.index}\n                >\n                  Delete\n                </a>{\" \"}\n              </Menu.Item>\n            );\n          })}\n        </Menu.Group>\n      </Menu>\n    );\n  }\n\n  onSearch(value) {\n    console.log(value);\n  }\n\n  onChange(value) {\n    this.setState({\n      overlayVisible: value.length > 0,\n      value: value\n    });\n  }\n\n  onClick(selectedKeys) {\n    if (typeof selectedKeys === \"string\") {\n      this.setState({\n        overlayVisible: false,\n        value: selectedKeys\n      });\n    }\n  }\n\n  onDelete(e) {\n    e.stopPropagation();\n\n    const index = e.currentTarget.getAttribute(\"data-index\");\n\n    const menuData = this.state.menuData;\n\n    const menuDataNew = [];\n\n    menuData.forEach(function(item) {\n      if (item.index !== index) {\n        menuDataNew.push(item);\n      }\n    });\n\n    this.setState({\n      menuData: menuDataNew\n    });\n  }\n\n  onInputFocus() {\n    this.setState({\n      overlayVisible: true\n    });\n  }\n\n  render() {\n    const overlayVisible = this.state.overlayVisible;\n    const value = this.state.value;\n\n    return (\n      <div style={{ width: 700 }}>\n        <Search\n          placeholder=\"123\"\n          autoWidth\n          combox={<div>{this.renderMenu()}</div>}\n          overlayVisible={overlayVisible}\n          value={value}\n          onSearch={this.onSearch.bind(this)}\n          onChange={this.onChange.bind(this)}\n          onInputFocus={this.onInputFocus.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "\n.diy-menu{\n    /*width: 275px*/;\n}\n\n.diy-menu .next-menu-item a{\n    display:none;\n    float: right;\n    cursor: pointer;\n}\n.diy-menu .next-menu-item:hover a{\n    display:inline-block;\n}\n",
        "body": "\n自定义下拉框内容。\n\n"
      },
      {
        "title": "普通search的事件以及受控方式",
        "order": "1",
        "jsx": "import { Search, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: [\n        {\n          label: \"Recent\",\n          value: \"Recent\",\n          disabled: true\n        },\n        {\n          label: \"连衣裙\",\n          value: \"连衣裙\",\n          disabled: false\n        },\n        {\n          label: \"墨镜\",\n          value: \"墨镜\",\n          disabled: false\n        },\n        {\n          label: \"短袖\",\n          value: \"短袖\",\n          disabled: false\n        }\n      ],\n      value: \"\"\n    };\n  }\n  onSearchClick() {\n    let time = new Date();\n\n    time = time.getTime();\n\n    this.setState({\n      value: time\n    });\n  }\n\n  onClearClick() {\n    this.setState({\n      value: \"\"\n    });\n  }\n  // 点击search按钮和在选中项上回车时触发\n  // 参数为obj：\n  // {\n  //    filter: [],\n  //    key: xx\n  // }\n  onSearch(obj) {\n    console.log(obj);\n  }\n  // input 输入时触发\n  onChange(value) {\n    this.setState({\n      value\n    });\n  }\n\n  onInputBlur(e, obj) {\n    console.log(e, obj);\n  }\n\n  onInputFocus(e, clickByUser, state) {\n    console.log(e, clickByUser, state);\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Button onClick={this.onSearchClick.bind(this)}>\n            改变搜索关键字\n          </Button>\n          <Button onClick={this.onClearClick.bind(this)}>清除关键字</Button>\n        </div>\n        <br />\n\n        <Search\n          inputWidth={300}\n          value={this.state.value}\n          onSearch={this.onSearch.bind(this)}\n          onChange={this.onChange.bind(this)}\n          onInputBlur={this.onInputBlur.bind(this)}\n          onInputFocus={this.onInputFocus.bind(this)}\n          dataSource={this.state.dataSource}\n          placeholder=\"What are you looking for...\"\n          name=\"textName\"\n        />\n        <br />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\nonSearch, onChange, onInputBlur, onInputFocus事件。\n\n"
      },
      {
        "title": "下拉框",
        "order": "2",
        "jsx": "import { Search, Button } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: [\n        {\n          text: \"Products\",\n          value: \"Products\"\n        },\n        {\n          text: \"Products1\",\n          value: \"Products1\"\n        },\n        {\n          text: \"Products2\",\n          value: \"Products2\"\n        },\n        {\n          text: \"Products3\",\n          value: \"Products3\"\n        },\n        {\n          text: \"Products4\",\n          value: \"Products4\"\n        },\n        {\n          text: \"Products5\",\n          value: \"Products5\"\n        },\n        {\n          text: \"Products6\",\n          value: \"Products6\"\n        },\n        {\n          text: \"Products7\",\n          value: \"Products7\"\n        },\n        {\n          text: \"Products8\",\n          value: \"Products8\"\n        },\n        {\n          text: \"Products9\",\n          value: \"Products9\"\n        },\n        {\n          text: \"Products10\",\n          value: \"Products10\"\n        },\n        {\n          text: \"Suppliers\",\n          value: \"Suppliers\",\n          default: true\n        }\n      ],\n      value: \"\"\n    };\n  }\n\n  onSearch(value) {\n    console.log(value);\n  }\n\n  onChange(value) {\n    console.log(`input is: ${value}`);\n\n    this.setState({\n      value: value\n    });\n  }\n\n  // value为filter的值，obj为search的全量值\n  onFilterChange(value, obj) {\n    console.log(`filter is: ${value}`);\n    console.log(\"fullData: \", obj);\n  }\n\n  onButtonClick() {\n    this.setState({\n      filter: [\n        {\n          text: \"111111111111111111\",\n          value: \"111111111111111111\"\n        },\n        {\n          text: \"2222222\",\n          value: \"22222222\",\n          default: true\n        }\n      ]\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Button onClick={this.onButtonClick.bind(this)}>修改filter</Button>\n        </div>\n        <br />\n\n        <Search\n          onChange={this.onChange.bind(this)}\n          onSearch={this.onSearch.bind(this)}\n          filter={this.state.filter}\n          onFilterChange={this.onFilterChange.bind(this)}\n        />\n        <br />\n        <br />\n        <Search\n          size=\"large\"\n          onChange={this.onChange.bind(this)}\n          onSearch={this.onSearch.bind(this)}\n          filter={this.state.filter}\n          onFilterChange={this.onFilterChange.bind(this)}\n        />\n        <br />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n带下拉框的用法。可以设置onFilterChange事件\n\n"
      },
      {
        "title": "size",
        "order": "1",
        "jsx": "import { Search } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: \"medium\",\n      normalSize: \"small\"\n    };\n  }\n  onButtonClick() {\n    this.setState({\n      size: this.state.size === \"medium\" ? \"large\" : \"medium\",\n      normalSize: this.state.normalSize === \"medium\" ? \"small\" : \"medium\"\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Primary</h2>\n        <Search\n          size=\"large\"\n          inputWidth={300}\n          defaultValue=\"large\"\n          placeholder=\"What are you looking for...\"\n        />\n        <br />\n        <Search\n          size=\"medium\"\n          inputWidth={300}\n          defaultValue=\"medium\"\n          placeholder=\"What are you looking for...\"\n        />\n\n        <h2>Secondary</h2>\n        <Search\n          size=\"large\"\n          inputWidth={300}\n          defaultValue=\"large\"\n          type=\"secondary\"\n          placeholder=\"What are you looking for...\"\n        />\n        <br />\n        <Search\n          inputWidth={300}\n          size=\"medium\"\n          defaultValue=\"medium\"\n          type=\"secondary\"\n          placeholder=\"What are you looking for...\"\n        />\n\n        <h2>normal</h2>\n        <Search\n          size=\"medium\"\n          type=\"normal\"\n          inputWidth={300}\n          defaultValue=\"medium\"\n          placeholder=\"What are you looking for...\"\n        />\n        <br />\n        <Search\n          size=\"small\"\n          type=\"normal\"\n          inputWidth={300}\n          defaultValue=\"small\"\n          placeholder=\"What are you looking for...\"\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n【注意】type为primary和secondary的时候size只能为'medium'和'large'，type为normal是size只能为'medium'和'small'.\ntype 切换，展示出不同的样式风格。size进行大小设置 .\n\n"
      },
      {
        "title": "type",
        "order": "0",
        "jsx": "import { Search } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Search type=\"primary\" inputWidth={300} placeholder=\"primary\" />\n\n    <br />\n    <Search type=\"secondary\" inputWidth={300} placeholder=\"Secondary\" />\n\n    <br />\n    <Search type=\"normal\" inputWidth={300} placeholder=\"normal\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n简单用法\n\n"
      }
    ]
  },
  {
    "name": "Select",
    "category": "Components",
    "title": "选择器",
    "type": "表单",
    "importStatement": "import { Select } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n### 何时使用\n\n#### Select\n\n如果你不期望用户输入的值生效而仅仅是选择，那么使用Select. 同时可以使用Select的showSearch属性进行过滤。\n\n### Combobox\n\n唯一和Select不一致的点在于Combobox会保留用户输入的值。\n\n### 常见问题\n\n#### 出现类似的`flatternChildren`的warning\n\nSelect默认使用`value`作为菜单项的key，如果没有设置key值，则使用默认的序列index作为key值，确保这些值不会发生重复。\n\n#### Combobox与Field配合使用\n\n由于`Field`会让组件变成受控组件，所以如果你发现你的输入框无法输入值，记得监听下`onInputUpdate`，然后调用`Field`的`setValue`方法进行赋值。\n\n伪代码如下\n\n```js\nthis.field.setValue(name, value);\n```\n\n#### dataSource的使用\n\nSelect同时支持children和在props中传入dataSource作为数据源,如果同时设置,则以children为准.\n\n注意： Select默认使用`value`作为渲染的菜单项的`key`值，所以`value`不能重复, 否则无法渲染下拉菜单\n\n1.  `children`的方式\n\n```html\n<Select>\n    <Select.Option value=\"option1\">option1</Select.Option>\n    <Select.Option value=\"option2\">option2</Select.Option>\n    <Select.Option disabled>disabled</Select.Option>\n</Select>\n```\n\n2.  `props`的方式\n\n```html\nconst dataSource = [\n    {label:'option1', value:'option1'},\n    {label:'option2', value:'option2'},\n    {label:'disabled', disabled:true}\n]\n<Select dataSource={dataSource}/>\n```\n\n#### 定制弹出层\n\n参见示例中的`弹层定制`。唯一需要注意的是`overlay`的元素记得透传props.\n这是因为Overlay的弹层的动画是依靠`className`实现的，如果不透传props则会造成无法监听到动画播放结束的事件。\n\n",
    "propsSchema": {
      "name": "Select",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "弹层挂载容器节点",
          "docblock": "弹层挂载容器节点"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "选择器的尺寸",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "选择器的尺寸"
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "'arrow-only'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "选择器的形状",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "选择器的形状"
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "没有值的时候的占位符",
          "defaultValue": {
            "value": "''",
            "computed": false
          },
          "docblock": "没有值的时候的占位符"
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "array"
              },
              {
                "name": "node"
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false,
          "description": "当前值",
          "docblock": "当前值"
        },
        "defaultValue": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "array"
              },
              {
                "name": "node"
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false,
          "description": "初始默认值",
          "docblock": "初始默认值"
        },
        "visible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "当前弹层是否显示",
          "docblock": "当前弹层是否显示"
        },
        "defaultVisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "弹层初始是否显示",
          "docblock": "弹层初始是否显示"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否禁用",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否禁用"
        },
        "dataSource": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用)",
          "docblock": "传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用)"
        },
        "multiple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否是多选",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否是多选"
        },
        "fillProps": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "填充到选择框里面的值",
          "defaultValue": {
            "value": "'label'",
            "computed": false
          },
          "docblock": "填充到选择框里面的值"
        },
        "showSearch": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示顶部的搜索框",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否显示顶部的搜索框"
        },
        "filterBy": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "在输入的时候过滤的函数,仅在filterLocal为true时候有效",
          "docblock": "在输入的时候过滤的函数,仅在filterLocal为true时候有效\n@param {String} filterValue 筛选值\n@param {Object} option 选项\n@return {Boolean} 是否保留当前选项",
          "params": [
            {
              "name": "filterValue",
              "description": "筛选值",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "option",
              "description": "选项",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": {
            "description": "是否保留当前选项",
            "type": {
              "name": "Boolean"
            }
          }
        },
        "filterLocal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否使用本地过滤,在数据源为远程的时候需要关闭此选项",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否使用本地过滤,在数据源为远程的时候需要关闭此选项"
        },
        "hasArrow": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示右侧的箭头",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示右侧的箭头"
        },
        "autoWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "下拉菜单是否与选择器对齐",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "下拉菜单是否与选择器对齐"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Select发生改变的时候触发的回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "Select发生改变的时候触发的回调\n@param {String} value 数据\n@param {Object} option 选项",
          "params": [
            {
              "name": "value",
              "description": "数据",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "option",
              "description": "选项",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "onSearch": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "在搜索框中输入触发的事件，仅在showSearch为true时候有效",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "在搜索框中输入触发的事件，仅在showSearch为true时候有效\n@param {String} value 搜索值",
          "params": [
            {
              "name": "value",
              "description": "搜索值",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "hasClear": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效"
        },
        "popupClassName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "弹出层的样式类",
          "docblock": "弹出层的样式类"
        },
        "popupProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "弹出层的属性",
          "docblock": "弹出层的属性",
          "properties": []
        },
        "onVisibleChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "弹层显示或隐藏的时候触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "弹层显示或隐藏的时候触发的事件\n@param {Boolean} visible 弹层是否隐藏和显示",
          "params": [
            {
              "name": "visible",
              "description": "弹层是否隐藏和显示",
              "type": {
                "name": "Boolean"
              }
            }
          ],
          "returns": null
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "弹层显示时触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "弹层显示时触发的事件",
          "params": [],
          "returns": null
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "弹层隐藏时触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "弹层隐藏时触发的事件",
          "params": [],
          "returns": null
        },
        "locale": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义国际化文案对象",
          "defaultValue": {
            "value": "{\n    selectPlaceHolder: '请选择',\n    comboboxPlaceHolder: '请输入'\n}",
            "computed": false
          },
          "docblock": "自定义国际化文案对象\n@property {String} selectPlaceHolder 请选择的提示文案\n@property {String} comboboxPlaceHolder 请输入的提示文案",
          "properties": [
            {
              "name": "selectPlaceHolder",
              "description": "请选择的提示文案",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "comboboxPlaceHolder",
              "description": "请输入的提示文案",
              "type": {
                "name": "String"
              }
            }
          ]
        },
        "language": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'en-us'",
                "computed": false
              },
              {
                "value": "'zh-cn'",
                "computed": false
              },
              {
                "value": "'zh-tw'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "自定义国际化语言",
          "docblock": "自定义国际化语言"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Combobox",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "container": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": false,
              "description": "弹层挂载容器节点",
              "docblock": "弹层挂载容器节点"
            },
            "size": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'small'",
                    "computed": false
                  },
                  {
                    "value": "'medium'",
                    "computed": false
                  },
                  {
                    "value": "'large'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "选择器的尺寸",
              "defaultValue": {
                "value": "'medium'",
                "computed": false
              },
              "docblock": "选择器的尺寸"
            },
            "shape": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'normal'",
                    "computed": false
                  },
                  {
                    "value": "'arrow-only'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "选择器的形状",
              "defaultValue": {
                "value": "'normal'",
                "computed": false
              },
              "docblock": "选择器的形状"
            },
            "placeholder": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "没有值的时候的占位符",
              "defaultValue": {
                "value": "''",
                "computed": false
              },
              "docblock": "没有值的时候的占位符"
            },
            "value": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "array"
                  },
                  {
                    "name": "node"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "当前值",
              "docblock": "当前值"
            },
            "defaultValue": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "array"
                  },
                  {
                    "name": "node"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "初始默认值",
              "docblock": "初始默认值"
            },
            "visible": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "当前弹层是否显示",
              "docblock": "当前弹层是否显示"
            },
            "defaultVisible": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "弹层初始是否显示",
              "docblock": "弹层初始是否显示"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否禁用",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否禁用"
            },
            "dataSource": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用)",
              "docblock": "传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用)"
            },
            "multiple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否是多选",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否是多选"
            },
            "tags": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否启用标签模式, 仅在多选时有效,效果是除了自动提示外的选项, 也可以使用输入的文字作为标签",
              "docblock": "是否启用标签模式, 仅在多选时有效,效果是除了自动提示外的选项, 也可以使用输入的文字作为标签"
            },
            "fillProps": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "填充到选择框里面的值",
              "defaultValue": {
                "value": "'value'",
                "computed": false
              },
              "docblock": "填充到选择框里面的值"
            },
            "showSearch": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否显示顶部的搜索框",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否显示顶部的搜索框"
            },
            "filterBy": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "在输入的时候过滤的函数,仅在filterLocal为true时候有效",
              "docblock": "在输入的时候过滤的函数,仅在filterLocal为true时候有效\n@param {String} filterValue 筛选值\n@param {Object} option 选项\n@return {Boolean} 是否保留当前选项",
              "params": [
                {
                  "name": "filterValue",
                  "description": "筛选值",
                  "type": {
                    "name": "String"
                  }
                },
                {
                  "name": "option",
                  "description": "选项",
                  "type": {
                    "name": "Object"
                  }
                }
              ],
              "returns": {
                "description": "是否保留当前选项",
                "type": {
                  "name": "Boolean"
                }
              }
            },
            "filterLocal": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否使用本地过滤,在数据源为远程的时候需要关闭此选项",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否使用本地过滤,在数据源为远程的时候需要关闭此选项"
            },
            "hasArrow": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否显示右侧的箭头",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "是否显示右侧的箭头"
            },
            "autoWidth": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "下拉菜单是否与选择器对齐",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "下拉菜单是否与选择器对齐"
            },
            "hiddenSelected": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "选择后是否立即隐藏菜单，单选是默认隐藏的，因此该选项只在多选的时候有效",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "选择后是否立即隐藏菜单，单选是默认隐藏的，因此该选项只在多选的时候有效"
            },
            "onInputUpdate": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Combobox在用户输入的时候触发的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "Combobox在用户输入的时候触发的回调\n@param {String} value 输入值",
              "params": [
                {
                  "name": "value",
                  "description": "输入值",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": null
            },
            "onInputFocus": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Combobox获取焦点的时候触发的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "Combobox获取焦点的时候触发的回调\n@param {Event} e DOM事件对象\n@param {Boolean} clickByUser 是否用户点击",
              "params": [
                {
                  "name": "e",
                  "description": "DOM事件对象",
                  "type": {
                    "name": "Event"
                  }
                },
                {
                  "name": "clickByUser",
                  "description": "是否用户点击",
                  "type": {
                    "name": "Boolean"
                  }
                }
              ],
              "returns": null
            },
            "onInputBlur": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Combobox失去焦点的时候触发的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "Combobox失去焦点的时候触发的回调\n@param {Event} e DOM事件对象\n@param {String} inputValue 输入值",
              "params": [
                {
                  "name": "e",
                  "description": "DOM事件对象",
                  "type": {
                    "name": "Event"
                  }
                },
                {
                  "name": "inputValue",
                  "description": "输入值",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": null
            },
            "onInputEnter": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Combobox回车的时候触发的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "Combobox回车的时候触发的回调\n@param {Event} e DOM事件对象",
              "params": [
                {
                  "name": "e",
                  "description": "DOM事件对象",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "returns": null
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "Combobox发生改变的时候触发的回调, 注意在输入的时候该事件不会被触发，如果需要监听输入的事件请使用onInputUpdate",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "Combobox发生改变的时候触发的回调, 注意在输入的时候该事件不会被触发，如果需要监听输入的事件请使用onInputUpdate\n@param {String} value 数据\n@param {Object} option 选项",
              "params": [
                {
                  "name": "value",
                  "description": "数据",
                  "type": {
                    "name": "String"
                  }
                },
                {
                  "name": "option",
                  "description": "选项",
                  "type": {
                    "name": "Object"
                  }
                }
              ],
              "returns": null
            },
            "onSearch": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "在搜索框中输入触发的事件，仅在showSearch为true时候有效",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "在搜索框中输入触发的事件，仅在showSearch为true时候有效\n@param {String} value 搜索值",
              "params": [
                {
                  "name": "value",
                  "description": "搜索值",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": null
            },
            "hasClear": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效"
            },
            "popupClassName": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "弹出层的样式类",
              "docblock": "弹出层的样式类"
            },
            "popupProps": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "弹出层的属性",
              "docblock": "弹出层的属性",
              "properties": []
            },
            "onVisibleChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "弹层显示或隐藏的时候触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "弹层显示或隐藏的时候触发的事件\n@param {Boolean} visible 弹层是否隐藏和显示",
              "params": [
                {
                  "name": "visible",
                  "description": "弹层是否隐藏和显示",
                  "type": {
                    "name": "Boolean"
                  }
                }
              ],
              "returns": null
            },
            "onOpen": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "弹层显示时触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "弹层显示时触发的事件",
              "params": [],
              "returns": null
            },
            "onClose": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "弹层隐藏时触发的事件",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "弹层隐藏时触发的事件",
              "params": [],
              "returns": null
            },
            "locale": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义国际化文案对象",
              "defaultValue": {
                "value": "{\n    selectPlaceHolder: '请选择',\n    comboboxPlaceHolder: '请输入'\n}",
                "computed": false
              },
              "docblock": "自定义国际化文案对象\n@property {String} selectPlaceHolder 请选择的提示文案\n@property {String} comboboxPlaceHolder 请输入的提示文案",
              "properties": [
                {
                  "name": "selectPlaceHolder",
                  "description": "请选择的提示文案",
                  "type": {
                    "name": "String"
                  }
                },
                {
                  "name": "comboboxPlaceHolder",
                  "description": "请输入的提示文案",
                  "type": {
                    "name": "String"
                  }
                }
              ]
            },
            "language": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'en-us'",
                    "computed": false
                  },
                  {
                    "value": "'zh-cn'",
                    "computed": false
                  },
                  {
                    "value": "'zh-tw'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "自定义国际化语言",
              "docblock": "自定义国际化语言"
            }
          },
          "methods": []
        },
        {
          "name": "OptionGroup",
          "props": {
            "label": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "node"
                  }
                ]
              },
              "required": false,
              "description": "设置分组的文案",
              "docblock": "设置分组的文案"
            }
          },
          "methods": []
        },
        {
          "name": "Option",
          "props": {
            "value": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "选项值",
              "docblock": "选项值"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否禁用",
              "docblock": "是否禁用"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ncontainer | 弹层挂载容器节点 | String/Function | -\nsize | 选择器的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nshape | 选择器的形状<br><br>**可选值**:<br>'normal', 'arrow-only' | Enum | 'normal'\nplaceholder | 没有值的时候的占位符 | String | ''\nvalue | 当前值 | String/Array/ReactNode/Object | -\ndefaultValue | 初始默认值 | String/Array/ReactNode/Object | -\nvisible | 当前弹层是否显示 | Boolean | -\ndefaultVisible | 弹层初始是否显示 | Boolean | -\ndisabled | 是否禁用 | Boolean | false\ndataSource | 传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用) | Array | -\nmultiple | 是否是多选 | Boolean | false\nfillProps | 填充到选择框里面的值 | String | 'label'\nshowSearch | 是否显示顶部的搜索框 | Boolean | false\nfilterBy | 在输入的时候过滤的函数,仅在filterLocal为true时候有效<br><br>**签名**:<br>Function(filterValue: String, option: Object) => Boolean<br>**参数**:<br>*filterValue*: {String} 筛选值<br>*option*: {Object} 选项<br>**返回值**:<br>{Boolean} 是否保留当前选项<br> | Function | -\nfilterLocal | 是否使用本地过滤,在数据源为远程的时候需要关闭此选项 | Boolean | true\nhasArrow | 是否显示右侧的箭头 | Boolean | true\nautoWidth | 下拉菜单是否与选择器对齐 | Boolean | true\nonChange | Select发生改变的时候触发的回调<br><br>**签名**:<br>Function(value: String, option: Object) => void<br>**参数**:<br>*value*: {String} 数据<br>*option*: {Object} 选项 | Function | () =&gt; {}\nonSearch | 在搜索框中输入触发的事件，仅在showSearch为true时候有效<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>*value*: {String} 搜索值 | Function | () =&gt; {}\nhasClear | 是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效 | Boolean | false\npopupClassName | 弹出层的样式类 | String | -\npopupProps | 弹出层的属性 | Object | -\nonVisibleChange | 弹层显示或隐藏的时候触发的事件<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>*visible*: {Boolean} 弹层是否隐藏和显示 | Function | () =&gt; {}\nonOpen | 弹层显示时触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonClose | 弹层隐藏时触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nlocale | 自定义国际化文案对象<br><br>**属性**:<br>*selectPlaceHolder*: {String} 请选择的提示文案<br>*comboboxPlaceHolder*: {String} 请输入的提示文案 | Object | {     selectPlaceHolder: '请选择',     comboboxPlaceHolder: '请输入' }\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'en-us', 'zh-cn', 'zh-tw' | Enum | -\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Combobox",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ncontainer | 弹层挂载容器节点 | String/Function | -\nsize | 选择器的尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nshape | 选择器的形状<br><br>**可选值**:<br>'normal', 'arrow-only' | Enum | 'normal'\nplaceholder | 没有值的时候的占位符 | String | ''\nvalue | 当前值 | String/Array/ReactNode/Object | -\ndefaultValue | 初始默认值 | String/Array/ReactNode/Object | -\nvisible | 当前弹层是否显示 | Boolean | -\ndefaultVisible | 弹层初始是否显示 | Boolean | -\ndisabled | 是否禁用 | Boolean | false\ndataSource | 传入的数据，可以动态渲染子项,详见[dataSource的使用](#dataSource的使用) | Array | -\nmultiple | 是否是多选 | Boolean | false\ntags | 是否启用标签模式, 仅在多选时有效,效果是除了自动提示外的选项, 也可以使用输入的文字作为标签 | Boolean | -\nfillProps | 填充到选择框里面的值 | String | 'value'\nshowSearch | 是否显示顶部的搜索框 | Boolean | false\nfilterBy | 在输入的时候过滤的函数,仅在filterLocal为true时候有效<br><br>**签名**:<br>Function(filterValue: String, option: Object) => Boolean<br>**参数**:<br>*filterValue*: {String} 筛选值<br>*option*: {Object} 选项<br>**返回值**:<br>{Boolean} 是否保留当前选项<br> | Function | -\nfilterLocal | 是否使用本地过滤,在数据源为远程的时候需要关闭此选项 | Boolean | true\nhasArrow | 是否显示右侧的箭头 | Boolean | true\nautoWidth | 下拉菜单是否与选择器对齐 | Boolean | true\nhiddenSelected | 选择后是否立即隐藏菜单，单选是默认隐藏的，因此该选项只在多选的时候有效 | Boolean | false\nonInputUpdate | Combobox在用户输入的时候触发的回调<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>*value*: {String} 输入值 | Function | () =&gt; {}\nonInputFocus | Combobox获取焦点的时候触发的回调<br><br>**签名**:<br>Function(e: Event, clickByUser: Boolean) => void<br>**参数**:<br>*e*: {Event} DOM事件对象<br>*clickByUser*: {Boolean} 是否用户点击 | Function | () =&gt; {}\nonInputBlur | Combobox失去焦点的时候触发的回调<br><br>**签名**:<br>Function(e: Event, inputValue: String) => void<br>**参数**:<br>*e*: {Event} DOM事件对象<br>*inputValue*: {String} 输入值 | Function | () =&gt; {}\nonInputEnter | Combobox回车的时候触发的回调<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>*e*: {Event} DOM事件对象 | Function | () =&gt; {}\nonChange | Combobox发生改变的时候触发的回调, 注意在输入的时候该事件不会被触发，如果需要监听输入的事件请使用onInputUpdate<br><br>**签名**:<br>Function(value: String, option: Object) => void<br>**参数**:<br>*value*: {String} 数据<br>*option*: {Object} 选项 | Function | () =&gt; {}\nonSearch | 在搜索框中输入触发的事件，仅在showSearch为true时候有效<br><br>**签名**:<br>Function(value: String) => void<br>**参数**:<br>*value*: {String} 搜索值 | Function | () =&gt; {}\nhasClear | 是否显示清空按钮，该按钮可以清空select的value, 该属性仅在单选模式下有效 | Boolean | false\npopupClassName | 弹出层的样式类 | String | -\npopupProps | 弹出层的属性 | Object | -\nonVisibleChange | 弹层显示或隐藏的时候触发的事件<br><br>**签名**:<br>Function(visible: Boolean) => void<br>**参数**:<br>*visible*: {Boolean} 弹层是否隐藏和显示 | Function | () =&gt; {}\nonOpen | 弹层显示时触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonClose | 弹层隐藏时触发的事件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nlocale | 自定义国际化文案对象<br><br>**属性**:<br>*selectPlaceHolder*: {String} 请选择的提示文案<br>*comboboxPlaceHolder*: {String} 请输入的提示文案 | Object | {     selectPlaceHolder: '请选择',     comboboxPlaceHolder: '请输入' }\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'en-us', 'zh-cn', 'zh-tw' | Enum | -\n",
        "methodREADME": []
      },
      {
        "name": "OptionGroup",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nlabel | 设置分组的文案 | String/ReactNode | -\n",
        "methodREADME": []
      },
      {
        "name": "Option",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nvalue | 选项值 | any | -\ndisabled | 是否禁用 | Boolean | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "Combobox",
        "order": "5",
        "jsx": "import { Select, Button } from \"@icedesign/base\";\n\nconst { Combobox } = Select;\n\nconst onChange = function(...args) {\n  console.log(args);\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  onToggle() {\n    this.setState({\n      disabled: !this.state.disabled\n    });\n  }\n\n  onSelect(type, value) {\n    switch (type) {\n      case \"mode\":\n        this.setState({\n          [type]: value === \"multiple\"\n        });\n        break;\n      case \"search\":\n      case \"hasArrow\":\n      case \"hasClear\":\n        this.setState({\n          [type]: value === \"yes\"\n        });\n        break;\n      default:\n        this.setState({\n          [type]: value\n        });\n    }\n  }\n\n  onInputUpdate(value) {\n    console.log(value);\n  }\n\n  onInputBlur(e, value) {\n    console.log(\"blur\", value);\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <p>\n          <Select\n            placeholder=\"选择尺寸\"\n            onChange={this.onSelect.bind(this, \"size\")}\n          >\n            <Option value=\"small\">Small</Option>\n            <Option value=\"medium\">Medium</Option>\n            <Option value=\"large\">Large</Option>\n          </Select>\n          <Select\n            placeholder=\"选择模式\"\n            onChange={this.onSelect.bind(this, \"mode\")}\n          >\n            <Option value=\"single\">单选</Option>\n            <Option value=\"multiple\">多选</Option>\n          </Select>\n          <Select\n            placeholder=\"显示箭头\"\n            onChange={this.onSelect.bind(this, \"hasArrow\")}\n          >\n            <Option value=\"yes\">常规</Option>\n            <Option value=\"no\">无下拉箭头</Option>\n          </Select>\n          <Select\n            placeholder=\"显示清空按钮\"\n            onChange={this.onSelect.bind(this, \"hasClear\")}\n          >\n            <Option value=\"no\">不显示</Option>\n            <Option value=\"yes\">显示</Option>\n          </Select>\n          <Select\n            placeholder=\"填充属性\"\n            onChange={this.onSelect.bind(this, \"fillProps\")}\n          >\n            <Option value=\"value\">value</Option>\n            <Option value=\"label\">label</Option>\n          </Select>\n          <Button onClick={this.onToggle.bind(this)} type=\"primary\">\n            Toggle disabled\n          </Button>\n        </p>\n        <h4>预览</h4>\n        <Combobox\n          size={this.state.size}\n          multiple={this.state.mode}\n          hasArrow={this.state.hasArrow}\n          disabled={this.state.disabled}\n          fillProps={this.state.fillProps}\n          hasClear={this.state.hasClear}\n          onChange={onChange}\n          onInputBlur={this.onInputBlur.bind(this)}\n          onInputUpdate={this.onInputUpdate.bind(this)}\n        >\n          <Option value=\"\">空</Option>\n          <Option value=\"jack\">Jack</Option>\n          <Option value=\"lucy\">Lucy</Option>\n          <Option value=\"andy\">Andy</Option>\n          <Option value=\"disabled\" disabled>\n            Disabled\n          </Option>\n        </Combobox>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n",
        "body": "\n演示了Combobox的多种形态.\n\n"
      },
      {
        "title": "受控Combo",
        "order": "7",
        "jsx": "import { Select } from \"@icedesign/base\";\nimport jsonp from \"jsonp\";\n\nconst { Combobox } = Select;\n\nclass App extends React.Component {\n  state = {\n    dataSource: [],\n    value: \"test\"\n  };\n  onInputUpdate(value) {\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout);\n    }\n    this.searchTimeout = setTimeout(() => {\n      jsonp(\n        `https://suggest.taobao.com/sug?code=utf-8&q=${value}`,\n        (err, data) => {\n          const dataSource = data.result.map(item => {\n            return {\n              label: item[0],\n              value: item[1]\n            };\n          });\n          this.setState({\n            dataSource\n          });\n        }\n      );\n    }, 100);\n    //单选情况下需要更新input的值\n    this.setState({\n      value\n    });\n  }\n  onChange(value) {\n    this.setState({\n      value\n    });\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Combobox\n          onInputUpdate={this.onInputUpdate.bind(this)}\n          filterLocal={false}\n          value={this.state.value}\n          fillProps=\"label\"\n          placeholder=\"请输入淘宝商品\"\n          onChange={this.onChange.bind(this)}\n          dataSource={this.state.dataSource}\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n",
        "body": "\n演示Combobox的受控状态\n\n"
      },
      {
        "title": "多选受控",
        "order": "8",
        "jsx": "import { Select } from \"@icedesign/base\";\nimport jsonp from \"jsonp\";\n\nconst { Combobox } = Select;\n\nclass App extends React.Component {\n  state = {\n    dataSource: [],\n    value: \"test\"\n  };\n  //多选情况下不需要更新input的值\n  onInputUpdate(value) {\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout);\n    }\n    this.searchTimeout = setTimeout(() => {\n      jsonp(\n        `https://suggest.taobao.com/sug?code=utf-8&q=${value}`,\n        (err, data) => {\n          const dataSource = data.result.map(item => {\n            return {\n              label: item[0],\n              value: item[1]\n            };\n          });\n          this.setState({\n            dataSource\n          });\n        }\n      );\n    }, 100);\n  }\n  onChange(value) {\n    this.setState({\n      value\n    });\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Combobox\n          onInputUpdate={this.onInputUpdate.bind(this)}\n          filterLocal={false}\n          value={this.state.value}\n          fillProps=\"label\"\n          multiple\n          placeholder=\"请输入淘宝商品\"\n          onChange={this.onChange.bind(this)}\n          dataSource={this.state.dataSource}\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n",
        "body": "\n演示多选情况下Combobox的受控状态\n\n"
      },
      {
        "title": "动态数据",
        "order": "6",
        "jsx": "import { Select } from \"@icedesign/base\";\nimport jsonp from \"jsonp\";\n\nconst { Combobox } = Select;\n\nconst onChange = function(...args) {\n  console.log(args);\n};\n\nclass App extends React.Component {\n  state = {\n    dataSource: []\n  };\n  onInputUpdate(value) {\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout);\n    }\n    this.searchTimeout = setTimeout(() => {\n      jsonp(\n        `https://suggest.taobao.com/sug?code=utf-8&q=${value}`,\n        (err, data) => {\n          const dataSource = data.result.map(item => {\n            return {\n              label: item[0],\n              value: item[1]\n            };\n          });\n          this.setState({\n            dataSource\n          });\n        }\n      );\n    }, 100);\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Combobox\n          onInputUpdate={this.onInputUpdate.bind(this)}\n          filterLocal={false}\n          fillProps=\"label\"\n          placeholder=\"请输入淘宝商品\"\n          onChange={onChange}\n          dataSource={this.state.dataSource}\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n",
        "body": "\n使用动态数据填充Combobox, 设置`filterLocal`为false\n\n"
      },
      {
        "title": "图文展示",
        "order": "7",
        "jsx": "import { Select, Icon } from \"@icedesign/base\";\nimport jsonp from \"jsonp\";\n\nconst { Combobox } = Select;\n\nconst onChange = function(...args) {\n  console.log(args);\n};\n\nconst formatter = function(item) {\n  return (\n    <div>\n      <Icon type=\"gifts\" size=\"small\" />&nbsp;{item}\n    </div>\n  );\n};\n\nclass App extends React.Component {\n  state = {\n    dataSource: []\n  };\n  onInputUpdate(value) {\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout);\n    }\n    this.searchTimeout = setTimeout(() => {\n      jsonp(\n        `https://suggest.taobao.com/sug?code=utf-8&q=${value}`,\n        (err, data) => {\n          const dataSource = data.result.map(item => {\n            return {\n              label: formatter(item[0]),\n              value: item[1],\n              originLabel: item[0]\n            };\n          });\n          this.setState({\n            dataSource\n          });\n        }\n      );\n    }, 100);\n  }\n  // 由于这个时候展示的是富文本，所以fillProps需要设置成展示合理的值(originLabel)\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Combobox\n          onInputUpdate={this.onInputUpdate.bind(this)}\n          filterLocal={false}\n          fillProps=\"originLabel\"\n          placeholder=\"请输入淘宝商品\"\n          onChange={onChange}\n          dataSource={this.state.dataSource}\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n",
        "body": "\n展示较为复杂的内容\n\n"
      },
      {
        "title": "tags",
        "order": "8",
        "jsx": "import { Select, Button } from \"@icedesign/base\";\n\nconst { Combobox } = Select;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: [\n        {\n          value: \"测试\",\n          label: \"测试\",\n          time: 123\n        }\n      ],\n      value: \"测试\",\n      visible: false\n    };\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <p>\n          <Button onClick={this.toggleTags.bind(this)}>切换tags模式</Button>&nbsp;\n          <Button onClick={this.toggleHiddenSelect.bind(this)}>\n            切换在多选的时候是否隐藏菜单\n          </Button>&nbsp;\n          <Button onClick={this.toggleVisible.bind(this)} ref=\"visibleElement\">\n            切换显示\n          </Button>&nbsp;\n        </p>\n        <Combobox\n          size=\"large\"\n          value={this.state.value}\n          dataSource={this.state.dataSource}\n          onChange={this.onChange.bind(this)}\n          onInputUpdate={this.onInputUpdate.bind(this)}\n          multiple\n          tags={this.state.tags}\n          filterLocal={false}\n          safeNode={() => this.refs.visibleElement}\n          visible={this.state.visible}\n          onInputBlur={() => console.log(\"blur\")}\n          onVisibleChange={this.onVisibleChange.bind(this)}\n          hiddenSelected={this.state.hiddenSelected}\n        />\n      </div>\n    );\n  }\n  onInputUpdate(value) {\n    let options;\n    if (!value || value.indexOf(\"@\") > 0) {\n      options = [];\n    } else {\n      options = [\"126.com\", \"163.com\", \"gmail.com\"].map(mail => {\n        return {\n          label: value + \"@\" + mail,\n          value: value + \"@\" + mail,\n          time: Math.random()\n        };\n      });\n    }\n    this.setState({ dataSource: options });\n  }\n  onChange(value, item) {\n    this.setState({ value });\n    console.log(item);\n  }\n  toggleTags() {\n    this.setState({ tags: !this.state.tags });\n  }\n  toggleHiddenSelect() {\n    this.setState({ hiddenSelected: !this.state.hiddenSelected });\n  }\n  toggleVisible() {\n    this.setState({ visible: !this.state.visible });\n  }\n  onVisibleChange(visible) {\n    this.setState({ visible });\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n",
        "body": "\n演示combobox的tags功能\n\n"
      },
      {
        "title": "弹层定制",
        "order": "9",
        "jsx": "import { Select } from \"@icedesign/base\";\nimport classnames from \"classnames\";\n\n/* eslint-disable react/prop-types, react/no-multi-comp */\nclass Menu extends React.Component {\n  data = [\n    {\n      label: \"value1\",\n      value: 1\n    },\n    {\n      label: \"value2\",\n      value: 2\n    }\n  ];\n  render() {\n    const { className, ...others } = this.props;\n    const cls = classnames({\n      \"overlay-content\": true,\n      [className]: className\n    });\n    return (\n      <ul className={cls} {...others}>\n        {this.renderItems()}\n      </ul>\n    );\n  }\n  renderItems() {\n    return this.data.map(item => (\n      <li onClick={this.onClick.bind(this, item)} key={item.value}>\n        {item.label}\n      </li>\n    ));\n  }\n  onClick(item) {\n    this.props.onChange(item);\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: null\n    };\n  }\n  onSelect = value => {\n    this.setState({\n      value,\n      visible: false\n    });\n  };\n  onVisibleChange = visible => {\n    this.setState({\n      visible\n    });\n  };\n  render() {\n    const overlay = <Menu onChange={this.onSelect} />;\n    return (\n      <div className=\"demo-ctl\">\n        <Select\n          placeholder=\"选择自定义数据\"\n          visible={this.state.visible}\n          onVisibleChange={this.onVisibleChange}\n          value={this.state.value}\n          overlay={overlay}\n        />\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n.overlay-content{\n    border:1px solid #ddd;\n    padding:10px;\n    background:#fff;\n    margin:0;\n    min-width:150px;\n    font-family: Arial;\n    box-shadow: 2px 2px 20px rgba(0,0,0,0.15);\n}\n.overlay-content li{\n    list-style: none;\n    line-height:30px;\n    padding: 0 5px;\n    cursor: pointer;\n}\n.overlay-content li:hover{\n    background:#f8f8f8;\n}\n.overlay-content li:last-child{\n    border-width:0;\n}\n",
        "body": "\n通过overlay定制select弹层\n\n"
      },
      {
        "title": "基本使用",
        "order": "0",
        "jsx": "import { Select, Button } from \"@icedesign/base\";\n\nconst { Option } = Select;\n\nconst onChange = function(...args) {\n  console.log(args);\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <p>\n          <Select\n            placeholder=\"选择尺寸\"\n            onChange={this.onSelect.bind(this, \"size\")}\n          >\n            <Option value=\"small\">Small</Option>\n            <Option value=\"medium\">Medium</Option>\n            <Option value=\"large\">Large</Option>\n          </Select>\n          <Select\n            placeholder=\"选择模式\"\n            onChange={this.onSelect.bind(this, \"mode\")}\n          >\n            <Option value=\"single\">单选</Option>\n            <Option value=\"multiple\">多选</Option>\n          </Select>\n          <Select\n            placeholder=\"显示搜索框\"\n            onChange={this.onSelect.bind(this, \"search\")}\n          >\n            <Option value=\"no\">不显示</Option>\n            <Option value=\"yes\">显示</Option>\n          </Select>\n          <Select\n            placeholder=\"选择形状\"\n            onChange={this.onSelect.bind(this, \"shape\")}\n          >\n            <Option value=\"normal\">常规</Option>\n            <Option value=\"arrow-only\">无边框</Option>\n          </Select>\n          <Select\n            placeholder=\"显示箭头\"\n            onChange={this.onSelect.bind(this, \"hasArrow\")}\n          >\n            <Option value=\"yes\">常规</Option>\n            <Option value=\"no\">无下拉箭头</Option>\n          </Select>\n          <Select\n            placeholder=\"显示清空按钮\"\n            onChange={this.onSelect.bind(this, \"hasClear\")}\n          >\n            <Option value=\"no\">不显示</Option>\n            <Option value=\"yes\">显示</Option>\n          </Select>\n          <Button onClick={this.onToggle.bind(this)} type=\"primary\">\n            Toggle disabled\n          </Button>\n        </p>\n        <h4>预览</h4>\n        <Select\n          size={this.state.size}\n          multiple={this.state.mode}\n          showSearch={this.state.search}\n          shape={this.state.shape}\n          hasArrow={this.state.hasArrow}\n          disabled={this.state.disabled}\n          hasClear={this.state.hasClear}\n          onChange={onChange}\n        >\n          <Option value=\"\">空</Option>\n          <Option value=\"jack\">Jack</Option>\n          <Option value=\"lucy\">Lucy</Option>\n          <Option value=\"andy\">Andy</Option>\n          <Option value=\"disabled\" disabled>\n            Disabled\n          </Option>\n        </Select>\n      </div>\n    );\n  }\n  onToggle() {\n    this.setState({\n      disabled: !this.state.disabled\n    });\n  }\n  onSelect(type, value) {\n    switch (type) {\n      case \"mode\":\n        this.setState({\n          [type]: value === \"multiple\"\n        });\n        break;\n      case \"search\":\n      case \"hasArrow\":\n      case \"hasClear\":\n        this.setState({\n          [type]: value === \"yes\"\n        });\n        break;\n      default:\n        this.setState({\n          [type]: value\n        });\n    }\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".next-select{\n    margin-right:10px;\n    vertical-align: middle;\n    margin-top:5px;\n}\n\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n    padding:5px 10px 10px 10px;\n    border:2px dotted #ddd;\n    border-radius:3px;\n}\n.demo-ctl p .next-btn{\n    margin-top:5px;\n    vertical-align: middle;\n}\n",
        "body": "\n演示了Select的多种形态.\n\n"
      },
      {
        "title": "级联选择",
        "order": "1",
        "jsx": "import { Select } from \"@icedesign/base\";\n\nconst provinceData = [\"浙江\", \"江苏\"];\nconst cityData = {\n  浙江: [\"杭州\", \"宁波\", \"温州\"],\n  江苏: [\"南京\", \"苏州\", \"镇江\"]\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      disabled: true\n    };\n  }\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Select\n          placeholder=\"选择省份\"\n          dataSource={provinceData}\n          value={this.state.province}\n          onChange={this.onSelect.bind(this)}\n        />\n        <Select\n          placeholder=\"选择城市\"\n          dataSource={this.state.data}\n          value={this.state.city}\n          onChange={this.onChange.bind(this)}\n          disabled={this.state.disabled}\n        />\n      </div>\n    );\n  }\n  onSelect(value) {\n    const data = cityData[value];\n    this.setState({ data, province: value, disabled: false });\n  }\n  onChange(value) {\n    this.setState({ city: value });\n    console.log(this.state.province, value);\n  }\n}\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".next-select{margin-right:10px;}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.demo-ctl p {\n    margin-top:0;\n}\n",
        "body": "\n使用Select构建级联选择框.\n\n"
      },
      {
        "title": "分组",
        "order": "3",
        "jsx": "import { Select } from \"@icedesign/base\";\n\nconst { Option, OptionGroup } = Select;\n\nconst dataSource = [\n  {\n    label: \"文案1\",\n    children: [\n      {\n        label: \"文案11\",\n        value: \"text11\"\n      }\n    ]\n  },\n  {\n    label: \"文案2\",\n    children: [\n      {\n        label: \"文案22\",\n        value: \"text22\"\n      }\n    ]\n  }\n];\n\nReactDOM.render(\n  <div className=\"demo-ctl\">\n    <Select placeholder=\"选择尺寸\" showSearch>\n      <OptionGroup label=\"尺寸1\">\n        <Option value=\"small\">Small</Option>\n        <Option value=\"medium\">Medium</Option>\n        <Option value=\"large\">Large</Option>\n      </OptionGroup>\n      <OptionGroup label=\"尺寸2\">\n        <Option value=\"small2\">Small2</Option>\n        <Option value=\"medium2\">Medium2</Option>\n        <Option value=\"large2\">Large2</Option>\n      </OptionGroup>\n    </Select>\n    <Select dataSource={dataSource} />\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-select{margin-right:10px;}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n",
        "body": "\n使用OptionGroup针对选项进行分组\n\n"
      },
      {
        "title": "搜索框",
        "order": "4",
        "jsx": "import { Select } from \"@icedesign/base\";\nimport jsonp from \"jsonp\";\n\nclass App extends React.Component {\n  state = {\n    dataSource: []\n  };\n\n  render() {\n    return (\n      <div className=\"demo-ctl\">\n        <Select\n          showSearch\n          dataSource={this.state.dataSource}\n          onSearch={this.onSearch}\n          filterLocal={false}\n          className=\"temp\"\n        />\n      </div>\n    );\n  }\n\n  onSearch = value => {\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout);\n    }\n    this.searchTimeout = setTimeout(() => {\n      jsonp(\n        `https://suggest.taobao.com/sug?code=utf-8&q=${value}`,\n        (err, data) => {\n          const dataSource = data.result.map(item => {\n            return {\n              label: item[0],\n              value: item[1]\n            };\n          });\n          this.setState({\n            dataSource\n          });\n        }\n      );\n    }, 100);\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".next-select.temp{\n    margin-right:10px;\n    width:200px;\n}\n.demo-ctl {\n  background-color: #f6f6f6;\n  padding: 20px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n",
        "body": "\n使用showSearch显示搜索框\n\n"
      }
    ]
  },
  {
    "name": "Slider",
    "category": "Components",
    "title": "图片轮播",
    "type": "展示",
    "importStatement": "import { Slider } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n轮播组件，就是以幻灯片的方式，在页面中横向展示诸多内容的组件。\n轮播内容相互独立，前后在内容以及数据上都不存在逻辑关系。\n\n### 何时使用\n\n-   **单图轮播**：该样式通常用于承载运营banner，是一个位置相对固定的模块。\n-   **多图轮播**：单元信息浏览\n\n### 使用注意点\n\n1.  当轮播组件中只有一张图片的时候，轮播组件会隐藏导航锚点、禁止自动循环（即使上层设置了）、禁止拖拽播放（即使上层设置了）。\n2.  如果您要将 Slider 放到 Dialog 中，此时你需要关闭 Dialog 的动画，避免 Slider 在计算内部元素宽度时造成出错。\n3.  如果出现图片高度 1px 的问题，可以尝试在 `img` 标签的外部包裹一层 `div` 标签。\n\n",
    "propsSchema": {
      "name": "Slider",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义传入的样式",
          "docblock": "自定义传入的样式"
        },
        "adaptiveHeight": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否使用自适应高度",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否使用自适应高度"
        },
        "animation": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否开启动效",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否开启动效"
        },
        "arrows": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示箭头",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示箭头"
        },
        "arrowSize": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "导航箭头大小",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "导航箭头大小"
        },
        "arrowPos": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'inline'",
                "computed": false
              },
              {
                "value": "'outer'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "导航箭头位置",
          "defaultValue": {
            "value": "'inline'",
            "computed": false
          },
          "docblock": "导航箭头位置"
        },
        "arrowDirection": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "导航箭头的方向",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "docblock": "导航箭头的方向"
        },
        "nextArrow": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "向后箭头",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "向后箭头"
        },
        "prevArrow": {
          "type": {
            "name": "element"
          },
          "required": false,
          "description": "向后箭头",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "向后箭头"
        },
        "autoplay": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否自动播放",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否自动播放"
        },
        "autoplaySpeed": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "自动播放的速度",
          "defaultValue": {
            "value": "3000",
            "computed": false
          },
          "docblock": "自动播放的速度"
        },
        "centerMode": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否启用居中模式",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否启用居中模式"
        },
        "dots": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示导航锚点",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示导航锚点"
        },
        "dotsDirection": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "导航锚点到位置",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "docblock": "导航锚点到位置"
        },
        "draggable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否可拖拽",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否可拖拽"
        },
        "fade": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否使用淡入淡出效果",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否使用淡入淡出效果"
        },
        "infinite": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否使用无穷循环模式",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否使用无穷循环模式"
        },
        "initialSlide": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "初始被激活的轮播图",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "docblock": "初始被激活的轮播图"
        },
        "lazyLoad": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否启用懒加载",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否启用懒加载"
        },
        "slideDirection": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "轮播方向",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "docblock": "轮播方向"
        },
        "slidesToShow": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "同时展示的图片数量",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "docblock": "同时展示的图片数量"
        },
        "slidesToScroll": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "同时滑动到图片数量",
          "defaultValue": {
            "value": "1",
            "computed": false
          },
          "docblock": "同时滑动到图片数量"
        },
        "speed": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "轮播速度",
          "defaultValue": {
            "value": "500",
            "computed": false
          },
          "docblock": "轮播速度"
        },
        "slickGoTo": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "跳转到指定的轮播图（受控）",
          "docblock": "跳转到指定的轮播图（受控）"
        },
        "afterChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "轮播切换后的回调函数",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "轮播切换后的回调函数\n@param {Number} index 当前幻灯片的索引",
          "params": [
            {
              "name": "index",
              "description": "当前幻灯片的索引",
              "type": {
                "name": "Number"
              }
            }
          ],
          "returns": null
        },
        "beforeChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "轮播切换前的回调函数",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "轮播切换前的回调函数\n@param {Number} currentIndex 当前幻灯片的索引\n@param {Number} nextIndex    下一张幻灯片的索引",
          "params": [
            {
              "name": "currentIndex",
              "description": "当前幻灯片的索引",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "nextIndex",
              "description": "下一张幻灯片的索引",
              "type": {
                "name": "Number"
              }
            }
          ],
          "returns": null
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nclassName | 自定义传入的样式 | String | -\nadaptiveHeight | 是否使用自适应高度 | Boolean | false\nanimation | 是否开启动效 | Boolean | true\narrows | 是否显示箭头 | Boolean | true\narrowSize | 导航箭头大小<br><br>**可选值**:<br>'medium', 'large' | Enum | 'medium'\narrowPos | 导航箭头位置<br><br>**可选值**:<br>'inline', 'outer' | Enum | 'inline'\narrowDirection | 导航箭头的方向<br><br>**可选值**:<br>'horizontal', 'vertical' | Enum | 'horizontal'\nnextArrow | 向后箭头 | ReactElement | null\nprevArrow | 向后箭头 | ReactElement | null\nautoplay | 是否自动播放 | Boolean | false\nautoplaySpeed | 自动播放的速度 | Number | 3000\ncenterMode | 是否启用居中模式 | Boolean | false\ndots | 是否显示导航锚点 | Boolean | true\ndotsDirection | 导航锚点到位置<br><br>**可选值**:<br>'horizontal', 'vertical' | Enum | 'horizontal'\ndraggable | 是否可拖拽 | Boolean | true\nfade | 是否使用淡入淡出效果 | Boolean | false\ninfinite | 是否使用无穷循环模式 | Boolean | true\ninitialSlide | 初始被激活的轮播图 | Number | 0\nlazyLoad | 是否启用懒加载 | Boolean | false\nslideDirection | 轮播方向<br><br>**可选值**:<br>'horizontal', 'vertical' | Enum | 'horizontal'\nslidesToShow | 同时展示的图片数量 | Number | 1\nslidesToScroll | 同时滑动到图片数量 | Number | 1\nspeed | 轮播速度 | Number | 500\nslickGoTo | 跳转到指定的轮播图（受控） | Number | -\nafterChange | 轮播切换后的回调函数<br><br>**签名**:<br>Function(index: Number) => void<br>**参数**:<br>*index*: {Number} 当前幻灯片的索引 | Function | null\nbeforeChange | 轮播切换前的回调函数<br><br>**签名**:<br>Function(currentIndex: Number, nextIndex: Number) => void<br>**参数**:<br>*currentIndex*: {Number} 当前幻灯片的索引<br>*nextIndex*: {Number} 下一张幻灯片的索引 | Function | null\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "导航箭头位置",
        "order": "5",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Slider slidesToShow={4} arrowPos=\"outer\">\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">1</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">2</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">3</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">4</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">5</h4>\n      </div>\n    </Slider>\n\n    <br />\n\n    <Slider>\n      <div>\n        <h3 className=\"h3\">1</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">2</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">3</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">4</h3>\n      </div>\n    </Slider>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-slick .h3, .h4 {\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.next-slick .h4 {\n    margin: 0 5px;\n    position: relative;\n}\n",
        "body": "\n可以通过指定`arrowPos`的属性值为`outer`，使用外置按钮，其默认值为`inline`。\n轮播组件的导航按钮在默认情况下为内置模式。在多图同时导航的情况下，如果想要使用外置按钮，\n\n"
      },
      {
        "title": "自动播放",
        "order": "5",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div style={{ width: \"600px\" }}>\n    <Slider\n      slidesToShow={4}\n      arrowPos=\"outer\"\n      dots={false}\n      autoplay\n      autoplaySpeed={1000}\n    >\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">1</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">2</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">3</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">4</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">5</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">6</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">7</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">8</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">9</h4>\n      </div>\n    </Slider>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-slick .h3, .h4 {\n    margin: 0 5px;\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n",
        "body": "\n可以通过 `autoplay` 和 `autoplaySpeed` 属性来设置组件是否自动轮播 和 自动轮播的速度。\n\n"
      },
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nconst slides = [\n  {\n    url: \"https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png\",\n    text: \"手机淘宝皮肤征集\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg\",\n    text: \"阿里公益T恤设计大概\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg\",\n    text: \"淘公仔设计大赛\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg\",\n    text: \"磁带播放器换肤设计大赛\"\n  }\n];\n\nReactDOM.render(\n  <Slider>\n    {slides.map((item, index) => (\n      <div key={index} className=\"slider-img-wrapper\">\n        <img src={item.url} alt={item.text} />\n      </div>\n    ))}\n  </Slider>,\n  mountNode\n);\n\n",
        "css": ".slider-img-wrapper img {\n    width: 100%;\n}\n",
        "body": "\n**注意：** 如果出现图片 1px 高度的问题，建议将图片的外部包括一层 `div` 来避免这个问题。\n在默认模式下（不指定任何属性值），轮播组件为单图轮播模式。\n轮播组件共有两种类型：单图轮播和多图同时轮播。\n\n"
      },
      {
        "title": "导航按钮尺寸",
        "order": "3",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nconst bigSlides = [\n  {\n    url: \"https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png\",\n    text: \"磁带播放器换肤设计大赛\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg\",\n    text: \"手机淘宝皮肤征集\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg\",\n    text: \"设计赋能公益\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg\",\n    text: \"淘公仔设计大赛\"\n  }\n];\n\nReactDOM.render(\n  <div>\n    <Slider>\n      {bigSlides.map((item, index) => (\n        <div key={index} className=\"slider-img-wrapper\">\n          <img src={item.url} alt={item.text} />\n        </div>\n      ))}\n    </Slider>\n\n    <br />\n\n    <Slider arrowSize=\"large\">\n      {bigSlides.map((item, index) => (\n        <div key={index} className=\"slider-img-wrapper\">\n          <img src={item.url} alt={item.text} />\n        </div>\n      ))}\n    </Slider>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".slider-img-wrapper img {\n    width: 100%;\n}\n",
        "body": "\n对特定场景，比如展示的图片较大的情况下，可以选择`large`，将导航按钮设置为大按钮。\n可以通过`arrowSize`属性来更改导航组件的按钮尺寸，默认值为`normal`，\n\n"
      },
      {
        "title": "居中模式",
        "order": "9",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nconst settings = {\n  className: \"custom-slide center\",\n  centerMode: true,\n  infinite: true,\n  dots: false,\n  arrowPos: \"outer\",\n  centerPadding: \"60px\",\n  slidesToShow: 3,\n  speed: 500\n};\n\nReactDOM.render(\n  <Slider {...settings}>\n    <div>\n      <h3>1</h3>\n    </div>\n    <div>\n      <h3>2</h3>\n    </div>\n    <div>\n      <h3>3</h3>\n    </div>\n    <div>\n      <h3>4</h3>\n    </div>\n    <div>\n      <h3>5</h3>\n    </div>\n    <div>\n      <h3>6</h3>\n    </div>\n    <div>\n      <h3>7</h3>\n    </div>\n    <div>\n      <h3>8</h3>\n    </div>\n    <div>\n      <h3>9</h3>\n    </div>\n  </Slider>,\n  mountNode\n);\n\n",
        "css": ".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n\n.center h3 {\n    opacity: 0.8;\n    transition: all 300ms ease;\n}\n\n.center .next-slick-center h3 {\n  color: #e67e22;\n  opacity: 1;\n  transform: scale(1.08);\n}\n",
        "body": "\n居中模式可以突出显示最核心区域的内容，您可以通过设置 `centerMode` 属性址为 `true` 开启该功能。\n\n"
      },
      {
        "title": "自定义导航箭头",
        "order": "3",
        "jsx": "import { Slider, Icon } from \"@icedesign/base\";\n\nconst slides = [\n  {\n    url: \"https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png\",\n    text: \"手机淘宝皮肤征集\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg\",\n    text: \"阿里公益T恤设计大概\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg\",\n    text: \"淘公仔设计大赛\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg\",\n    text: \"磁带播放器换肤设计大赛\"\n  }\n];\n\nconst arrowStyle = {\n  display: \"block\",\n  background: \"red\",\n  opacity: 1,\n  margin: \"0 20px\"\n};\n\nconst CustomNextArrow = props => {\n  return (\n    <div {...props} style={arrowStyle}>\n      <Icon type=\"arrow-double-right\" />\n    </div>\n  );\n};\n\nconst CustomPrevArrow = props => {\n  return (\n    <div {...props} style={arrowStyle}>\n      <Icon type=\"arrow-double-left\" />\n    </div>\n  );\n};\n\nReactDOM.render(\n  <Slider\n    nextArrow={<CustomNextArrow />}\n    prevArrow={<CustomPrevArrow />}\n    lazyLoad\n  >\n    {slides.map((item, index) => (\n      <div key={index} className=\"slider-img-wrapper\">\n        <img src={item.url} alt={item.text} />\n      </div>\n    ))}\n  </Slider>,\n  mountNode\n);\n\n",
        "css": ".slider-img-wrapper img {\n    width: 100%;\n}\n",
        "body": "\n开发者可以通过 `prevArrow` 和 `nextArrow` 两个属性传入自定义的导航箭头组件。\n\n"
      },
      {
        "title": "使用自定义组件",
        "order": "11",
        "jsx": "import { Slider } from \"@icedesign/base\";\nimport PropTypes from \"prop-types\";\n\nconst pages = [1, 2, 3, 4];\n\nfunction Inner({ children, ...others }) {\n  // 注意这里要透传其他属性到到下层节点上，Slider 底层需要执行元素的 clone 操作\n  return <div {...others}>{children}</div>;\n}\n\nInner.propTypes = {\n  children: PropTypes.any\n};\n\nconst slider = (\n  <Slider>\n    {pages.map((page, index) => {\n      return (\n        <Inner className=\"custom-inner\" key={index}>\n          custom {page}\n        </Inner>\n      );\n    })}\n  </Slider>\n);\n\nReactDOM.render(<div>{slider}</div>, mountNode);\n\n",
        "css": ".custom-inner {\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n",
        "body": "\n你可以为传递自定义组件到 Slider 组件中。前提是该组件一定要开放透传 props 到下层组件或元素，Slider 底层需要执行元素的 clone 操作。\n\n"
      },
      {
        "title": "导航锚点方向",
        "order": "5",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Slider dotsDirection=\"horizontal\" arrows={false}>\n      <div>\n        <h3 className=\"h3\">1</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">2</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">3</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">4</h3>\n      </div>\n    </Slider>\n\n    <br />\n\n    <Slider dotsDirection=\"vertical\" arrows={false}>\n      <div>\n        <h3 className=\"h3\">1</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">2</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">3</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">4</h3>\n      </div>\n    </Slider>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin-right: 5px;\n        position: relative;\n}\n",
        "body": "\n当其值设为 `vertical` 时为垂直方向展示。\n通过 `dotsDirection` 可以改变导航锚点的位置，默认为 `horizontal` 即水平方向。\n\n"
      },
      {
        "title": "Fade",
        "order": "12",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nconst settings = {\n  arrowPos: \"outer\",\n  dots: false,\n  fade: true,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  className: \"custom-slide\"\n};\n\nReactDOM.render(\n  <Slider {...settings}>\n    <div>\n      <h3>1</h3>\n    </div>\n    <div>\n      <h3>2</h3>\n    </div>\n    <div>\n      <h3>3</h3>\n    </div>\n    <div>\n      <h3>4</h3>\n    </div>\n    <div>\n      <h3>5</h3>\n    </div>\n    <div>\n      <h3>6</h3>\n    </div>\n    <div>\n      <h3>7</h3>\n    </div>\n    <div>\n      <h3>8</h3>\n    </div>\n    <div>\n      <h3>9</h3>\n    </div>\n  </Slider>,\n  mountNode\n);\n\n",
        "css": ".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n",
        "body": "\n切换跑马灯时使用渐变效果。\n\n"
      },
      {
        "title": "禁止循环",
        "order": "6",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Slider slidesToShow={4} arrowPos=\"outer\" infinite={false} dots={false}>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">1</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">2</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">3</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">4</h4>\n      </div>\n      <div style={{ width: \"25%\" }}>\n        <h4 className=\"h4\">5</h4>\n      </div>\n    </Slider>\n\n    <br />\n\n    <Slider infinite={false}>\n      <div>\n        <h3 className=\"h3\">1</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">2</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">3</h3>\n      </div>\n      <div>\n        <h3 className=\"h3\">4</h3>\n      </div>\n    </Slider>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.next-slick .h4 {\n        margin: 0 5px;\n        position: relative;\n}\n",
        "body": "\n如果你不想启用这样的复制效果，只要关闭 `infinite` 属性即可。\n值得注意的是，由于组件的默认行为是无穷模式，所以默认情况下，自动将单张图片复制了两份，\n可以通过设置 `infinite` 为 `false`，用来禁止循环模式。\n默认情况下，轮播组件的表现为无穷循环模式。如果你不想无穷循环，\n\n"
      },
      {
        "title": "多图轮播",
        "order": "2",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nconst slides = [1, 2, 3, 4, 5, 6, 7, 8, 9].map(item => (\n  <div style={{ width: \"25%\" }} key={item}>\n    <h4 className=\"h4\">1</h4>\n  </div>\n));\n\nReactDOM.render(\n  <div style={{ width: \"600px\" }}>\n    <div className=\"demo-item-title\">一次轮播一张图片</div>\n    <Slider slidesToShow={4} arrowPos=\"outer\" dots={false}>\n      {slides}\n    </Slider>\n\n    <div className=\"demo-item-title\">一次轮播多张图片</div>\n    <Slider slidesToShow={4} slidesToScroll={4} arrowPos=\"outer\" dots={false}>\n      {slides}\n    </Slider>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".next-slick .h3, .h4 {\n    margin: 0 5px;\n    background: #4F74B3;\n    color: #fff;\n    line-height: 150px;\n    text-align: center;\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n",
        "body": "\n可以通过 `slidesToScroll` 属性制定单次轮播图片的个数。\n在单图轮播的基础上，通过指定`slidesToShow`属性值，可以同时进行多图轮播。\n\n"
      },
      {
        "title": "悬浮时暂停",
        "order": "10",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nconst settings = {\n  className: \"custom-slide\",\n  arrowPos: \"outer\",\n  dots: false,\n  infinite: true,\n  slidesToShow: 3,\n  slidesToScroll: 1,\n  autoplay: true,\n  autoplaySpeed: 2000,\n  pauseOnHover: true\n};\n\nReactDOM.render(\n  <Slider {...settings}>\n    <div>\n      <h3>1</h3>\n    </div>\n    <div>\n      <h3>2</h3>\n    </div>\n    <div>\n      <h3>3</h3>\n    </div>\n    <div>\n      <h3>4</h3>\n    </div>\n    <div>\n      <h3>5</h3>\n    </div>\n    <div>\n      <h3>6</h3>\n    </div>\n    <div>\n      <h3>7</h3>\n    </div>\n    <div>\n      <h3>8</h3>\n    </div>\n    <div>\n      <h3>9</h3>\n    </div>\n  </Slider>,\n  mountNode\n);\n\n",
        "css": ".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n",
        "body": "\n可以通过设置 `pauseOnHover` 属性为 `true` 使得 Slide 在鼠标悬浮时自动停止轮播。\n\n"
      },
      {
        "title": "slickGoTo",
        "order": "10",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nconst slides = [\n  {\n    url: \"https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png\",\n    text: \"磁带播放器换肤设计大赛\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg\",\n    text: \"手机淘宝皮肤征集\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg\",\n    text: \"设计赋能公益\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg\",\n    text: \"淘公仔设计大赛\"\n  }\n];\n\nclass SlickGoTo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentSlide: 0 // 这里初始值需要置为 0，如果你希望初始值不为 0 ，可以使用 initialSlide 属性设置\n    };\n    this.changeHandler = this.changeHandler.bind(this);\n  }\n  changeHandler(e) {\n    this.setState({\n      currentSlide: parseInt(e.target.value)\n    });\n  }\n  render() {\n    const settings = {\n      dots: false,\n      infinite: true,\n      slickGoTo: this.state.currentSlide\n    };\n    return (\n      <div>\n        <div className=\"demo-item-title\">拉动下面的滚动条切换</div>\n        <input\n          onChange={this.changeHandler}\n          defaultValue={0}\n          type=\"range\"\n          min={0}\n          max={3}\n        />\n        <Slider {...settings}>\n          {slides.map((item, index) => (\n            <div key={index} className=\"slider-img-wrapper\">\n              <img src={item.url} alt={item.text} />\n            </div>\n          ))}\n        </Slider>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<SlickGoTo />, mountNode);\n\n",
        "css": ".slider-img-wrapper img {\n    width: 100%;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n",
        "body": "\n通过 `slickGoTo` 方法可以快速的定位到指定次序的 slider 。\n\n"
      },
      {
        "title": "beforeChange 和 afterChange 钩子",
        "order": "13",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nconst settings = {\n  className: \"custom-slide\",\n  arrowPos: \"outer\",\n  dots: false,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  beforeChange: function(currentSlide, nextSlide) {\n    console.log(\"before change\", currentSlide, nextSlide);\n  },\n  afterChange: function(currentSlide) {\n    console.log(\"after change\", currentSlide);\n  }\n};\n\nReactDOM.render(\n  <Slider {...settings}>\n    <div>\n      <h3>1</h3>\n    </div>\n    <div>\n      <h3>2</h3>\n    </div>\n    <div>\n      <h3>3</h3>\n    </div>\n    <div>\n      <h3>4</h3>\n    </div>\n    <div>\n      <h3>5</h3>\n    </div>\n    <div>\n      <h3>6</h3>\n    </div>\n    <div>\n      <h3>7</h3>\n    </div>\n    <div>\n      <h3>8</h3>\n    </div>\n    <div>\n      <h3>9</h3>\n    </div>\n  </Slider>,\n  mountNode\n);\n\n",
        "css": ".custom-slide h3 {\n    background: #4F74B3;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n",
        "body": "\n你可以利用 `beforeChange` 和 `afterChange` 两个钩子函数处理一些额外的逻辑。\n\n"
      },
      {
        "title": "垂直滑动",
        "order": "4",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div style={{ width: \"200px\" }}>\n    <div className=\"demo-item-title\">垂直多图模式</div>\n    <Slider\n      slideDirection=\"vertical\"\n      slidesToShow={3}\n      slidesToScroll={1}\n      dots={false}\n      arrowPos=\"inline\"\n      arrowDirection=\"vertical\"\n      className=\"vertical-slick\"\n    >\n      {[1, 2, 3, 4, 5].map((item, index) => (\n        <div\n          key={index}\n          className=\"custom-slider\"\n          style={{ border: \"1px solid transparent\" }}\n        >\n          <h3 className=\"h3\">{item}</h3>\n        </div>\n      ))}\n    </Slider>\n\n    <div className=\"demo-item-title\">垂直单图模式</div>\n    <Slider\n      slideDirection=\"vertical\"\n      dots={false}\n      arrowPos=\"inline\"\n      arrowDirection=\"vertical\"\n      className=\"vertical-slick\"\n    >\n      {[1, 2, 3, 4, 5].map((item, index) => (\n        <div key={index} className=\"custom-slider\">\n          <h3 className=\"h3\">{item}</h3>\n        </div>\n      ))}\n    </Slider>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".vertical-slick .h3 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        font-size: 36px;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n\n.demo-item-title {\n    font-size: 16px;\n    color: #333;\n    padding: 8px;\n    margin: 20px 0 10px 0;\n}\n",
        "body": "\n默认为值为 `horizontal` 。垂直模式也可以设置单图和多图轮播。\n轮播组件可以通过 `slideDirection` 属性设置两种轮播方向。当值为 `vertical` 时轮播方向为垂直方向，\n\n"
      },
      {
        "title": "弹出来的跑马灯",
        "order": "12",
        "jsx": "import { Slider, Dialog, Button } from \"@icedesign/base\";\nimport PropTypes from \"prop-types\";\n\nconst slides = [\n  {\n    url: \"https://img.alicdn.com/tps/TB1bewbNVXXXXc5XXXXXXXXXXXX-1000-300.png\",\n    text: \"磁带播放器换肤设计大赛\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1xuUcNVXXXXcRXXXXXXXXXXXX-1000-300.jpg\",\n    text: \"手机淘宝皮肤征集\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1ikP.NVXXXXaYXpXXXXXXXXXX-1000-300.jpg\",\n    text: \"设计赋能公益\"\n  },\n  {\n    url: \"https://img.alicdn.com/tps/TB1s1_JNVXXXXbhaXXXXXXXXXXX-1000-300.jpg\",\n    text: \"淘公仔设计大赛\"\n  }\n];\n\nconst dialogStyle = {\n  width: \"800px\"\n};\n\nclass FlappySlider extends React.Component {\n  static propTypes = {\n    slides: PropTypes.array\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  setVisible() {\n    this.setState(prevState => {\n      return {\n        visible: !prevState.visible\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"demo-wrapper\">\n        <Button type=\"primary\" onClick={this.setVisible.bind(this)}>\n          显示跑马灯\n        </Button>\n        <Dialog\n          visible={this.state.visible}\n          title=\"Alibaba.com\"\n          footer={false}\n          style={dialogStyle}\n          animation={false}\n          onClose={this.setVisible.bind(this)}\n        >\n          <Slider>\n            {this.props.slides.map((item, index) => (\n              <div key={index} className=\"slider-img-wrapper\">\n                <img key={index} src={item.url} alt={item.text} />\n              </div>\n            ))}\n          </Slider>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<FlappySlider slides={slides} />, mountNode);\n\n",
        "css": ".slider-img-wrapper img {\n    width: 100%;\n}\n",
        "body": "\n如果你要将 Slider 放到 Dialog 中，此时你需要关闭 Dialog 的动画，避免 Slider 在计算内部元素宽度时造成出错。\n\n"
      },
      {
        "title": "外部控制",
        "order": "8",
        "jsx": "import { Slider, Select } from \"@icedesign/base\";\n\nconst { Option } = Select;\n\nclass SliderWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      autoplay: false,\n      autoplaySpeed: 1000\n    };\n  }\n\n  onSelectAutoplay(value) {\n    this.setState({ autoplay: value });\n  }\n\n  onSelectAutoplaySpeed(value) {\n    this.setState({ autoplaySpeed: value });\n  }\n\n  render() {\n    return (\n      <div>\n        <Select\n          placeholder=\"自动播放\"\n          onChange={this.onSelectAutoplay.bind(this)}\n        >\n          <Option value>True</Option>\n          <Option value={false}>False</Option>\n        </Select>\n        &nbsp;&nbsp;\n        <Select\n          placeholder=\"轮播速度\"\n          onChange={this.onSelectAutoplaySpeed.bind(this)}\n        >\n          <Option value={1000}>1 second</Option>\n          <Option value={2000}>2 seconds</Option>\n          <Option value={3000}>3 seconds</Option>\n        </Select>\n        <br />\n        <br />\n        <Slider\n          autoplay={this.state.autoplay}\n          autoplaySpeed={this.state.autoplaySpeed}\n        >\n          <div>\n            <h3 className=\"h3\">1</h3>\n          </div>\n          <div>\n            <h3 className=\"h3\">2</h3>\n          </div>\n          <div>\n            <h3 className=\"h3\">3</h3>\n          </div>\n          <div>\n            <h3 className=\"h3\">4</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<SliderWrapper />, mountNode);\n\n",
        "css": ".next-slick .h3, .h4 {\n        background: #4F74B3;\n        color: #fff;\n        line-height: 150px;\n        text-align: center;\n        margin-top: 0;\n        margin-bottom: 0;\n}\n",
        "body": "\n用户可以包装 Slider 组件，以便进行外部控制。例如通过包装组件实现外部对 Slider 组件 `autoplay` 和 `autoplaySpeed` 值的控制。\n\n"
      },
      {
        "title": "不同的图片宽度",
        "order": "11",
        "jsx": "import { Slider } from \"@icedesign/base\";\n\nconst settings = {\n  className: \"custom-slide variable-width\",\n  arrowPos: \"outer\",\n  dots: true,\n  infinite: true,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  variableWidth: true\n};\n\nReactDOM.render(\n  <Slider {...settings}>\n    <div style={{ width: 100 }}>\n      <p>100</p>\n    </div>\n    <div style={{ width: 200 }}>\n      <p>200</p>\n    </div>\n    <div style={{ width: 75 }}>\n      <p>75</p>\n    </div>\n    <div style={{ width: 300 }}>\n      <p>300</p>\n    </div>\n    <div style={{ width: 225 }}>\n      <p>225</p>\n    </div>\n    <div style={{ width: 175 }}>\n      <p>175</p>\n    </div>\n  </Slider>,\n  mountNode\n);\n\n",
        "css": ".variable-width .next-slick-slide p {\n  background: #4F74B3;;\n  height: 100px;\n  color: #fff;\n  margin: 5px;\n  line-height: 100px;\n  text-align: center;\n}\n",
        "body": "\n通过设置 `variableWidth` 为 `true`，您可以在 Slider 中放置不同宽度的图片。\nSlider 在默认情况下会认为所有的子元素是等宽的。\n\n"
      }
    ]
  },
  {
    "name": "Step",
    "category": "Components",
    "title": "步骤",
    "type": "展示",
    "importStatement": "import { Step } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n可以通过 `animation` 属性关闭步骤条的动画，使 Step 变为纯展示型。\n\n",
    "propsSchema": {
      "name": "Step",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式的品牌前缀"
        },
        "current": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "当前步骤",
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "docblock": "当前步骤"
        },
        "direction": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "展示方向",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "docblock": "展示方向"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'circle'",
                "computed": false
              },
              {
                "value": "'arrow'",
                "computed": false
              },
              {
                "value": "'dot'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "类型",
          "defaultValue": {
            "value": "'circle'",
            "computed": false
          },
          "docblock": "类型"
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否只读模式",
          "docblock": "是否只读模式"
        },
        "animation": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否开启动效",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否开启动效"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义样式名",
          "docblock": "自定义样式名"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Item",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "组件的样式品牌前缀",
              "docblock": "组件的样式品牌前缀"
            },
            "status": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'wait'",
                    "computed": false
                  },
                  {
                    "value": "'process'",
                    "computed": false
                  },
                  {
                    "value": "'finish'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`",
              "docblock": "步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`"
            },
            "title": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "标题",
              "docblock": "标题"
            },
            "icon": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "图标",
              "docblock": "图标"
            },
            "content": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "内容，用于垂直状态下的内容填充",
              "docblock": "内容，用于垂直状态下的内容填充"
            },
            "itemRender": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "StepItem 的自定义渲染",
              "docblock": "StepItem 的自定义渲染\n@param {Number} index   节点索引\n@param {String} status  节点状态\n@returns {Node} 节点的渲染结果",
              "params": [
                {
                  "name": "index",
                  "description": "节点索引",
                  "type": {
                    "name": "Number"
                  }
                },
                {
                  "name": "status",
                  "description": "节点状态",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": {
                "description": "节点的渲染结果",
                "type": {
                  "name": "Node"
                }
              }
            },
            "percent": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "百分比",
              "docblock": "百分比"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否禁用",
              "docblock": "是否禁用"
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "点击步骤时的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "点击步骤时的回调\n@param {Number} index 节点索引",
              "params": [
                {
                  "name": "index",
                  "description": "节点索引",
                  "type": {
                    "name": "Number"
                  }
                }
              ],
              "returns": null
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义样式",
              "docblock": "自定义样式"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\ncurrent | 当前步骤 | Number | 0\ndirection | 展示方向<br><br>**可选值**:<br>'horizontal', 'vertical' | Enum | 'horizontal'\ntype | 类型<br><br>**可选值**:<br>'circle', 'arrow', 'dot' | Enum | 'circle'\nreadOnly | 是否只读模式 | Boolean | -\nanimation | 是否开启动效 | Boolean | true\nclassName | 自定义样式名 | String | -\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Item",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 组件的样式品牌前缀 | String | -\nstatus | 步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`<br><br>**可选值**:<br>'wait', 'process', 'finish' | Enum | -\ntitle | 标题 | ReactNode | -\nicon | 图标 | String | -\ncontent | 内容，用于垂直状态下的内容填充 | ReactNode | -\nitemRender | StepItem 的自定义渲染<br><br>**签名**:<br>Function(index: Number, status: String) => Node<br>**参数**:<br>*index*: {Number} 节点索引<br>*status*: {String} 节点状态<br>**返回值**:<br>{Node} 节点的渲染结果<br> | Function | -\npercent | 百分比 | Number | -\ndisabled | 是否禁用 | Boolean | -\nonClick | 点击步骤时的回调<br><br>**签名**:<br>Function(index: Number) => void<br>**参数**:<br>*index*: {Number} 节点索引 | Function | () =&gt; {}\nclassName | 自定义样式 | String | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Step } from \"@icedesign/base\";\n\nconst steps = [\"打开冰箱门\", \"把大象放进冰箱\", \"关上冰箱门\"].map(\n  (item, index) => <Step.Item key={index} title={item} />\n);\n\nReactDOM.render(\n  <div>\n    <h3>箭头型</h3>\n    <Step current={1} type=\"arrow\">\n      {steps}\n    </Step>\n\n    <h3>圆型</h3>\n    <Step current={1} type=\"circle\">\n      {steps}\n    </Step>\n\n    <h3>点型</h3>\n    <Step current={1} type=\"dot\">\n      {steps}\n    </Step>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n在最简单的情况下，Step 有三种类型，可以通过 `type` 属性进行切换。\n\n"
      },
      {
        "title": "受控模式",
        "order": "6",
        "jsx": "import { Step, Button, Select } from \"@icedesign/base\";\n\nconst { Item: StepItem } = Step;\nconst { Group: ButtonGroup } = Button;\n\nclass Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentStep: 3,\n      stepType: \"circle\",\n      stepAnimation: true\n    };\n\n    this.onClick = this.onClick.bind(this);\n  }\n  next() {\n    const s = this.state.currentStep + 1;\n\n    this.setState({\n      currentStep: s > 6 ? 6 : s\n    });\n  }\n  prev() {\n    const s = this.state.currentStep - 1;\n\n    this.setState({\n      currentStep: s < 0 ? 0 : s\n    });\n  }\n  onClick(currentStep) {\n    console.log(currentStep);\n\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n  onStepTypeChange(value) {\n    this.setState({ stepType: value });\n  }\n  onStepAnimation(value) {\n    this.setState({ stepAnimation: value });\n  }\n  render() {\n    const { currentStep } = this.state;\n\n    return (\n      <div>\n        <div className=\"custom-step-option\">\n          <Select\n            placeholder=\"选择展示类型\"\n            onChange={this.onStepTypeChange.bind(this)}\n            className=\"custom-select\"\n          >\n            {[\"circle\", \"arrow\", \"dot\"].map(item => (\n              <Select.Option value={item} key={item}>\n                {item}\n              </Select.Option>\n            ))}\n          </Select>\n\n          <Select\n            placeholder=\"是否开启动效\"\n            onChange={this.onStepAnimation.bind(this)}\n            className=\"custom-select\"\n          >\n            {[true, false].map((item, index) => (\n              <Select.Option value={item} key={index}>\n                {item ? \"开启动效\" : \"关闭动效\"}\n              </Select.Option>\n            ))}\n          </Select>\n        </div>\n\n        <Step\n          current={currentStep}\n          type={this.state.stepType}\n          animation={this.state.stepAnimation}\n        >\n          <StepItem title=\"步骤1\" onClick={this.onClick} />\n          <StepItem title=\"步骤2\" onClick={this.onClick} />\n          <StepItem title=\"步骤3\" onClick={this.onClick} />\n          <StepItem title=\"步骤4\" onClick={this.onClick} />\n          <StepItem title=\"步骤5\" onClick={this.onClick} />\n          <StepItem title=\"步骤6\" onClick={this.onClick} />\n        </Step>\n        <br />\n        <br />\n        <ButtonGroup>\n          <Button\n            onClick={this.prev.bind(this)}\n            type=\"primary\"\n            disabled={currentStep === 0}\n          >\n            上一步\n          </Button>\n          <Button\n            onClick={this.next.bind(this)}\n            type=\"primary\"\n            disabled={currentStep === 6}\n          >\n            下一步\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Component />, mountNode);\n\n",
        "css": ".custom-step-option {\n    margin-bottom: 20px;\n}\n\n.custom-select {\n    margin-right: 20px;\n}\n",
        "body": "\n默认情况下，Step 定义为展示型组件，上层组件可以通过修改传入的 current 属性值来修改当前的步骤，同时可以设置每个节点的 click 事件，来自定义回调。\n\n"
      },
      {
        "title": "Step.Item 自定义渲染",
        "order": "4",
        "jsx": "import { Step, Icon } from \"@icedesign/base\";\n\nconst steps = [\"one\", \"two\", \"three\", \"four\"];\n\nfunction itemRender(index, status) {\n  return index + 1;\n}\n\nfunction itemRender2(index, status) {\n  return status === \"finish\" ? <Icon type=\"good\" /> : index + 1;\n}\n\nReactDOM.render(\n  <div className=\"fusion-demo\">\n    <div className=\"fusion-demo-item\">\n      <Step current={2} animation={false}>\n        {steps.map(item => (\n          <Step.Item key={item} title={item} itemRender={itemRender} />\n        ))}\n      </Step>\n    </div>\n\n    <div className=\"fusion-demo-item\">\n      <Step current={2} animation={false}>\n        {steps.map(item => (\n          <Step.Item key={item} title={item} itemRender={itemRender2} />\n        ))}\n      </Step>\n    </div>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".fusion-demo-item {\n    margin: 15px 0;\n}\n",
        "body": "\n用户可以通过传递 `itemRender` 属性进行自定义的渲染。\n`Step.Item` 默认有三种状态，分别是 `wait`, `process`, `finish`。\n\n"
      },
      {
        "title": "垂直模式",
        "order": "1",
        "jsx": "import { Step, Icon } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>把大象装进冰箱的正确姿势</h3>\n    <Step current={1} direction=\"vertical\" animation={false}>\n      <Step.Item title=\"步骤1\" content=\"打开冰箱门\" />\n      <Step.Item title=\"步骤2\" content=\"把大象塞进去\" />\n      <Step.Item title=\"步骤3\" content=\"关上冰箱门\" />\n    </Step>\n\n    <h3>把大象装进冰箱的正确姿势</h3>\n    <Step current={1} direction=\"vertical\" type=\"dot\" animation={false}>\n      <Step.Item title=\"步骤1\" content=\"打开冰箱门\" />\n      <Step.Item title=\"步骤2\" content=\"把大象塞进去\" />\n      <Step.Item title=\"步骤3\" content=\"关上冰箱门\" />\n    </Step>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n箭头形不支持垂直模式。\n对于点型和圆圈型的 Step 组件而言，可以通过设置 `direction` 属性设置其展示方向为垂直。\n\n"
      },
      {
        "title": "禁用步骤项",
        "order": "3",
        "jsx": "import { Step } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Step current={1} type=\"arrow\">\n      <Step.Item title=\"步骤1\" />\n      <Step.Item title=\"步骤2\" />\n      <Step.Item title=\"步骤3\" disabled />\n      <Step.Item title=\"步骤4\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} type=\"dot\">\n      <Step.Item title=\"步骤1\" />\n      <Step.Item title=\"步骤2\" />\n      <Step.Item title=\"步骤3\" disabled />\n      <Step.Item title=\"步骤4\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} type=\"circle\">\n      <Step.Item title=\"步骤1\" />\n      <Step.Item title=\"步骤2\" />\n      <Step.Item title=\"步骤3\" disabled />\n      <Step.Item title=\"步骤4\" />\n    </Step>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过在 `Step.Item` 上设置 `disabled` 属性来禁用某个步骤。\n\n"
      },
      {
        "title": "图标和百分比",
        "order": "2",
        "jsx": "import { Step, Icon } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Step current={1} animation={false} type=\"dot\">\n      <Step.Item title=\"步骤1\" content=\"打开冰箱门\" icon=\"box\" />\n      <Step.Item title=\"步骤2\" content=\"把大象塞进去\" percent={40} />\n      <Step.Item title=\"步骤3\" content=\"关闭冰箱门\" icon=\"smile\" />\n    </Step>\n    <br />\n    <br />\n    <Step current={1} animation={false}>\n      <Step.Item title=\"步骤1\" content=\"打开冰箱门\" icon=\"box\" />\n      <Step.Item title=\"步骤2\" content=\"把大象塞进去\" percent={40} />\n      <Step.Item title=\"步骤3\" content=\"关闭冰箱门\" icon=\"smile\" />\n    </Step>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以在点型和圆形步骤条中使用图标，圆形步骤条还只是使用百分比。\n\n"
      },
      {
        "title": "只读模式",
        "order": "5",
        "jsx": "import { Step, Button } from \"@icedesign/base\";\n\nconst { Item: StepItem } = Step;\nconst { Group: ButtonGroup } = Button;\n\nclass Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentStep: 3\n    };\n  }\n  next() {\n    const s = this.state.currentStep + 1;\n\n    this.setState({\n      currentStep: s > 6 ? 6 : s\n    });\n  }\n  prev() {\n    const s = this.state.currentStep - 1;\n\n    this.setState({\n      currentStep: s < 0 ? 0 : s\n    });\n  }\n  onClick(currentStep) {\n    console.log(currentStep);\n\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n  render() {\n    const { currentStep } = this.state;\n\n    return (\n      <div>\n        <Step current={currentStep} readOnly>\n          <StepItem title=\"步骤1\" onClick={this.onClick.bind(this)} />\n          <StepItem title=\"步骤2\" onClick={this.onClick.bind(this)} />\n          <StepItem title=\"步骤3\" onClick={this.onClick.bind(this)} />\n          <StepItem title=\"步骤4\" onClick={this.onClick.bind(this)} />\n          <StepItem title=\"步骤5\" onClick={this.onClick.bind(this)} />\n          <StepItem title=\"步骤6\" onClick={this.onClick.bind(this)} />\n        </Step>\n        <br />\n        <br />\n        <ButtonGroup>\n          <Button\n            onClick={this.prev.bind(this)}\n            type=\"primary\"\n            disabled={currentStep === 0}\n          >\n            上一步\n          </Button>\n          <Button\n            onClick={this.next.bind(this)}\n            type=\"primary\"\n            disabled={currentStep === 6}\n          >\n            下一步\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Component />, mountNode);\n\n",
        "css": "",
        "body": "\n只读模式，不可触发回调。\n\n"
      }
    ]
  },
  {
    "name": "Switch",
    "category": "Components",
    "title": "开关组件",
    "type": "表单",
    "importStatement": "import { Switch } from '@icedesign/base';",
    "body": "\n\n## 开发指南\n\n开关组件\n\n### 何时使用\n\n开/关切换器切换单个设置选项的状态。开关控制器中的选项，以及它所在的状态，应该用伴随的内联标签显示清楚。开关选择器具有和单选按钮一样的视觉属性。使用文本“开”和“关”滑动切换已经过时了。使用这里显示的开关选择器代替。\n\n### 使用注意\n\n-   对于checkChildren和unCheckedChildren的自定义要考虑文字大小，因为switch的宽度有限，默认一个汉字大小。如果设置成多个字或者英文要注意宽度控制。\n-   size 等于small时不支持文案和Icon设置\n\n",
    "propsSchema": {
      "name": "Switch",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内敛样式",
          "docblock": "自定义内敛样式",
          "properties": []
        },
        "checkedChildren": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "打开时的内容",
          "docblock": "打开时的内容"
        },
        "unCheckedChildren": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "关闭时的内容",
          "docblock": "关闭时的内容"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "开关状态改变是触发此事件",
          "defaultValue": {
            "value": "() => {\n}",
            "computed": false
          },
          "docblock": "开关状态改变是触发此事件\n@param {Boolean} checked 是否为打开状态\n@param {Event} e DOM事件对象",
          "params": [
            {
              "name": "checked",
              "description": "是否为打开状态",
              "type": {
                "name": "Boolean"
              }
            },
            {
              "name": "e",
              "description": "DOM事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "开关当前的值(针对受控组件)",
          "docblock": "开关当前的值(针对受控组件)"
        },
        "defaultChecked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "开关默认值 (针对非受控组件)",
          "docblock": "开关默认值 (针对非受控组件)"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "表示开关被禁用",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "表示开关被禁用"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'medium'",
                "computed": false,
                "description": "正常大小"
              },
              {
                "value": "'small'",
                "computed": false,
                "description": "缩小版大小"
              }
            ]
          },
          "required": false,
          "description": "switch的尺寸",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "switch的尺寸\n@enumdesc 正常大小, 缩小版大小",
          "value": [
            {
              "value": "'medium'",
              "computed": false,
              "description": "正常大小"
            },
            {
              "value": "'small'",
              "computed": false,
              "description": "缩小版大小"
            }
          ]
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "鼠标点击事件",
          "docblock": "鼠标点击事件\n@param {Event} e DOM事件对象",
          "params": [
            {
              "name": "e",
              "description": "DOM事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "onKeyDown": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "键盘按键事件",
          "docblock": "键盘按键事件\n@param {Event} e DOM事件对象",
          "params": [
            {
              "name": "e",
              "description": "DOM事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内敛样式 | Object | -\ncheckedChildren | 打开时的内容 | any | -\nunCheckedChildren | 关闭时的内容 | any | -\nonChange | 开关状态改变是触发此事件<br><br>**签名**:<br>Function(checked: Boolean, e: Event) => void<br>**参数**:<br>*checked*: {Boolean} 是否为打开状态<br>*e*: {Event} DOM事件对象 | Function | () =&gt; { }\nchecked | 开关当前的值(针对受控组件) | Boolean | -\ndefaultChecked | 开关默认值 (针对非受控组件) | Boolean | -\ndisabled | 表示开关被禁用 | Boolean | false\nsize | switch的尺寸<br><br>**可选值**:<br>'medium'(正常大小)<br>'small'(缩小版大小) | Enum | 'medium'\nonClick | 鼠标点击事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>*e*: {Event} DOM事件对象 | Function | -\nonKeyDown | 键盘按键事件<br><br>**签名**:<br>Function(e: Event) => void<br>**参数**:<br>*e*: {Event} DOM事件对象 | Function | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "简单",
        "order": "0",
        "jsx": "import { Switch } from \"@icedesign/base\";\n\nfunction onChange(checked) {\n  console.log(\"switch to \" + checked);\n}\n\nReactDOM.render(\n  <div>\n    <Switch checkedChildren=\"开\" onChange={onChange} unCheckedChildren=\"关\" />\n    <br />\n    <Switch defaultChecked={false} onChange={onChange} size=\"small\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n最简单的用法,size可设置大小。\n\n"
      },
      {
        "title": "受控开关",
        "order": "2",
        "jsx": "import { Switch } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: false\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"line\">\n          开关的值: {this.state.checked ? \"true\" : \"false\"}\n        </div>\n        <div className=\"line\">\n          <Switch checked={this.state.checked} onChange={this.onChange} />\n          <Switch\n            checked={this.state.checked}\n            onChange={this.onChange}\n            disabled\n          />\n        </div>\n      </div>\n    );\n  }\n\n  onChange(checked) {\n    this.setState({ checked });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".line {\n  margin-bottom: 10px;\n}\n.next-switch {\n  margin-right: 20px;\n}\n",
        "body": "\n对于受控开关, 每一次 React 数据渲染时, 都会使用传入的值来更新开关, 开关本身是不能更新自己的状态的.\n受控开关, 是指组件的值由上层组件决定, 如果开关定义了 `value` 属性, 就表示此开关是受控开关.\n\n"
      },
      {
        "title": "不可用",
        "order": "2",
        "jsx": "import { Button, Icon, Switch } from \"@icedesign/base\";\n\nclass Test extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: true\n    };\n  }\n\n  toggle() {\n    this.setState(\n      Object.assign({}, this.state, {\n        disabled: !this.state.disabled\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <Switch\n          checkedChildren={<Icon type=\"select\" size=\"small\" />}\n          unCheckedChildren={<Icon type=\"close\" size=\"small\" />}\n          disabled={this.state.disabled}\n        />\n        <Switch\n          checkedChildren=\"开\"\n          unCheckedChildren=\"关\"\n          disabled={this.state.disabled}\n        />\n        <br />\n        <br />\n        <Button type=\"primary\" onClick={this.toggle.bind(this)}>\n          Toggle disabled\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Test />, mountNode);\n\n",
        "css": "",
        "body": "\nSwitch 失效状态。\n\n"
      }
    ]
  },
  {
    "name": "Tab",
    "category": "Components",
    "title": "选项卡",
    "type": "导航",
    "importStatement": "import { Tab } from '@icedesign/base';",
    "body": "\n\n## Guide\n\nTAB 让用户可以在不同子任务、视图、模式之间切换，它具有全局导航的作用，\n是全局功能的主要展示和切换区域，一个TAB标记一个核心功能，TAB之间可以快速点击切换。\n该窗口包含2个以上的选项卡，所有选项卡可以排列在一行中，即使该用户界面被本地化后也是如此。\n提供平级的区域将大块内容进行收纳和展现，保持界面整洁。\n\n### 何时使用\n\nFusion 提供了三级选项卡，分别用于不同的场景。\n\n-   普通选项卡，引领整页面的内容，起导航的作用。\n-   文本型选项卡。\n-   包裹型选项卡，在页面结构中，只是局部展示，需要和其他内容结合出现。\n-   胶囊型选项卡。\n\n### 关于动效\n\n如果您不想开启动效，可以通过设置 `animation` 属性值为 `false` 来关闭。\n\n### 注意事项\n\n对于 `0.x` 版本的 Tab 组件而言，在实现上使用了 `key` 作为内部标识字段，如果用户使用了 React 官方提供的类似于 `React.Children.toArray` 等子元素遍历方法时，会导致原始的 `key` 值被修改，这一行为会导致部分逻辑出错（判断当前激活的 TabPane）。为了保证兼容性，我们将会在 `1.x` 版本进行变更。\n如果你需要用到 `React.Children.toArray` 方法，可以使用 `@alife/next-util` 中提供的 `children.toArray` 方法。\n\n",
    "propsSchema": {
      "name": "Tab",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "activeKey": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "被激活的选项卡的 key（受控）",
          "docblock": "被激活的选项卡的 key（受控）"
        },
        "defaultActiveKey": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "初始化时被激活的选项卡的 key（非受控）",
          "docblock": "初始化时被激活的选项卡的 key（非受控）"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'bar'",
                "computed": false
              },
              {
                "value": "'wrapped'",
                "computed": false
              },
              {
                "value": "'text'",
                "computed": false
              },
              {
                "value": "'capsule'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "类型",
          "defaultValue": {
            "value": "'bar'",
            "computed": false
          },
          "docblock": "类型"
        },
        "animation": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否开启动效",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否开启动效"
        },
        "resDirection": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'horizontal'",
                "computed": false
              },
              {
                "value": "'vertical'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "多余项的展现方向",
          "defaultValue": {
            "value": "'horizontal'",
            "computed": false
          },
          "docblock": "多余项的展现方向"
        },
        "tabPosition": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "导航选项卡的位置，只适用于包裹型（wrapped）选项卡",
          "defaultValue": {
            "value": "'top'",
            "computed": false
          },
          "docblock": "导航选项卡的位置，只适用于包裹型（wrapped）选项卡"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "尺寸",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "尺寸"
        },
        "closeable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否可关闭选项卡，只支持 `bar` 和 `wrapped` 两种类型",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否可关闭选项卡，只支持 `bar` 和 `wrapped` 两种类型"
        },
        "triggerType": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'hover'",
                "computed": false
              },
              {
                "value": "'click'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "触发选项卡的方式",
          "defaultValue": {
            "value": "'click'",
            "computed": false
          },
          "docblock": "触发选项卡的方式"
        },
        "lazyLoad": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否提前渲染好所有 TabPane 的内容",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否提前渲染好所有 TabPane 的内容"
        },
        "navStyle": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "导航条的附加样式",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "docblock": "导航条的附加样式",
          "properties": []
        },
        "contentStyle": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "内容区的附加样式",
          "defaultValue": {
            "value": "{}",
            "computed": false
          },
          "docblock": "内容区的附加样式",
          "properties": []
        },
        "tabBarExtraContent": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "导航栏附加内容",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "导航栏附加内容"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "选项卡发生切换时的事件回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "选项卡发生切换时的事件回调\n@param {String} key 改变后的 key",
          "params": [
            {
              "name": "key",
              "description": "改变后的 key",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "选项卡被关闭时的事件回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "选项卡被关闭时的事件回调\n@param {String} key   关闭的选项卡的 key\n@param {Object} event Event 对象",
          "params": [
            {
              "name": "key",
              "description": "关闭的选项卡的 key",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "event",
              "description": "Event 对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "TabPane",
          "props": {
            "tab": {
              "type": {
                "name": "any"
              },
              "required": false,
              "description": "选项卡标题",
              "docblock": "选项卡标题"
            },
            "closeable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "单个选项卡是否可关闭",
              "defaultValue": {
                "value": "true",
                "computed": false
              },
              "docblock": "单个选项卡是否可关闭"
            },
            "tabStyle": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "单个选项卡的补充样式",
              "docblock": "单个选项卡的补充样式",
              "properties": []
            },
            "tabClassName": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "单个选项卡的附加样式类",
              "docblock": "单个选项卡的附加样式类"
            },
            "onClick": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "点击单个选项卡时触发的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "点击单个选项卡时触发的回调\n@param {String} key 选项卡的 key",
              "params": [
                {
                  "name": "key",
                  "description": "选项卡的 key",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": null
            },
            "onMouseEnter": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "鼠标进入时触发的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "鼠标进入时触发的回调\n@param {String} key 选项卡的 key",
              "params": [
                {
                  "name": "key",
                  "description": "选项卡的 key",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": null
            },
            "onMouseLeave": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "鼠标离开时出发的回调",
              "defaultValue": {
                "value": "() => {}",
                "computed": false
              },
              "docblock": "鼠标离开时出发的回调\n@param {String} key 选项卡的 key",
              "params": [
                {
                  "name": "key",
                  "description": "选项卡的 key",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "returns": null
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nactiveKey | 被激活的选项卡的 key（受控） | Number/String | -\ndefaultActiveKey | 初始化时被激活的选项卡的 key（非受控） | Number/String | -\ntype | 类型<br><br>**可选值**:<br>'bar', 'wrapped', 'text', 'capsule' | Enum | 'bar'\nanimation | 是否开启动效 | Boolean | true\nresDirection | 多余项的展现方向<br><br>**可选值**:<br>'horizontal', 'vertical' | Enum | 'horizontal'\ntabPosition | 导航选项卡的位置，只适用于包裹型（wrapped）选项卡<br><br>**可选值**:<br>'top', 'bottom', 'left', 'right' | Enum | 'top'\nsize | 尺寸<br><br>**可选值**:<br>'small', 'medium' | Enum | 'medium'\ncloseable | 是否可关闭选项卡，只支持 `bar` 和 `wrapped` 两种类型 | Boolean | false\ntriggerType | 触发选项卡的方式<br><br>**可选值**:<br>'hover', 'click' | Enum | 'click'\nlazyLoad | 是否提前渲染好所有 TabPane 的内容 | Boolean | true\nnavStyle | 导航条的附加样式 | Object | {}\ncontentStyle | 内容区的附加样式 | Object | {}\ntabBarExtraContent | 导航栏附加内容 | ReactNode | null\nonChange | 选项卡发生切换时的事件回调<br><br>**签名**:<br>Function(key: String) => void<br>**参数**:<br>*key*: {String} 改变后的 key | Function | () =&gt; {}\nonClose | 选项卡被关闭时的事件回调<br><br>**签名**:<br>Function(key: String, event: Object) => void<br>**参数**:<br>*key*: {String} 关闭的选项卡的 key<br>*event*: {Object} Event 对象 | Function | () =&gt; {}\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "TabPane",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\ntab | 选项卡标题 | any | -\ncloseable | 单个选项卡是否可关闭 | Boolean | true\ntabStyle | 单个选项卡的补充样式 | Object | -\ntabClassName | 单个选项卡的附加样式类 | String | -\nonClick | 点击单个选项卡时触发的回调<br><br>**签名**:<br>Function(key: String) => void<br>**参数**:<br>*key*: {String} 选项卡的 key | Function | () =&gt; {}\nonMouseEnter | 鼠标进入时触发的回调<br><br>**签名**:<br>Function(key: String) => void<br>**参数**:<br>*key*: {String} 选项卡的 key | Function | () =&gt; {}\nonMouseLeave | 鼠标离开时出发的回调<br><br>**签名**:<br>Function(key: String) => void<br>**参数**:<br>*key*: {String} 选项卡的 key | Function | () =&gt; {}\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "简单用法",
        "order": "0",
        "jsx": "import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst tabs = [\n  { tab: \"首页\", key: \"home\", content: \"这里是首页内容\" },\n  { tab: \"文档\", key: \"doc\", content: \"这里是文档内容\" },\n  { tab: \"API\", key: \"api\", content: \"这里是 API 内容\" }\n];\n\nfunction handleChange(key) {\n  console.log(\"change\", key);\n}\n\nfunction handleClick(key) {\n  console.log(\"click\", key);\n}\n\nReactDOM.render(\n  <Tab onChange={handleChange}>\n    {tabs.map(item => (\n      <TabPane key={item.key} tab={item.tab} onClick={handleClick}>\n        {item.content}\n      </TabPane>\n    ))}\n  </Tab>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n请务必给每个 TabPane 传入一个 `key` 值作为每个 TabPane 的唯一标识字段。\n创建一个基本的选项卡，其默认类型为`bar`，并默认选中第一项。\n\n"
      },
      {
        "title": "可关闭选项卡",
        "order": "6",
        "jsx": "import { Tab, Button, Icon } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst panes = [\n  { tab: \"邮件\", key: 1, closeable: false },\n  { tab: \"消息通知\", key: 2 },\n  { tab: \"设置\", key: 3 },\n  { tab: \"未读邮件\", key: 4 }\n];\n\nclass CloseableTab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      panes: panes,\n      activeKey: panes[0].key\n    };\n  }\n\n  /*eslint-disable eqeqeq */\n  remove(targetKey) {\n    let activeKey = this.state.activeKey;\n    let lastIndex;\n    this.state.panes.forEach((item, i) => {\n      if (item.key == targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = this.state.panes.filter(pane => pane.key != targetKey);\n    if (lastIndex >= 0 && activeKey == targetKey) {\n      activeKey = panes[lastIndex].key;\n    }\n    this.setState({ panes, activeKey });\n  }\n\n  onClose(targetKey) {\n    this.remove(targetKey);\n  }\n\n  onChange(activeKey) {\n    this.setState({ activeKey });\n  }\n\n  addTabpane() {\n    this.setState(prevState => {\n      const { panes } = prevState;\n      panes.push({ tab: \"new tab\", key: Math.random() });\n      return { panes };\n    });\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Button onClick={::this.addTabpane}>\n          <Icon type=\"add\" /> 新建选项卡\n        </Button>\n\n        <Tab\n          type=\"wrapped\"\n          activeKey={state.activeKey}\n          closeable\n          onChange={::this.onChange}\n          onClose={::this.onClose}\n          className=\"custom-tab\"\n        >\n          {state.panes.map(item => (\n            <TabPane tab={item.tab} key={item.key} closeable={item.closeable}>\n              {item.tab}的内容区域\n            </TabPane>\n          ))}\n        </Tab>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<CloseableTab />, mountNode);\n\n",
        "css": ".custom-tab {\n    margin-top: 14px;\n}\n",
        "body": "\n此外用户还可以单独在单个 `TabPane` 上设置是否可关闭的属性。\n可关闭选项卡，可以通过控制 `closable` 属性设置选项卡是否可关闭。处于视觉上的考虑，目前该属性只支持包裹型选项卡（`wrapped`）和普通选项卡（`bar`）。\n\n"
      },
      {
        "title": "自定义样式",
        "order": "9",
        "jsx": "import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst panes = [\n  {\n    tab: \"未处理任务\",\n    key: 0\n  },\n  {\n    tab: \"已处理任务\",\n    key: 1\n  },\n  {\n    tab: \"未处理消息\",\n    key: 2\n  },\n  {\n    tab: \"已处理消息\",\n    key: 3\n  },\n  {\n    tab: \"过期消息\",\n    key: 4\n  }\n];\n\nconst detachedContentStyle = {\n  borderLeft: 0,\n  borderRight: 0,\n  borderBottom: 0\n};\n\nReactDOM.render(\n  <div className=\"fusion-demo\">\n    <div className=\"demo-item-title\">\n      通过 contentStyle 属性移除内容区默认边框\n    </div>\n    <Tab type=\"wrapped\" contentStyle={detachedContentStyle}>\n      {panes.map(pane => (\n        <TabPane tab={pane.tab} key={pane.key}>\n          {pane.tab}\n        </TabPane>\n      ))}\n    </Tab>\n\n    <div className=\"demo-item-title\">\n      搭配使用 contentStyle, navStyle, tabClassName, tabStyle 等自定义样式属性\n    </div>\n    <Tab\n      type=\"wrapped\"\n      contentStyle={{ padding: 0 }}\n      navStyle={{ background: \"#FFF0E6\" }}\n    >\n      {panes.map(pane => {\n        return (\n          <TabPane\n            tab={pane.tab}\n            key={pane.key}\n            className=\"custom-content\"\n            tabStyle={{ background: \"#FFF\" }}\n            tabClassName=\"custom-tabs-tab\"\n          >\n            {pane.tab}\n          </TabPane>\n        );\n      })}\n    </Tab>\n\n    <div className=\"demo-item-title\">利用 tabClassName 实现等宽导航</div>\n    <Tab type=\"capsule\">\n      {panes.map(pane => (\n        <TabPane tab={pane.tab} key={pane.key} tabClassName=\"justify-tabs-tab\">\n          {pane.tab}\n        </TabPane>\n      ))}\n    </Tab>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".fusion-demo .demo-item-title {\n    font-size: 16px;\n    background: #eee;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n    text-align: center;\n}\n\n.custom-content {\n    color: #333;\n    padding: 15px;\n}\n\n.custom-tabs-tab {\n    margin-right: -1px !important;\n}\n\n.justify-tabs-tab {\n    width: 140px;\n    text-align: center;\n}\n",
        "body": "\n此外，某些场合下，用户可能需要在某些特定的 `tab` 上添加样式，为此可以在 `TabPane` 上使用 `tabClassName` 和 `tabStyle` 来控制。\n如果需要定制导航条的样式，可以通过 `navStyle` 属性进行设置。\n如果需要定制内容区的样式，可以通过 `contentStyle` 属性进行设置。\nTab 提供了丰富的属性让用户自定义组件的默认样式。\n\n"
      },
      {
        "title": "自定义选项卡",
        "order": "10",
        "jsx": "import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst complexTab1 = (\n  <div className=\"custom-tab-wrapper\">\n    <p className=\"tab-title\">e-Checking</p>\n    <p className=\"tab-desc\">Transaction fee: US $15</p>\n  </div>\n);\n\nconst complexTab2 = (\n  <div className=\"custom-tab-wrapper\">\n    <p className=\"tab-title\">Bank Card</p>\n    <p className=\"tab-desc\">Transaction fee: US $26</p>\n  </div>\n);\n\nconst panes = [\n  {\n    tab: complexTab1,\n    key: 0\n  },\n  {\n    tab: complexTab2,\n    key: 1\n  }\n];\n\nfunction callback(key) {\n  console.log(key);\n}\n\nReactDOM.render(\n  <Tab onChange={callback} type=\"wrapped\">\n    {panes.map(pane => (\n      <TabPane tab={pane.tab} key={pane.key} tabStyle={{ height: \"60px\" }}>\n        {pane.tab}\n      </TabPane>\n    ))}\n  </Tab>,\n  mountNode\n);\n\n",
        "css": ".custom-tab-wrapper {\n    line-height: 16px;\n}\n\n.tab-title {\n    margin: 10px 0 0 0;\n    font-size: 16px;\n}\n.tab-desc {\n    margin: 10px 0 0 0;\n    font-size: 12px;\n}\n",
        "body": "\n除了使用简单文本作为选项卡的标题，用户还可以传入自定义组件作为标题。\n\n"
      },
      {
        "title": "禁用",
        "order": "8",
        "jsx": "import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nReactDOM.render(\n  <Tab>\n    <TabPane tab=\"选项卡一\" key=\"1\">\n      选项卡一\n    </TabPane>\n    <TabPane tab=\"选项卡二\" disabled key=\"2\">\n      选项卡二\n    </TabPane>\n    <TabPane tab=\"选项卡三\" key=\"3\">\n      选项卡三\n    </TabPane>\n  </Tab>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以通过 `disabled` 属性禁用某一个选型卡。\n\n"
      },
      {
        "title": "可编辑的 Tab",
        "order": "12",
        "jsx": "import { Tab, Input } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nclass EditableTabPane extends React.Component {\n  static propTypes = {\n    defaultTitle: React.PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabTitle: props.defaultTitle,\n      editable: false\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.defaultTitle !== this.state.tabTitle) {\n      this.setState({\n        tabTitle: nextProps.defaultTitle\n      });\n    }\n  }\n\n  onKeyDown(e) {\n    const { keyCode } = e;\n    // 由于 Tab 会监听键盘的 keyUp, keyDown, keyLeft, keyRight 四个按键用于支持键盘导航\n    // 如果上层需要使用到键盘事件，需要在这里停止事件冒泡\n    if (keyCode > 36 && keyCode < 41) {\n      e.stopPropagation();\n    }\n  }\n\n  onBlur(e) {\n    this.setState({\n      editable: false,\n      tabTitle: e.target.value\n    });\n  }\n\n  onDblClick() {\n    this.setState({\n      editable: true\n    });\n  }\n\n  render() {\n    const { tabTitle, editable } = this.state;\n    if (editable) {\n      return (\n        <Input\n          defaultValue={tabTitle}\n          onKeyDown={this.onKeyDown.bind(this)}\n          onBlur={this.onBlur.bind(this)}\n        />\n      );\n    }\n    return <span onDoubleClick={this.onDblClick.bind(this)}>{tabTitle}</span>;\n  }\n}\n\nReactDOM.render(\n  <Tab defaultActiveKey=\"1\">\n    <TabPane tab={<EditableTabPane defaultTitle=\"选项卡一\" />} key=\"1\">\n      选项卡一\n    </TabPane>\n    <TabPane tab=\"选项卡二\" key=\"2\">\n      选项卡二\n    </TabPane>\n  </Tab>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n此时用户只要传入自定义组件给 TabPane 即可，Tab 可以将底层事件对象传递给用户的自定义组件。\nTab 允许开发者在上层进行自由的行为控制，例如用户可以基于 Tab 开发一个标题部分双击可编辑的 Tab ，\n\n"
      },
      {
        "title": "附加额外内容",
        "order": "11",
        "jsx": "import { Tab, Button } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nfunction handleChange(key) {\n  console.log(key);\n}\n\nfunction handleClick() {\n  console.log(\"hello world\");\n}\n\nconst extraContent = (\n  <Button type=\"primary\" onClick={handleClick}>\n    Hello world\n  </Button>\n);\n\nReactDOM.render(\n  <div className=\"fusion-demo\">\n    <div className=\"demo-item-title\">水平方向加 tabBarExtraContent</div>\n    <Tab\n      type=\"wrapped\"\n      onChange={handleChange}\n      tabBarExtraContent={extraContent}\n    >\n      <TabPane tab=\"选项卡一\" key=\"1\">\n        选项卡一内容\n      </TabPane>\n      <TabPane tab=\"选项卡二\" key=\"2\">\n        选项卡二内容\n      </TabPane>\n      <TabPane tab=\"选项卡三\" key=\"3\">\n        选项卡三内容\n      </TabPane>\n    </Tab>\n\n    <div className=\"demo-item-title\">垂直方向加 tabBarExtraContent</div>\n    <Tab\n      type=\"wrapped\"\n      tabPosition=\"left\"\n      onChange={handleChange}\n      tabBarExtraContent={extraContent}\n    >\n      <TabPane tab=\"选项卡一\" key=\"1\">\n        选项卡一内容\n      </TabPane>\n      <TabPane tab=\"选项卡二\" key=\"2\">\n        选项卡二内容\n      </TabPane>\n      <TabPane tab=\"选项卡三\" key=\"3\">\n        选项卡三内容\n      </TabPane>\n    </Tab>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".fusion-demo .demo-item-title {\n    font-size: 16px;\n    background: #eee;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n    text-align: center;\n}\n",
        "body": "\n可以通过设置 `tabBarExtraContent` 为 Tab 组件附加额外的内容，确保只在有限选项卡的情况下才使用附加内容。\n\n"
      },
      {
        "title": "关闭 Lazyload",
        "order": "3",
        "jsx": "import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst tabs = [\n  { tab: \"首页\", key: 0, content: \"这里是首页内容\" },\n  { tab: \"文档\", key: 1, content: \"这里是文档内容\" },\n  { tab: \"API\", key: 2, content: \"这里是 API 内容\" }\n];\n\nReactDOM.render(\n  <Tab lazyLoad={false}>\n    {tabs.map(item => (\n      <TabPane key={item.key} tab={item.tab}>\n        {item.content}\n      </TabPane>\n    ))}\n  </Tab>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n如果您需要在某些时候提前渲染好所有的 Content 内容，可以使用在 Tab 上关闭 `lazyLoad` 属性。\n默认情况 Tab 不会提前渲染好所有的内容，而是根据 Tab 的激活情况依次渲染。\n\n"
      },
      {
        "title": "选项卡嵌套",
        "order": "14",
        "jsx": "import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nReactDOM.render(\n  <Tab onChange={callback} type=\"wrapped\">\n    <TabPane tab=\"选项卡一\" key=\"1\">\n      <Tab type=\"wrapped\">\n        <TabPane tab=\"1-1\" key=\"11\">\n          1-1\n        </TabPane>\n        <TabPane tab=\"1-2\" key=\"12\">\n          1-2\n        </TabPane>\n        <TabPane tab=\"1-3\" key=\"13\">\n          1-3\n        </TabPane>\n      </Tab>\n    </TabPane>\n    <TabPane tab=\"选项卡二\" key=\"2\">\n      <Tab type=\"bar\">\n        <TabPane tab=\"2-1\" key=\"21\">\n          2-1\n        </TabPane>\n        <TabPane tab=\"2-2\" key=\"22\">\n          2-2\n        </TabPane>\n        <TabPane tab=\"3-3\" key=\"23\">\n          2-3\n        </TabPane>\n      </Tab>\n    </TabPane>\n    <TabPane tab=\"选项卡三\" key=\"3\">\n      <Tab type=\"capsule\">\n        <TabPane tab=\"3-1\" key=\"31\">\n          3-1\n        </TabPane>\n        <TabPane tab=\"3-2\" key=\"32\">\n          3-2\n        </TabPane>\n        <TabPane tab=\"3-3\" key=\"33\">\n          3-3\n        </TabPane>\n      </Tab>\n    </TabPane>\n    <TabPane tab=\"选项卡三\" key=\"4\">\n      <Tab type=\"text\">\n        <TabPane tab=\"4-1\" key=\"41\">\n          4-1\n        </TabPane>\n        <TabPane tab=\"4-2\" key=\"42\">\n          4-2\n        </TabPane>\n        <TabPane tab=\"4-3\" key=\"43\">\n          4-3\n        </TabPane>\n      </Tab>\n    </TabPane>\n  </Tab>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n可以将不同类型的选项卡进行嵌套\n\n"
      },
      {
        "title": "位置",
        "order": "4",
        "jsx": "import { Select, Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst contentStyle = {\n  background: \"#FFF\"\n};\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabPosition: \"bottom\"\n    };\n  }\n\n  changeTabPosition(value) {\n    this.setState({ tabPosition: value });\n  }\n\n  render() {\n    return (\n      <div>\n        <Select\n          value={this.state.tabPosition}\n          onChange={::this.changeTabPosition}\n          className=\"tab-select-demo\"\n        >\n          <div value=\"top\">top</div>\n          <div value=\"bottom\">bottom</div>\n          <div value=\"left\">left</div>\n          <div value=\"right\">right</div>\n        </Select>\n\n        <Tab\n          tabPosition={this.state.tabPosition}\n          type=\"wrapped\"\n          contentStyle={contentStyle}\n        >\n          <TabPane tab=\"选项卡一\" key=\"1\">\n            选项卡一内容\n          </TabPane>\n          <TabPane tab=\"选项卡二\" key=\"2\">\n            选项卡二内容\n          </TabPane>\n          <TabPane tab=\"选项卡三\" key=\"3\">\n            选项卡三内容\n          </TabPane>\n        </Tab>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".tab-select-demo {\n    margin-bottom: 20px;\n}\n",
        "body": "\n内容区的高度将会被自动附加一个 `min-height` 值，该值为导航条的高度。\n需要注意的是，当 `tabPosition=\"left|right\"` 时，并且用户没有通过 `contentStyle` 属性自定义内容区的最小高度时，\n有四个位置，`tabPosition=\"left|right|top|bottom\"`。\n对于包裹型（`type` 值为 `wrapped`）选项卡，支持通过 `tabPosition` 来指定选项卡标签的位置。\n\n"
      },
      {
        "title": "尺寸",
        "order": "2",
        "jsx": "import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst tabs = [\n  { tab: \"首页\", key: \"home\", content: \"这里是首页内容\" },\n  { tab: \"文档\", key: \"doc\", content: \"这里是文档内容\" },\n  { tab: \"API\", key: \"api\", content: \"这里是 API 内容\" }\n];\n\nReactDOM.render(\n  <div>\n    <Tab size=\"small\">\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab}>\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n    <br />\n    <Tab size=\"small\" type=\"wrapped\">\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab}>\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n    <br />\n    <Tab size=\"small\" type=\"text\">\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab}>\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n    <br />\n    <Tab size=\"small\" type=\"capsule\">\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab}>\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n`small`尺寸的选项卡组件可以用在弹出框等较狭窄的容器内。\n组件尺寸，可以通过`size`属性设置，提供`medium`(默认)和`small`两种尺寸，\n\n"
      },
      {
        "title": "自适应方向",
        "order": "5",
        "jsx": "import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst tabs = [\n  { tab: \"选项卡一\", key: 1 },\n  { tab: \"选项卡二\", key: 2 },\n  { tab: \"选项卡三\", key: 3 },\n  { tab: \"选项卡四\", key: 4 },\n  { tab: \"选项卡五\", key: 5 },\n  { tab: \"选项卡六\", key: 6 },\n  { tab: \"选项卡七\", key: 7 },\n  { tab: \"选项卡八\", key: 8 },\n  { tab: \"选项卡九\", key: 9 }\n];\n\nfunction onClick(key) {\n  console.log(key);\n}\n\nReactDOM.render(\n  <div className=\"fusion-demo\" style={{ width: \"510px\" }}>\n    <div className=\"demo-item-title\">默认使用左右活动</div>\n    <Tab defaultActiveKey={1}>\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab} onClick={onClick}>\n          {item.tab}的内容。这里可以容纳更多内容。\n        </TabPane>\n      ))}\n    </Tab>\n\n    <div className=\"demo-item-title\">\n      resDirection = \"vertical\" 时使用下拉框容纳多余元素\n    </div>\n    <Tab defaultActiveKey={1} resDirection=\"vertical\">\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab} onClick={onClick}>\n          {item.tab}的内容。这里可以容纳更多内容。\n        </TabPane>\n      ))}\n    </Tab>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".fusion-demo .demo-item-title {\n    font-size: 16px;\n    background: #eee;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n    text-align: center;\n}\n\n",
        "body": "\n用户可以通过 `resDirection` 属性进行控制该行为。\n当容器无法容纳所有的选项卡标签时，Tab 组件支持选项卡左右滑动选择，或者下拉选择。\n\n"
      },
      {
        "title": "在 Grid 中使用 Tab",
        "order": "13",
        "jsx": "import { Tab, Grid } from \"@icedesign/base\";\n\nconst { TabPane } = Tab;\nconst { Row, Col } = Grid;\n\nconst tabs = (function(length) {\n  const arr = [];\n  for (let i = 1; i < length; i++) {\n    arr.push({ tab: `tab ${i}`, key: i, content: `tab ${i} 的内容` });\n  }\n  return arr;\n})(15);\n\nfunction handleChange(key) {\n  console.log(\"change\", key);\n}\n\nfunction handleClick(key) {\n  console.log(\"click\", key);\n}\n\nReactDOM.render(\n  <div className=\"custom-wrapper\">\n    <Row className=\"custom-row\">\n      <Col fixedSpan=\"12\" className=\"custom-col-sidebar\">\n        Sidebar\n      </Col>\n      <Col className=\"custom-col-content\">\n        <Tab onChange={handleChange}>\n          {tabs.map(item => (\n            <TabPane key={item.key} tab={item.tab} onClick={handleClick}>\n              {item.content}\n            </TabPane>\n          ))}\n        </Tab>\n      </Col>\n    </Row>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".custom-row {\n    border: 1px solid #ccc;\n}\n\n.custom-col-sidebar {\n    border-right: 1px solid #ccc;\n    height: 130px;\n    line-height: 130px;\n    text-align: center;\n}\n\n.custom-col-content {\n    overflow: hidden;\n}\n",
        "body": "\n值得注意的是，当使用 Grid 组件进行外层的布局时，由于 Gird 默认使用的是 `flex` 进行布局。因此，如果 Tab 组件拥有过多的选项卡时，会导致内层元素撑起整个 `flex` 容器。此时，需要给容器添加自定义样式 `overflow: hidden`。\n\n"
      },
      {
        "title": "触发类型",
        "order": "7",
        "jsx": "import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nconst tabs = [\n  { tab: \"首页\", key: 0, content: \"这里是首页内容\" },\n  { tab: \"文档\", key: 1, content: \"这里是文档内容\" },\n  { tab: \"API\", key: 2, content: \"这里是 API 内容\" }\n];\n\nfunction onChange(key) {\n  console.log(\"change\", key);\n}\n\nfunction handleClick(key) {\n  console.log(\"click\", key);\n}\n\nfunction onMouseEnter(key, e) {\n  console.log(\"enter\", e.target, key);\n}\n\nfunction onMouseLeave(key, e) {\n  console.log(\"leave\", e.target, key);\n}\n\nReactDOM.render(\n  <div className=\"fusion-demo\">\n    <div className=\"demo-item-title\">triggerType = click</div>\n    <Tab triggerType=\"click\" onChange={onChange}>\n      {tabs.map(item => (\n        <TabPane key={item.key} tab={item.tab} onClick={handleClick}>\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n    <div className=\"demo-item-title\">triggerType = hover</div>\n    <Tab triggerType=\"hover\" onChange={onChange}>\n      {tabs.map(item => (\n        <TabPane\n          key={item.key}\n          tab={item.tab}\n          onClick={handleClick}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          {item.content}\n        </TabPane>\n      ))}\n    </Tab>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".fusion-demo .demo-item-title {\n    font-size: 16px;\n    background: #eee;\n    color: #333;\n    padding: 8px;\n    margin: 14px 0;\n    text-align: center;\n}\n\n",
        "body": "\nTab 支持 `click` 切换和 `hover` 切换两种触发类型，默认为 `click` 触发，您可以使用 `triggerType` 属性修改默认的触发类型。\n\n"
      },
      {
        "title": "类型",
        "order": "1",
        "jsx": "import { Tab } from \"@icedesign/base\";\n\nconst TabPane = Tab.TabPane;\n\nfunction onChange(key) {\n  console.log(key);\n}\n\nconst tabs = [\n  { tab: \"首页\", key: \"home\", content: \"这里是首页内容\" },\n  { tab: \"文档\", key: \"doc\", content: \"这里是文档内容\" },\n  { tab: \"API\", key: \"api\", content: \"这里是 API 内容\" },\n  { tab: \"仓库\", key: \"repo\", content: \"这里是仓库内容\" }\n];\n\nconst types = [\"bar\", \"wrapped\", \"text\", \"capsule\"];\n\nReactDOM.render(\n  <div className=\"fusion-demo\">\n    {types.map(type => (\n      <div key={type} className=\"fusion-demo-item\">\n        <Tab type={type} onChange={onChange}>\n          {tabs.map(tab => (\n            <TabPane tab={tab.tab} key={tab.key}>\n              {tab.content}\n            </TabPane>\n          ))}\n        </Tab>\n      </div>\n    ))}\n  </div>,\n  mountNode\n);\n\n",
        "css": ".fusion-demo-item {\n    margin: 14px 0;\n}\n",
        "body": "\n`capsule` 胶囊型选项卡\n`text` 文本型选项卡<br />\n`wrapped`  包裹型选项卡<br />\n`bar` 普通选项卡（如不指定`type`属性，则默认使用`bar`型选项卡）<br />\n根据使用场景及触发控件的类型，可以通过 `type` 属性配置选项卡的类型，主要包括：\n\n"
      }
    ]
  },
  {
    "name": "Table",
    "category": "Components",
    "title": "表格",
    "type": "展示",
    "importStatement": "import { Table } from '@icedesign/base';",
    "body": "\n\n## Guide\n\nTable负责将数据呈现为高度可定制和具备可访问性的HTML表格，其核心功能为将结构化的数据使用表格的方式展现，\n然后可以使用各种参数来向表格中加入一些特性，比如排序，过滤，滚动，锁列等。\n\n### 基本使用\n\n基本的Table包含行和列，使用Table.Column来定义列的信息，使用传入的dataSource属性数据来创建行。\n\n下面的代码将会创建一行两列的数据表。\n\n```js\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(<Table dataSource={dataSource}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Time\" dataIndex=\"time\"/>\n</Table>, mountNode)\n```\n\n### 列配置\n\nTable.Column提供了非常多的配置属性用于自定义列，最常见的就是使用`cell`自定义单元格的渲染逻辑. 其他的配置选项可以参考下面的Table.Column的API\n\n下面的代码会让cell根据值渲染不同的视图\n\n```js\nconst dataSource = [{id: 1, time: '2016'}];\nconst renderTime = value => {\n    if (value == '2016') {\n        return '今年';\n    }\n    return value;\n}\nReactDOM.render(<Table dataSource={dataSource}>\n    <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    <Table.Column title=\"Time\" dataIndex=\"time\" cell={renderTime}/>\n</Table>, mountNode)\n```\n\n### 多表头\n\n使用Table.ColumnGroup包裹Table.Column来创建有多个表头的表格\n\n```js\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(<Table dataSource={dataSource}>\n    <Table.ColumnGroup>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    </Table.ColumnGroup>\n    <Table.ColumnGroup>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n    </Table.ColumnGroup>\n</Table>, mountNode)\n```\n\n### 已知问题\n\n#### GroupList不支持在Hover状态和选中状态下显示背景色\n\n#### 无法完全支持在锁列的情况下合并单元格\n\n无法支持在锁列的区域和非锁列的区域内合并单元格\n\n#### 性能问题\n\n由于React的机制问题，在做与Table无关的更新的时候，可能会导致diff计算花费大量的时间，\n\n在你确认只有props和state才能影响Table渲染的情况下，可以设置`optimization`为`true`来开启, 原理就是通过\n\n`shouldComponentUpdate`的生命周期来对比props和state的变更，开启了该选项后可能导致下面的副作用。\n\n```js\nclass App extends React.Component{\n    state = {\n        extra: 'abc'\n    }\n    cellRender = (value) => {\n        return value + this.state.extra;\n    }\n    render(){\n        return <Table dataSource={[{id: 1}]}>\n            <Table.Column cell={this.cellRender} dataIndex=\"id\"/>\n        </Table>\n    }\n    componentDidMount(){\n        setTimeout(() => {\n            this.setState({\n                extra: 'bcd'\n            })\n        },1000)\n    }\n}\n```\n\n上面的代码在`componentDidMount`之后的`setState`虽然更新了`extra`, 但是并不会触发Table的重新渲染。\n\n解决方式如下:\n\n1.  将cellRender访问的state通过props的方式传入。\n\n    ```js\n    class App extends React.Component{\n        state = {\n            extra: 'abc'\n        }\n        cellRender = (value, index, record, context) => {\n            return value + context.props.extra;\n        }\n        render(){\n            return <Table dataSource={[{id: 1}]} extra={this.state.extra}>\n                <Table.Column cell={this.cellRender} dataIndex=\"id\"/>\n            </Table>\n        }\n        componentDidMount(){\n            setTimeout(() => {\n                this.setState({\n                    extra: 'bcd'\n                })\n            },1000)\n        }\n    }\n    ```\n\n2.  通过设置`optimization`为`false`来关闭Table的`shouldComponentUpdate`配置。\n\n    ```js\n    class App extends React.Component{\n        state = {\n            extra: 'abc'\n        }\n        cellRender = (value, index, record, context) => {\n            return value + this.state.extra;\n        }\n        render(){\n            return <Table dataSource={[{id: 1}]} optimization={false}>\n                <Table.Column cell={this.cellRender} dataIndex=\"id\"/>\n            </Table>\n        }\n        componentDidMount(){\n            setTimeout(() => {\n                this.setState({\n                    extra: 'bcd'\n                })\n            },1000)\n        }\n    }\n    ```\n\n",
    "propsSchema": {
      "name": "Table",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "dataSource": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "表格展示的数据源",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "表格展示的数据源"
        },
        "rowSelection": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "是否启用选择模式",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "是否启用选择模式\n@property {Function} getProps `Function(record)=>Object` 获取selection的默认属性\n@property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。\n@property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调\n@property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调\n@property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值\n@property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`",
          "properties": [
            {
              "name": "getProps",
              "description": "`Function(record)=>Object` 获取selection的默认属性",
              "type": {
                "name": "Function"
              }
            },
            {
              "name": "onChange",
              "description": "`Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。",
              "type": {
                "name": "Function"
              }
            },
            {
              "name": "onSelect",
              "description": "`Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调",
              "type": {
                "name": "Function"
              }
            },
            {
              "name": "onSelectAll",
              "description": "`Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调",
              "type": {
                "name": "Function"
              }
            },
            {
              "name": "selectedRowKeys",
              "description": "设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "mode",
              "description": "选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`",
              "type": {
                "name": "String"
              }
            }
          ]
        },
        "onRowClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "点击表格每一行触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "点击表格每一行触发的事件\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@param {Event} e DOM事件对象",
          "params": [
            {
              "name": "record",
              "description": "该行所对应的数据",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "index",
              "description": "该行所对应的序列",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "e",
              "description": "DOM事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "onRowMouseEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "悬浮在表格每一行的时候触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "悬浮在表格每一行的时候触发的事件\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@param {Event} e DOM事件对象",
          "params": [
            {
              "name": "record",
              "description": "该行所对应的数据",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "index",
              "description": "该行所对应的序列",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "e",
              "description": "DOM事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "onRowMouseLeave": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "离开表格每一行的时候触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "离开表格每一行的时候触发的事件\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@param {Event} e DOM事件对象",
          "params": [
            {
              "name": "record",
              "description": "该行所对应的数据",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "index",
              "description": "该行所对应的序列",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "e",
              "description": "DOM事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "onSort": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "点击列排序触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "点击列排序触发的事件\n@param {String} dataIndex 指定的排序的字段\n@param {String} order 排序对应的顺序, 有`desc`和`asc`两种",
          "params": [
            {
              "name": "dataIndex",
              "description": "指定的排序的字段",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "order",
              "description": "排序对应的顺序, 有`desc`和`asc`两种",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "onFilter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "点击过滤确认按钮触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "点击过滤确认按钮触发的事件\n@param {Object} filterParams 过滤的字段信息",
          "params": [
            {
              "name": "filterParams",
              "description": "过滤的字段信息",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "getRowClassName": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "设置每一行的样式名称",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "设置每一行的样式名称\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@returns {String} 需要设置的样式名称",
          "params": [
            {
              "name": "record",
              "description": "该行所对应的数据",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "index",
              "description": "该行所对应的序列",
              "type": {
                "name": "Number"
              }
            }
          ],
          "returns": {
            "description": "需要设置的样式名称",
            "type": {
              "name": "String"
            }
          }
        },
        "getRowProps": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@returns {Object} 需要设置的行属性",
          "params": [
            {
              "name": "record",
              "description": "该行所对应的数据",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "index",
              "description": "该行所对应的序列",
              "type": {
                "name": "Number"
              }
            }
          ],
          "returns": {
            "description": "需要设置的行属性",
            "type": {
              "name": "Object"
            }
          }
        },
        "getCellProps": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "设置单元格的属性，通过该属性可以进行合并单元格",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "设置单元格的属性，通过该属性可以进行合并单元格\n@param {Number} rowIndex 该列所对应的序列\n@param {Number} colIndex 该行所对应的序列\n@param {Object} record 该行对应的记录\n@returns {Object} 返回td元素的所支持的属性对象",
          "params": [
            {
              "name": "rowIndex",
              "description": "该列所对应的序列",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "colIndex",
              "description": "该行所对应的序列",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "record",
              "description": "该行对应的记录",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": {
            "description": "返回td元素的所支持的属性对象",
            "type": {
              "name": "Object"
            }
          }
        },
        "fixedHeader": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条"
        },
        "maxBodyHeight": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条",
          "defaultValue": {
            "value": "200",
            "computed": false
          },
          "docblock": "最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条"
        },
        "hasBorder": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "表格是否具有边框",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "表格是否具有边框"
        },
        "hasHeader": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "表格是否具有头部",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "表格是否具有头部"
        },
        "isZebra": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "表格是否是斑马线",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "表格是否是斑马线"
        },
        "isLoading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "表格是否在加载中",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "表格是否在加载中"
        },
        "primaryKey": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中",
          "defaultValue": {
            "value": "'id'",
            "computed": false
          },
          "docblock": "dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中"
        },
        "filterParams": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}\n示例:\n假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中\n`<Table filterParams={{id: {selectedKeys: ['one']}}}/>`",
          "docblock": "当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}\n示例:\n假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中\n`<Table filterParams={{id: {selectedKeys: ['one']}}}/>`",
          "properties": []
        },
        "sort": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'}",
          "docblock": "当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'}",
          "properties": []
        },
        "expandedRowRender": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "额外渲染行的渲染函数",
          "docblock": "额外渲染行的渲染函数\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@returns {Element}",
          "params": [
            {
              "name": "record",
              "description": "该行所对应的数据",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "index",
              "description": "该行所对应的序列",
              "type": {
                "name": "Number"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "Element"
            }
          }
        },
        "expandedRowIndent": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "额外渲染行的缩进",
          "defaultValue": {
            "value": "[1, 0]",
            "computed": false
          },
          "docblock": "额外渲染行的缩进"
        },
        "expandedRowKeys": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "默认情况下展开的额外渲染行, 传入此属性为受控状态",
          "docblock": "默认情况下展开的额外渲染行, 传入此属性为受控状态"
        },
        "hasExpandedRowCtrl": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示点击展开额外渲染行的+号按钮",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示点击展开额外渲染行的+号按钮"
        },
        "getExpandedColProps": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "设置额外渲染行的属性",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "设置额外渲染行的属性",
          "params": [],
          "returns": null
        },
        "onExpandedChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "在额外渲染行展开或者收齐的时候触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "在额外渲染行展开或者收齐的时候触发的事件\n@param {Array} expandedRowKeys 展开的渲染行的key\n@param {String} currentRowKey 当前点击的渲染行的key\n@param {Boolean} expanded 当前点击是展开还是收起\n@param {Object} currentRecord 当前点击额外渲染行的记录",
          "params": [
            {
              "name": "expandedRowKeys",
              "description": "展开的渲染行的key",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "currentRowKey",
              "description": "当前点击的渲染行的key",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "expanded",
              "description": "当前点击是展开还是收起",
              "type": {
                "name": "Boolean"
              }
            },
            {
              "name": "currentRecord",
              "description": "当前点击额外渲染行的记录",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "onExpandedRowClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "点击额外渲染行触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "点击额外渲染行触发的事件\n@param {Object} record 该行所对应的数据\n@param {Number} index 该行所对应的序列\n@param {Event} e DOM事件对象",
          "params": [
            {
              "name": "record",
              "description": "该行所对应的数据",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "index",
              "description": "该行所对应的序列",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "e",
              "description": "DOM事件对象",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": null
        },
        "indentSize": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "在tree模式下的缩进尺寸， 仅在isTree为true时候有效",
          "defaultValue": {
            "value": "12",
            "computed": false
          },
          "docblock": "在tree模式下的缩进尺寸， 仅在isTree为true时候有效"
        },
        "openRowKeys": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作",
          "docblock": "默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作"
        },
        "onRowOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "点击tree展开或者关闭的时候触发的事件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "点击tree展开或者关闭的时候触发的事件\n@param {Array} openRowKeys tree模式下展开的key\n@param {String} currentRowKey 当前点击行的key\n@param {Boolean} opened 当前点击是展开还是收起\n@param {Object} currentRecord 当前点击行的记录",
          "params": [
            {
              "name": "openRowKeys",
              "description": "tree模式下展开的key",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "currentRowKey",
              "description": "当前点击行的key",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "opened",
              "description": "当前点击是展开还是收起",
              "type": {
                "name": "Boolean"
              }
            },
            {
              "name": "currentRecord",
              "description": "当前点击行的记录",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "isTree": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table"
        },
        "optimization": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否开启性能优化，开启了性能优化后，会自动加入`shouldComponentUpdate`",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否开启性能优化，开启了性能优化后，会自动加入`shouldComponentUpdate`"
        },
        "locale": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义国际化文案对象",
          "docblock": "自定义国际化文案对象\n@property {String} empty 没有数据时的提示文案\n@property {String} ok 过滤器中确认按钮文案\n@property {String} reset 过滤器中重置按钮文案",
          "properties": [
            {
              "name": "empty",
              "description": "没有数据时的提示文案",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "ok",
              "description": "过滤器中确认按钮文案",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "reset",
              "description": "过滤器中重置按钮文案",
              "type": {
                "name": "String"
              }
            }
          ]
        },
        "language": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'en-us'",
                "computed": false
              },
              {
                "value": "'zh-cn'",
                "computed": false
              },
              {
                "value": "'zh-tw'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "自定义国际化语言",
          "docblock": "自定义国际化语言"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "ColumnGroup",
          "props": {
            "title": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "element"
                  },
                  {
                    "name": "node"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": false,
              "description": "表头显示的内容",
              "defaultValue": {
                "value": "'column-group'",
                "computed": false
              },
              "docblock": "表头显示的内容"
            }
          },
          "methods": []
        },
        {
          "name": "Column",
          "props": {
            "dataIndex": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "指定列对应的字段，支持`a.b`形式的快速取值",
              "docblock": "指定列对应的字段，支持`a.b`形式的快速取值"
            },
            "cell": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "element"
                  },
                  {
                    "name": "node"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": false,
              "description": "行渲染的逻辑\nFunction(value, index, record) => Element",
              "defaultValue": {
                "value": "(value) => value",
                "computed": false
              },
              "docblock": "行渲染的逻辑\nFunction(value, index, record) => Element"
            },
            "title": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "element"
                  },
                  {
                    "name": "node"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": false,
              "description": "表头显示的内容",
              "defaultValue": {
                "value": "'column'",
                "computed": false
              },
              "docblock": "表头显示的内容"
            },
            "sortable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否支持排序",
              "docblock": "是否支持排序"
            },
            "width": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "在锁列的情况下需要配置的宽度",
              "docblock": "在锁列的情况下需要配置的宽度"
            },
            "align": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'left'",
                    "computed": false
                  },
                  {
                    "value": "'center'",
                    "computed": false
                  },
                  {
                    "value": "'right'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "单元格的对齐方式",
              "docblock": "单元格的对齐方式"
            },
            "filters": {
              "type": {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "label": {
                      "name": "string",
                      "required": false
                    },
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "node"
                        },
                        {
                          "name": "string"
                        }
                      ],
                      "required": false
                    }
                  }
                }
              },
              "required": false,
              "description": "生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`",
              "docblock": "生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`"
            },
            "filterMode": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'single'",
                    "computed": false
                  },
                  {
                    "value": "'multiple'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "过滤的模式是单选还是多选",
              "defaultValue": {
                "value": "'multiple'",
                "computed": false
              },
              "docblock": "过滤的模式是单选还是多选"
            },
            "lock": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "bool"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              "required": false,
              "description": "是否支持锁列,可选值为`left`,`right`, `true`",
              "docblock": "是否支持锁列,可选值为`left`,`right`, `true`"
            }
          },
          "methods": []
        },
        {
          "name": "GroupHeader",
          "props": {
            "cell": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "element"
                  },
                  {
                    "name": "node"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": false,
              "description": "行渲染的逻辑",
              "defaultValue": {
                "value": "() => ''",
                "computed": false
              },
              "docblock": "行渲染的逻辑"
            },
            "hasSelection": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否在GroupHeader上面渲染selection",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否在GroupHeader上面渲染selection"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ndataSource | 表格展示的数据源 | Array | []\nrowSelection | 是否启用选择模式<br><br>**属性**:<br>*getProps*: {Function} `Function(record)=>Object` 获取selection的默认属性<br>*onChange*: {Function} `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。<br>*onSelect*: {Function} `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调<br>*onSelectAll*: {Function} `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调<br>*selectedRowKeys*: {Array} 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值<br>*mode*: {String} 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple` | Object | null\nonRowClick | 点击表格每一行触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>*e*: {Event} DOM事件对象 | Function | () =&gt; {}\nonRowMouseEnter | 悬浮在表格每一行的时候触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>*e*: {Event} DOM事件对象 | Function | () =&gt; {}\nonRowMouseLeave | 离开表格每一行的时候触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>*e*: {Event} DOM事件对象 | Function | () =&gt; {}\nonSort | 点击列排序触发的事件<br><br>**签名**:<br>Function(dataIndex: String, order: String) => void<br>**参数**:<br>*dataIndex*: {String} 指定的排序的字段<br>*order*: {String} 排序对应的顺序, 有`desc`和`asc`两种 | Function | () =&gt; {}\nonFilter | 点击过滤确认按钮触发的事件<br><br>**签名**:<br>Function(filterParams: Object) => void<br>**参数**:<br>*filterParams*: {Object} 过滤的字段信息 | Function | () =&gt; {}\ngetRowClassName | 设置每一行的样式名称<br><br>**签名**:<br>Function(record: Object, index: Number) => String<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>**返回值**:<br>{String} 需要设置的样式名称<br> | Function | () =&gt; {}\ngetRowProps | 设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。<br><br>**签名**:<br>Function(record: Object, index: Number) => Object<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>**返回值**:<br>{Object} 需要设置的行属性<br> | Function | () =&gt; {}\ngetCellProps | 设置单元格的属性，通过该属性可以进行合并单元格<br><br>**签名**:<br>Function(rowIndex: Number, colIndex: Number, record: Object) => Object<br>**参数**:<br>*rowIndex*: {Number} 该列所对应的序列<br>*colIndex*: {Number} 该行所对应的序列<br>*record*: {Object} 该行对应的记录<br>**返回值**:<br>{Object} 返回td元素的所支持的属性对象<br> | Function | () =&gt; {}\nfixedHeader | 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条 | Boolean | false\nmaxBodyHeight | 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条 | Number | 200\nhasBorder | 表格是否具有边框 | Boolean | true\nhasHeader | 表格是否具有头部 | Boolean | true\nisZebra | 表格是否是斑马线 | Boolean | false\nisLoading | 表格是否在加载中 | Boolean | false\nprimaryKey | dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中 | String | 'id'\nfilterParams | 当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}<br>示例:<br>假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中<br>`<Table filterParams={{id: {selectedKeys: ['one']}}}/>` | Object | -\nsort | 当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'} | Object | -\nexpandedRowRender | 额外渲染行的渲染函数<br><br>**签名**:<br>Function(record: Object, index: Number) => Element<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>**返回值**:<br>{Element} null<br> | Function | -\nexpandedRowIndent | 额外渲染行的缩进 | Array | [1, 0]\nexpandedRowKeys | 默认情况下展开的额外渲染行, 传入此属性为受控状态 | Array | -\nhasExpandedRowCtrl | 是否显示点击展开额外渲染行的+号按钮 | Boolean | true\ngetExpandedColProps | 设置额外渲染行的属性<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonExpandedChange | 在额外渲染行展开或者收齐的时候触发的事件<br><br>**签名**:<br>Function(expandedRowKeys: Array, currentRowKey: String, expanded: Boolean, currentRecord: Object) => void<br>**参数**:<br>*expandedRowKeys*: {Array} 展开的渲染行的key<br>*currentRowKey*: {String} 当前点击的渲染行的key<br>*expanded*: {Boolean} 当前点击是展开还是收起<br>*currentRecord*: {Object} 当前点击额外渲染行的记录 | Function | () =&gt; {}\nonExpandedRowClick | 点击额外渲染行触发的事件<br><br>**签名**:<br>Function(record: Object, index: Number, e: Event) => void<br>**参数**:<br>*record*: {Object} 该行所对应的数据<br>*index*: {Number} 该行所对应的序列<br>*e*: {Event} DOM事件对象 | Function | () =&gt; {}\nindentSize | 在tree模式下的缩进尺寸， 仅在isTree为true时候有效 | Number | 12\nopenRowKeys | 默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作 | Array | -\nonRowOpen | 点击tree展开或者关闭的时候触发的事件<br><br>**签名**:<br>Function(openRowKeys: Array, currentRowKey: String, opened: Boolean, currentRecord: Object) => void<br>**参数**:<br>*openRowKeys*: {Array} tree模式下展开的key<br>*currentRowKey*: {String} 当前点击行的key<br>*opened*: {Boolean} 当前点击是展开还是收起<br>*currentRecord*: {Object} 当前点击行的记录 | Function | () =&gt; {}\nisTree | 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table | Boolean | false\noptimization | 是否开启性能优化，开启了性能优化后，会自动加入`shouldComponentUpdate` | Boolean | false\nlocale | 自定义国际化文案对象<br><br>**属性**:<br>*empty*: {String} 没有数据时的提示文案<br>*ok*: {String} 过滤器中确认按钮文案<br>*reset*: {String} 过滤器中重置按钮文案 | Object | -\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'en-us', 'zh-cn', 'zh-tw' | Enum | -\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "ColumnGroup",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\ntitle | 表头显示的内容 | ReactElement/ReactNode/Function | 'column-group'\n",
        "methodREADME": []
      },
      {
        "name": "Column",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\ndataIndex | 指定列对应的字段，支持`a.b`形式的快速取值 | String | -\ncell | 行渲染的逻辑<br>Function(value, index, record) => Element | ReactElement/ReactNode/Function | (value) =&gt; value\ntitle | 表头显示的内容 | ReactElement/ReactNode/Function | 'column'\nsortable | 是否支持排序 | Boolean | -\nwidth | 在锁列的情况下需要配置的宽度 | ReactNode | -\nalign | 单元格的对齐方式<br><br>**可选值**:<br>'left', 'center', 'right' | Enum | -\nfilters | 生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]` | Array&lt;Object&gt; | -\nfilterMode | 过滤的模式是单选还是多选<br><br>**可选值**:<br>'single', 'multiple' | Enum | 'multiple'\nlock | 是否支持锁列,可选值为`left`,`right`, `true` | Boolean/String | -\n",
        "methodREADME": []
      },
      {
        "name": "GroupHeader",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\ncell | 行渲染的逻辑 | ReactElement/ReactNode/Function | () =&gt; ''\nhasSelection | 是否在GroupHeader上面渲染selection | Boolean | false\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "简单",
        "order": "0",
        "jsx": "import { Table } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nReactDOM.render(\n  <Table dataSource={getData()} onRowClick={onRowClick}>\n    <Table.Column title=\"Id\" dataIndex=\"id\" />\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\" />\n    <Table.Column cell={render} width=\"40%\" />\n  </Table>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n简单的表格渲染\n\n"
      },
      {
        "title": "选择可控",
        "order": "1",
        "jsx": "import { Table, Button } from \"@icedesign/base\";\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowSelection: {\n        onChange: this.onChange.bind(this),\n        onSelect: function(selected, record, records) {\n          console.log(\"onSelect\", selected, record, records);\n        },\n        onSelectAll: function(selected, records) {\n          console.log(\"onSelectAll\", selected, records);\n        },\n        selectedRowKeys: [],\n        getProps: record => {\n          return {\n            disabled: record.id === 100306660941\n          };\n        }\n      },\n      dataSource: getData(0, 5)\n    };\n  }\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.clear.bind(this)}>Clear Selection</Button>&nbsp;\n          <Button onClick={this.changeMode.bind(this)}>\n            Switch single mode\n          </Button>&nbsp;\n          <Button onClick={this.toggleLoading.bind(this)}>\n            Toggle loading\n          </Button>&nbsp;\n          <Button onClick={this.modifyDataSource.bind(this)}>\n            Modify dataSource\n          </Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          isLoading={this.state.isLoading}\n          rowSelection={this.state.rowSelection}\n        >\n          <Table.Column title=\"Id\" dataIndex=\"id\" />\n          <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </div>\n    );\n  }\n  onChange(ids, records) {\n    let { rowSelection } = this.state;\n    rowSelection.selectedRowKeys = ids;\n    console.log(\"onChange\", ids, records);\n    this.setState({ rowSelection });\n  }\n  clear() {\n    let { rowSelection } = this.state;\n    rowSelection.selectedRowKeys = [];\n    this.setState({ rowSelection });\n  }\n  toggleLoading() {\n    this.setState({ isLoading: !this.state.isLoading });\n  }\n  changeMode() {\n    let { rowSelection } = this.state;\n    rowSelection.mode = \"single\";\n    this.setState({ rowSelection });\n  }\n  modifyDataSource() {\n    this.setState({\n      dataSource: getData(9, 14)\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n演示全选和单选受控的功能\n\n"
      },
      {
        "title": "行列合并",
        "order": "0",
        "jsx": "import { Table } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  },\n  getCellProps = (rowIndex, colIndex) => {\n    if (rowIndex === 2 && colIndex === 1) {\n      return {\n        colSpan: 2,\n        rowSpan: 3\n      };\n    }\n    if (rowIndex === 1 && colIndex === 2) {\n      return {\n        colSpan: 2,\n        rowSpan: 1\n      };\n    }\n  };\n\nReactDOM.render(\n  <Table\n    dataSource={getData()}\n    onRowClick={onRowClick}\n    getCellProps={getCellProps}\n  >\n    <Table.Column title=\"Id\" dataIndex=\"id\" />\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\" />\n    <Table.Column cell={render} width={200} />\n  </Table>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n通过getCellProps进行列合并。\n\n"
      },
      {
        "title": "定制列",
        "order": "9",
        "jsx": "import { Table, Button, Dialog, Checkbox } from \"@icedesign/base\";\n\nconst { Group } = Checkbox;\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  cols = [\n    {\n      title: \"id\",\n      dataIndex: \"id\"\n    },\n    {\n      title: \"Title\",\n      dataIndex: \"title\"\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"time\"\n    }\n  ];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: getData(),\n      cols: cols\n    };\n  }\n  openDialog = () => {\n    Dialog.alert({\n      needWrapper: false,\n      content: this.renderControlContent(),\n      title: \"选择需要显示的列\",\n      onOk: () => {\n        this.setState({\n          cols: this.changedCols\n        });\n      }\n    });\n  };\n\n  renderControlContent() {\n    const groupSource = cols.map(col => {\n        return {\n          label: col.title,\n          value: col.dataIndex\n        };\n      }),\n      defaultValue = this.state.cols.map(col => col.dataIndex);\n    return (\n      <Group\n        dataSource={groupSource}\n        onChange={this.onChange}\n        defaultValue={defaultValue}\n      />\n    );\n  }\n\n  onChange = value => {\n    this.changedCols = cols.filter(col => value.indexOf(col.dataIndex) > -1);\n  };\n\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.openDialog}> 选择显示的列数 </Button>\n        </p>\n        <Table dataSource={this.state.dataSource}>{this.renderCols()}</Table>\n      </div>\n    );\n  }\n  renderCols() {\n    const { cols } = this.state;\n    return cols.map(col => {\n      return (\n        <Table.Column\n          title={col.title}\n          dataIndex={col.dataIndex}\n          key={col.dataIndex}\n        />\n      );\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n定制显示的表格列数\n\n"
      },
      {
        "title": "增删改查",
        "order": "0",
        "jsx": "import { Table, Button } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  };\n\nclass App extends React.Component {\n  state = {\n    dataSource: getData()\n  };\n  render() {\n    const renderOper = (value, index, record) => {\n      return (\n        <a onClick={this.onRemove.bind(this, record.id)}>Remove({record.id})</a>\n      );\n    };\n    return (\n      <div>\n        <p>\n          <Button onClick={this.onAdd}>Add Item</Button>\n        </p>\n        <Table dataSource={this.state.dataSource} onRowClick={onRowClick}>\n          <Table.Column title=\"Id\" dataIndex=\"id\" />\n          <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={renderOper} width=\"20%\" />\n        </Table>\n      </div>\n    );\n  }\n  onAdd = () => {\n    // 注意在没有通过shouldComponentUpdate判断的时候可以使用此写法\n    // 否则注意数组和对象的引用关系\n    const { dataSource } = this.state;\n    dataSource.push({\n      title: {\n        name: \"Quotation for 1PCS Nano controller compatible\"\n      },\n      id: Date.now(),\n      time: 2000\n    });\n    this.setState({\n      dataSource\n    });\n  };\n\n  onRemove = id => {\n    const { dataSource } = this.state;\n    let index = -1;\n    dataSource.forEach((item, i) => {\n      if (item.id === id) {\n        index = i;\n      }\n    });\n    if (index !== -1) {\n      dataSource.splice(index, 1);\n      this.setState({\n        dataSource\n      });\n    }\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n演示对表格的增删改查\n\n"
      },
      {
        "title": "可展开-复杂",
        "order": "4",
        "jsx": "import { Table, Button } from \"@icedesign/base\";\n\n/*eslint-disable react/prop-types, react/no-multi-comp*/\nclass ExpandedApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: this.props.dataSource\n    };\n  }\n  render() {\n    const style = {\n      borderTop: \"1px solid #eee\",\n      textAlign: \"center\",\n      background: \"#f8f8f8\",\n      lineHeight: \"28px\"\n    };\n    return (\n      <div style={{ marginTop: 10 }}>\n        <Table\n          dataSource={this.state.dataSource}\n          hasHeader={false}\n          hasBorder={false}\n        >\n          <Table.Column title=\"Title\" dataIndex=\"title\" />\n          <Table.Column title=\"Time\" dataIndex=\"time\" width={200} />\n        </Table>\n        <p style={style} onClick={this.load.bind(this)}>\n          Load more data.\n        </p>\n      </div>\n    );\n  }\n  load() {\n    let { dataSource } = this.state;\n    dataSource = dataSource.concat(dataSource);\n    this.setState({ dataSource });\n  }\n}\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n        id: 100306660940 + i,\n        time: 2000 + i,\n        children: [\n          {\n            title: `Sub title for Quotation ${3 + i}`,\n            time: 2000 + i\n          },\n          {\n            title: `Sub2 title for Quotation ${3 + i}`,\n            time: 2000 + i\n          }\n        ]\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  },\n  expandedRowRender = record => {\n    let children = record.children;\n    return <ExpandedApp dataSource={children} />;\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: getData(),\n      hasBorder: false,\n      expandedRowKeys: []\n    };\n  }\n  render() {\n    const renderTitle = (value, index, record) => {\n      return (\n        <div>\n          {value}\n          <span onClick={this.toggleExpand.bind(this, record)}>+++++</span>\n        </div>\n      );\n    };\n    return (\n      <span>\n        <p>\n          {\" \"}\n          <Button onClick={this.disabledExpandedCol.bind(this)}>\n            {\" \"}\n            设置第4行禁用{\" \"}\n          </Button>{\" \"}\n          &nbsp;\n          <Button onClick={this.toggleCol.bind(this)}> 隐藏+号 </Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          isZebra={this.state.isZebra}\n          hasBorder={this.state.hasBorder}\n          onSort={this.onSort.bind(this)}\n          expandedRowRender={expandedRowRender}\n          expandedRowIndent={[1, 1]}\n          expandedRowKeys={this.state.expandedRowKeys}\n          getExpandedColProps={this.state.getExpandedColProps}\n          hasExpandedRowCtrl={this.state.hasExpandedRowCtrl}\n          onExpandedChange={this.onExpandedChange.bind(this)}\n        >\n          <Table.Column title=\"Id\" dataIndex=\"id\" sortable />\n          <Table.Column title=\"Title\" dataIndex=\"title\" cell={renderTitle} />\n          <Table.Column title=\"Time\" dataIndex=\"time\" width={200} />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </span>\n    );\n  }\n  onSort(dataIndex, order) {\n    let dataSource = this.state.dataSource.sort(function(a, b) {\n      let result = a[dataIndex] - b[dataIndex];\n      return order === \"asc\" ? (result > 0 ? 1 : -1) : result > 0 ? -1 : 1;\n    });\n    this.setState({\n      dataSource\n    });\n  }\n  disabledExpandedCol() {\n    this.setState({\n      getExpandedColProps: (record, index) => {\n        if (index === 3) {\n          return {\n            disabled: true\n          };\n        }\n      }\n    });\n  }\n  toggleCol() {\n    this.setState({\n      hasExpandedRowCtrl: false\n    });\n  }\n  onExpandedChange(expandedRowKeys) {\n    this.setState({ expandedRowKeys });\n  }\n  toggleExpand(record) {\n    let key = record.id,\n      { expandedRowKeys } = this.state,\n      index = expandedRowKeys.indexOf(key);\n    if (index > -1) {\n      expandedRowKeys.splice(index, 1);\n    } else {\n      expandedRowKeys.push(key);\n    }\n    this.setState({\n      expandedRowKeys: expandedRowKeys\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n可以通过 `expandedRowRender` 额外渲染行，但是会包含复杂的组件\n\n"
      },
      {
        "title": "可展开",
        "order": "3",
        "jsx": "import { Table, Button } from \"@icedesign/base\";\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: getData()\n    };\n  }\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.toggleIndent.bind(this)}>\n            {\" \"}\n            设置缩进为左二右一{\" \"}\n          </Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          isZebra={this.state.isZebra}\n          hasBorder={false}\n          onSort={this.onSort.bind(this)}\n          expandedRowRender={record => record.title}\n          onRowClick={() => console.log(\"rowClick\")}\n          onExpandedRowClick={() => console.log(\"expandedRowClick\")}\n          expandedRowIndent={this.state.expandedRowIndent}\n        >\n          <Table.Column title=\"Id\" dataIndex=\"id\" sortable />\n          <Table.Column title=\"Title\" dataIndex=\"title\" />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </div>\n    );\n  }\n  onSort(dataIndex, order) {\n    let dataSource = this.state.dataSource.sort(function(a, b) {\n      let result = a[dataIndex] - b[dataIndex];\n      return order === \"asc\" ? (result > 0 ? 1 : -1) : result > 0 ? -1 : 1;\n    });\n    this.setState({\n      dataSource\n    });\n  }\n  toggleIndent() {\n    this.setState({\n      expandedRowIndent: [2, 1]\n    });\n  }\n  toggleCol() {\n    this.setState({\n      hasExpandedRowCtrl: false\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n可以通过 `expandedRowRender` 额外渲染行\n\n"
      },
      {
        "title": "排序与过滤",
        "order": "2",
        "jsx": "import { Table, Button } from \"@icedesign/base\";\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: getData(),\n      filterMode: \"multiple\"\n    };\n  }\n  render() {\n    let filters = [\n      {\n        label: \"Nano 包含3\",\n        value: 3\n      },\n      {\n        label: \"Nano 包含2\",\n        value: 2,\n        children: [\n          {\n            label: \"Nano 包含12\",\n            value: 22\n          },\n          {\n            label: \"Nano 包含23\",\n            value: 23\n          }\n        ]\n      },\n      {\n        label: \"其他\",\n        children: [\n          {\n            label: \"Nano 包含4\",\n            value: 4\n          },\n          {\n            label: \"Nano 包含5\",\n            value: 5\n          }\n        ]\n      }\n    ];\n    return (\n      <div>\n        <p>\n          <Button onClick={this.changeMode.bind(this)}>\n            切换过滤为单选模式\n          </Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          onSort={this.onSort.bind(this)}\n          onFilter={this.onFilter.bind(this)}\n        >\n          <Table.Column title=\"Id\" dataIndex=\"id\" sortable />\n          <Table.Column\n            title=\"Title\"\n            dataIndex=\"title\"\n            filters={filters}\n            filterMode={this.state.filterMode}\n          />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </div>\n    );\n  }\n  onSort(dataIndex, order) {\n    let dataSource = this.state.dataSource.sort(function(a, b) {\n      let result = a[dataIndex] - b[dataIndex];\n      return order === \"asc\" ? (result > 0 ? 1 : -1) : result > 0 ? -1 : 1;\n    });\n    this.setState({\n      dataSource\n    });\n  }\n  onFilter(filterParams) {\n    let dataSource = getData();\n\n    for (let key in filterParams) {\n      let selectedKeys = filterParams[key].selectedKeys;\n      if (selectedKeys.length) {\n        dataSource = dataSource.filter(record => {\n          return selectedKeys.some(value => {\n            return record[key].indexOf(value) > -1;\n          });\n        });\n      }\n    }\n    this.setState({ dataSource });\n  }\n  changeMode() {\n    this.setState({\n      filterMode: \"single\"\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n示例演示了排序和过滤的特性\n\n"
      },
      {
        "title": "固定表头",
        "order": "5",
        "jsx": "import { Table, Button } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = length => {\n    let result = [];\n    for (let i = 0; i < length; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  state = {\n    dataSource: getData(10)\n  };\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.reduceContent.bind(this)}>切换到2条数据</Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          onRowClick={onRowClick}\n          fixedHeader\n        >\n          <Table.Column title=\"Id\" dataIndex=\"id\" />\n          <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </div>\n    );\n  }\n  reduceContent() {\n    this.setState({\n      dataSource: getData(2)\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n表格可以固定表头\n\n"
      },
      {
        "title": "分组列表",
        "order": "6",
        "jsx": "import { Table, Button } from \"@icedesign/base\";\n\nlet dataSource = [\n    {\n      price: \"US $2.45\",\n      status: 0,\n      id: 1,\n      product: [\n        {\n          title:\n            \"2014 New Fashion Novelty Tank Slim Women's Fashion Dresses With Lace\",\n          avatar:\n            \"https://sc01.alicdn.com/kf/HTB1ravHKXXXXXccXVXXq6xXFXXXJ/Chinese-Style-Fashion-Custom-Digital-Print-Silk.jpg_220x220.jpg\"\n        }\n      ],\n      children: [\n        {\n          price: \"US $2.5\",\n          status: 1,\n          id: 2,\n          product: [\n            {\n              title:\n                \"Free shipping women Casual dresses lady dress plus size 2014\",\n              avatar:\n                \"https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg\"\n            }\n          ]\n        },\n        {\n          price: \"US $2.5\",\n          status: 1,\n          id: 3,\n          product: [\n            {\n              title:\n                \"Free shipping women Casual dresses lady dress plus size 2014\",\n              avatar:\n                \"https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      price: \"US $2.5\",\n      status: 1,\n      id: 4,\n      product: [\n        {\n          title: \"Free shipping women Casual dresses lady dress plus size 2014\",\n          avatar:\n            \"https://sc02.alicdn.com/kf/HTB1efnNLVXXXXbtXpXXq6xXFXXXN/Light-100-acrylic-fashionabe-snood-shawl-weight.jpg_220x220.jpg\"\n        }\n      ]\n    }\n  ],\n  productRender = function(product) {\n    return (\n      <div className=\"media\">\n        <img src={product[0].avatar} className=\"media-side\" />\n        <div className=\"media-content\">{product[0].title}</div>\n      </div>\n    );\n  },\n  priceRender = function(price) {\n    return <b>{price}</b>;\n  },\n  statusRender = function(status) {\n    if (status) {\n      return \"Already Priced\";\n    } else {\n      return \"No Priced\";\n    }\n  },\n  operRender = function() {\n    return <a href=\"javascript:;\">View</a>;\n  },\n  groupHeaderRender = function(record) {\n    return <div>{record.product[0].title}</div>;\n  },\n  getRowClassName = function(record) {\n    if (record.status === 0) {\n      return \"highlight-row\";\n    }\n  },\n  rowSelection = {\n    onChange: function(selectedKeys) {\n      console.log(selectedKeys);\n    }\n  };\n\nclass App extends React.Component {\n  state = {\n    hasSelection: false\n  };\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.toggleGroupSelection}>\n            Toggle GroupHeader Selection\n          </Button>\n        </p>\n        <Table\n          dataSource={dataSource}\n          getCellProps={(rowIndex, colIndex) => {\n            if (\n              (colIndex === 3 && rowIndex === 1) ||\n              (colIndex === 4 && rowIndex === 1)\n            ) {\n              return {\n                colSpan: 1,\n                rowSpan: 2\n              };\n            }\n          }}\n          getRowClassName={getRowClassName}\n          rowSelection={rowSelection}\n        >\n          <Table.GroupHeader\n            cell={groupHeaderRender}\n            hasSelection={this.state.hasSelection}\n          />\n          <Table.Column\n            cell={productRender}\n            title=\"Product Details\"\n            dataIndex=\"product\"\n          />\n          <Table.Column\n            cell={priceRender}\n            title=\"Price\"\n            dataIndex=\"price\"\n            width={120}\n          />\n          <Table.Column\n            cell={statusRender}\n            title=\"Status\"\n            dataIndex=\"status\"\n            width={100}\n          />\n          <Table.Column cell={operRender} title=\"\" width={100} />\n        </Table>\n      </div>\n    );\n  }\n  toggleGroupSelection = () => {\n    this.setState({\n      hasSelection: !this.state.hasSelection\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".media-side{\n    width:48px;\n    height:48px;\n    float:left;\n    margin-right:10px;\n}\n.media-content{\n    overflow: hidden;\n    vertical-align: top;\n}\n.media{\n    overflow: hidden;\n}\n.next-table .highlight-row .next-table-group-header td{\n    background: #E8F6FF;\n}\n.next-table .highlight-row td{\n    border-color: #D3E9F7;\n}\n",
        "body": "\n分组列表展现\n\n"
      },
      {
        "title": "锁列",
        "order": "0",
        "jsx": "import { Table, Button } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 100; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  state = {\n    dataSource: [],\n    cols: [\n      <Table.Column\n        title=\"Title\"\n        dataIndex=\"title.name\"\n        width={400}\n        key=\"name1\"\n        lock\n      />,\n      <Table.ColumnGroup title=\"abc\" key=\"name-group\">\n        <Table.Column\n          title=\"Title\"\n          dataIndex=\"title.name\"\n          width={100}\n          key=\"name2\"\n        />\n        <Table.Column\n          title=\"Title\"\n          dataIndex=\"title.name\"\n          width={400}\n          key=\"name3\"\n        />\n      </Table.ColumnGroup>,\n      <Table.Column title=\"Time\" dataIndex=\"time\" width={500} key=\"time\" />\n    ],\n    isLoading: true\n  };\n  render() {\n    let filters = [\n      {\n        label: \"Nano 包含3\",\n        value: 3\n      },\n      {\n        label: \"Nano 包含2\",\n        value: 2,\n        children: [\n          {\n            label: \"Nano 包含12\",\n            value: 22\n          },\n          {\n            label: \"Nano 包含23\",\n            value: 23\n          }\n        ]\n      },\n      {\n        label: \"其他\",\n        children: [\n          {\n            label: \"Nano 包含4\",\n            value: 4\n          },\n          {\n            label: \"Nano 包含5\",\n            value: 5\n          }\n        ]\n      }\n    ];\n    return (\n      <div>\n        <p>\n          <Button onClick={this.reduceCol}>Reduce Cols</Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          onRowClick={onRowClick}\n          fixedHeader\n          isLoading={this.state.isLoading}\n        >\n          <Table.Column\n            title=\"Id-Id-Id-Id-Id-Id-Id-Id-Id-Id-Id-Id\"\n            dataIndex=\"id\"\n            lock\n            width={140}\n            filters={filters}\n          />\n          {this.state.cols}\n          <Table.Column cell={render} width={200} lock=\"right\" />\n        </Table>\n      </div>\n    );\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        dataSource: getData(),\n        isLoading: false\n      });\n    }, 200);\n  }\n  reduceCol = () => {\n    this.setState({\n      cols: [\n        <Table.Column\n          title=\"Title\"\n          dataIndex=\"title.name\"\n          width={400}\n          key=\"name1\"\n          lock\n        />,\n        <Table.Column title=\"Time\" dataIndex=\"time\" width={100} key=\"time\" />\n      ]\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n演示表格锁列的功能\n\n"
      },
      {
        "title": "混合模式",
        "order": "0",
        "jsx": "import { Table } from \"@icedesign/base\";\n\nconst data = [\n  {\n    key: 1,\n    name: \"a\",\n    age: 32,\n    address: \"我是a\",\n    children: [\n      {\n        key: 11,\n        name: \"aa\",\n        age: 33,\n        address: \"我是aa\"\n      },\n      {\n        key: 12,\n        name: \"ab\",\n        age: 33,\n        address: \"我是ab\",\n        children: [\n          {\n            key: 121,\n            name: \"aba\",\n            age: 33,\n            address: \"我是aba\"\n          }\n        ]\n      },\n      {\n        key: 13,\n        name: \"ac\",\n        age: 33,\n        address: \"我是ac\",\n        children: [\n          {\n            key: 131,\n            name: \"aca\",\n            age: 33,\n            address: \"我是aca\",\n            children: [\n              {\n                key: 1311,\n                name: \"acaa\",\n                age: 33,\n                address: \"我是acaa\"\n              },\n              {\n                key: 1312,\n                name: \"acab\",\n                age: 33,\n                address: \"我是acab\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    key: 2,\n    name: \"b\",\n    age: 32,\n    address: \"我是b\",\n    children: []\n  }\n];\n\nconst tableMixTree = (\n  <Table\n    dataSource={data}\n    primaryKey=\"key\"\n    isTree\n    rowSelection={{ onChange: () => {} }}\n  >\n    <Table.Column title=\"Key\" dataIndex=\"key\" />\n    <Table.Column title=\"Name\" dataIndex=\"name\" />\n    <Table.Column title=\"Age\" dataIndex=\"age\" />\n    <Table.Column title=\"Address\" dataIndex=\"address\" />\n  </Table>\n);\n\nconst tableMixExpanded = (\n  <Table\n    dataSource={data}\n    primaryKey=\"key\"\n    expandedRowRender={record => record.address}\n    rowSelection={{ onChange: () => {} }}\n  >\n    <Table.Column title=\"Key\" dataIndex=\"key\" />\n    <Table.Column title=\"Name\" dataIndex=\"name\" />\n    <Table.Column title=\"Age\" dataIndex=\"age\" />\n    <Table.Column title=\"Address\" dataIndex=\"address\" />\n  </Table>\n);\n\nconst tableMixSelectionTreeLock = (\n  <div style={{ width: \"500px\" }}>\n    <Table\n      dataSource={data}\n      primaryKey=\"key\"\n      rowSelection={{ onChange: () => {} }}\n      isTree\n    >\n      <Table.Column title=\"Key\" dataIndex=\"key\" width={100} />\n      <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100} />\n      <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\" />\n      <Table.Column title=\"Address\" dataIndex=\"address\" width={200} />\n    </Table>\n  </div>\n);\n\nconst tableMixLock = (\n  <div style={{ width: \"500px\" }}>\n    <Table\n      dataSource={data}\n      primaryKey=\"key\"\n      rowSelection={{ onChange: () => {} }}\n    >\n      <Table.Column title=\"Key\" dataIndex=\"key\" width={100} />\n      <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100} />\n      <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\" />\n      <Table.Column title=\"Address\" dataIndex=\"address\" width={200} />\n    </Table>\n  </div>\n);\n\nconst tableMixExpandedLock = (\n  <div style={{ width: \"500px\" }}>\n    <Table\n      dataSource={data}\n      primaryKey=\"key\"\n      rowSelection={{ onChange: () => {} }}\n      expandedRowRender={record => record.address}\n      expandedRowIndent={[3, 0]}\n    >\n      <Table.Column title=\"Key\" dataIndex=\"key\" width={100} />\n      <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100} />\n      <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\" />\n      <Table.Column title=\"Address\" dataIndex=\"address\" width={200} />\n    </Table>\n  </div>\n);\n\nconst tableMixTreeLock = (\n  <div style={{ width: \"500px\" }}>\n    <Table dataSource={data} primaryKey=\"key\" isTree>\n      <Table.Column title=\"Key\" dataIndex=\"key\" width={100} />\n      <Table.Column title=\"Name\" dataIndex=\"name\" lock width={100} />\n      <Table.Column title=\"Age\" dataIndex=\"age\" width={200} lock=\"right\" />\n      <Table.Column title=\"Address\" dataIndex=\"address\" width={200} />\n    </Table>\n  </div>\n);\n\nReactDOM.render(\n  <div className=\"mix-demo\">\n    <div className=\"row\">\n      <h4>tree和选择混合</h4>\n      {tableMixTree}\n    </div>\n    <div className=\"row\">\n      <h4>额外渲染和选择混合</h4>\n      {tableMixExpanded}\n    </div>\n    <div className=\"row\">\n      <h4>tree和锁列和选择混合</h4>\n      {tableMixSelectionTreeLock}\n    </div>\n    <div className=\"row\">\n      <h4>额外渲染列和锁列和选择混合</h4>\n      {tableMixExpandedLock}\n    </div>\n    <div className=\"row\">\n      <h4>锁列和选择混合</h4>\n      {tableMixLock}\n    </div>\n    <div className=\"row\">\n      <h4>tree和锁列混合</h4>\n      {tableMixTreeLock}\n    </div>\n  </div>,\n  mountNode\n);\n\n",
        "css": ".mix-demo .row {\n  margin-top:10px;\n}\n",
        "body": "\n演示了tree模式和rowSelection模式混合\n\n"
      },
      {
        "title": "多表头",
        "order": "7",
        "jsx": "import { Table, Button } from \"@icedesign/base\";\n\nconst onRowClick = function(record, index, e) {\n    console.log(record, index, e);\n  },\n  getData = j => {\n    let result = [];\n    for (let i = 0; i < j; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  state = {\n    dataSource: getData(15)\n  };\n\n  render() {\n    return (\n      <div>\n        <p>\n          <Button onClick={this.onClick}>Reduce count</Button>\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          onRowClick={onRowClick}\n          fixedHeader\n          maxBodyHeight={400}\n        >\n          <Table.Column title=\"Id1\" dataIndex=\"id\" width={140} />\n          <Table.ColumnGroup>\n            <Table.Column title=\"Id2\" dataIndex=\"id\" lock width={140} />\n            <Table.Column title=\"Title\" dataIndex=\"title.name\" width={400} />\n            <Table.Column title=\"Title\" dataIndex=\"title.name\" width={200} />\n          </Table.ColumnGroup>\n          <Table.ColumnGroup>\n            <Table.Column title=\"Time\" dataIndex=\"time\" width={500} />\n            <Table.Column cell={render} width={200} lock=\"right\" />\n          </Table.ColumnGroup>\n        </Table>\n      </div>\n    );\n  }\n\n  onClick = () => {\n    this.setState({\n      dataSource: getData(4)\n    });\n  };\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n多个表头\n\n"
      },
      {
        "title": "选择框属性",
        "order": "0",
        "jsx": "import { Table } from \"@icedesign/base\";\n\nconst onChange = function(...args) {\n    console.log(...args);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  },\n  rowSelection = {\n    onChange: onChange,\n    getProps: record => {\n      return {\n        disabled: record.id === 100306660942\n      };\n    }\n  };\n\nReactDOM.render(\n  <Table dataSource={getData()} rowSelection={rowSelection}>\n    <Table.Column title=\"Id\" dataIndex=\"id\" />\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\" />\n    <Table.Column cell={render} width={200} />\n  </Table>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n通过getProps来控制选择框属性\n\n"
      },
      {
        "title": "可选择",
        "order": "0",
        "jsx": "import { Table } from \"@icedesign/base\";\n\nconst onChange = function(...args) {\n    console.log(...args);\n  },\n  getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: {\n          name: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`\n        },\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nReactDOM.render(\n  <Table dataSource={getData()} rowSelection={{ onChange: onChange }}>\n    <Table.Column title=\"Id\" dataIndex=\"id\" />\n    <Table.Column title=\"Title\" dataIndex=\"title.name\" />\n    <Table.Column title=\"Time\" dataIndex=\"time\" />\n    <Table.Column cell={render} width={200} />\n  </Table>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n表格可选择功能\n\n"
      },
      {
        "title": "样式",
        "order": "10",
        "jsx": "import { Table, Button } from \"@icedesign/base\";\n\nconst getData = () => {\n    let result = [];\n    for (let i = 0; i < 5; i++) {\n      result.push({\n        title: `Quotation for 1PCS Nano ${3 + i}.0 controller compatible`,\n        id: 100306660940 + i,\n        time: 2000 + i\n      });\n    }\n    return result;\n  },\n  render = (value, index, record) => {\n    return <a>Remove({record.id})</a>;\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: getData(),\n      className: \"\",\n      align: \"left\"\n    };\n  }\n  render() {\n    return (\n      <span>\n        <p>\n          <Button onClick={this.toggleZebra.bind(this)}> Toggle zebra </Button>{\" \"}\n          &nbsp;\n          <Button onClick={this.toggleBorder.bind(this)}>\n            {\" \"}\n            Toggle border\n          </Button>{\" \"}\n          &nbsp;\n          <Button onClick={this.makeBeauty.bind(this)}>\n            {\" \"}\n            Make second column beauty{\" \"}\n          </Button>{\" \"}\n          &nbsp;\n          <Button onClick={this.makeAlign.bind(this)}>\n            {\" \"}\n            Make first column align right{\" \"}\n          </Button>{\" \"}\n          &nbsp;\n        </p>\n        <Table\n          dataSource={this.state.dataSource}\n          isZebra={this.state.isZebra}\n          hasBorder={this.state.hasBorder}\n          onSort={this.onSort.bind(this)}\n        >\n          <Table.Column\n            title=\"Id\"\n            dataIndex=\"id\"\n            sortable\n            align={this.state.align}\n          />\n          <Table.Column\n            title=\"Title\"\n            dataIndex=\"title\"\n            className={this.state.className}\n          />\n          <Table.Column title=\"Time\" dataIndex=\"time\" />\n          <Table.Column cell={render} width={200} />\n        </Table>\n      </span>\n    );\n  }\n  onSort(dataIndex, order) {\n    let dataSource = this.state.dataSource.sort(function(a, b) {\n      let result = a[dataIndex] - b[dataIndex];\n      return order === \"asc\" ? (result > 0 ? 1 : -1) : result > 0 ? -1 : 1;\n    });\n    this.setState({\n      dataSource\n    });\n  }\n  toggleZebra() {\n    this.setState({\n      isZebra: !this.state.isZebra\n    });\n  }\n  toggleBorder() {\n    this.setState({\n      hasBorder: !this.state.hasBorder\n    });\n  }\n  makeBeauty() {\n    this.setState({\n      className: \"beauty\"\n    });\n  }\n  makeAlign() {\n    this.setState({\n      align: \"right\"\n    });\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": ".beauty{\n  background: #f7f7f7;\n}\n",
        "body": "\n自定义表格边框\n\n"
      }
    ]
  },
  {
    "name": "Tag",
    "category": "Components",
    "title": "标签",
    "type": "展示",
    "importStatement": "import { Tag } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n标签用于标记事物的属性和维度，或者可以使用标签来对一组事物分类。\n\n### 何时使用\n\n-   用于标记事物的属性和维度。\n-   进行分类。\n\n### 使用注意点\n\n1.  目前 `0.x` 版本的 tag 存在一个默认的 `margin`，如果你不想要有，可以在配置平台中配置移除。`1.x` 版本会默认移除。\n2.  虽然可以设置 `size` 属性取值 `large`，但该值只是为了兼容表单场景，实际取值时 `large` 等同于 `medium`。\n3.  不建议在 Tag 中使用大段文本。\n\n",
    "propsSchema": {
      "name": "Tag",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'selectable'",
                "computed": false
              },
              {
                "value": "'deletable'",
                "computed": false
              },
              {
                "value": "'interactive'",
                "computed": false
              },
              {
                "value": "'link'",
                "computed": false
              },
              {
                "value": "'readonly'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "标签的形态",
          "defaultValue": {
            "value": "'selectable'",
            "computed": false
          },
          "docblock": "标签的形态"
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'secondary'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "标签的类型",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "标签的类型"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "标签的尺寸（large 尺寸为兼容表单场景 large = medium）",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "标签的尺寸（large 尺寸为兼容表单场景 large = medium）"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "标签是否禁用",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "标签是否禁用"
        },
        "count": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "标签附加显示的重复次数",
          "docblock": "标签附加显示的重复次数"
        },
        "selected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "选择型标签是否被选中（受控）",
          "docblock": "选择型标签是否被选中（受控）"
        },
        "defaultSelected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "选型型标签默认是否被选中（非受控）",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "选型型标签默认是否被选中（非受控）"
        },
        "closed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "可删除标签是否被关闭（受控）",
          "docblock": "可删除标签是否被关闭（受控）"
        },
        "defaultClosed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "可删除标签默认是否被关闭（非受控）",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "可删除标签默认是否被关闭（非受控）"
        },
        "marked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "互动型标签是否被标记过（受控）",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "互动型标签是否被标记过（受控）"
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "array"
              },
              {
                "name": "object"
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "标签暂存的值",
          "docblock": "标签暂存的值"
        },
        "animation": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否开启动效",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否开启动效"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "互动型标签被 mark 的数量变化时的回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "互动型标签被 mark 的数量变化时的回调\n@param {Number} count 被标记的次数",
          "params": [
            {
              "name": "count",
              "description": "被标记的次数",
              "type": {
                "name": "Number"
              }
            }
          ],
          "returns": null
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "可删除标签被关闭时的回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "可删除标签被关闭时的回调\n@param {String} value 值\n@param {Boolean} closed 是否关闭状态",
          "params": [
            {
              "name": "value",
              "description": "值",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "closed",
              "description": "是否关闭状态",
              "type": {
                "name": "Boolean"
              }
            }
          ],
          "returns": null
        },
        "onSelect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "可选择标签被选中时的回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "可选择标签被选中时的回调\n@param {Boolean} selected 是否被选择",
          "params": [
            {
              "name": "selected",
              "description": "是否被选择",
              "type": {
                "name": "Boolean"
              }
            }
          ],
          "returns": null
        },
        "afterAppear": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "标签出现后执行的回调\nFunction() => void",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "标签出现后执行的回调\nFunction() => void",
          "params": [],
          "returns": null
        },
        "afterClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "标签关闭后执行的回调\nFunction() => void",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "标签关闭后执行的回调\nFunction() => void",
          "params": [],
          "returns": null
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nshape | 标签的形态<br><br>**可选值**:<br>'selectable', 'deletable', 'interactive', 'link', 'readonly' | Enum | 'selectable'\ntype | 标签的类型<br><br>**可选值**:<br>'normal', 'primary', 'secondary' | Enum | 'normal'\nsize | 标签的尺寸（large 尺寸为兼容表单场景 large = medium）<br><br>**可选值**:<br>'medium', 'small', 'large' | Enum | 'medium'\ndisabled | 标签是否禁用 | Boolean | false\ncount | 标签附加显示的重复次数 | Number | -\nselected | 选择型标签是否被选中（受控） | Boolean | -\ndefaultSelected | 选型型标签默认是否被选中（非受控） | Boolean | false\nclosed | 可删除标签是否被关闭（受控） | Boolean | -\ndefaultClosed | 可删除标签默认是否被关闭（非受控） | Boolean | false\nmarked | 互动型标签是否被标记过（受控） | Boolean | false\nvalue | 标签暂存的值 | String/Array/Object/Boolean | -\nanimation | 是否开启动效 | Boolean | true\nonChange | 互动型标签被 mark 的数量变化时的回调<br><br>**签名**:<br>Function(count: Number) => void<br>**参数**:<br>*count*: {Number} 被标记的次数 | Function | () =&gt; {}\nonClose | 可删除标签被关闭时的回调<br><br>**签名**:<br>Function(value: String, closed: Boolean) => void<br>**参数**:<br>*value*: {String} 值<br>*closed*: {Boolean} 是否关闭状态 | Function | () =&gt; {}\nonSelect | 可选择标签被选中时的回调<br><br>**签名**:<br>Function(selected: Boolean) => void<br>**参数**:<br>*selected*: {Boolean} 是否被选择 | Function | () =&gt; {}\nafterAppear | 标签出现后执行的回调<br>Function() => void<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nafterClose | 标签关闭后执行的回调<br>Function() => void<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "关闭动效",
        "order": "4",
        "jsx": "import { Tag } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Tag shape=\"deletable\">默认有动效的 Tag</Tag> <br />\n    <Tag shape=\"deletable\" animation={false}>\n      关闭动效的 Tag\n    </Tag>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n默认情况下 Tag 使用了出现和关闭的动效，如果某些情况下，您不需要动效，可以使用 `animation` 属性进行关闭。\n\n"
      },
      {
        "title": "受控型可选择标签",
        "order": "2",
        "jsx": "import { Tag, Button } from \"@icedesign/base\";\n\nclass ControlledTag extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      select: false\n    };\n  }\n\n  onClick() {\n    this.setState(prevState => {\n      return {\n        select: !prevState.select\n      };\n    });\n  }\n\n  render() {\n    const label = this.state.select ? \"反选 Tag\" : \"选中 Tag\";\n    return (\n      <div>\n        <Button onClick={::this.onClick} type=\"normal\">\n          {label}\n        </Button>\n        <Tag shape=\"selectable\" selected={this.state.select}>\n          Controlled Selectable Tag\n        </Tag>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<ControlledTag />, mountNode);\n\n",
        "css": "",
        "body": "\n`defaultSelected` 提供了非受控的选中状态，`selected` 提供了受控的选中状态。\n对于可选择标签而言，除了使用组件提供的默认行为，用户还可以通过自行控制组件状态来实现自定义组件的选择行为。\n\n"
      },
      {
        "title": "自定义的可关闭标签",
        "order": "3",
        "jsx": "import { Tag } from \"@icedesign/base\";\n\nclass ControlledClosableTag extends React.Component {\n  static propTypes = {\n    value: React.PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      closed: false\n    };\n  }\n\n  onClose() {\n    this.setState(prevState => {\n      return { closed: !prevState.closed };\n    });\n  }\n\n  render() {\n    const { value } = this.props;\n    return (\n      <Tag\n        shape=\"deletable\"\n        closed={this.state.closed}\n        onClose={::this.onClose}\n        value={value}\n      >\n        Controlled Deletable Tag\n      </Tag>\n    );\n  }\n}\n\nReactDOM.render(<ControlledClosableTag value=\"hello world\" />, mountNode);\n\n",
        "css": "",
        "body": "\n组件提供了 `closed` 属性用于实现关闭行为的受控。\n对于可关闭标签而言，除了使用组件提供的默认行为，用户还可以实现自定义的组件关闭行为。\n\n"
      },
      {
        "title": "标签形态",
        "order": "0",
        "jsx": "import { Tag } from \"@icedesign/base\";\n\nfunction onClose(value, closed) {\n  console.log(value, closed);\n}\n\nfunction onChange(count) {\n  console.log(count);\n}\n\nReactDOM.render(\n  <div className=\"tag-list\">\n    <div className=\"tag-list-item\">\n      <Tag shape=\"selectable\" type=\"normal\">\n        Normal Selectable Tag\n      </Tag>\n      <Tag shape=\"selectable\" type=\"primary\">\n        Primary Selectable Tag\n      </Tag>\n      <Tag shape=\"selectable\" type=\"secondary\">\n        Secondary Selectable Tag\n      </Tag>\n    </div>\n\n    <div className=\"tag-list-item\">\n      <Tag\n        shape=\"deletable\"\n        type=\"normal\"\n        value=\"Normal Deletable Tag\"\n        onClose={onClose}\n      >\n        Normal Deletable Tag\n      </Tag>\n      <Tag\n        shape=\"deletable\"\n        type=\"primary\"\n        value=\"Primary Deletable Tag\"\n        onClose={onClose}\n      >\n        Primary Deletable Tag\n      </Tag>\n      <Tag\n        shape=\"deletable\"\n        type=\"secondary\"\n        value=\"Secondary Deletable Tag\"\n        onClose={onClose}\n      >\n        Secondary Deletable Tag\n      </Tag>\n    </div>\n\n    <div className=\"tag-list-item\">\n      <Tag shape=\"interactive\" count={2} onChange={onChange}>\n        Interfactive Tag\n      </Tag>\n    </div>\n\n    <div className=\"tag-list-item\">\n      <Tag shape=\"link\" type=\"normal\">\n        <a href=\"//www.alibaba.com\" target=\"_blank\">\n          Normal Link Tag\n        </a>\n      </Tag>\n      <Tag shape=\"link\" type=\"primary\">\n        <a href=\"//www.alibaba.com\" target=\"_blank\">\n          Primary Link Tag\n        </a>\n      </Tag>\n      <Tag shape=\"link\" type=\"secondary\">\n        <a href=\"//www.alibaba.com\" target=\"_blank\">\n          Secondary Link Tag\n        </a>\n      </Tag>\n    </div>\n\n    <div className=\"tag-list-item\">\n      <Tag shape=\"readonly\">Readonly Tag</Tag>\n    </div>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n`closable` 和 `interactive` 则会直接隐藏超出区域的文本。\n建议不要在标签中使用过长的文本，对于 `selectable`, `link`, `readonly` 这三种 tag 而言，超出宽度的文本会使用 `...` 表示。\n可以通过 `type` 属性来控制标签在某种形态下的类型。\n`readonly` 只读型标签：无交互行为。并且，只读型标签没有级别。\n`link` 跳转型标签<br />\n`interactive` 可互动标签<br />\n`closable` 可关闭标签<br />\n`selectable` 可选择标签<br />\n通过设置 `shape` 属性值来更改标签的类型，可选值包括：\n标签有四种类型：可选择标签、可关闭标签、可互动标签、跳转型标签和只读型标签。\n\n"
      },
      {
        "title": "尺寸",
        "order": "1",
        "jsx": "import { Tag } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <Tag shape=\"selectable\">Medium Tag</Tag>\n    <Tag shape=\"selectable\" size=\"small\">\n      Small Tag\n    </Tag>\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n则默认使用 `medium` 尺寸的值。\n需要注意的，`large` 尺寸只是为了兼容表单场景而存在，实际并不存在 `large` 尺寸，如果用户设置了 `size='large'`，\n通过设置 `size` 为 `small` `medium` 可分别创建小标签、中等标签，若不设置 `type` 值则为中等标签。\n\n"
      }
    ]
  },
  {
    "name": "TimePicker",
    "category": "Components",
    "title": "时间选择框",
    "type": "表单",
    "importStatement": "import { TimePicker } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n### 何时使用\n\n当用户需要输入一个时间，可以点击标准输入框，弹出时间面板进行选择。\n\n",
    "propsSchema": {
      "name": "TimePicker",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式的品牌前缀"
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "输入框提示文案",
          "docblock": "输入框提示文案"
        },
        "defaultValue": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "默认时间",
          "docblock": "默认时间"
        },
        "value": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "时间",
          "docblock": "时间"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "时间值改变时的回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "时间值改变时的回调\n@param {String} date 日期值\n@param {String} formatDate 格式化后的日期值",
          "params": [
            {
              "name": "date",
              "description": "日期值",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "formatDate",
              "description": "格式化后的日期值",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "defaultOpen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "默认是否展开",
          "docblock": "默认是否展开"
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "展开",
          "docblock": "展开"
        },
        "onOpenChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "展开状态改变时的回调",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "展开状态改变时的回调\n@param {Boolean} open 是否展开",
          "params": [
            {
              "name": "open",
              "description": "是否展开",
              "type": {
                "name": "Boolean"
              }
            }
          ],
          "returns": null
        },
        "format": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "展示的时间格式，目前只支持 24 小时值",
          "defaultValue": {
            "value": "'HH:mm:ss'",
            "computed": false
          },
          "docblock": "展示的时间格式，目前只支持 24 小时值"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "禁用全部操作",
          "docblock": "禁用全部操作"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "输入框尺寸",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "输入框尺寸"
        },
        "popupStyle": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "弹层样式",
          "docblock": "弹层样式",
          "properties": []
        },
        "popupAlign": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "弹层对齐方式",
          "defaultValue": {
            "value": "'tl tl'",
            "computed": false
          },
          "docblock": "弹层对齐方式"
        },
        "popupOffset": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "弹层偏移",
          "defaultValue": {
            "value": "[0, 0]",
            "computed": false
          },
          "docblock": "弹层偏移"
        },
        "disabledHours": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "禁止选择指定分小时\nFunction() => Array",
          "docblock": "禁止选择指定分小时\nFunction() => Array",
          "params": [],
          "returns": null
        },
        "disabledMinutes": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "禁止选择指定分钟\nFunction() => Array",
          "docblock": "禁止选择指定分钟\nFunction() => Array",
          "params": [],
          "returns": null
        },
        "disabledSeconds": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "禁止选择部分秒\nFunction() => Array",
          "docblock": "禁止选择部分秒\nFunction() => Array",
          "params": [],
          "returns": null
        },
        "hasClear": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示清空按钮",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示清空按钮"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定样式名",
          "docblock": "自定样式名"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\nplaceholder | 输入框提示文案 | String | -\ndefaultValue | 默认时间 | any | -\nvalue | 时间 | any | -\nonChange | 时间值改变时的回调<br><br>**签名**:<br>Function(date: String, formatDate: String) => void<br>**参数**:<br>*date*: {String} 日期值<br>*formatDate*: {String} 格式化后的日期值 | Function | () =&gt; {}\ndefaultOpen | 默认是否展开 | Boolean | -\nopen | 展开 | Boolean | -\nonOpenChange | 展开状态改变时的回调<br><br>**签名**:<br>Function(open: Boolean) => void<br>**参数**:<br>*open*: {Boolean} 是否展开 | Function | () =&gt; {}\nformat | 展示的时间格式，目前只支持 24 小时值 | String | 'HH:mm:ss'\ndisabled | 禁用全部操作 | Boolean | -\nsize | 输入框尺寸<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\npopupStyle | 弹层样式 | Object | -\npopupAlign | 弹层对齐方式 | String | 'tl tl'\npopupOffset | 弹层偏移 | Array | [0, 0]\ndisabledHours | 禁止选择指定分小时<br>Function() => Array<br><br>**签名**:<br>Function() => void | Function | -\ndisabledMinutes | 禁止选择指定分钟<br>Function() => Array<br><br>**签名**:<br>Function() => void | Function | -\ndisabledSeconds | 禁止选择部分秒<br>Function() => Array<br><br>**签名**:<br>Function() => void | Function | -\nhasClear | 是否显示清空按钮 | Boolean | true\nclassName | 自定样式名 | String | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { TimePicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <TimePicker\n    onChange={(val, str) => console.log(val, str)}\n    language=\"en-us\"\n  />,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n最简单的用法。\n\n"
      },
      {
        "title": "默认值",
        "order": "2",
        "jsx": "import { TimePicker } from \"@icedesign/base\";\n\nReactDOM.render(<TimePicker defaultValue=\"11:11:11\" />, mountNode);\n\n",
        "css": "",
        "body": "\n默认值。\n\n"
      },
      {
        "title": "禁用时分秒",
        "order": "3",
        "jsx": "import { TimePicker } from \"@icedesign/base\";\n\nfunction disabledHours() {\n  return [6, 12, 18, 23];\n}\n\nfunction disabledMinutes() {\n  return [10, 20, 30, 40, 50];\n}\n\nfunction disabledSeconds() {\n  return [10, 20, 30, 40, 50];\n}\n\nReactDOM.render(\n  <div>\n    <h3>禁用全部</h3>\n    <TimePicker disabled defaultValue=\"11:11:11\" />\n    <h3>禁用时</h3>\n    <TimePicker disabledHours={disabledHours} />\n    <h3>禁用分</h3>\n    <TimePicker disabledMinutes={disabledMinutes} />\n    <h3>禁用秒</h3>\n    <TimePicker disabledSeconds={disabledSeconds} />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n禁用全部和禁用部分选择项\n\n"
      },
      {
        "title": "结合 Field 使用",
        "order": "4",
        "jsx": "import { TimePicker, Field } from \"@icedesign/base\";\n\nclass App extends React.Component {\n  field = new Field(this);\n\n  render() {\n    const init = this.field.init;\n    const props = init(\"test-time-picker\", {\n      rules: [{ required: true, message: \"具体时间点必须要选\" }],\n      initValue: \"00:00:00\"\n    });\n\n    return <TimePicker {...props} />;\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n配合Field使用\n\n"
      },
      {
        "title": "格式化时间",
        "order": "5",
        "jsx": "import { TimePicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>不可选择秒</h3>\n    <TimePicker format=\"HH:mm\" />\n    <h3>不可选择小时</h3>\n    <TimePicker format=\"mm:ss\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n例如不可选择小时，或者不可选择秒\n可以通过 `format` 属性来格式化时间，可以通过该属性来禁用某一列。\n\n"
      },
      {
        "title": "尺寸",
        "order": "1",
        "jsx": "import { TimePicker } from \"@icedesign/base\";\n\nReactDOM.render(\n  <div>\n    <h3>大号</h3>\n    <TimePicker size=\"large\" />\n    <h3>中号</h3>\n    <TimePicker />\n    <h3>小号</h3>\n    <TimePicker size=\"small\" />\n  </div>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n其中默认尺寸为 `medium`。\n可以通过 `size` 属性调整组件输入框的大小，可选值包括 `large`, `medium`, `small`。\n\n"
      }
    ]
  },
  {
    "name": "Timeline",
    "category": "Components",
    "title": "时间轴",
    "type": "展示",
    "importStatement": "import { Timeline } from '@icedesign/base';",
    "body": "\n\n## Guide\n\n垂直展示的时间流信息。\n\n### 何时使用\n\n-   当有一系列信息需要从上至下按时间排列时。\n-   需要有一条时间轴进行视觉上的串联时。\n\n",
    "propsSchema": {
      "name": "Timeline",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式的品牌前缀"
        },
        "fold": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]`",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]`"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Item",
          "props": {
            "state": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'done'",
                    "computed": false
                  },
                  {
                    "value": "'process'",
                    "computed": false
                  },
                  {
                    "value": "'error'",
                    "computed": false
                  },
                  {
                    "value": "'success'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "节点状态",
              "defaultValue": {
                "value": "'done'",
                "computed": false
              },
              "docblock": "节点状态"
            },
            "icon": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "图标",
              "docblock": "图标"
            },
            "time": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "格式化后的时间",
              "docblock": "格式化后的时间"
            },
            "title": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "标题",
              "docblock": "标题"
            },
            "content": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "内容",
              "docblock": "内容"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式的品牌前缀 | String | 'next-'\nfold | 自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]` | Array | []\nclassName | 自定义类名 | String | -\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Item",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nstate | 节点状态<br><br>**可选值**:<br>'done', 'process', 'error', 'success' | Enum | 'done'\nicon | 图标 | String | -\ntime | 格式化后的时间 | ReactNode | -\ntitle | 标题 | ReactNode | -\ncontent | 内容 | ReactNode | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Timeline } from \"@icedesign/base\";\n\nconst { Item: TimelineItem } = Timeline;\n\nReactDOM.render(\n  <Timeline>\n    <TimelineItem title=\"收件\" state=\"process\" />\n    <TimelineItem title=\"发货\" />\n    <TimelineItem title=\"下单\" />\n  </Timeline>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n最简单的用法。\n\n"
      },
      {
        "title": "内容",
        "order": "1",
        "jsx": "import { Timeline } from \"@icedesign/base\";\n\nconst { Item: TimelineItem } = Timeline;\n\nReactDOM.render(\n  <Timeline>\n    <TimelineItem\n      title=\"签收\"\n      content={\n        <div>\n          【杭州市】已签收,签收人是阿里巴巴小邮局，感谢使用申通快递，期待再次为您服务\n        </div>\n      }\n      time={\"2016-06-10 10:30:00\"}\n      state=\"process\"\n    />\n    <TimelineItem\n      title=\"派送\"\n      content=\"【杭州市】快件已到达 浙江杭州滨江公司\"\n      time={\"2016-06-10 09:30:00\"}\n    />\n    <TimelineItem\n      title=\"派送\"\n      content=\"【杭州市】浙江杭州滨江公司派件员正在为您派件\"\n      time={\"2016-06-10 09:03:00\"}\n    />\n    <TimelineItem\n      title=\"运输\"\n      content=\"【杭州市】浙江杭州转运中心 已发出\"\n      time={\"2016-06-10 06:10:00\"}\n    />\n    <TimelineItem\n      title=\"运输\"\n      content=\"【东莞市】广东东莞转运中心 已发出\"\n      time={\"2016-06-09 18:00:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】申通快递 广东东莞凤岗分部收件员 已揽件\"\n      time={\"2016-06-09 16:12:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】商家正通知快递公司揽件\"\n      time={\"2016-06-09 14:00:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】您的订单待配货\"\n      time={\"2016-06-09 10:12:19\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】您的订单开始处理\"\n      time={\"2016-06-09 10:01:09\"}\n      icon=\"atm\"\n    />\n  </Timeline>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n带内容的用法，分别添加title，content，icon的效果。\n\n"
      },
      {
        "title": "折叠",
        "order": "2",
        "jsx": "import { Timeline } from \"@icedesign/base\";\n\nconst { Item: TimelineItem } = Timeline;\n\nReactDOM.render(\n  <Timeline\n    fold={[\n      { foldArea: [1, 2], foldShow: false },\n      { foldArea: [5], foldShow: false }\n    ]}\n  >\n    <TimelineItem\n      title=\"签收\"\n      content=\"【杭州市】已签收,签收人是阿里巴巴小邮局，感谢使用申通快递，期待再次为您服务\"\n      time={\"2016-06-10 10:30:00\"}\n      state=\"process\"\n    />\n    <TimelineItem\n      title=\"派送\"\n      content=\"【杭州市】快件已到达 浙江杭州滨江公司\"\n      time={\"2016-06-10 09:30:00\"}\n    />\n    <TimelineItem\n      title=\"派送\"\n      content=\"【杭州市】浙江杭州滨江公司派件员正在为您派件\"\n      time={\"2016-06-10 09:03:00\"}\n    />\n    <TimelineItem\n      title=\"运输\"\n      content=\"【杭州市】浙江杭州转运中心 已发出\"\n      time={\"2016-06-10 06:10:00\"}\n    />\n    <TimelineItem\n      title=\"运输\"\n      content=\"【东莞市】广东东莞转运中心 已发出\"\n      time={\"2016-06-09 18:00:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】申通快递 广东东莞凤岗分部收件员 已揽件\"\n      time={\"2016-06-09 16:12:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】商家正通知快递公司揽件\"\n      time={\"2016-06-09 14:00:00\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】您的订单待配货\"\n      time={\"2016-06-09 10:12:19\"}\n    />\n    <TimelineItem\n      title=\"揽件\"\n      content=\"【东莞市】您的订单开始处理\"\n      time={\"2016-06-09 10:01:09\"}\n    />\n  </Timeline>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n自定义折叠区域。\n\n"
      },
      {
        "title": "状态",
        "order": "0",
        "jsx": "import { Timeline } from \"@icedesign/base\";\n\nconst { Item: TimelineItem } = Timeline;\n\nReactDOM.render(\n  <Timeline>\n    <TimelineItem title=\"多云\" time={\"2016-06-10 10:30:00\"} state=\"process\" />\n    <TimelineItem title=\"晴天\" time={\"2016-06-11\"} state=\"success\" />\n    <TimelineItem title=\"下雨\" time={\"2016-06-09\"} state=\"error\" />\n  </Timeline>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n设置每个节点不同的状态。\n\n"
      }
    ]
  },
  {
    "name": "Transfer",
    "category": "Components",
    "title": "穿梭框",
    "type": "基本",
    "importStatement": "import { Transfer } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n用直观的方式在两栏中移动元素，完成选择行为。\n\n",
    "propsSchema": {
      "name": "Transfer",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "dataSource": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "object"
            }
          },
          "required": false,
          "description": "数据源",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "数据源"
        },
        "value": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "（用于受控）当前值",
          "docblock": "（用于受控）当前值"
        },
        "defaultValue": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "（用于非受控）初始值",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "（用于非受控）初始值"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "值发生改变的时候触发的回调函数",
          "docblock": "值发生改变的时候触发的回调函数\n@param {Array} value 右面板值\n@param {Array} data 右面板数据\n@param {Object} extra 额外参数\n@param {Array} extra.leftValue 左面板值\n@param {Array} extra.leftData 左面板数据\n@param {Array} extra.movedValue 发生移动的值\n@param {Object} extra.movedData 发生移动的数据\n@param {String} extra.direction 移动的方向，值为'left'或'right'",
          "params": [
            {
              "name": "value",
              "description": "右面板值",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "data",
              "description": "右面板数据",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra",
              "description": "额外参数",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "extra.leftValue",
              "description": "左面板值",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.leftData",
              "description": "左面板数据",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.movedValue",
              "description": "发生移动的值",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.movedData",
              "description": "发生移动的数据",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "extra.direction",
              "description": "移动的方向，值为'left'或'right'",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "showSearch": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示搜索框",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否显示搜索框"
        },
        "searchPlaceholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "搜索框占位符",
          "defaultValue": {
            "value": "'Search'",
            "computed": false
          },
          "docblock": "搜索框占位符"
        },
        "titles": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "node"
            }
          },
          "required": false,
          "description": "左右面板标题",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "左右面板标题"
        },
        "operations": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "node"
            }
          },
          "required": false,
          "description": "向右向左移动按钮显示内容",
          "defaultValue": {
            "value": "[<Icon type=\"arrow-right\" />, <Icon type=\"arrow-left\" />]",
            "computed": false
          },
          "docblock": "向右向左移动按钮显示内容"
        },
        "defaultLeftChecked": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "左面板默认选中值",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "左面板默认选中值"
        },
        "defaultRightChecked": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "右面板默认选中值",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "右面板默认选中值"
        },
        "listStyle": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "左右面板列表自定义样式",
          "docblock": "左右面板列表自定义样式",
          "properties": []
        },
        "locale": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义国际化文案对象",
          "docblock": "自定义国际化文案对象",
          "properties": []
        },
        "language": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'zh-cn'",
                "computed": false
              },
              {
                "value": "'en-us'",
                "computed": false
              },
              {
                "value": "'zh-tw'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "自定义国际化语言",
          "docblock": "自定义国际化语言"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\ndataSource | 数据源 | Array&lt;Object&gt; | []\nvalue | （用于受控）当前值 | Array&lt;String&gt; | -\ndefaultValue | （用于非受控）初始值 | Array&lt;String&gt; | []\nonChange | 值发生改变的时候触发的回调函数<br><br>**签名**:<br>Function(value: Array, data: Array, extra: Object) => void<br>**参数**:<br>*value*: {Array} 右面板值<br>*data*: {Array} 右面板数据<br>*extra*: {Object} 额外参数<br>*extra.leftValue*: {Array} 左面板值<br>*extra.leftData*: {Array} 左面板数据<br>*extra.movedValue*: {Array} 发生移动的值<br>*extra.movedData*: {Object} 发生移动的数据<br>*extra.direction*: {String} 移动的方向，值为'left'或'right' | Function | -\nshowSearch | 是否显示搜索框 | Boolean | false\nsearchPlaceholder | 搜索框占位符 | String | 'Search'\ntitles | 左右面板标题 | Array&lt;ReactNode&gt; | []\noperations | 向右向左移动按钮显示内容 | Array&lt;ReactNode&gt; | [&lt;Icon type=\"arrow-right\" /&gt;, &lt;Icon type=\"arrow-left\" /&gt;]\ndefaultLeftChecked | 左面板默认选中值 | Array&lt;String&gt; | []\ndefaultRightChecked | 右面板默认选中值 | Array&lt;String&gt; | []\nlistStyle | 左右面板列表自定义样式 | Object | -\nlocale | 自定义国际化文案对象 | Object | -\nlanguage | 自定义国际化语言<br><br>**可选值**:<br>'zh-cn', 'en-us', 'zh-tw' | Enum | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Transfer } from \"@icedesign/base\";\n\nconst dataSource = (() => {\n  const dataSource = [];\n\n  for (let i = 0; i < 10; i++) {\n    dataSource.push({\n      label: `content${i}`,\n      value: `${i}`,\n      disabled: i % 4 === 0\n    });\n  }\n\n  return dataSource;\n})();\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  render() {\n    return (\n      <Transfer\n        defaultValue={[\"3\"]}\n        dataSource={dataSource}\n        defaultLeftChecked={[\"1\"]}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n最简单的用法。\n\n"
      },
      {
        "title": "受控",
        "order": "1",
        "jsx": "import { Transfer } from \"@icedesign/base\";\n\nconst dataSource = (() => {\n  const dataSource = [];\n\n  for (let i = 0; i < 10; i++) {\n    dataSource.push({\n      label: `content${i}`,\n      value: `${i}`,\n      disabled: i % 4 === 0\n    });\n  }\n\n  return dataSource;\n})();\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: [\"3\"]\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <Transfer\n        value={this.state.value}\n        dataSource={dataSource}\n        defaultLeftChecked={[\"1\"]}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n展示受控的用法。\n\n"
      },
      {
        "title": "自定义",
        "order": "3",
        "jsx": "import { Transfer } from \"@icedesign/base\";\n\nconst dataSource = (() => {\n  const dataSource = [];\n\n  for (let i = 0; i < 10; i++) {\n    dataSource.push({\n      label:\n        i % 3 === 0\n          ? `content${i}contentcontentcontentcontentcontent`\n          : `content${i}`,\n      value: `${i}`,\n      disabled: i % 4 === 0\n    });\n  }\n\n  return dataSource;\n})();\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  render() {\n    return (\n      <Transfer\n        defaultValue={[\"3\"]}\n        dataSource={dataSource}\n        listStyle={{ width: \"200px\", height: \"192px\" }}\n        defaultLeftChecked={[\"1\"]}\n        onChange={this.handleChange}\n        language=\"en-us\"\n        titles={[\"Source\", \"Target\"]}\n        operations={[\">>\", \"<<\"]}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n展示自定义样式的用法。\n\n"
      },
      {
        "title": "搜索",
        "order": "2",
        "jsx": "import { Transfer } from \"@icedesign/base\";\n\nconst dataSource = (() => {\n  const dataSource = [];\n\n  for (let i = 0; i < 10; i++) {\n    dataSource.push({\n      label: `content${i}`,\n      value: `${i}`,\n      disabled: i % 4 === 0\n    });\n  }\n\n  return dataSource;\n})();\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value, data, extra) {\n    console.log(value, data, extra);\n  }\n\n  render() {\n    return (\n      <Transfer\n        showSearch\n        defaultValue={[\"3\"]}\n        dataSource={dataSource}\n        defaultLeftChecked={[\"1\"]}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n展示搜索的用法。\n\n"
      }
    ]
  },
  {
    "name": "TreeSelect",
    "category": "Components",
    "title": "树型选择控件",
    "type": "基本",
    "importStatement": "import { TreeSelect } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n类似 Select 的选择控件，可选择的数据结构是一个树形结构时，可以使用 TreeSelect，例如公司层级、学科系统、分类目录等等。\n\n",
    "propsSchema": {
      "name": "TreeSelect",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "树节点",
          "docblock": "树节点"
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "选择框大小",
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          },
          "docblock": "选择框大小"
        },
        "shape": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'normal'",
                "computed": false
              },
              {
                "value": "'arrow-only'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "选择框形状",
          "defaultValue": {
            "value": "'normal'",
            "computed": false
          },
          "docblock": "选择框形状"
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "选择框占位符",
          "docblock": "选择框占位符"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否禁用",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否禁用"
        },
        "hasArrow": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示右侧的箭头",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示右侧的箭头"
        },
        "hasClear": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效"
        },
        "autoWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "下拉框是否与选择器对齐",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "下拉框是否与选择器对齐"
        },
        "dataSource": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "object"
            }
          },
          "required": false,
          "description": "数据源，该属性优先级高于 children",
          "docblock": "数据源，该属性优先级高于 children"
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              }
            ]
          },
          "required": false,
          "description": "（受控）当前值",
          "docblock": "（受控）当前值"
        },
        "defaultValue": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              }
            ]
          },
          "required": false,
          "description": "（非受控）默认值",
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "docblock": "（非受控）默认值"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "选中值改变时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "选中值改变时触发的回调函数\n@param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组\n@param {Object|Array} data 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点",
          "params": [
            {
              "name": "value",
              "description": "选中的值，单选时返回单个值，多选时返回数组",
              "type": {
                "name": "union",
                "value": [
                  "String",
                  "Array"
                ]
              }
            },
            {
              "name": "data",
              "description": "选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点",
              "type": {
                "name": "union",
                "value": [
                  "Object",
                  "Array"
                ]
              }
            }
          ],
          "returns": null
        },
        "defaultVisible": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "初始下拉框是否显示",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "初始下拉框是否显示"
        },
        "showSearch": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示搜索框",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否显示搜索框"
        },
        "onSearch": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "在搜索框中输入时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "在搜索框中输入时触发的回调函数\n@param {String} keyword 输入的关键字",
          "params": [
            {
              "name": "keyword",
              "description": "输入的关键字",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "multiple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否支持多选",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否支持多选"
        },
        "treeCheckable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "下拉框中的树是否支持勾选节点的复选框",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "下拉框中的树是否支持勾选节点的复选框"
        },
        "treeCheckStrictly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）"
        },
        "treeDefaultExpandAll": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "下拉框中的树是否默认展开所有节点",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "下拉框中的树是否默认展开所有节点"
        },
        "treeDefaultExpandedKeys": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "下拉框中的树默认展开节点key的数组",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "下拉框中的树默认展开节点key的数组"
        },
        "treeLoadData": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=tree#tree-4)",
          "docblock": "下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=tree#tree-4)\n@param {ReactElement} node 被点击展开的节点",
          "params": [
            {
              "name": "node",
              "description": "被点击展开的节点",
              "type": {
                "name": "ReactElement"
              }
            }
          ],
          "returns": null
        },
        "popupClassName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "下拉框样式自定义类名",
          "docblock": "下拉框样式自定义类名"
        },
        "container": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "下拉框挂载的容器节点",
          "docblock": "下拉框挂载的容器节点"
        }
      },
      "methods": [],
      "subComponents": []
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 树节点 | ReactNode | -\nsize | 选择框大小<br><br>**可选值**:<br>'small', 'medium', 'large' | Enum | 'medium'\nshape | 选择框形状<br><br>**可选值**:<br>'normal', 'arrow-only' | Enum | 'normal'\nplaceholder | 选择框占位符 | String | -\ndisabled | 是否禁用 | Boolean | false\nhasArrow | 是否显示右侧的箭头 | Boolean | true\nhasClear | 是否显示清空按钮，该按钮可以清空当前选中的值，该属性仅在单选模式下有效 | Boolean | false\nautoWidth | 下拉框是否与选择器对齐 | Boolean | false\ndataSource | 数据源，该属性优先级高于 children | Array&lt;Object&gt; | -\nvalue | （受控）当前值 | String/Array&lt;String&gt; | -\ndefaultValue | （非受控）默认值 | String/Array&lt;String&gt; | null\nonChange | 选中值改变时触发的回调函数<br><br>**签名**:<br>Function(value: String/Array, data: Object/Array) => void<br>**参数**:<br>*value*: {String/Array} 选中的值，单选时返回单个值，多选时返回数组<br>*data*: {Object/Array} 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点 | Function | () =&gt; {}\ndefaultVisible | 初始下拉框是否显示 | Boolean | false\nshowSearch | 是否显示搜索框 | Boolean | false\nonSearch | 在搜索框中输入时触发的回调函数<br><br>**签名**:<br>Function(keyword: String) => void<br>**参数**:<br>*keyword*: {String} 输入的关键字 | Function | () =&gt; {}\nmultiple | 是否支持多选 | Boolean | false\ntreeCheckable | 下拉框中的树是否支持勾选节点的复选框 | Boolean | false\ntreeCheckStrictly | 下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联） | Boolean | false\ntreeDefaultExpandAll | 下拉框中的树是否默认展开所有节点 | Boolean | false\ntreeDefaultExpandedKeys | 下拉框中的树默认展开节点key的数组 | Array&lt;String&gt; | []\ntreeLoadData | 下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](http://fusion-demo.alibaba-inc.com/components?type=next&themeId=next&name=tree#tree-4)<br><br>**签名**:<br>Function(node: ReactElement) => void<br>**参数**:<br>*node*: {ReactElement} 被点击展开的节点 | Function | -\npopupClassName | 下拉框样式自定义类名 | String | -\ncontainer | 下拉框挂载的容器节点 | String/Function | -\n",
    "methodREADME": [],
    "subComponentsREADME": [],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { TreeSelect } from \"@icedesign/base\";\n\nconst TreeNode = TreeSelect.Node;\n\nclass Demo extends React.Component {\n  handleChange(value, data) {\n    console.log(value, data);\n  }\n\n  render() {\n    return (\n      <TreeSelect\n        treeDefaultExpandAll\n        onChange={::this.handleChange}\n        hasClear\n        autoWidth\n        style={{ width: 200 }}\n      >\n        <TreeNode key=\"1\" value=\"1\" label=\"服装\">\n          <TreeNode key=\"2\" value=\"2\" label=\"男装\">\n            <TreeNode key=\"4\" value=\"4\" label=\"外套\" />\n            <TreeNode key=\"5\" value=\"5\" label=\"夹克\" />\n          </TreeNode>\n          <TreeNode key=\"3\" value=\"3\" label=\"女装\">\n            <TreeNode key=\"6\" value=\"6\" label=\"裙子\" />\n          </TreeNode>\n        </TreeNode>\n      </TreeSelect>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n最简单的单选用法。\n\n"
      },
      {
        "title": "复选框多选",
        "order": "2",
        "jsx": "import { TreeSelect } from \"@icedesign/base\";\n\nconst treeData = [\n  {\n    label: \"服装\",\n    value: \"1\",\n    children: [\n      {\n        label: \"男装\",\n        value: \"2\",\n        children: [\n          {\n            label: \"外套\",\n            value: \"4\"\n          },\n          {\n            label: \"夹克\",\n            value: \"5\"\n          }\n        ]\n      },\n      {\n        label: \"女装\",\n        value: \"3\",\n        children: [\n          {\n            label: \"裙子\",\n            value: \"6\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  handleChange(value, data) {\n    console.log(value, data);\n  }\n\n  render() {\n    return (\n      <TreeSelect\n        treeDefaultExpandAll\n        treeCheckable\n        autoWidth\n        dataSource={treeData}\n        onChange={::this.handleChange}\n        style={{ width: 200 }}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n展示复选框多选的功能。\n\n"
      },
      {
        "title": "受控",
        "order": "3",
        "jsx": "import { TreeSelect } from \"@icedesign/base\";\n\nconst treeData = [\n  {\n    label: \"服装\",\n    value: \"1\",\n    children: [\n      {\n        label: \"男装\",\n        value: \"2\",\n        children: [\n          {\n            label: \"外套\",\n            value: \"4\"\n          },\n          {\n            label: \"夹克\",\n            value: \"5\"\n          }\n        ]\n      },\n      {\n        label: \"女装\",\n        value: \"3\",\n        children: [\n          {\n            label: \"裙子\",\n            value: \"6\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  state = {\n    value: [\"4\", \"6\"]\n  };\n\n  handleChange(value, data) {\n    console.log(value, data);\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return (\n      <TreeSelect\n        treeDefaultExpandAll\n        treeCheckable\n        autoWidth\n        dataSource={treeData}\n        value={this.state.value}\n        onChange={::this.handleChange}\n        style={{ width: 200 }}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n展示树选择受控的用法。\n\n"
      },
      {
        "title": "使用数据直接生成",
        "order": "1",
        "jsx": "import { TreeSelect } from \"@icedesign/base\";\n\nconst treeData = [\n  {\n    label: \"服装\",\n    value: \"1\",\n    selectable: false,\n    children: [\n      {\n        label: \"男装\",\n        value: \"2\",\n        children: [\n          {\n            label: \"外套\",\n            value: \"4\"\n          },\n          {\n            label: \"夹克\",\n            value: \"5\",\n            disabled: true\n          }\n        ]\n      },\n      {\n        label: \"女装\",\n        value: \"3\",\n        children: [\n          {\n            label: \"裙子\",\n            value: \"6\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  handleChange(value, data) {\n    console.log(value, data);\n  }\n\n  render() {\n    return (\n      <TreeSelect\n        treeDefaultExpandAll\n        dataSource={treeData}\n        onChange={::this.handleChange}\n        style={{ width: 200 }}\n        autoWidth\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n使用`dataSource`生成树结构，除设置label, value, children属性外，还可传入TreeNode的其他属性，包括selectable, disabled, disableCheckbox, isLeaf，推荐使用`dataSource`而不是手动生成`TreeNode`的方式生成树，这样使用更简单，性能更好。\n\n"
      },
      {
        "title": "搜索用法",
        "order": "4",
        "jsx": "import { TreeSelect } from \"@icedesign/base\";\n\nconst treeData = [\n  {\n    label: \"服装\",\n    value: \"1\",\n    selectable: false,\n    children: [\n      {\n        label: \"男装\",\n        value: \"2\",\n        children: [\n          {\n            label: \"外套\",\n            value: \"4\"\n          },\n          {\n            label: \"夹克\",\n            value: \"5\",\n            disabled: true\n          }\n        ]\n      },\n      {\n        label: \"女装\",\n        value: \"3\",\n        children: [\n          {\n            label: \"裙子\",\n            value: \"6\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  handleChange(value, data) {\n    console.log(value, data);\n  }\n\n  handleSearch(keyword) {\n    console.log(keyword);\n  }\n\n  render() {\n    return (\n      <TreeSelect\n        treeDefaultExpandAll\n        autoWidth\n        showSearch\n        dataSource={treeData}\n        onChange={::this.handleChange}\n        onSearch={::this.handleSearch}\n        style={{ width: 200 }}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n展示树选择的搜索用法。\n\n"
      }
    ]
  },
  {
    "name": "Tree",
    "category": "Components",
    "title": "树形控件",
    "type": "基本",
    "importStatement": "import { Tree } from '@icedesign/base';",
    "body": "\n\n## 何时使用\n\n文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用`树控件`可以完整展现其中的层级关系，并具有展开收起选择等交互功能。\n\n",
    "propsSchema": {
      "name": "Tree",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "样式类名的品牌前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式类名的品牌前缀"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义类名",
          "docblock": "自定义类名"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "树节点",
          "docblock": "树节点"
        },
        "showLine": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示树的线",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否显示树的线"
        },
        "selectable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否支持选中节点",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否支持选中节点"
        },
        "selectedKeys": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "（用于受控）当前选中节点key的数组",
          "docblock": "（用于受控）当前选中节点key的数组"
        },
        "defaultSelectedKeys": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "（用于非受控）默认选中节点key的数组",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "（用于非受控）默认选中节点key的数组"
        },
        "onSelect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "选中或取消选中节点时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "选中或取消选中节点时触发的回调函数\n@param {Array} selectedKeys 选中节点key的数组\n@param {Object} extra 额外参数\n@param {Array} extra.selectedNodes 选中节点的数组\n@param {ReactElement} extra.node 当前操作的节点\n@param {Boolean} extra.selected 当前操作是否是选中\n@param {String} extra.event 当前操作的类型，值为'select'",
          "params": [
            {
              "name": "selectedKeys",
              "description": "选中节点key的数组",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra",
              "description": "额外参数",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "extra.selectedNodes",
              "description": "选中节点的数组",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.node",
              "description": "当前操作的节点",
              "type": {
                "name": "ReactElement"
              }
            },
            {
              "name": "extra.selected",
              "description": "当前操作是否是选中",
              "type": {
                "name": "Boolean"
              }
            },
            {
              "name": "extra.event",
              "description": "当前操作的类型，值为'select'",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "multiple": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否支持多选",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否支持多选"
        },
        "checkable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否支持勾选节点的复选框",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否支持勾选节点的复选框"
        },
        "checkedKeys": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false,
          "description": "（用于受控）当前勾选复选框节点key的数组或`{checked: Array, halfChecked: Array}`的对象",
          "docblock": "（用于受控）当前勾选复选框节点key的数组或`{checked: Array, halfChecked: Array}`的对象"
        },
        "defaultCheckedKeys": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "（用于非受控）默认勾选复选框节点key的数组",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "（用于非受控）默认勾选复选框节点key的数组"
        },
        "checkStrictly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "勾选节点复选框是否完全受控（父子节点选中状态不再关联）",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "勾选节点复选框是否完全受控（父子节点选中状态不再关联）"
        },
        "enableCheckedCache": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否启用勾选节点复选框的缓存来提高性能，如果dataSource需要被动态更新，请将其设置为false",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否启用勾选节点复选框的缓存来提高性能，如果dataSource需要被动态更新，请将其设置为false"
        },
        "onCheck": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "勾选或取消勾选复选框时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "勾选或取消勾选复选框时触发的回调函数\n@param {Array} checkedKeys 勾选复选框节点key的数组\n@param {Object} extra 额外参数\n@param {Array} extra.checkedNodes 勾选复选框节点的数组\n@param {Array} extra.checkedNodesPositions 包含有勾选复选框节点和其位置的对象的数组\n@param {Array} extra.halfCheckedKeys 半选复选框节点key的数组\n@param {ReactElement} extra.node 当前操作的节点\n@param {Boolean} extra.checked 当前操作是否是勾选\n@param {String} extra.event 当前操作的类型，值为'check'",
          "params": [
            {
              "name": "checkedKeys",
              "description": "勾选复选框节点key的数组",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra",
              "description": "额外参数",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "extra.checkedNodes",
              "description": "勾选复选框节点的数组",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.checkedNodesPositions",
              "description": "包含有勾选复选框节点和其位置的对象的数组",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.halfCheckedKeys",
              "description": "半选复选框节点key的数组",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra.node",
              "description": "当前操作的节点",
              "type": {
                "name": "ReactElement"
              }
            },
            {
              "name": "extra.checked",
              "description": "当前操作是否是勾选",
              "type": {
                "name": "Boolean"
              }
            },
            {
              "name": "extra.event",
              "description": "当前操作的类型，值为'check'",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "expandedKeys": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "（用于受控）当前展开的节点key的数组",
          "docblock": "（用于受控）当前展开的节点key的数组"
        },
        "defaultExpandedKeys": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "（用于非受控）默认展开的节点key的数组",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "（用于非受控）默认展开的节点key的数组"
        },
        "defaultExpandAll": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否默认展开所有节点",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否默认展开所有节点"
        },
        "autoExpandParent": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否自动展开父节点",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否自动展开父节点"
        },
        "onExpand": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "展开或收起节点时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "展开或收起节点时触发的回调函数\n@param {Array} expandedKeys 展开的节点key的数组\n@param {Object} extra 额外参数\n@param {ReactElement} extra.node 当前操作的节点\n@param {Boolean} extra.expanded 当前操作是否是展开",
          "params": [
            {
              "name": "expandedKeys",
              "description": "展开的节点key的数组",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "extra",
              "description": "额外参数",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "extra.node",
              "description": "当前操作的节点",
              "type": {
                "name": "ReactElement"
              }
            },
            {
              "name": "extra.expanded",
              "description": "当前操作是否是展开",
              "type": {
                "name": "Boolean"
              }
            }
          ],
          "returns": null
        },
        "editable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否支持编辑节点内容",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否支持编辑节点内容"
        },
        "onEditFinish": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "编辑节点内容完成时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "编辑节点内容完成时触发的回调函数\n@param {String} key 编辑节点的key\n@param {String} label 编辑节点完成时节点的文本",
          "params": [
            {
              "name": "key",
              "description": "编辑节点的key",
              "type": {
                "name": "String"
              }
            },
            {
              "name": "label",
              "description": "编辑节点完成时节点的文本",
              "type": {
                "name": "String"
              }
            }
          ],
          "returns": null
        },
        "draggable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否支持拖拽节点",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "是否支持拖拽节点"
        },
        "onDragStart": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "开始拖拽节点时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "开始拖拽节点时触发的回调函数\n@param {Object} info 拖拽信息\n@param {Object} info.event 事件对象\n@param {ReactElement} info.node 拖拽的节点",
          "params": [
            {
              "name": "info",
              "description": "拖拽信息",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.event",
              "description": "事件对象",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.node",
              "description": "拖拽的节点",
              "type": {
                "name": "ReactElement"
              }
            }
          ],
          "returns": null
        },
        "onDragEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "拖拽节点进入目标节点时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "拖拽节点进入目标节点时触发的回调函数\n@param {Object} info 拖拽信息\n@param {Object} info.event 事件对象\n@param {ReactElement} info.node 目标节点\n@param {Array} info.expandedKeys 当前展开的节点key的数组",
          "params": [
            {
              "name": "info",
              "description": "拖拽信息",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.event",
              "description": "事件对象",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.node",
              "description": "目标节点",
              "type": {
                "name": "ReactElement"
              }
            },
            {
              "name": "info.expandedKeys",
              "description": "当前展开的节点key的数组",
              "type": {
                "name": "Array"
              }
            }
          ],
          "returns": null
        },
        "onDragOver": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "拖拽节点在目标节点上移动的时候触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "拖拽节点在目标节点上移动的时候触发的回调函数\n@param {Object} info 拖拽信息\n@param {Object} info.event 事件对象\n@param {ReactElement} info.node 目标节点",
          "params": [
            {
              "name": "info",
              "description": "拖拽信息",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.event",
              "description": "事件对象",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.node",
              "description": "目标节点",
              "type": {
                "name": "ReactElement"
              }
            }
          ],
          "returns": null
        },
        "onDragLeave": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "拖拽节点离开目标节点时触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "拖拽节点离开目标节点时触发的回调函数\n@param {Object} info 拖拽信息\n@param {Object} info.event 事件对象\n@param {ReactElement} info.node 目标节点",
          "params": [
            {
              "name": "info",
              "description": "拖拽信息",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.event",
              "description": "事件对象",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.node",
              "description": "目标节点",
              "type": {
                "name": "ReactElement"
              }
            }
          ],
          "returns": null
        },
        "onDrop": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "拖拽节点放入目标节点内或前后触发的回调函数",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "拖拽节点放入目标节点内或前后触发的回调函数\n@param {Object} info 拖拽信息\n@param {Object} info.event 事件对象\n@param {ReactElement} info.node 目标节点\n@param {ReactElement} info.dragNode 拖拽的节点\n@param {Array} info.dragNodesKeys 拖拽的节点和其子节点key的数组\n@param {Number} info.dropPosition 拖拽的节点在拖拽后被放置在当前层级的位置\n@param {Boolean} info.dropToGap 是否被放置在目标节点的前后（没有被放置在目标节点内部）",
          "params": [
            {
              "name": "info",
              "description": "拖拽信息",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.event",
              "description": "事件对象",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.node",
              "description": "目标节点",
              "type": {
                "name": "ReactElement"
              }
            },
            {
              "name": "info.dragNode",
              "description": "拖拽的节点",
              "type": {
                "name": "ReactElement"
              }
            },
            {
              "name": "info.dragNodesKeys",
              "description": "拖拽的节点和其子节点key的数组",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "info.dropPosition",
              "description": "拖拽的节点在拖拽后被放置在当前层级的位置",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "info.dropToGap",
              "description": "是否被放置在目标节点的前后（没有被放置在目标节点内部）",
              "type": {
                "name": "Boolean"
              }
            }
          ],
          "returns": null
        },
        "canDrop": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "节点是否可被作为拖拽的目标节点",
          "defaultValue": {
            "value": "() => true",
            "computed": false
          },
          "docblock": "节点是否可被作为拖拽的目标节点\n@param {Object} info 拖拽信息\n@param {ReactElement} info.node 目标节点\n@param {ReactElement} info.dragNode 拖拽的节点\n@param {Array} info.dragNodesKeys 拖拽的节点和其子节点key的数组\n@param {Number} info.dropPosition 拖拽的节点在拖拽后被放置在当前层级的位置\n@param {Boolean} info.dropToGap 是否被放置在目标节点的前后（没有被放置在目标节点内部）\n@return {Boolean} 是否可以被当作目标节点",
          "params": [
            {
              "name": "info",
              "description": "拖拽信息",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "info.node",
              "description": "目标节点",
              "type": {
                "name": "ReactElement"
              }
            },
            {
              "name": "info.dragNode",
              "description": "拖拽的节点",
              "type": {
                "name": "ReactElement"
              }
            },
            {
              "name": "info.dragNodesKeys",
              "description": "拖拽的节点和其子节点key的数组",
              "type": {
                "name": "Array"
              }
            },
            {
              "name": "info.dropPosition",
              "description": "拖拽的节点在拖拽后被放置在当前层级的位置",
              "type": {
                "name": "Number"
              }
            },
            {
              "name": "info.dropToGap",
              "description": "是否被放置在目标节点的前后（没有被放置在目标节点内部）",
              "type": {
                "name": "Boolean"
              }
            }
          ],
          "returns": {
            "description": "是否可以被当作目标节点",
            "type": {
              "name": "Boolean"
            }
          }
        },
        "loadData": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "异步加载数据的函数",
          "docblock": "异步加载数据的函数\n@param {ReactElement} node 被点击展开的节点",
          "params": [
            {
              "name": "node",
              "description": "被点击展开的节点",
              "type": {
                "name": "ReactElement"
              }
            }
          ],
          "returns": null
        },
        "filterTreeNode": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "按需筛选高亮节点",
          "docblock": "按需筛选高亮节点\n@param {ReactElement} node 待筛选的节点\n@return {Boolean} 是否被筛选中",
          "params": [
            {
              "name": "node",
              "description": "待筛选的节点",
              "type": {
                "name": "ReactElement"
              }
            }
          ],
          "returns": {
            "description": "是否被筛选中",
            "type": {
              "name": "Boolean"
            }
          }
        },
        "onRightClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "右键点击节点时触发的回调函数",
          "docblock": "右键点击节点时触发的回调函数\n@param {Object} event 事件对象\n@param {ReactElement} node 点击的节点",
          "params": [
            {
              "name": "event",
              "description": "事件对象",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "node",
              "description": "点击的节点",
              "type": {
                "name": "ReactElement"
              }
            }
          ],
          "returns": null
        },
        "isLabelBlock": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助flex实现，暂时只支持ie10+)",
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "docblock": "设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助flex实现，暂时只支持ie10+)"
        },
        "animation": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否开启展开收起动画",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否开启展开收起动画"
        }
      },
      "methods": [],
      "subComponents": [
        {
          "name": "Node",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式类名的品牌前缀",
              "docblock": "样式类名的品牌前缀"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "children": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "树节点",
              "docblock": "树节点"
            },
            "label": {
              "type": {
                "name": "node"
              },
              "required": false,
              "description": "节点文本内容",
              "defaultValue": {
                "value": "'---'",
                "computed": false
              },
              "docblock": "节点文本内容"
            },
            "selectable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "单独设置是否支持选中，覆盖Tree的selectable",
              "docblock": "单独设置是否支持选中，覆盖Tree的selectable"
            },
            "editable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "单独设置是否支持编辑，覆盖Tree的editable",
              "docblock": "单独设置是否支持编辑，覆盖Tree的editable"
            },
            "draggable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "单独设置是否支持拖拽，覆盖Tree的draggable",
              "docblock": "单独设置是否支持拖拽，覆盖Tree的draggable"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否禁止节点响应",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否禁止节点响应"
            },
            "disableCheckbox": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否禁止勾选节点复选框",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否禁止勾选节点复选框"
            },
            "isLeaf": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否是叶子节点，设置loadData时生效",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "是否是叶子节点，设置loadData时生效"
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | 'next-'\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 树节点 | ReactNode | -\nshowLine | 是否显示树的线 | Boolean | false\nselectable | 是否支持选中节点 | Boolean | true\nselectedKeys | （用于受控）当前选中节点key的数组 | Array&lt;String&gt; | -\ndefaultSelectedKeys | （用于非受控）默认选中节点key的数组 | Array&lt;String&gt; | []\nonSelect | 选中或取消选中节点时触发的回调函数<br><br>**签名**:<br>Function(selectedKeys: Array, extra: Object) => void<br>**参数**:<br>*selectedKeys*: {Array} 选中节点key的数组<br>*extra*: {Object} 额外参数<br>*extra.selectedNodes*: {Array} 选中节点的数组<br>*extra.node*: {ReactElement} 当前操作的节点<br>*extra.selected*: {Boolean} 当前操作是否是选中<br>*extra.event*: {String} 当前操作的类型，值为'select' | Function | () =&gt; {}\nmultiple | 是否支持多选 | Boolean | false\ncheckable | 是否支持勾选节点的复选框 | Boolean | false\ncheckedKeys | （用于受控）当前勾选复选框节点key的数组或`{checked: Array, halfChecked: Array}`的对象 | Array&lt;String&gt;/Object | -\ndefaultCheckedKeys | （用于非受控）默认勾选复选框节点key的数组 | Array&lt;String&gt; | []\ncheckStrictly | 勾选节点复选框是否完全受控（父子节点选中状态不再关联） | Boolean | false\nenableCheckedCache | 是否启用勾选节点复选框的缓存来提高性能，如果dataSource需要被动态更新，请将其设置为false | Boolean | true\nonCheck | 勾选或取消勾选复选框时触发的回调函数<br><br>**签名**:<br>Function(checkedKeys: Array, extra: Object) => void<br>**参数**:<br>*checkedKeys*: {Array} 勾选复选框节点key的数组<br>*extra*: {Object} 额外参数<br>*extra.checkedNodes*: {Array} 勾选复选框节点的数组<br>*extra.checkedNodesPositions*: {Array} 包含有勾选复选框节点和其位置的对象的数组<br>*extra.halfCheckedKeys*: {Array} 半选复选框节点key的数组<br>*extra.node*: {ReactElement} 当前操作的节点<br>*extra.checked*: {Boolean} 当前操作是否是勾选<br>*extra.event*: {String} 当前操作的类型，值为'check' | Function | () =&gt; {}\nexpandedKeys | （用于受控）当前展开的节点key的数组 | Array&lt;String&gt; | -\ndefaultExpandedKeys | （用于非受控）默认展开的节点key的数组 | Array&lt;String&gt; | []\ndefaultExpandAll | 是否默认展开所有节点 | Boolean | false\nautoExpandParent | 是否自动展开父节点 | Boolean | true\nonExpand | 展开或收起节点时触发的回调函数<br><br>**签名**:<br>Function(expandedKeys: Array, extra: Object) => void<br>**参数**:<br>*expandedKeys*: {Array} 展开的节点key的数组<br>*extra*: {Object} 额外参数<br>*extra.node*: {ReactElement} 当前操作的节点<br>*extra.expanded*: {Boolean} 当前操作是否是展开 | Function | () =&gt; {}\neditable | 是否支持编辑节点内容 | Boolean | false\nonEditFinish | 编辑节点内容完成时触发的回调函数<br><br>**签名**:<br>Function(key: String, label: String) => void<br>**参数**:<br>*key*: {String} 编辑节点的key<br>*label*: {String} 编辑节点完成时节点的文本 | Function | () =&gt; {}\ndraggable | 是否支持拖拽节点 | Boolean | false\nonDragStart | 开始拖拽节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.event*: {Object} 事件对象<br>*info.node*: {ReactElement} 拖拽的节点 | Function | () =&gt; {}\nonDragEnter | 拖拽节点进入目标节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.event*: {Object} 事件对象<br>*info.node*: {ReactElement} 目标节点<br>*info.expandedKeys*: {Array} 当前展开的节点key的数组 | Function | () =&gt; {}\nonDragOver | 拖拽节点在目标节点上移动的时候触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.event*: {Object} 事件对象<br>*info.node*: {ReactElement} 目标节点 | Function | () =&gt; {}\nonDragLeave | 拖拽节点离开目标节点时触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.event*: {Object} 事件对象<br>*info.node*: {ReactElement} 目标节点 | Function | () =&gt; {}\nonDrop | 拖拽节点放入目标节点内或前后触发的回调函数<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.event*: {Object} 事件对象<br>*info.node*: {ReactElement} 目标节点<br>*info.dragNode*: {ReactElement} 拖拽的节点<br>*info.dragNodesKeys*: {Array} 拖拽的节点和其子节点key的数组<br>*info.dropPosition*: {Number} 拖拽的节点在拖拽后被放置在当前层级的位置<br>*info.dropToGap*: {Boolean} 是否被放置在目标节点的前后（没有被放置在目标节点内部） | Function | () =&gt; {}\ncanDrop | 节点是否可被作为拖拽的目标节点<br><br>**签名**:<br>Function(info: Object) => Boolean<br>**参数**:<br>*info*: {Object} 拖拽信息<br>*info.node*: {ReactElement} 目标节点<br>*info.dragNode*: {ReactElement} 拖拽的节点<br>*info.dragNodesKeys*: {Array} 拖拽的节点和其子节点key的数组<br>*info.dropPosition*: {Number} 拖拽的节点在拖拽后被放置在当前层级的位置<br>*info.dropToGap*: {Boolean} 是否被放置在目标节点的前后（没有被放置在目标节点内部）<br>**返回值**:<br>{Boolean} 是否可以被当作目标节点<br> | Function | () =&gt; true\nloadData | 异步加载数据的函数<br><br>**签名**:<br>Function(node: ReactElement) => void<br>**参数**:<br>*node*: {ReactElement} 被点击展开的节点 | Function | -\nfilterTreeNode | 按需筛选高亮节点<br><br>**签名**:<br>Function(node: ReactElement) => Boolean<br>**参数**:<br>*node*: {ReactElement} 待筛选的节点<br>**返回值**:<br>{Boolean} 是否被筛选中<br> | Function | -\nonRightClick | 右键点击节点时触发的回调函数<br><br>**签名**:<br>Function(event: Object, node: ReactElement) => void<br>**参数**:<br>*event*: {Object} 事件对象<br>*node*: {ReactElement} 点击的节点 | Function | -\nisLabelBlock | 设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助flex实现，暂时只支持ie10+) | Boolean | false\nanimation | 是否开启展开收起动画 | Boolean | true\n",
    "methodREADME": [],
    "subComponentsREADME": [
      {
        "name": "Node",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式类名的品牌前缀 | String | -\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 树节点 | ReactNode | -\nlabel | 节点文本内容 | ReactNode | '---'\nselectable | 单独设置是否支持选中，覆盖Tree的selectable | Boolean | -\neditable | 单独设置是否支持编辑，覆盖Tree的editable | Boolean | -\ndraggable | 单独设置是否支持拖拽，覆盖Tree的draggable | Boolean | -\ndisabled | 是否禁止节点响应 | Boolean | false\ndisableCheckbox | 是否禁止勾选节点复选框 | Boolean | false\nisLeaf | 是否是叶子节点，设置loadData时生效 | Boolean | false\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "基本",
        "order": "0",
        "jsx": "import { Tree } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nclass Demo extends React.Component {\n  onSelect(keys, info) {\n    console.log(\"onSelect\", keys, info);\n  }\n\n  onCheck(keys, info) {\n    console.log(\"onCheck\", keys, info);\n  }\n\n  onEditFinish(info) {\n    console.log(\"onEditFinish\", info);\n  }\n\n  onRightClick(info) {\n    console.log(\"onRightClick\", info);\n  }\n\n  render() {\n    return (\n      <Tree\n        multiple\n        checkable\n        editable\n        defaultExpandedKeys={[\"0-0-0\", \"0-0-1\"]}\n        defaultCheckedKeys={[\"0-0-0\", \"0-0-1\"]}\n        onSelect={this.onSelect}\n        onCheck={this.onCheck}\n        onEditFinish={this.onEditFinish}\n        onRightClick={this.onRightClick}\n      >\n        <TreeNode label=\"parent 1\" key=\"0-0\">\n          <TreeNode label=\"parent 1-0\" key=\"0-0-0\" disabled>\n            <TreeNode label=\"leaf\" key=\"0-0-0-0\" disableCheckbox />\n            <TreeNode label=\"leaf\" key=\"0-0-0-1\" />\n          </TreeNode>\n          <TreeNode label=\"parent 1-1\" key=\"0-0-1\">\n            <TreeNode\n              label={<span style={{ color: \"#08c\" }}>abc</span>}\n              key=\"0-0-1-0\"\n            />\n          </TreeNode>\n        </TreeNode>\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n最简单的用法，展示可展开，可选中，可勾选，可编辑，可右键，禁用，禁用勾选，默认展开，默认选中，默认勾选等功能。\n\n"
      },
      {
        "title": "父子节点选中是否关联",
        "order": "3",
        "jsx": "import { Tree, Checkbox } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nconst data = [\n  {\n    id: \"0-0\",\n    children: [\n      {\n        id: \"0-0-0\",\n        children: [\n          {\n            id: \"0-0-0-0\",\n            children: [\n              {\n                id: \"0-0-0-0-0\"\n              }\n            ]\n          },\n          {\n            id: \"0-0-0-1\"\n          }\n        ]\n      },\n      {\n        id: \"0-0-1\",\n        children: [\n          {\n            id: \"0-0-1-0\"\n          },\n          {\n            id: \"0-0-1-1\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkedKeys: [],\n      checkStrictly: false\n    };\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleCheckStrictly = this.handleCheckStrictly.bind(this);\n  }\n\n  handleCheck(keys, info) {\n    console.log(keys, info);\n\n    this.setState({\n      checkedKeys: keys\n    });\n  }\n\n  handleCheckStrictly() {\n    this.setState({\n      checkStrictly: !this.state.checkStrictly,\n      checkedKeys: []\n    });\n  }\n\n  render() {\n    const loop = data =>\n      data.map(item => {\n        return (\n          <TreeNode label={item.id} key={item.id}>\n            {item.children && item.children.length ? loop(item.children) : null}\n          </TreeNode>\n        );\n      });\n\n    const { checkedKeys, checkStrictly } = this.state;\n\n    return (\n      <div className=\"control-check-demo\">\n        <label className=\"strictly-check\">\n          <Checkbox value={checkStrictly} onChange={this.handleCheckStrictly} />\n          <span className=\"strictly-text\">\n            开启严格受控，父子节点选中不再关联\n          </span>\n        </label>\n        <Tree\n          defaultExpandAll\n          checkable\n          checkStrictly={checkStrictly}\n          checkedKeys={checkedKeys}\n          onCheck={this.handleCheck}\n        >\n          {loop(data)}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".control-check-demo .strictly-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-check-demo .strictly-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n展示父子节点选中是否关联的用法。\n\n"
      },
      {
        "title": "单选与多选",
        "order": "2",
        "jsx": "import { Tree, Checkbox } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nconst data = [\n  {\n    id: \"0-0\",\n    children: [\n      {\n        id: \"0-0-0\",\n        children: [\n          {\n            id: \"0-0-0-0\",\n            children: [\n              {\n                id: \"0-0-0-0-0\"\n              }\n            ]\n          },\n          {\n            id: \"0-0-0-1\"\n          }\n        ]\n      },\n      {\n        id: \"0-0-1\",\n        children: [\n          {\n            id: \"0-0-1-0\"\n          },\n          {\n            id: \"0-0-1-1\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedKeys: [],\n      multiple: false\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n  }\n\n  handleSelect(keys, info) {\n    console.log(keys, info);\n\n    this.setState({\n      selectedKeys: keys\n    });\n  }\n\n  handleCheck() {\n    this.setState({\n      multiple: !this.state.multiple,\n      selectedKeys: []\n    });\n  }\n\n  render() {\n    const loop = data =>\n      data.map(item => {\n        return (\n          <TreeNode label={item.id} key={item.id}>\n            {item.children && item.children.length ? loop(item.children) : null}\n          </TreeNode>\n        );\n      });\n\n    const { multiple, selectedKeys } = this.state;\n\n    return (\n      <div className=\"control-select-demo\">\n        <label className=\"multiple-check\">\n          <Checkbox value={multiple} onChange={this.handleCheck} />\n          <span className=\"multiple-text\">开启多选</span>\n        </label>\n        <Tree\n          defaultExpandAll\n          multiple={multiple}\n          selectedKeys={selectedKeys}\n          onSelect={this.handleSelect}\n        >\n          {loop(data)}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": ".control-select-demo .multiple-check {\n    display: block;\n    margin-bottom: 10px;\n}\n\n.control-select-demo .multiple-text {\n    display: inline-block;\n    margin-left: 10px;\n    vertical-align: middle;\n    color: #666;\n    font-size: 14px;\n}\n",
        "body": "\n展示单选与多选的用法。\n\n"
      },
      {
        "title": "拖动",
        "order": "6",
        "jsx": "import { Tree } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || \"0\";\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ label: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gData,\n      expandedKeys: [\"0-0\", \"0-0-0\", \"0-0-0-0\"]\n    };\n  }\n  // eslint-disable-next-line\n  onDragEnter(info) {\n    // expandedKeys 需要受控时设置\n    // this.setState({\n    //   expandedKeys: info.expandedKeys,\n    // });\n  }\n  onDrop(info) {\n    const dragKey = info.dragNode.props.eventKey;\n    const dropKey = info.node.props.eventKey;\n    const dropPos = info.node.props.pos.split(\"-\");\n    // 通过info.node.props.pos计算得到的dropPos为-1则为拖动到节点之上，1则为拖动到节点之下\n    const dropPosition =\n      info.dropPosition - Number(dropPos[dropPos.length - 1]);\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n    const data = [...this.state.gData];\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n    // dropToGap为true 则拖动到节点内部\n    if (info.dropToGap) {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    } else {\n      loop(data, dropKey, item => {\n        item.children = item.children || [];\n        // where to insert 示例添加到尾部，可以是随意位置\n        item.children.push(dragObj);\n      });\n    }\n    this.setState({\n      gData: data\n    });\n  }\n  render() {\n    const loop = data =>\n      data.map(item => {\n        if (item.children) {\n          return (\n            <TreeNode key={item.key} label={item.key}>\n              {loop(item.children)}\n            </TreeNode>\n          );\n        }\n        return <TreeNode key={item.key} label={item.key} />;\n      });\n\n    return (\n      <Tree\n        defaultExpandedKeys={this.state.expandedKeys}\n        draggable\n        selectable={false}\n        onDragEnter={this.onDragEnter.bind(this)}\n        onDrop={this.onDrop.bind(this)}\n      >\n        {loop(this.state.gData)}\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n将节点拖拽到其他节点内部或前后。\n\n"
      },
      {
        "title": "异步加载数据",
        "order": "5",
        "jsx": "import { Tree } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nfunction generateTreeNodes(treeNode) {\n  const arr = [];\n  const key = treeNode.props.eventKey;\n  for (let i = 0; i < 3; i++) {\n    arr.push({ name: `leaf ${key}-${i}`, key: `${key}-${i}` });\n  }\n  return arr;\n}\n\nfunction setLeaf(treeData, curKey, level) {\n  const loopLeaf = (data, lev) => {\n    const l = lev - 1;\n    data.forEach(item => {\n      if (\n        item.key.length > curKey.length\n          ? item.key.indexOf(curKey) !== 0\n          : curKey.indexOf(item.key) !== 0\n      ) {\n        return;\n      }\n      if (item.children) {\n        loopLeaf(item.children, l);\n      } else if (l < 1) {\n        item.isLeaf = true;\n      }\n    });\n  };\n  loopLeaf(treeData, level + 1);\n}\n\nfunction getNewTreeData(treeData, curKey, child, level) {\n  const loop = data => {\n    if (level < 1 || curKey.length - 3 > level * 2) {\n      return;\n    }\n\n    data.forEach(item => {\n      if (curKey.indexOf(item.key) === 0) {\n        if (item.children) {\n          loop(item.children);\n        } else {\n          item.children = child;\n        }\n      }\n    });\n  };\n  loop(treeData);\n  setLeaf(treeData, curKey, level);\n}\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      treeData: []\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        treeData: [\n          { name: \"pNode 01\", key: \"0-0\" },\n          { name: \"pNode 02\", key: \"0-1\" },\n          { name: \"pNode 03\", key: \"0-2\", isLeaf: true }\n        ]\n      });\n    }, 100);\n  }\n  onSelect(info) {\n    console.log(\"selected\", info);\n  }\n  onLoadData(treeNode) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const treeData = [...this.state.treeData];\n        getNewTreeData(\n          treeData,\n          treeNode.props.eventKey,\n          generateTreeNodes(treeNode),\n          2\n        );\n        this.setState({ treeData });\n        resolve();\n      }, 500);\n    });\n  }\n  render() {\n    const loop = data =>\n      data.map(item => {\n        if (item.children) {\n          return (\n            <TreeNode label={item.name} key={item.key}>\n              {loop(item.children)}\n            </TreeNode>\n          );\n        }\n        return (\n          <TreeNode\n            label={item.name}\n            key={item.key}\n            isLeaf={item.isLeaf}\n            disabled={item.key === \"0-0-0\"}\n          />\n        );\n      });\n    const treeNodes = loop(this.state.treeData);\n    return (\n      <Tree\n        onSelect={this.onSelect.bind(this)}\n        loadData={this.onLoadData.bind(this)}\n      >\n        {treeNodes}\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n点击展开节点，动态加载数据。\n\n"
      },
      {
        "title": "带线样式",
        "order": "1",
        "jsx": "import { Tree } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nReactDOM.render(\n  <Tree defaultExpandAll showLine>\n    <TreeNode label=\"Trunk\">\n      <TreeNode label=\"Branch\">\n        <TreeNode label=\"Branch\">\n          <TreeNode label=\"Leaf\" />\n        </TreeNode>\n        <TreeNode label=\"Leaf\" />\n      </TreeNode>\n      <TreeNode label=\"Branch\">\n        <TreeNode label=\"Leaf\" />\n        <TreeNode label=\"Leaf\" />\n      </TreeNode>\n    </TreeNode>\n  </Tree>,\n  mountNode\n);\n\n",
        "css": "",
        "body": "\n展示Tree组件带线的样式外观。\n\n"
      },
      {
        "title": "可搜索的树",
        "order": "4",
        "jsx": "import { Tree, Search } from \"@icedesign/base\";\n\nconst { Node: TreeNode } = Tree;\n\nconst data = [\n  {\n    id: \"0-0\",\n    children: [\n      {\n        id: \"0-0-0\",\n        children: [\n          {\n            id: \"0-0-0-0\",\n            children: [\n              {\n                id: \"0-0-0-0-0\"\n              }\n            ]\n          },\n          {\n            id: \"0-0-0-1\"\n          }\n        ]\n      },\n      {\n        id: \"0-0-1\",\n        children: [\n          {\n            id: \"0-0-1-0\"\n          },\n          {\n            id: \"0-0-1-1\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n      expandedKeys: [\"0-0\"],\n      autoExpandParent: true\n    };\n    this.matchedKeys = [];\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleExpand = this.handleExpand.bind(this);\n  }\n\n  handleSearch(result) {\n    const value = result.key;\n    const matchedKeys = [];\n    const loop = data =>\n      data.forEach(item => {\n        if (item.id.indexOf(value.trim()) > -1) {\n          matchedKeys.push(item.id);\n        }\n        if (item.children && item.children.length) {\n          loop(item.children);\n        }\n      });\n    loop(data);\n\n    this.setState({\n      value: result.key,\n      expandedKeys: matchedKeys,\n      autoExpandParent: true\n    });\n    this.matchedKeys = matchedKeys;\n  }\n\n  handleExpand(keys) {\n    this.setState({\n      expandedKeys: keys,\n      autoExpandParent: false\n    });\n  }\n\n  render() {\n    const loop = data =>\n      data.map(item => {\n        return (\n          <TreeNode label={item.id} key={item.id}>\n            {item.children && loop(item.children)}\n          </TreeNode>\n        );\n      });\n\n    const { value, expandedKeys, autoExpandParent } = this.state;\n    const filterTreeNode = node =>\n      value && this.matchedKeys.indexOf(node.props.eventKey) > -1;\n\n    return (\n      <div>\n        <Search\n          type=\"normal\"\n          size=\"medium\"\n          searchText=\"\"\n          value={value}\n          onSearch={this.handleSearch}\n        />\n        <Tree\n          expandedKeys={expandedKeys}\n          autoExpandParent={autoExpandParent}\n          filterTreeNode={filterTreeNode}\n          onExpand={this.handleExpand}\n        >\n          {loop(data)}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n\n",
        "css": "",
        "body": "\n展示可搜索的树。\n\n"
      }
    ]
  },
  {
    "name": "Upload",
    "category": "Components",
    "title": "上传组件",
    "type": "表单",
    "importStatement": "import { Upload } from '@icedesign/base';",
    "body": "\n## 开发指南\n\n### 何时使用\n\n用户根据提示将自己本地的相应信息(包含本地和云储存)上传到网站，上传组件可以帮助用户对上传过程和上传结果有预期，并可以更改或撤销上传行为。\n#### onChange\n\n文件状态改变的回调，返回为：\n\n```js\n{\n  file: { ... },\n  fileList: [ ... ],\n  event: { ... }\n}\n```\n\n- `file` 当前操作的文件对象。\n```js\n{ \n  uid: 'uid', // 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突 \n  name: 'xx.png' // 文件名 \n  status: 'done', // 状态有：uploading done error removed \n  response: '{\"status\":\"success\"}' // 服务端响应内容 \n  fileURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>', \n  imgURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>', \n}\n```\n\n如果上传控件是 multiple 时，此参数将为一个对象数组 `[file, ...]`。\n\n- `fileList` 当前的文件列表。\n- `event` 上传中的服务端响应内容，包含了上传进度等信息，高级浏览器支持。\n\n#### onSuccess(res, file)\n\n- `res` 后台返回的响应信息。\n\n- `file` 当前操作的文件对象。\n- ​\n```js\n  { uid: 'uid', // 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突 name: 'xx.png' // 文件名 status: 'done', // 状态 response: '{\"status\": \"success\"}' // 服务端响应内容 fileURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>', imgURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>', }\n```\n\n#### onRemove(file, fileList)\n\n- `file` 当前操作的文件对象。\n```js\n{ \n  uid: 'uid', // 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突 \n  name: 'xx.png' // 文件名 \n  status: 'removed', // 状态 \n  response: '{\"status\": \"success\"}' // 服务端响应内容 \n  fileURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>', \n  imgURL: '<http://kfupload.example.com/kf-down/HTB1dRttMXXXXXaxaXXXq6xXFXXXU.jpg?size=23616&height=200&width=200&hash=58d62cf6a9633667b9d728d7120a9350>',\n}\n```\n\n- `fileList` 当前的文件列表。\n\n#### 显示下载链接\n\n请使用 fileList 属性设置数组项的 url 属性进行展示控制。\n\n#### 返回数据格式要求\n\n```js\n// 标准 JSON 字符串\n{\n  \"code\": \"0\",                                           // 状态码，0 代表成功\n  \"imgURL\": \"http://kfupload.example.com/a.png\",         // 图片预览地址\n  \"downloadURL\": \"http://kfupload.example.com/a.png\",    // 文件下载地址 (可选)\n  \"size\": \"1024\",                                        // 文件大小 (可选)\n  \"fileHeight\": \"50\",                                    // 图片高度，非图片类型不需要 (可选)\n  \"fileWidth\": \"50\",                                     // 图片宽度，非图片类型不需要 (可选)\n  \"fileMd5\": \"ddahsjccbajh\"                              // 文件 hash 值 (可选)\n}\n```\n\n#### 后端数据格式化\n\n通过 `formatter` 将来自后端的不规则数据转换为符合组件要求的数据格式\n\n- `假设` 服务器的响应数据如下\n\n ```js\n{\n  \"status\": \"success\", // 上传成功返回码 \n  \"img_src\": \"<http://kfupload.example.com/a.jpg>\", // 图片链接\n  \"img_size\": 1024 // 文件大小 \n}\n ```\n\n- 转换方法\n\n```js\n// 函数里面根据当前服务器返回的响应数据 \n// 重新拼装符合组件要求的数据格式 \nfunction formatter(res) {\n  return { \n    code: res.status === 'success' ? '0' : '1', \n    imgURL: res.img_src, \n    size: res.img_size \n  };\n}\n```\n\n\n## IE9兼容性\n\n- ie9 下用因为使用 iframe 作为无刷新上传方案，必须保证表单页面的域名和上传的服务器端的域名相同。\n- ie9 下服务器端返回数据需要设置头部 `context-type` 为 `text/html`，不要设置为 `application/json`\n- 如果只是一级域名相同（`taobao.com` 为一级域名 `shop.taobao.com` 为二级域名），可以通过降域的方式实现跨域上传。\n\n假设你表单页面的域是：shop.taobao.com，而上传的服务器端路径却是 upload.taobao.com。服务端返回必须带额外 scrip t标签\n\n```html\n<script>document.domain = \"taobao.com\";</script>\n{\"status\":1,\"type\":\"ajax\",\"name\":\"54.png\",\"url\":\".\\/files\\/54.png\"}\n```\n\niframe上传会额外传递参数 `_documentDomain` 方便你设置域名\n",
    "propsSchema": {
      "name": "Upload",
      "props": {
        "prefix": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "样式前缀",
          "defaultValue": {
            "value": "'next-'",
            "computed": false
          },
          "docblock": "样式前缀"
        },
        "action": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "必选参数，上传的地址",
          "defaultValue": {
            "value": "'//kfupload.example.com/mupload'",
            "computed": false
          },
          "docblock": "必选参数，上传的地址"
        },
        "fileList": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "上传文件列表，数据格式请参考",
          "docblock": "上传文件列表，数据格式请参考"
        },
        "defaultFileList": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "默认上传文件列表，数据格式请参考",
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "docblock": "默认上传文件列表，数据格式请参考"
        },
        "listType": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'text'",
                "computed": false,
                "description": "文字"
              },
              {
                "value": "'text-image'",
                "computed": false,
                "description": "图文"
              },
              {
                "value": "'picture-card'",
                "computed": false,
                "description": "卡片"
              }
            ]
          },
          "required": false,
          "description": "上传列表的样式",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "docblock": "上传列表的样式\n@enumdesc 文字, 图文, 卡片",
          "value": [
            {
              "value": "'text'",
              "computed": false,
              "description": "文字"
            },
            {
              "value": "'text-image'",
              "computed": false,
              "description": "图文"
            },
            {
              "value": "'picture-card'",
              "computed": false,
              "description": "卡片"
            }
          ]
        },
        "data": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": false,
          "description": "上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }）",
          "docblock": "上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }）"
        },
        "formatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)",
          "docblock": "数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)",
          "params": [],
          "returns": null
        },
        "maxSize": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "选择上传的文件的最大尺寸（单位：Byte）",
          "defaultValue": {
            "value": "Infinity",
            "computed": true
          },
          "docblock": "选择上传的文件的最大尺寸（单位：Byte）"
        },
        "language": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "语言种类，支持 `en-us`、`zh-cn`、`zh-tw`",
          "docblock": "语言种类，支持 `en-us`、`zh-cn`、`zh-tw`"
        },
        "locale": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义语言包，会与默认提供的语言包做合并操作，[详细参考](http://gitlab.alibaba-inc.com/next/upload/blob/master/src/locale/index.js)",
          "docblock": "自定义语言包，会与默认提供的语言包做合并操作，[详细参考](http://gitlab.alibaba-inc.com/next/upload/blob/master/src/locale/index.js)",
          "properties": []
        },
        "limit": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "最大文件上传个数",
          "docblock": "最大文件上传个数"
        },
        "dragable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "可选参数，是否支持拖拽上传，`ie10+` 支持。",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "可选参数，是否支持拖拽上传，`ie10+` 支持。"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "可选参数，是否禁用上传功能",
          "docblock": "可选参数，是否禁用上传功能"
        },
        "showUploadList": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "是否显示上传列表",
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "docblock": "是否显示上传列表"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "上传文件改变时的状态",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "上传文件改变时的状态\n@param {Object} info 文件事件对象",
          "params": [
            {
              "name": "info",
              "description": "文件事件对象",
              "type": {
                "name": "Object"
              }
            }
          ],
          "returns": null
        },
        "onSuccess": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "可选参数，上传成功回调函数，参数为请求下响应信息以及文件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "可选参数，上传成功回调函数，参数为请求下响应信息以及文件",
          "params": [],
          "returns": null
        },
        "onRemove": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "移除文件回调函数，详见 [onRemove](#onRemove)",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "移除文件回调函数，详见 [onRemove](#onRemove)",
          "params": [],
          "returns": null
        },
        "onError": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件",
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "docblock": "可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件",
          "params": [],
          "returns": null
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "自定义class",
          "docblock": "自定义class"
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "自定义内联样式",
          "docblock": "自定义内联样式",
          "properties": []
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "子元素",
          "docblock": "子元素"
        },
        "accept": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept)",
          "docblock": "可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept)"
        },
        "headers": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "可选参数，设置上传的请求头部",
          "docblock": "可选参数，设置上传的请求头部",
          "properties": []
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "传递给服务器的文件参数",
          "docblock": "传递给服务器的文件参数"
        },
        "withCredentials": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "可选参数，是否允许请求携带 cookie",
          "docblock": "可选参数，是否允许请求携带 cookie"
        },
        "beforeUpload": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传",
          "docblock": "可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传",
          "params": [],
          "returns": null
        }
      },
      "methods": [
        {
          "name": "onFileDrop",
          "docblock": "文件拖拽处理函数\n@param  {Event} e - 拖拽事件\n@return {void}",
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "description": "拖拽事件",
              "type": {
                "name": "Event"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "void"
            }
          },
          "description": "文件拖拽处理函数"
        },
        {
          "name": "onStart",
          "docblock": "上传开始\n@param {FileList} files - 文件列表\n@return {void}",
          "modifiers": [],
          "params": [
            {
              "name": "files",
              "description": "文件列表",
              "type": {
                "name": "FileList"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "void"
            }
          },
          "description": "上传开始"
        },
        {
          "name": "onSuccess",
          "docblock": "上传成功回调\n@param  {Object} response - 服务器响应\n@param  {File} file - 文件对象\n@return {void}",
          "modifiers": [],
          "params": [
            {
              "name": "response",
              "description": "服务器响应",
              "type": {
                "name": "Object"
              }
            },
            {
              "name": "file",
              "description": "文件对象",
              "type": {
                "name": "File"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "void"
            }
          },
          "description": "上传成功回调"
        },
        {
          "name": "removeFile",
          "docblock": "删除文件\n@param {File} file\n@return {void}",
          "modifiers": [],
          "params": [
            {
              "name": "file",
              "description": null,
              "type": {
                "name": "File"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "void"
            }
          },
          "description": "删除文件"
        },
        {
          "name": "cancelFile",
          "docblock": "取消上传\n@param {File} file\n@return {void}",
          "modifiers": [],
          "params": [
            {
              "name": "file",
              "description": null,
              "type": {
                "name": "File"
              }
            }
          ],
          "returns": {
            "description": null,
            "type": {
              "name": "void"
            }
          },
          "description": "取消上传"
        }
      ],
      "subComponents": [
        {
          "name": "ImageUpload",
          "props": {},
          "methods": [],
          "description": "继承 Upload 的 API，除非特别说明",
          "order": 1
        },
        {
          "name": "DragUpload",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式前缀"
            },
            "onDragOver": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，拖拽到达拖拽区域回调函数",
              "docblock": "可选参数，拖拽到达拖拽区域回调函数",
              "params": [],
              "returns": null
            },
            "onDrop": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，拖拽释放回调函数，参数为拖拽的文件",
              "docblock": "可选参数，拖拽释放回调函数，参数为拖拽的文件",
              "params": [],
              "returns": null
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            }
          },
          "methods": [
            {
              "name": "onFileDrop",
              "docblock": "控制拖拽状态",
              "modifiers": [],
              "params": [
                {
                  "name": "e"
                }
              ],
              "returns": null,
              "description": "控制拖拽状态"
            },
            {
              "name": "dropEnd",
              "docblock": "`drop`类型事件触发后重置拖拽状态及清空传递的数据，防止子组件中`nextProps`继续获取重复数据",
              "modifiers": [],
              "params": [],
              "returns": null,
              "description": "`drop`类型事件触发后重置拖拽状态及清空传递的数据，防止子组件中`nextProps`继续获取重复数据"
            },
            {
              "name": "onListChange",
              "docblock": "当上传列表不为空时，不需要展示拖拽提示文案",
              "modifiers": [],
              "params": [
                {
                  "name": "fileList"
                }
              ],
              "returns": null,
              "description": "当上传列表不为空时，不需要展示拖拽提示文案"
            }
          ],
          "description": "IE10+ 支持。继承 Upload 的 API，除非特别说明",
          "order": 2
        },
        {
          "name": "CropUpload",
          "props": {
            "prefix": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "样式前缀",
              "defaultValue": {
                "value": "'next-'",
                "computed": false
              },
              "docblock": "样式前缀"
            },
            "action": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "必选参数，上传的地址。使用 fileserver，跨域解决方案参考 [fileserver 接入](#fileserver)，[`非 fileserver` 使用说明](#not-fileserver)",
              "defaultValue": {
                "value": "'//kfupload.example.com/mupload'",
                "computed": false
              },
              "docblock": "必选参数，上传的地址。使用 fileserver，跨域解决方案参考 [fileserver 接入](#fileserver)，[`非 fileserver` 使用说明](#not-fileserver)"
            },
            "name": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "可选参数，传递给服务器的文件参数",
              "defaultValue": {
                "value": "'avatar'",
                "computed": false
              },
              "docblock": "可选参数，传递给服务器的文件参数"
            },
            "cropSize": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "number"
                  },
                  {
                    "name": "object"
                  }
                ]
              },
              "required": false,
              "description": "可选参数，设置裁剪图片生成的尺寸，如设置 `100`，会生成 `100*100` 的图片",
              "docblock": "可选参数，设置裁剪图片生成的尺寸，如设置 `100`，会生成 `100*100` 的图片"
            },
            "minCropBoxSize": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "可选参数，设置裁剪框的最小尺寸",
              "docblock": "可选参数，设置裁剪框的最小尺寸"
            },
            "className": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "自定义类名",
              "docblock": "自定义类名"
            },
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义内联样式",
              "docblock": "自定义内联样式",
              "properties": []
            },
            "headers": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "可选参数，设置上传的请求头部",
              "docblock": "可选参数，设置上传的请求头部",
              "properties": []
            },
            "formatter": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，数据格式化函数，配合自定义 `action` 使用，参数为服务器的响应数据，详见 [formatter](#formatter)",
              "docblock": "可选参数，数据格式化函数，配合自定义 `action` 使用，参数为服务器的响应数据，详见 [formatter](#formatter)",
              "params": [],
              "returns": null
            },
            "data": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "object"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": false,
              "description": "上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }）",
              "docblock": "上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }）"
            },
            "locale": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "自定义语言包，会与默认提供的语言包做合并操作，请严格按照默认语言包的格式，参考 [demo](http://next.alibaba-inc.com/demo/pc/upload#react-Upload-2)",
              "docblock": "自定义语言包，会与默认提供的语言包做合并操作，请严格按照默认语言包的格式，参考 [demo](http://next.alibaba-inc.com/demo/pc/upload#react-Upload-2)",
              "properties": []
            },
            "preview": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "是否使用预览功能",
              "docblock": "是否使用预览功能"
            },
            "previewList": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "预览展示列表，用来配置预览元素。目前仅支持 `80`、`60`、`40` 三种，例如，配置 `[80, 40]`，会展示 `80*80` 以及 `40*40` 两种尺寸",
              "docblock": "预览展示列表，用来配置预览元素。目前仅支持 `80`、`60`、`40` 三种，例如，配置 `[80, 40]`，会展示 `80*80` 以及 `40*40` 两种尺寸"
            },
            "popupClassName": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "裁剪弹层自定义类名",
              "docblock": "裁剪弹层自定义类名"
            },
            "aspectRatio": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "裁剪比例，例如 `1 / 2` 表示 `宽 / 高`。**注意：1、设置了裁剪比例，而且值不等于 `1` 时，不能使用预览功能；2、设置成 'auto' 可以支持任意裁剪比例**",
              "docblock": "裁剪比例，例如 `1 / 2` 表示 `宽 / 高`。**注意：1、设置了裁剪比例，而且值不等于 `1` 时，不能使用预览功能；2、设置成 'auto' 可以支持任意裁剪比例**"
            },
            "viewMode": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "可选参数，[定义裁剪框的模式](https://github.com/fengyuanchen/cropperjs#viewmode)",
              "docblock": "可选参数，[定义裁剪框的模式](https://github.com/fengyuanchen/cropperjs#viewmode)"
            },
            "autoCropArea": {
              "type": {
                "name": "number"
              },
              "required": false,
              "description": "可选参数，[定义自动裁剪区域的尺寸（百分比）](https://github.com/fengyuanchen/cropperjs#autocroparea)，介于 `0` 与 `1` 之间的值",
              "docblock": "可选参数，[定义自动裁剪区域的尺寸（百分比）](https://github.com/fengyuanchen/cropperjs#autocroparea)，介于 `0` 与 `1` 之间的值"
            },
            "zoomable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "图片是否可以伸缩",
              "docblock": "图片是否可以伸缩"
            },
            "beforeCrop": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，选择文件后、唤起裁剪框前的钩子，参数为上传的文件。若返回 `false`、`Promise.reject()` 或者 `Promise.resolve(false)` 都会阻断后续流程，不会唤起裁剪框及后续动作",
              "docblock": "可选参数，选择文件后、唤起裁剪框前的钩子，参数为上传的文件。若返回 `false`、`Promise.reject()` 或者 `Promise.resolve(false)` 都会阻断后续流程，不会唤起裁剪框及后续动作",
              "params": [],
              "returns": null
            },
            "onCrop": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "完成裁剪并上传的回调函数，参数为裁剪后的文件的base64字符串数据",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "完成裁剪并上传的回调函数，参数为裁剪后的文件的base64字符串数据",
              "params": [],
              "returns": null
            },
            "onChange": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，裁剪文件改变时触发",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "可选参数，裁剪文件改变时触发",
              "params": [],
              "returns": null
            },
            "beforeUpload": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，点击裁剪之后、上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "可选参数，点击裁剪之后、上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传",
              "params": [],
              "returns": null
            },
            "onSuccess": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "上传成功回调函数，`res` 为后台响应，`dataUrl` 为裁剪后的文件的base64字符串数据(注意与 `Upload` 的参数区别)",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "上传成功回调函数，`res` 为后台响应，`dataUrl` 为裁剪后的文件的base64字符串数据(注意与 `Upload` 的参数区别)",
              "params": [],
              "returns": null
            },
            "onError": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，上传失败回调函数，参数为上传失败的文件信息",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "可选参数，上传失败回调函数，参数为上传失败的文件信息",
              "params": [],
              "returns": null
            },
            "accept": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "图片类型",
              "defaultValue": {
                "value": "'image/png,image/jpg,image/jpeg,image/bmp,image/gif'",
                "computed": false
              },
              "docblock": "图片类型"
            }
          },
          "methods": [],
          "description": "IE10+ 支持",
          "order": 3
        },
        {
          "name": "Core",
          "props": {
            "style": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "可选参数，自定义样式",
              "docblock": "可选参数，自定义样式",
              "properties": []
            },
            "action": {
              "type": {
                "name": "string"
              },
              "required": true,
              "description": "必选参数，上传的地址",
              "docblock": "必选参数，上传的地址"
            },
            "name": {
              "type": {
                "name": "string"
              },
              "required": true,
              "description": "可选参数，传递给服务器的文件参数",
              "defaultValue": {
                "value": "'file'",
                "computed": false
              },
              "docblock": "可选参数，传递给服务器的文件参数"
            },
            "disabled": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "可选参数，是否禁用上传功能",
              "docblock": "可选参数，是否禁用上传功能"
            },
            "multiple": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "可选参数，是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "可选参数，是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件"
            },
            "dragable": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "可选参数，是否支持拖拽上传，`ie10+` 支持。",
              "docblock": "可选参数，是否支持拖拽上传，`ie10+` 支持。"
            },
            "accept": {
              "type": {
                "name": "string"
              },
              "required": false,
              "description": "可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept)",
              "docblock": "可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept)"
            },
            "data": {
              "type": {
                "name": "union",
                "value": [
                  {
                    "name": "object"
                  },
                  {
                    "name": "func"
                  }
                ]
              },
              "required": false,
              "description": "上传额外传参",
              "docblock": "上传额外传参"
            },
            "headers": {
              "type": {
                "name": "object"
              },
              "required": false,
              "description": "可选参数，设置上传的请求头部",
              "docblock": "可选参数，设置上传的请求头部",
              "properties": []
            },
            "withCredentials": {
              "type": {
                "name": "bool"
              },
              "required": false,
              "description": "可选参数，是否允许请求携带 cookie",
              "defaultValue": {
                "value": "false",
                "computed": false
              },
              "docblock": "可选参数，是否允许请求携带 cookie"
            },
            "beforeUpload": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传",
              "params": [],
              "returns": null
            },
            "onStart": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，开始上传文件的钩子，参数为上传的文件。如果开启了 `multiple`，参数为文件列表",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "可选参数，开始上传文件的钩子，参数为上传的文件。如果开启了 `multiple`，参数为文件列表",
              "params": [],
              "returns": null
            },
            "onProgress": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，正在上传文件的钩子，参数为上传的事件以及文件",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "可选参数，正在上传文件的钩子，参数为上传的事件以及文件",
              "params": [],
              "returns": null
            },
            "onSuccess": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，上传成功回调函数，参数为请求下响应信息以及文件",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "可选参数，上传成功回调函数，参数为请求下响应信息以及文件",
              "params": [],
              "returns": null
            },
            "onError": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件",
              "params": [],
              "returns": null
            },
            "onAbort": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "可选参数，中断上传请求回调函数，参数为中断事件以及文件",
              "defaultValue": {
                "value": "() => {\n}",
                "computed": false
              },
              "docblock": "可选参数，中断上传请求回调函数，参数为中断事件以及文件",
              "params": [],
              "returns": null
            }
          },
          "methods": [
            {
              "name": "onChange",
              "docblock": "上传文件变化\n@param  {SyntheticEvent} e\n@return {void}",
              "modifiers": [],
              "params": [
                {
                  "name": "e",
                  "description": null,
                  "type": {
                    "name": "SyntheticEvent"
                  }
                }
              ],
              "returns": {
                "description": null,
                "type": {
                  "name": "void"
                }
              },
              "description": "上传文件变化"
            },
            {
              "name": "onClick",
              "docblock": "点击上传按钮\n@return {void}",
              "modifiers": [],
              "params": [],
              "returns": {
                "description": null,
                "type": {
                  "name": "void"
                }
              },
              "description": "点击上传按钮"
            },
            {
              "name": "onKeyDown",
              "docblock": "键盘事件\n@param  {SyntheticEvent} e\n@return {void}",
              "modifiers": [],
              "params": [
                {
                  "name": "e",
                  "description": null,
                  "type": {
                    "name": "SyntheticEvent"
                  }
                }
              ],
              "returns": {
                "description": null,
                "type": {
                  "name": "void"
                }
              },
              "description": "键盘事件"
            },
            {
              "name": "onFileDrop",
              "docblock": "拖拽\n@param  {SyntheticEvent} e\n@return {void}",
              "modifiers": [],
              "params": [
                {
                  "name": "e",
                  "description": null,
                  "type": {
                    "name": "SyntheticEvent"
                  }
                }
              ],
              "returns": {
                "description": null,
                "type": {
                  "name": "void"
                }
              },
              "description": "拖拽"
            },
            {
              "name": "uploadFiles",
              "docblock": "上传文件列表\n@param  {File} files - 文件列表\n@return {void}",
              "modifiers": [],
              "params": [
                {
                  "name": "files",
                  "description": "文件列表",
                  "type": {
                    "name": "File"
                  }
                }
              ],
              "returns": {
                "description": null,
                "type": {
                  "name": "void"
                }
              },
              "description": "上传文件列表"
            },
            {
              "name": "upload",
              "docblock": "上传文件\n@param  {File} file - 文件\n@return {void}",
              "modifiers": [],
              "params": [
                {
                  "name": "file",
                  "description": "文件",
                  "type": {
                    "name": "File"
                  }
                }
              ],
              "returns": {
                "description": null,
                "type": {
                  "name": "void"
                }
              },
              "description": "上传文件"
            }
          ],
          "description": "为了开放基础上传能力，独立向外提供了 Core 模块。使用该模块可以实现基本的上传功能，跟业务 UI 分离，满足业务自定义 UI 的需求"
        },
        {
          "name": "List",
          "props": {
            "listType": {
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'text'",
                    "computed": false
                  },
                  {
                    "value": "'text-image'",
                    "computed": false
                  },
                  {
                    "value": "'picture-card'",
                    "computed": false
                  }
                ]
              },
              "required": false,
              "description": "文件列表，数据格式请参考 文件对象",
              "defaultValue": {
                "value": "'text'",
                "computed": false
              },
              "docblock": "文件列表，数据格式请参考 文件对象"
            },
            "fileList": {
              "type": {
                "name": "array"
              },
              "required": false,
              "description": "文件列表",
              "defaultValue": {
                "value": "[]",
                "computed": false
              },
              "docblock": "文件列表"
            },
            "cell": {
              "type": {
                "name": "func"
              },
              "required": false,
              "description": "渲染",
              "docblock": "渲染\n@param {Object} value 该行数据\n@param {Number} idx   序列\n@return {Element} 自定义内容",
              "params": [
                {
                  "name": "value",
                  "description": "该行数据",
                  "type": {
                    "name": "Object"
                  }
                },
                {
                  "name": "idx",
                  "description": "序列",
                  "type": {
                    "name": "Number"
                  }
                }
              ],
              "returns": {
                "description": "自定义内容",
                "type": {
                  "name": "Element"
                }
              }
            }
          },
          "methods": []
        }
      ]
    },
    "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\naction | 必选参数，上传的地址 | String | '//kfupload.example.com/mupload'\nfileList | 上传文件列表，数据格式请参考 | Array | -\ndefaultFileList | 默认上传文件列表，数据格式请参考 | Array | []\nlistType | 上传列表的样式<br><br>**可选值**:<br>'text'(文字)<br>'text-image'(图文)<br>'picture-card'(卡片) | Enum | 'text'\ndata | 上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }） | Object/Function | -\nformatter | 数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)<br><br>**签名**:<br>Function() => void | Function | -\nmaxSize | 选择上传的文件的最大尺寸（单位：Byte） | Number | Infinity\nlanguage | 语言种类，支持 `en-us`、`zh-cn`、`zh-tw` | String | -\nlocale | 自定义语言包，会与默认提供的语言包做合并操作，[详细参考](http://gitlab.alibaba-inc.com/next/upload/blob/master/src/locale/index.js) | Object | -\nlimit | 最大文件上传个数 | Number | -\ndragable | 可选参数，是否支持拖拽上传，`ie10+` 支持。 | Boolean | true\ndisabled | 可选参数，是否禁用上传功能 | Boolean | -\nshowUploadList | 是否显示上传列表 | Boolean | true\nonChange | 上传文件改变时的状态<br><br>**签名**:<br>Function(info: Object) => void<br>**参数**:<br>*info*: {Object} 文件事件对象 | Function | () =&gt; {}\nonSuccess | 可选参数，上传成功回调函数，参数为请求下响应信息以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonRemove | 移除文件回调函数，详见 [onRemove](#onRemove)<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nonError | 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; {}\nclassName | 自定义class | String | -\nstyle | 自定义内联样式 | Object | -\nchildren | 子元素 | ReactNode | -\naccept | 可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept) | String | -\nheaders | 可选参数，设置上传的请求头部 | Object | -\nname | 传递给服务器的文件参数 | String | -\nwithCredentials | 可选参数，是否允许请求携带 cookie | Boolean | -\nbeforeUpload | 可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传<br><br>**签名**:<br>Function() => void | Function | -\n",
    "methodREADME": [
      "**签名**:<br>Function(e: Event) => void<br>**参数**:<br>*e*: {Event} 拖拽事件<br>**返回值**:<br>{void} null<br>",
      "**签名**:<br>Function(files: FileList) => void<br>**参数**:<br>*files*: {FileList} 文件列表<br>**返回值**:<br>{void} null<br>",
      "**签名**:<br>Function(response: Object, file: File) => void<br>**参数**:<br>*response*: {Object} 服务器响应<br>*file*: {File} 文件对象<br>**返回值**:<br>{void} null<br>",
      "**签名**:<br>Function(file: File) => void<br>**参数**:<br>*file*: {File} null<br>**返回值**:<br>{void} null<br>",
      "**签名**:<br>Function(file: File) => void<br>**参数**:<br>*file*: {File} null<br>**返回值**:<br>{void} null<br>"
    ],
    "subComponentsREADME": [
      {
        "name": "ImageUpload",
        "propsREADME": "",
        "methodREADME": []
      },
      {
        "name": "DragUpload",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\nonDragOver | 可选参数，拖拽到达拖拽区域回调函数<br><br>**签名**:<br>Function() => void | Function | -\nonDrop | 可选参数，拖拽释放回调函数，参数为拖拽的文件<br><br>**签名**:<br>Function() => void | Function | -\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\n",
        "methodREADME": [
          "**签名**:<br>Function(e: unknown) => void<br>**参数**:<br>*e*: {unknown} undefined",
          "**签名**:<br>Function() => void",
          "**签名**:<br>Function(fileList: unknown) => void<br>**参数**:<br>*fileList*: {unknown} undefined"
        ]
      },
      {
        "name": "CropUpload",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nprefix | 样式前缀 | String | 'next-'\naction | 必选参数，上传的地址。使用 fileserver，跨域解决方案参考 [fileserver 接入](#fileserver)，[`非 fileserver` 使用说明](#not-fileserver) | String | '//kfupload.example.com/mupload'\nname | 可选参数，传递给服务器的文件参数 | String | 'avatar'\ncropSize | 可选参数，设置裁剪图片生成的尺寸，如设置 `100`，会生成 `100*100` 的图片 | Number/Object | -\nminCropBoxSize | 可选参数，设置裁剪框的最小尺寸 | Number | -\nclassName | 自定义类名 | String | -\nstyle | 自定义内联样式 | Object | -\nheaders | 可选参数，设置上传的请求头部 | Object | -\nformatter | 可选参数，数据格式化函数，配合自定义 `action` 使用，参数为服务器的响应数据，详见 [formatter](#formatter)<br><br>**签名**:<br>Function() => void | Function | -\ndata | 上传额外传参（如果使用 `fileserver` 上传，参数格式为 { scene: '场景名' }） | Object/Function | -\nlocale | 自定义语言包，会与默认提供的语言包做合并操作，请严格按照默认语言包的格式，参考 [demo](http://next.alibaba-inc.com/demo/pc/upload#react-Upload-2) | Object | -\npreview | 是否使用预览功能 | Boolean | -\npreviewList | 预览展示列表，用来配置预览元素。目前仅支持 `80`、`60`、`40` 三种，例如，配置 `[80, 40]`，会展示 `80*80` 以及 `40*40` 两种尺寸 | Array | -\npopupClassName | 裁剪弹层自定义类名 | String | -\naspectRatio | 裁剪比例，例如 `1 / 2` 表示 `宽 / 高`。**注意：1、设置了裁剪比例，而且值不等于 `1` 时，不能使用预览功能；2、设置成 'auto' 可以支持任意裁剪比例** | Number | -\nviewMode | 可选参数，[定义裁剪框的模式](https://github.com/fengyuanchen/cropperjs#viewmode) | Number | -\nautoCropArea | 可选参数，[定义自动裁剪区域的尺寸（百分比）](https://github.com/fengyuanchen/cropperjs#autocroparea)，介于 `0` 与 `1` 之间的值 | Number | -\nzoomable | 图片是否可以伸缩 | Boolean | -\nbeforeCrop | 可选参数，选择文件后、唤起裁剪框前的钩子，参数为上传的文件。若返回 `false`、`Promise.reject()` 或者 `Promise.resolve(false)` 都会阻断后续流程，不会唤起裁剪框及后续动作<br><br>**签名**:<br>Function() => void | Function | -\nonCrop | 完成裁剪并上传的回调函数，参数为裁剪后的文件的base64字符串数据<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonChange | 可选参数，裁剪文件改变时触发<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nbeforeUpload | 可选参数，点击裁剪之后、上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonSuccess | 上传成功回调函数，`res` 为后台响应，`dataUrl` 为裁剪后的文件的base64字符串数据(注意与 `Upload` 的参数区别)<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonError | 可选参数，上传失败回调函数，参数为上传失败的文件信息<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\naccept | 图片类型 | String | 'image/png,image/jpg,image/jpeg,image/bmp,image/gif'\n",
        "methodREADME": []
      },
      {
        "name": "Core",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nstyle | 可选参数，自定义样式 | Object | -\naction | 必选参数，上传的地址 | String | -\nname | 可选参数，传递给服务器的文件参数 | String | 'file'\ndisabled | 可选参数，是否禁用上传功能 | Boolean | -\nmultiple | 可选参数，是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件 | Boolean | false\ndragable | 可选参数，是否支持拖拽上传，`ie10+` 支持。 | Boolean | -\naccept | 可选参数，接受上传的文件类型，详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)， [兼容性见](http://caniuse.com/#feat=input-file-accept) | String | -\ndata | 上传额外传参 | Object/Function | -\nheaders | 可选参数，设置上传的请求头部 | Object | -\nwithCredentials | 可选参数，是否允许请求携带 cookie | Boolean | false\nbeforeUpload | 可选参数，上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonStart | 可选参数，开始上传文件的钩子，参数为上传的文件。如果开启了 `multiple`，参数为文件列表<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonProgress | 可选参数，正在上传文件的钩子，参数为上传的事件以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonSuccess | 可选参数，上传成功回调函数，参数为请求下响应信息以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonError | 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\nonAbort | 可选参数，中断上传请求回调函数，参数为中断事件以及文件<br><br>**签名**:<br>Function() => void | Function | () =&gt; { }\n",
        "methodREADME": [
          "**签名**:<br>Function(e: SyntheticEvent) => void<br>**参数**:<br>*e*: {SyntheticEvent} null<br>**返回值**:<br>{void} null<br>",
          "**签名**:<br>Function() => void<br>**返回值**:<br>{void} null<br>",
          "**签名**:<br>Function(e: SyntheticEvent) => void<br>**参数**:<br>*e*: {SyntheticEvent} null<br>**返回值**:<br>{void} null<br>",
          "**签名**:<br>Function(e: SyntheticEvent) => void<br>**参数**:<br>*e*: {SyntheticEvent} null<br>**返回值**:<br>{void} null<br>",
          "**签名**:<br>Function(files: File) => void<br>**参数**:<br>*files*: {File} 文件列表<br>**返回值**:<br>{void} null<br>",
          "**签名**:<br>Function(file: File) => void<br>**参数**:<br>*file*: {File} 文件<br>**返回值**:<br>{void} null<br>"
        ]
      },
      {
        "name": "List",
        "propsREADME": "\n参数 | 说明 | 类型 | 默认值\n-----|-----|-----|-----\nlistType | 文件列表，数据格式请参考 文件对象<br><br>**可选值**:<br>'text', 'text-image', 'picture-card' | Enum | 'text'\nfileList | 文件列表 | Array | []\ncell | 渲染<br><br>**签名**:<br>Function(value: Object, idx: Number) => Element<br>**参数**:<br>*value*: {Object} 该行数据<br>*idx*: {Number} 序列<br>**返回值**:<br>{Element} 自定义内容<br> | Function | -\n",
        "methodREADME": []
      }
    ],
    "demos": [
      {
        "title": "核心上传",
        "order": "5",
        "jsx": "import { Upload, Button } from \"@icedesign/base\";\n\nconst { Core } = Upload;\n\nclass UploadCore extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      disabled: false,\n      dragable: false\n    };\n\n    /* eslint-disable */\n    [\"onDisabledHandler\", \"onDragableHandler\", \"onAbortHandler\"].map(fn => {\n      this[fn] = this[fn].bind(this);\n    });\n    /* eslint-enable */\n  }\n\n  onDisabledHandler() {\n    this.setState({\n      disabled: !this.state.disabled\n    });\n  }\n\n  onDragableHandler() {\n    this.setState({\n      dragable: !this.state.dragable\n    });\n  }\n\n  onAbortHandler() {\n    this.refs.inner.abort();\n  }\n\n  render() {\n    return (\n      <div>\n        <Core\n          ref=\"inner\"\n          style={{\n            display: \"block\",\n            textAlign: \"center\",\n            width: \"200px\",\n            height: \"150px\",\n            lineHeight: \"150px\",\n            border: \"1px dashed #aaa\",\n            borderRadius: \"5px\",\n            fontSize: \"12px\"\n          }}\n          action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n          accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n          name=\"filename\"\n          disabled={this.state.disabled}\n          multiple\n          dragable={this.state.dragable}\n          multipart={{ _token: \"sdj23da\" }}\n          headers={{ Authorization: \"user_1\" }}\n          beforeUpload={beforeUpload}\n          onStart={onStart}\n          onProgress={onProgress}\n          onSuccess={onSuccess}\n          onError={onError}\n          onAbort={onAbort}\n        >\n          {this.state.disabled\n            ? \"禁止上传\"\n            : this.state.dragable ? \"支持点击或者拖拽上传\" : \"支持点击上传\"}\n        </Core>\n        <br />\n        <div>\n          <Button type=\"primary\" onClick={this.onDisabledHandler}>\n            切换 disabled 状态\n          </Button>&nbsp;\n          <Button type=\"primary\" onClick={this.onDragableHandler}>\n            切换 dragable 状态\n          </Button>&nbsp;\n          <Button type=\"primary\" onClick={this.onAbortHandler}>\n            中断全部上传\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<UploadCore />, mountNode);\n\nfunction beforeUpload(file) {\n  console.log(\"beforeUpload callback : \", file);\n}\n\nfunction onStart(files) {\n  console.log(\"onStart callback : \", files);\n}\n\nfunction onProgress(e, file) {\n  console.log(\"onProgress callback : \", e, file);\n}\n\nfunction onSuccess(res, file) {\n  console.log(\"onSuccess callback : \", res, file);\n}\n\nfunction onError(err, res, file) {\n  console.log(\"onError callback : \", err, res, file);\n}\n\nfunction onAbort(e, file) {\n  console.log(\"onAbort callback : \", e, file);\n}\n\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "裁剪上传",
        "order": "4",
        "jsx": "import { Upload, Button, Dialog } from \"@icedesign/base\";\n\nconst { CropUpload } = Upload;\n\nclass CropUploadApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSuccess = this.onSuccess.bind(this);\n  }\n\n  beforeCrop(file) {\n    console.log(\"beforeCrop callback : \", file);\n\n    // 返回 `false` 的方式\n    if (file.size > 1024 * 1024 * 3) {\n      Dialog.alert({\n        content: \"图片尺寸超过最大限制 3MB，请重新选择！\",\n        closable: false,\n        title: \"裁剪提醒\"\n      });\n      return false;\n    }\n\n    // 返回 `promise` 的方式\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const img = new Image();\n        img.onload = () => {\n          if (img.width <= 1200) {\n            resolve();\n          } else {\n            Dialog.alert({\n              content: `图片宽度为${\n                img.width\n              }px, 超过最大限制 1200px，请重新选择！`,\n              closable: false,\n              title: \"裁剪提醒\"\n            });\n            reject(); // resolve(false) 也能阻断流程\n          }\n        };\n        img.src = reader.result;\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n\n  onCrop(dataUrl) {\n    console.log(\"onCrop callback : \", dataUrl);\n  }\n\n  beforeUpload(file) {\n    console.log(\"beforeUpload callback : \", file);\n  }\n\n  onChange(file) {\n    console.log(\"onChange callback : \", file);\n  }\n\n  onSuccess(res, dataUrl) {\n    console.log(\"onSuccess callback : \", res);\n    this.refs.targetViewer.src = dataUrl;\n  }\n\n  render() {\n    return (\n      <CropUpload\n        action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n        preview\n        previewList={[80, 60, 40]}\n        minCropBoxSize={100}\n        beforeCrop={this.beforeCrop}\n        onCrop={this.onCrop}\n        beforeUpload={this.beforeUpload}\n        onChange={this.onChange}\n        onSuccess={this.onSuccess}\n      >\n        {/* CropUpload 内嵌的标签会成为呼出系统弹窗的 trigger */}\n        <Button type=\"primary\" style={{ margin: 0 }}>\n          上传头像\n        </Button>\n        <div style={{ marginTop: \"20px\" }}>\n          <img\n            ref=\"targetViewer\"\n            src=\"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n            width=\"120px\"\n            height=\"120px\"\n          />\n        </div>\n        {/* trigger end */}\n      </CropUpload>\n    );\n  }\n}\n\nReactDOM.render(<CropUploadApp />, mountNode);\n\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "自定义上传参数",
        "order": "1",
        "jsx": "import { Upload, Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Upload\n    listType=\"text\"\n    action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n    accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n    data={{ token: \"abcd\" }}\n    beforeUpload={beforeUpload}\n    onChange={onChange}\n    defaultFileList={[\n      {\n        name: \"IMG.png\",\n        status: \"done\",\n        size: 1024,\n        downloadURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        fileURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        imgURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n      }\n    ]}\n  >\n    <Button type=\"primary\" style={{ margin: \"0 0 10px\" }}>\n      上传文件\n    </Button>\n  </Upload>,\n  mountNode\n);\n\nfunction beforeUpload(info) {\n  console.log(\"beforeUpload callback : \", info);\n}\n\nfunction onChange(info) {\n  console.log(\"onChane callback : \", info);\n}\n\n",
        "css": "",
        "body": "\n`next@0.19.5` 开始参数从 multipart 改造为 `data`\n\n"
      },
      {
        "title": "拖拽上传",
        "order": "3",
        "jsx": "import { Upload } from \"@icedesign/base\";\n\nconst { DragUpload } = Upload;\n\nReactDOM.render(\n  <DragUpload\n    action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n    accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n    onDragOver={onDragOver}\n    onDrop={onDrop}\n  />,\n  mountNode\n);\n\nfunction onDragOver() {\n  console.log(\"dragover callback\");\n}\n\nfunction onDrop(fileList) {\n  console.log(\"drop callback : \", fileList);\n}\n\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "内容回填",
        "order": "5",
        "jsx": "import { Upload, Button, Field, Form } from \"@icedesign/base\";\n\nconst { ImageUpload } = Upload;\n\nconst FormItem = Form.Item;\n\nconst fileList = [\n  {\n    name: \"pic.png\",\n    fileName: \"pic.png\",\n    status: \"done\",\n    size: 1000,\n    downloadURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n    fileURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n    imgURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n  }\n];\n\nclass App extends React.Component {\n  field = new Field(this, {\n    deepReset: true // 打开清楚特殊类型模式(fileList是数组需要特别开启)\n  });\n\n  setValues = () => {\n    this.field.setValues({\n      upload: [...fileList]\n    });\n  };\n\n  getValues = () => {\n    const values = this.field.getValues();\n    console.log(values);\n  };\n\n  normFile = info => {\n    if (info.file.status === \"uploading\") {\n      console.log(\"正在上传文件，请稍后！\");\n    }\n    if (info.file.status === \"error\") {\n      console.log(\"上传文件出错，请重新上传！\");\n    }\n    if (info.file.status === \"done\") {\n      console.log(\"上传文件成功！\");\n    }\n\n    if (info.fileList && info.fileList.length) {\n      return info.fileList;\n    }\n    return [];\n  };\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <Form field={this.field}>\n        <FormItem>\n          <ImageUpload\n            listType=\"picture-card\"\n            action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n            accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n            {...init(\"upload\", {\n              valueName: \"fileList\",\n              initValue: fileList,\n              getValueFromEvent: this.normFile,\n              rules: [{ required: true, message: \"列表不能为空\" }]\n            })}\n          />\n        </FormItem>\n        <div>\n          <Button\n            onClick={this.setValues}\n            type=\"primary\"\n            style={{ margin: \"0 0 10px\" }}\n          >\n            设置数据\n          </Button>&nbsp;&nbsp;\n          <Button\n            onClick={this.getValues}\n            type=\"primary\"\n            style={{ margin: \"0 0 10px\" }}\n          >\n            获取数据\n          </Button>&nbsp;&nbsp;\n          <Button\n            onClick={() => this.field.reset()}\n            type=\"primary\"\n            style={{ margin: \"0 0 10px\" }}\n          >\n            重置\n          </Button>&nbsp;&nbsp;\n          <Button\n            onClick={() => this.field.validate()}\n            type=\"primary\"\n            style={{ margin: \"0 0 10px\" }}\n          >\n            校验\n          </Button>\n        </div>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "图片上传（卡片式）",
        "order": "2",
        "jsx": "import { Upload } from \"@icedesign/base\";\n\nconst { ImageUpload } = Upload;\n\nReactDOM.render(\n  <ImageUpload\n    listType=\"picture-card\"\n    action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n    accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n    locale={{\n      image: {\n        cancel: \"取消上传\",\n        addPhoto: \"上传图片\"\n      }\n    }}\n    beforeUpload={beforeUpload}\n    onChange={onChange}\n    onSuccess={onSuccess}\n    onError={onError}\n    defaultFileList={[\n      {\n        name: \"IMG.png\",\n        status: \"done\",\n        downloadURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        fileURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        imgURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n      }\n    ]}\n  />,\n  mountNode\n);\n\nfunction beforeUpload(info) {\n  console.log(\"beforeUpload callback : \", info);\n}\n\nfunction onChange(info) {\n  console.log(\"onChane callback : \", info);\n}\n\nfunction onSuccess(res, file) {\n  console.log(\"onSuccess callback : \", res, file);\n}\n\nfunction onError(file) {\n  console.log(\"onError callback : \", file);\n}\n\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "文件上传",
        "order": "8",
        "jsx": "import { Upload } from \"@icedesign/base\";\n\nconst fileList = [\n  {\n    fileName: \"IMG.png\",\n    status: \"done\",\n    size: 1024,\n    downloadURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n    fileURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n    imgURL:\n      \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n  }\n];\n\nconst cell = (file, idx) => {\n  return (\n    <div className=\"custom\" key={idx}>\n      <img src={file.imgURL} />\n      <span>\n        <li> {file.fileName} </li>\n        <li> {file.size / 1024}KB</li>\n      </span>\n    </div>\n  );\n};\n\nReactDOM.render(\n  <div>\n    <Upload.List listType=\"text\" fileList={fileList} />\n    <br />\n    <Upload.List listType=\"text-image\" fileList={fileList} />\n    <br />\n    <Upload.List listType=\"picture-card\" fileList={fileList} />\n    <br />自定义内容\n    <Upload.List listType=\"text-image\" cell={cell} fileList={fileList} />\n  </div>,\n  mountNode\n);\n\n",
        "css": ".custom img {\n    width: 50px;\n    height: 50px;\n    float: left;\n}\n.custom span {\n    float: left;\n    color: blue;\n    margin-left: 10px;\n}\n.custom li {\n    list-style: none;\n    line-height: 25px;\n}\n",
        "body": "\n"
      },
      {
        "title": "图片上传",
        "order": "1",
        "jsx": "import { Upload, Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Upload\n    listType=\"text-image\"\n    action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n    accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n    beforeUpload={beforeUpload}\n    onChange={onChange}\n    defaultFileList={[\n      {\n        name: \"IMG.png\",\n        status: \"done\",\n        size: 100,\n        downloadURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        fileURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        imgURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n      }\n    ]}\n  >\n    <Button type=\"primary\" style={{ margin: \"0 0 10px\" }}>\n      上传文件\n    </Button>\n  </Upload>,\n  mountNode\n);\n\nfunction beforeUpload(info) {\n  console.log(\"beforeUpload callback : \", info);\n}\n\nfunction onChange(info) {\n  console.log(\"onChane callback : \", info);\n}\n\n",
        "css": "",
        "body": "\n"
      },
      {
        "title": "文件上传",
        "order": "0",
        "jsx": "import { Upload, Button } from \"@icedesign/base\";\n\nReactDOM.render(\n  <Upload\n    listType=\"text\"\n    action=\"//www.easy-mock.com/mock/5b960dce7db69152d06475bc/ice/upload\" // 该接口仅作测试使用，业务请勿使用\n    accept=\"image/png, image/jpg, image/jpeg, image/gif, image/bmp\"\n    beforeUpload={beforeUpload}\n    onChange={onChange}\n    onSuccess={onSuccess}\n    multiple\n    defaultFileList={[\n      {\n        name: \"IMG.png\",\n        status: \"done\",\n        size: 1024,\n        downloadURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        fileURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\",\n        imgURL:\n          \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n      }\n    ]}\n  >\n    <Button type=\"primary\" style={{ margin: \"0 0 10px\" }}>\n      上传文件\n    </Button>\n  </Upload>,\n  mountNode\n);\n\nfunction beforeUpload(info) {\n  console.log(\"beforeUpload : \", info);\n}\n\nfunction onChange(info) {\n  console.log(\"onChane : \", info);\n}\n\nfunction onSuccess(info) {\n  console.log(\"onSuccess : \", info);\n}\n\n",
        "css": "",
        "body": "\n"
      }
    ]
  }
]